{
  "sha": "e6a9748e70a1aec45b98af39982919b5649d447e",
  "node_id": "C_kwDOCQOkhNoAKGU2YTk3NDhlNzBhMWFlYzQ1Yjk4YWYzOTk4MjkxOWI1NjQ5ZDQ0N2U",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2023-10-20T09:14:53Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2023-10-20T09:14:53Z"
    },
    "message": "refactor(ui/plugin): further divide functionality into plugins (#615)\n\n* move stat to plugins folder\r\n\r\n* move editor plugs to common plugins folder\r\n\r\n* implement list-close-editor standalone plugin\r\n\r\n* impl StateManager for Loose Coupling of Reply, Edit, and Submit Components\r\n\r\n* rename\r\n\r\n* remove Mover dep in editor edit state plugin\r\n\r\n* rename editor state plugins\r\n\r\n* refactor header plugin of editor\r\n\r\n* separate header plugins\r\n\r\n* add and remove event binding\r\n\r\n* fix plugin btn ui refresh when conf updating\r\n\r\n* rename editor plugins and remove plug classname suffix\r\n\r\n* editor kit reload plugin when conf-loaded\r\n\r\n* impl clear method in editor-kit class\r\n\r\n* separate version-check from list\r\n\r\n* separate unread from list\r\n\r\n* make context maintain globally accessible `page` data\r\n\r\n* rename plug to plugin\r\n\r\n* wrap the options of List up\r\n\r\n* separate functionalities of list\r\n\r\n* rename",
    "tree": {
      "sha": "fc0f38d27329ec89def79a1a979edb3af23f2466",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/fc0f38d27329ec89def79a1a979edb3af23f2466"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/e6a9748e70a1aec45b98af39982919b5649d447e",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlMkUNCRBK7hj4Ov3rIwAAw0EIAKoNEXDL3LzOSazLnxZq07HB\nNZl1UBis2smUqdq6PoZUjNkkeJsljlxxQjI2392xjoXUSBGY05TZt0m9BJs+IRue\npkv5Ka5UW0e344Z1BTt4oLt/GCOa2Ul/+8vADmv8RIWZ8WKgf5XL0jijmXoWSal8\n2I4KTr3A6OrrnazZEpyZVop/AgrXn6ivqxFblN3aQysquTumpo8++OS0NU9ddqCb\n1IxLcbOimx2Mx0z+EP8YVpSIsnsCxMZ2FSbbVoDkxwotxjYSuTesHBq7SvqRZ/C1\nesi1x3k32adUj402GJV3VrWxhaC7tHizOYBNsYELY5XwXyYkfBoNJwALWtRq/Uk=\n=p5FZ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree fc0f38d27329ec89def79a1a979edb3af23f2466\nparent 0f35532f0ba404ca37420c2485de1dee1ca7c006\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1697793293 +0800\ncommitter GitHub <noreply@github.com> 1697793293 +0800\n\nrefactor(ui/plugin): further divide functionality into plugins (#615)\n\n* move stat to plugins folder\r\n\r\n* move editor plugs to common plugins folder\r\n\r\n* implement list-close-editor standalone plugin\r\n\r\n* impl StateManager for Loose Coupling of Reply, Edit, and Submit Components\r\n\r\n* rename\r\n\r\n* remove Mover dep in editor edit state plugin\r\n\r\n* rename editor state plugins\r\n\r\n* refactor header plugin of editor\r\n\r\n* separate header plugins\r\n\r\n* add and remove event binding\r\n\r\n* fix plugin btn ui refresh when conf updating\r\n\r\n* rename editor plugins and remove plug classname suffix\r\n\r\n* editor kit reload plugin when conf-loaded\r\n\r\n* impl clear method in editor-kit class\r\n\r\n* separate version-check from list\r\n\r\n* separate unread from list\r\n\r\n* make context maintain globally accessible `page` data\r\n\r\n* rename plug to plugin\r\n\r\n* wrap the options of List up\r\n\r\n* separate functionalities of list\r\n\r\n* rename"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/e6a9748e70a1aec45b98af39982919b5649d447e",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/e6a9748e70a1aec45b98af39982919b5649d447e",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/e6a9748e70a1aec45b98af39982919b5649d447e/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/0f35532f0ba404ca37420c2485de1dee1ca7c006"
    }
  ],
  "stats": {
    "total": 3311,
    "additions": 1839,
    "deletions": 1472
  },
  "files": [
    {
      "sha": "06551db2649fe36702ab17d64e21f90bbf75d987",
      "filename": "ui/.eslintrc.js",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2F.eslintrc.js",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2F.eslintrc.js",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2F.eslintrc.js?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -28,6 +28,7 @@ module.exports = {\n     'no-lonely-if': 0,\n     'prefer-destructuring': 0,\n     'import/no-cycle': 0,\n+    'import/prefer-default-export': 0,\n     '@typescript-eslint/lines-between-class-members': 0,\n     '@typescript-eslint/no-unused-vars': 'off',\n     '@typescript-eslint/no-use-before-define': 0,"
    },
    {
      "sha": "8ffb6a73e75b9032623185237b6ce988b316dd58",
      "filename": "ui/packages/artalk-sidebar/src/pages/comments.vue",
      "status": "modified",
      "additions": 22,
      "deletions": 19,
      "changes": 41,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk-sidebar%2Fsrc%2Fpages%2Fcomments.vue",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk-sidebar%2Fsrc%2Fpages%2Fcomments.vue",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk-sidebar%2Fsrc%2Fpages%2Fcomments.vue?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -41,27 +41,30 @@ onMounted(() => {\n   })\n \n   // 初始化评论列表\n-  const list = new Artalk.ListLite(artalk!.ctx)\n+  const list = new Artalk.List(artalk!.ctx, {\n+    liteMode: true,\n+    flatMode: true,\n+    unreadHighlight: true,\n+    scrollListenerAt: wrapEl.value,\n+    pageMode: 'pagination',\n+    // pageSize: 20 // TODO consider fixed pageSize value in sidebar\n+    noCommentText: `<div class=\"atk-sidebar-no-content\">${t('noContent')}</div>`,\n+    renderComment: (comment) => {\n+      const pageURL = comment.getData().page_url\n+      comment.getRender().setOpenURL(`${pageURL}#atk-comment-${comment.getID()}`)\n+      comment.getConf().onReplyBtnClick = () => {\n+        artalk!.ctx.replyComment(comment.getData(), comment.getEl())\n+      }\n+    },\n+    paramsEditor: (params) => {\n+      params.type = curtTab.value // 列表数据类型\n+      params.site_name = curtSite.value // 站点名\n+      if (search.value) params.search = search.value\n+    }\n+  })\n+\n   artalk!.ctx.inject('list', list)\n \n-  list.flatMode = true\n-  list.unreadHighlight = true\n-  list.scrollListenerAt = wrapEl.value\n-  list.pageMode = 'pagination'\n-  // list.pageSize = 20 // TODO consider fixed pageSize value in sidebar\n-  list.noCommentText = `<div class=\"atk-sidebar-no-content\">${t('noContent')}</div>`\n-  list.renderComment = (comment) => {\n-    const pageURL = comment.getData().page_url\n-    comment.getRender().setOpenURL(`${pageURL}#atk-comment-${comment.getID()}`)\n-    comment.getConf().onReplyBtnClick = () => {\n-      artalk!.ctx.replyComment(comment.getData(), comment.getEl(), true)\n-    }\n-  }\n-  list.paramsEditor = (params) => {\n-    params.type = curtTab.value // 列表数据类型\n-    params.site_name = curtSite.value // 站点名\n-    if (search.value) params.search = search.value\n-  }\n   artalk!.on('list-inserted', (data) => {\n     wrapEl.value!.scrollTo(0, 0)\n   })"
    },
    {
      "sha": "578aeae04b6d75ed38b2fd391d5f5ac1c1ada5c5",
      "filename": "ui/packages/artalk/src/artalk.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -2,15 +2,16 @@ import './style/main.scss'\n \n import type ArtalkConfig from '~/types/artalk-config'\n import type { EventPayloadMap } from '~/types/event'\n-import type ArtalkPlug from '~/types/plug'\n+import type ArtalkPlugin from '~/types/plugin'\n import type Context from '~/types/context'\n import type { EventHandler } from './lib/event-manager'\n import ConcreteContext from './context'\n import defaults from './defaults'\n import { handelBaseConf } from './config'\n import Services from './service'\n-import * as Stat from './lib/stat'\n-import ListLite from './list/list-lite'\n+import { DefaultPlugins } from './plugins'\n+import * as Stat from './plugins/stat'\n+import List from './list/list'\n import Api from './api'\n \n /**\n@@ -21,15 +22,15 @@ import Api from './api'\n export default class Artalk {\n   private static instance?: Artalk\n \n-  public static ListLite = ListLite\n+  public static List = List\n   public static readonly defaults: ArtalkConfig = defaults\n \n   public conf!: ArtalkConfig\n   public ctx!: Context\n   public $root!: HTMLElement\n \n   /** Plugins */\n-  protected static plugins: ArtalkPlug[] = [ Stat.PvCountWidget ]\n+  protected static plugins: ArtalkPlugin[] = [ ...DefaultPlugins ]\n   public static DisabledComponents: string[] = []\n \n   constructor(conf: Partial<ArtalkConfig>) {\n@@ -56,6 +57,8 @@ export default class Artalk {\n       if (typeof plugin === 'function')\n         plugin(this.ctx)\n     })\n+\n+    this.ctx.trigger('inited')\n   }\n \n   /** Init Artalk */\n@@ -66,7 +69,7 @@ export default class Artalk {\n   }\n \n   /** Use Plugin (plugin will be called in instance `use` func) */\n-  public use(plugin: ArtalkPlug) {\n+  public use(plugin: ArtalkPlugin) {\n     Artalk.plugins.push(plugin)\n     if (typeof plugin === 'function') plugin(this.ctx)\n   }\n@@ -86,6 +89,7 @@ export default class Artalk {\n   /** Destroy instance of Artalk */\n   public destroy() {\n     if (!Artalk.instance) throw Error('cannot call `destroy` function before call `load`')\n+    this.ctx.trigger('destroy')\n     Artalk.instance.$root.remove()\n     delete Artalk.instance\n   }\n@@ -115,7 +119,7 @@ export default class Artalk {\n   // ===========================\n \n   /** Use Plugin (static method) */\n-  public static use(plugin: ArtalkPlug) {\n+  public static use(plugin: ArtalkPlugin) {\n     this.plugins.push(plugin)\n     if (this.instance && typeof plugin === 'function') plugin(this.instance.ctx)\n   }"
    },
    {
      "sha": "e0ada94b0eeeb91dbc1f8f84032b8a87c0ed5f9d",
      "filename": "ui/packages/artalk/src/comment/actions.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Factions.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Factions.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Factions.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -50,9 +50,6 @@ export default class CommentActions {\n \n       // 刷新当前 Comment UI\n       this.comment.setData(data)\n-\n-      // 刷新 List UI\n-      this.ctx.listRefreshUI()\n     }).catch((err) => {\n       console.error(err)\n       btnElem.setError(this.ctx.$t('editFail'))"
    },
    {
      "sha": "f41a3f8a83ee8bd0e659d3669426ce5395465ff0",
      "filename": "ui/packages/artalk/src/comment/renders/content.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Fcontent.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Fcontent.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Fcontent.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -21,19 +21,19 @@ export default function renderContent(ctx: RenderCtx) {\n     </div>`)\n   ctx.$body.insertAdjacentElement('beforeend', collapsedInfoEl)\n \n-  const contentShowBtn = collapsedInfoEl.querySelector('.atk-show-btn')!\n+  const contentShowBtn = collapsedInfoEl.querySelector<HTMLElement>('.atk-show-btn')!\n   contentShowBtn.addEventListener('click', (e) => {\n     e.stopPropagation() // 防止穿透\n \n     if (ctx.$content.classList.contains('atk-hide')) {\n       ctx.$content.innerHTML = ctx.comment.getContentMarked()\n       ctx.$content.classList.remove('atk-hide')\n       Ui.playFadeInAnim(ctx.$content)\n-      contentShowBtn.innerHTML = ctx.ctx.$t('collapse')\n+      contentShowBtn.innerText = ctx.ctx.$t('collapse')\n     } else {\n       ctx.$content.innerHTML = ''\n       ctx.$content.classList.add('atk-hide')\n-      contentShowBtn.innerHTML = ctx.ctx.$t('expand')\n+      contentShowBtn.innerText = ctx.ctx.$t('expand')\n     }\n   })\n }"
    },
    {
      "sha": "644c46a619c3b4c21a85a53213ea9cde953b3809",
      "filename": "ui/packages/artalk/src/comment/renders/reply-to.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Freply-to.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Freply-to.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomment%2Frenders%2Freply-to.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -18,7 +18,7 @@ export default function renderReplyTo(ctx: RenderCtx) {\n   $nick.innerText = `@${ctx.cConf.replyTo.nick}`\n   $nick.onclick = () => { ctx.comment.getActions().goToReplyComment() }\n   let replyContent = marked(ctx.ctx, ctx.cConf.replyTo.content)\n-  if (ctx.cConf.replyTo.is_collapsed) replyContent = `[${ctx.ctx.$t('collapsed')}]`\n+  if (ctx.cConf.replyTo.is_collapsed) replyContent = `[${Utils.htmlEncode(ctx.ctx.$t('collapsed'))}]`\n   ctx.$replyTo.querySelector<HTMLElement>('.atk-content')!.innerHTML = replyContent\n   ctx.$body.prepend(ctx.$replyTo)\n }"
    },
    {
      "sha": "2a26f2d3a2f9478e0e688ab4064dd4b686bdf7c6",
      "filename": "ui/packages/artalk/src/context.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 58,
      "changes": 88,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,5 +1,5 @@\n import type ArtalkConfig from '~/types/artalk-config'\n-import type { CommentData, NotifyData } from '~/types/artalk-data'\n+import type { CommentData, NotifyData, PageData } from '~/types/artalk-data'\n import type { EventPayloadMap } from '~/types/event'\n import type ContextApi from '~/types/context'\n import type { TInjectedServices } from './service'\n@@ -13,8 +13,6 @@ import * as I18n from './i18n'\n import { getLayerWrap } from './layer'\n import { SidebarShowPayload } from './layer/sidebar-layer'\n import Comment from './comment'\n-import Api from './api'\n-import List from './list'\n import EventManager from './lib/event-manager'\n \n // Auto dependency injection\n@@ -30,6 +28,8 @@ class Context implements ContextApi {\n   public markedReplacers: ((raw: string) => string)[] = []\n \n   private commentList: Comment[] = [] // Note: 无层级结构 + 无须排列\n+  private page?: PageData\n+  private unreadList: NotifyData[] = []\n \n   /* Event Manager */\n   private events = new EventManager<EventPayloadMap>()\n@@ -59,6 +59,10 @@ class Context implements ContextApi {\n     return this.commentList\n   }\n \n+  public clearCommentList() {\n+    this.commentList = []\n+  }\n+\n   public getCommentDataList() {\n     return this.commentList.map(c => c.getData())\n   }\n@@ -67,32 +71,12 @@ class Context implements ContextApi {\n     return this.commentList.find(c => c.getData().id === id)\n   }\n \n-  public deleteComment(_comment: number|Comment) {\n-    let comment: Comment\n-    if (typeof _comment === 'number') {\n-      const findComment = this.findComment(_comment)\n-      if (!findComment) throw Error(`Comment ${_comment} cannot be found`)\n-      comment = findComment\n-    } else comment = _comment\n-\n-    comment.getEl().remove()\n-    this.commentList.splice(this.commentList.indexOf(comment), 1)\n-\n-    if (this.list) {\n-      const listData = this.list.getData()\n-      if (listData) listData.total -= 1 // 评论数减 1\n-\n-      this.list.refreshUI()\n-    }\n+  public deleteComment(id: number) {\n+    this.list?.deleteComment(id)\n   }\n \n   public clearAllComments() {\n-    if (this.list) {\n-      this.list.getCommentsWrapEl().innerHTML = ''\n-      this.list.clearData()\n-    }\n-\n-    this.commentList = []\n+    this.list?.clearAllComments()\n   }\n \n   public insertComment(commentData: CommentData) {\n@@ -103,24 +87,32 @@ class Context implements ContextApi {\n     this.list?.updateComment(commentData)\n   }\n \n-  public replyComment(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void {\n-    this.editor.setReply(commentData, $comment, scroll)\n-  }\n-\n-  public cancelReplyComment(): void {\n-    this.editor.cancelReply()\n+  public replyComment(commentData: CommentData, $comment: HTMLElement): void {\n+    this.editor.setReply(commentData, $comment)\n   }\n \n   public editComment(commentData: CommentData, $comment: HTMLElement): void {\n     this.editor.setEditComment(commentData, $comment)\n   }\n \n-  public cancelEditComment(): void {\n-    this.editor.cancelEditComment()\n+  /** 未读通知 */\n+  public getUnreadList() {\n+    return this.unreadList\n+  }\n+\n+  public updateUnreadList(notifies: NotifyData[]): void {\n+    this.unreadList = notifies\n+    this.trigger('unread-updated', notifies)\n   }\n \n-  public updateNotifies(notifies: NotifyData[]): void {\n-    this.list?.updateUnread(notifies)\n+  /** 页面数据 */\n+  getPage(): PageData|undefined {\n+    return this.page\n+  }\n+\n+  updatePage(pageData: PageData): void {\n+    this.page = pageData\n+    this.trigger('page-loaded', pageData)\n   }\n \n   /* 评论列表 */\n@@ -132,27 +124,7 @@ class Context implements ContextApi {\n     this.listReload()\n   }\n \n-  public listRefreshUI(): void {\n-    this.list?.refreshUI()\n-  }\n-\n-  public listHashGotoCheck(): void {\n-    if (!this.list || !(this.list instanceof List)) return\n-    const list = this.list as List\n-\n-    list.goToCommentDelay = false\n-    list.checkGoToCommentByUrlHash()\n-  }\n-\n   /* 编辑器 */\n-  public editorOpen(): void {\n-    this.editor.open()\n-  }\n-\n-  public editorClose(): void {\n-    this.editor.close()\n-  }\n-\n   public editorShowLoading(): void {\n     this.editor.showLoading()\n   }\n@@ -165,8 +137,8 @@ class Context implements ContextApi {\n     this.editor.showNotify(msg, type)\n   }\n \n-  public editorResetUI(): void {\n-    this.editor.resetUI()\n+  public editorResetState(): void {\n+    this.editor.resetState()\n   }\n \n   /* 侧边栏 */"
    },
    {
      "sha": "c5e89a99302997a007515fcf8b58700d27389000",
      "filename": "ui/packages/artalk/src/editor/core/header-input-plug.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 81,
      "changes": 81,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,81 +0,0 @@\n-import User from '@/lib/user'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n-\n-export default class HeaderInputPlug extends EditorPlug {\n-  constructor(kit: PlugKit) {\n-    super(kit)\n-\n-    this.kit.useEvents().on('header-input', (({ field, $input }) => {\n-      if (field === 'nick' || field === 'email')\n-        this.fetchUserInfo()\n-    }))\n-\n-    const onLinkInputChange = () => this.onLinkInputChange()\n-\n-    this.kit.useMounted(() => {\n-      this.kit.useUI().$link.addEventListener('change', onLinkInputChange)\n-    })\n-    this.kit.useUnmounted(() => {\n-      this.kit.useUI().$link.addEventListener('change', onLinkInputChange)\n-    })\n-  }\n-\n-  private queryUserInfo = {\n-    timeout: <number|null>null,\n-    abortFunc: <(() => void)|null>null\n-  }\n-\n-  /** 远程获取用户数据 */\n-  private fetchUserInfo() {\n-    User.logout()\n-\n-    // 获取用户信息\n-    if (this.queryUserInfo.timeout) window.clearTimeout(this.queryUserInfo.timeout) // 清除待发出的请求\n-    if (this.queryUserInfo.abortFunc) this.queryUserInfo.abortFunc() // 之前发出未完成的请求立刻中止\n-\n-    this.queryUserInfo.timeout = window.setTimeout(() => {\n-      this.queryUserInfo.timeout = null // 清理\n-\n-      const {req, abort} = this.kit.useApi().user.userGet(\n-        User.data.nick, User.data.email\n-      )\n-      this.queryUserInfo.abortFunc = abort\n-      req.then(data => {\n-        if (!data.is_login) {\n-          User.logout()\n-        }\n-\n-        // 未读消息更新\n-        this.kit.useGlobalCtx().updateNotifies(data.unread)\n-\n-        // 若用户为管理员，执行登陆操作\n-        if (User.checkHasBasicUserInfo() && !data.is_login && data.user?.is_admin) {\n-          // 显示登录窗口\n-          this.kit.useGlobalCtx().checkAdmin({\n-            onSuccess: () => {}\n-          })\n-        }\n-\n-        // 自动填入 link\n-        if (data.user && data.user.link) {\n-          this.kit.useUI().$link.value = data.user.link\n-          User.update({ link: data.user.link })\n-        }\n-      })\n-      .catch(() => {})\n-      .finally(() => {\n-        this.queryUserInfo.abortFunc = null // 清理\n-      })\n-    }, 400) // 延迟执行，减少请求次数\n-  }\n-\n-  private onLinkInputChange() {\n-    // Link URL 自动补全协议\n-    const link = this.kit.useUI().$link.value.trim()\n-    if (!!link && !/^(http|https):\\/\\//.test(link)) {\n-      this.kit.useUI().$link.value = `https://${link}`\n-      User.update({ link: this.kit.useUI().$link.value })\n-    }\n-  }\n-}"
    },
    {
      "sha": "e73f90464750e89c01d98493c532f6328d26b781",
      "filename": "ui/packages/artalk/src/editor/core/header-plug.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 48,
      "changes": 48,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,48 +0,0 @@\n-import User from '@/lib/user'\n-import $t from '@/i18n'\n-import Editor from '../editor'\n-import EditorPlug from '../editor-plug'\n-import EditPlug from './edit-plug'\n-import PlugKit from '../plug-kit'\n-\n-export default class HeaderPlug extends EditorPlug {\n-  private get $inputs() {\n-    return this.kit.useEditor().getHeaderInputEls()\n-  }\n-\n-  constructor(kit: PlugKit) {\n-    super(kit)\n-\n-    const inputEventFns: {[name: string]: () => void} = {}\n-\n-    // the input event\n-    const onInput = ($input: HTMLInputElement, key: string) => () => {\n-      if (this.kit.useDeps(EditPlug)?.getIsEditMode()) return // 评论编辑模式，不修改个人信息\n-\n-      User.update({ [key]: $input.value.trim() })\n-\n-      // trigger header input event\n-      this.kit.useEvents().trigger('header-input', { field: key, $input })\n-    }\n-\n-    this.kit.useMounted(() => {\n-      // set placeholder and sync header input value\n-      Object.entries(this.$inputs).forEach(([key, $input]) => {\n-        $input.placeholder = `${$t(key as any)}`\n-        $input.value = User.data[key] || ''\n-      })\n-\n-      // bind the event\n-      Object.entries(this.$inputs).forEach(([key, $input]) => {\n-        $input.addEventListener('input', inputEventFns[key] = onInput($input, key))\n-      })\n-    })\n-\n-    this.kit.useUnmounted(() => {\n-      // unmount the event\n-      Object.entries(this.$inputs).forEach(([key, $input]) => {\n-        $input.removeEventListener('input', inputEventFns[key])\n-      })\n-    })\n-  }\n-}"
    },
    {
      "sha": "3cfc22295397abcf769a67c06241ee7d8a2e3b23",
      "filename": "ui/packages/artalk/src/editor/core/reply-plug.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 59,
      "changes": 59,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,59 +0,0 @@\n-import type { CommentData } from '~/types/artalk-data'\n-import * as Utils from '@/lib/utils'\n-import * as Ui from '@/lib/ui'\n-import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import MoverPlug from './mover-plug'\n-import PlugKit from '../plug-kit'\n-\n-export default class ReplyPlug extends EditorPlug {\n-  private comment?: CommentData\n-\n-  constructor(kit: PlugKit) {\n-    super(kit)\n-  }\n-\n-  getComment() {\n-    return this.comment\n-  }\n-\n-  setReply(commentData: CommentData, $comment: HTMLElement, scroll = true) {\n-    this.kit.useEditor().cancelEditComment()\n-    this.cancelReply()\n-\n-    const ui = this.kit.useUI()\n-    if (!ui.$sendReply) {\n-      ui.$sendReply = Utils.createElement(\n-        `<div class=\"atk-send-reply\">` +\n-          `${$t('reply')} ` +\n-          `<span class=\"atk-text\"></span><span class=\"atk-cancel\">×</span>` +\n-        `</div>`\n-      )\n-      ui.$sendReply.querySelector<HTMLElement>('.atk-text')!.innerText = `@${commentData.nick}`\n-      ui.$sendReply.addEventListener('click', () => {\n-        this.kit.useEditor().cancelReply()\n-      })\n-      ui.$textareaWrap.append(ui.$sendReply)\n-    }\n-\n-    this.comment = commentData\n-    this.kit.useDeps(MoverPlug)?.move($comment)\n-\n-    if (scroll) Ui.scrollIntoView(ui.$el)\n-\n-    ui.$textarea.focus()\n-  }\n-\n-  cancelReply() {\n-    if (!this.comment) return\n-\n-    const ui = this.kit.useUI()\n-    if (ui.$sendReply) {\n-      ui.$sendReply.remove()\n-      ui.$sendReply = undefined\n-    }\n-    this.comment = undefined\n-\n-    this.kit.useDeps(MoverPlug)?.back()\n-  }\n-}"
    },
    {
      "sha": "de37752125c4bf2ed7c0f966cc6f6c1100839a67",
      "filename": "ui/packages/artalk/src/editor/core/submit-plug.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 99,
      "changes": 99,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,99 +0,0 @@\n-import type { CommentData } from '~/types/artalk-data'\n-import $t from '@/i18n'\n-import User from '@/lib/user'\n-import EditorPlug from '../editor-plug'\n-import ReplyPlug from './reply-plug'\n-import PlugKit from '../plug-kit'\n-\n-interface CustomSubmit {\n-  activeCond: () => void\n-  pre?: () => void\n-  req?: () => Promise<CommentData>\n-  post?: (nComment: CommentData) => void\n-}\n-\n-export default class SubmitPlug extends EditorPlug {\n-  customs: CustomSubmit[] = []\n-\n-  constructor(kit: PlugKit) {\n-    super(kit)\n-  }\n-\n-  async do() {\n-    if (this.kit.useEditor().getContentFinal().trim() === '') {\n-      this.kit.useEditor().focus()\n-      return\n-    }\n-\n-    const custom = this.customs.find(o => o.activeCond())\n-\n-    this.kit.useGlobalCtx().trigger('editor-submit')\n-    this.kit.useEditor().showLoading()\n-\n-    try {\n-      // pre submit\n-      if (custom?.pre) custom.pre()\n-\n-      let nComment: CommentData\n-\n-      // submit request\n-      if (custom?.req) nComment = await custom.req()\n-      else nComment = await this.reqAdd()\n-\n-      // post submit\n-      if (custom?.post) custom.post(nComment)\n-      else this.postSubmitAdd(nComment)\n-    } catch (err: any) {\n-      // submit error\n-      console.error(err)\n-      this.kit.useEditor().showNotify(`${$t('commentFail')}，${err.msg || String(err)}`, 'e')\n-      return\n-    } finally {\n-      this.kit.useEditor().hideLoading()\n-    }\n-\n-    this.kit.useEditor().reset() // 复原编辑器\n-    this.kit.useGlobalCtx().trigger('editor-submitted')\n-  }\n-\n-  registerCustom(c: CustomSubmit) {\n-    this.customs.push(c)\n-  }\n-\n-  // -------------------------------------------------------------------\n-  //  Submit CommentAdd\n-  // -------------------------------------------------------------------\n-\n-  private async reqAdd() {\n-    const nComment = await this.kit.useApi().comment.add({\n-      ...this.getSubmitAddParams()\n-    })\n-    return nComment\n-  }\n-\n-  private getSubmitAddParams() {\n-    const { nick, email, link } = User.data\n-    const conf = this.kit.useConf()\n-    const reply = this.kit.useDeps(ReplyPlug)?.getComment()\n-\n-    return {\n-      content: this.kit.useEditor().getContentFinal(),\n-      nick, email, link,\n-      rid: (!reply) ? 0 : reply.id,\n-      page_key: (!reply) ? conf.pageKey : reply.page_key,\n-      page_title: (!reply) ? conf.pageTitle : undefined,\n-      site_name: (!reply) ? conf.site : reply.site_name\n-    }\n-  }\n-\n-  private postSubmitAdd(commentNew: CommentData) {\n-    // 回复不同页面的评论，跳转到新页面\n-    const replyComment = this.kit.useDeps(ReplyPlug)?.getComment()\n-    const conf = this.kit.useConf()\n-    if (!!replyComment && replyComment.page_key !== conf.pageKey) {\n-      window.open(`${replyComment.page_url}#atk-comment-${commentNew.id}`)\n-    }\n-\n-    this.kit.useGlobalCtx().insertComment(commentNew)\n-  }\n-}"
    },
    {
      "sha": "4e7c82c59ec912826da5e992506b4adde93dd4f8",
      "filename": "ui/packages/artalk/src/editor/editor.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 53,
      "changes": 73,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,23 +1,19 @@\n import type { CommentData } from '~/types/artalk-data'\n-import type EditorApi from '~/types/editor'\n+import type { EditorApi, EditorState } from '~/types/editor'\n import type Context from '~/types/context'\n import Component from '../lib/component'\n import * as Ui from '../lib/ui'\n import marked from '../lib/marked'\n import { render, EditorUI } from './ui'\n-import PlugManager from './plug-manager'\n-import MoverPlug from './core/mover-plug'\n-import ReplyPlug from './core/reply-plug'\n-import EditPlug from './core/edit-plug'\n-import SubmitPlug from './core/submit-plug'\n-import ClosablePlug from './core/closable-plug'\n+import EditorStateManager from './state'\n \n class Editor extends Component implements EditorApi {\n   private ui: EditorUI\n-  getUI() { return this.ui }\n+  private state: EditorStateManager\n \n-  private plugs?: PlugManager\n-  getPlugs() { return this.plugs }\n+  getUI() { return this.ui }\n+  getPlugs() { return this.ctx.get('editorPlugs') }\n+  getState() { return this.state.get() }\n \n   constructor(ctx: Context) {\n     super(ctx)\n@@ -26,18 +22,8 @@ class Editor extends Component implements EditorApi {\n     this.ui = render()\n     this.$el = this.ui.$el\n \n-    // event listen\n-    this.ctx.on('conf-loaded', () => {\n-      // trigger unmount event will call all plugs' unmount function\n-      // (this will only be called while conf reloaded, not be called at first time)\n-      this.plugs?.getEvents().trigger('unmounted')\n-\n-      // initialize editor plugs\n-      this.plugs = new PlugManager(this)\n-\n-      // trigger event for plug initialization\n-      this.plugs.getEvents().trigger('mounted')\n-    })\n+    // init state manager\n+    this.state = new EditorStateManager(this)\n   }\n \n   getHeaderInputEls() {\n@@ -48,7 +34,8 @@ class Editor extends Component implements EditorApi {\n     let content = this.getContentRaw()\n \n     // plug hook: final content transformer\n-    if (this.plugs) content = this.plugs.getTransformedContent(content)\n+    const plugs = this.getPlugs()\n+    if (plugs) content = plugs.getTransformedContent(content)\n \n     return content\n   }\n@@ -65,7 +52,7 @@ class Editor extends Component implements EditorApi {\n     this.ui.$textarea.value = val\n \n     // plug hook: content updated\n-    this.plugs?.getEvents().trigger('content-updated', val)\n+    this.getPlugs()?.getEvents().trigger('content-updated', val)\n   }\n \n   insertContent(val: string) {\n@@ -94,29 +81,19 @@ class Editor extends Component implements EditorApi {\n \n   reset() {\n     this.setContent('')\n-    this.cancelReply()\n-    this.cancelEditComment()\n-  }\n-\n-  resetUI() {\n-    // move editor to the initial position\n-    this.plugs?.get(MoverPlug)?.back()\n+    this.resetState()\n   }\n \n-  setReply(commentData: CommentData, $comment: HTMLElement, scroll = true) {\n-    this.plugs?.get(ReplyPlug)?.setReply(commentData, $comment, scroll)\n+  resetState() {\n+    this.state.switch('normal')\n   }\n \n-  cancelReply() {\n-    this.plugs?.get(ReplyPlug)?.cancelReply()\n+  setReply(comment: CommentData, $comment: HTMLElement) {\n+    this.state.switch('reply', { comment, $comment })\n   }\n \n-  setEditComment(commentData: CommentData, $comment: HTMLElement) {\n-    this.plugs?.get(EditPlug)?.edit(commentData, $comment)\n-  }\n-\n-  cancelEditComment() {\n-    this.plugs?.get(EditPlug)?.cancelEdit()\n+  setEditComment(comment: CommentData, $comment: HTMLElement) {\n+    this.state.switch('edit', { comment, $comment })\n   }\n \n   showNotify(msg: string, type: any) {\n@@ -131,18 +108,8 @@ class Editor extends Component implements EditorApi {\n     Ui.hideLoading(this.ui.$el)\n   }\n \n-  async submit() {\n-    const submitPlug = this.plugs?.get(SubmitPlug)\n-    if (!submitPlug) throw Error('submitManger not initialized')\n-    await submitPlug.do()\n-  }\n-\n-  close() {\n-    this.plugs?.get(ClosablePlug)?.close()\n-  }\n-\n-  open() {\n-    this.plugs?.get(ClosablePlug)?.open()\n+  submit() {\n+    this.ctx.trigger('editor-submit')\n   }\n }\n "
    },
    {
      "sha": "3d9c5e2c4f62ea0267fbc188ca49d833ca141415",
      "filename": "ui/packages/artalk/src/editor/plug-enabled.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 38,
      "changes": 38,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,38 +0,0 @@\n-import type ArtalkConfig from '~/types/artalk-config'\n-import EditorPlug from './editor-plug'\n-import LocalStoragePlug from './core/local-storage-plug'\n-import HeaderPlug from './core/header-plug'\n-import TextareaPlug from './core/textarea-plug'\n-import SubmitBtnPlug from './core/submit-btn-plug'\n-import SubmitPlug from './core/submit-plug'\n-import ReplyPlug from './core/reply-plug'\n-import EditPlug from './core/edit-plug'\n-import ClosablePlug from './core/closable-plug'\n-import HeaderInputPlug from './core/header-input-plug'\n-import MoverPlug from './core/mover-plug'\n-import EmoticonsPlug from './plugs/emoticons-plug'\n-import UploadPlug from './plugs/upload-plug'\n-import PreviewPlug from './plugs/preview-plug'\n-\n-/** The default enabled plugs */\n-export const ENABLED_PLUGS: (typeof EditorPlug)[] = [\n-  // Core\n-  LocalStoragePlug,\n-  HeaderPlug, HeaderInputPlug, TextareaPlug,\n-  SubmitPlug, SubmitBtnPlug,\n-  MoverPlug, ReplyPlug, EditPlug,\n-  ClosablePlug,\n-\n-  // Extensions\n-  EmoticonsPlug, UploadPlug, PreviewPlug\n-]\n-\n-/** Get the name list of disabled plugs */\n-export function getDisabledPlugByConf(conf: ArtalkConfig): (typeof EditorPlug)[] {\n-  return [\n-    {k: UploadPlug, v: conf.imgUpload},\n-    {k: EmoticonsPlug, v: conf.emoticons},\n-    {k: PreviewPlug, v: conf.preview},\n-    {k: MoverPlug, v: conf.editorTravel},\n-  ].filter(n => !n.v).flatMap(n => n.k)\n-}"
    },
    {
      "sha": "a635a06c28a13f6b97aafae489ef8668570306ff",
      "filename": "ui/packages/artalk/src/editor/plugs/preview-plug.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 37,
      "changes": 37,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,37 +0,0 @@\n-import './preview-plug.scss'\n-\n-import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n-\n-export default class PreviewPlug extends EditorPlug {\n-  private isPlugPanelShow = false\n-\n-  constructor(kit: PlugKit) {\n-    super(kit)\n-\n-    this.usePanel(`<div class=\"atk-editor-plug-preview\"></div>`)\n-\n-    // initialize plug button\n-    let btnText = $t('preview')\n-    if (this.kit.useGlobalCtx().getMarkedInstance()) btnText += ` <i title=\"Markdown is supported\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></i>`\n-    this.useBtn(btnText)\n-\n-    // function to update content\n-    this.kit.useEvents().on('content-updated', (content) => {\n-      this.isPlugPanelShow && this.updateContent()\n-    })\n-\n-    this.usePanelShow(() => {\n-      this.isPlugPanelShow = true\n-      this.updateContent()\n-    })\n-    this.usePanelHide(() => {\n-      this.isPlugPanelShow = false\n-    })\n-  }\n-\n-  updateContent() {\n-    this.$panel!.innerHTML = this.kit.useEditor().getContentMarked()\n-  }\n-}"
    },
    {
      "sha": "757f091516b57d498614655769db49dfc45cdd60",
      "filename": "ui/packages/artalk/src/editor/state.ts",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fstate.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fstate.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fstate.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,49 @@\n+import type { EditorState } from '~/types/editor'\n+import type { CommentData } from '~/types/artalk-data'\n+import * as Ui from '@/lib/ui'\n+import type Editor from './editor'\n+import Mover from '../plugins/editor/mover'\n+\n+export default class EditorStateManager {\n+  constructor(private editor: Editor) {}\n+\n+  private stateCurt: EditorState = 'normal'\n+  private stateUnmountFn: (() => void)|null = null\n+\n+  /** Get current state */\n+  get() {\n+    return this.stateCurt\n+  }\n+\n+  /**\n+   * Switch editor state\n+   *\n+   * @param state The state to switch\n+   * @param payload The cause of state switch\n+   */\n+  switch(state: EditorState, payload?: { $comment: HTMLElement, comment: CommentData }) {\n+    // trigger unmount\n+    if (this.stateUnmountFn) {\n+      this.stateUnmountFn()\n+      this.stateUnmountFn = null\n+\n+      // move editor back to the initial position\n+      this.editor.getPlugs()?.get(Mover)?.back()\n+    }\n+\n+    // invoke effect function and save unmount function\n+    if (state !== 'normal' && payload) {\n+      // move editor position\n+      this.editor.getPlugs()?.get(Mover)?.move(payload.$comment)\n+      Ui.scrollIntoView(this.editor.getUI().$el)\n+\n+      const plugin = this.editor.getPlugs()?.getPlugs().find(p => p.editorStateEffectWhen === state)\n+      if (plugin && plugin.editorStateEffect) {\n+        this.stateUnmountFn = plugin.editorStateEffect(payload.comment)\n+      }\n+    }\n+\n+    // change current state\n+    this.stateCurt = state\n+  }\n+}"
    },
    {
      "sha": "cbd83074ea9125b192fa4813b37289751f311e8a",
      "filename": "ui/packages/artalk/src/layer/sidebar-layer.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flayer%2Fsidebar-layer.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flayer%2Fsidebar-layer.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flayer%2Fsidebar-layer.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -44,9 +44,7 @@ export default class SidebarLayer extends Component {\n       this.layer = new Layer(this.ctx, 'sidebar', this.$el)\n       this.layer.afterHide = () => {\n         // 防止评论框被吞\n-        if (this.ctx.conf.editorTravel === true) {\n-          this.ctx.editorResetUI()\n-        }\n+        this.ctx.editorResetState()\n       }\n     }\n     this.layer.show()\n@@ -115,7 +113,7 @@ export default class SidebarLayer extends Component {\n \n     // 清空 unread\n     setTimeout(() => {\n-      this.ctx.updateNotifies([])\n+      this.ctx.updateUnreadList([])\n     }, 0)\n \n     this.ctx.trigger('sidebar-show')"
    },
    {
      "sha": "e106c7fab10be65a8e6f81dce3f5e04e29392bce",
      "filename": "ui/packages/artalk/src/lib/user.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fuser.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fuser.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fuser.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -31,7 +31,11 @@ class User {\n     this.ctx?.trigger('user-changed', this.data)\n   }\n \n-  /** 注销，清除用户登录状态 */\n+  /**\n+   * Logout\n+   *\n+   * @description Logout will clear login status, but not clear user data (nick, email, link)\n+   */\n   public logout() {\n     this.update({\n       token: '',"
    },
    {
      "sha": "6b945ef8f276e9c7eaa6140a204d23362dd46741",
      "filename": "ui/packages/artalk/src/list/index.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Findex.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Findex.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Findex.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,3 +0,0 @@\n-import List from './list'\n-\n-export default List"
    },
    {
      "sha": "bf15a5bddac561158f8cdb41e6f65c101fc77a20",
      "filename": "ui/packages/artalk/src/list/layout.ts",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flayout.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flayout.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flayout.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,120 @@\n+import type { CommentData, ListData } from '~/types/artalk-data'\n+import * as Ui from '@/lib/ui'\n+import Comment from '../comment/comment'\n+import * as ListNest from './nest'\n+\n+export interface LayoutOptions {\n+  $commentsWrap: HTMLElement\n+  nestSortBy: ListNest.SortByType\n+  nestMax: number\n+  flatMode: boolean\n+\n+  createComment(comment: CommentData, ctxComments: CommentData[]): Comment\n+  findComment(id: number): Comment|undefined\n+  getCommentDataList(): CommentData[]\n+}\n+\n+export default class ListLayout {\n+  constructor(private options: LayoutOptions) {}\n+\n+  // TODO refactor if syntax to strategy pattern\n+  import(comments: CommentData[]) {\n+    if (this.options.flatMode) {\n+      comments.forEach((commentData: CommentData) => {\n+        this.putCommentFlatMode(commentData, comments, 'append')\n+      })\n+    } else {\n+      this.importCommentsNestMode(comments)\n+    }\n+  }\n+\n+  insert(comment: CommentData) {\n+    if (!this.options.flatMode) {\n+      this.insertCommentNest(comment)\n+    } else {\n+      this.insertCommentFlatMode(comment)\n+    }\n+  }\n+\n+  // 导入评论 · 嵌套模式\n+  private importCommentsNestMode(srcData: CommentData[]) {\n+    // 遍历 root 评论\n+    const rootNodes = ListNest.makeNestCommentNodeList(srcData, this.options.nestSortBy, this.options.nestMax)\n+    rootNodes.forEach((rootNode: ListNest.CommentNode) => {\n+      const rootC = this.options.createComment(rootNode.comment, srcData)\n+\n+      // 显示并播放渐入动画\n+      this.options.$commentsWrap?.appendChild(rootC.getEl())\n+      rootC.getRender().playFadeAnim()\n+\n+      // 加载子评论\n+      const that = this\n+      ;(function loadChildren(parentC: Comment, parentNode: ListNest.CommentNode) {\n+        parentNode.children.forEach((node: ListNest.CommentNode) => {\n+          const childD = node.comment\n+          const childC = that.options.createComment(childD, srcData)\n+\n+          // 插入到父评论中\n+          parentC.putChild(childC)\n+\n+          // 递归加载子评论\n+          loadChildren(childC, node)\n+        })\n+      })(rootC, rootNode)\n+\n+      // 限高检测\n+      rootC.getRender().checkHeightLimit()\n+    })\n+  }\n+\n+  /** 导入评论 · 平铺模式 */\n+  private putCommentFlatMode(cData: CommentData, ctxData: CommentData[], insertMode: 'append'|'prepend') {\n+    if (cData.is_collapsed) cData.is_allow_reply = false\n+    const comment = this.options.createComment(cData, ctxData)\n+\n+    // 可见评论添加到界面\n+    // 注：不可见评论用于显示 “引用内容”\n+    if (cData.visible) {\n+      if (insertMode === 'append') this.options.$commentsWrap?.append(comment.getEl())\n+      if (insertMode === 'prepend') this.options.$commentsWrap?.prepend(comment.getEl())\n+      comment.getRender().playFadeAnim()\n+    }\n+\n+    // 平铺评论插入后 · 内容限高检测\n+    comment.getRender().checkHeightLimit()\n+\n+    return comment\n+  }\n+\n+  private insertCommentNest(commentData: CommentData) {\n+    // 嵌套模式\n+    const comment = this.options.createComment(commentData, this.options.getCommentDataList())\n+\n+    if (commentData.rid === 0) {\n+      // root评论 新增\n+      this.options.$commentsWrap?.prepend(comment.getEl())\n+    } else {\n+      // 子评论 新增\n+      const parent = this.options.findComment(commentData.rid)\n+      if (parent) {\n+        parent.putChild(comment, (this.options.nestSortBy === 'DATE_ASC' ? 'append' : 'prepend'))\n+\n+        // 若父评论存在 “子评论部分” 限高，取消限高\n+        comment.getParents().forEach((p) => {\n+          p.getRender().heightLimitRemoveForChildren()\n+        })\n+      }\n+    }\n+\n+    comment.getRender().checkHeightLimit()\n+\n+    Ui.scrollIntoView(comment.getEl()) // 滚动到可以见\n+    comment.getRender().playFadeAnim() // 播放评论渐出动画\n+  }\n+\n+  private insertCommentFlatMode(commentData: CommentData) {\n+    // 平铺模式\n+    const comment = this.putCommentFlatMode(commentData, this.options.getCommentDataList(), 'prepend')\n+    Ui.scrollIntoView(comment.getEl()) // 滚动到可见\n+  }\n+}"
    },
    {
      "sha": "5ef652b8972377474917741ff1b29265a61ca0b9",
      "filename": "ui/packages/artalk/src/list/list-lite.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 424,
      "changes": 424,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-lite.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-lite.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-lite.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,424 +0,0 @@\n-import { ListData, CommentData, NotifyData } from '~/types/artalk-data'\n-import Context from '~/types/context'\n-import Component from '../lib/component'\n-import * as Utils from '../lib/utils'\n-import * as Ui from '../lib/ui'\n-import Comment from '../comment'\n-import PgHolder, { TPgMode } from './paginator'\n-import * as ListNest from './list-nest'\n-import * as ListUi from './list-ui'\n-import { version as ARTALK_VERSION } from '../../package.json'\n-import { handleBackendRefConf } from '../config'\n-\n-export default class ListLite extends Component {\n-  /** 列表评论集区域元素 */\n-  protected $commentsWrap: HTMLElement\n-\n-  /** 最后一次请求得到的列表数据 */\n-  protected data?: ListData\n-\n-  /** 是否处于加载中状态 */\n-  protected isLoading: boolean = false\n-\n-  /** 配置是否已加载 */\n-  private confLoaded = false\n-\n-  /** 无评论显示文字 */\n-  public noCommentText?: string\n-\n-  /** 嵌套模式下的排序方式 */\n-  private _nestSortBy?: ListNest.SortByType\n-  public get nestSortBy() {\n-    return this._nestSortBy || this.ctx.conf.nestSort || 'DATE_ASC'\n-  }\n-  public set nestSortBy(val: ListNest.SortByType) {\n-    this._nestSortBy = val\n-  }\n-\n-  /** 平铺模式 */\n-  private _flatMode?:boolean\n-  public get flatMode() {\n-    if (this._flatMode !== undefined)\n-      return this._flatMode\n-\n-    // 配置开启平铺模式\n-    if (this.ctx.conf.flatMode === true || Number(this.ctx.conf.nestMax) <= 1)\n-      return true\n-\n-    // 自动判断启用平铺模式\n-    if (this.ctx.conf.flatMode === 'auto' && window.matchMedia(\"(max-width: 768px)\").matches)\n-      return true\n-\n-    return false\n-  }\n-  public set flatMode(val: boolean) {\n-    this._flatMode = val\n-  }\n-\n-  /** 分页方式 */\n-  public _pageMode?: TPgMode\n-  public get pageMode() {\n-    return this._pageMode || (this.conf.pagination.readMore ? 'read-more' : 'pagination')\n-  }\n-  public set pageMode(val: 'pagination'|'read-more') {\n-    this._pageMode = val\n-    this.pgHolder?.setMode(this._pageMode)\n-  }\n-\n-  /** 分页方式持有者 */\n-  public pgHolder?: PgHolder\n-\n-  /** 每页数量 (每次请求获取量) */\n-  private _pageSize?: number\n-  public get pageSize() {\n-    return this._pageSize || this.conf.pagination.pageSize\n-  }\n-  public set pageSize(val: number) {\n-    this._pageSize = val\n-  }\n-\n-  /** 监听指定元素上的滚动 */\n-  public scrollListenerAt?: HTMLElement\n-  /** 翻页归位到指定元素 */\n-  public repositionAt?: HTMLElement\n-\n-  // 一些 Hook 函数\n-  public renderComment?: (comment: Comment) => void\n-  public paramsEditor?: (params: any) => void\n-  public onAfterLoad?: (data: ListData) => void\n-\n-  /** 未读标记 */\n-  protected unread: NotifyData[] = []\n-  public unreadHighlight?: boolean // 高亮未读\n-\n-  constructor (ctx: Context) {\n-    super(ctx)\n-\n-    // 初始化元素\n-    this.$el = Utils.createElement(\n-    `<div class=\"atk-list-lite\">\n-      <div class=\"atk-list-comments-wrap\"></div>\n-    </div>`)\n-    this.$commentsWrap = this.$el.querySelector('.atk-list-comments-wrap')!\n-\n-    // 评论时间自动更新\n-    window.setInterval(() => {\n-      this.$el.querySelectorAll<HTMLElement>('[data-atk-comment-date]').forEach(el => {\n-        const date = el.getAttribute('data-atk-comment-date')\n-        el.innerText = Utils.timeAgo(new Date(Number(date)), this.ctx)\n-      })\n-    }, 30 * 1000) // 30s 更新一次\n-\n-    // 事件监听\n-    this.ctx.on('conf-loaded', () => {\n-    })\n-  }\n-\n-  public getData() {\n-    return this.data\n-  }\n-\n-  public clearData() {\n-    this.data = undefined\n-  }\n-\n-  public getLoading() {\n-    return this.isLoading\n-  }\n-\n-  public getCommentsWrapEl() {\n-    return this.$commentsWrap\n-  }\n-\n-  /** 设置加载状态 */\n-  public setLoading(val: boolean, isFirstLoad: boolean = false) {\n-    this.isLoading = val\n-    if (isFirstLoad) {\n-      Ui.setLoading(val, this.$el)\n-      return\n-    }\n-\n-    this.pgHolder?.setLoading(val)\n-  }\n-\n-  /** 评论获取 */\n-  public async fetchComments(offset: number) {\n-    if (this.isLoading) return\n-\n-    const isFirstLoad = (offset === 0)\n-    const setLoading = (val: boolean) => this.setLoading(val, isFirstLoad)\n-\n-    // 加载动画\n-    setLoading(true)\n-\n-    // 事件通知（开始加载评论）\n-    this.ctx.trigger('list-load')\n-\n-    // 清空评论（按钮加载更多的第一页、每次加载分页页面）\n-    if ((this.pageMode === 'read-more' && isFirstLoad) || this.pageMode === 'pagination') {\n-      this.ctx.clearAllComments()\n-    }\n-\n-    // 请求评论数据\n-    let listData: ListData\n-    try {\n-      // 执行请求\n-      listData = await this.ctx.getApi().comment\n-        .get(offset, this.pageSize, this.flatMode, this.paramsEditor)\n-    } catch (e: any) {\n-      this.onError(e.msg || String(e), offset, e.data)\n-      throw e\n-    } finally {\n-      setLoading(false)\n-    }\n-\n-    // 清除原有错误\n-    Ui.setError(this.$el, null)\n-\n-    // 装载数据\n-    try {\n-      this.onLoad(listData, offset)\n-    } catch (e: any) {\n-      this.onError(String(e), offset)\n-      throw e\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  protected onLoad(data: ListData, offset: number) {\n-    this.data = data\n-\n-    // 装载后端提供的配置\n-    if (!this.confLoaded) {\n-      // 仅应用一次配置\n-      const backendRefConf = handleBackendRefConf(data.conf.frontend_conf)\n-      if (this.conf.useBackendConf) this.ctx.updateConf(backendRefConf)\n-      else this.ctx.updateConf({}) // 让事件监听 `on('conf-loaded')` 有效，与前者保持相同生命周期环节\n-      this.confLoaded = true\n-    }\n-\n-    // 前后端版本一致性检测\n-    if (this.ctx.conf.versionCheck && ListUi.versionCheckDialog(this, ARTALK_VERSION, data.api_version.version)) return\n-\n-    // 导入数据\n-    this.importComments(data.comments)\n-\n-    // 分页功能\n-    this.refreshPagination(offset, (this.flatMode ? data.total : data.total_roots))\n-\n-    // 加载后事件\n-    this.refreshUI()\n-\n-    // 未读消息提示功能\n-    this.ctx.updateNotifies(data.unread || [])\n-\n-    // 事件触发，列表已加载\n-    this.ctx.trigger('list-loaded')\n-\n-    // Hook 函数调用\n-    if (this.onAfterLoad) this.onAfterLoad(data)\n-  }\n-\n-  /** 分页模式 */\n-  private refreshPagination(offset: number, total: number) {\n-    // 初始化\n-    if (!this.pgHolder) {\n-      this.pgHolder = new PgHolder({\n-        list: this,\n-        mode: this.pageMode,\n-        pageSize: this.pageSize,\n-        total\n-      })\n-    }\n-\n-    // 更新\n-    this.pgHolder?.update(offset, total)\n-  }\n-\n-  /** 错误处理 */\n-  protected onError(msg: any, offset: number, errData?: any) {\n-    if (!this.confLoaded) {\n-      this.ctx.updateConf({})\n-    }\n-\n-    msg = String(msg)\n-    console.error(msg)\n-\n-    // 加载更多按钮显示错误\n-    if (offset !== 0 && this.pageMode === 'read-more') {\n-      this.pgHolder?.showErr(this.$t('loadFail'))\n-      return\n-    }\n-\n-    // 显示错误对话框\n-    Ui.setError(this.$el, ListUi.renderErrorDialog(this, msg, errData))\n-  }\n-\n-  /** 刷新界面 */\n-  public refreshUI() {\n-    ListUi.refreshUI(this)\n-  }\n-\n-  /** 重新加载列表 */\n-  public reload() {\n-    this.fetchComments(0)\n-  }\n-\n-  /** 创建新评论 */\n-  protected createComment(cData: CommentData, ctxData?: CommentData[]) {\n-    if (!ctxData) ctxData = this.ctx.getCommentDataList()\n-\n-    const comment = new Comment(this.ctx, cData, {\n-      isFlatMode: this.flatMode,\n-      afterRender: () => {\n-        if (this.renderComment) this.renderComment(comment)\n-      },\n-      onDelete: (c: Comment) => {\n-        this.ctx.deleteComment(c)\n-        this.refreshUI()\n-      },\n-      replyTo: (cData.rid ? ctxData.find(c => c.id === cData.rid) : undefined)\n-    })\n-\n-    // 渲染元素\n-    comment.render()\n-\n-    // 放入 comment 总表中\n-    this.ctx.getCommentList().push(comment)\n-\n-    return comment\n-  }\n-\n-  /** 导入评论 · 通过请求数据 */\n-  public importComments(srcData: CommentData[]) {\n-    if (this.flatMode) {\n-      srcData.forEach((commentData: CommentData) => {\n-        this.putCommentFlatMode(commentData, srcData, 'append')\n-      })\n-    } else {\n-      this.importCommentsNest(srcData)\n-    }\n-  }\n-\n-  // 导入评论 · 嵌套模式\n-  private importCommentsNest(srcData: CommentData[]) {\n-    // 遍历 root 评论\n-    const rootNodes = ListNest.makeNestCommentNodeList(srcData, this.nestSortBy, this.conf.nestMax)\n-    rootNodes.forEach((rootNode: ListNest.CommentNode) => {\n-      const rootC = this.createComment(rootNode.comment, srcData)\n-\n-      // 显示并播放渐入动画\n-      this.$commentsWrap.appendChild(rootC.getEl())\n-      rootC.getRender().playFadeAnim()\n-\n-      // 加载子评论\n-      const that = this\n-      ;(function loadChildren(parentC: Comment, parentNode: ListNest.CommentNode) {\n-        parentNode.children.forEach((node: ListNest.CommentNode) => {\n-          const childD = node.comment\n-          const childC = that.createComment(childD, srcData)\n-\n-          // 插入到父评论中\n-          parentC.putChild(childC)\n-\n-          // 递归加载子评论\n-          loadChildren(childC, node)\n-        })\n-      })(rootC, rootNode)\n-\n-      // 限高检测\n-      rootC.getRender().checkHeightLimit()\n-    })\n-  }\n-\n-  /** 导入评论 · 平铺模式 */\n-  private putCommentFlatMode(cData: CommentData, ctxData: CommentData[], insertMode: 'append'|'prepend') {\n-    if (cData.is_collapsed) cData.is_allow_reply = false\n-    const comment = this.createComment(cData, ctxData)\n-\n-    // 可见评论添加到界面\n-    // 注：不可见评论用于显示 “引用内容”\n-    if (cData.visible) {\n-      if (insertMode === 'append') this.$commentsWrap.append(comment.getEl())\n-      if (insertMode === 'prepend') this.$commentsWrap.prepend(comment.getEl())\n-      comment.getRender().playFadeAnim()\n-    }\n-\n-    // 平铺评论插入后 · 内容限高检测\n-    comment.getRender().checkHeightLimit()\n-\n-    return comment\n-  }\n-\n-  /** 新增评论 · 首部添加 */\n-  public insertComment(commentData: CommentData) {\n-    if (!this.flatMode) {\n-      // 嵌套模式\n-      const comment = this.createComment(commentData)\n-\n-      if (commentData.rid === 0) {\n-        // root评论 新增\n-        this.$commentsWrap.prepend(comment.getEl())\n-      } else {\n-        // 子评论 新增\n-        const parent = this.ctx.findComment(commentData.rid)\n-        if (parent) {\n-          parent.putChild(comment, (this.nestSortBy === 'DATE_ASC' ? 'append' : 'prepend'))\n-\n-          // 若父评论存在 “子评论部分” 限高，取消限高\n-          comment.getParents().forEach((p) => {\n-            p.getRender().heightLimitRemoveForChildren()\n-          })\n-        }\n-      }\n-\n-      comment.getRender().checkHeightLimit()\n-\n-      Ui.scrollIntoView(comment.getEl()) // 滚动到可以见\n-      comment.getRender().playFadeAnim() // 播放评论渐出动画\n-    } else {\n-      // 平铺模式\n-      const comment = this.putCommentFlatMode(commentData, this.ctx.getCommentDataList(), 'prepend')\n-      Ui.scrollIntoView(comment.getEl()) // 滚动到可见\n-    }\n-\n-    // 评论数增加 1\n-    if (this.data) this.data.total += 1\n-\n-    // 评论新增后\n-    this.refreshUI()\n-    this.ctx.trigger('list-loaded')\n-    this.ctx.trigger('list-inserted', commentData)\n-  }\n-\n-  /** 更新评论 */\n-  public updateComment(commentData: CommentData) {\n-    const comment = this.ctx.findComment(commentData.id)\n-    if (comment) {\n-      comment.setData(commentData)\n-    }\n-  }\n-\n-  /** 更新未读数据 */\n-  public updateUnread(notifies: NotifyData[]) {\n-    this.unread = notifies\n-\n-    // 高亮评论\n-    if (this.unreadHighlight === true) {\n-      this.ctx.getCommentList().forEach((comment) => {\n-        const notify = this.unread.find(o => o.comment_id === comment.getID())\n-        if (notify) {\n-          comment.getRender().setUnread(true)\n-          comment.getRender().setOpenAction(() => {\n-            window.open(notify.read_link)\n-            this.unread = this.unread.filter(o => o.comment_id !== comment.getID()) // remove\n-            this.ctx.updateNotifies(this.unread)\n-          })\n-        } else {\n-          comment.getRender().setUnread(false)\n-        }\n-      })\n-    }\n-  }\n-}"
    },
    {
      "sha": "58f06ab578e0498cf8daaee3f7a5fc9a9b0dbc85",
      "filename": "ui/packages/artalk/src/list/list-ui.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 137,
      "changes": 137,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-ui.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-ui.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist-ui.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,137 +0,0 @@\n-import ListLite from './list-lite'\n-import * as Utils from '../lib/utils'\n-import * as Ui from '../lib/ui'\n-import User from '../lib/user'\n-import $t from '../i18n'\n-\n-/** 界面刷新 */\n-export function refreshUI(list: ListLite) {\n-    // 无评论\n-    const isNoComment = list.ctx.getCommentList().length <= 0\n-    let $noComment = list.getCommentsWrapEl().querySelector<HTMLElement>('.atk-list-no-comment')\n-\n-    if (isNoComment) {\n-      if (!$noComment) {\n-        $noComment = Utils.createElement('<div class=\"atk-list-no-comment\"></div>')\n-        $noComment.innerHTML = list.noCommentText || list.ctx.conf.noComment || list.ctx.$t('noComment')\n-        list.getCommentsWrapEl().appendChild($noComment)\n-      }\n-    } else {\n-      $noComment?.remove()\n-    }\n-\n-    // 仅管理员显示控制\n-    list.ctx.checkAdminShowEl()\n-}\n-\n-/** 构建错误提示界面 */\n-export function renderErrorDialog(list: ListLite, errMsg: string, errData?: any): HTMLElement {\n-  const errEl = Utils.createElement(`<span>${errMsg}，${$t('listLoadFailMsg')}<br/></span>`)\n-\n-  const $retryBtn = Utils.createElement(`<span style=\"cursor:pointer;\">${$t('listRetry')}</span>`)\n-  $retryBtn.onclick = () => (list.fetchComments(0))\n-  errEl.appendChild($retryBtn)\n-\n-  const adminBtn = Utils.createElement('<span atk-only-admin-show> | <span style=\"cursor:pointer;\">打开控制台</span></span>')\n-  errEl.appendChild(adminBtn)\n-  if (!User.data.isAdmin) adminBtn.classList.add('atk-hide')\n-\n-  let sidebarView = ''\n-\n-  // 找不到站点错误，打开侧边栏并填入创建站点表单\n-  if (errData?.err_no_site) {\n-    const viewLoadParam = {\n-      create_name: list.ctx.conf.site,\n-      create_urls: `${window.location.protocol}//${window.location.host}`\n-    }\n-    sidebarView = `sites|${JSON.stringify(viewLoadParam)}`\n-  }\n-\n-  adminBtn.onclick = () => list.ctx.showSidebar({\n-    view: sidebarView as any\n-  })\n-\n-  return errEl\n-}\n-\n-/** 版本检测弹窗 */\n-export function versionCheckDialog(list: ListLite, feVer: string, beVer: string): boolean {\n-  const comp = Utils.versionCompare(feVer, beVer)\n-  const notSameVer = (comp !== 0)\n-  if (notSameVer) {\n-    const errEl = Utils.createElement(\n-      `<div>请更新 Artalk ${comp < 0 ? $t('frontend') : $t('backend')}以获得完整体验 ` +\n-      `(<a href=\"https://artalk.js.org/\" target=\"_blank\">帮助文档</a>)` +\n-      `<br/><br/><span style=\"color: var(--at-color-meta);\">` +\n-      `当前版本：${$t('frontend')} ${feVer} / ${$t('backend')} ${beVer}` +\n-      `</span><br/><br/></div>`)\n-    const ignoreBtn = Utils.createElement('<span style=\"cursor:pointer\">忽略</span>')\n-    ignoreBtn.onclick = () => {\n-      Ui.setError(list.$el.parentElement!, null)\n-      list.ctx.conf.versionCheck = false\n-      list.fetchComments(0)\n-    }\n-    errEl.append(ignoreBtn)\n-    Ui.setError(list.$el.parentElement!, errEl, '<span class=\"atk-warn-title\">Artalk Warn</span>')\n-    return true\n-  }\n-\n-  return false\n-}\n-\n-/** 评论排序方式选择下拉菜单 */\n-export function renderDropdown(conf: {\n-  $dropdownWrap: HTMLElement,\n-  dropdownList: [string, () => void][]\n-}) {\n-  const { $dropdownWrap, dropdownList } = conf\n-  if ($dropdownWrap.querySelector('.atk-dropdown')) return\n-\n-  // 修改 class\n-  $dropdownWrap.classList.add('atk-dropdown-wrap')\n-\n-  // 插入图标\n-  $dropdownWrap.append(Utils.createElement(`<span class=\"atk-arrow-down-icon\"></span>`))\n-\n-  // 列表项点击事件\n-  let curtActive = 0 // 当前选中\n-  const onItemClick = (i: number, $item: HTMLElement, name: string, action: Function) => {\n-    action()\n-\n-    // set active\n-    curtActive = i\n-    $dropdown.querySelectorAll('.active').forEach((e) => { e.classList.remove('active') })\n-    $item.classList.add('active')\n-\n-    // 关闭层 (临时消失，取消 :hover)\n-    $dropdown.style.display = 'none'\n-    setTimeout(() => { $dropdown.style.display = '' }, 80)\n-  }\n-\n-  // 生成列表元素\n-  const $dropdown = Utils.createElement(`<ul class=\"atk-dropdown atk-fade-in\"></ul>`)\n-  dropdownList.forEach((item, i) => {\n-    const name = item[0] as string\n-    const action = item[1] as Function\n-\n-    const $item = Utils.createElement(`<li class=\"atk-dropdown-item\"><span></span></li>`)\n-    const $link = $item.querySelector<HTMLElement>('span')!\n-    $link.innerText = name\n-    $link.onclick = () => { onItemClick(i, $item, name, action) }\n-    $dropdown.append($item)\n-\n-    if (i === curtActive) $item.classList.add('active') // 默认选中项\n-  })\n-\n-  $dropdownWrap.append($dropdown)\n-}\n-\n-/** 删除评论排序方式选择下拉菜单 */\n-export function removeDropdown(conf: {\n-  $dropdownWrap: HTMLElement\n-}) {\n-  const { $dropdownWrap } = conf\n-  $dropdownWrap.classList.remove('atk-dropdown-wrap')\n-  $dropdownWrap.querySelector('.atk-arrow-down-icon')?.remove()\n-  $dropdownWrap.querySelector('.atk-dropdown')?.remove()\n-}"
    },
    {
      "sha": "c63f45a5b1dea52b747afe2512ca4a8fec160744",
      "filename": "ui/packages/artalk/src/list/list.ts",
      "status": "modified",
      "additions": 279,
      "deletions": 160,
      "changes": 439,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Flist.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,223 +1,342 @@\n-import { ListData, NotifyData } from '~/types/artalk-data'\n+import { ListData, CommentData } from '~/types/artalk-data'\n import Context from '~/types/context'\n-import { version as ARTALK_VERSION } from '../../package.json'\n+import type ArtalkConfig from '~/types/artalk-config'\n+import Component from '../lib/component'\n import * as Utils from '../lib/utils'\n import * as Ui from '../lib/ui'\n-import User from '../lib/user'\n+import Comment from '../comment/comment'\n+import type { ListOptions } from './options'\n+import PgHolder, { TPgMode } from './paginator'\n+import * as ListNest from './nest'\n import ListHTML from './list.html?raw'\n-import ListLite from './list-lite'\n-import * as ListUi from './list-ui'\n+import ListLayout from './layout'\n+import { handleBackendRefConf } from '../config'\n \n-export default class List extends ListLite {\n-  private $closeCommentBtn!: HTMLElement\n-  private $openSidebarBtn!: HTMLElement\n-  private $unreadBadge!: HTMLElement\n-  private $commentCount!: HTMLElement\n-  private $commentCountNum!: HTMLElement\n-  private $dropdownWrap?: HTMLElement\n+export default class List extends Component {\n+  /** The options of List */\n+  protected options: ListOptions = {}\n \n-  constructor (ctx: Context) {\n-    const el = Utils.createElement(ListHTML)\n+  protected layout: ListLayout\n \n-    super(ctx)\n+  /** 列表评论集区域元素 */\n+  $commentsWrap?: HTMLElement\n \n-    // 把 listLite $el 变为子元素\n-    el.querySelector('.atk-list-body')!.append(this.$el)\n-    this.$el = el\n+  /** 最后一次请求得到的列表数据 */\n+  protected data?: ListData\n \n-    // 分页模式\n-    this.repositionAt = this.$el\n+  /** 是否处于加载中状态 */\n+  protected isLoading: boolean = false\n \n-    // 操作按钮\n-    this.initListActionBtn()\n+  /** 配置是否已加载 */\n+  private confLoaded = false\n \n-    const countNumHTML = '<span class=\"atk-comment-count-num\">0</span>'\n-    this.$commentCount = this.$el.querySelector('.atk-comment-count')!\n+  /** 分页方式持有者 */\n+  public pgHolder?: PgHolder\n \n-    const refreshCountNumEl = () => {\n-      this.$commentCount.innerHTML = this.$t('counter', {\n-        count: countNumHTML,\n-      })\n-      this.$commentCountNum = this.$commentCount.querySelector('.atk-comment-count-num')!\n-    }\n-    refreshCountNumEl()\n+  constructor (ctx: Context, options: ListOptions = {}) {\n+    super(ctx)\n+\n+    this.options = options\n \n-    // copyright\n-    this.$el.querySelector<HTMLElement>('.atk-copyright')!.innerHTML = `Powered By <a href=\"https://artalk.js.org\" target=\"_blank\" title=\"Artalk v${ARTALK_VERSION}\">Artalk</a>`\n+    this.initBaseEl()\n \n-    // event listen\n+    // init layout manager\n+    this.layout = new ListLayout({\n+      $commentsWrap: this.$commentsWrap!,\n+      nestSortBy: this.getNestSortBy(),\n+      nestMax: this.ctx.conf.nestMax,\n+      flatMode: this.getFlatMode(),\n+      createComment: (d, c) => this.createComment(d, c),\n+      findComment: (id) => this.ctx.findComment(id),\n+      getCommentDataList: () => this.ctx.getCommentDataList()\n+    })\n+\n+    // 事件监听\n     this.ctx.on('conf-loaded', () => {\n-      // i18n support when locale changed\n-      refreshCountNumEl()\n-      this.refreshUI()\n+    })\n+\n+    this.ctx.on('list-loaded', () => {\n+      // 防止评论框被吞\n+      this.ctx.editorResetState()\n     })\n   }\n \n-  private initListActionBtn() {\n-    // 侧边栏呼出按钮\n-    this.$openSidebarBtn = this.$el.querySelector('[data-action=\"open-sidebar\"]')!\n-    this.$closeCommentBtn = this.$el.querySelector('[data-action=\"admin-close-comment\"]')!\n-    this.$unreadBadge = this.$el.querySelector('.atk-unread-badge')!\n+  getOptions() {\n+    return this.options\n+  }\n \n-    this.$openSidebarBtn.addEventListener('click', () => {\n-      this.ctx.showSidebar()\n-    })\n+  /** 嵌套模式下的排序方式 */\n+  getNestSortBy(): ListNest.SortByType {\n+    return this.options.nestSortBy || this.ctx.conf.nestSort || 'DATE_ASC'\n+  }\n \n-    // 关闭评论按钮\n-    this.$closeCommentBtn.addEventListener('click', () => {\n-      if (!this.data) return\n+  /** 平铺模式 */\n+  getFlatMode(): boolean {\n+    if (this.options.flatMode !== undefined)\n+      return this.options.flatMode\n \n-      this.data.page.admin_only = !this.data.page.admin_only\n-      this.adminPageEditSave()\n-    })\n+    // 配置开启平铺模式\n+    if (this.ctx.conf.flatMode === true || Number(this.ctx.conf.nestMax) <= 1)\n+      return true\n+\n+    // 自动判断启用平铺模式\n+    if (this.ctx.conf.flatMode === 'auto' && window.matchMedia(\"(max-width: 768px)\").matches)\n+      return true\n+\n+    return false\n+  }\n+\n+  /** 分页方式 */\n+  getPageMode(): TPgMode {\n+    return this.options.pageMode || (this.conf.pagination.readMore ? 'read-more' : 'pagination')\n+  }\n+\n+  /** 每页数量 (每次请求获取量) */\n+  getPageSize(): number {\n+    return this.options.pageSize || this.conf.pagination.pageSize\n+  }\n+\n+  public getData() {\n+    return this.data\n+  }\n+\n+  public clearData() {\n+    this.data = undefined\n+  }\n+\n+  public getLoading() {\n+    return this.isLoading\n+  }\n+\n+  public getCommentsWrapEl() {\n+    return this.$commentsWrap!\n   }\n \n-  /** 刷新界面 */\n-  public refreshUI() {\n-    super.refreshUI()\n+  private initBaseEl() {\n+    this.$el = Utils.createElement(\n+      `<div class=\"atk-list-lite\">\n+        <div class=\"atk-list-comments-wrap\"></div>\n+      </div>`)\n+    this.$commentsWrap = this.$el.querySelector('.atk-list-comments-wrap')!\n \n-    this.$commentCountNum.innerText = String(Number(this.data?.total) || 0)\n+    if (!this.options.liteMode) {\n+      const el = Utils.createElement(ListHTML)\n+      el.querySelector('.atk-list-body')!.append(this.$el) // 把 list 的 $el 变为子元素\n+      this.$el = el\n \n-    // 已输入个人信息\n-    if (!!User.data.nick && !!User.data.email) {\n-      this.$openSidebarBtn.classList.remove('atk-hide')\n-    } else {\n-      this.$openSidebarBtn.classList.add('atk-hide')\n+      this.options.repositionAt = this.$el // 更新翻页归位元素\n     }\n+  }\n+\n+  /** 设置加载状态 */\n+  public setLoading(val: boolean, isFirstLoad: boolean = false) {\n+    this.isLoading = val\n+    if (isFirstLoad) {\n+      Ui.setLoading(val, this.$el)\n+      return\n+    }\n+\n+    this.pgHolder?.setLoading(val)\n+  }\n+\n+  /** 评论获取 */\n+  public async fetchComments(offset: number) {\n+    if (this.isLoading) return\n+\n+    const isFirstLoad = (offset === 0)\n+    const setLoading = (val: boolean) => this.setLoading(val, isFirstLoad)\n+\n+    // 加载动画\n+    setLoading(true)\n \n-    this.$openSidebarBtn.querySelector<HTMLElement>('.atk-text')!\n-      .innerText = (!User.data.isAdmin) ? this.$t('msgCenter') : this.$t('ctrlCenter')\n+    // 事件通知（开始加载评论）\n+    this.ctx.trigger('list-load')\n \n-    // 关闭评论\n-    if (!!this.data && !!this.data.page && this.data.page.admin_only === true) {\n-      this.ctx.editorClose()\n-      this.$closeCommentBtn.innerHTML = this.$t('openComment')\n-    } else {\n-      this.ctx.editorOpen()\n-      this.$closeCommentBtn.innerHTML = this.$t('closeComment')\n+    // 清空评论（按钮加载更多的第一页、每次加载分页页面）\n+    const pageMode = this.getPageMode()\n+    if ((pageMode === 'read-more' && isFirstLoad) || pageMode === 'pagination') {\n+      this.clearAllComments()\n     }\n \n-    // 评论列表排序 Dropdown 下拉选择层\n-    if (this.ctx.conf.listSort) {\n-      this.initDropdown()\n-    } else {\n-      ListUi.removeDropdown({\n-        $dropdownWrap: this.$commentCount\n-      })\n+    // 请求评论数据\n+    let listData: ListData\n+    try {\n+      // 执行请求\n+      listData = await this.ctx.getApi().comment\n+        .get(offset, this.getPageSize(), this.getFlatMode(), this.options.paramsEditor)\n+    } catch (e: any) {\n+      this.onError(e.msg || String(e), offset, e.data)\n+      throw e\n+    } finally {\n+      setLoading(false)\n+    }\n+\n+    // 清除原有错误\n+    Ui.setError(this.$el, null)\n+\n+    // 装载数据\n+    try {\n+      this.onLoad(listData, offset)\n+    } catch (e: any) {\n+      this.onError(String(e), offset)\n+      throw e\n+    } finally {\n+      setLoading(false)\n     }\n   }\n \n   protected onLoad(data: ListData, offset: number) {\n-    super.onLoad(data, offset)\n+    this.data = data\n+\n+    // 装载后端提供的配置\n+    this.loadConf(data)\n+\n+    // 导入数据\n+    this.importComments(data.comments)\n+\n+    // 分页功能\n+    this.loadPagination(offset, (this.getFlatMode() ? data.total : data.total_roots))\n+\n+    // 更新页面数据\n+    this.ctx.updatePage(data.page)\n+\n+    // 未读消息提示功能\n+    this.ctx.updateUnreadList(data.unread || [])\n+\n+    // 事件触发，列表已加载\n+    this.ctx.trigger('list-loaded')\n+  }\n+\n+  private loadConf(data: ListData) {\n+    if (!this.confLoaded) { // 仅应用一次配置\n+      let conf: Partial<ArtalkConfig> = {\n+        apiVersion: data.api_version.version\n+      }\n \n-    // 检测锚点跳转\n-    if (!this.goToCommentFounded) this.checkGoToCommentByUrlHash()\n+      // reference conf from backend\n+      if (this.conf.useBackendConf) {\n+        conf = { ...conf, ...handleBackendRefConf(data.conf.frontend_conf) }\n+      }\n \n-    // 防止评论框被吞\n-    if (this.ctx.conf.editorTravel === true) {\n-      this.ctx.editorResetUI()\n+      this.ctx.updateConf(conf)\n+      this.confLoaded = true\n     }\n   }\n \n-  private goToCommentFounded = false\n-  public goToCommentDelay = true\n+  /** 分页模式 */\n+  private loadPagination(offset: number, total: number) {\n+    // 初始化\n+    if (!this.pgHolder) {\n+      this.pgHolder = new PgHolder({\n+        list: this,\n+        mode: this.getPageMode(),\n+        pageSize: this.getPageSize(),\n+        total\n+      })\n+    }\n \n-  /** 跳到评论项位置 - 根据 `location.hash` */\n-  public checkGoToCommentByUrlHash() {\n-    let commentId = Number(Utils.getQueryParam('atk_comment')) // same as backend GetReplyLink()\n-    if (!commentId) {\n-      const match = window.location.hash.match(/#atk-comment-([0-9]+)/)\n-      if (!match || !match[1] || Number.isNaN(Number(match[1]))) return\n-      commentId = Number(match[1])\n+    // 更新\n+    this.pgHolder?.update(offset, total)\n+  }\n+\n+  /** 错误处理 */\n+  protected onError(msg: any, offset: number, errData?: any) {\n+    if (!this.confLoaded) {\n+      this.ctx.updateConf({})\n     }\n-    if (!commentId) return\n \n-    const comment = this.ctx.findComment(commentId)\n-    if (!comment) { // 若找不到评论\n-      // 自动翻页\n-      this.pgHolder?.next()\n+    msg = String(msg)\n+    console.error(msg)\n+\n+    // 加载更多按钮显示错误\n+    if (offset !== 0 && this.getPageMode() === 'read-more') {\n+      this.pgHolder?.showErr(this.$t('loadFail'))\n       return\n     }\n \n-    // 已阅 API\n-    const notifyKey = Utils.getQueryParam('atk_notify_key')\n-    if (notifyKey) {\n-      this.ctx.getApi().user.markRead(commentId, notifyKey)\n-        .then(() => {\n-          this.unread = this.unread.filter(o => o.comment_id !== commentId)\n-          this.updateUnread(this.unread)\n-        })\n-    }\n+    // 显示错误对话框\n+    this.ctx.trigger('list-error', {\n+      msg, data: errData\n+    })\n+  }\n+\n+  /** 重新加载列表 */\n+  public reload() {\n+    this.fetchComments(0)\n+  }\n \n-    // 若父评论存在 “子评论部分” 限高，取消限高\n-    comment.getParents().forEach((p) => {\n-      p.getRender().heightLimitRemoveForChildren()\n+  /** 创建新评论 */\n+  private createComment(comment: CommentData, ctxComments: CommentData[]): Comment {\n+    const instance = new Comment(this.ctx, comment, {\n+      isFlatMode: this.getFlatMode(),\n+      afterRender: () => {\n+        const renderCommentFn = this.options.renderComment\n+        renderCommentFn && renderCommentFn(instance)\n+      },\n+      onDelete: (c: Comment) => {\n+        this.deleteComment(c.getID())\n+      },\n+      replyTo: (comment.rid ? ctxComments.find(c => c.id === comment.rid) : undefined)\n     })\n \n-    const goTo = () => {\n-      Ui.scrollIntoView(comment.getEl(), false)\n+    // 渲染元素\n+    instance.render()\n \n-      comment.getEl().classList.remove('atk-flash-once')\n-      window.setTimeout(() => {\n-        comment.getEl().classList.add('atk-flash-once')\n-      }, 150)\n-    }\n+    // 放入 comment 总表中\n+    this.ctx.getCommentList().push(instance)\n \n-    if (!this.goToCommentDelay) goTo()\n-    else window.setTimeout(() => goTo(), 350)\n+    return instance\n+  }\n \n-    this.goToCommentFounded = true\n-    this.goToCommentDelay = true // reset\n+  /** 导入评论 */\n+  public importComments(srcData: CommentData[]) {\n+    this.layout.import(srcData)\n   }\n \n-  /** 管理员设置页面信息 */\n-  public adminPageEditSave () {\n-    if (!this.data || !this.data.page) return\n+  /** 新增评论 · 首部添加 */\n+  public insertComment(commentData: CommentData) {\n+    this.layout.insert(commentData)\n \n-    this.ctx.editorShowLoading()\n-    this.ctx.getApi().page.pageEdit(this.data.page)\n-      .then((page) => {\n-        if (this.data)\n-          this.data.page = { ...page }\n-        this.refreshUI()\n-      })\n-      .catch(err => {\n-        this.ctx.editorShowNotify(`${this.$t('editFail')}: ${err.msg || String(err)}`, 'e')\n-      })\n-      .finally(() => {\n-        this.ctx.editorHideLoading()\n-      })\n+    // 评论数增加 1\n+    if (this.data) this.data.total += 1\n+\n+    // 评论新增后\n+    this.ctx.trigger('list-loaded')\n+    this.ctx.trigger('list-inserted', commentData)\n   }\n \n-  public showUnreadBadge(count: number) {\n-    if (count > 0) {\n-      this.$unreadBadge.innerText = `${Number(count || 0)}`\n-      this.$unreadBadge.style.display = 'block'\n-    } else {\n-      this.$unreadBadge.style.display = 'none'\n-    }\n+  /** 更新评论 */\n+  public updateComment(commentData: CommentData) {\n+    const comment = this.ctx.findComment(commentData.id)\n+    comment && comment.setData(commentData)\n+\n+    this.ctx.trigger('list-loaded')\n   }\n \n-  /** 初始化选择下拉层 */\n-  protected initDropdown() {\n-    const reloadUseParamsEditor = (func: (p: any) => void) => {\n-      this.paramsEditor = func\n-      this.fetchComments(0)\n-    }\n+  /** 删除评论 */\n+  public deleteComment(id: number) {\n+    const comment = this.ctx.findComment(id)\n+    if (!comment) throw Error(`Comment ${id} cannot be found`)\n \n-    ListUi.renderDropdown({\n-      $dropdownWrap: this.$commentCount,\n-      dropdownList: [\n-        [this.$t('sortLatest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'date_desc' }) }],\n-        [this.$t('sortBest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'vote' }) }],\n-        [this.$t('sortOldest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'date_asc' }) }],\n-        [this.$t('sortAuthor'), () => { reloadUseParamsEditor(p => { p.view_only_admin = true }) }],\n-      ]\n-    })\n+    comment.getEl().remove()\n+\n+    const list = this.ctx.getCommentList()\n+    list.splice(list.indexOf(comment), 1)\n+\n+    // 评论数减 1\n+    if (this.data) this.data.total -= 1\n+\n+    // 评论删除后\n+    this.ctx.trigger('list-loaded')\n+    this.ctx.trigger('list-deleted', comment.getData())\n   }\n \n-  public updateUnread(notifies: NotifyData[]): void {\n-    super.updateUnread(notifies)\n-    this.showUnreadBadge(notifies?.length || 0)\n+  /** 删除全部评论 */\n+  public clearAllComments() {\n+    this.getCommentsWrapEl().innerHTML = ''\n+    this.clearData()\n+\n+    this.ctx.clearCommentList()\n+    this.ctx.trigger('list-loaded')\n   }\n }"
    },
    {
      "sha": "5327754e80a8b91266f7a085d96de4c6f622541d",
      "filename": "ui/packages/artalk/src/list/nest.ts",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fnest.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fnest.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fnest.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "previous_filename": "ui/packages/artalk/src/list/list-nest.ts"
    },
    {
      "sha": "79ebbf606e99a0aa943c42b470d1826b99712349",
      "filename": "ui/packages/artalk/src/list/options.ts",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Foptions.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Foptions.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Foptions.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,37 @@\n+import type { TPgMode } from './paginator'\n+import type { SortByType } from './nest'\n+import type Comment from '../comment/comment'\n+\n+export interface ListOptions {\n+  /** Lite mode */\n+  liteMode?: boolean\n+\n+  /** Flat mode */\n+  flatMode?: boolean\n+\n+  /** Pagination mode */\n+  pageMode?: TPgMode\n+\n+  /** Page size */\n+  pageSize?: number\n+\n+  /** 监听指定元素上的滚动 */\n+  scrollListenerAt?: HTMLElement\n+\n+  /** 翻页归位到指定元素 */\n+  repositionAt?: HTMLElement\n+\n+  /** 启用列表未读高亮 */\n+  unreadHighlight?: boolean\n+\n+  /** Sort condition in nest mode */\n+  nestSortBy?: SortByType\n+\n+  /** Text to show when no comment */\n+  noCommentText?: string\n+\n+  // 一些 Hook 函数\n+  // ----------------\n+  renderComment?: (comment: Comment) => void\n+  paramsEditor?: (params: any) => void\n+}"
    },
    {
      "sha": "c143329d35b89984dcd1ae2ace77563124d8f97a",
      "filename": "ui/packages/artalk/src/list/paginator/adaptors/pagination.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fpagination.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fpagination.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fpagination.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -12,16 +12,16 @@ export default <IPaginationAdaptor>{\n     const instance = new Pagination(conf.total, {\n       pageSize: conf.pageSize,\n       onChange: async (o) => {\n-        if (conf.list.conf.editorTravel === true)\n-          conf.list.ctx.editorResetUI() // 防止评论框被吞\n+        conf.list.ctx.editorResetState() // 防止评论框被吞\n \n         await conf.list.fetchComments(o)\n \n         // 滚动到第一个评论的位置\n-        if (conf.list.repositionAt) {\n-          const at = conf.list.scrollListenerAt || window\n+        const repositionAt = conf.list.getOptions().repositionAt\n+        if (repositionAt) {\n+          const at = conf.list.getOptions().scrollListenerAt || window\n           at.scroll({\n-            top: conf.list.repositionAt ? Utils.getOffset(conf.list.repositionAt).top : 0,\n+            top: repositionAt ? Utils.getOffset(repositionAt).top : 0,\n             left: 0,\n           })\n         }"
    },
    {
      "sha": "08b550a60a28139260c9429b5e8c7ee97781e4d9",
      "filename": "ui/packages/artalk/src/list/paginator/adaptors/read-more.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fread-more.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fread-more.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fadaptors%2Fread-more.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -23,7 +23,7 @@ export default <IReadMoreAdaptor>{\n     // 滚动到底部自动加载\n     if (conf.list.conf.pagination.autoLoad) {\n       // 添加滚动事件监听\n-      const at = conf.list.scrollListenerAt || document\n+      const at = conf.list.getOptions().scrollListenerAt || document\n       if (this.autoLoadScrollEvent) at.removeEventListener('scroll', this.autoLoadScrollEvent) // 解除原有\n       this.autoLoadScrollEvent = () => {\n         if (conf.mode !== 'read-more'\n@@ -32,7 +32,7 @@ export default <IReadMoreAdaptor>{\n         ) return\n \n         const $target = conf.list.$el.querySelector<HTMLElement>('.atk-list-comments-wrap > .atk-comment-wrap:nth-last-child(3)') // 获取倒数第3个评论元素\n-        if ($target && Ui.isVisible($target, conf.list.scrollListenerAt)) {\n+        if ($target && Ui.isVisible($target, conf.list.getOptions().scrollListenerAt)) {\n           readMoreBtn.click() // 自动点击加载更多按钮\n         }\n       }"
    },
    {
      "sha": "d24012669bc6c63ebc618972a7bd21197982bb2e",
      "filename": "ui/packages/artalk/src/list/paginator/holder.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 56,
      "changes": 56,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fholder.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fholder.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Fholder.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,56 +0,0 @@\n-import { IPgHolderConf, TPgMode } from '.'\n-import Adaptors from './adaptors'\n-\n-/**\n- * 分页方式持有者（调度器）\n- */\n-export default class PgHolder {\n-  private conf: IPgHolderConf\n-\n-  constructor(conf: IPgHolderConf) {\n-    this.conf = conf\n-    this.init()\n-  }\n-\n-  public getAdaptor() {\n-    return Adaptors[this.conf.mode]\n-  }\n-\n-  public init() {\n-    const adaptor = this.getAdaptor()\n-    const [instance, el] = adaptor.createInstance(this.conf)\n-    adaptor.instance = instance\n-    adaptor.el = el\n-    this.conf.list.$el.append(adaptor.el)\n-  }\n-\n-  public setLoading(val: boolean) {\n-    this.getAdaptor().setLoading(val)\n-  }\n-\n-  public update(offset: number, total: number) {\n-    this.getAdaptor().update(offset, total)\n-  }\n-\n-  public getEl() {\n-    return this.getAdaptor().el\n-  }\n-\n-  public showErr(msg: string) {\n-    const that = this.getAdaptor()\n-    const func = that.showErr\n-    if (func) func.bind(that)(msg)\n-  }\n-\n-  public setMode(val: TPgMode) {\n-    if (val !== this.conf.mode) {\n-      this.getEl().remove()\n-      this.conf.mode = val\n-      this.init()\n-    }\n-  }\n-\n-  public next() {\n-    this.getAdaptor().next()\n-  }\n-}"
    },
    {
      "sha": "d5bd4ec6d0df69eb5ce95b1d6be547c73402de5e",
      "filename": "ui/packages/artalk/src/list/paginator/index.ts",
      "status": "modified",
      "additions": 56,
      "deletions": 4,
      "changes": 60,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Findex.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Findex.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flist%2Fpaginator%2Findex.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,13 +1,65 @@\n-import ListLite from '../list-lite'\n-import PgHolder from './holder'\n+import List from '../list'\n+import Adaptors from './adaptors'\n \n export type TPgMode = 'pagination'|'read-more'\n \n export interface IPgHolderConf {\n-  list: ListLite\n+  list: List\n   mode: TPgMode\n   total: number\n   pageSize: number\n }\n \n-export default PgHolder\n+/**\n+ * 分页方式持有者（调度器）\n+ */\n+export default class PgHolder {\n+  private conf: IPgHolderConf\n+\n+  constructor(conf: IPgHolderConf) {\n+    this.conf = conf\n+    this.init()\n+  }\n+\n+  public getAdaptor() {\n+    return Adaptors[this.conf.mode]\n+  }\n+\n+  public init() {\n+    const adaptor = this.getAdaptor()\n+    const [instance, el] = adaptor.createInstance(this.conf)\n+    adaptor.instance = instance\n+    adaptor.el = el\n+    this.conf.list.$el.append(adaptor.el)\n+  }\n+\n+  public setLoading(val: boolean) {\n+    this.getAdaptor().setLoading(val)\n+  }\n+\n+  public update(offset: number, total: number) {\n+    this.getAdaptor().update(offset, total)\n+  }\n+\n+  public getEl() {\n+    return this.getAdaptor().el\n+  }\n+\n+  public showErr(msg: string) {\n+    const that = this.getAdaptor()\n+    const func = that.showErr\n+    if (func) func.bind(that)(msg)\n+  }\n+\n+  public setMode(val: TPgMode) {\n+    if (val !== this.conf.mode) {\n+      this.getEl().remove()\n+      this.conf.mode = val\n+      this.init()\n+    }\n+  }\n+\n+  public next() {\n+    this.getAdaptor().next()\n+  }\n+}"
    },
    {
      "sha": "8bc4fb74d469d240b29dbd93e075a3182844825b",
      "filename": "ui/packages/artalk/src/plugins/editor-kit.ts",
      "status": "renamed",
      "additions": 63,
      "deletions": 29,
      "changes": 92,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor-kit.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor-kit.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor-kit.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,61 +1,97 @@\n-import type EditorApi from '~/types/editor'\n-import EditorPlug from './editor-plug'\n-import EventManager from '../lib/event-manager'\n-import PlugKit from './plug-kit'\n-import { ENABLED_PLUGS, getDisabledPlugByConf } from './plug-enabled'\n+import type ArtalkPlugin from '~/types/plugin'\n+import type { EditorApi } from '~/types/editor'\n+import EventManager from '@/lib/event-manager'\n+import { ENABLED_PLUGS, getDisabledPlugByConf } from './editor'\n+import EditorPlug from './editor/_plug'\n+import PlugKit from './editor/_kit'\n \n export interface EditorEventPayloadMap {\n   'mounted': undefined\n   'unmounted': undefined\n   'header-input': { field: string, $input: HTMLInputElement }\n+  'header-change': { field: string, $input: HTMLInputElement }\n   'content-updated': string\n   'panel-show': EditorPlug\n   'panel-hide': EditorPlug\n   'panel-close': undefined\n+\n+  'editor-close': undefined\n+  'editor-open': undefined\n }\n \n-class PlugManager {\n+export const EditorKit: ArtalkPlugin = (ctx) => {\n+  const editor = ctx.get('editor')\n+\n+  const editorPlugs = new PlugManager(editor)\n+  ctx.inject('editorPlugs', editorPlugs)\n+}\n+\n+export class PlugManager {\n   private plugs: EditorPlug[] = []\n   private openedPlug: EditorPlug|null = null\n   private events = new EventManager<EditorEventPayloadMap>()\n+\n+  getPlugs() { return this.plugs }\n   getEvents() { return this.events }\n \n+  private clear() {\n+    this.plugs = []\n+    this.events = new EventManager()\n+    if (this.openedPlug) this.closePlugPanel()\n+  }\n+\n   constructor(\n     public editor: EditorApi\n   ) {\n-    // handle ui, clear and reset the plug btns and plug panels\n-    editor.getUI().$plugPanelWrap.innerHTML = ''\n-    editor.getUI().$plugPanelWrap.style.display = 'none'\n-    editor.getUI().$plugBtnWrap.innerHTML = ''\n+    let confLoaded = false // config not loaded at first time\n+    this.editor.ctx.on('conf-loaded', () => {\n+      // trigger unmount event will call all plugs' unmount function\n+      // (this will only be called while conf reloaded, not be called at first time)\n+      confLoaded && this.getEvents().trigger('unmounted')\n+\n+      // reset the plugs\n+      this.clear()\n+\n+      // init the all enabled plugs\n+      const DISABLED = getDisabledPlugByConf(this.editor.ctx.conf)\n+\n+      ENABLED_PLUGS\n+        .filter(p => !DISABLED.includes(p)) // 禁用的插件\n+        .forEach((Plug) => {\n+          // create the plug instance\n+          const kit = new PlugKit(this)\n+          this.plugs.push(new Plug(kit))\n+        })\n+\n+      // trigger event for plug initialization\n+      this.getEvents().trigger('mounted')\n+      confLoaded = true\n+\n+      // refresh the plug UI\n+      this.loadPluginUI()\n+    })\n \n-    // init the all enabled plugs\n-    const DISABLED = getDisabledPlugByConf(editor.conf)\n+    this.events.on('panel-close', () => this.closePlugPanel())\n+  }\n \n-    ENABLED_PLUGS\n-      .filter(p => !DISABLED.includes(p)) // 禁用的插件\n-      .forEach((Plug) => {\n-        // create the plug instance\n-        const kit = new PlugKit(this)\n-        this.plugs.push(new Plug(kit))\n-      })\n+  private loadPluginUI() {\n+    // handle ui, clear and reset the plug btns and plug panels\n+    this.editor.getUI().$plugPanelWrap.innerHTML = ''\n+    this.editor.getUI().$plugPanelWrap.style.display = 'none'\n+    this.editor.getUI().$plugBtnWrap.innerHTML = ''\n \n     // load the plug UI\n-    this.plugs.forEach((plug) => {\n-      this.loadPlugUI(plug)\n-    })\n-\n-    // bind events\n-    this.events.on('panel-close', () => this.closePlugPanel())\n+    this.plugs.forEach((plug) => this.loadPluginItem(plug))\n   }\n \n   /** Load the plug btn and plug panel on editor ui */\n-  private loadPlugUI(plug: EditorPlug) {\n+  private loadPluginItem(plug: EditorPlug) {\n     const $btn = plug.$btn\n     if (!$btn) return\n     this.editor.getUI().$plugBtnWrap.appendChild($btn)\n \n     // bind the event when click plug btn\n-    $btn.onclick = $btn.onclick || (() => {\n+    !$btn.onclick && ($btn.onclick = () => {\n       // removing the active class from all the buttons\n       this.editor.getUI().$plugBtnWrap\n         .querySelectorAll('.active')\n@@ -124,5 +160,3 @@ class PlugManager {\n     return result\n   }\n }\n-\n-export default PlugManager",
      "previous_filename": "ui/packages/artalk/src/editor/plug-manager.ts"
    },
    {
      "sha": "66e84676af3d6feb71f85ccfe2c9002e928b53c6",
      "filename": "ui/packages/artalk/src/plugins/editor/_kit.ts",
      "status": "renamed",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_kit.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_kit.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_kit.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,7 +1,5 @@\n-import EditorApi from '~/types/editor'\n-import * as Utils from '@/lib/utils'\n-import EditorPlug from \"./editor-plug\"\n-import PlugManager from './plug-manager'\n+import { PlugManager } from '../editor-kit'\n+import EditorPlug from \"./_plug\"\n \n /**\n  * PlugKit provides a set of methods to help you develop editor plug",
      "previous_filename": "ui/packages/artalk/src/editor/plug-kit.ts"
    },
    {
      "sha": "9f6e0be94968d3d0f4ba5c3e61ef5b650c00eb3a",
      "filename": "ui/packages/artalk/src/plugins/editor/_plug.ts",
      "status": "renamed",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_plug.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,5 +1,7 @@\n+import type { CommentData } from '~/types/artalk-data'\n+import type { EditorState } from '~/types/editor'\n import * as Utils from '@/lib/utils'\n-import PlugKit from './plug-kit'\n+import PlugKit from './_kit'\n \n /**\n  * Editor 插件\n@@ -8,6 +10,8 @@ interface EditorPlug {\n   $btn?: HTMLElement\n   $panel?: HTMLElement\n   contentTransformer?(rawContent: string): string\n+  editorStateEffectWhen?: EditorState\n+  editorStateEffect?(comment: CommentData): () => void\n }\n \n class EditorPlug {\n@@ -46,6 +50,12 @@ class EditorPlug {\n       if (aPlug === this) func()\n     })\n   }\n+\n+  /** Use editor state modifier */\n+  useEditorStateEffect(stateName: EditorState, effectFn: (comment: CommentData) => () => void) {\n+    this.editorStateEffectWhen = stateName\n+    this.editorStateEffect = effectFn\n+  }\n }\n \n export default EditorPlug",
      "previous_filename": "ui/packages/artalk/src/editor/editor-plug.ts"
    },
    {
      "sha": "273bf8ecf8b12ed1dafbef5c126e7d600c471e86",
      "filename": "ui/packages/artalk/src/plugins/editor/_sample.ts",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_sample.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_sample.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2F_sample.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,5 +1,5 @@\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n export default class SamplePlug extends EditorPlug {\n   constructor(kit: PlugKit) {",
      "previous_filename": "ui/packages/artalk/src/editor/core/_sample-plug.ts"
    },
    {
      "sha": "eb7f8268a898ed28b1143ba21f46f05c61eb2d9f",
      "filename": "ui/packages/artalk/src/plugins/editor/closable.ts",
      "status": "renamed",
      "additions": 22,
      "deletions": 10,
      "changes": 32,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fclosable.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fclosable.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fclosable.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,15 +1,33 @@\n import User from '@/lib/user'\n import * as Utils from '@/lib/utils'\n import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n-export default class ClosablePlug extends EditorPlug {\n+export default class Closable extends EditorPlug {\n   constructor(kit: PlugKit) {\n     super(kit)\n+\n+    const onOpen = () => this.open()\n+    const onClose = () => this.close()\n+\n+    this.kit.useMounted(() => {\n+      this.kit.useEvents().on('editor-open', onOpen)\n+      this.kit.useEvents().on('editor-close', onClose)\n+    })\n+    this.kit.useUnmounted(() => {\n+      this.kit.useEvents().off('editor-open', onOpen)\n+      this.kit.useEvents().off('editor-close', onClose)\n+    })\n+  }\n+\n+  private open() {\n+    this.kit.useUI().$textareaWrap.querySelector('.atk-comment-closed')?.remove()\n+    this.kit.useUI().$textarea.style.display = ''\n+    this.kit.useUI().$bottom.style.display = ''\n   }\n \n-  close() {\n+  private close() {\n     if (!this.kit.useUI().$textareaWrap.querySelector('.atk-comment-closed'))\n       this.kit.useUI().$textareaWrap.prepend(Utils.createElement(`<div class=\"atk-comment-closed\">${$t('onlyAdminCanReply')}</div>`))\n \n@@ -23,10 +41,4 @@ export default class ClosablePlug extends EditorPlug {\n       this.kit.useUI().$bottom.style.display = ''\n     }\n   }\n-\n-  open() {\n-    this.kit.useUI().$textareaWrap.querySelector('.atk-comment-closed')?.remove()\n-    this.kit.useUI().$textarea.style.display = ''\n-    this.kit.useUI().$bottom.style.display = ''\n-  }\n }",
      "previous_filename": "ui/packages/artalk/src/editor/core/closable-plug.ts"
    },
    {
      "sha": "ec9889a3973f2650581649e3839fc76d8abc8b1d",
      "filename": "ui/packages/artalk/src/plugins/editor/emoticons.scss",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.scss",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.scss",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.scss?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "previous_filename": "ui/packages/artalk/src/editor/plugs/emoticons-plug.scss"
    },
    {
      "sha": "2eb92acd88849c7456380e7ed77bbe55c6e32840",
      "filename": "ui/packages/artalk/src/plugins/editor/emoticons.ts",
      "status": "renamed",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Femoticons.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,11 +1,11 @@\n-import './emoticons-plug.scss'\n+import './emoticons.scss'\n \n import { EmoticonListData, EmoticonGrpData } from '~/types/artalk-data'\n import * as Utils from '@/lib/utils'\n import * as Ui from '@/lib/ui'\n import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n type OwOFormatType = {\n   [key: string] : {\n@@ -14,7 +14,7 @@ type OwOFormatType = {\n   }\n }\n \n-export default class EmoticonsPlug extends EditorPlug {\n+export default class Emoticons extends EditorPlug {\n   private emoticons: EmoticonListData = []\n   private loadingTask: Promise<void>|null = null\n \n@@ -24,8 +24,12 @@ export default class EmoticonsPlug extends EditorPlug {\n   constructor(kit: PlugKit) {\n     super(kit)\n \n-    this.usePanel(`<div class=\"atk-editor-plug-emoticons\"></div>`)\n-    this.useBtn($t('emoticon'))\n+    this.kit.useMounted(() => {\n+      this.usePanel(`<div class=\"atk-editor-plug-emoticons\"></div>`)\n+      this.useBtn($t('emoticon'))\n+    })\n+    this.kit.useUnmounted(() => {})\n+\n     this.useContentTransformer((raw) => this.transEmoticonImageText(raw))\n     this.usePanelShow(() => {\n       ;(async () => {",
      "previous_filename": "ui/packages/artalk/src/editor/plugs/emoticons-plug.ts"
    },
    {
      "sha": "b48f5448162639eb86f26e47bd3e98bd48ca4b0c",
      "filename": "ui/packages/artalk/src/plugins/editor/header-event.ts",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-event.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-event.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-event.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,35 @@\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+\n+export default class HeaderEvent extends EditorPlug {\n+  private get $inputs() {\n+    return this.kit.useEditor().getHeaderInputEls()\n+  }\n+\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    const inputEventFns: {[name: string]: () => void} = {}\n+    const changeEventFns: {[name: string]: () => void} = {}\n+\n+    const trigger = (evt: 'header-input'|'header-change', $input: HTMLInputElement, field: string) => () => {\n+      this.kit.useEvents().trigger(evt, { field, $input })\n+    }\n+\n+    this.kit.useMounted(() => {\n+      // batch bind the events\n+      Object.entries(this.$inputs).forEach(([key, $input]) => {\n+        $input.addEventListener('input', inputEventFns[key] = trigger('header-input', $input, key))\n+        $input.addEventListener('change', changeEventFns[key] = trigger('header-change', $input, key))\n+      })\n+    })\n+\n+    this.kit.useUnmounted(() => {\n+      // unmount the event\n+      Object.entries(this.$inputs).forEach(([key, $input]) => {\n+        $input.removeEventListener('input', inputEventFns[key])\n+        $input.removeEventListener('change', changeEventFns[key])\n+      })\n+    })\n+  }\n+}"
    },
    {
      "sha": "f21874273ea0d7e13631a2a2dbf3bc4275f59ce2",
      "filename": "ui/packages/artalk/src/plugins/editor/header-link.ts",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-link.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-link.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-link.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,31 @@\n+import User from '@/lib/user'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+\n+export default class HeaderLink extends EditorPlug {\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    const onLinkChange = ({ field }: { field: string }) => {\n+      if (field === 'link') this.onLinkInputChange()\n+    }\n+\n+    // bind events\n+    this.kit.useMounted(() => {\n+      this.kit.useEvents().on('header-change', onLinkChange)\n+    })\n+\n+    this.kit.useUnmounted(() => {\n+      this.kit.useEvents().off('header-change', onLinkChange)\n+    })\n+  }\n+\n+  private onLinkInputChange() {\n+    // auto and force add protocol prefix for user input link\n+    const link = this.kit.useUI().$link.value.trim()\n+    if (!!link && !/^(http|https):\\/\\//.test(link)) {\n+      this.kit.useUI().$link.value = `https://${link}`\n+      User.update({ link: this.kit.useUI().$link.value })\n+    }\n+  }\n+}"
    },
    {
      "sha": "49ba6a4819e694d30e17543e13a660e517e007e1",
      "filename": "ui/packages/artalk/src/plugins/editor/header-user.ts",
      "status": "added",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-user.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-user.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fheader-user.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,98 @@\n+import User from '@/lib/user'\n+import $t from '@/i18n'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+\n+export default class HeaderUser extends EditorPlug {\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    const onInput = ({ $input, field }: { $input: HTMLInputElement, field: string }) => {\n+      if (this.kit.useEditor().getState() === 'edit')\n+        return // TODO prevent execute when editing, since update comment.user not support\n+\n+      // update user data\n+      User.update({ [field]: $input.value.trim() })\n+\n+      // remote fetch user info\n+      if (field === 'nick' || field === 'email')\n+        this.fetchUserInfo() // must after update user data, since fetchUserInfo() will use User.data\n+    }\n+\n+    this.kit.useMounted(() => {\n+      Object.entries(this.kit.useEditor().getHeaderInputEls())\n+        .forEach(([key, $input]) => {\n+          // set placeholder\n+          $input.placeholder = `${$t(key as any)}`\n+\n+          // sync header values from User.data\n+          $input.value = User.data[key] || ''\n+        })\n+\n+      // bind events\n+      this.kit.useEvents().on('header-input', onInput)\n+    })\n+\n+    this.kit.useUnmounted(() => {\n+      this.kit.useEvents().off('header-input', onInput)\n+    })\n+  }\n+\n+  private query = {\n+    timer: <number|null>null,\n+    abortFn: <(() => void)|null>null\n+  }\n+\n+  /**\n+   * Fetch user info from server\n+   */\n+  private fetchUserInfo() {\n+    User.logout() // clear login status\n+\n+    if (this.query.timer) window.clearTimeout(this.query.timer) // clear the not executed timeout task\n+    if (this.query.abortFn) this.query.abortFn() // abort the last request (if request is pending not finished)\n+\n+    this.query.timer = window.setTimeout(() => {\n+      this.query.timer = null // clear the timer (clarify the timer is executing)\n+\n+      const {req, abort} = this.kit.useApi().user.userGet(\n+        User.data.nick, User.data.email\n+      )\n+      this.query.abortFn = abort\n+      req.then(data => this.onUserInfoFetched(data))\n+        .catch((err) => {})\n+        .finally(() => {\n+          this.query.abortFn = null // clear the abort function (clarify the request is finished)\n+        })\n+    }, 400) // delay to reduce request\n+  }\n+\n+  /**\n+   * Function called when user info fetched\n+   *\n+   * @param data The response data from server\n+   */\n+  private onUserInfoFetched(\n+    data: any // TODO fix type\n+  ) {\n+    // If api response is not login, logout\n+    if (!data.is_login) User.logout()\n+\n+    // Update unread notifies\n+    this.kit.useGlobalCtx().updateUnreadList(data.unread)\n+\n+    // If user is admin and not login,\n+    if (User.checkHasBasicUserInfo() && !data.is_login && data.user?.is_admin) {\n+      // then show login window\n+      this.kit.useGlobalCtx().checkAdmin({\n+        onSuccess: () => {}\n+      })\n+    }\n+\n+    // Auto fill user link from server\n+    if (data.user && data.user.link) {\n+      this.kit.useUI().$link.value = data.user.link\n+      User.update({ link: data.user.link })\n+    }\n+  }\n+}"
    },
    {
      "sha": "011efe0f1a7d86bca3bd85901f2944419fdc6475",
      "filename": "ui/packages/artalk/src/plugins/editor/index.ts",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Findex.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Findex.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Findex.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,40 @@\n+import type ArtalkConfig from '~/types/artalk-config'\n+import EditorPlug from './_plug'\n+import LocalStorage from './local-storage'\n+import Textarea from './textarea'\n+import SubmitBtn from './submit-btn'\n+import Submit from './submit'\n+import StateReply from './state-reply'\n+import StateEdit from './state-edit'\n+import Closable from './closable'\n+import HeaderEvent from './header-event'\n+import HeaderUser from './header-user'\n+import HeaderLink from './header-link'\n+import Mover from './mover'\n+import Emoticons from './emoticons'\n+import Upload from './upload'\n+import Preview from './preview'\n+\n+/** The default enabled plugs */\n+export const ENABLED_PLUGS: (typeof EditorPlug)[] = [\n+  // Core\n+  LocalStorage,\n+  HeaderEvent, HeaderUser, HeaderLink,\n+  Textarea,\n+  Submit, SubmitBtn,\n+  Mover, StateReply, StateEdit,\n+  Closable,\n+\n+  // Extensions\n+  Emoticons, Upload, Preview\n+]\n+\n+/** Get the name list of disabled plugs */\n+export function getDisabledPlugByConf(conf: ArtalkConfig): (typeof EditorPlug)[] {\n+  return [\n+    {k: Upload, v: conf.imgUpload},\n+    {k: Emoticons, v: conf.emoticons},\n+    {k: Preview, v: conf.preview},\n+    {k: Mover, v: conf.editorTravel},\n+  ].filter(n => !n.v).flatMap(n => n.k)\n+}"
    },
    {
      "sha": "2de05fee7d5e328567e9ecb7db204a5aadbbf8c8",
      "filename": "ui/packages/artalk/src/plugins/editor/local-storage.ts",
      "status": "renamed",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Flocal-storage.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Flocal-storage.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Flocal-storage.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,27 +1,31 @@\n import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n const LocalStorageKey = 'ArtalkContent'\n \n-export default class LocalStoragePlug extends EditorPlug {\n+export default class LocalStorage extends EditorPlug {\n   constructor(kit: PlugKit) {\n     super(kit)\n \n+    const onContentUpdated = () => {\n+      this.save()\n+    }\n+\n     this.kit.useMounted(() => {\n       // load editor content from localStorage when init\n       const localContent = window.localStorage.getItem(LocalStorageKey) || ''\n       if (localContent.trim() !== '') {\n         this.kit.useEditor().showNotify($t('restoredMsg'), 'i')\n         this.kit.useEditor().setContent(localContent)\n       }\n-    })\n \n-    this.kit.useUnmounted(() => {\n+      // bind event\n+      this.kit.useEvents().on('content-updated', onContentUpdated)\n     })\n \n-    this.kit.useEvents().on('content-updated', () => {\n-      this.save()\n+    this.kit.useUnmounted(() => {\n+      this.kit.useEvents().off('content-updated', onContentUpdated)\n     })\n   }\n ",
      "previous_filename": "ui/packages/artalk/src/editor/core/local-storage-plug.ts"
    },
    {
      "sha": "6c62e3684d75fc02ad0cf472f7b5508d81a3bd2d",
      "filename": "ui/packages/artalk/src/plugins/editor/mover.ts",
      "status": "renamed",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fmover.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fmover.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fmover.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,14 +1,9 @@\n import * as Utils from '@/lib/utils'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n \n-export default class MoverPlug extends EditorPlug {\n+export default class Mover extends EditorPlug {\n   private isMoved = false\n \n-  constructor(kit: PlugKit) {\n-    super(kit)\n-  }\n-\n   move(afterEl: HTMLElement) {\n     if (this.isMoved) return\n     this.isMoved = true\n@@ -28,7 +23,5 @@ export default class MoverPlug extends EditorPlug {\n     if (!this.isMoved) return\n     this.isMoved = false\n     this.kit.useGlobalCtx().$root.querySelector('.atk-editor-travel-placeholder')?.replaceWith(this.kit.useUI().$el)\n-\n-    this.kit.useEditor().cancelReply()  // 取消回复\n   }\n }",
      "previous_filename": "ui/packages/artalk/src/editor/core/mover-plug.ts"
    },
    {
      "sha": "08bb3cdc51906c72e76c4745a4e16afbce1d13e0",
      "filename": "ui/packages/artalk/src/plugins/editor/preview.scss",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.scss",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.scss",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.scss?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "previous_filename": "ui/packages/artalk/src/editor/plugs/preview-plug.scss"
    },
    {
      "sha": "ed0d68ac867cf2bc33f87f07a0c7b1e2fc067501",
      "filename": "ui/packages/artalk/src/plugins/editor/preview.ts",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fpreview.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,40 @@\n+import './preview.scss'\n+\n+import $t from '@/i18n'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+\n+export default class Preview extends EditorPlug {\n+  private isPlugPanelShow = false\n+\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    this.kit.useMounted(() => {\n+      this.usePanel(`<div class=\"atk-editor-plug-preview\"></div>`)\n+\n+      // initialize plug button\n+      let btnText = $t('preview')\n+      if (this.kit.useGlobalCtx().getMarkedInstance()) btnText += ` <i title=\"Markdown is supported\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></i>`\n+      this.useBtn(btnText)\n+    })\n+    this.kit.useUnmounted(() => {})\n+\n+    // function to update content\n+    this.kit.useEvents().on('content-updated', (content) => {\n+      this.isPlugPanelShow && this.updateContent()\n+    })\n+\n+    this.usePanelShow(() => {\n+      this.isPlugPanelShow = true\n+      this.updateContent()\n+    })\n+    this.usePanelHide(() => {\n+      this.isPlugPanelShow = false\n+    })\n+  }\n+\n+  updateContent() {\n+    this.$panel!.innerHTML = this.kit.useEditor().getContentMarked()\n+  }\n+}"
    },
    {
      "sha": "0b7f90e2b9c45f7d235073225b936fcf077a480d",
      "filename": "ui/packages/artalk/src/plugins/editor/state-edit.ts",
      "status": "renamed",
      "additions": 18,
      "deletions": 23,
      "changes": 41,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-edit.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-edit.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-edit.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -2,27 +2,28 @@ import type { CommentData } from '~/types/artalk-data'\n import $t from '@/i18n'\n import * as Utils from '@/lib/utils'\n import User from '@/lib/user'\n-import PlugKit from '../plug-kit'\n-import EditorPlug from '../editor-plug'\n-import SubmitPlug from './submit-plug'\n-import MoverPlug from './mover-plug'\n+import PlugKit from './_kit'\n+import EditorPlug from './_plug'\n+import Submit from './submit'\n \n-export default class EditPlug extends EditorPlug {\n+export default class StateEdit extends EditorPlug {\n   private comment?: CommentData\n \n-  getComment() {\n-    return this.comment\n-  }\n-\n-  getIsEditMode() {\n-    return !!this.comment\n-  }\n-\n   constructor(kit: PlugKit) {\n     super(kit)\n \n+    // add effect when state switch to `edit`\n+    this.useEditorStateEffect('edit', (comment) => {\n+      this.edit(comment)\n+\n+      return () => {\n+        this.cancelEdit()\n+      }\n+    })\n+\n+    // register submit preset\n     this.kit.useMounted(() => {\n-      const submitPlug = this.kit.useDeps(SubmitPlug)\n+      const submitPlug = this.kit.useDeps(Submit)\n       if (!submitPlug) throw Error(\"SubmitPlug not initialized\")\n \n       submitPlug.registerCustom({\n@@ -46,10 +47,7 @@ export default class EditPlug extends EditorPlug {\n     })\n   }\n \n-  edit(comment: CommentData, $comment: HTMLElement) {\n-    this.cancelEdit()\n-    this.kit.useEditor().cancelReply()\n-\n+  private edit(comment: CommentData) {\n     const ui = this.kit.useUI()\n     if (!ui.$editCancelBtn) {\n       const $btn = Utils.createElement(\n@@ -59,7 +57,7 @@ export default class EditPlug extends EditorPlug {\n         `</div>`\n       )\n       $btn.onclick = () => {\n-        this.cancelEdit()\n+        this.kit.useEditor().resetState()\n       }\n       ui.$textareaWrap.append($btn)\n       ui.$editCancelBtn = $btn\n@@ -68,8 +66,6 @@ export default class EditPlug extends EditorPlug {\n \n     ui.$header.style.display = 'none' // TODO support modify header information\n \n-    this.kit.useDeps(MoverPlug)?.move($comment)\n-\n     ui.$nick.value = comment.nick || ''\n     ui.$email.value = comment.email || ''\n     ui.$link.value = comment.link || ''\n@@ -80,7 +76,7 @@ export default class EditPlug extends EditorPlug {\n     this.updateSubmitBtnText($t('save'))\n   }\n \n-  cancelEdit() {\n+  private cancelEdit() {\n     if (!this.comment) return\n \n     const ui = this.kit.useUI()\n@@ -91,7 +87,6 @@ export default class EditPlug extends EditorPlug {\n     }\n \n     this.comment = undefined\n-    this.kit.useDeps(MoverPlug)?.back()\n \n     const { nick, email, link } = User.data\n     ui.$nick.value = nick",
      "previous_filename": "ui/packages/artalk/src/editor/core/edit-plug.ts"
    },
    {
      "sha": "09109d6945e932fe880a404b222cac6c27c54e6a",
      "filename": "ui/packages/artalk/src/plugins/editor/state-reply.ts",
      "status": "added",
      "additions": 91,
      "deletions": 0,
      "changes": 91,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-reply.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-reply.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fstate-reply.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,91 @@\n+import type { CommentData } from '~/types/artalk-data'\n+import * as Utils from '@/lib/utils'\n+import * as Ui from '@/lib/ui'\n+import $t from '@/i18n'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+import Submit from './submit'\n+import SubmitAddPreset from './submit-add'\n+\n+export default class StateReply extends EditorPlug {\n+  private comment?: CommentData\n+\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    // add effect when state switch to `reply`\n+    this.useEditorStateEffect('reply', (commentData) => {\n+      this.setReply(commentData)\n+\n+      return () => {\n+        this.cancelReply()\n+      }\n+    })\n+\n+    // register submit preset\n+    this.kit.useEvents().on('mounted', () => {\n+      const submitPlug = this.kit.useDeps(Submit)\n+      if (!submitPlug) throw Error(\"SubmitPlug not initialized\")\n+\n+      const defaultPreset = new SubmitAddPreset(this.kit)\n+\n+      submitPlug.registerCustom({\n+        activeCond: () => !!this.comment, // active this custom submit when reply mode\n+        req: async () => {\n+          if (!this.comment) throw new Error('reply comment cannot be empty')\n+\n+          const nComment = await this.kit.useApi().comment.add({\n+            ...defaultPreset.getSubmitAddParams(),\n+            rid: this.comment.id,\n+            page_key: this.comment.page_key,\n+            page_title: undefined,\n+            site_name: this.comment.site_name\n+          })\n+\n+          return nComment\n+        },\n+        post: (nComment: CommentData) => {\n+          // open another page when reply comment is not the same pageKey\n+          const conf = this.kit.useConf()\n+          if (nComment.page_key !== conf.pageKey) {\n+            window.open(`${nComment.page_url}#atk-comment-${nComment.id}`)\n+          }\n+\n+          defaultPreset.postSubmitAdd(nComment)\n+        }\n+      })\n+    })\n+  }\n+\n+  private setReply(commentData: CommentData) {\n+    const ui = this.kit.useUI()\n+    if (!ui.$sendReply) {\n+      ui.$sendReply = Utils.createElement(\n+        `<div class=\"atk-send-reply\">` +\n+          `${$t('reply')} ` +\n+          `<span class=\"atk-text\"></span><span class=\"atk-cancel\">×</span>` +\n+        `</div>`\n+      )\n+      ui.$sendReply.querySelector<HTMLElement>('.atk-text')!.innerText = `@${commentData.nick}`\n+      ui.$sendReply.addEventListener('click', () => {\n+        this.kit.useEditor().resetState()\n+      })\n+      ui.$textareaWrap.append(ui.$sendReply)\n+    }\n+\n+    this.comment = commentData\n+\n+    ui.$textarea.focus()\n+  }\n+\n+  private cancelReply() {\n+    if (!this.comment) return\n+\n+    const ui = this.kit.useUI()\n+    if (ui.$sendReply) {\n+      ui.$sendReply.remove()\n+      ui.$sendReply = undefined\n+    }\n+    this.comment = undefined\n+  }\n+}"
    },
    {
      "sha": "938f92ef6c49ab0dfdf527333be249aef6354bb9",
      "filename": "ui/packages/artalk/src/plugins/editor/submit-add.ts",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-add.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-add.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-add.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,33 @@\n+import type { CommentData } from '~/types/artalk-data'\n+import User from '@/lib/user'\n+import PlugKit from './_kit'\n+\n+export default class SubmitAddPreset {\n+  constructor(private kit: PlugKit) {}\n+\n+  async reqAdd() {\n+    const nComment = await this.kit.useApi().comment.add({\n+      ...this.getSubmitAddParams()\n+    })\n+    return nComment\n+  }\n+\n+  getSubmitAddParams() {\n+    const { nick, email, link } = User.data\n+    const conf = this.kit.useConf()\n+\n+    return {\n+      content: this.kit.useEditor().getContentFinal(),\n+      nick, email, link,\n+      rid: 0,\n+      page_key: conf.pageKey,\n+      page_title: conf.pageTitle,\n+      site_name: conf.site\n+    }\n+  }\n+\n+  postSubmitAdd(commentNew: CommentData) {\n+    // insert the new comment to list\n+    this.kit.useGlobalCtx().insertComment(commentNew)\n+  }\n+}"
    },
    {
      "sha": "a29f931ff40c1515eaf468fa9ea68c3742c527a7",
      "filename": "ui/packages/artalk/src/plugins/editor/submit-btn.ts",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-btn.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-btn.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit-btn.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,8 +1,8 @@\n import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n-export default class SubmitBtnPlug extends EditorPlug {\n+export default class SubmitBtn extends EditorPlug {\n   constructor(kit: PlugKit) {\n     super(kit)\n ",
      "previous_filename": "ui/packages/artalk/src/editor/core/submit-btn-plug.ts"
    },
    {
      "sha": "8a42283f59c716f1f4df274ef0296d5629b61b61",
      "filename": "ui/packages/artalk/src/plugins/editor/submit.ts",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fsubmit.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,73 @@\n+import type { CommentData } from '~/types/artalk-data'\n+import $t from '@/i18n'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n+import SubmitAddPreset from './submit-add'\n+\n+interface CustomSubmit {\n+  activeCond: () => void\n+  pre?: () => void\n+  req?: () => Promise<CommentData>\n+  post?: (nComment: CommentData) => void\n+}\n+\n+export default class Submit extends EditorPlug {\n+  private customs: CustomSubmit[] = []\n+  private defaultPreset: SubmitAddPreset\n+\n+  constructor(kit: PlugKit) {\n+    super(kit)\n+\n+    this.defaultPreset = new SubmitAddPreset(this.kit)\n+\n+    const onEditorSubmit = () => this.do()\n+\n+    this.kit.useMounted(() => {\n+      // invoke `do()` when event `editor-submit` is triggered\n+      this.kit.useGlobalCtx().on('editor-submit', onEditorSubmit)\n+    })\n+    this.kit.useUnmounted(() => {\n+      this.kit.useGlobalCtx().off('editor-submit', onEditorSubmit)\n+    })\n+  }\n+\n+  registerCustom(c: CustomSubmit) {\n+    this.customs.push(c)\n+  }\n+\n+  private async do() {\n+    if (this.kit.useEditor().getContentFinal().trim() === '') {\n+      this.kit.useEditor().focus()\n+      return\n+    }\n+\n+    const custom = this.customs.find(o => o.activeCond())\n+\n+    this.kit.useEditor().showLoading()\n+\n+    try {\n+      // pre submit\n+      if (custom?.pre) custom.pre()\n+\n+      let nComment: CommentData\n+\n+      // submit request\n+      if (custom?.req) nComment = await custom.req()\n+      else nComment = await this.defaultPreset.reqAdd()\n+\n+      // post submit\n+      if (custom?.post) custom.post(nComment)\n+      else this.defaultPreset.postSubmitAdd(nComment)\n+    } catch (err: any) {\n+      // submit error\n+      console.error(err)\n+      this.kit.useEditor().showNotify(`${$t('commentFail')}，${err.msg || String(err)}`, 'e')\n+      return\n+    } finally {\n+      this.kit.useEditor().hideLoading()\n+    }\n+\n+    this.kit.useEditor().reset() // 复原编辑器\n+    this.kit.useGlobalCtx().trigger('editor-submitted')\n+  }\n+}"
    },
    {
      "sha": "47d04dd4b22c2b4d36793c52393e43b1d6cc0b64",
      "filename": "ui/packages/artalk/src/plugins/editor/textarea.ts",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Ftextarea.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Ftextarea.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Ftextarea.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,8 +1,8 @@\n import $t from '@/i18n'\n-import EditorPlug from '../editor-plug'\n-import PlugKit from '../plug-kit'\n+import EditorPlug from './_plug'\n+import PlugKit from './_kit'\n \n-export default class TextareaPlug extends EditorPlug {\n+export default class Textarea extends EditorPlug {\n   constructor(kit: PlugKit) {\n     super(kit)\n ",
      "previous_filename": "ui/packages/artalk/src/editor/core/textarea-plug.ts"
    },
    {
      "sha": "d515e88bb77b83e24f7db858f2c8bcc77642a037",
      "filename": "ui/packages/artalk/src/plugins/editor/upload.ts",
      "status": "renamed",
      "additions": 29,
      "deletions": 9,
      "changes": 38,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fupload.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fupload.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Feditor%2Fupload.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,23 +1,30 @@\n import * as Utils from '@/lib/utils'\n+import User from '@/lib/user'\n import $t from '@/i18n'\n-import User from '../../lib/user'\n-import PlugKit from '../plug-kit'\n-import EditorPlug from '../editor-plug'\n+import PlugKit from './_kit'\n+import EditorPlug from './_plug'\n \n /** 允许的图片格式 */\n const AllowImgExts = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg', 'webp']\n \n-export default class UploadPlug extends EditorPlug {\n+export default class Upload extends EditorPlug {\n   private $imgUploadInput?: HTMLInputElement\n \n   constructor(kit: PlugKit) {\n     super(kit)\n \n+    this.kit.useMounted(() => this.init())\n+\n+    this.initDragImg()\n+  }\n+\n+  private init() {\n     this.$imgUploadInput = document.createElement('input')\n     this.$imgUploadInput.type = 'file'\n     this.$imgUploadInput.style.display = 'none'\n     this.$imgUploadInput.accept = AllowImgExts.map(o => `.${o}`).join(',')\n \n+    // TODO Use btn cannot refresh when mounted event is triggered\n     const $btn = this.useBtn(`${$t('image')}`)\n     $btn.after(this.$imgUploadInput)\n     $btn.onclick = () => {\n@@ -36,7 +43,9 @@ export default class UploadPlug extends EditorPlug {\n     if (!this.kit.useConf().imgUpload) {\n       this.$btn!.setAttribute('atk-only-admin-show', '')\n     }\n+  }\n \n+  private initDragImg() {\n     // 统一从 FileList 获取文件并上传图片方法\n     const uploadFromFileList = (files?: FileList) => {\n       if (!files) return\n@@ -50,26 +59,37 @@ export default class UploadPlug extends EditorPlug {\n     // 拖拽图片\n     // @link https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop\n     // 阻止浏览器的默认释放行为\n-    this.kit.useUI().$textarea.addEventListener('dragover', (evt) => {\n+    const onDragover = (evt: Event) => {\n       evt.stopPropagation()\n       evt.preventDefault()\n-    })\n+    }\n \n-    this.kit.useUI().$textarea.addEventListener('drop', (evt) => {\n+    const onDrop = (evt: DragEvent) => {\n       const files = evt.dataTransfer?.files\n       if (files?.length) {\n         evt.preventDefault()\n         uploadFromFileList(files)\n       }\n-    })\n+    }\n \n     // 粘贴图片\n-    this.kit.useUI().$textarea.addEventListener('paste', (evt) => {\n+    const onPaste = (evt: ClipboardEvent) => {\n       const files = evt.clipboardData?.files\n       if (files?.length) {\n         evt.preventDefault()\n         uploadFromFileList(files)\n       }\n+    }\n+\n+    this.kit.useMounted(() => {\n+      this.kit.useUI().$textarea.addEventListener('dragover', onDragover)\n+      this.kit.useUI().$textarea.addEventListener('drop', onDrop)\n+      this.kit.useUI().$textarea.addEventListener('paste', onPaste)\n+    })\n+    this.kit.useUnmounted(() => {\n+      this.kit.useUI().$textarea.removeEventListener('dragover', onDragover)\n+      this.kit.useUI().$textarea.removeEventListener('drop', onDrop)\n+      this.kit.useUI().$textarea.removeEventListener('paste', onPaste)\n     })\n   }\n ",
      "previous_filename": "ui/packages/artalk/src/editor/plugs/upload-plug.ts"
    },
    {
      "sha": "f4e4dd3b6c093eda0676ce56a009ba12abfa4831",
      "filename": "ui/packages/artalk/src/plugins/index.ts",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Findex.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Findex.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Findex.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,27 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import { EditorKit } from './editor-kit'\n+import * as Stat from './stat'\n+import { ListCloseEditor } from './list-close-editor'\n+import { VersionCheck } from './version-check'\n+import { Unread } from './unread'\n+import { ListCount } from './list-count'\n+import { ListSidebarBtn } from './list-sidebar-btn'\n+import { ListUnreadBadge } from './list-unread-badge'\n+import { ListGoto } from './list-goto'\n+import { ListCopyright } from './list-copyright'\n+import { ListNoComment } from './list-no-comment'\n+import { ListDropdown } from './list-dropdown'\n+import { ListTimeTicking } from './list-time-ticking'\n+import { ListErrorDialog } from './list-error-dialog'\n+\n+const ListPlugins: ArtalkPlugin[] = [\n+  ListCloseEditor, ListCount, ListSidebarBtn,\n+  ListUnreadBadge, ListDropdown, ListGoto, ListNoComment, ListCopyright,\n+  ListTimeTicking, ListErrorDialog\n+]\n+\n+export const DefaultPlugins: ArtalkPlugin[] = [\n+  EditorKit, Stat.PvCountWidget, VersionCheck, Unread,\n+\n+  ...ListPlugins\n+]"
    },
    {
      "sha": "8f919becab6005761a0593d98a847b15d8825229",
      "filename": "ui/packages/artalk/src/plugins/list-close-editor.ts",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-close-editor.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-close-editor.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-close-editor.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,66 @@\n+import type ContextApi from '~/types/context'\n+import type ArtalkPlugin from '~/types/plugin'\n+import { PageData } from '~/types/artalk-data'\n+import $t from '@/i18n'\n+\n+function ensureListEditor(ctx: ContextApi) {\n+  const list = ctx.get('list')\n+  const editor = ctx.get('editor')\n+\n+  if (!list) throw new Error('List instance not found')\n+  if (!editor) throw new Error('Editor instance not found')\n+\n+  return { list, editor }\n+}\n+\n+export const ListCloseEditor: ArtalkPlugin = (ctx) => {\n+  let $closeCommentBtn: HTMLElement|undefined\n+\n+  // on Artalk inited\n+  // (after all components had mounted)\n+  ctx.on('inited', () => {\n+    const { list } = ensureListEditor(ctx)\n+\n+    $closeCommentBtn = list.$el.querySelector<HTMLElement>('[data-action=\"admin-close-comment\"]')!\n+\n+    // bind editor close button click event\n+    $closeCommentBtn.addEventListener('click', () => {\n+      const page = ctx.getPage()\n+      if (!page) throw new Error('Page data not found')\n+\n+      page.admin_only = !page.admin_only\n+      adminPageEditSave(ctx, page)\n+    })\n+  })\n+\n+  // on comment list loaded (it will include page data update)\n+  ctx.on('page-loaded', (page) => {\n+    const { editor } = ensureListEditor(ctx)\n+\n+    // if page comment is closed\n+    if (page?.admin_only === true) {\n+      // then close editor\n+      editor.getPlugs()?.getEvents().trigger('editor-close')\n+      $closeCommentBtn && ($closeCommentBtn.innerText = $t('openComment'))\n+    } else {\n+      // the open editor\n+      editor.getPlugs()?.getEvents().trigger('editor-open')\n+      $closeCommentBtn && ($closeCommentBtn.innerText = $t('closeComment'))\n+    }\n+  })\n+}\n+\n+/** 管理员设置页面信息 */\n+function adminPageEditSave(ctx: ContextApi, page: PageData) {\n+  ctx.editorShowLoading()\n+  ctx.getApi().page.pageEdit(page)\n+    .then((respPage) => {\n+      ctx.updatePage(respPage)\n+    })\n+    .catch(err => {\n+      ctx.editorShowNotify(`${$t('editFail')}: ${err.msg || String(err)}`, 'e')\n+    })\n+    .finally(() => {\n+      ctx.editorHideLoading()\n+    })\n+}"
    },
    {
      "sha": "ab7aee6929468c4748e7ff49de1f3b979ce12aa1",
      "filename": "ui/packages/artalk/src/plugins/list-copyright.ts",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-copyright.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-copyright.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-copyright.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,17 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import { version as ARTALK_VERSION } from '~/package.json'\n+\n+export const ListCopyright: ArtalkPlugin = (ctx) => {\n+  ctx.on('conf-loaded', () => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    const $copyright = list.$el.querySelector<HTMLElement>('.atk-copyright')\n+    if (!$copyright) return\n+\n+    $copyright.innerHTML = (\n+      `Powered By <a href=\"https://artalk.js.org\" ` +\n+      `target=\"_blank\" title=\"Artalk v${ARTALK_VERSION}\">` +\n+      `Artalk</a>`)\n+  })\n+}"
    },
    {
      "sha": "3e415203221907b19882a382e8cdf3557428cd5e",
      "filename": "ui/packages/artalk/src/plugins/list-count.ts",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-count.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-count.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-count.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,20 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+import $t from '@/i18n'\n+\n+export const ListCount: ArtalkPlugin = (ctx) => {\n+  const refreshCountNumEl = () => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    const $count = list.$el.querySelector('.atk-comment-count .atk-text')\n+    if (!$count) return\n+\n+    const text = Utils.htmlEncode($t('counter', { count: `${Number(list.getData()?.total) || 0}` }))\n+    $count.innerHTML = text.replace(/(\\d+)/, '<span class=\"atk-comment-count-num\">$1</span>')\n+  }\n+\n+  ctx.on('list-loaded', () => {\n+    refreshCountNumEl()\n+  })\n+}"
    },
    {
      "sha": "94369710d6ea8f38a0b96bd81378c83094b44075",
      "filename": "ui/packages/artalk/src/plugins/list-dropdown.ts",
      "status": "added",
      "additions": 96,
      "deletions": 0,
      "changes": 96,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-dropdown.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-dropdown.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-dropdown.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,96 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+import $t from '@/i18n'\n+\n+export const ListDropdown: ArtalkPlugin = (ctx) => {\n+  const reloadUseParamsEditor = (func: (p: any) => void) => {\n+    ctx.get('list')!.getOptions().paramsEditor = func // TODO impl common request manager instead of list\n+    ctx.reload()\n+  }\n+\n+  const initDropdown = ($dropdownOn: HTMLElement) => {\n+    renderDropdown({\n+      $dropdownWrap: $dropdownOn,\n+      dropdownList: [\n+        [$t('sortLatest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'date_desc' }) }],\n+        [$t('sortBest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'vote' }) }],\n+        [$t('sortOldest'), () => { reloadUseParamsEditor(p => { p.sort_by = 'date_asc' }) }],\n+        [$t('sortAuthor'), () => { reloadUseParamsEditor(p => { p.view_only_admin = true }) }],\n+      ]\n+    })\n+  }\n+\n+  ctx.on('conf-loaded', () => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    const $count = list.$el.querySelector<HTMLElement>('.atk-comment-count')\n+    if (!$count) return\n+\n+    // 评论列表排序 Dropdown 下拉选择层\n+    if (ctx.conf.listSort) {\n+      initDropdown($count)\n+    } else {\n+      removeDropdown({\n+        $dropdownWrap: $count\n+      })\n+    }\n+  })\n+}\n+\n+/** 评论排序方式选择下拉菜单 */\n+function renderDropdown(conf: {\n+  $dropdownWrap: HTMLElement,\n+  dropdownList: [string, () => void][]\n+}) {\n+  const { $dropdownWrap, dropdownList } = conf\n+  if ($dropdownWrap.querySelector('.atk-dropdown')) return\n+\n+  // 修改 class\n+  $dropdownWrap.classList.add('atk-dropdown-wrap')\n+\n+  // 插入图标\n+  $dropdownWrap.append(Utils.createElement(`<span class=\"atk-arrow-down-icon\"></span>`))\n+\n+  // 列表项点击事件\n+  let curtActive = 0 // 当前选中\n+  const onItemClick = (i: number, $item: HTMLElement, name: string, action: Function) => {\n+    action()\n+\n+    // set active\n+    curtActive = i\n+    $dropdown.querySelectorAll('.active').forEach((e) => { e.classList.remove('active') })\n+    $item.classList.add('active')\n+\n+    // 关闭层 (临时消失，取消 :hover)\n+    $dropdown.style.display = 'none'\n+    setTimeout(() => { $dropdown.style.display = '' }, 80)\n+  }\n+\n+  // 生成列表元素\n+  const $dropdown = Utils.createElement(`<ul class=\"atk-dropdown atk-fade-in\"></ul>`)\n+  dropdownList.forEach((item, i) => {\n+    const name = item[0] as string\n+    const action = item[1] as Function\n+\n+    const $item = Utils.createElement(`<li class=\"atk-dropdown-item\"><span></span></li>`)\n+    const $link = $item.querySelector<HTMLElement>('span')!\n+    $link.innerText = name\n+    $link.onclick = () => { onItemClick(i, $item, name, action) }\n+    $dropdown.append($item)\n+\n+    if (i === curtActive) $item.classList.add('active') // 默认选中项\n+  })\n+\n+  $dropdownWrap.append($dropdown)\n+}\n+\n+/** 删除评论排序方式选择下拉菜单 */\n+function removeDropdown(conf: {\n+  $dropdownWrap: HTMLElement\n+}) {\n+  const { $dropdownWrap } = conf\n+  $dropdownWrap.classList.remove('atk-dropdown-wrap')\n+  $dropdownWrap.querySelector('.atk-arrow-down-icon')?.remove()\n+  $dropdownWrap.querySelector('.atk-dropdown')?.remove()\n+}"
    },
    {
      "sha": "5c44ff0fa53752e2d7036988c2aed547284227bc",
      "filename": "ui/packages/artalk/src/plugins/list-error-dialog.ts",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-error-dialog.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-error-dialog.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-error-dialog.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,42 @@\n+import type ArtalkPlugin from '~/types/plugin'\n+import List from '@/list/list'\n+import * as Utils from '../lib/utils'\n+import * as Ui from '../lib/ui'\n+import User from '../lib/user'\n+import $t from '../i18n'\n+\n+export const ListErrorDialog: ArtalkPlugin = (ctx) => {\n+  ctx.on('list-error', (err) => {\n+    const list = ctx.get('list')!\n+    Ui.setError(list.$el, renderErrorDialog(list, err.msg, err.data))\n+  })\n+}\n+\n+export function renderErrorDialog(list: List, errMsg: string, errData?: any): HTMLElement {\n+  const errEl = Utils.createElement(`<span>${errMsg}，${$t('listLoadFailMsg')}<br/></span>`)\n+\n+  const $retryBtn = Utils.createElement(`<span style=\"cursor:pointer;\">${$t('listRetry')}</span>`)\n+  $retryBtn.onclick = () => (list.fetchComments(0))\n+  errEl.appendChild($retryBtn)\n+\n+  const adminBtn = Utils.createElement('<span atk-only-admin-show> | <span style=\"cursor:pointer;\">打开控制台</span></span>')\n+  errEl.appendChild(adminBtn)\n+  if (!User.data.isAdmin) adminBtn.classList.add('atk-hide')\n+\n+  let sidebarView = ''\n+\n+  // 找不到站点错误，打开侧边栏并填入创建站点表单\n+  if (errData?.err_no_site) {\n+    const viewLoadParam = {\n+      create_name: list.ctx.conf.site,\n+      create_urls: `${window.location.protocol}//${window.location.host}`\n+    }\n+    sidebarView = `sites|${JSON.stringify(viewLoadParam)}`\n+  }\n+\n+  adminBtn.onclick = () => list.ctx.showSidebar({\n+    view: sidebarView as any\n+  })\n+\n+  return errEl\n+}"
    },
    {
      "sha": "aba0ebf87c58bc3649eff3e72c9bd7b737f4bff4",
      "filename": "ui/packages/artalk/src/plugins/list-goto.ts",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-goto.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-goto.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-goto.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,65 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+import * as Ui from '@/lib/ui'\n+import Comment from '@/comment/comment'\n+\n+export const ListGoto: ArtalkPlugin = (ctx) => {\n+  const check = (delayGoto = true) => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    const commentID = extractCommentID()\n+    if (!commentID) return\n+\n+    // 自动翻页\n+    const comment = ctx.findComment(commentID)\n+    if (!comment) { // 若找不到评论\n+      // TODO 自动范围改为直接跳转到计算后的页面\n+      list.pgHolder?.next()\n+      return\n+    }\n+\n+    // trigger event\n+    ctx.trigger('list-goto', commentID)\n+\n+    // goto comment\n+    gotoComment(comment, delayGoto)\n+  }\n+\n+  // bind events\n+  ctx.on('list-loaded', () => { check() })\n+  window.addEventListener('hashchange', () => { check(false) })\n+}\n+\n+function extractCommentID(): number|null {\n+  // try get from query\n+  let commentId = Number(Utils.getQueryParam('atk_comment')) // same as backend GetReplyLink()\n+\n+  // fail over to get from hash\n+  if (!commentId) {\n+    const match = window.location.hash.match(/#atk-comment-([0-9]+)/)\n+    if (!match || !match[1] || Number.isNaN(Number(match[1]))) return null\n+    commentId = Number(match[1])\n+  }\n+\n+  return commentId || null\n+}\n+\n+function gotoComment(comment: Comment, delayGoto: boolean = true) {\n+  // 若父评论存在 “子评论部分” 限高，取消限高\n+  comment.getParents().forEach((p) => {\n+    p.getRender().heightLimitRemoveForChildren()\n+  })\n+\n+  const goTo = () => {\n+    Ui.scrollIntoView(comment.getEl(), false)\n+\n+    comment.getEl().classList.remove('atk-flash-once')\n+    window.setTimeout(() => {\n+      comment.getEl().classList.add('atk-flash-once')\n+    }, 150)\n+  }\n+\n+  if (!delayGoto) goTo()\n+  else window.setTimeout(() => goTo(), 350)\n+}"
    },
    {
      "sha": "59bddb369f91a35fe1acbb6434cc7c5a9e47f8eb",
      "filename": "ui/packages/artalk/src/plugins/list-no-comment.ts",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-no-comment.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-no-comment.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-no-comment.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,24 @@\n+import type ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+\n+export const ListNoComment: ArtalkPlugin = (ctx) => {\n+  ctx.on('list-loaded', () => {\n+    const list = ctx.get('list')!\n+\n+    // 无评论\n+    const isNoComment = list.ctx.getCommentList().length <= 0\n+    let $noComment = list.getCommentsWrapEl().querySelector<HTMLElement>('.atk-list-no-comment')\n+\n+    if (isNoComment) {\n+      if (!$noComment) {\n+        $noComment = Utils.createElement('<div class=\"atk-list-no-comment\"></div>')\n+\n+        // TODO POTENTIAL SECURITY RISK: prefer use insane to filter html tags before set innerHTML\n+        $noComment.innerHTML = list.getOptions().noCommentText || list.ctx.conf.noComment || list.ctx.$t('noComment')\n+        list.getCommentsWrapEl().appendChild($noComment)\n+      }\n+    } else {\n+      $noComment?.remove()\n+    }\n+  })\n+}"
    },
    {
      "sha": "8b2b6502c858eb629a7186e7da711a21c332afbf",
      "filename": "ui/packages/artalk/src/plugins/list-sidebar-btn.ts",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-sidebar-btn.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-sidebar-btn.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-sidebar-btn.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,34 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import $t from '@/i18n'\n+\n+export const ListSidebarBtn: ArtalkPlugin = (ctx) => {\n+  let $openSidebarBtn: HTMLElement|null = null\n+\n+  ctx.on('conf-loaded', () => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    $openSidebarBtn = list.$el.querySelector<HTMLElement>('[data-action=\"open-sidebar\"]')\n+    if (!$openSidebarBtn) return\n+\n+    $openSidebarBtn.onclick = () => { // use onclick rather than addEventListener to prevent duplicate event\n+      ctx.showSidebar()\n+    }\n+  })\n+\n+  ctx.on('user-changed', (user) => {\n+    if ($openSidebarBtn) {\n+\n+      // 已输入个人信息\n+      if (!!user.nick && !!user.email) {\n+        $openSidebarBtn.classList.remove('atk-hide')\n+\n+        // update button text (normal user or admin)\n+        const $btnText = $openSidebarBtn.querySelector<HTMLElement>('.atk-text')\n+        if ($btnText) $btnText.innerText = (!user.isAdmin) ? $t('msgCenter') : $t('ctrlCenter')\n+      } else {\n+        $openSidebarBtn.classList.add('atk-hide')\n+      }\n+    }\n+  })\n+}"
    },
    {
      "sha": "3a62f1cc368d2e9b343440b539f4918465563010",
      "filename": "ui/packages/artalk/src/plugins/list-time-ticking.ts",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-time-ticking.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-time-ticking.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-time-ticking.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,23 @@\n+import type ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+\n+/** 评论时间自动更新 */\n+export const ListTimeTicking: ArtalkPlugin = (ctx) => {\n+  let timer: number|null = null\n+\n+  ctx.on('inited', () => {\n+    timer = window.setInterval(() => {\n+      const list = ctx.get('list')\n+      if (!list) return\n+\n+      list.$el.querySelectorAll<HTMLElement>('[data-atk-comment-date]').forEach(el => {\n+        const date = el.getAttribute('data-atk-comment-date')\n+        el.innerText = Utils.timeAgo(new Date(Number(date)), ctx)\n+      })\n+    }, 30 * 1000) // 30s 更新一次\n+  })\n+\n+  ctx.on('destroy', () => {\n+    timer && window.clearInterval(timer)\n+  })\n+}"
    },
    {
      "sha": "f29f873e1628b4d09a3e07b398ea3173fd930dc8",
      "filename": "ui/packages/artalk/src/plugins/list-unread-badge.ts",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-unread-badge.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-unread-badge.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Flist-unread-badge.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,27 @@\n+import ArtalkPlugin from '~/types/plugin'\n+\n+export const ListUnreadBadge: ArtalkPlugin = (ctx) => {\n+  let $unreadBadge: HTMLElement|null = null\n+\n+  const showUnreadBadge = (count: number) => {\n+    if (!$unreadBadge) return\n+\n+    if (count > 0) {\n+      $unreadBadge.innerText = `${Number(count || 0)}`\n+      $unreadBadge.style.display = 'block'\n+    } else {\n+      $unreadBadge.style.display = 'none'\n+    }\n+  }\n+\n+  ctx.on('conf-loaded', () => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    $unreadBadge = list.$el.querySelector<HTMLElement>('.atk-unread-badge')\n+  })\n+\n+  ctx.on('unread-updated', (unreadList) => {\n+    showUnreadBadge(unreadList.length || 0)\n+  })\n+}"
    },
    {
      "sha": "6122b4be951c578094a9b4483808ed4f091085e4",
      "filename": "ui/packages/artalk/src/plugins/stat.ts",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fstat.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fstat.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fstat.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,5 +1,5 @@\n import ContextApi from '~/types/context'\n-import ArtalkPlug from '~/types/plug'\n+import ArtalkPlugin from '~/types/plugin'\n \n export interface CountConf {\n   ctx: ContextApi\n@@ -8,7 +8,7 @@ export interface CountConf {\n   pvAdd?: boolean\n }\n \n-export const PvCountWidget: ArtalkPlug = (ctx: ContextApi) => {\n+export const PvCountWidget: ArtalkPlugin = (ctx: ContextApi) => {\n   if (!ctx.conf.useBackendConf) {\n     // 不使用后端配置，在 Artalk 实例被创建后，立刻初始化\n     initCountWidget({ ctx, pvAdd: true })",
      "previous_filename": "ui/packages/artalk/src/lib/stat.ts"
    },
    {
      "sha": "4b6e77ea2a2aa2a305cae17e53fcb10a0a4ff85f",
      "filename": "ui/packages/artalk/src/plugins/unread.ts",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Funread.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Funread.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Funread.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,42 @@\n+import ArtalkPlugin from '~/types/plugin'\n+import * as Utils from '@/lib/utils'\n+\n+export const Unread: ArtalkPlugin = (ctx) => {\n+  ctx.on('unread-updated', (unreadList) => {\n+    const list = ctx.get('list')\n+    if (!list) return\n+\n+    // comment unread highlight\n+    if (list.getOptions().unreadHighlight === true) {\n+      ctx.getCommentList().forEach((comment) => {\n+        const notify = unreadList.find(o => o.comment_id === comment.getID())\n+\n+        if (notify) {\n+          // if comment contains in unread list\n+          comment.getRender().setUnread(true)\n+          comment.getRender().setOpenAction(() => {\n+            window.open(notify.read_link)\n+\n+            // remove notify which has been read\n+            ctx.updateUnreadList(unreadList.filter(o => o.comment_id !== comment.getID()))\n+          })\n+        } else {\n+          // comment not in unread list\n+          comment.getRender().setUnread(false)\n+        }\n+      })\n+    }\n+  })\n+\n+  ctx.on('list-goto', (commentID) => {\n+    const notifyKey = Utils.getQueryParam('atk_notify_key')\n+    if (notifyKey) {\n+      // mark as read\n+      ctx.getApi().user.markRead(commentID, notifyKey)\n+        .then(() => {\n+          // remove from unread list\n+          ctx.updateUnreadList(ctx.getUnreadList().filter(o => o.comment_id !== commentID))\n+        })\n+    }\n+  })\n+}"
    },
    {
      "sha": "67edc5aec46779ace49d143f30281f1f260f9181",
      "filename": "ui/packages/artalk/src/plugins/version-check.ts",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fversion-check.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fversion-check.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fversion-check.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,37 @@\n+import type ArtalkPlugin from '~/types/plugin'\n+import { version as ARTALK_VERSION } from '~/package.json'\n+import type List from '~/src/list/list'\n+import * as Ui from '@/lib/ui'\n+import * as Utils from '@/lib/utils'\n+import $t from '@/i18n'\n+\n+let IgnoreVersionCheck = false\n+\n+export const VersionCheck: ArtalkPlugin = (ctx) => {\n+  ctx.on('conf-loaded', () => {\n+    const list = ctx.get('list')\n+    if (list && ctx.conf.apiVersion && ctx.conf.versionCheck && !IgnoreVersionCheck)\n+      versionCheck(list, ARTALK_VERSION, ctx.conf.apiVersion)\n+  })\n+}\n+\n+function versionCheck(list: List, feVer: string, beVer: string) {\n+  const comp = Utils.versionCompare(feVer, beVer)\n+  const sameVer = (comp === 0)\n+  if (sameVer) return\n+\n+  const errEl = Utils.createElement(\n+    `<div>请更新 Artalk ${comp < 0 ? $t('frontend') : $t('backend')}以获得完整体验 ` +\n+    `(<a href=\"https://artalk.js.org/\" target=\"_blank\">帮助文档</a>)` +\n+    `<br/><br/><span style=\"color: var(--at-color-meta);\">` +\n+    `当前版本：${$t('frontend')} ${feVer} / ${$t('backend')} ${beVer}` +\n+    `</span><br/><br/></div>`)\n+  const ignoreBtn = Utils.createElement('<span style=\"cursor:pointer\">忽略</span>')\n+  ignoreBtn.onclick = () => {\n+    Ui.setError(list.$el.parentElement!, null)\n+    IgnoreVersionCheck = true\n+    list.fetchComments(0)\n+  }\n+  errEl.append(ignoreBtn)\n+  Ui.setError(list.$el.parentElement!, errEl, '<span class=\"atk-warn-title\">Artalk Warn</span>')\n+}"
    },
    {
      "sha": "dd8b0bea8238e8e2b2ee289b91a379f1ad286430",
      "filename": "ui/packages/artalk/src/service.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fservice.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Fsrc%2Fservice.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fservice.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -2,14 +2,14 @@ import Context from '~/types/context'\n import CheckerLauncher from './lib/checker'\n import Api from './api'\n import Editor from './editor/editor'\n-import List from './list'\n import Layer from './layer'\n import SidebarLayer from './layer/sidebar-layer'\n import { initMarked } from './lib/marked'\n import User from './lib/user'\n-import ListLite from './list/list-lite'\n+import List from './list/list'\n import * as DarkMode from './lib/dark-mode'\n import * as I18n from './i18n'\n+import { PlugManager } from './plugins/editor-kit'\n \n /**\n  * Services\n@@ -59,7 +59,7 @@ const services = {\n   },\n \n   // 评论列表\n-  list(ctx: Context): ListLite|undefined {\n+  list(ctx: Context): List|undefined {\n     // 评论列表\n     const list = new List(ctx)\n     ctx.$root.appendChild(list.$el)\n@@ -85,15 +85,9 @@ const services = {\n \n   // 默认事件绑定\n   eventsDefault(ctx: Context) {\n-    // 锚点快速跳转评论\n-    window.addEventListener('hashchange', () => {\n-      ctx.listHashGotoCheck()\n-    })\n-\n     // 本地用户数据变更\n     ctx.on('user-changed', () => {\n       ctx.checkAdminShowEl()\n-      ctx.listRefreshUI()\n     })\n   },\n \n@@ -104,6 +98,16 @@ const services = {\n     ctx.on('conf-loaded', () => {\n       DarkMode.syncDarkModeConf(ctx)\n     })\n+  },\n+\n+  // Extra Service\n+  // -----------------------------------------\n+  // Only for type check\n+  // Not inject to ctx immediately,\n+  // but can be injected by other occasions\n+\n+  editorPlugs(): PlugManager|undefined {\n+    return undefined\n   }\n }\n "
    },
    {
      "sha": "6971ec3d233d7f2cf1e26f88801f4fd6bfa23ada",
      "filename": "ui/packages/artalk/types/artalk-config.d.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fartalk-config.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fartalk-config.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fartalk-config.d.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -115,6 +115,9 @@ export default interface ArtalkConfig {\n \n   /** 语言本地化 */\n   locale: I18n|string\n+\n+  /** 后端版本 (系统数据，用户不允许更改) */\n+  apiVersion?: string\n }\n \n /**"
    },
    {
      "sha": "1c05c218ecbab1933fdf16b789affd58445ef982",
      "filename": "ui/packages/artalk/types/context.d.ts",
      "status": "modified",
      "additions": 18,
      "deletions": 24,
      "changes": 42,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,5 +1,5 @@\n import ArtalkConfig from './artalk-config'\n-import { CommentData, NotifyData } from './artalk-data'\n+import { CommentData, NotifyData, PageData } from './artalk-data'\n import type { EventPayloadMap } from './event'\n import type { EventManagerFuncs } from '../src/lib/event-manager'\n import { internal as internalLocales, I18n } from '../src/i18n'\n@@ -42,14 +42,17 @@ export default interface ContextApi extends EventManagerFuncs<EventPayloadMap> {\n   /** 获取评论实例对象列表 */\n   getCommentList(): Comment[]\n \n+  /** 清空评论数据列表 */\n+  clearCommentList(): void\n+\n   /** 获取评论数据列表 */\n   getCommentDataList(): CommentData[]\n \n   /** 查找评论 */\n   findComment(id: number): Comment|undefined\n \n   /** 删除评论 */\n-  deleteComment(comment: number|Comment): void\n+  deleteComment(id: number): void\n \n   /** 清空评论 */\n   clearAllComments(): void\n@@ -61,44 +64,35 @@ export default interface ContextApi extends EventManagerFuncs<EventPayloadMap> {\n   updateComment(commentData: CommentData): void\n \n   /** 评论回复 */\n-  replyComment(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void\n-\n-  /** 取消回复评论 */\n-  cancelReplyComment(): void\n+  replyComment(commentData: CommentData, $comment: HTMLElement): void\n \n   /** 编辑评论 */\n   editComment(commentData: CommentData, $comment: HTMLElement): void\n \n-  /** 取消编辑评论 */\n-  cancelEditComment(): void\n+  /** 获取页面数据 */\n+  getPage(): PageData|undefined\n+\n+  /** 更新页面数据 */\n+  updatePage(pageData: PageData): void\n+\n+  /** 获取未读列表 */\n+  getUnreadList(): NotifyData[]\n \n-  /** 更新通知数据 */\n-  updateNotifies(notifies: NotifyData[]): void\n+  /** 更新未读通知数据 */\n+  updateUnreadList(unreadList: NotifyData[]): void\n \n   /** 列表 - 重新加载数据 */\n   listReload(): void\n \n   /** 列表 - 重新加载数据 (别名) */\n   reload(): void\n \n-  /** 列表 - UI 更新 */\n-  listRefreshUI(): void\n-\n-  /** 列表 - HashGoto 功能检测 */\n-  listHashGotoCheck(): void\n-\n   /** 显示侧边栏 */\n   showSidebar(payload?: SidebarShowPayload): void\n \n   /** 隐藏侧边栏 */\n   hideSidebar(): void\n \n-  /** 编辑器 - 关闭评论 */\n-  editorClose(): void\n-\n-  /** 编辑器 - 打开评论 */\n-  editorOpen(): void\n-\n   /** 编辑器 - 显示加载 */\n   editorShowLoading(): void\n \n@@ -108,8 +102,8 @@ export default interface ContextApi extends EventManagerFuncs<EventPayloadMap> {\n   /** 编辑器 - 显示提示消息 */\n   editorShowNotify(msg: string, type: \"i\" | \"s\" | \"w\" | \"e\"): void\n \n-  /** 评论框 - 复原 UI */\n-  editorResetUI(): void\n+  /** 评论框 - 复原状态 */\n+  editorResetState(): void\n \n   /** 验证码检测 */\n   checkCaptcha(payload: CheckerCaptchaPayload): void"
    },
    {
      "sha": "2f4387542625f3a56beb6824f2de674c933ced84",
      "filename": "ui/packages/artalk/types/editor.d.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 24,
      "changes": 35,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,11 +1,11 @@\n import type { CommentData } from './artalk-data'\n import Component from '../src/lib/component'\n import { EditorUI } from '../src/editor/ui'\n-import PlugManager from '../src/editor/plug-manager'\n \n-export default interface Editor extends Component {\n+export type EditorState = 'reply' | 'edit' | 'normal'\n+\n+export interface EditorApi extends Component {\n   getUI(): EditorUI\n-  getPlugs(): PlugManager | undefined\n \n   /**\n    * Get the header input elements\n@@ -39,6 +39,11 @@ export default interface Editor extends Component {\n    */\n   getContentMarked(): string\n \n+  /**\n+   * Get editor current state\n+   */\n+  getState(): EditorState\n+\n   /**\n    * Focus editor\n    */\n@@ -54,23 +59,13 @@ export default interface Editor extends Component {\n    *\n    * call it will move editor to the initial position\n    */\n-  resetUI(): void\n+  resetState(): void\n \n   /**\n    * Submit comment\n    */\n   submit(): void\n \n-  /**\n-   * Close comment editor which prevent user from submitting (but admin excluded)\n-   */\n-  close(): void\n-\n-  /**\n-   * Open comment editor which allow user to submit (only be called while editor is closed)\n-   */\n-  open(): void\n-\n   /**\n    * Show notification message\n    */\n@@ -91,18 +86,10 @@ export default interface Editor extends Component {\n    */\n   setReply(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void\n \n-  /**\n-   * Cancel replaying the comment\n-   */\n-  cancelReply(): void\n-\n   /**\n    * Start editing a comment\n    */\n   setEditComment(commentData: CommentData, $comment: HTMLElement): void\n-\n-  /**\n-   * Cancel editing the comment\n-   */\n-  cancelEditComment(): void\n }\n+\n+export default EditorApi"
    },
    {
      "sha": "ac4c305495a23b27312372e399930d32c84f4dfe",
      "filename": "ui/packages/artalk/types/event.d.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -1,15 +1,22 @@\n-import { CommentData } from './artalk-data'\n+import { CommentData, NotifyData, PageData } from './artalk-data'\n import { LocalUser } from './artalk-config'\n \n /** EventName to EventPayload Type */\n export interface EventPayloadMap {\n+  'inited': undefined              // Artalk 初始化后\n+  'destroy': undefined             // Artalk 销毁时\n   'list-load': undefined           // 评论加载时\n   'list-loaded': undefined         // 评论装载后\n   'list-inserted': CommentData     // 评论插入后\n+  'list-deleted': CommentData      // 评论删除后\n+  'list-error': { msg: string, data?: any } // 评论加载错误时\n+  'list-goto': number              // 评论跳转时\n+  'page-loaded': PageData          // 页面数据更新后\n   'editor-submit': undefined       // 编辑器提交时\n   'editor-submitted': undefined    // 编辑器提交后\n   'user-changed': LocalUser        // 本地用户数据变更时\n   'conf-loaded': undefined         // Artalk 配置变更时\n+  'unread-updated': NotifyData[]   // 未读消息变更时\n   'sidebar-show': undefined        // 侧边栏显示\n   'sidebar-hide': undefined        // 侧边栏隐藏\n }"
    },
    {
      "sha": "b2940b8ff39bf143f483b26d92a01a6b8cbd2a41",
      "filename": "ui/packages/artalk/types/plug.d.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Ftypes%2Fplug.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Ftypes%2Fplug.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fplug.d.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,4 +0,0 @@\n-import ContextApi from './context'\n-\n-type ArtalkPlug = (ctx: ContextApi) => void\n-export default ArtalkPlug"
    },
    {
      "sha": "4a97c8d0fe0b3185647a80b07672a5cf6df4b3d1",
      "filename": "ui/packages/artalk/types/plugin.d.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fplugin.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/e6a9748e70a1aec45b98af39982919b5649d447e/ui%2Fpackages%2Fartalk%2Ftypes%2Fplugin.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fplugin.d.ts?ref=e6a9748e70a1aec45b98af39982919b5649d447e",
      "patch": "@@ -0,0 +1,4 @@\n+import ContextApi from './context'\n+\n+type ArtalkPlugin = (ctx: ContextApi) => void\n+export default ArtalkPlugin"
    }
  ]
}
