{
  "sha": "9dacd0954d23597fb257f794571db3e5e5025ec8",
  "node_id": "C_kwDOCQOkhNoAKDlkYWNkMDk1NGQyMzU5N2ZiMjU3Zjc5NDU3MWRiM2U1ZTUwMjVlYzg",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2024-01-26T14:27:10Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2024-01-26T14:27:10Z"
    },
    "message": "fix(cache): unable to change admin list after caching (#748) (#750)",
    "tree": {
      "sha": "ce0a9c0739c9cb7ba61a7175366d3622b3d37048",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/ce0a9c0739c9cb7ba61a7175366d3622b3d37048"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/9dacd0954d23597fb257f794571db3e5e5025ec8",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJls8E+CRC1aQ7uu5UhlAAArHAQAC6lj/74CiL1I7zAmqljhhK7\nz7OAnzQZWyXvd+3iV+cP8h+PpiQV1LNqvOq6NCrWni9BC8v6A2knh5X89zg636Sj\nhUUld0Tr4bf55phfTgcPKQgNJxZE0QLfIQWh644cm15HtFdESH/1M/zBS3hwv6T6\nFsBP0grphsO4ZgGf1yAaN23akp0cvcgOcaynktSOGoOl8IGQ13AogNbhf+IXlsVk\nZ0ak64SfE0c9B+G1iPAVBDFtE3pyEwaRwtHi1R+fdaYZalUTaHv0ebmLYA0sc6dy\nrkU5i/HRY14GNg3FwKsvtFCFb8f/Oa5HcRJEvukls0Qr8+bOJw6kLVGPdVDdW/7O\nwd8xPsY1KMHdkFIqugR+B4MzwapHrJzPRWJnvfet1d8WjU4Ef4HVYSQDi0C2GXCo\nKCV8yWGmQvpaVO2Oy7asxqx817QFS28kXK2NSwFTPwbK+uy2nrlJJTtbECWgXnSf\nWxR8+oC6Uz6tIRSbg3erzWXJCe7OIq2XveFkF+AOsvS0CcytCz2lFEPcvDbwf0FC\nYmuVubT/hXx/T0k1oKiyuw2qCYd8FoIlSRumOjYY3G8J0QQ3ogOSOJ+013VGbOlz\n2R3NALzXHLowLDVmE9320LgUekLwmB3ATDxyGv8ul2GwHgCSH0Y1qcFIbkBCzfSF\nOJk3XU3he94Ki8XPzaWY\n=wvZm\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ce0a9c0739c9cb7ba61a7175366d3622b3d37048\nparent 50b0a6068c44ddc874ea19bec55e2ed3ef855993\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1706279230 +0800\ncommitter GitHub <noreply@github.com> 1706279230 +0800\n\nfix(cache): unable to change admin list after caching (#748) (#750)\n\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/9dacd0954d23597fb257f794571db3e5e5025ec8",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/9dacd0954d23597fb257f794571db3e5e5025ec8",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/9dacd0954d23597fb257f794571db3e5e5025ec8/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "50b0a6068c44ddc874ea19bec55e2ed3ef855993",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/50b0a6068c44ddc874ea19bec55e2ed3ef855993",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/50b0a6068c44ddc874ea19bec55e2ed3ef855993"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 46,
    "deletions": 10
  },
  "files": [
    {
      "sha": "c6a726763de4351ff6002872bc7886a18f9317c0",
      "filename": "internal/dao/query_find.go",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/9dacd0954d23597fb257f794571db3e5e5025ec8/internal%2Fdao%2Fquery_find.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/9dacd0954d23597fb257f794571db3e5e5025ec8/internal%2Fdao%2Fquery_find.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find.go?ref=9dacd0954d23597fb257f794571db3e5e5025ec8",
      "patch": "@@ -219,16 +219,11 @@ func (dao *Dao) GetVoteNumUpDown(targetID uint, voteTo string) (int, int) {\n //#endregion\n \n // #region 管理员账号检测\n-var allAdmins *[]entity.User = nil\n-\n func (dao *Dao) GetAllAdmins() []entity.User {\n-\tif allAdmins == nil {\n-\t\tvar admins []entity.User\n-\t\tdao.DB().Where(&entity.User{IsAdmin: true}).Find(&admins)\n-\t\tallAdmins = &admins\n-\t}\n-\n-\treturn *allAdmins\n+\t// TODO add cache and flush cache when admin changed\n+\tvar admins []entity.User\n+\tdao.DB().Where(&entity.User{IsAdmin: true}).Find(&admins)\n+\treturn admins\n }\n \n func (dao *Dao) GetAllAdminIDs() []uint {"
    },
    {
      "sha": "96181656896990e535780300694d1e284ba61718",
      "filename": "internal/dao/query_find_test.go",
      "status": "modified",
      "additions": 42,
      "deletions": 1,
      "changes": 43,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/9dacd0954d23597fb257f794571db3e5e5025ec8/internal%2Fdao%2Fquery_find_test.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/9dacd0954d23597fb257f794571db3e5e5025ec8/internal%2Fdao%2Fquery_find_test.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find_test.go?ref=9dacd0954d23597fb257f794571db3e5e5025ec8",
      "patch": "@@ -3,6 +3,7 @@ package dao_test\n import (\n \t\"testing\"\n \n+\t\"github.com/ArtalkJS/Artalk/internal/entity\"\n \t\"github.com/ArtalkJS/Artalk/test\"\n \t\"github.com/stretchr/testify/assert\"\n )\n@@ -203,7 +204,47 @@ func TestGetAllAdmins(t *testing.T) {\n \tdefer app.Cleanup()\n \n \tallAdmins := app.Dao().GetAllAdmins()\n-\tassert.GreaterOrEqual(t, len(allAdmins), 1)\n+\tassert.GreaterOrEqual(t, len(allAdmins), 1, \"GetAllAdmins() not works\")\n+\n+\tt.Run(\"Test modify and get admins\", func(t *testing.T) {\n+\t\tgetContainsUser := func(userID uint) bool {\n+\t\t\tfor _, a := range app.Dao().GetAllAdmins() {\n+\t\t\t\tif a.ID == userID {\n+\t\t\t\t\treturn true\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn false\n+\t\t}\n+\n+\t\t// create\n+\t\tvar adminID uint = 0\n+\t\tadmin := entity.User{\n+\t\t\tName:    \"TestAdmin\",\n+\t\t\tEmail:   \"admin@test.com\",\n+\t\t\tIsAdmin: true,\n+\t\t}\n+\t\tapp.Dao().CreateUser(&admin)\n+\t\tadminID = admin.ID\n+\t\tassert.NotZero(t, adminID, \"user create failed\")\n+\n+\t\tassert.Equal(t, true, getContainsUser(adminID), \"admin not found after create\")\n+\n+\t\t// update\n+\t\tadmin.IsAdmin = false\n+\t\tapp.Dao().UpdateUser(&admin)\n+\t\tassert.Equal(t, false, getContainsUser(adminID), \"admin still exists after update\")\n+\n+\t\t// re-update\n+\t\tadmin.IsAdmin = true\n+\t\tapp.Dao().UpdateUser(&admin)\n+\t\tassert.Equal(t, true, getContainsUser(adminID), \"admin not found after re-update to admin\")\n+\n+\t\t// delete\n+\t\tapp.Dao().DelUser(&admin)\n+\n+\t\t// not contains admin\n+\t\tassert.Equal(t, false, getContainsUser(adminID), \"admin still exists after delete\")\n+\t})\n }\n \n func TestIsAdminUser(t *testing.T) {"
    }
  ]
}
