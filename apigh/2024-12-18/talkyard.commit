{
  "sha": "8340b328b79f222bcd2c7703323b239af2765d43",
  "node_id": "C_kwDOAKEu-toAKDgzNDBiMzI4Yjc5ZjIyMmJjZDJjNzcwMzMyM2IyMzlhZjI3NjVkNDM",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2024-09-23T03:36:11Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2024-09-23T03:36:11Z"
    },
    "message": "Merge v0.2024.007 into 'release'.",
    "tree": {
      "sha": "809ace168458bb7a05c0a6d2f615f9a1929d2f37",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/809ace168458bb7a05c0a6d2f615f9a1929d2f37"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/8340b328b79f222bcd2c7703323b239af2765d43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null,
      "verified_at": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/8340b328b79f222bcd2c7703323b239af2765d43",
  "html_url": "https://github.com/debiki/talkyard/commit/8340b328b79f222bcd2c7703323b239af2765d43",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/8340b328b79f222bcd2c7703323b239af2765d43/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07ac81a0578bbf15d0c4b95e7d464eec7be311fd",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/07ac81a0578bbf15d0c4b95e7d464eec7be311fd",
      "html_url": "https://github.com/debiki/talkyard/commit/07ac81a0578bbf15d0c4b95e7d464eec7be311fd"
    },
    {
      "sha": "71487682225edcb8e381c2a51ba75ba555fc7f9a",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/71487682225edcb8e381c2a51ba75ba555fc7f9a",
      "html_url": "https://github.com/debiki/talkyard/commit/71487682225edcb8e381c2a51ba75ba555fc7f9a"
    }
  ],
  "stats": {
    "total": 2631,
    "additions": 2347,
    "deletions": 284
  },
  "files": [
    {
      "sha": "1d8fb878dd466544bbb89ad6b5c15446f73bbb11",
      "filename": "appsv/model/build.sbt",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fbuild.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fbuild.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fbuild.sbt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -21,6 +21,4 @@ libraryDependencies ++= Seq(\n   Dependencies.Libs.scalaTest,\n )\n \n-scalacOptions += \"-deprecation\"\n-\n compileOrder := CompileOrder.JavaThenScala"
    },
    {
      "sha": "6d670b460e82f7cfa738ccb7cdbb4cde785e22a8",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PagePath.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePath.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePath.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePath.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -329,7 +329,7 @@ object PagePath {\n   }\n \n \n-  /** Parses the path part of a URL into a PagePath.\n+  /** Parses the path part of a URL into a PagePath. [ty_url_fmt]\n     *\n     * URL path examples:\n     * - (server)/fold/ers/-pageId [2WBG49]"
    },
    {
      "sha": "d2e412c24e65b5a3aa528c43c64ea6a788ebb3d3",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Site.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -138,7 +138,7 @@ sealed abstract class SiteStatus(val IntValue: i32) {\n }\n \n \n-case class SuperAdminSitePatch(\n+case class SuperAdminSitePatch(  // ts: interface SASitePatch\n   siteId: SiteId,\n   newStatus: SiteStatus,\n   newNotes: Opt[St],"
    },
    {
      "sha": "f5cb16822f04db40b845c86fe48957f671bbddd6",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1209,6 +1209,9 @@ sealed trait MemberInclDetails extends ParticipantInclDetails {  RENAME // to Me\n     */\n   def uiPrefs: Option[JsObject]\n \n+  // Later:\n+  //def modConf: Opt[JsObject]  // the  pats_t/users3.mod_conf_c  column\n+\n   def copyPrefs(uiPrefs: Opt[JsObject] = null, privPrefs: MemberPrivacyPrefs = null): MemberVb = {\n     this match {\n       case thiz: GroupVb =>"
    },
    {
      "sha": "3b0b82ead9a04dfbecaf16e48673d5b1b5c4205e",
      "filename": "appsv/server/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -113,9 +113,13 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n       if (draft.isReply) {\n         val postType = draft.postType getOrDie \"TyER35SKS02GU\"\n+        val pageAuthor =\n+              if (pageMeta.authorId == requester.id) requester\n+              else dao.getTheParticipant(pageMeta.authorId)\n         throwNoUnless(Authz.mayPostReply(\n               request.theUserAndLevels, asAlias = None, dao.getOnesGroupIds(requester),\n-              postType, pageMeta, Vector(post), dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+              postType, pageMeta, pageAuthor = pageAuthor,\n+              Vector(post), dao.getAnyPrivateGroupTalkMembers(pageMeta),\n               inCategoriesRootLast = categoriesRootLast,\n               tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n       }"
    },
    {
      "sha": "ef38b2c7fae67a2ba8b192edcc0c57b39e88067c",
      "filename": "appsv/server/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FReplyController.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -76,6 +76,9 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     REMOVE // these 3 vals, once we're using dao.insertReplyIfAuZ() instead of\n     // doing authz here in this fn.\n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE5FKW20\")\n+    val pageAuthor =\n+          if (pageMeta.authorId == requester.id) requester\n+          else dao.getTheParticipant(pageMeta.authorId)\n     val replyToPosts = dao.loadPostsAllOrError(pageId, replyToPostNrs) getOrIfBad { missingPostNr =>\n       throwNotFound(s\"Post nr $missingPostNr not found\", \"EdEW3HPY08\")\n     }\n@@ -85,8 +88,9 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     CLEAN_UP // [dupl_re_authz_chk]  and see the REM OVE just above too, and COU LD below.\n     throwNoUnless(Authz.mayPostReply(\n-      request.theUserAndLevels, asAlias, dao.getOnesGroupIds(request.theUser),\n-      postType, pageMeta, replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+      request.theUserAndLevels, asAlias, dao.getOnesGroupIds(requester),\n+      postType, pageMeta, pageAuthor = pageAuthor,\n+      replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n       tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)),\n       \"TyEM0REPLY_\")\n@@ -119,7 +123,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n   def handleChatMessage: Action[JsValue] = PostJsonAction(RateLimits.PostReply,\n         maxBytes = MaxPostSize) { request =>\n-    import request.{body, dao}\n+    import request.{body, dao, reqr}\n     val pageId = (body \\ \"pageId\").as[PageId]\n     val text = (body \\ \"text\").as[String].trim\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n@@ -132,12 +136,16 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val pageMeta = dao.getPageMeta(pageId) getOrElse {\n       throwIndistinguishableNotFound(\"EdE7JS2\")\n     }\n+    val pageAuthor =\n+          if (pageMeta.authorId == reqr.id) reqr\n+          else dao.getTheParticipant(pageMeta.authorId)\n     val replyToPosts = Nil  // currently cannot reply to specific posts, in the chat [7YKDW3]\n     val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayPostReply(\n       request.theUserAndLevels, asAlias = None, dao.getOnesGroupIds(request.theMember),\n-      PostType.ChatMessage, pageMeta, replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+      PostType.ChatMessage, pageMeta, pageAuthor = pageAuthor,\n+      replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n       tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)),\n       \"EdEHDETG4K5\")"
    },
    {
      "sha": "ac4bb402fbfa6607bb63a5545602487caeecd4a0",
      "filename": "appsv/server/controllers/UploadsController.scala",
      "status": "modified",
      "additions": 29,
      "deletions": 20,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -30,7 +30,7 @@ import play.api._\n import play.api.libs.Files\n import play.api.libs.json.{JsString, JsValue, Json}\n import play.api.mvc._\n-\n+import play.api.mvc.MultipartFormData.FilePart\n \n /** Uploads files and serves uploaded files.\n   */\n@@ -137,22 +137,24 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n     if (files.length != 1)\n       throwBadRequest(\"EdE7UYMF3\", s\"Use the multipart form data key name 'file' please\")\n \n-    val file = files.head\n+    val filePart: FilePart[Files.TemporaryFile] = files.head\n \n     // This far, in this endpoint, we've verified only that size <= maxBytesLargeFile.\n     // However, the upload limit might be lower, for this user or this site.\n     // We've checked this already [upl_sz_ck] — let's double check, and this\n     // time, there're no form-data boundaries.\n \n-    _throwForbiddenMaybe(Some(file.filename), sizeBytes = file.fileSize, request)\n+    _throwForbiddenMaybe(Some(filePart.filename), sizeBytes = filePart.fileSize, request)\n+\n+    val file: jio.File = filePart.ref.path.toFile\n \n     val uploadRef = dao.addUploadedFile(\n-      file.filename, file.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n+          filePart.filename, file, request.theReqerTrueId, request.theBrowserIdData)\n \n     // Delete the temporary file. (It will be gone already, if we couldn't optimize it,\n     // i.e. make it smaller, because then we've moved it to the uploads dir (rather than\n     // a smaller compressed copy). Deleting file ref although gone already, doesn't do anything.)\n-    file.ref.delete()\n+    filePart.ref.delete()\n \n     // Don't use OkSafeJson here because Dropzone doesn't understand the safe-JSON prefix.\n     Ok(JsString(uploadRef.url)) as JSON\n@@ -193,31 +195,38 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n       throwBadRequest(\"EdE35UY0\", o\"\"\"Upload three images please: a tiny, a small and a medium\n         sized avatar image — instead I got $numFilesUploaded files\"\"\")\n \n-    val tinyFile = multipartFormData.files.find(_.key == \"images[tiny]\") getOrElse {\n+    val fileParts: Seq[FilePart[Files.TemporaryFile]] =\n+          multipartFormData.files\n+\n+    val tinyFilePart = fileParts.find(_.key == \"images[tiny]\") getOrElse {\n       throwBadRequest(\"EdE8GYF2\", o\"\"\"Upload a tiny size avatar image please\"\"\")\n     }\n \n-    val smallFile = multipartFormData.files.find(_.key == \"images[small]\") getOrElse {\n+    val smallFilePart = fileParts.find(_.key == \"images[small]\") getOrElse {\n       throwBadRequest(\"EdE4YF21\", o\"\"\"Upload a small size avatar image please\"\"\")\n     }\n \n-    val mediumFile = multipartFormData.files.find(_.key == \"images[medium]\") getOrElse {\n+    val mediumFilePart = fileParts.find(_.key == \"images[medium]\") getOrElse {\n       throwBadRequest(\"EdE8YUF2\", o\"\"\"Upload a medium size avatar image please\"\"\")\n     }\n \n+    val tinyFile = tinyFilePart.ref.path.toFile\n+    val smallFile = smallFilePart.ref.path.toFile\n+    val mediumFile = mediumFilePart.ref.path.toFile\n+\n     def throwIfTooLarge(whichFile: String, file: jio.File, maxBytes: Int): Unit = {\n       val length = file.length\n       if (length > maxBytes)\n         throwForbidden(\"DwE7YMF2\", s\"The $whichFile is too large: $length bytes, max is: $maxBytes\")\n     }\n \n-    throwIfTooLarge(\"tiny avatar image\", tinyFile.ref.file, MaxAvatarTinySizeBytes)\n-    throwIfTooLarge(\"small avatar image\", smallFile.ref.file, MaxAvatarSmallSizeBytes)\n-    throwIfTooLarge(\"medium avatar image\", mediumFile.ref.file, MaxAvatarMediumSizeBytes)\n+    throwIfTooLarge(\"tiny avatar image\", tinyFile, MaxAvatarTinySizeBytes)\n+    throwIfTooLarge(\"small avatar image\", smallFile, MaxAvatarSmallSizeBytes)\n+    throwIfTooLarge(\"medium avatar image\", mediumFile, MaxAvatarMediumSizeBytes)\n \n-    ImageUtils.throwUnlessJpegWithSideBetween(tinyFile.ref.file, \"Tiny\", 20, 35)\n-    ImageUtils.throwUnlessJpegWithSideBetween(smallFile.ref.file, \"Small\", 40, 60)\n-    ImageUtils.throwUnlessJpegWithSideBetween(mediumFile.ref.file, \"Medium\", 150, 800)\n+    ImageUtils.throwUnlessJpegWithSideBetween(tinyFile, \"Tiny\", 20, 35)\n+    ImageUtils.throwUnlessJpegWithSideBetween(smallFile, \"Small\", 40, 60)\n+    ImageUtils.throwUnlessJpegWithSideBetween(mediumFile, \"Medium\", 150, 800)\n \n     // First add metadata entries for the files and move them in place.\n     // Then, if there were no errors, update the user so that it starts using the new\n@@ -226,18 +235,18 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n     // (since they're unused) — deleting them is not yet implemented though [9YMU2Y].\n \n     val tinyAvatarRef = request.dao.addUploadedFile(\n-      tinyFile.filename, tinyFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n+      tinyFilePart.filename, tinyFile, request.theReqerTrueId, request.theBrowserIdData)\n \n     val smallAvatarRef = request.dao.addUploadedFile(\n-      smallFile.filename, smallFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n+      smallFilePart.filename, smallFile, request.theReqerTrueId, request.theBrowserIdData)\n \n     val mediumAvatarRef = request.dao.addUploadedFile(\n-      mediumFile.filename, mediumFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n+      mediumFilePart.filename, mediumFile, request.theReqerTrueId, request.theBrowserIdData)\n \n     // Delete the temporary files.\n-    tinyFile.ref.delete()\n-    smallFile.ref.delete()\n-    mediumFile.ref.delete()\n+    tinyFilePart.ref.delete()\n+    smallFilePart.ref.delete()\n+    mediumFilePart.ref.delete()\n \n     // Now the images are in place in the uploads dir, and we've created metadata entries.\n     // We just need to link the user to the images:"
    },
    {
      "sha": "a608ab1aa8e1a143bc0e9f0ce007aa1e5b1769aa",
      "filename": "appsv/server/debiki/ImageUtils.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2FImageUtils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2FImageUtils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FImageUtils.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -145,7 +145,8 @@ object ImageUtils {\n \n   val MimeTypeJpeg = \"image/jpeg\"\n \n-  def throwUnlessJpegWithSideBetween(file: jio.File, which: String, minSide: Int, maxSide: Int): Unit = {\n+  def throwUnlessJpegWithSideBetween(file: jio.File, which: St,\n+          minSide: i32, maxSide: i32): U = {\n     // java.nio.file.Files.probeContentType doesn't work in Alpine Linux + JRE 8. Instead, use Tika.\n     // (This detects mime type based on actual document content, not just the suffix.) dupl [7YKW23]\n     val tika = new org.apache.tika.Tika()"
    },
    {
      "sha": "3175254d961851142129b2c290f8fa3919dd67c6",
      "filename": "appsv/server/debiki/dao/ForumDao.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -818,10 +818,11 @@ object ForumDao {\n     * (Of course admins can change this, for their own site.)  [DEFMAYEDWIKI]\n     * Sync with dupl code in Typescript. [7KFWY025]\n     */\n-  def makeFullMembersDefaultCategoryPerms(categoryId: CategoryId): PermsOnPages =\n-    makeEveryonesDefaultCategoryPerms(categoryId).copy(\n-          forPeopleId = Group.FullMembersId,\n-          mayEditWiki = Some(true))\n+  def makeFullMembersDefaultCategoryPerms(catId: CatId): PermsOnPages = PermsOnPages(\n+    id = NoPermissionId,\n+    forPeopleId = Group.FullMembersId,\n+    onCategoryId = Some(catId),\n+    mayEditWiki = Some(true))\n \n \n   // Sync with dupl code in Typescript. [7KFWY025]"
    },
    {
      "sha": "7beefb97d40337601172fabedba3b2c5bc0952b4",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -77,6 +77,9 @@ trait PostsDao {\n \n     val pageMeta = this.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\n           \"TyE5FKW20\", showErrCodeAnyway = reqrAndReplyer.reqrIsAdmin)\n+    val pageAuthor =\n+          if (pageMeta.authorId == reqrAndReplyer.reqr.id) reqrAndReplyer.reqr\n+          else this.getTheParticipant(pageMeta.authorId)\n \n     val catsRootLast = this.getAncestorCategoriesSelfFirst(pageMeta.categoryId)\n     val tooManyPermissions = getPermsOnPages(categories = catsRootLast)\n@@ -94,16 +97,16 @@ trait PostsDao {\n           reqrAndLevels,\n           // See [4_doer_not_reqr].\n           asAlias = if (reqrAndReplyer.areNotTheSame) None else asAlias,\n-          this.getOnesGroupIds(reqrAndLevels.user),\n-          postType, pageMeta, replyToPosts, privTalkMembers,\n+          groupIds = this.getOnesGroupIds(reqrAndLevels.user),\n+          postType, pageMeta, pageAuthor = pageAuthor, replyToPosts, privTalkMembers,\n           inCategoriesRootLast = catsRootLast, tooManyPermissions),\n           \"TyEM0REPLY1\")\n \n     if (reqrAndReplyer.areNotTheSame) {\n       val replyerAndLevels = readTx(this.loadUserAndLevels(reqrAndReplyer.targetToWho, _))\n       throwNoUnless(Authz.mayPostReply(\n             replyerAndLevels, asAlias, this.getOnesGroupIds(replyerAndLevels.user),\n-            postType, pageMeta, replyToPosts, privTalkMembers,\n+            postType, pageMeta, pageAuthor = pageAuthor, replyToPosts, privTalkMembers,\n             inCategoriesRootLast = catsRootLast, tooManyPermissions),\n             \"TyEM0REPLY2\")\n     }\n@@ -186,9 +189,12 @@ trait PostsDao {\n     val authorMaybeAnon: Pat = SiteDao.getAliasOrTruePat(\n           truePat = realAuthor, pageId = pageId, asAlias)(tx, IfBadAbortReq)\n \n+    val pageAuthor = tx.loadTheParticipant(page.meta.authorId)\n+\n     dieOrThrowNoUnless(Authz.mayPostReply(\n       realAuthorAndLevels, asAlias /* _not_same_tx, ok */, realAuthorAndGroupIds,\n-      postType, page.meta, replyToPosts, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n+      postType, page.meta, pageAuthor = pageAuthor,\n+      replyToPosts, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n       tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n       tx.loadPermsOnPages()), \"EdEMAY0RE\")\n \n@@ -658,14 +664,16 @@ trait PostsDao {\n \n       SHOULD_OPTIMIZE // don't load all posts [2GKF0S6], because this is a chat, could be too many.\n       val page = newPageDao(pageId, tx)\n+      val pageAuthor = tx.loadTheParticipant(page.meta.authorId)\n       val replyToPosts = Nil // currently cannot reply to specific posts, in the chat. [7YKDW3]\n       val asAlias = None // [anon_chats]\n \n       dieOrThrowNoUnless(Authz.mayPostReply(\n-        authorAndLevels, asAlias = asAlias, tx.loadGroupIdsMemberIdFirst(author),\n-        PostType.ChatMessage, page.meta, Nil, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n-        tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n-        tx.loadPermsOnPages()), \"EdEMAY0CHAT\")\n+          authorAndLevels, asAlias = asAlias, groupIds = tx.loadGroupIdsMemberIdFirst(author),\n+          PostType.ChatMessage, page.meta, pageAuthor = pageAuthor,\n+          replyToPosts = Nil, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n+          tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n+          tx.loadPermsOnPages()), \"EdEMAY0CHAT\")\n \n       val (reviewReasons: Seq[ReviewReason], _) =\n         throwOrFindNewPostReviewReasons(page.meta, authorAndLevels, tx)"
    },
    {
      "sha": "c82dec1913686eb62a59f9646dabd0fdfb1fd236",
      "filename": "appsv/server/debiki/dao/RenderContentService.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -75,7 +75,11 @@ class RenderContentActor(\n     // COULD SECURITY DoS attack: Want to enqueue this case last-in-first-out, per page & params, so won't\n     // rerender the page more than once, even if is in the queue many times (with different hashes).\n     // Can that be done with Akka actors in some simple way?\n-    case (sitePageId: SitePageId, paramsAndHash: Opt[RenderParamsAndFreshHash]) =>\n+    case (sitePageId: SitePageId, paramsAndHash0: Opt[Any]) =>\n+      val paramsAndHash: Opt[RenderParamsAndFreshHash] = paramsAndHash0 flatMap {\n+        case p: RenderParamsAndFreshHash => Some(p)\n+        case x => logger.warn(o\"\"\"Bad type: ${classNameOf(x)} [TyE5FL205F]\"\"\") ; None\n+      }\n       // The page has 1) been modified, or accessed and was out-of-date.  [4KGJW2]\n       // Or 2) edited and uncached, and now it's being rerendered in advance (but\n       // no one asked for it exactly now — paramsAndHash is None).  [7BWTWR2]"
    },
    {
      "sha": "c937732202bb16e671ba794b01d696fc25f97def",
      "filename": "appsv/server/debiki/dao/UploadsDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -49,7 +49,7 @@ trait UploadsDao {\n     * directory, if stored on localhost (some file systems don't want 99999 files in a\n     * single directory).\n     */\n-  def addUploadedFile(uploadedFileName: String, tempFile: jio.File, uploadedById: TrueId,\n+  def addUploadedFile(uploadedFileName: St, tempFile: jio.File, uploadedById: TrueId,\n         browserIdData: BrowserIdData): UploadRef = {\n \n     // Over quota? [fs_quota]\n@@ -363,10 +363,11 @@ object UploadsDao {\n   private val Log4 = math.log(4)\n \n \n-  def makeHashPath(file: jio.File, dotSuffix: String): String = {\n+  def makeHashPath(file: jio.File, dotSuffix: St): St = {\n     // (It's okay to truncate the hash, see e.g.:\n     // http://crypto.stackexchange.com/questions/9435/is-truncating-a-sha512-hash-to-the-first-160-bits-as-secure-as-using-sha1 )\n-    val hashCode = guava.io.Files.hash(file, guava.hash.Hashing.sha256)\n+    val hashCode: guava.hash.HashCode =\n+          guava.io.Files.asByteSource(file).hash(guava.hash.Hashing.sha256)\n     val hashString = base32lowercaseEncoder.encode(hashCode.asBytes) take HashLength\n     makeHashPath(file.length().toInt, hashString, dotSuffix)\n   }"
    },
    {
      "sha": "90c61a42a997f255d34a89eb4cb6992fcada85fa",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1001,8 +1001,8 @@ trait UserDao {\n   }\n \n \n-  def getTheParticipant(userId: UserId): Participant = {\n-    getParticipant(userId).getOrElse(throw UserNotFoundException(userId))\n+  def getTheParticipant(userId: UserId, anyTx: Opt[SiteTx] = None): Participant = {\n+    getParticipant(userId, anyTx).getOrElse(throw UserNotFoundException(userId))\n   }\n \n "
    },
    {
      "sha": "e18d2a0740ef1e8d7de863a749202e952c2ccc25",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -431,6 +431,7 @@ object Authz {\n     groupIds: immutable.Seq[GroupId],\n     postType: PostType,\n     pageMeta: PageMeta,\n+    pageAuthor: Pat,\n     replyToPosts: immutable.Seq[Post],\n     privateGroupTalkMemberIds: Set[UserId],\n     inCategoriesRootLast: immutable.Seq[Category],\n@@ -442,10 +443,7 @@ object Authz {\n     val mayWhat = checkPermsOnPages(\n           Some(user), asAlias = asAlias, groupIds,\n           Some(pageMeta),\n-          // ANON_UNIMPL: Needed, for maySeeOwn [granular_perms], and later, if there'll be\n-          // a mayReplyOnOwn permission?\n-          // But let's wait until true author id is incl in posts3/nodes_t. [posts3_true_id]\n-          pageAuthor = None,\n+          pageAuthor = Some(pageAuthor),\n           pageMembers = Some(privateGroupTalkMemberIds),\n           catsRootLast = inCategoriesRootLast, tooManyPermissions)\n \n@@ -852,8 +850,10 @@ object Authz {\n       // then, pat may not see it, or any sub cat.  [see_sub_cat]\n       if (mayWhatThisCat.maySee isNot true) {\n         // But maySeeOwn=true has precedence over maySee=false.\n-        if (isOwnPage && mayWhatThisCat.maySeeOwn) {\n-          // Fine, continue.\n+        if ((isOwnPage || pageMeta.isEmpty) && mayWhatThisCat.maySeeOwn) {\n+          // Fine: Either it's our own page (which we may see), or no page specified — then\n+          // we may still see the category.\n+          mayWhatThisCat = mayWhatThisCat.copy(maySee = Some(true))\n         }\n         else\n           return mayWhatThisCat\n@@ -1037,6 +1037,8 @@ case class MayWhat(\n   mayCreatePage: Bo = false,\n   mayPostComment: Bo = false,\n   maySee: Opt[Bo] = None,\n+  // Used to derive maySee: if is own page, and maySeeOwn, then, maySee becomest Some(true).\n+  // Is that a bit weird? Works for now.\n   maySeeOwn: Bo = false,\n   // maySeePagesOneIsMembOf: Bo = false\n   // mayListUnlistedCat"
    },
    {
      "sha": "7150329c213bf096e66acae1988eac79ccc94c6e",
      "filename": "build.sbt",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/build.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/build.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/build.sbt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -157,6 +157,16 @@ def mainSettings = List(\n   version := appVersion,\n   libraryDependencies ++= appDependencies,\n \n+  // Silence warnings about Ty's own deprecated stuff, so they won't clutter the\n+  // build output and make any actually important warnings disappear in the noise.\n+  // It's quick to search for \"@deprecated\" in Ty's own source code, if / when needed.\n+  scalacOptions += (\n+      \"\"\"-Wconf:cat=deprecation&origin=talkyard\\..*:silent\"\"\"\n+          + \"\"\",cat=deprecation&origin=controllers\\..*:silent\"\"\"\n+          + \"\"\",cat=deprecation&origin=com\\.debiki\\..*:silent\"\"\"\n+          + \"\"\",cat=deprecation&origin=debiki\\..*:silent\"\"\"\n+          + \"\"\",cat=deprecation&origin=ed\\..*:silent\"\"\"),\n+\n   // Place tests in ./tests/app/ instead of ./test/, because there're other tests in\n   // ./tests/, namely security/ and e2e/, and having both ./test/ and ./tests/ seems confusing.\n   // RENAME to ./tests/appsv? (since ./app is now ./appsv)"
    },
    {
      "sha": "91a31fb80d14a15649ba3f0b0ebde77ac9f608ce",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -2159,6 +2159,8 @@ export const Editor = createFactory<any, EditorState>({\n \n   ifNewPostLooksOk: function(titleErrorMessage, textErrorMessage, ifOkFn: () => Vo) {\n     const state: EditorState = this.state;\n+    const store: Store = state.store;\n+\n     let errors = '';\n     if (titleErrorMessage && isBlank(state.title)) {\n       errors += titleErrorMessage;\n@@ -2177,7 +2179,8 @@ export const Editor = createFactory<any, EditorState>({\n     // Haven't updated the tests — many would fail, if \"That's a short ...\" dialogs pop up.\n     // Also, skip for staff users (if they write something short, it's probably ok)\n     // — later, this'll be per group settings; see pats_t.mod_conf_c.\n-    const skipProbl = isAutoTestSite() || user_isStaffOrCoreMember(state.store.me);\n+    const skipProbl = isAutoTestSite() || user_isStaffOrCoreMember(state.store.me) ||\n+            !store_isFeatFlagOn(store, 'ffShortPostTips', true)\n \n     const titleLen = state.title.trim().length;\n     const textLen = state.text.trim().length;"
    },
    {
      "sha": "ec2e128c2b7199fcc64a1ab3a052460c67e73f2a",
      "filename": "client/app-head/head-bundle.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-head%2Fhead-bundle.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-head%2Fhead-bundle.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-head%2Fhead-bundle.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -181,6 +181,7 @@ if (_narrow) {\n // see: https://stackoverflow.com/a/979995/694469  for more details.\n try {\n   var _searchParams = new URLSearchParams(location.search);\n+  var _ssoHow = _searchParams.get('ssoHow');\n   var _class = _searchParams.get('htmlClass');\n   if (_class) {\n     _doc.className += ' ' + _class.replace(/[^a-zA-Z0-9_-]/g, ' ');\n@@ -286,6 +287,7 @@ if (!eds.isInEmbeddedEditor) {\n   loadGlobalStaffScript: @{ tpi.globals.loadGlobalStaffScript.toString },\n   */\n \n+eds.ssoHow = _ssoHow;\n \n // Backw compat CLEAN_UP convert old js code in these 'namespaces' to Typescript instead [4KSWPY]\n // RENAME to tyd (\"Talkyard Dynamic\" things, like is-sth-ready promises?, remove 'internal' and 'v0'"
    },
    {
      "sha": "2a2c7b82fbde3773fbfbdc03dac95dd46fd4d3c1",
      "filename": "client/app-more/forum/create-category-dialog.more.ts",
      "status": "modified",
      "additions": 27,
      "deletions": 10,
      "changes": 37,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -133,11 +133,11 @@ const EditCategoryDialog = createClassAndFactory({\n       });\n     }\n     else {\n-      const categoryId = -1; // then the server will give it a >= 1 id  [4GKWSR1]\n+      const catIdMin1 = -1; // then the server will give it a >= 1 id  [4GKWSR1]\n       Server.loadGroups((groups: Group[]) => {\n         if (this.isGone) return;\n         const newCategory: CategoryPatch = {\n-          id: categoryId,\n+          id: catIdMin1,\n           extId: '',\n           parentId: store.currentPage.categoryId,\n           sectionPageId: store.currentPageId,\n@@ -157,10 +157,16 @@ const EditCategoryDialog = createClassAndFactory({\n           canChangeDefault: true,\n           category: newCategory,\n           groups: groups,\n+          // Sync these default perms with Scala code. [7KFWY025]\n           permissions: [\n-            defaultPermsOnPages(-11, Groups.EveryoneId, categoryId, false),\n-            defaultPermsOnPages(-12, Groups.FullMembersId, categoryId, false),\n-            defaultPermsOnPages(-13, Groups.StaffId, categoryId, true)],\n+            defaultNewCatPerms(-11, Groups.EveryoneId, catIdMin1, false),\n+            // Full members can edit wikis, by default. Apart from that, it is safer if\n+            // un-ticking an Everyone group permission, removes it from Full Members\n+            // too, and only Staff have permissions explicitly granted to themselves.\n+            // [_no_extra_def_perms] [DEFMAYEDWIKI]\n+            { ...noPermsOnPages(-12, Groups.FullMembersId, catIdMin1), mayEditWiki: true },\n+            // But staff have all permissions explicitly granted to it.  TyTSTAFDEFPERMS\n+            defaultNewCatPerms(-13, Groups.StaffId, catIdMin1, true)],\n         } as EditCatDiagState);\n       });\n     }\n@@ -582,18 +588,25 @@ const CatSettings = createClassAndFactory({\n \n \n \n-function defaultPermsOnPages(newPermId: PermissionId, forWhoId: PeopleId,\n-        categoryId: CategoryId, isStaff: boolean): PermsOnPage {\n+function noPermsOnPages(newPermId: PermissionId, forWhoId: PeopleId,\n+        categoryId: CatId): PermsOnPage {\n   return {\n     id: newPermId,\n     forPeopleId: forWhoId,\n     onCategoryId: categoryId,\n+  };\n+}\n+\n+\n+function defaultNewCatPerms(newPermId: PermissionId, forWhoId: PeopleId,\n+        categoryId: CatId, isStaff: Bo): PermsOnPage {\n+  return {\n+    ...noPermsOnPages(newPermId, forWhoId, categoryId),\n     // Setting these to false is not currently supported. [2LG5F04W]\n-    // Sync these default perms with Scala code. [7KFWY025]\n     mayEditPage: isStaff || undefined,\n     mayEditComment: isStaff || undefined,\n     mayEditWiki: isStaff || forWhoId >= Groups.FullMembersId, // [DEFMAYEDWIKI]\n-    // If someone sees hen's own post, hen would probably get angry if hen couldn't edit it?\n+    // If someone sees hans own post, han would probably get angry if han couldn't edit it?\n     // And staff probably expects everyone to be allowed to edit their own posts, by default?\n     // So, 'true' by default.\n     mayEditOwn: true,\n@@ -620,7 +633,11 @@ const CatSecurity = createClassAndFactory({\n         newPermId = p.id - 1;\n       }\n     });\n-    const newPerm = defaultPermsOnPages(newPermId, Groups.NoUserId, category.id, false);\n+    // Start with zero additional permissions, so the group won't accidentally\n+    // get any unintended permission. [_no_extra_def_perms] TyTNEWPERMSEMPTY\n+    // (We don't know which group, yet. The admin will choose a grop from the\n+    // `SelectGroupDropdown()`.)\n+    const newPerm = noPermsOnPages(newPermId, Groups.NoUserId, category.id);\n     this.props.updatePermissions(permissions.concat(newPerm));\n   },\n "
    },
    {
      "sha": "afdfa6afaf1adfccb89a7c6ef158d595a7f0c817",
      "filename": "client/app-more/login/create-user-dialog.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-more%2Flogin%2Fcreate-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-more%2Flogin%2Fcreate-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Flogin%2Fcreate-user-dialog.more.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -322,6 +322,7 @@ export var CreateUserDialogContent = createClassAndFactory({\n     }\n     else if (props.afterLoginCallback || (\n           anyReturnToUrl && !eds.isInLoginPopup &&\n+          // We should not redirect here, if we should redirect from verification emails *only*.\n           anyReturnToUrl.indexOf('_RedirFromVerifEmailOnly_') === -1)) {\n       const returnToUrl = anyReturnToUrl.replace(/__dwHash__/, '#');\n       const currentUrl = window.location.toString();"
    },
    {
      "sha": "4f9dcf29fa7c3a681a4b0f39b601eb386a87274b",
      "filename": "client/app-slim/form/form.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fform%2Fform.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fform%2Fform.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fform%2Fform.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -45,7 +45,7 @@ export function activateAnyCustomForm() {\n         Server.submitCustomFormAsNewTopic(formData);\n       }\n       else if (doWhat.value === 'SignUp') {\n-        login.loginIfNeeded(LoginReason.SignUp, location.toString());\n+        login.loginIfNeeded(LoginReason.SignUp, '');\n       }\n       else if (doWhat.value === 'SignUpSubmitUtx') {  // [plugin]\n         login.loginIfNeeded(LoginReason.SignUp, '/-/redir-to-my-last-topic', function() {"
    },
    {
      "sha": "9237f47baacc30be7442d177e0f7965d6a8e7068",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fforum%2Fforum.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -550,8 +550,14 @@ const ForumButtons = createComponent({\n   },\n \n   createTopic: function(category: Category) {\n-    const anyReturnToUrl = window.location.toString().replace(/#/, '__dwHash__');\n-    login.loginIfNeeded(LoginReason.CreateTopic, anyReturnToUrl, () => {\n+    // Remember any #composeTopic action (FragActionType.ComposeTopic), so we'll\n+    // continue composing, after having signed up (if needed) and clicked any\n+    // email verification link.  Doesn't seem to work, but I don't think\n+    // anyone anywhere knows about or uses this anyway. BUG  TESTS_MISSING  TyTFRAGCOMPTO\n+    // (The ComposeTopic frag action is used only when reopening new-topic-drafts, currently.)\n+    const loc = window.location;\n+    const returnToRelativeUrl = loc.pathname + loc.search + loc.hash.replace(/#/, '__dwHash__');\n+    login.loginIfNeeded(LoginReason.CreateTopic, returnToRelativeUrl, () => {\n       if (this.isGone) return;\n       const newTopicTypes = category.newTopicTypes || [];\n       if (newTopicTypes.length === 0) {"
    },
    {
      "sha": "e1d8c8c797a3d2a6967acf7e2f227c8f5c777da1",
      "filename": "client/app-slim/login/login-if-needed.ts",
      "status": "modified",
      "additions": 137,
      "deletions": 55,
      "changes": 192,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Flogin%2Flogin-if-needed.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Flogin%2Flogin-if-needed.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Flogin%2Flogin-if-needed.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -16,8 +16,8 @@\n  */\n \n /// <reference path=\"../links.ts\" />\n+// (Why does this behave as -already-loaded.ts? Oh well. [_5BKRF020])\n /// <reference path=\"../more-bundle-not-yet-loaded.ts\" />\n-// or should be ...already-loaded ? (5BKRF020)\n \n //------------------------------------------------------------------------------\n    namespace debiki2.login {\n@@ -48,83 +48,130 @@ export function getAuthnNonce(): St | U {\n \n \n // From before React.js.  Gah! This needs to be refactored :-/  Try to remove this field.\n-export let anyContinueAfterLoginCallback = null;\n+export let anyContinueAfterLoginCallback: (() => V) | U;\n \n \n+/// If login needed, redirects to `postNr` only if the user was signing up and had\n+/// to click an email verification link (the redirect link is then in the email addr\n+/// verification email).  Otherwise, runs `onOk()`.\n+///\n export function loginIfNeededReturnToPost(\n-      loginReason: LoginReason, postNr: PostNr, success: () => void,\n-      willCompose?: boolean) {\n+      loginReason: LoginReason, postNr: PostNr, onOk: () => V, willCompose?: Bo) {\n   // If posting a progress post, then, after login, scroll to the bottom, so one\n   // can click that button again — it's at the bottom.\n   const anchor = loginReason === LoginReason.PostProgressPost\n       ? FragActionHashScrollToBottom\n-      : (postNr < FirstReplyNr ? '' : (\n+      : (postNr < FirstReplyNr\n+          ?\n+            // UX COULD: Here it could be nice, if in embedded comments, scroll down to\n+            // the comments section?  [scroll_to_emb_comts]\n+            ''\n+          : (\n           // We use 'comment-' for embedded comments; they start on nr 1 = post 2. [2PAWC0]\n-          eds.isInEmbeddedCommentsIframe\n+          // (Hopefully the embedding website has no elems with ids like 'comment-NNN'.)\n+          eds.isInIframe\n               ? FragParamCommentNr + (postNr - 1)\n               : FragParamPostNr + postNr));\n \n-  loginIfNeededReturnToAnchor(loginReason, anchor, success, willCompose);\n+  loginIfNeededImpl(loginReason, anchor, null, true, onOk, willCompose);\n }\n \n \n+/// Same as `loginIfNeededReturnToPost()` above, but goes to `anchor` (a #hash-fragment)\n+/// after any signup, instead of to a post nr.\n+///\n export function loginIfNeededReturnToAnchor(\n-      loginReason: LoginReason, anchor: string, success?: () => void, willCompose?: boolean) {\n-  const returnToUrl = makeReturnToPageHashForVerifEmail(anchor);\n-  success = success || function() {};\n+      loginReason: LoginReason, anchor: St, onOk?: () => V, willCompose?: Bo) {\n+  loginIfNeededImpl(loginReason, anchor, null, true, onOk, willCompose);\n+}\n+\n+\n+/// If login needed, always redirects to `path` afterwards and ignores `onOk()`.\n+///\n+export function loginIfNeeded(loginReason: LoginReason, path: St, onOk?: () => V,\n+     willCompose?: Bo) {\n+  loginIfNeededImpl(loginReason, null, path, false, onOk, willCompose);\n+}\n+\n+\n+function loginIfNeededImpl(loginReason: LoginReason, toHash: St, toPath: St,\n+      redirFromEmailOnly: Bo, onOk?: () => V, willCompose?: Bo) {\n+\n+  onOk = onOk || function() {};\n   const store: Store = ReactStore.allData();\n   const me: Myself = store.me;\n+\n+  // No login needed, or not until later when submitting any comment?\n   if (me.isLoggedIn || (willCompose && ReactStore.mayComposeBeforeSignup())) {\n-    success();\n+    onOk();\n+    return;\n   }\n-  else if (eds.isInIframe) {\n-    // ... or only if isInSomeEmbCommentsIframe()?\n \n-    anyContinueAfterLoginCallback = success;\n+  const makeReturnToUrl = (): St => {\n+    // This can't happen, currently. And, currently, `toPath` is a Talkyard URL path,\n+    // not a path for any embedding website.\n+    dieIf(toPath && eds.embeddingUrl, 'TyEREDIREMBNGPATH');\n \n-    // Don't open a dialog inside the iframe; open a popup instead.\n-    // Need to open the popup here immediately, before loading any scripts, because if\n-    // not done immediately after mouse click, the popup gets blocked (in Chrome at least).\n-    // And when opening in a popup, we don't need any more scripts here in the main win anyway.\n-    const url = origin() + '/-/login-popup?mode=' + loginReason +   // [2ABKW24T]\n-      '&isInLoginPopup&returnToUrl=' + returnToUrl;\n-    d.i.createLoginPopup(url);\n-  }\n-  else {\n-    loginIfNeeded(loginReason, returnToUrl, success);\n+    let url = toPath ? location.origin + toPath : eds.embeddingUrl || location.toString();\n+\n+    // (This can be a Talkyard hash, e.g. #post-123. But can also be  #comment-123 and\n+    // that's for the embedd*ing* website and Talkyard's script there, which looks at\n+    // the hash and scrolls to that comment in Ty's blog comments iframe.)\n+    if (toHash) {\n+      url = url.replace(/#.*/, '') + toHash;\n+    }\n+    return url;\n   }\n-}\n \n+  const returnToUrl_new = makeReturnToUrl();\n+  const returnToUrl_legacy = redirFromEmailOnly ?\n+            makeReturnToPageHashForVerifEmail(toHash) : returnToUrl_new;\n \n-// Later, merge with loginIfNeededReturnToAnchor() above, and rename to loginIfNeeded, and use only\n-// that fn always — then will work also in iframe (will open popup).\n-export function loginIfNeeded(loginReason: LoginReason, returnToUrl: St, onOk?: () => Vo,\n-     willCompose?: Bo) {\n-  if (ReactStore.getMe().isLoggedIn || (willCompose && ReactStore.mayComposeBeforeSignup())) {\n-    if (onOk) onOk();\n+  if (eds.isInIframe && eds.ssoHow !== 'RedirPage') {\n+    // TESTS_MISSING: Compose comment before logging in? Then, we'd be  TyTEMBCOMPBEFLGI\n+    // in the *editor* iframe, now, rather than the *comments* iframe.\n+\n+    anyContinueAfterLoginCallback = onOk;\n+\n+    // Don't open a dialog inside the iframe; open a popup instead.\n+    // Need to open the popup here immediately, because if not done immediately after\n+    // mouse click, the popup gets blocked (in Chrome at least).\n+    //\n+    // (This'll call `LoginController.showLoginPopup()` in the app server, to show:\n+    // ../../../appsv/server/views/authn/authnPage.scala.html  in a popup.\n+    // The popup calls  `debiki2.login.getLoginDialog().openToSignUp()`.  That's similar to\n+    // the else case below, but in a popup, [_popup_or_not], with no SSO and not admin area.)\n+    //\n+    const url = origin() + '/-/login-popup?mode=' + loginReason +   // [2ABKW24T]\n+      '&isInLoginPopup&returnToUrl=' + returnToUrl_legacy;\n+    d.i.createLoginPopup(url);\n   }\n   else {\n-    goToSsoPageOrElse(returnToUrl, loginReason, onOk, function() {\n+    goToSsoPageOrElse(returnToUrl_new, returnToUrl_legacy, onOk, function() {\n       Server.loadMoreScriptsBundle(() => {\n+        // (This is similar to above [_popup_or_not], but in the main win, not in a popup.)\n+\n         // People with an account, are typically logged in already, and won't get to here often.\n         // Instead, most people here, are new users, so show the signup dialog.\n         // But when creating a new site, one logs in as admin (NeedToBeAdmin) if one\n         // clicked the link (verified one's admin email), but then tries to log in in\n         // another browser.\n-        // (Why won't this result in a compil err? (5BKRF020))\n+\n+        // (Why won't this result in a compil err? We're including:\n+        // ../more-bundle-not-yet-loaded.ts  only,  not ...-already-loaded.ts. [_5BKRF020])\n         const diag = debiki2.login.getLoginDialog();\n         const logInOrSignUp = loginReason === LoginReason.NeedToBeAdmin ?\n                   diag.openToLogIn : diag.openToSignUp;\n         logInOrSignUp(\n-              loginReason, returnToUrl, onOk || function() {});\n+              loginReason, returnToUrl_legacy, onOk || function() {});\n       });\n     });\n   }\n }\n \n \n export function openLoginDialogToSignUp(purpose: LoginReason) {\n-  goToSsoPageOrElse(location.toString(), purpose, null, function() {\n+  goToSsoPageOrElse(location.toString(), null, null, function() {\n     Server.loadMoreScriptsBundle(() => {\n       debiki2.login.getLoginDialog().openToSignUp(purpose);\n     });\n@@ -133,34 +180,42 @@ export function openLoginDialogToSignUp(purpose: LoginReason) {\n \n \n export function openLoginDialog(purpose: LoginReason) {\n-  goToSsoPageOrElse(location.toString(), purpose, null, function() {\n+  goToSsoPageOrElse(location.toString(), null, null, function() {\n     Server.loadMoreScriptsBundle(() => {\n       debiki2.login.getLoginDialog().openToLogIn(purpose);\n     });\n   });\n }\n \n \n-function goToSsoPageOrElse(returnToUrl: St, toDoWhat: LoginReason | U,\n-        doAfterLogin: () => void | U, orElse: () => void) {\n+function goToSsoPageOrElse(returnToUrl: St, returnToUrl_legacy: St | N,\n+        doAfterLogin: (() => V) | U, orElse: () => V): V {\n   // Dupl code? [SSOINSTAREDIR]\n   const store: Store = ReactStore.allData();\n-  const anySsoUrl: St | U = makeSsoUrl(store, returnToUrl);\n+  const anySsoUrl: St | U = makeSsoUrl(store, returnToUrl, returnToUrl_legacy);\n   if (anySsoUrl) {\n     // Currently Talkyard's own SSO opens in the same window (not in a popup win)\n     // — let's keep that behavior, for backw compatibility.\n-    // Maybe one day will be a conf val?\n+    // Maybe one day will be a conf val?  [[Upd 2024: Yes now there is: 'RedirPage',\n+    // so blog comments can redirect the whole embedd*ing* page.]]\n     // However, let custom IDP SSO open in a popup — this works better\n     // with embedded comments, [2ABKW24T]\n     // and if logging in because sumbitting a reply — then, it's nice to\n     // stay on the same page, and navigate away to the IDP only in a popup win,\n     // so the editor stays open and one can submit the reply, after login.\n-    if (store.settings.enableSso) {\n+    if (store.settings.enableSso && eds.ssoHow === 'RedirPage') {\n+      window.parent.postMessage(JSON.stringify(['ssoRedir', anySsoUrl]), eds.embeddingOrigin);\n+    }\n+    else if (store.settings.enableSso) {\n+      // This is Ty's own SSO.\n+\n       // Harmless bug: If session & local storage don't work, this redirect will\n       // destroy the browser authn nonce.  [br_authn_nonce]\n       location.assign(anySsoUrl);  // backw compat, see above\n     }\n     else {\n+      // This is SSO too, but using some standard like OAuth2 (not Ty's own).\n+\n       // This'll trigger the [SSOINSTAREDIR] code in login-dialog.more.ts — the\n       // SSO url then gets reconstructed, so we don't need to include it here.\n       // BUT, sleeping BUG: we should incl the authn nonce!  [br_authn_nonce]\n@@ -181,10 +236,14 @@ function goToSsoPageOrElse(returnToUrl: St, toDoWhat: LoginReason | U,\n }\n \n \n+// Constructs a url to an external SSO server to which the browser should be sent\n+// to log in.  Included in this url, is a return-to-url, so, after login,\n+// the exteral SSO server knows where to send the user next.\n+//\n // forTySsoTest: If we're on the Ty SSO test page, and should only generate\n // a SSO url if Talkyard's own SSO is in use (but not any external OIDC or OAuth2 IDP).\n //\n-export function makeSsoUrl(store: Store, returnToUrlMaybeMagicRedir: St,\n+export function makeSsoUrl(store: Store, returnToUrl_new: St, returnToUrlMagicRedir_legacy?: St | N,\n       forTySsoTest?: true): St | U {\n   const settings: SettingsVisibleClientSide = store.settings;\n   const talkyardSsoUrl = (settings.enableSso || forTySsoTest) && settings.ssoUrl;\n@@ -197,46 +256,69 @@ export function makeSsoUrl(store: Store, returnToUrlMaybeMagicRedir: St,\n \n   // Remove magic text that tells the Talkyard server to redirect to the return to url,\n   // only if it sends an email address verification email. (Via a link in that email.)\n-  const returnToUrl = returnToUrlMaybeMagicRedir.replace('_RedirFromVerifEmailOnly_', '');\n+  // Might still include a weird '__dwHash__' to encode '#' (instead of percent encoding).\n+  const returnToUrl_legacy = returnToUrlMagicRedir_legacy\n+          ? returnToUrlMagicRedir_legacy.replace('_RedirFromVerifEmailOnly_', '')\n+          : returnToUrl_new;\n \n-  const origin = location.origin;\n-  const returnToPathQueryHash = returnToUrl.substr(origin.length, 9999);\n+  const origin = eds.embeddingOrigin || location.origin;\n+  const returnToPathQueryHash_new = returnToUrl_new.substring(origin.length);\n+  const returnToPathQueryHash_legacy = returnToUrl_legacy.substring(origin.length);\n \n   const [nonce, lastsAcrossReload] = login.getOrCreateAuthnNonce();\n \n   // The SSO endpoint needs to check the return to full URL or origin against a white list\n-  // to verify that the request isn't a phishing attack — i.e. someone who sets up a site\n+  // to verify that the request isn't a [_phishing] attack — i.e. someone who sets up a site\n   // that looks exactly like the external website where Single Sign-On happens,\n-  // or looks exactly like the Talkyard forum, and uses $[returnTo...} to redirect\n+  // or looks exactly like the Talkyard forum, and uses ${returnTo...} to redirect\n   // to the phishing site. — That's why the full url and the origin params have\n   // Dangerous in their names.\n   //   Usually there'd be just one entry in the \"white list\", namely the address to the\n   // Talkyard forum. And then, better use `${talkyardPathQueryEscHash}` instead. However,\n-  // can be many Talkyard origins, if there's also a blog with embedded comments,\n-  // or more than one forum, which all use the same SSO login page.\n+  // can be many origins, if there's also a blog with embedded comments (e.g. blog.company.com),\n+  // or more than one forum (e.g. forum.company.com), which all use the same SSO login page.\n   const ssoUrlWithReturn = talkyardSsoUrl\n       ? (talkyardSsoUrl\n-        .replace('${talkyardUrlDangerous}', returnToUrl)\n+        // Legacy:\n+        .replace('${talkyardUrlDangerous}', returnToUrl_legacy)\n         .replace('${talkyardOriginDangerous}', origin)\n-        .replace('${talkyardPathQueryEscHash}', returnToPathQueryHash))\n+        .replace('${talkyardPathQueryEscHash}', returnToPathQueryHash_legacy)\n+\n+        // Better?\n+        // - Let's percent encode the parameters, instead of '__dwHash__'.\n+        // - Let's prefix the origin with a reminder for the Ty SSO integration\n+        //   to look at the origin and check if it's one of their origins (and not\n+        //   a [_phishing] site, see above). This makes the origin parameter\n+        //   invalid, so they cannot forget to look at it (then, won't work).\n+        //   (In 'check_if_legit!', '!' won't get % encoded, but ':' would have been.)\n+        // - Let's not say \"Talkyard URL\" or \"Talkyard origin\" — because if we're\n+        //   SSO logging in to blog comments, the user won't be redirected back to\n+        //   any *Talkyard* origin, but to the embedd*ing* webiste, e.g. a Ghost\n+        //   blog or static website.  (If they need to know it's for Talkyard SSO,\n+        //   they can add an `&isTalkyard=true` query string param themselves.)\n+        .replace('${returnToOrigin}', encodeURIComponent('check_if_legit!' + origin))\n+        // The external SSO server should send the user to the return-to-origin \n+        // plus this /path/and/maybe/?query=and#hash.\n+        .replace('${returnToPathQueryHash}', encodeURIComponent(returnToPathQueryHash_new)))\n+\n         // + nonce, later  [br_authn_nonce]\n       : (\n         `${UrlPaths.AuthnRoot}${customSsoIdp.protocol}/${customSsoIdp.alias}` +\n-            `?returnToUrl=${returnToPathQueryHash}` +\n+            `?returnToUrl=${returnToPathQueryHash_legacy}` +\n             `&nonce=${nonce}` );\n \n   return ssoUrlWithReturn;\n }\n \n \n-function makeReturnToPageHashForVerifEmail(hash) {\n+function makeReturnToPageHashForVerifEmail(hash: St): St {\n   // The magic '__Redir...' string tells the server to use the return-to-URL only if it\n   // needs to send an email address verification email (it'd include the return\n   // to URL on a welcome page show via a link in the email).\n   // '__dwHash__' is an encoded hash that won't be lost when included in a GET URL.\n   // The server replaces it with '#' later on.\n   // If we're showing embedded comments in an <iframe>, use the embedding page's url.\n-  const pageUrl = eds.embeddingUrl ? eds.embeddingUrl : window.location.toString();\n+  const pageUrl = eds.embeddingUrl || window.location.toString();\n   let returnToUrl = '_RedirFromVerifEmailOnly_' + pageUrl.replace(/#.*/, '');\n   if (hash) {\n     hash = hash.replace(/^#/, '');\n@@ -246,7 +328,7 @@ function makeReturnToPageHashForVerifEmail(hash) {\n }\n \n \n-export function continueAfterLogin(anyReturnToUrl?: string) {\n+export function continueAfterLogin(anyReturnToUrl?: St) {\n   // Minor clean up: Use guard clauses, instead of nested ifs.\n \n   if (eds.isInLoginWindow) {"
    },
    {
      "sha": "23b5a549b3c7347f6dee659f49101102c775c66d",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1347,6 +1347,7 @@ interface SettingsVisibleClientSide extends TopicInterfaceSettings, SettingsDisc\n   doubleTypePassword?: boolean;         // default: false\n   ssoUrl?: string;                      // default: undefined\n   ssoShowEmbAuthnBtns?: ShowEmbAuthnBtnsBitf;  // default: undef —> All\n+  // RENAME `enableSso` to `enableTysOwnSso`? & Could be a version nr, not just a bool?\n   enableSso?: boolean;                  // default: undefined —> false\n   ssoWillRedirAfterLogout?: Bo;         // default: undef —> false\n   rememberEmbSess?: Bo;                 // default: undef —> true\n@@ -2963,6 +2964,21 @@ interface SASite {\n }\n \n \n+/// For updating an SASite (but not for purging it).\n+///\n+interface SASitePatch {  // Scala: case class SuperAdminSitePatch\n+  id: SiteId\n+  status: SiteStatus\n+  superStaffNotes?: St\n+  rdbQuotaMiBs?: Nr\n+  fileQuotaMiBs?: Nr\n+  readLimsMult: Nr | N\n+  logLimsMult: Nr | N\n+  createLimsMult: Nr | N\n+  featureFlags: St\n+}\n+\n+\n interface Rect {\n   top: number;\n   left: number;\n@@ -3306,6 +3322,7 @@ interface UserPresenceWsMsg {\n \n \n // These variables are initialized in a certain <head><script>.  [5JWKA27]\n+// Not always from the server — e.g. `ssoHow` is from any embedding page (e.g. blog post).\n \n interface ServerVars {\n   doWhat: 'Noop' | 'StartPage' | 'ResetPwd';\n@@ -3375,6 +3392,8 @@ interface ServerVars {\n   // When creating new site.\n   baseDomain?: string;\n \n+  ssoHow?: 'RedirPage' | 'LoginPopup' | St // or sth else (invalid)\n+\n   newPasswordData?: NewPasswordData;\n }\n "
    },
    {
      "sha": "5c2aac07b8702a3ab0ae528b78f73bbfb08eb85e",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Foop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Foop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Foop-methods.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -917,6 +917,8 @@ export function settings_selectTopicType(settings: SettingsVisibleClientSide, me\n \n \n export function store_isFeatFlagOn(store: Store, featureFlag: St, defaultOn?: Bo): Bo {\n+  // A bit weird: If a flag is off, `_.includes(..)` will set both `isOn` and `isOff`. But\n+  // the last line:  `isOn && !isOff`  becomes false, so it works. Oh well.\n   const offFlag = '0' + featureFlag;\n   const isOn = defaultOn ||\n           _.includes(store.siteFeatureFlags, featureFlag) ||"
    },
    {
      "sha": "12da84a30d0c3e9ada04c3386975f720dc5afe2f",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fpost-actions.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -228,7 +228,7 @@ export const PostActions = createComponent({\n     const atRect = cloneEventTargetRect(event);\n     const store: Store = this.props.store;\n     const post: Post = this.props.post;\n-    loginIfNeededThen(LoginReason.LoginToLike, post.nr, () => {\n+    login.loginIfNeededReturnToPost(LoginReason.LoginToLike, post.nr, () => {\n       if (this.isGone) return;\n       const toggleOn = !me_hasVoted(store.me, post.nr, PostVoteType.Like);\n       toggleVote(this.props.store, post, PostVoteType.Like, toggleOn, atRect);\n@@ -563,7 +563,7 @@ const MoreVotesDropdownModal = createComponent({\n   onWrongClick: function(event: MouseEvent) {\n     const atRect = cloneEventTargetRect(event);\n     const post: Post = this.state.post;\n-    loginIfNeededThen(LoginReason.LoginToDisagree, post.nr, () => {\n+    login.loginIfNeededReturnToPost(LoginReason.LoginToDisagree, post.nr, () => {\n       toggleVote(this.state.store, post, PostVoteType.Disagree, !this.hasVoted(PostVoteType.Disagree),\n             atRect, this.closeSoon);\n     });\n@@ -975,16 +975,12 @@ const MoreDropdownModal = createComponent({\n \n \n function flagPost(post: Post, at: Rect) {\n-  loginIfNeededThen(LoginReason.LoginToFlag, post.nr, () => {\n+  login.loginIfNeededReturnToPost(LoginReason.LoginToFlag, post.nr, () => {\n     morebundle.openFlagDialog(post.nr, at);\n   });\n }\n \n \n-function loginIfNeededThen(loginToWhat: LoginReason, postNr: PostNr, success: () => Vo) {\n-  login.loginIfNeededReturnToPost(loginToWhat, postNr, success);\n-}\n-\n //------------------------------------------------------------------------------\n    }\n //------------------------------------------------------------------------------"
    },
    {
      "sha": "06c68e13f39c41d07a929930dc5592dac2c006e8",
      "filename": "client/app-slim/react-elements/name-login-btns.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Freact-elements%2Fname-login-btns.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Freact-elements%2Fname-login-btns.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Freact-elements%2Fname-login-btns.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -45,7 +45,10 @@ export const NameLoginBtns = createComponent({\n   },\n \n   onLoginClick: function() {\n-    login.loginIfNeededReturnToAnchor(this.props.purpose || LoginReason.LoginToLogin, '');\n+    login.loginIfNeededReturnToAnchor(this.props.purpose || LoginReason.LoginToLogin,\n+        // Wouldo it be nice to, if in embedded comments, scroll down to the comments\n+        // section after login?  [scroll_to_emb_comts]\n+        '');\n   },\n \n   onLogoutClick: function() {"
    },
    {
      "sha": "4043932cf30b79c5988de6bc8efb4b6c60d425d9",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fslim-bundle.d.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -282,11 +282,12 @@ declare namespace debiki2 {\n     function loginIfNeededReturnToPost(\n         loginReason: LoginReason, postNr: PostNr, success?: () => Vo, willCompose?: Bo);\n \n-    function loginIfNeeded(loginReason, returnToUrl: string, onDone?: () => void);\n+    function loginIfNeeded(loginReason: LoginReason, pathOrHash: St, onOk?: () => V);\n     function openLoginDialogToSignUp(purpose);\n     function openLoginDialog(purpose);\n \n-    function makeSsoUrl(store: Store, returnToUrl: St, forTySsoTest?: true): St;\n+    function makeSsoUrl(store: Store, returnToUrl: St, returnToUrl_legacy?: St | N,\n+          forTySsoTest?: true): St;\n     function getOrCreateAuthnNonce(): [St, Bo];\n     function getAuthnNonce(): St;\n   }"
    },
    {
      "sha": "280a21bbf472ff81ea69e161b1b34476bdddf4b6",
      "filename": "client/app-slim/watchbar/watchbar.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fwatchbar%2Fwatchbar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-slim%2Fwatchbar%2Fwatchbar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fwatchbar%2Fwatchbar.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -193,7 +193,7 @@ const ChatChannels = createComponent({\n   },\n \n   createChatChannel: function() {\n-    login.loginIfNeeded(LoginReason.LoginToChat, location.toString(), () => {\n+    login.loginIfNeeded(LoginReason.LoginToChat, '', () => {\n       if (this.isGone) return;\n       Server.listCategoriesAllSections((categories: Category[]) => {\n         if (this.isGone) return;"
    },
    {
      "sha": "a3fff6ef20e84ae1db4a98c83a1e86fdbecad8ef",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -89,7 +89,7 @@ const SsoTestComponent = createReactClass(<any> {\n     const settings = store.settings;\n     const me: Myself = store.me;\n     const ssoUrl = login.makeSsoUrl(\n-            store, window.location.toString(), true /* forTySsoTest */);\n+            store, window.location.toString(), null, true /* forTySsoTest */);\n \n     const noSsoUrlInfo = ssoUrl ? null :\n       rFragment({},"
    },
    {
      "sha": "6a70748dc7d41b8845bc0f08e4e279167d4122f7",
      "filename": "client/app-staff/superadmin/superadmin-app.staff.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 12,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -273,9 +273,10 @@ const SiteTableRow = createComponent({\n   },\n \n   changeStatus: function(newStatus: SiteStatus) {\n-    const site: SASite = _.clone(this.props.site);\n-    site.status = newStatus;\n-    Server.updateSites([site]);\n+    const site: SASite = this.props.site;\n+    const patch: SASitePatch = pluckPatch(site);\n+    patch.status = newStatus;\n+    Server.updateSites([patch]);\n   },\n \n   reindex: function() {\n@@ -284,16 +285,17 @@ const SiteTableRow = createComponent({\n   },\n \n   saveNotesAndFlags: function() {\n-    const site: SASite = _.clone(this.props.site);\n+    const site: SASite = this.props.site;\n+    const patch: SASitePatch = pluckPatch(site);\n     const state: SiteTableRowState = this.state;\n-    site.rdbQuotaMiBs = state.rdbQuotaMiBs;\n-    site.fileQuotaMiBs = state.fileQuotaMiBs;\n-    site.readLimsMult = state.readLimsMult;\n-    site.logLimsMult = state.logLimsMult;\n-    site.createLimsMult = state.createLimsMult;\n-    site.superStaffNotes = state.newNotes;\n-    site.featureFlags = state.newFeatureFlags;\n-    Server.updateSites([site]);\n+    patch.rdbQuotaMiBs = state.rdbQuotaMiBs;\n+    patch.fileQuotaMiBs = state.fileQuotaMiBs;\n+    patch.readLimsMult = state.readLimsMult;\n+    patch.logLimsMult = state.logLimsMult;\n+    patch.createLimsMult = state.createLimsMult;\n+    patch.superStaffNotes = state.newNotes;\n+    patch.featureFlags = state.newFeatureFlags;\n+    Server.updateSites([patch]);\n   },\n \n   render: function() {\n@@ -493,6 +495,22 @@ const SiteTableRow = createComponent({\n   }\n });\n \n+\n+function pluckPatch(site: SASite): SASitePatch {\n+  return {\n+    id: site.id,\n+    status: site.status,\n+    superStaffNotes: site.superStaffNotes,\n+    rdbQuotaMiBs: site.rdbQuotaMiBs,\n+    fileQuotaMiBs: site.fileQuotaMiBs,\n+    readLimsMult: site.readLimsMult,\n+    logLimsMult: site.logLimsMult,\n+    createLimsMult: site.createLimsMult,\n+    featureFlags: site.featureFlags,\n+  };\n+}\n+\n+\n //------------------------------------------------------------------------------\n    }\n //------------------------------------------------------------------------------"
    },
    {
      "sha": "968281ede7c52a754c3235b89cf5602485d1fa91",
      "filename": "client/embedded-comments/blog-comments.ts",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fembedded-comments%2Fblog-comments.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/client%2Fembedded-comments%2Fblog-comments.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fembedded-comments%2Fblog-comments.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -47,6 +47,13 @@ interface WindowWithTalkyardProps {\n   talkyardReloadCommentsAndEditor: () => void;\n   talkyardAddCommentsIframe: (ps: { appendInside: HElm, discussionId: St }) => HElm;\n   talkyardForgetRemovedCommentIframes: () => Vo;\n+  talkyardUiLanguage?: St;\n+\n+  // Either 'RedirPage' or 'PopupWin'. The former redirects the embedding page to\n+  // the SSO login page. The latter shows a login popup (the default).\n+  // ('RedirPage' rather than 'redirPage' is more consistent with the naming in\n+  // ../../tests/e2e-wdio7/pub-api.ts .)\n+  talkyardSsoHow?: St;\n }\n \n // Later: SSO and HMAC via https://pasteo.io? https://paseto.io/rfc/  [blog_comments_sso]\n@@ -141,6 +148,8 @@ const insecureSomethingErrMsg = insecureTyIframeProbl ? (\n \n const considerQueryParams = windowWithTalkyardProps.talkyardConsiderQueryParams;\n \n+const ssoHow = windowWithTalkyardProps.talkyardSsoHow;\n+\n // For automatic Single Sign-On with PASETO authn tokens, either in a variable,\n // or a cookie (cookie better? So not incl in html, although encrypted).\n const authnTokenInVar = windowWithTalkyardProps.talkyardAuthnToken;\n@@ -571,8 +580,11 @@ function intCommentIframe(commentsElem, iframeNr: Nr, manyCommentsIframes: Bo) {\n \n   const logLevelParam = talkyardLogLevel ? `&logLevel=${talkyardLogLevel}` : '';\n \n-  const allUrlParams =\n+  const ssoHowParam = ssoHow ? `&ssoHow=${ssoHow}` : '';\n+\n+  const allUrlParams =  // [emb_comts_url_params]\n           edPageIdParam + discIdParam + catRefParam + embeddingUrlParam +\n+          ssoHowParam +\n           htmlClassParam + logLevelParam + scriptVersionQueryParam;\n \n   var commentsIframeUrl = serverOrigin + '/-/embedded-comments?' + allUrlParams;\n@@ -918,6 +930,9 @@ function onMessage(event) {\n       //\n       // Log in via the first comments iframe only — otherwise there'd be races\n       // and unnecessarily many server requests.\n+      // (Probably better to not incl any token or secret in any url (as is however\n+      // done with e.g. `htmlClassParam`, see  [emb_comts_url_params]), so they won't\n+      // end up in any request logs somewhere.)\n       //\n       if (authnTried) {\n         // Noop.\n@@ -1028,6 +1043,13 @@ function onMessage(event) {\n       debiki.Utterscroll.stopScrolling(eventData);\n       break;\n       */\n+    case 'ssoRedir':\n+      // Redirect to the SSO server. In the url, there's parameters that tells the\n+      // SSO server about the current url, so it (the server) can redirect the user\n+      // back here after login.  [sso_redir_par_win]\n+      logD(`Going to SSO page: ${eventData}`);\n+      location.assign(eventData);\n+      break;\n \n     case 'authnErr':\n       logW(`Error logging in using ${eventData.prettyMethod}. ` +\n@@ -1100,6 +1122,7 @@ function onMessage(event) {\n       if (eventData.goTo) {\n         // For SSO-logout, we need to redirect this parent win  [sso_redir_par_win]\n         // to the logout url.\n+        logM(`Going to: ${eventData.goTo}`);\n         location.assign(eventData.goTo);\n       }\n       break;"
    },
    {
      "sha": "22c35cbb1f235d40a4666d72492e40ea6f1f0d26",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -142,6 +142,7 @@ regardless of how they inherited permissions from other groups.\n \n [granular_perms]\n E.g. may-see-others'-sessions. Currently only amdins may, but sometimes, good if mods could too?\n+Or a mayReplyOnOwn permission? Maybe never.\n Also see: [wiki_perms]\n \n [tags]"
    },
    {
      "sha": "f7b27a25c63fc67ac490e475f3e740edc32e2c88",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 32,
      "deletions": 2,
      "changes": 34,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -285,9 +285,12 @@ single-sign-on:  (3093533)\n sso, embedded comments, [_embcom_sso],\n embedded comments sso,\n blog comments sso:\n-            - embcom.sso.token-direct-w-logout-url.2br.test.ts  TyTE2EEMBSSO1\n+            - embcom.sso.token-direct-w-logout-url.2br.ec  TyTE2EEMBSSO1\n+                - combining with  direct SSO:  TyT306MRG2\n             - embcom.sso.token-in-cookie.2br.ec  TyTE2EEMBSSO2\n             - embcom.manyframes.js-api.sso.2br.ec  TyTEMANYEMBDISAPISSO\n+  redirect whole embedding page to sso server:\n+            - embcom.sso.redir-page.2br.ec.e2e.ts  TyTE2EEMBSSO3.TyTEMBSSOREDIR\n \n impersonate:\n           - impersonate-post-as-other.2browsers  TyT502KNG24\n@@ -743,6 +746,16 @@ categories:\n             - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n             - link-previews-internal-not-see-cat.2br  TyTE2ELNPVIN4837.TyT0ACSPG043\n             - link-previews-internal-to-cats-not-see.2br.f  TyTE2ELN2CAT\n+    new cat security config:\n+            - perms-see-own.2br.f   TyTPERMSEEOWN.TyTDEFCATPERMS & TyTSTAFDEFPERMS\n+    new group perms security config:\n+            - perms-see-own.2br.f   TyTPERMSEEOWN.TyTNEWPERMSEMPTY\n+    see-own:\n+            - perms-see-own.2br.f   TyTPERMSEEOWN  CR_MISSING\n+            - categories-basic.3br.d   TyTCATSBASIC.TyTSEEOWN\n+      move cat & back:\n+            - TESTS_MISSING: Move away: Doesn't inherit.  Move back: does.\n+                But there are other such tests? Not so important.\n     topics on cats list page:\n             - category-perms.2br.d  TyTE2ECATPREMS01.TyTSEECATTOPS\n             - cats-perf-many.2br.d  TyTECATPREFMNY.TyTSEECATTOPS\n@@ -969,6 +982,8 @@ link previews:\n   to page/post one may not see:\n     restricted category:\n           - link-previews-internal-not-see-cat.2br  TyTE2ELNPVIN4837\n+    see-own category:\n+            - perms-see-own.2br.f  TyTPERMSEEOWN.TyTLNSEEOWN\n     private message:\n     private chat:\n     whisper post:\n@@ -993,6 +1008,8 @@ internal links:  # (687295)\n           - TESTS_MISSING\n   to category:\n             - link-previews-internal-to-cats-not-see.2br.d  TyTE2ELN2CAT\n+  see-own category:\n+            - perms-see-own.2br.f  TyTPERMSEEOWN.TyTLNSEEOWN\n \n discussion -\n   users on page:\n@@ -1121,6 +1138,11 @@ embedded comments:\n   post 1st comment, edit:   TESTS_MISSING\n     when unapproved:\n     auto approved:\n+  compose before\n+    login:\n+            - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048\n+    signup:\n+            - TESTS_MISSING  TyTEMBCOMPBEFLGI  # missing, right?\n   vote before page exists:\n           - embcom.vote-bef-page-exists.1br  TyT2AKBS056\n   config notf prefs before page exists:\n@@ -1896,7 +1918,12 @@ url api,\n frag action api,\n url frag action api,\n links like: http://site.localhost/forum/#composeTopic&category=slug:ideas\n-          - TESTS_MISSING,  search for  enum FragActionType.\n+            - TESTS_MISSING\n+            - Not finished:\n+               frag-action-compose-topic.2br.f  TyTFRAGCOMPTO, search for  enum FragActionType.\n+  open drafts, linkToDraftSource():\n+            - drafts-new-topic  TyT5BR20P4.TyTFRAGACT\n+\n \n api,\n webhooks:  [.webhooks_api]\n@@ -1935,6 +1962,9 @@ export and restore:  (impexp)\n   overwrite current site:\n             - embcom.expimpjson.restore-overwrite-site-same-domain.2br  TyT5WKTJL025\n             - embcom.expimpjson.restore-overwrite-site-new-domain.2br  TyT603KNF62\n+  exp imp groups & members:\n+    import:\n+            - perms-see-own.2br.f   TyTPERMSEEOWN.TyTIMPGROUP\n   exp imp images:\n             - embcom.expimpjson.create-site-exp-json.2br  [402KGS4RQ]\n   sanitize html:"
    },
    {
      "sha": "7a000b0bf7e8434e701e4f6bb73a860f438883f0",
      "filename": "modules/paseto-cmd/README.txt",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/modules%2Fpaseto-cmd%2FREADME.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/modules%2Fpaseto-cmd%2FREADME.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules%2Fpaseto-cmd%2FREADME.txt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -7,7 +7,17 @@ The secret should be a hex string. If there's any error, then, right now,\n the program exists and prints just nothing (crickets!), or maybe some cryptic\n Rust error message.\n \n-But what's this for?\n+\n+Install Rust and Cargo, see: https://www.rust-lang.org/tools/install (as of Aug 2024).\n+Then, do:  (in this folder, i.e. modules/paseto-cmd/)\n+\n+    cargo build\n+\n+That generates `modules/paseto-cmd/target/debug/paseto-cmd`. The debug build is\n+all we need, see `encryptLocalPasetoV2Token()`  in ../../tests/e2e-wdio7/utils/utils.ts .\n+\n+\n+But why?\n \n This is for blog comments Single Sign-On (SSO) e2e tests. Then, need to generate\n PASETO tokens, but the only Javascript library that supports v2.local tokens"
    },
    {
      "sha": "4769f7ac7af0c6796b841acaa2514e0781013441",
      "filename": "modules/paseto-cmd/src/main.rs",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/modules%2Fpaseto-cmd%2Fsrc%2Fmain.rs",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/modules%2Fpaseto-cmd%2Fsrc%2Fmain.rs",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules%2Fpaseto-cmd%2Fsrc%2Fmain.rs?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -10,9 +10,9 @@ fn main() {\n    let args: Vec<String> = env::args().collect();\n \n   // Later, handle & print errors: (rather than just unwrap & crash)\n-  if let Err(e) = gen_token(args) {\n-    eprintln!(\"{}\", e);\n-  }\n+  //if let Err(e) = gen_token(args) {\n+  //  eprintln!(\"{}\", e);\n+  //}\n \n   let key_as_hex: &String = &args[1];\n   let key: Vec<u8> = decode_hex(key_as_hex).unwrap();"
    },
    {
      "sha": "7ffd6aa86153045ab663ed1450f8c4dc4940c1c6",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1 +1 @@\n-Subproject commit 9b9f590da473869c6bb9336b1226eaad545c23bc\n+Subproject commit 7ffd6aa86153045ab663ed1450f8c4dc4940c1c6"
    },
    {
      "sha": "31f52431c97c01dee624b1af2c3619e7f1943fce",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-regular?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1 +1 @@\n-Subproject commit 0b1a193b4aca4d79fc03be07e15681fb15f9cd5e\n+Subproject commit 31f52431c97c01dee624b1af2c3619e7f1943fce"
    },
    {
      "sha": "1dc0b6629f32574cd0e7f9f38b623f1b6696520b",
      "filename": "s/promote-version.sh",
      "status": "renamed",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/s%2Fpromote-version.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/s%2Fpromote-version.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Fpromote-version.sh?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -166,7 +166,8 @@ popd\n # [.must_be_dev_regular]\n git tag $release_version_tag_w_branch tyse-$release_version_tag-dev\n \n-git push origin $release_version_tag_w_branch\n+# I've named the origin 'public' so it's simpler to remember that it's public.\n+git push public $release_version_tag_w_branch\n \n set +x\n echo",
      "previous_filename": "s/release-canary.sh"
    },
    {
      "sha": "f9a8f52e95bff41128d895458412b00b1c28e1e5",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -364,6 +364,9 @@ function runAllE2eTests {\n   $r s/wdio --only drafts-chat-adv-ed.2browsers $args\n   $r s/wdio --only drafts-delete $args\n \n+  # Wip:\n+  # $r s/wdio-7 --only frag-action-compose-topic.2br.f.wip.ts --cd -i\n+\n   $r s/wdio --only delete-pages.2br $args\n \n   $r s/wdio-7 --only move-posts-same-page.2br.d --cd -i $args\n@@ -510,6 +513,7 @@ function runAllE2eTests {\n \n   $r s/wdio --only group-permissions-similar-topics.2br.mtime $args\n   $r s/wdio --only permissions-edit-wiki-posts.2browsers $args\n+  #$r s/wdio-7 --only perms-see-own.2br.f $args --cd -i  # _see_own\n \n   # Do after the search and access permission tests above.  [.more_cat_tests]\n   $r s/wdio --only categories-delete.2br $args\n@@ -540,6 +544,7 @@ function runAllE2eTests {\n \n   #$r s/wdio-7 --only alias-anons-true-mixed.2br.f --cd -i $args\n   #$r s/wdio-7 --only alias-anons-basic.2br.f --cd -i $args\n+  #$r s/wdio-7 --only alias-anons-see-own.2br.f --cd -i $args  # _see_own\n \n \n   # API\n@@ -551,7 +556,7 @@ function runAllE2eTests {\n   $r s/wdio-7 --only api-upsert-posts.2br.d --cd -i $args\n \n   $r s/wdio-7 --only api-search-full-text.1br.f --cd -i $args\n-  $r s/wdio --only api-list-query-for-topics-popular-first $args\n+  $r s/wdio-7 --only api-list-query-for-topics-popular-first --cd -i $args\n   $r s/wdio --only api-list-query-for-topics-recent-etc-first $args\n   $r s/wdio --only api-list-query-for-posts $args\n  #$r s/wdio --only api-list-query-for-events $args\n@@ -706,6 +711,7 @@ function runAllE2eTests {\n   # Single Sign-On, embedded comments:\n   $r s/wdio-7     --only embcom.sso.token-direct-w-logout-url.2br.ec --cd -i $args\n   $r s/wdio-7     --only embcom.sso.token-in-cookie.2br.ec --cd -i $args\n+  $r s/wdio-7     --only embcom.sso.redir-page.2br.ec --cd -i $args\n \n   # Many comments iframes:\n   $r s/wdio-7     --only embcom.manyframes.basic.2br --cd -i $args"
    },
    {
      "sha": "5b373d886ef8700c190abd3b523fa231c4b69e09",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fpackage.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fpackage.json?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -14,7 +14,7 @@\n     \"@wdio/spec-reporter\": \"^7.20.3\",\n     \"@wdio/types\": \"^7.20.3\",\n     \"axios\": \"^0.26.1\",\n-    \"chromedriver\": \"^128.0.0\",\n+    \"chromedriver\": \"^128.0.3\",\n     \"paseto.js\": \"^0.1.7\",\n     \"ts-node\": \"^10.9.1\",\n     \"wdio-chromedriver-service\": \"^7.3.2\""
    },
    {
      "sha": "b88f407ce5f019dfe37e9c9bc9e63401f6947904",
      "filename": "tests/e2e-wdio7/specs/__e2e-test-template.2br.f.e2e__.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.f.e2e__.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.f.e2e__.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.f.e2e__.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -79,7 +79,7 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n     //builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n \n     // Adding a new member:\n-    const newMember: Member = builder.addMmember('hens_username');\n+    const newMember: Member = builder.addMember('hens_username');\n \n     // Placing Cat B in Staff Cat:\n     forum.categories.catB.parentId = forum.categories.staffCat.id;\n@@ -111,11 +111,11 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n       //maxPostsPendApprBefore: 0,\n       numFirstPostsToReview: 0,\n     });\n-    builder.getSite().pageNotfPrefs = [{\n+    builder.getSite().pageNotfPrefs.push({\n       memberId: forum.members.owen.id,\n       notfLevel: c.TestPageNotfLevel.Muted,\n       wholeSite: true,\n-    }];\n+    });\n \n     // Enable API.\n     builder.settings({ enableApi: true });"
    },
    {
      "sha": "a30a3b72ab6465e8543c8f0ab6510263b293934e",
      "filename": "tests/e2e-wdio7/specs/api-list-query-for-topics-popular-first.1br.f.e2e.ts",
      "status": "renamed",
      "additions": 66,
      "deletions": 65,
      "changes": 131,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fapi-list-query-for-topics-popular-first.1br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fapi-list-query-for-topics-popular-first.1br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fapi-list-query-for-topics-popular-first.1br.f.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1,15 +1,11 @@\n /// <reference path=\"../test-types.ts\"/>\n \n import * as _ from 'lodash';\n-import assert = require('../utils/ty-assert');\n-// import fs = require('fs');  EMBCMTS\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import settings = require('../utils/settings');\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n import { buildSite } from '../utils/site-builder';\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import lad = require('../utils/log-and-die');\n-import c = require('../test-constants');\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n \n \n let owen: Member;\n@@ -20,7 +16,7 @@ let mariasBrowser: TyE2eTestBrowser;\n let margaret: Member;\n \n let siteIdAddress: IdAddress;\n-let siteId;\n+let siteId: Nr | U;\n \n let forum: TwoPagesTestForum;\n \n@@ -47,14 +43,14 @@ let pageZzzJustAdded: PageJustAdded | U;\n \n describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n \n-  it(\"import a site\", () => {\n+  it(\"import a site\", async () => {\n     const builder = buildSite();\n     forum = builder.addTwoPagesForum({\n       title: \"Some E2E Test\",\n       members: ['michael', 'maria', 'owen'],\n     });\n \n-    margaret = builder.addMmember('margaret');\n+    margaret = builder.addMember('margaret');\n     pageAaaJustAdded = builder.addPage({\n       id: 'pageAaaId',\n       createdAtMs: c.JanOne2020HalfPastFive + 10*1000,\n@@ -112,24 +108,24 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n     forum.categories.staffOnlyCategory.extId = staffCatExtId;\n \n     assert.refEq(builder.getSite(), forum.siteData);\n-    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteIdAddress = await server.importSiteData(forum.siteData);\n     siteId = siteIdAddress.id;\n     server.skipRateLimits(siteId);\n   });\n \n-  it(\"initialize people\", () => {\n-    const richBrowserA = new TyE2eTestBrowser(oneWdioBrowser);\n+  it(\"initialize people\", async () => {\n+    const richBrowserA = new TyE2eTestBrowser(oneWdioBrowser, 'brA');\n     owen = forum.members.owen;\n     maria = forum.members.maria;\n     mariasBrowser = richBrowserA;\n     owensBrowser = richBrowserA;\n   });\n \n \n-  it(\"Maria goes to the forum, logs in\", () => {\n-    mariasBrowser.go2(siteIdAddress.origin);\n+  it(\"Maria goes to the forum, logs in\", async () => {\n+    await mariasBrowser.go2(siteIdAddress.origin);\n     // Log in, so can Like vote, later below.\n-    mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n+    await mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n   });\n \n \n@@ -139,8 +135,8 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n \n   let response: ListQueryResults<PageListed>;\n \n-  it(\"Maria lists pages in the Specific category\", () => {\n-    response = server.apiV0.listQuery<PageListed>({\n+  it(\"Maria lists pages in the Specific category\", async () => {\n+    response = await server.apiV0.listQuery<PageListed>({\n       origin: siteIdAddress.origin,\n       listQuery: {\n         listWhat: 'Pages',\n@@ -149,7 +145,7 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n     }) as ListQueryResults<PageListed>;\n   });\n \n-  it(\"She finds three pages\", () => {\n+  it(\"She finds three pages\", async () => {\n     assert.eq(response.thingsFound.length, 3);\n   });\n \n@@ -158,61 +154,61 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n   let pageTwoFound: PageListed;\n   let pageThreeFound: PageListed;\n \n-  it(\"The first page is the most recently added page: Zzz  [TyT025WKRGJ]\", () => {\n+  it(\"The first page is the most recently added page: Zzz  [TyT025WKRGJ]\", async () => {\n     pageOneFound = response.thingsFound[0];\n     assert.eq(pageOneFound.title, pageZzzTitle);\n   });\n \n-  it(\"The second is Margaret's page\", () => {\n+  it(\"The second is Margaret's page\", async () => {\n     pageTwoFound = response.thingsFound[1];\n     assert.eq(pageTwoFound.title, margaretsPageTitle);\n   });\n \n-  it(\"The third page, is the page added first: Aaa\", () => {\n+  it(\"The third page, is the page added first: Aaa\", async () => {\n     pageThreeFound = response.thingsFound[2];\n     assert.eq(pageThreeFound.title, pageAaaTitle);\n   });\n \n-  it(\"All of them are in the Specific category\", () => {\n+  it(\"All of them are in the Specific category\", async () => {\n     const specCatName = forum.categories.specificCategory.name;\n     assert.eq(pageOneFound.categoriesMainFirst?.[0]?.name,   specCatName);\n     assert.eq(pageTwoFound.categoriesMainFirst?.[0]?.name,   specCatName);\n     assert.eq(pageThreeFound.categoriesMainFirst?.[0]?.name, specCatName);\n   });\n \n-  it(\"The author names are correct\", () => {\n+  it(\"The author names are correct\", async () => {\n     assert.eq(pageOneFound.author?.username,   forum.members.michael.username);\n     assert.eq(pageTwoFound.author?.username,   margaret.username);\n     assert.eq(pageThreeFound.author?.username, maria.username);\n   });\n \n-  it(\"Maria opens Margaret's page\", () => {\n-    mariasBrowser.go2(pageTwoFound.urlPath);\n+  it(\"Maria opens Margaret's page\", async () => {\n+    await mariasBrowser.go2(pageTwoFound.urlPath);\n   });\n \n-  it(\"The title, body and reply are all there\", () => {\n-    mariasBrowser.topic.waitForPostAssertTextMatches(c.TitleNr, margaretsPageTitle);\n-    mariasBrowser.topic.waitForPostAssertTextMatches(c.BodyNr, margaretsPageBody);\n+  it(\"The title, body and reply are all there\", async () => {\n+    await mariasBrowser.topic.waitForPostAssertTextMatches(c.TitleNr, margaretsPageTitle);\n+    await mariasBrowser.topic.waitForPostAssertTextMatches(c.BodyNr, margaretsPageBody);\n   });\n \n \n   // ----- Popular First\n \n \n-  it(\"Maria clicks Like\", () => {\n-    mariasBrowser.topic.clickLikeVote(c.BodyNr);\n+  it(\"Maria clicks Like\", async () => {\n+    await mariasBrowser.topic.clickLikeVote(c.BodyNr);\n   });\n \n-  it(\"... goes to the last page found\", () => {\n-    mariasBrowser.go2(pageThreeFound.urlPath);\n+  it(\"... goes to the last page found\", async () => {\n+    await mariasBrowser.go2(pageThreeFound.urlPath);\n   });\n \n-  it(\"... posts a comment — so the page gets bumped (new activity on the page)\", () => {\n-    mariasBrowser.complex.replyToOrigPost(`Hello hi there`);\n+  it(\"... posts a comment — so the page gets bumped (new activity on the page)\", async () => {\n+    await mariasBrowser.complex.replyToOrigPost(`Hello hi there`);\n   });\n \n-  it(\"Maria again lists pages in the Specific category\", () => {\n-    response = server.apiV0.listQuery<PageListed>({\n+  it(\"Maria again lists pages in the Specific category\", async () => {\n+    response = await server.apiV0.listQuery<PageListed>({\n       origin: siteIdAddress.origin,\n       listQuery: {\n         listWhat: 'Pages',\n@@ -221,21 +217,21 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n     }) as ListQueryResults<PageListed>;\n   });\n \n-  it(\"She again finds three pages\", () => {\n+  it(\"She again finds three pages\", async () => {\n     assert.eq(response.thingsFound.length, 3);\n   });\n \n-  it(\"But now Margaret's page is first — it got a Like vote\", () => {\n+  it(\"But now Margaret's page is first — it got a Like vote\", async () => {\n     pageOneFound = response.thingsFound[0];\n     assert.eq(pageOneFound.title, margaretsPageTitle);\n   });\n \n-  it(\"The activity bumped page, Aaa, comes thereafter\", () => {\n+  it(\"The activity bumped page, Aaa, comes thereafter\", async () => {\n     pageTwoFound = response.thingsFound[1];\n     assert.eq(pageTwoFound.title, pageAaaTitle);\n   });\n \n-  it(\"The previously topmost page — now it's last\", () => {\n+  it(\"The previously topmost page — now it's last\", async () => {\n     pageThreeFound = response.thingsFound[2];\n     assert.eq(pageThreeFound.title, pageZzzTitle);\n   });\n@@ -244,7 +240,7 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n   // ----- Private topics stay private   TyT502RKDJ46\n \n \n-  function listStaffPages() {\n+  async function listStaffPages() {\n     return server.apiV0.listQuery<PageListed>({\n       origin: siteIdAddress.origin,\n       listQuery: {\n@@ -254,51 +250,56 @@ describe(\"api-list-query-for-topics.test.ts  TyT603AKSL25\", () => {\n     }) as ListQueryResults<PageListed>;\n   }\n \n-  it(\"Maria tries to list pages in the Staff category\", () => {\n-    response = listStaffPages();\n+  it(\"Maria tries to list pages in the Staff category\", async () => {\n+    response = await listStaffPages();\n   });\n \n-  it(\"... but she cannot see those pages\", () => {\n+  it(\"... but she cannot see those pages\", async () => {\n     if (response.thingsFound.length >= 1) {\n       assert.fail(`Found staff pages, response:\\n${JSON.stringify(response)}`);\n     }\n   });\n \n-  it(\"Owen logs in\", () => {\n-    mariasBrowser.topbar.clickLogout();\n-    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  it(\"Owen logs in\", async () => {\n+    await mariasBrowser.topbar.clickLogout();\n+    await owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n   });\n \n   // A bit dupl test code, fine. [60KADJF602]\n-  it(\"... goes to the Staff category\", () => {\n-    owensBrowser.topbar.clickHome();\n-    owensBrowser.forumTopicList.switchToCategory(forum.categories.staffOnlyCategory.name);\n+  it(\"... goes to the Staff category\", async () => {\n+    await owensBrowser.topbar.clickHome();\n+    await owensBrowser.forumTopicList.switchToCategory(forum.categories.staffOnlyCategory.name);\n   });\n-  it(\"... eits security settings\", () => {\n-    owensBrowser.forumButtons.clickEditCategory();\n-    owensBrowser.categoryDialog.openSecurityTab();\n+  it(\"... eits security settings\", async () => {\n+    await owensBrowser.forumButtons.clickEditCategory();\n+    await owensBrowser.categoryDialog.openSecurityTab();\n   });\n-  it(\"... makes it public: adds the Everyone group  TyT69WKTEJG4\", () => {\n-    owensBrowser.categoryDialog.securityTab.addGroup(c.EveryoneFullName);\n+  it(\"... makes it public: adds the Everyone group  TyT69WKTEJG4\", async () => {\n+    await owensBrowser.categoryDialog.securityTab.addGroup(c.EveryoneFullName);\n   });\n-  it(\"... saves\", () => {\n-    owensBrowser.categoryDialog.submit();\n+  it(\"... grants the See permissions\", async () => {\n+    await owensBrowser.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, true);\n+  });\n+  it(\"... See-Own then gets ticked automatically  TyTSEEOWN\", async () => {\n+    assert.ok(await owensBrowser.categoryDialog.securityTab.getMay('SeeOwn', c.EveryoneId));\n+  });\n+  it(\"... saves\", async () => {\n+    await owensBrowser.categoryDialog.submit();\n   });\n-  // ---\n \n-  it(\"Maria tries to list the Staff pages again\", () => {\n-    response = listStaffPages();\n+  it(\"Maria tries to list the Staff pages again\", async () => {\n+    response = await listStaffPages();\n   });\n \n-  it(\"... now she sees one page\", () => {\n+  it(\"... now she sees one page\", async () => {\n     assert.eq(response.thingsFound.length, 1);\n   });\n \n-  it(\"... it's the staff only page\", () => {\n+  it(\"... it's the staff only page\", async () => {\n     assert.eq(response.thingsFound[0].title, staffOnlyPageTitle);\n   });\n \n-  it(\"... in the Staff category\", () => {\n+  it(\"... in the Staff category\", async () => {\n     assert.eq(response.thingsFound[0].categoriesMainFirst?.[0]?.name,\n         forum.categories.staffOnlyCategory.name);\n   });",
      "previous_filename": "tests/e2e/specs/api-list-query-for-topics-popular-first.test.ts"
    },
    {
      "sha": "c276b3f0320c89b9452ad14fdb20cde4a9180ded",
      "filename": "tests/e2e-wdio7/specs/api-search-full-text.1br.f.e2e.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fapi-search-full-text.1br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fapi-search-full-text.1br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fapi-search-full-text.1br.f.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -335,6 +335,12 @@ describe(`api-search-full-text.1br.f  TyT70ADNEFTD36`, () => {\n   it(\"... makes it public: adds the Everyone group  TyT69WKTEJG4\", async () => {\n     await owensBrowser.categoryDialog.securityTab.addGroup(c.EveryoneFullName);\n   });\n+  it(\"... grants the See permissions\", async () => {\n+    await owensBrowser.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, true);\n+  });\n+  it(\"... See-Own then gets ticked automatically  TEST MAP\", async () => {\n+    assert.ok(await owensBrowser.categoryDialog.securityTab.getMay('SeeOwn', c.EveryoneId));\n+  });\n   it(\"... saves\", async () => {\n     await owensBrowser.categoryDialog.submit();\n   });"
    },
    {
      "sha": "1777f16899a2155f2b3e3a10313b94970acbf7fa",
      "filename": "tests/e2e-wdio7/specs/categories-basic.3br.d.e2e.ts",
      "status": "modified",
      "additions": 74,
      "deletions": 6,
      "changes": 80,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fcategories-basic.3br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fcategories-basic.3br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcategories-basic.3br.d.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -66,14 +66,15 @@ describe(`categories-basic.3br.d   TyTCATSBASIC`, () => {\n \n   var mariasFirstTopicTitle = \"Marias topic\";\n   var mariasFirstTopicText = \"Marias text text text.\";\n+  let mariasPageUrl: St;\n \n   it(\"Maria creates a topic, in the new category\", async () => {\n     await maria.forumButtons.clickCreateTopic();\n     await maria.editor.editTitle(mariasFirstTopicTitle);\n     await maria.editor.editText(mariasFirstTopicText);\n     await maria.rememberCurrentUrl();\n     await maria.editor.save();\n-    await maria.waitForNewUrl();\n+    mariasPageUrl = await maria.waitForNewUrl();\n     // Ensure ancestor Wasteland visible.\n     await maria.assertPageTitleMatches(mariasFirstTopicTitle);\n     await maria.assertPageBodyMatches(mariasFirstTopicText);\n@@ -163,7 +164,7 @@ describe(`categories-basic.3br.d   TyTCATSBASIC`, () => {\n     await owen.categoryDialog.fillInFields({ name: WastelandCategoryNameOnlyStaffCreate });\n     await owen.categoryDialog.setNotUnlisted();\n     await owen.categoryDialog.openSecurityTab();\n-    await owen.categoryDialog.securityTab.setMayCreate(c.EveryoneId, false);\n+    await owen.categoryDialog.securityTab.setMay('CreatePages', c.EveryoneId, false);\n     await owen.categoryDialog.submit();\n   });\n \n@@ -204,13 +205,22 @@ describe(`categories-basic.3br.d   TyTCATSBASIC`, () => {\n     await maria.assertPageTitleMatches(\"Mons Only Staff Create Topic\");\n   });\n \n-  it(\"Owen sets the category to staff only\", async () => {\n+  it(\"Owen edits the category\", async () => {\n     await owen.go2(idAddress.origin + '/latest/wasteland');\n     await owen.forumButtons.clickEditCategory();\n+  });\n+\n+  it(\"... sets it to staff only\", async () => {\n     await owen.categoryDialog.fillInFields({ name: WastelandCategoryNameStaffOnly });\n     await owen.categoryDialog.openSecurityTab();\n-    await owen.categoryDialog.securityTab.setMayReply(c.EveryoneId, false);\n-    await owen.categoryDialog.securityTab.setMaySee(c.EveryoneId, false);\n+    await owen.categoryDialog.securityTab.setMay('PostReplies', c.EveryoneId, false);\n+    await owen.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, false);\n+  });\n+  it(\"... but forgets to un-tick See-Own\", async () => {\n+    assert.not(await owen.categoryDialog.securityTab.getMay('SeeOthers', c.EveryoneId));\n+    assert.that(await owen.categoryDialog.securityTab.getMay('SeeOwn', c.EveryoneId));\n+  });\n+  it(\"... saves\", async () => {\n     await owen.categoryDialog.submit();\n   });\n \n@@ -224,6 +234,59 @@ describe(`categories-basic.3br.d   TyTCATSBASIC`, () => {\n     await owen.assertNthTextMatches('.e2eF_T', 3, /Wasteland Staff Only/);\n   });\n \n+\n+  it(\"Maria still sees the category in the category list\", async () => {\n+    await maria.go2(idAddress.origin + '/categories');\n+    await maria.waitForVisible(DefaultCategorySelector);\n+    await maria.waitForMyDataAdded();\n+    // Uncategorized, and Wasteland\n+    await maria.forumCategoryList.waitForNumCategoriesVisible(2);\n+    assert.that(await maria.isVisible(WastelandCategorySelector));  // (410RKE5)\n+  });\n+\n+  it(\"... but only her own topic  TyTSEEOWN\", async () => {\n+    let titles = await maria.forumCategoryList.getTopicTitles(1);\n+    assert.deepEq(titles, []); // no topics in Uncategorized, nr 1\n+    titles = await maria.forumCategoryList.getTopicTitles(2);\n+    assert.deepEq(titles, [mariasFirstTopicTitle]);\n+  });\n+\n+  it(\"... can access the cateogry\", async () => {\n+    await maria.forumCategoryList.openCategory(WastelandCategoryNameStaffOnly);\n+  });\n+\n+  it(\"... sees only her own topic  TyTSEEOWN\", async () => {\n+    await maria.forumTopicList.waitForTopics();\n+    await maria.forumTopicList.assertTopicTitlesAreAndOrder([mariasFirstTopicTitle]);\n+  });\n+\n+  it(\"... can't post new topics\", async () => {\n+    await maria.forumButtons.assertNoCreateTopicButton();\n+  });\n+\n+  it(\"... cannot access Mons page\", async () => {\n+    await maria.go2(urlToMonsPage);\n+    await maria.assertNotFoundError();\n+  });\n+\n+  it(\"... but can access her own  TyTSEEOWN\", async () => {\n+    await maria.go2(mariasPageUrl);\n+    await maria.assertPageTitleMatches(mariasFirstTopicTitle);\n+  });\n+\n+\n+\n+  it(\"Owen edits the category again\", async () => {\n+    await owen.forumButtons.clickEditCategory();\n+  });\n+\n+  it(\"... removes See-Own for Everyone  TyTSEEOWN\", async () => {\n+    await owen.categoryDialog.openSecurityTab();\n+    await owen.categoryDialog.securityTab.setMay('SeeOwn', c.EveryoneId, false);\n+    await owen.categoryDialog.submit();\n+  });\n+\n+\n   it(\"Mons sees it and can create a 2nd topic\", async () => {\n     await mons.go2(idAddress.origin + '/categories');\n     await mons.waitForVisible(DefaultCategorySelector);\n@@ -244,7 +307,12 @@ describe(`categories-basic.3br.d   TyTCATSBASIC`, () => {\n   it(\"... and cannot access pages in it\", async () => {\n     await maria.go2(urlToMonsPage);\n     await maria.assertNotFoundError();\n-    await maria.go2(urlToMonsPage3);\n+    await maria.go2(urlToMonsPage3); // note: '...3'\n+    await maria.assertNotFoundError();\n+  });\n+\n+  it(\"... not her own page either, any mor\", async () => {\n+    await maria.go2(mariasPageUrl);\n     await maria.assertNotFoundError();\n   });\n "
    },
    {
      "sha": "f82464efe14a07d9ab8bcffa97dc6a451479f250",
      "filename": "tests/e2e-wdio7/specs/category-perms.2br.d.e2e.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fcategory-perms.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fcategory-perms.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcategory-perms.2br.d.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -147,6 +147,8 @@ describe(`category-perms.2br.d  TyTE2ECATPREMS01`, () => {\n       it(ps.stepsTitle, async () => {});\n     }\n \n+    // TESTS_MISSING: Go to Maria's profile page, verify topics are/not listed?\n+\n     if (numTopicsVisible >= 1) {\n       it(`Memah can see ${numTopicsVisible} topic(s) in the topic list`, async () => {\n         await memah_brB.go2('/')\n@@ -405,6 +407,7 @@ describe(`category-perms.2br.d  TyTE2ECATPREMS01`, () => {\n     await owen_brA.forumButtons.clickEditCategory();\n     await owen_brA.categoryDialog.openSecurityTab();\n     await owen_brA.categoryDialog.securityTab.addGroup(c.EveryoneFullName);\n+    await owen_brA.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, true);\n     await owen_brA.categoryDialog.submit();\n   });\n "
    },
    {
      "sha": "d4b9ce0a84fd449d444c4f0fdf819be45d60b0e5",
      "filename": "tests/e2e-wdio7/specs/embcom.sort-order-op-likes-btn-txt.2br.ec.e2e.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sort-order-op-likes-btn-txt.2br.ec.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sort-order-op-likes-btn-txt.2br.ec.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sort-order-op-likes-btn-txt.2br.ec.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -246,6 +246,9 @@ describe(\"embcom.sort-order-op-likes-btn-txt.2br.ec  TyTEMBSORTLIKETXT\", () => {\n     // 2024-06-18: Happened again: \"Waiting for visible:  .s_MB_Name\" repeated until timeout.\n     // 2024-06-20: Again\n     // await mariasBrowser.metabar.waitUntilLoggedIn(); // not needed, let's skip?\n+    // 2024-09-09: Again. Annoying.\n+    await mariasBrowser.pause(2000); // let's just do this, for now. There're more\n+                                     // important things to do.\n     await mariasBrowser.complex.replyToEmbeddingBlogPost(\"Hi I am here\");\n   });\n "
    },
    {
      "sha": "c1a002013e4ec318b8ffd6454e74440cf8a8368b",
      "filename": "tests/e2e-wdio7/specs/embcom.sso.redir-page.2br.ec.e2e.ts",
      "status": "added",
      "additions": 301,
      "deletions": 0,
      "changes": 301,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.redir-page.2br.ec.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.redir-page.2br.ec.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.redir-page.2br.ec.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -0,0 +1,301 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import * as fs from 'fs';\n+import server from '../utils/server';\n+import * as u from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import { die } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+\n+// Dupl code  [embcom_sso_e2e_dupl]\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+\n+let selina_brB: TyE2eTestBrowser;\n+const selinaExtUser: ExternalUser = {\n+  ssoId: 'selina-soid',\n+  username: 'selina_un',\n+  fullName: 'Selina Full Name',\n+  primaryEmailAddress: 'e2e-test-selina@x.co',\n+  isEmailAddressVerified: true,\n+}\n+\n+const selinaAutnhMsg = {\n+  //sub: 'ject',\n+  //exp: '2021-05-01T00:00:00Z',\n+  //iat: '2021-05-01T00:00:00Z',\n+  data: {\n+    //ifExists: 'DoNothing', // or 'Update'\n+    //lookupKey: 'soid:selina_sign_on_id',\n+    user: {\n+      ...selinaExtUser,\n+    },\n+  },\n+};\n+\n+const localHostname = 'comments-for-e2e-test-embsth';\n+const embeddingOrigin = 'http://e2e-test-embsth.localhost:8080';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+const ssoUrl =\n+    `http://localhost:8080/${u.ssoLoginPageSlug}` +\n+        '?redir2Origin=\\${returnToOrigin}' +\n+        '&redir2RelUrl=\\${returnToPathQueryHash}' +\n+        '&isTalkyard=true';\n+\n+const ssoUrlVarsReplaced = (embeddingOrigin: St, relativeUrl: St): St =>\n+    `http://localhost:8080/${u.ssoLoginPageSlug}` +\n+        `?redir2Origin=${encodeURIComponent('check_if_legit!' + embeddingOrigin)}` +\n+        `&redir2RelUrl=${encodeURIComponent(relativeUrl)}` +\n+        '&isTalkyard=true';\n+\n+const ssoLogoutUrl =\n+    `http://localhost:8080/${u.ssoLogoutRedirPageSlug}`;\n+\n+let pasetoV2LocalSecret = '';\n+\n+\n+\n+describe(`embcom.sso.redir-page.2br.ec.e2e.ts  TyTE2EEMBSSO3`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Some E2E Test\",\n+      members: ['memah', 'maria', 'michael']\n+    });\n+\n+    builder.getSite().meta.localHostname = localHostname;\n+    builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n+\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      numFirstPostsToReview: 0,\n+      enableApi: true,\n+    });\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    selina_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen logs in to admin area, ... `, async () => {\n+    await owen_brA.adminArea.settings.login.goHere(site.origin, { loginAs: owen });\n+  });\n+\n+  it(`... and types an SSO login URL`, async () => {\n+    await owen_brA.scrollToBottom(); // just speeds the test up slightly\n+    await owen_brA.adminArea.settings.login.typeSsoUrl(ssoUrl);\n+  });\n+\n+  it(`... and enables SSO`, async () => {\n+    await owen_brA.adminArea.settings.login.setEnableSso(true);\n+  });\n+\n+  it(`... types a Logout Redir URL`, async () => {\n+    await owen_brA.adminArea.settings.login.setSsoLogoutUrl(ssoLogoutUrl);\n+  });\n+\n+  it(`... generates a PASETO v2.local shared secret`, async () => {\n+    await owen_brA.adminArea.settings.login.generatePasetoV2LocalSecret();\n+  });\n+\n+  it(`... copies the secret`, async () => {\n+    pasetoV2LocalSecret = await owen_brA.adminArea.settings.login.copyPasetoV2LocalSecret();\n+  });\n+\n+  it(`... and saves the new settings`, async () => {\n+    await owen_brA.adminArea.settings.clickSaveAll();\n+  });\n+\n+  it(`There are external SSO login pages`, async () => {\n+    u.createSingleSignOnPagesInHtmlDir();\n+  });\n+\n+\n+  // ----- Encrypt tokens\n+\n+  // E.g. \"v2.local.kBENRnu2p2.....JKJZB9Lw\"\n+  let selinasToken: St | U;\n+\n+  it(`The external server generates a login token for Selina`, async () => {\n+    selinasToken = u.encryptLocalPasetoV2Token(pasetoV2LocalSecret, selinaAutnhMsg);\n+  });\n+\n+\n+  // ----- Create test website\n+\n+  it(`There's a website with embedding pages`, async () => {\n+    const dir = 'target';\n+    const twoComtsPageId = 'twoComtsPageId';\n+    fs.writeFileSync(`${dir}/so-as-selina.html`, makeHtml('aaa', '#050', twoComtsPageId,\n+                                                                              selinasToken));\n+    fs.writeFileSync(`${dir}/so-no-token.html`, makeHtml('bbb', '#520', twoComtsPageId));\n+    function makeHtml(pageName: St, bgColor: St, discussionId: St, authnToken?: St): St {\n+      return u.makeEmbeddedCommentsHtml({\n+              pageName, discussionId, authnToken, localHostname, bgColor,\n+              ssoHow: 'RedirPage' });\n+    }\n+  });\n+\n+\n+  // ----- SSO, good token\n+\n+  it(`Selina opens embedding page aaa`, async () => {\n+    await selina_brB.go2(embeddingOrigin + '/so-as-selina.html');\n+  });\n+\n+  it(`... can reply directly, auto logged in via PASETO token`, async () => {\n+    await selina_brB.complex.replyToEmbeddingBlogPost(\"I got logged_in_via_a_PASETO_token\");\n+    await selina_brB.complex.replyToPostNr(c.FirstReplyNr,\n+        \"I'm writing that I wrote that I write that I'm writing that I'm writing\", {\n+        isEmbedded: true });\n+  });\n+\n+  /* But there is one, since there's a logout url, `ssoLogoutUrl`.\n+  it(`There's no logout button — not included, when auto logged in via token,\n+          then, the embedd*ing* page manages login/out\n+          by including/excluding a PASETO token   UNIMPL   [hide_authn_btns]`, async () => {\n+    assert.not(await selina_brB.metabar.isLogoutBtnDisplayed());\n+  }); */\n+  it(`There's no login button  (already logged in)`, async () => {\n+    assert.not(await selina_brB.metabar.isLoginButtonDisplayed());\n+  });\n+\n+\n+  // ----- No token\n+\n+  it(`Selina goes to a page without any token`, async () => {\n+    await selina_brB.go2(embeddingOrigin + '/so-no-token.html');\n+    await selina_brB.switchToEmbeddedCommentsIrame();\n+    await selina_brB.metabar.waitForDisplayed();\n+  });\n+\n+  it(`... she's NOT logged in, because auto token sessions are NOT remembered\n+        across page reloads`, async () => {\n+    await selina_brB.complex.waitForNotLoggedInInEmbeddedCommentsIframe({\n+          willBeLoginBtn: false });\n+    await selina_brB.switchToEmbeddedCommentsIrame();\n+    assert.not(await selina_brB.metabar.isMyUsernameVisible());\n+  });\n+\n+  it(`... there's a Login button`, async () => {\n+    assert.ok(await selina_brB.metabar.isLoginButtonDisplayed());\n+  });\n+  it(`... no logout button`, async () => {\n+    assert.not(await selina_brB.metabar.isLogoutBtnDisplayed());\n+  });\n+\n+\n+  // ----- Combining emb SSO with SSO redirect   TyTEMBSSOREDIR\n+\n+  // Clicking any action button, will redirect the whole embedding page to the SSO\n+  // server.\n+\n+  let embeddingNoTokenRelUrl = '';\n+\n+  it(`Selina clicks Log In`, async () => {\n+    await selina_brB.switchToAnyParentFrame();\n+    embeddingNoTokenRelUrl = await selina_brB.urlPathQueryHash();\n+    const actualEmbOrigin = await selina_brB.origin();\n+    assert.eq(actualEmbOrigin, embeddingOrigin); // ttt\n+\n+    await selina_brB.rememberCurrentUrl();\n+    await selina_brB.switchToEmbeddedCommentsIrame();\n+\n+    // We're in the comments iframe.  When we click Log In, it sends a 'ssoRedir'\n+    // message to Talkyard's script in the embedd*ing* page, which does\n+    // `location.assign(..)` to the SSO page.\n+    await selina_brB.metabar.clickLogin();\n+  });\n+\n+  it(`... gets to the dummy external login page, at localhost:8080`, async () => {\n+    await selina_brB.waitForNewUrl();\n+  });\n+\n+  it(`... with the correct url parameters`, async () => {\n+    const urlNow = await selina_brB.getUrl();\n+    assert.eq(urlNow, ssoUrlVarsReplaced(embeddingOrigin, embeddingNoTokenRelUrl));\n+\n+    // The url is now: (plus line breaks)\n+    //  http://localhost:8080/sso-dummy-login.html\n+    //    ?redir2Origin=check_if_legit!http%3A%2F%2Fe2e-test-embsth.localhost%3A8080\n+    //    &redir2RelUrl=%2Fso-no-token.html\n+    //    &isTalkyard=true\n+  });\n+\n+  for (let doWhat of ['Reply', 'Like', 'Disagree', 'Flag']) {\n+\n+    it(`Selina goes back to the blog`, async () => {\n+      await selina_brB.go2(embeddingOrigin + '/so-no-token.html');\n+      await selina_brB.waitForExist('iframe#ed-embedded-editor');\n+      await selina_brB.rememberCurrentUrl();\n+      await selina_brB.switchToEmbeddedCommentsIrame();\n+    });\n+\n+    switch (doWhat) {\n+      case 'Reply':\n+        it(`... clicks Reply to comment nr 2`, async () => {\n+          // This'll redirect to the SSO page, like above, but with '#comment-2' in\n+          // the return-to relative url (since we're trying to reply to that comment).\n+          await selina_brB.topic.clickReplyToPostNr(c.SecondReplyNr); // (#comment-2 == #post-3)\n+        });\n+        break;\n+      case 'Like':\n+        it(`... like-votes comment nr 2`, async () => {\n+          // This also redirects to the SSO page, with '...#comment-2' in the return-to url.\n+          await selina_brB.topic.clickLikeVote(c.SecondReplyNr);\n+        });\n+        break;\n+      case 'Disagree':\n+        it(`... disagrees with comment nr 2`, async () => {\n+          await selina_brB.topic.toggleDisagreeVote(c.SecondReplyNr, {\n+                  waitForModalGone: false }); // we'll get redirected instead\n+        });\n+        break;\n+      case 'Flag':\n+        it(`... flags comment nr 2`, async () => {\n+          await selina_brB.topic.clickFlagPost(c.SecondReplyNr, { needToClickMore: false });\n+        });\n+        break;\n+      default:\n+        die('TyE407SMJT24');\n+    }\n+\n+    it(`... gets to the external login page, now with return-to '...#comment-2'`, async () => {\n+      await selina_brB.waitForNewUrl();\n+      const urlNow = await selina_brB.getUrl();\n+      assert.eq(urlNow, ssoUrlVarsReplaced(\n+            embeddingOrigin, embeddingNoTokenRelUrl + '#comment-2'));\n+\n+      // The url is now: (plus line breaks)\n+      //  http://localhost:8080/sso-dummy-login.html\n+      //    ?redir2Origin=check_if_legit!http%3A%2F%2Fe2e-test-embsth.localhost%3A8080\n+      //    &redir2RelUrl=%2Fso-no-token.html%23comment-2\n+      //    &isTalkyard=true\n+    });\n+  }\n+\n+});\n+"
    },
    {
      "sha": "aecf8a7a96039995453078eed219dae3e42bf4c0",
      "filename": "tests/e2e-wdio7/specs/embcom.sso.token-direct-w-logout-url.2br.ec.e2e.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.token-direct-w-logout-url.2br.ec.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.token-direct-w-logout-url.2br.ec.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.sso.token-direct-w-logout-url.2br.ec.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -45,6 +45,7 @@ const selinaAutnhMsg = {\n   },\n };\n \n+// Inited later. [_init_data_user]\n let selinaWithMariasEmailAuthnMsg = _.cloneDeep(selinaAutnhMsg);\n \n \n@@ -119,13 +120,15 @@ describe(`embcom.sso.token-direct-w-logout-url.2br.ec  TyTE2EEMBSSO1`, () => {\n       // Exclude Maria's name, so we'll know that 'maria_ssoid' really gets used\n       // to look up the correct user, and we'll se username \"Maria\" although\n       // not specified here.  [.lookup_by_ssoid]\n+      // username: ... – no, skip\n+      // fullName: ... — skip\n       ssoId: 'maria_ssoid',\n       isEmailAddressVerified: true,\n       primaryEmailAddress: maria.emailAddress,\n     };\n \n     selina_brB = brB;\n-    selinaWithMariasEmailAuthnMsg.data.user = {\n+    selinaWithMariasEmailAuthnMsg.data.user = {  // [_init_data_user]\n       ...mariaExtUser,\n       ssoId: selinaExtUser.ssoId,\n     };"
    },
    {
      "sha": "b67be744126f83bf6989dea69d40134f28e7bce2",
      "filename": "tests/e2e-wdio7/specs/frag-action-compose-topic.2br.f.wip.ts",
      "status": "added",
      "additions": 130,
      "deletions": 0,
      "changes": 130,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Ffrag-action-compose-topic.2br.f.wip.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Ffrag-action-compose-topic.2br.f.wip.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Ffrag-action-compose-topic.2br.f.wip.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -0,0 +1,130 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let merry_brB: TyE2eTestBrowser;\n+const merrysEmailAdr = 'merry@ex.co';\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+\n+\n+// Not finished! [_Work_in_progress].\n+//\n+describe(`frag-action-compose-topic.2br.f  TyTFRAGCOMPTO`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addCatABForum({\n+      title: \"Some E2E Test\",\n+      categoryAExtId: 'cat_a_ext_id',\n+      members: ['maria', 'michael']\n+    });\n+\n+    builder.settings({\n+      requireVerifiedEmail: false,\n+      mayComposeBeforeSignup: true,\n+    });\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    merry_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen arrives, logs in`, async () => {\n+    await owen_brA.go2(site.origin);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+\n+  // [_Work_in_progress]:\n+  //\n+  // What's supposed to happen, if one doesn't have an account yet, and one\n+  // follows a  #composeTopic  link?  Should the signup dialog open?\n+  // But is that really good UX, popping up a dialog the first thing,\n+  // the person maybe not understanding why — they probably didn't look closely\n+  // at the URL.\n+  //\n+  // But if mayComposeBeforeSignup enabled, then, can open the editor instead,\n+  // that's less confusing? & works, but when submitting, and signing up,\n+  // seems the draft is lost :-(\n+  //\n+  it(`Merry arrives — via a #composeTopic link somehow`, async () => {\n+    //  http://e2e-test-cid-0-0-now-5232.localhost/latest#composeTopic&categoryId=4&topicType=12\n+await merry_brB.d();\n+    await merry_brB.go2(site.origin +\n+            `#composeTopic&categoryId=${forum.categories.catB.id\n+                }&topicType=${c.TestPageRole.Discussion}`);\n+  });\n+\n+  it(`... The editor opens; Merry types a title`, async () => {\n+await merry_brB.d();\n+    await merry_brB.editor.editTitle(\"I'm Merry_Not_Zorro\")\n+    await merry_brB.editor.editText(\"I have the 949 most popular name, wow. \" +\n+        \"Zorro is no. 10 019, 2023.\")\n+  });\n+\n+  it(`...  clicks Save`, async () => {\n+    // But don't wait for new page, don't: `saveWaitForNewPage()`.\n+    await merry_brB.editor.clickSave();\n+  });\n+\n+  \n+  it(`... the Create Account dialog opens; Merry fills it in and submits`, async () => {\n+    await merry_brB.rememberCurrentUrl();\n+    await merry_brB.loginDialog.createPasswordAccount({\n+              username: 'merry',\n+              emailAddress: merrysEmailAdr,\n+              password: 'public-p4ssw0rd',\n+            });\n+  });\n+\n+  /*\n+  it(`... the new topic appears`, async () => {\n+    // Ooops, need verify email. Once done, draft gone — one's account didn't yet exist.\n+\n+    await merry_brB.waitForNewUrl();\n+    await merry_brB.assertPageTitleMatches(/Merry_Not_Zorro/);\n+  });\n+\n+  let verifLink: St;\n+\n+  it(`... gets an email, clicks the verification link`, async () => {\n+    verifLink = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+            site.id, merrysEmailAdr);\n+  });\n+\n+  it(`... clicks it`, async () => {\n+    await merry_brB.go2(verifLink);\n+  });\n+  it(`... gets logged in`, async () => {\n+    await merry_brB.hasVerifiedSignupEmailPage.clickContinue();\n+  });\n+  it(`... sees her username menu`, async () => {\n+    await merry_brB.topbar.assertMyUsernameMatches('merry');\n+  }); */\n+\n+});\n+"
    },
    {
      "sha": "4b36402a5ce1a522e11ab8fef65bef4e631eb98b",
      "filename": "tests/e2e-wdio7/specs/perms-see-own.2br.f.e2e.ts",
      "status": "added",
      "additions": 1146,
      "deletions": 0,
      "changes": 1146,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fperms-see-own.2br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fspecs%2Fperms-see-own.2br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fperms-see-own.2br.f.e2e.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -0,0 +1,1146 @@\n+/// <reference path=\"../test-types.ts\"/>\n+// CR_MISSING\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import { j2s, logBoring, logMessage } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+interface Page { id: St, url: St, title: St };\n+type PagesByCatSlug = { [slug: St]: Page };\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+const mariasPagesByCatSlug: { [slug: St]: Page } = {};\n+\n+let michael: Member;\n+let michael_brA: TyE2eTestBrowser;\n+const michaelsPagesByCatSlug: { [slug: St]: Page } = {};\n+\n+let kittensUrl = '/help-from-kittens'; // origin added below\n+\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+\n+let mallory: Member;\n+\n+let supportGroup: GroupInclDetails;\n+\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;  // or TwoPagesTestForum or EmptyTestForum or LargeTestForum\n+\n+// CatA seeOwn: true, seeOthers: false\n+// CatAC inherits:  If can't see base cat, then, can't see sub cat. [see_sub_cat]\n+//\n+// CatB seeOthers: true\n+// CatBC seeOwn: true  (but seeOthers: false)\n+// CatBC2 seethers: true\n+\n+const catA   = { slug: 'category-a', name: \"CatA\" };\n+const catAC  = { slug: 'cat-ac', name: \"CatAC\", id: 6 }; // Owen alters\n+\n+const catB   = { slug: 'cat-b', name: \"CatB\" };\n+const catBC  = { slug: \"catbc\", name: \"CatBC\" }; // Owen creates\n+const catBC2 = {  slug: 'cat-bc2', name: \"CatBC2\", id: 7 };\n+\n+// We'll post here last —> last email from here.\n+const lastCat = catBC2;\n+\n+// Owen won't make these cats only-see-own. (CatAC will be see-own because CatA will be.)\n+const pubCats = [catB, lastCat];\n+\n+// Owen makes CatA and CatBC only-see-own. CatAC becomes only-see-own too,\n+// since is a child of CatA. HMM\n+const privCats = [catA, catAC, catBC];\n+\n+// Let's use this category order, when posting topics and checking for notf emails.\n+const allCats = [catA, catAC, catB, catBC, lastCat];\n+\n+\n+/// Maria and Michael post topics in See-own (only) categories, can't see\n+/// each others topics (in those categories, but can see, in others).\n+///\n+/// Memah, in the Customer Support group, sees all categories.\n+////\n+describe(`perms-see-own.2br.f  TyTPERMSEEOWN`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addCatABForum({\n+      title: \"See Own E2e Test\",\n+      members: ['mons', 'maja', 'memah', 'maria', 'michael', 'mallory'],\n+    });\n+\n+    builder.settings({\n+      // So no \"Sth for you to review\" emails sent.\n+      numFirstPostsToApprove: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+\n+    // Search engine\n+    // To have the search engine index the imported site: (by default, test sites\n+    // aren't indexed)\n+    builder.getSite().isTestSiteIndexAnyway = true;\n+\n+    // (This also test imports a group and member. TyTIMPGROUP)\n+    supportGroup = builder.addGroup('support_group');\n+    builder.addGroupPat(supportGroup, forum.members.memah);\n+\n+    builder.addCategoryWithAboutPage(forum.forumPage, {\n+      id: catAC.id,\n+      parentCategoryId: forum.categories.catA.id,\n+      name: catAC.name,\n+      slug: catAC.slug,\n+      aboutPageText: \"About Cat AC\",\n+    });\n+    builder.addDefaultCatPerms(forum.siteData, catAC.id, catAC.id * 100);\n+\n+    // CatBC: Owen _creates_category_BC, below.\n+\n+    builder.addCategoryWithAboutPage(forum.forumPage, {\n+      id: catBC2.id,\n+      parentCategoryId: forum.categories.catB.id,\n+      name: \"CatBC2\", slug: 'cat-bc2',\n+      aboutPageText: \"About Cat BC2\",\n+    });\n+    builder.addDefaultCatPerms(forum.siteData, catBC2.id, catBC2.id * 100);\n+\n+    builder.addPage({\n+      id: 'kittensPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: 'help-from-kittens',\n+      role: c.TestPageRole.Discussion,\n+      title: \"Ask the Kittens\",\n+      body: \"Kittens are cute, kittens are clever. Kittens will help you, forever.\",\n+      categoryId: forum.categories.catB.id, // that's a publ cat\n+      authorId: forum.members.memah.id,\n+    });\n+\n+    { // ttt\n+      const cats = builder.getSite().categories.filter((c: TestCategory) =>\n+                  // Exclude staff and root cat\n+                  !!c.parentId && c.slug.indexOf(\"staff\") === -1);\n+      // CatA, CatAC, CatB, CatBC2 — but CatBC not yet created.\n+      assert.eq(cats.length, 4);\n+    }\n+\n+    // Subscribe Memah, Maria, Michael & Mallory to notifications about new topics, anywhere.\n+    // We'll verify that Maria and Michael won't get notified about each other's\n+    // only see-own topics.  But that Memah, in the @support_group, will get notified.\n+    // And Mallory only about public topics.\n+    const mbrs = forum.members;\n+    for (let memberId of [mbrs.maria.id, mbrs.michael.id, mbrs.memah.id, mbrs.mallory.id]) {\n+      builder.getSite().pageNotfPrefs.push({\n+        memberId,\n+        notfLevel: c.TestPageNotfLevel.EveryPost,\n+        wholeSite: true,\n+      });\n+    }\n+\n+    // Let's mute Owen, so fewer emails to keep track of.\n+    builder.getSite().pageNotfPrefs.push({\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    });\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    michael = forum.members.michael;\n+    michael_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    mallory = forum.members.mallory;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    kittensUrl = site.origin + kittensUrl;\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.go2(site.origin);\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+\n+  it(`Owen too, goes to cat A`, async () => {\n+    await owen_brA.go2(site.origin + '/latest/category-a');\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(`... edits cat A permissions`, async () => {\n+    await owen_brA.forumButtons.clickEditCategory();\n+    await owen_brA.categoryDialog.openSecurityTab();\n+  });\n+\n+  it(`... makes Everyone see only their own topics`, async () => {\n+    // This leaves 'SeeOwn' set to true:\n+    await owen_brA.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, false);\n+    // ... right?:\n+    await owen_brA.categoryDialog.securityTab.assertMay('SeeOwn', c.EveryoneId, true);\n+  });\n+\n+  addAddSupportGroupSteps(\"CatA\");\n+\n+  function addAddSupportGroupSteps(toWhichCat: St) {\n+    it(`Owen adds the @support_group to ${toWhichCat}`, async () => {\n+      await owen_brA.categoryDialog.securityTab.addGroup(supportGroup);\n+    });\n+\n+    it(`... it starts with zero additional permissions  TyTNEWPERMSEMPTY`, async () => {\n+      // A newly added group gets no new permissions — it just inherits Everyone's permissions.\n+      // So, permissions are either may-not, or inherited: granted, but input checbox disabled\n+      // (since one would edit the Everyone group to revoke the permission).\n+      const assertMay = owen_brA.categoryDialog.securityTab.assertMay;\n+      await assertMay('EditOthersTopics',       supportGroup.id, false);\n+      await assertMay('EditOthersReplies',      supportGroup.id, false);\n+      await assertMay('EditWikis',              supportGroup.id, false);\n+      await assertMay('EditOwn',                supportGroup.id, true, 'ShouldBeDisabled');\n+      await assertMay('DeleteOthersTopics',     supportGroup.id, false);\n+      await assertMay('DeleteOthersReplies',    supportGroup.id, false);\n+      await assertMay('CreatePages',            supportGroup.id, true, 'ShouldBeDisabled');\n+      await assertMay('PostReplies',            supportGroup.id, true, 'ShouldBeDisabled');\n+      await assertMay('SeeOthers',              supportGroup.id, false);\n+      await assertMay('SeeOwn',                 supportGroup.id, true, 'ShouldBeDisabled');\n+    });\n+\n+    it(`Owen lets the @support_group members see all posts  (in ${toWhichCat})`, async () => {\n+      await owen_brA.categoryDialog.securityTab.setMay('SeeOthers', supportGroup.id, true);\n+    });\n+  }\n+\n+  it(`Staff may see everyone's posts (by default, unchanged)`, async () => {\n+    assert.that(await owen_brA.categoryDialog.securityTab.getMay('SeeOthers', c.StaffId));\n+  });\n+\n+  it(`Owen saves the changes to CatA`, async () => {\n+    await owen_brA.categoryDialog.submit();\n+  });\n+\n+  it(`Owen _creates_category_BC, child of B`, async () => {\n+    await owen_brA.forumCategoryList.goHere();\n+    await owen_brA.forumButtons.clickCreateCategory();\n+    await owen_brA.categoryDialog.fillInFields({ name: 'CatBC' });\n+    await owen_brA.categoryDialog.setParentCategory('CatB');\n+  });\n+\n+  it(`... edits CatBC's permissions ...`, async () => {\n+    await owen_brA.categoryDialog.openSecurityTab();\n+  });\n+\n+  it(`... the Everyone group can post and edit own  TyTDEFCATPERMS`, async () => {\n+    const assertMay = owen_brA.categoryDialog.securityTab.assertMay;\n+    await assertMay('EditOthersTopics',       c.EveryoneId, false);\n+    await assertMay('EditOthersReplies',      c.EveryoneId, false);\n+    await assertMay('EditWikis',              c.EveryoneId, false);\n+    await assertMay('EditOwn',                c.EveryoneId, true);\n+    await assertMay('DeleteOthersTopics',     c.EveryoneId, false);\n+    await assertMay('DeleteOthersReplies',    c.EveryoneId, false);\n+    await assertMay('CreatePages',            c.EveryoneId, true);\n+    await assertMay('PostReplies',            c.EveryoneId, true);\n+    await assertMay('SeeOthers',              c.EveryoneId, true);\n+    await assertMay('SeeOwn',                 c.EveryoneId, true);\n+  });\n+\n+  it(`... Full Members inherit Everyone's perms, and can edit wikis  TyTDEFCATPERMS`, async () => {\n+    const assertMay = owen_brA.categoryDialog.securityTab.assertMay;\n+    await assertMay('EditOthersTopics',       c.FullMembersId, false);\n+    await assertMay('EditOthersReplies',      c.FullMembersId, false);\n+    await assertMay('EditWikis',              c.FullMembersId, true);   // <——  wikis\n+    // Intherited from Everyone, so can't be set to false, therefore true & disabled.\n+    await assertMay('EditOwn',                c.FullMembersId, true, 'ShouldBeDisabled');\n+    await assertMay('DeleteOthersTopics',     c.FullMembersId, false);\n+    await assertMay('DeleteOthersReplies',    c.FullMembersId, false);\n+    await assertMay('CreatePages',            c.FullMembersId, true, 'ShouldBeDisabled');\n+    await assertMay('PostReplies',            c.FullMembersId, true, 'ShouldBeDisabled');\n+    await assertMay('SeeOthers',              c.FullMembersId, true, 'ShouldBeDisabled');\n+    await assertMay('SeeOwn',                 c.FullMembersId, true, 'ShouldBeDisabled');\n+  });\n+\n+  it(`... Staff inherits, and can edit and delete others' posts  TyTSTAFDEFPERMS`, async () => {\n+    const assertMay = owen_brA.categoryDialog.securityTab.assertMay;\n+    await assertMay('EditOthersTopics',       c.StaffId, true);\n+    await assertMay('EditOthersReplies',      c.StaffId, true);\n+    // Later, when/if [mods_are_core_membs], EditWikis would be true & disabled — since\n+    // inherited from Full Members.\n+    await assertMay('EditWikis',              c.StaffId, true);\n+    await assertMay('EditOwn',                c.StaffId, true, 'ShouldBeDisabled');\n+    await assertMay('DeleteOthersTopics',     c.StaffId, true);\n+    await assertMay('DeleteOthersReplies',    c.StaffId, true);\n+    await assertMay('CreatePages',            c.StaffId, true, 'ShouldBeDisabled');\n+    await assertMay('PostReplies',            c.StaffId, true, 'ShouldBeDisabled');\n+    await assertMay('SeeOthers',              c.StaffId, true, 'ShouldBeDisabled');\n+    await assertMay('SeeOwn',                 c.StaffId, true, 'ShouldBeDisabled');\n+  });\n+\n+\n+  it(`... makes Everyone see only their own topics`, async () => {\n+    await owen_brA.categoryDialog.securityTab.setMay('SeeOthers', c.EveryoneId, false);\n+  });\n+  it(`... Full Members then also cannot`, async () => {\n+    await owen_brA.categoryDialog.securityTab.assertMay('SeeOthers', c.FullMembersId, false);\n+  });\n+  it(`... but Staff still can — their group has all perms granted to it,\n+            rather than just inheriting from Everyone  TyTSTAFDEFPERMS`, async () => {\n+    await owen_brA.categoryDialog.securityTab.assertMay('SeeOthers', c.StaffId, true);\n+  });\n+\n+  addAddSupportGroupSteps(\"CatBC\");\n+\n+  it(`Owen saves this new category CatBC`, async () => {\n+    await owen_brA.categoryDialog.submit();\n+  });\n+\n+\n+\n+  postTopicInEachCat(() => maria_brB, \"Maria\", mariasPagesByCatSlug);\n+\n+\n+  it(`Memah gets notified of each of Maria's new topics`, async () => {\n+    const emails: EmailSubjectBody[] = await server.waitGetLastEmailsSentTo(\n+                                site.id, memah.emailAddress, allCats.length);\n+    //logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, allCats, maria, \"Maria\");\n+  });\n+\n+  it(`Michael gets notified of only Maria's others-can-see topics`, async () => {\n+    const emails = await server.waitGetLastEmailsSentTo(\n+                        site.id, michael.emailAddress, pubCats.length);\n+    //logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, pubCats, maria, \"Maria\");\n+  });\n+\n+  it(`... Mallory too`, async () => {\n+    const emails = await server.waitGetLastEmailsSentTo(\n+                        site.id, mallory.emailAddress, pubCats.length);\n+    //logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, pubCats, maria, \"Maria\");\n+  });\n+\n+  it(`No other emails get sent`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, allCats.length + pubCats.length * 2, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  it(`Owen leaves, Michael arrives`, async () => {\n+    await owen_brA.topbar.clickLogout();\n+    await michael_brA.complex.loginWithPasswordViaTopbar(michael);\n+  });\n+\n+\n+  postTopicInEachCat(() => michael_brA, \"Michael\", michaelsPagesByCatSlug);\n+\n+\n+  it(`Memah gets notified of each of Michael's new topics`, async () => {\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+                                site.id, memah.emailAddress, allCats.length * 2);\n+    // Skip the one's about Maria's topics.\n+    const emails = allEmails.slice(allCats.length);\n+    logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, allCats, michael, \"Michael\");\n+  });\n+\n+  it(`Maria gets notified of Michael's others-can-see public topics`, async () => {\n+    const emails = await server.waitGetLastEmailsSentTo(\n+                              site.id, maria.emailAddress, pubCats.length);\n+    logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, pubCats, michael, \"Michael\");\n+  });\n+\n+  it(`... Mallory too`, async () => {\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+                        site.id, mallory.emailAddress, pubCats.length);\n+    // Skip the one's about Maria's topics.\n+    const emails = allEmails.slice(pubCats.length);\n+    logMessage(j2s(emails));\n+    checkNewTopicEmails(emails, pubCats, michael, \"Michael\");\n+  });\n+\n+  it(`No other emails get sent`, async () => {\n+    // At most 15 per address hmm,  [R2AB067]\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, (allCats.length + pubCats.length * 2) * 2, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+  // [_dir_access_test]\n+  it(`Maria can't access Michael's private topics`, async () => {\n+    for (let cat of privCats) {\n+      const page = michaelsPagesByCatSlug[cat.slug];\n+      await maria_brB.go2(page.url);\n+      await maria_brB.assertNotFoundError({ whyNot: 'MayNotSeeCat' });\n+    }\n+  });\n+  it(`... but can access Michael's public topics`, async () => {\n+    for (let cat of pubCats) {\n+      const page = michaelsPagesByCatSlug[cat.slug];\n+      await maria_brB.go2(page.url);\n+      await maria_brB.assertPageTitleMatches(`Michael_in_${cat.name}`);\n+    }\n+  });\n+\n+\n+  it(`Maria leaves, Memah arrives`, async () => {\n+    await maria_brB.topbar.clickLogout();\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+  // Memah replies to Maria [_dir_access_test]\n+  //\n+  const memahToMariaCats = [catAC, catBC, catBC2]; // only catBC2 is public, others are see-own\n+  addReplyInEachCatStep(() => memah_brB, \"Memah\", \"Maria\", memahToMariaCats,\n+        mariasPagesByCatSlug);\n+\n+  it(`Maria gets notified`, async () => {\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+                              site.id, maria.emailAddress, pubCats.length + memahToMariaCats.length);\n+    assert.eq(allEmails.length,\n+          pubCats.length + // Michael's publ posts\n+                memahToMariaCats.length, // Memah's replies to Maria\n+          `allEmails to Maria: ${j2s(allEmails)}`);\n+\n+    const emails = allEmails.slice(-memahToMariaCats.length);\n+    checkReplyEmails(emails, memahToMariaCats, memah, \"Memah\", \"Maria\");\n+  });\n+\n+  it(`Michael too — but only about CatBC2, which is public`, async () => {\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+                              site.id, michael.emailAddress, pubCats.length + 1);\n+    assert.eq(allEmails.length,  pubCats.length + 1, // Maria's publ posts + Memah's publ reply\n+          `allEmails to Michael: ${j2s(allEmails)}`);\n+    const emails = allEmails.slice(-1);\n+    checkReplyEmails(emails, [catBC2], memah, \"Memah\", \"Maria\");\n+  });\n+\n+  it(`... and Mallory — only about CatBC2`, async () => {\n+    const numExpected = pubCats.length * 2 + 1; // Maria's & Michel's publ + Memah's publ reply\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+            site.id, mallory.emailAddress, numExpected);\n+    assert.eq(allEmails.length, numExpected, `allEmails to Mallory: ${j2s(allEmails)}`);\n+    const emails = allEmails.slice(-1);\n+    checkReplyEmails(emails, [catBC2], memah, \"Memah\", \"Maria\");\n+  });\n+\n+  let numTotalEmailsExpected: Nr;\n+\n+  it(`No other emails get sent`, async () => {\n+    // At most 15 per address hmm,  [R2AB067]\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    numTotalEmailsExpected =\n+            // Initial posts: Notfs to Memah, and Maria/Michael & Mallory. By Michael & Memah.\n+            (allCats.length + pubCats.length * 2) * 2 +\n+                memahToMariaCats.length + // Memah's replies to Maria\n+                1 + 1; // Memah's publ reply —> notf to Michael & Mallory\n+    assert.eq(num, numTotalEmailsExpected,\n+           `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+\n+  // Memah replies to Michael [_dir_access_test]\n+  const memahToMichaelCats = [catA, catBC, catB]; // only CatB is public\n+  addReplyInEachCatStep(() => memah_brB, \"Memah\", \"Michael\", memahToMichaelCats,\n+        michaelsPagesByCatSlug);\n+\n+  it(`Michael gets notified`, async () => {\n+    numTotalEmailsExpected += memahToMariaCats.length;\n+    const numEmailsExpected =\n+            pubCats.length +  // Maria's publ posts\n+            1 +  // Memah's publ reply to Maria\n+            memahToMichaelCats.length;  // Memah's replies to Michael\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+            site.id, michael.emailAddress, numEmailsExpected);\n+    assert.eq(allEmails.length,  numEmailsExpected, `allEmails to Michael: ${j2s(allEmails)}`);\n+    const emails = allEmails.slice(memahToMichaelCats.length);\n+    checkReplyEmails(emails, memahToMichaelCats, memah, \"Memah\", \"Michael\");\n+  });\n+\n+  it(`... Maria too, about the CatB reply only (publ visible)`, async () => {\n+    numTotalEmailsExpected += 1;\n+    const numEmailsExpected =\n+          pubCats.length + // Michael's publ posts\n+          memahToMariaCats.length + // Memah's replies to Maria\n+          1; // Memah's publ reply to Michael\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+            site.id, maria.emailAddress, numEmailsExpected);\n+    assert.eq(allEmails.length, numEmailsExpected, `allEmails to Maria: ${j2s(allEmails)}`);\n+    const emails = allEmails.slice(-1);\n+    checkReplyEmails(emails, [catB], memah, \"Memah\", \"Michael\");\n+  });\n+\n+  it(`... and Mallory, about CatB only`, async () => {\n+    numTotalEmailsExpected += 1;\n+    const numExpected = pubCats.length * 2 + 2; // Maria's & Michel's publ + Memah's 2 publ reply\n+    const allEmails = await server.waitGetLastEmailsSentTo(\n+            site.id, mallory.emailAddress, numExpected);\n+    assert.eq(allEmails.length, numExpected, `allEmails to Mallory: ${j2s(allEmails)}`);\n+    const emails = allEmails.slice(-1);\n+    checkReplyEmails(emails, [catB], memah, \"Memah\", \"Michael\");\n+  });\n+\n+  it(`No other emails get sent`, async () => {\n+    // At most 15 per address hmm,  [R2AB067]\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numTotalEmailsExpected, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+  const itIsImportant = `It is important to help Michael`;\n+\n+  it(`Michael replies to Memah's reply to him in private CatBC  [_dir_access_test]`, async () => {\n+    await michael_brA.go2(michaelsPagesByCatSlug[catBC.slug].url);\n+    await michael_brA.complex.replyToOrigPost(itIsImportant);\n+  });\n+\n+  it(`Memah gets notified about Michael's reply to her`, async () => {\n+    numTotalEmailsExpected += 1;\n+    await server.waitUntilLastEmailMatches(site.id, memah.emailAddress, [itIsImportant]);\n+  });\n+\n+  it(`No other emails get sent`, async () => {\n+    const { num, addrsByTimeAsc } = await server.getEmailsSentToAddrs(site.id);\n+    assert.eq(num, numTotalEmailsExpected, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+\n+  it(`Michael goes to the topic list`, async () => {\n+    await michael_brA.forumTopicList.goHere();\n+  });\n+  it(`... sees his own topics, and Memah's public topics`, async () => {\n+    await michael_brA.forumTopicList.assertTopicTitlesAreAndOrder([\n+            'Michael_in_CatBC',   // bumped by Michael's reply to Memah\n+            'Michael_in_CatB',    // bumped by Memah's reply to Michael\n+            'Michael_in_CatA',    //          – '' –\n+            'Maria_in_CatBC2',    // bumped by Memah's reply to Maria\n+            'Michael_in_CatBC2',  // Michael's last not-bumped topic\n+            'Michael_in_CatAC',   // FOK w Category AC\n+            'Maria_in_CatB',      // Maria's first publ topic\n+            'Ask the Kittens',\n+            ]);\n+  });\n+\n+  // Break out fn: _see_public ?\n+  it(`Michael goes to Maria's posts page`, async () => {\n+    await michael_brA.userProfilePage.activity.posts.goHere(maria.username);\n+    await michael_brA.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees only Maria's two public posts`, async () => {\n+    await michael_brA.userProfilePage.activity.posts.assertExactly(pubCats.length);\n+    // Maria_in_CatBC2\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+    // \n+    // Maria_in_CatB\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+  });\n+  it(`... goes to Maria's topics page`, async () => {\n+    await michael_brA.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    //Maria_in_CatBC2\n+    //Maria_in_CatB\n+  });\n+  it(`... sees only Maria's two public topics`, async () => {\n+    await michael_brA.userProfilePage.activity.topics.assertExactly(pubCats.length);\n+  });\n+\n+  // Break out fn: _see_all ?\n+  it(`Michael goes to his own posts page`, async () => {\n+    await michael_brA.userProfilePage.activity.posts.goHere(michael.username);\n+    await michael_brA.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees all his posts, incl Michael's reply to Memah`, async () => {\n+    await michael_brA.userProfilePage.activity.posts.assertExactly(allCats.length + 1);\n+    // Michael_in_CatBC\n+    // Michael @michael11 hours ago\n+    // It is important to help Michael\n+    // \n+    // Michael_in_CatBC2\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatBC\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatB\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatAC\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatA\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+  });\n+  it(`... goes to his topics page`, async () => {\n+    await michael_brA.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+  });\n+  it(`... sees all his topics`, async () => {\n+    await michael_brA.userProfilePage.activity.topics.assertExactly(allCats.length);\n+    // Michael_in_CatBC2\n+    // Michael_in_CatBC\n+    // Michael_in_CatB\n+    // Michael_in_CatAC\n+    // Michael_in_CatA\n+  });\n+\n+  it(`Michael goes to Memah's posts page`, async () => {\n+    await michael_brA.userProfilePage.activity.posts.goHere(memah.username);\n+    await michael_brA.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees Memah's \"shall_help_\" replies: 3 to Michael, 1 publ to Maria`, async () => {\n+    // And the Kittens page too.\n+    await michael_brA.userProfilePage.activity.posts.assertExactly(3 + 1 + 1);\n+    // Michael_in_CatB\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_cat-b\n+    //\n+    // Michael_in_CatBC\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_catbc\n+    //\n+    // Michael_in_CatA\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_category-a\n+    //\n+    // Maria_in_CatBC2\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Maria_in_cat-bc2\n+    //\n+    // Ask the Kittens\n+    // Kittens are cute, kittens are clever. Kittens will help you, forever.\n+  });\n+  it(`... goes to _Memahs_topics_page, only the Kittens topic there`, async () => {\n+    await michael_brA.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await michael_brA.userProfilePage.activity.topics.assertExactly(1);\n+  });\n+\n+  addSearchTestSteps(\"Michael\", () => michael_brA, {\n+        seeMichaelsPriv: true, seeMariasPriv: false });\n+\n+\n+\n+  it(`Memah also goes to the topic list`, async () => {\n+    await memah_brB.forumTopicList.goHere();\n+  });\n+  it(`... sees both Michael's and Memah's`, async () => {\n+    await memah_brB.forumTopicList.assertTopicTitlesAreAndOrder([\n+            'Michael_in_CatBC',     // bumped by Michael's reply to Memah\n+            'Michael_in_CatB',      // bumped by Memah's reply to Michael\n+            'Michael_in_CatA',      //           – '' –\n+            'Maria_in_CatBC2',      // bumped by Memah's reply to Maria\n+            'Maria_in_CatBC',       //           – '' –\n+            'Maria_in_CatAC',       //           – '' –\n+            'Michael_in_CatBC2',    // Michael's last not-bumped topic\n+            'Michael_in_CatAC',\n+            'Maria_in_CatB',\n+            'Maria_in_CatA',        // Maria's first topic\n+            'Ask the Kittens',\n+            ]);\n+  });\n+\n+  // Break out fn: _see_all ?\n+  it(`Memah goes to Maria's posts page`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.goHere(maria.username);\n+    await memah_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees all Maria's posts`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.assertExactly(allCats.length);\n+    // Maria_in_CatBC2\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+    // \n+    // Maria_in_CatBC\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+    // \n+    // Maria_in_CatB\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+    // \n+    // Maria_in_CatAC\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+    // \n+    // Maria_in_CatA\n+    // By Maria @maria11 hours ago\n+    // Hi Maria_wants_help\n+  });\n+  it(`... goes to Maria's topics page`, async () => {\n+    await memah_brB.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    // Maria_in_CatBC2\n+    // Maria_in_CatBC\n+    // Maria_in_CatB\n+    // Maria_in_CatAC\n+    // Maria_in_CatA\n+  });\n+  it(`... sees all Maria's topics`, async () => {\n+    await memah_brB.userProfilePage.activity.topics.assertExactly(allCats.length);\n+  });\n+\n+  // Break out fn: _see_all ?\n+  it(`Memah goes to Michael's posts page`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.goHere(michael.username);\n+    await memah_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees all Michal's posts, incl Michael's reply to Memah`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.assertExactly(allCats.length + 1);\n+    // Michael_in_CatBC\n+    // Michael @michael11 hours ago\n+    // It is important to help Michael\n+    // \n+    // Michael_in_CatBC2\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatBC\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatB\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatAC\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+    // \n+    // Michael_in_CatA\n+    // By Michael @michael11 hours ago\n+    // Hi Michael_wants_help\n+  });\n+  it(`... goes to Michal's topics page`, async () => {\n+    await memah_brB.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+  });\n+  it(`... sees all Michal's topics`, async () => {\n+    await memah_brB.userProfilePage.activity.topics.assertExactly(allCats.length);\n+    // Michael_in_CatBC2\n+    // Michael_in_CatBC\n+    // Michael_in_CatB\n+    // Michael_in_CatAC\n+    // Michael_in_CatA\n+  });\n+\n+  it(`Memah goes to her own posts page`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.goHere(memah.username);\n+    await memah_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees all her replies to Maria and Michael + the Kittens page`, async () => {\n+    await memah_brB.userProfilePage.activity.posts.assertExactly(\n+            memahToMichaelCats.length + memahToMariaCats.length + 1);\n+    // Michael_in_CatB\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_cat-b\n+    // \n+    // Michael_in_CatBC\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_catbc\n+    // \n+    // Michael_in_CatA\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Michael_in_category-a\n+    // \n+    // Maria_in_CatBC2\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Maria_in_cat-bc2\n+    // \n+    // Maria_in_CatBC\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Maria_in_catbc\n+    // \n+    // Maria_in_CatAC\n+    // Memah @memah11 hours ago\n+    // I, Memah, shall_help_Maria_in_cat-ac\n+    // \n+    // Ask the Kittens\n+  });\n+  it(`... _Memahs_topics_page shows her Kittens topic only`, async () => {\n+    await memah_brB.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await memah_brB.userProfilePage.activity.topics.assertExactly(1);\n+  });\n+\n+  addSearchTestSteps(\"Memah\", () => memah_brB, { seeMichaelsPriv: true, seeMariasPriv: true });\n+\n+\n+  const publBacklinkPagesById = {};\n+  const mariasPrivBacklinkPagesById = {};\n+  const michaelsPrivBacklinkPagesById = {};\n+\n+  it(`Init expected backlinks`, async () => {\n+    for (let cat of pubCats) {\n+      const mariasTopic: Page = mariasPagesByCatSlug[cat.slug];\n+      publBacklinkPagesById[mariasTopic.id] = mariasTopic;\n+\n+      const michaelsTopic: Page = michaelsPagesByCatSlug[cat.slug];\n+      publBacklinkPagesById[michaelsTopic.id] = michaelsTopic;\n+    }\n+    assert.eq(_.size(publBacklinkPagesById), 4); // ttt: CatB, CatBC2 for Maria + Michael\n+\n+    for (let cat of privCats) {\n+      const mariasTopic: Page = mariasPagesByCatSlug[cat.slug];\n+      mariasPrivBacklinkPagesById[mariasTopic.id] = mariasTopic;\n+\n+      const michaelsTopic: Page = michaelsPagesByCatSlug[cat.slug];\n+      michaelsPrivBacklinkPagesById[michaelsTopic.id] = michaelsTopic;\n+    }\n+    assert.eq(_.size(mariasPrivBacklinkPagesById), 3);   // ttt: CatA, CatAC, CatBC\n+    assert.eq(_.size(michaelsPrivBacklinkPagesById), 3); // ttt\n+  });\n+\n+\n+  it(`Memah goes to the Kittens page`, async () => {\n+    await memah_brB.go2(kittensUrl);\n+  });\n+  it(`... sees 10 backlinks: Maria's 5, Michael's 5  (incl both publ and priv)`, async () => {\n+    const backlinks = await memah_brB.topic.backlinks.getBacklinkUrlsAndTitles();\n+    checkBacklinks(backlinks, {\n+          ...mariasPrivBacklinkPagesById,\n+          ...michaelsPrivBacklinkPagesById,\n+          ...publBacklinkPagesById,\n+        });\n+  });\n+\n+\n+  // Some _preview_links.\n+  let pubPageUrl: St;\n+  let privPageUrl: St;\n+  let privSubCatPageUrl: St;\n+\n+  it(`Memah adds links to a public page, and two of Michael's only-see-own pages`, async () => {\n+    pubPageUrl = michaelsPagesByCatSlug[catB.slug].url;  // B is public\n+    privPageUrl = michaelsPagesByCatSlug[catA.slug].url;  // A is see-own\n+    privSubCatPageUrl = michaelsPagesByCatSlug[catAC.slug].url; // AC is see-own, since sub cat\n+\n+    await memah_brB.complex.editPageBody(`\\n\\n` +\n+            `${privPageUrl}\\n\\n` +\n+            `${pubPageUrl}\\n\\n` +  // _Memah_2_Michael_link\n+            `${privSubCatPageUrl}\\n\\n`,\n+            { append: true, textAfterMatches: /https?:\\/\\/e2e-test-.*\\/michaelincata/ });\n+  });\n+\n+  addCheckLinkPreviewsToMichaelSteps(() => memah_brB, \"Memah\");\n+  \n+  function addCheckLinkPreviewsToMichaelSteps(brX: () => TyE2eTestBrowser, who: St) {\n+    it(`${who} looks at preview links:  There're 2 broken link previews ...  TEST MAP`, async () => {\n+      const sel = utils.makePreviewBrokenSelector('InternalLink');\n+      await brX().topic.waitForExistsInPost(c.BodyNr, sel, { howMany: 2 });\n+    });\n+    it(`... the one to Michael's CatA page — it's access restricted`, async () => {\n+      const sel = utils.makePreviewBrokenSelector('InternalLink', {\n+            url: privPageUrl,\n+            errCode: 'TyMLNPG404-M0SEEPG-PO404-TyEM0SEE_-TyMMBYSEE_-EdMMSEEADDCATPERM-ABX94WN_',\n+            });\n+      await brX().topic.waitForExistsInPost(c.BodyNr, sel, { howMany: 1 });\n+    });\n+    it(`... the one to CatAC, also access restricted`, async () => {\n+      const sel = utils.makePreviewBrokenSelector('InternalLink', {\n+            url: privSubCatPageUrl,\n+            errCode: 'TyMLNPG404-M0SEEPG-PO404-TyEM0SEE_-TyMMBYSEE_-EdMMSEEADDCATPERM-ABX94WN_',\n+            });\n+      await brX().topic.waitForExistsInPost(c.BodyNr, sel, { howMany: 1 });\n+    });\n+    it(`... but the link preview to Michael's page in CatB works — CatB is public`, async () => {\n+      await brX().topic.waitForExistsInPost(c.BodyNr,\n+            utils.makePreviewOkSelector('InternalLink', { url: pubPageUrl }));\n+    });\n+  }\n+\n+\n+  it(`Memah leaves, Maria is back`, async () => {\n+    await memah_brB.topbar.clickLogout();\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+  it(`Maria goes to the topic list`, async () => {\n+    await maria_brB.forumTopicList.goHere();\n+  });\n+  it(`... sees her own topics`, async () => {\n+    await maria_brB.forumTopicList.assertTopicTitlesAreAndOrder([\n+            'Ask the Kittens',      // bumped by Memah's orig post edits\n+            'Michael_in_CatB',      // bumped by Memah's reply to Michael\n+            'Maria_in_CatBC2',      // bumped by Memah's reply to Maria\n+            'Maria_in_CatBC',       //           – '' –\n+            'Maria_in_CatAC',       //           – '' –\n+            'Michael_in_CatBC2',    // Michael's last not-bumped topic\n+            'Maria_in_CatB',\n+            'Maria_in_CatA',        // Maria's first topic\n+            ]);\n+  });\n+\n+  // Break out fn: _see_all ?\n+  it(`Maria goes to her own posts page`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.goHere(maria.username);\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees all posts`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(allCats.length);\n+  });\n+  it(`... goes to her topics page`, async () => {\n+    await maria_brB.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+  });\n+  it(`... sees all topics`, async () => {\n+    await maria_brB.userProfilePage.activity.topics.assertExactly(allCats.length);\n+  });\n+\n+  // Break out fn: _see_public ?\n+  it(`Maria goes to Michael's posts page`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.goHere(michael.username);\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees his public posts`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(pubCats.length);\n+  });\n+  it(`... goes to his topics page`, async () => {\n+    await maria_brB.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+  });\n+  it(`... sees Michael's public topics`, async () => {\n+    await maria_brB.userProfilePage.activity.topics.assertExactly(pubCats.length);\n+  });\n+\n+  it(`Maria goes to Memah's posts page`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.goHere(memah.username);\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible();\n+  });\n+  it(`... sees Memah's \"shall_help_\" replies: 3 to Maria, 1 publ to Michael, + Kittens page`,\n+          async () => {\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(3 + 1 + 1);\n+  });\n+  // Skip — Michael did already.\n+  // it(`... goes to _Memahs_topics_page, sees the Kittens topic`, ...\n+\n+  addSearchTestSteps(\"Maria\", () => maria_brB, { seeMichaelsPriv: false, seeMariasPriv: true,\n+        // Memah added a link from the Kittens page. [_Memah_2_Michael_link]\n+        linkFromKittensToMichaelsPage: true});\n+\n+\n+  it(`Maria goes to the Kittens page`, async () => {\n+    await maria_brB.go2(kittensUrl);\n+  });\n+  it(`... sees 7 backlinks: Maria's 5, Michael's 2 public  TyTLNSEEOWN`, async () => {\n+    // [_links_from_see_own]\n+    const backlinks = await maria_brB.topic.backlinks.getBacklinkUrlsAndTitles();\n+    checkBacklinks(backlinks, { ...mariasPrivBacklinkPagesById, ...publBacklinkPagesById });\n+  });\n+\n+  addCheckLinkPreviewsToMichaelSteps(() => maria_brB, \"Maria\");\n+\n+  // More _preview_links.\n+  let mariasPubPageUrl: St;\n+  let mariasPrivPageUrl: St;\n+\n+  it(`Maria adds a comment with a link to a public page, and a see-own page of hers`, async () => {\n+    mariasPubPageUrl = mariasPagesByCatSlug[catBC2.slug].url;  // BC2 is public\n+    mariasPrivPageUrl = mariasPagesByCatSlug[catBC.slug].url;  // BC is see-own\n+\n+    await maria_brB.complex.replyToOrigPost(\n+            `${mariasPrivPageUrl}\\n\\n` +\n+            `${mariasPubPageUrl}\\n\\n`);\n+  });\n+\n+  addCheckLinkPreviewsToMariaSteps(() => maria_brB, \"Maria\");\n+  \n+  function addCheckLinkPreviewsToMariaSteps(brX: () => TyE2eTestBrowser, who: St) {\n+    it(`${who} looks at preview links to Maria's pages:\n+            There're 1 broken link preview  TyTLNSEEOWN`, async () => {\n+      // [_links_to_see_own]\n+      const sel = utils.makePreviewBrokenSelector('InternalLink');\n+      await brX().topic.waitForExistsInPost(c.FirstReplyNr, sel, { howMany: 1 });\n+    });\n+    it(`... the one to Maria's CatBC page — it's access restricted`, async () => {\n+      const sel = utils.makePreviewBrokenSelector('InternalLink', {\n+            url: mariasPrivPageUrl,\n+            errCode: 'TyMLNPG404-M0SEEPG-PO404-TyEM0SEE_-TyMMBYSEE_-EdMMSEEADDCATPERM-ABX94WN_',\n+            });\n+      await brX().topic.waitForExistsInPost(c.FirstReplyNr, sel, { howMany: 1 });\n+    });\n+    it(`... but the link preview to Maria's page in CatBC2 works — CatBC2 is public`, async () => {\n+      await brX().topic.waitForExistsInPost(c.FirstReplyNr,\n+            utils.makePreviewOkSelector('InternalLink', { url: mariasPubPageUrl }));\n+    });\n+  }\n+\n+  it(`Michael goes to the Kittens page`, async () => {\n+    await michael_brA.go2(kittensUrl);\n+  });\n+  it(`... sees 7 backlinks: Michael's 5, Maria's 2 public`, async () => {\n+    const backlinks = await michael_brA.topic.backlinks.getBacklinkUrlsAndTitles();\n+    checkBacklinks(backlinks, { ...michaelsPrivBacklinkPagesById, ...publBacklinkPagesById });\n+  });\n+\n+  addCheckLinkPreviewsToMichaelSteps(() => michael_brA, \"Michael\");\n+\n+  addCheckLinkPreviewsToMariaSteps(() => michael_brA, \"Michael\");\n+\n+\n+  function postTopicInEachCat(brX: () => TyE2eTestBrowser, who: St,\n+          pagesByCatSlug: PagesByCatSlug) {\n+    it(`${who} posts a topic in each category`, async () => {\n+      for (let cat of allCats) {\n+        logBoring(`${who} posts in ${cat.name} ...`)\n+        const title = `${who}_in_${cat.name}`;\n+        const bodyTxt = `Hi ${who}_wants_help`;\n+        await brX().go2('/latest/' + cat.slug);\n+        await brX().complex.createAndSaveTopic({\n+                title,\n+                bodyMatchAfter: bodyTxt,\n+                body: bodyTxt +\n+                    // So we can check if links from only-see-own pages are left out,\n+                    // when showing incoming links. [_links_from_see_own] [_links_to_see_own]\n+                    // (This expands to a link preview — everyone can see the kittens page.)\n+                    '\\n\\n' + kittensUrl,\n+                });\n+        const url = await brX().getUrl();\n+        const id = await brX().getPageId();\n+        pagesByCatSlug[cat.slug] = { id, url, title };\n+      }\n+    });\n+  }\n+\n+  function checkNewTopicEmails(emails, cats, aboutWho: Member, aboutWhoName: St) {\n+    for (let i = 0; i < emails.length; ++i) {\n+      logBoring(`Checking new topic email at ix ${i}`)\n+      const email = emails[i];\n+      const cat = cats[i];\n+      const bodyHtml: St = email.bodyHtmlText;\n+      assert.includes(bodyHtml, `${aboutWhoName}_in_${cat.name}`);\n+      assert.includes(bodyHtml, `${aboutWhoName}_wants_help`);\n+      assert.includes(bodyHtml, `>${aboutWho.username}</`); // between <i>..</i> tags\n+    }\n+  }\n+\n+  function addReplyInEachCatStep(brX: () => TyE2eTestBrowser, who: St, toWho: St,\n+        cats, pagesByCatSlug: PagesByCatSlug) {\n+    it(`${who} replies to ${toWho} in cats ${j2s(cats)}`, async () => {\n+      for (let cat of cats) {\n+        const topic = pagesByCatSlug[cat.slug];\n+        logBoring(`${who} posts in ${cat.name}, page ${topic?.title} ...`)\n+        await brX().go2(topic.url);\n+        await brX().complex.replyToOrigPost(`I, ${who}, shall_help_${toWho}_in_${cat.slug}`);\n+      }\n+    });\n+  }\n+\n+  function checkReplyEmails(emails, cats, who: Member, whoName: St, toWho: St) {\n+    for (let i = 0; i < emails.length; ++i) {\n+      logBoring(`Checking reply email at ix ${i}`)\n+      const email = emails[i];\n+      const cat = cats[i];\n+      const bodyHtml: St = email.bodyHtmlText;\n+      assert.includes(bodyHtml, `I, ${whoName}, shall_help_${toWho}_in_${cat.slug}`);\n+      assert.includes(bodyHtml, `>${who.username}</`); // between <i>..</i> tags\n+    }\n+  }\n+  \n+\n+  function addSearchTestSteps(who: St, brX: () => TyE2eTestBrowser,\n+          ps: { seeMichaelsPriv: Bo, seeMariasPriv: Bo, linkFromKittensToMichaelsPage?: Bo }) {\n+    const michaelPrivTopicTitle = 'Michael_in_CatBC';\n+    const michaelPrivComt = `\"${itIsImportant}\"`;\n+    const michaelPublTopicTitle = 'Michael_in_CatB';\n+    const mariaPrivTopicTitle = 'Maria_in_CatAC';\n+    const mariaPublTopicTitle = 'Maria_in_CatBC2';\n+\n+    it(`${who} searches & finds Michael's private topic: ${ps.seeMichaelsPriv}`, async () => {\n+      await brX().topbar.searchFor(michaelPrivTopicTitle);\n+      if (ps.seeMichaelsPriv) {\n+        await brX().searchResultsPage.waitForAssertNumPagesFound(michaelPrivTopicTitle, 1);\n+      }\n+      else {\n+        await brX().searchResultsPage.assertPhraseNotFound(michaelPrivTopicTitle);\n+      }\n+    });\n+\n+    it(`... finds Michael's public topic`, async () => {\n+      await brX().searchResultsPage.searchForUntilNumPagesFound(michaelPublTopicTitle,\n+            1 + (ps.linkFromKittensToMichaelsPage ? 1 : 0));\n+    });\n+\n+    it(`... finds Maria's private topic: ${ps.seeMariasPriv}`, async () => {\n+      if (ps.seeMariasPriv) {\n+        await brX().searchResultsPage.searchForUntilNumPagesFound(mariaPrivTopicTitle, 1);\n+      }\n+      else {\n+        await brX().searchResultsPage.searchForWaitForResults(mariaPrivTopicTitle);\n+        await brX().searchResultsPage.assertPhraseNotFound(mariaPrivTopicTitle);\n+      }\n+    });\n+\n+    it(`... finds Maria's public topic`, async () => {\n+      await brX().searchResultsPage.searchForUntilNumPagesFound(mariaPublTopicTitle, 1);\n+    });\n+\n+    /*\n+    it(`... finds Memah's reply to Maria: ${ps.seeMariasPriv} `, async () => {\n+      await michael_brA.searchResultsPage.searchForUntilNumPagesFound(__, 1);\n+    });\n+\n+    it(`... finds Memah's reply to Michael: ${ps.seeMichaelsPriv}`, async () => {\n+      await michael_brA.searchResultsPage.searchForUntilNumPagesFound(__, 1);\n+    }); */\n+  }\n+\n+  function checkBacklinks(backlinks: { url: St, title: St }[],\n+          pagesById: { [pageId: PageId]: Page }) {\n+\n+    // `backlinks` looks like:\n+    // [{\"url\":\"/-12\",\"title\":\"Michael_in_CatBC2\"}, {\"url\":\"/-5\",\"title\":\"Maria_in_CatB\"}, ...]\n+    //\n+    // `pagesById` looks like:   {\n+    //   \"3\": { \"id\": \"3\", \"url\": \"http://e2e-test-cid-0-0-now-7487.localhost/-3/mariaincata\",\n+    //         \"title\":\"Maria_in_CatA\" },\n+    //   \"4\": { \"id\": \"4\", \"url\": \"http://e2e-test-cid-0-0-now-7487.localhost/-4/mariaincatac\",\n+    //         \"title\": \"Maria_in_CatAC\" },\n+    //   ...\n+    //  }\n+\n+    const tooManyLinks = [];\n+    const linksLeft = { ...pagesById };\n+\n+    for (let link of backlinks) {\n+      // Extract page id from url. All urls are like:  \"/-pageId\" right now (Sept 2024)\n+      // but let's use a regex that works with complete urls.  [ty_url_fmt]\n+      // 'https://ex.com/-4/ab/cd?q=p'.replace(/(https?:\\/\\/[^/]+)?\\/-([^/]+).*/, '$2')\n+      const pageId = link.url.replace(/(https?:\\/\\/[^/]+)?\\/-([^/]+).*/, '$2');\n+      const page = pagesById[pageId];\n+      if (!page) {\n+        tooManyLinks.push(link);\n+      }\n+      delete linksLeft[pageId];\n+    }\n+\n+    assert.that(!tooManyLinks.length && _.isEmpty(linksLeft),\n+        `Backlinks error — too many links, and/or links missing:\\n`+\n+        `    tooManyLinks: ${j2s(tooManyLinks)}\\n` +\n+        `    linksLeft: ${j2s(linksLeft)}\\n` +\n+        `    backlinks: ${j2s(backlinks)}\\n` +\n+        `    pagesById: ${j2s(pagesById)}`);\n+  }\n+\n+});\n+"
    },
    {
      "sha": "2488ec0266ed4aec87aa4a3097f18131634dd29a",
      "filename": "tests/e2e-wdio7/test-types.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Ftest-types.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Ftest-types.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Ftest-types.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -77,3 +77,15 @@ export interface E2eVote {\n }\n \n \n+export type PermName =\n+        'EditOthersTopics' |\n+        'EditOthersReplies' |\n+        'EditWikis' |\n+        'EditOwn' |\n+        'DeleteOthersTopics' |\n+        'DeleteOthersReplies' |\n+        'CreatePages' |\n+        'PostReplies' |\n+        'SeeOthers' |\n+        'SeeOwn';\n+"
    },
    {
      "sha": "8cca9f6abd10b217e23e9c4a834a790cee6f4e36",
      "filename": "tests/e2e-wdio7/test-types2.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Ftest-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Ftest-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Ftest-types2.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -184,7 +184,7 @@ interface SiteData2 {   // [3SD5PB7]\n   webhooks: any[]; // Webhook[];\n   guests: TestGuest[];\n   groups: GroupInclDetails[];\n-  groupPps: any[];\n+  groupPps: TestGroupPat[];\n   members: Member[];\n   ppStats: any[];\n   ppVisitStats: any[];\n@@ -305,6 +305,20 @@ interface TestMyself {\n   fullName?: St;\n }\n \n+\n+// See: SitePatchParser.readGroupParticipantOrBad()\n+//\n+interface TestGroupPat {\n+  groupId: PatId\n+  ppId: PatId\n+  // For now:\n+  isMember: true\n+  isManager: false\n+  isAdder: false\n+  isBouncer: false\n+}\n+\n+\n interface Member {   // see also TestGuest below\n   id: number;\n   ssoId?: St;"
    },
    {
      "sha": "867cc914887b5cdda164773cf23b4c98e9e7ae95",
      "filename": "tests/e2e-wdio7/utils/make.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fmake.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fmake.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fmake.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -51,6 +51,7 @@ function makeEmptySite(ps: { okInitEarly?: boolean } = {}): SiteData {\n     companyFullName: \"E2E Test Org\",\n   },\n   groups: [],\n+  groupPps: [],\n   members: [],\n   identities: [],\n   guests: [],\n@@ -60,6 +61,7 @@ function makeEmptySite(ps: { okInitEarly?: boolean } = {}): SiteData {\n   categories: [],\n   tags: [],\n   types: [],\n+  pageNotfPrefs: [],\n   pages: [],\n   pagePaths: [],\n   posts: [],\n@@ -365,6 +367,19 @@ export function minion(ps: { oneWordNameAndNumber: string,\n }\n \n \n+export function group(username: string, template: Partial<GroupInclDetails> = {})\n+        : GroupInclDetails {\n+    return {\n+      id: getAndBumpNextUserId(),\n+      isGroup: true,\n+      username,\n+      fullName: undefined,\n+      createdAtMs: DefaultCreatedAtMs,\n+      ...template,\n+    };\n+}\n+\n+\n export function loadTestGoose(ps: { nr: Nr, trustLevel: Nr }): Member {\n   const trustLevel = ps.trustLevel || c.TestTrustLevel.Basic;\n   let levelName;"
    },
    {
      "sha": "2d4f35cea4446053e3f718386bc71724adaae090",
      "filename": "tests/e2e-wdio7/utils/server.ts",
      "status": "modified",
      "additions": 24,
      "deletions": 4,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fserver.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fserver.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fserver.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -396,24 +396,43 @@ function addAdminNotice(ps: { siteId: SiteId, noticeId: Nr }) {\n \n \n async function getLastEmailSenTo(siteId: SiteId, email: St, dontWait?: 'DontWait')\n-        : Pr<EmailSubjectBody | Nl> {\n+        : Pr<EmailSubjectBody | N> {\n+  const res = await waitGetLastEmailsSentTo(siteId, email, -1, dontWait);\n+  return res ? res[0] : null;\n+}\n+\n+\n+/// (atLeast = -1 returns only the very last email, even if there are more. Legacy.)\n+///\n+async function waitGetLastEmailsSentTo(siteId: SiteId, email: St, atLeast: Nr, dontWait?: 'DontWait')\n+        : Pr<EmailSubjectBody[]> {\n   if (!email || email.indexOf('@') <= 0 || email.indexOf('@') >= email.length - 2) {\n     die(`Not an email address: '${email}'  [TyE4MQEJ9MS2]`);\n   }\n   for (let attemptNr = 1; attemptNr <= settings.waitforTimeout / 500; ++attemptNr) {\n     const response = await getOrDie(settings.mainSiteOrigin + '/-/last-e2e-test-email?sentTo=' + email +\n       '&siteId=' + siteId);\n     const lastEmails = JSON.parse(response.body).emails;\n-    if (lastEmails.length) {\n+\n+    if (atLeast >= 1) {\n+      if (lastEmails.length >= atLeast) {\n+        logMessage(`${email} has gotten ${lastEmails.length} emails, >= ${atLeast}.`);\n+        return lastEmails;\n+      }\n+      logMessage(`${email} has gotten ${lastEmails.length} emails, waiting for >= ${atLeast}`);\n+    }\n+    else if (atLeast !== -1) die('TyE306EVCHF');\n+    else if (lastEmails.length) {\n       logMessage(`${email} has gotten ${lastEmails.length} emails:`);\n       for (let i = 0; i < lastEmails.length; ++i) {\n         const oneLastEmail = lastEmails[i];\n         logMessage(`  subject: \"${oneLastEmail.subject}\" ` + (\n             i === lastEmails.length - 1 ? \" <— the last one, returning it\" : ''));\n       }\n       const lastEmail = lastEmails[lastEmails.length - 1];\n-      return lastEmail;\n+      return [lastEmail];\n     }\n+\n     // Internal functions can specify 'DontWait', if they pause themselves.\n     if (dontWait !== 'DontWait') {\n       await wdioBrowserA.pause(500 - 100); // 100 ms for a request, perhaps?\n@@ -879,7 +898,8 @@ export default {\n   deleteRedisKey,\n   getTestCounters,\n   addAdminNotice,\n-  getLastEmailSenTo,  // RENAME waitGetLastEmailsSentTo\n+  getLastEmailSenTo,  // RENAME waitGetLastEmailSentTo\n+  waitGetLastEmailsSentTo,\n   countLastEmailsSentTo,\n   getEmailsSentToAddrs,\n   sendIncomingEmailWebhook,"
    },
    {
      "sha": "08a110af0bf8ca76c6ea00d5e6448ea939343e40",
      "filename": "tests/e2e-wdio7/utils/site-builder.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fsite-builder.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fsite-builder.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fsite-builder.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -221,7 +221,7 @@ export function buildSite(site: SiteData | U = undefined, ps: { okInitEarly?: bo\n     },\n \n \n-    addMmember: function(username: string): Member {\n+    addMember: function(username: string): Member {\n       const member = make.member(username, {});\n       (site as SiteData2).members.push(member);\n       return member;\n@@ -243,6 +243,27 @@ export function buildSite(site: SiteData | U = undefined, ps: { okInitEarly?: bo\n     },\n \n \n+    addGroup: function(username: string): GroupInclDetails {\n+      const group = make.group(username, {});\n+      (site as SiteData2).groups.push(group);\n+      return group;\n+    },\n+\n+\n+    addGroupPat: function(group: GroupInclDetails, member: Pat): TestGroupPat {\n+      const groupPat: TestGroupPat = {\n+        groupId: group.id,\n+        ppId: member.id,\n+        isMember: true,\n+        isManager: false,\n+        isAdder: false,\n+        isBouncer: false,\n+      };\n+      (site as SiteData2).groupPps.push(groupPat);\n+      return groupPat;\n+    },\n+\n+\n     addLoadTestGooseUsers: function(ps: { howMany: number, nextNr: Nr, trustLevel: Nr }): Member[] {\n       const newUsers = [];\n       for (let nr = ps.nextNr; nr < ps.nextNr + ps.howMany; ++nr) {"
    },
    {
      "sha": "e83d89ca14bc4911e54468480d4ab97e310e4ba9",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 82,
      "deletions": 35,
      "changes": 117,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1,5 +1,5 @@\n import * as _ from 'lodash';\n-import { IsWhere, E2eAuthor, E2eVote, isWhere_isInIframe } from '../test-types';\n+import { IsWhere, E2eAuthor, E2eVote, isWhere_isInIframe, PermName } from '../test-types';\n import { ServerSays } from '../test-types2';\n import { SiteType, NewSiteOwnerType } from '../test-constants';\n \n@@ -1121,13 +1121,16 @@ export class TyE2eTestBrowser {\n \n \n     async waitForNewUrl() {\n+      let newUrl: St | U;\n       assert.ok(!!this._currentUrl, \"Please call this.#br.rememberCurrentUrl() first [EsE7JYK24]\");\n       await this.waitUntil(async () => {\n-        return this._currentUrl !== await this.#br.getUrl();\n+        newUrl = await this.#br.getUrl()\n+        return this._currentUrl !== newUrl;\n       }, {\n         message: `Waiting for new URL, currently at: ${this._currentUrl}`\n       });\n       delete this._currentUrl;\n+      return newUrl;\n     }\n \n \n@@ -2588,6 +2591,7 @@ export class TyE2eTestBrowser {\n       let items: T[] | U;\n       let len: Nr | St = `?`;\n       await this.waitUntil(async () => {\n+        logBoring(`Hoping for ${j2s(ps)} list items: ${listItemSelector} ...`);\n         const elms: WElm[] = await this.$$(listItemSelector);\n         len = elms.length;\n         if (!isOkMany(len, ps))\n@@ -2597,7 +2601,22 @@ export class TyE2eTestBrowser {\n           return await fn(e);\n         });\n \n-        items = await Promise.all(promises);\n+        // Webdriverio v7 keeps retrying automatically, it seems: it can start logging\n+        //   \"Request encountered a stale element - terminating request\"\n+        // forever until timeout after 30s. Let's retry sooner:\n+        const tooSlowPromise = new Promise(resolve => {\n+          setTimeout(resolve, 3000, 'TOO_SLOW');\n+        });\n+        const itemsOrTimeout =\n+                await Promise.race([Promise.all(promises), tooSlowPromise]);\n+\n+        if (itemsOrTimeout === 'TOO_SLOW') {\n+          logMessage(`Promises.all(...) is taking too long. ${promises.length\n+                } \\`fn(e: WElm)\\` promises. Aborting. [TyM4GMW20K]`);\n+          return false;\n+        }\n+\n+        items = itemsOrTimeout as T[];  // `promises` resolved is type T[]\n         return true;\n       }, {\n         ...ps,\n@@ -5152,25 +5171,16 @@ export class TyE2eTestBrowser {\n \n       assertTopicTitlesAreAndOrder: async (titles: St[]) => {\n         // If there's a React component change, the elems go stale, so try a few times.\n-        // But will that really help? Seems wdio 7 got stuck in an internal loop, printing:\n-        //    \"[0-0] 2023-09-09T07:11:52.390Z WARN webdriver:\n-        //         Request encountered a stale element - terminating request\"\n-        // all the time. [E2EBUG]\n         await utils.tryManyTimes(`Checking topic titles and order`, 3, async () => {\n-          // Or use  this.waitAndGetListTexts()  instead?\n-          const els = await this.$$(this.forumTopicList.titleSelector);\n+          const actualTitles = await this.waitAndGetListTexts(this.forumTopicList.titleSelector);\n+          logBoring(`Found ${actualTitles.length} titles, comparing with expected ...`);\n           for (let i = 0; i < titles.length; ++i) {\n             const titleShouldBe = titles[i];\n-            const actualTitleElem = els[i];\n-            if (!actualTitleElem) {\n-              assert.ok(false, `Title ix ${i} missing, should be: \"${titleShouldBe}\"`);\n-            }\n-            const actualTitle = await actualTitleElem.getText();\n-            if (titleShouldBe !== actualTitle) {\n-              assert.ok(false,\n-                      `Title ix ${i} is: \"${actualTitle}\", should be: \"${titleShouldBe}\"`);\n-            }\n+            const actualTitle = actualTitles[i];\n+            tyAssert.ok(!!actualTitle, `Title ix ${i} missing, should be: \"${titleShouldBe}\"`);\n+            tyAssert.eq(actualTitle, titleShouldBe, `Title ix ${i}`);\n           }\n+          tyAssert.eq(actualTitles.length, titles.length, `Too many titles: ${j2s(actualTitles)}`);\n         });\n       },\n \n@@ -5424,6 +5434,26 @@ export class TyE2eTestBrowser {\n       },\n \n       securityTab: {\n+        _mkSel: (what: PermName, groupId: PatId, shouldBeDisabled?: 'ShouldBeDisabled'): St => {\n+          let permClass: St;\n+          switch (what) {\n+            case 'EditOthersTopics': permClass = 's_PoP_Ps_P_EdPg'; break;\n+            case 'EditOthersReplies': permClass = 's_PoP_Ps_P_EdCm'; break;\n+            case 'EditWikis': permClass = 's_PoP_Ps_P_EdWk'; break;\n+            case 'EditOwn': permClass = 's_PoP_Ps_P_EdOwn'; break;\n+            case 'DeleteOthersTopics': permClass = 's_PoP_Ps_P_DlPg'; break;\n+            case 'DeleteOthersReplies': permClass = 's_PoP_Ps_P_DlCm'; break;\n+            case 'CreatePages': permClass = 's_PoP_Ps_P_CrPg'; break;\n+            case 'PostReplies': permClass = 's_PoP_Ps_P_Re'; break;\n+            case 'SeeOthers': permClass = 's_PoP_Ps_P_See'; break;\n+            case 'SeeOwn': permClass = 's_PoP_Ps_P_SeeOwn'; break;\n+            default: die('TyE03FLMR25');\n+          }\n+          const dotDis = shouldBeDisabled ? '.disabled' : '';\n+          const brackDis = shouldBeDisabled ? '[disabled]' : '';\n+          return `.s_PoP-Grp-${groupId} .${permClass} .checkbox${dotDis} input${brackDis}`;\n+        },\n+\n         switchGroupFromTo: async (fromGroupName: St, toGroupName: St) => {\n           await this.waitAndClickSelectorWithText('.s_PoP_Un .e_SelGrpB', fromGroupName);\n           await this.waitAndClickSelectorWithText(\n@@ -5435,31 +5465,35 @@ export class TyE2eTestBrowser {\n           await this.waitUntilGone(`.s_PoP-Grp-${groupId}`);\n         },\n \n-        addGroup: async (groupName: St) => {\n+        /// `group`: A group, or it's full name.\n+        addGroup: async (group: GroupInclDetails | St) => {\n           await this.waitAndClick('.s_CD_Sec_AddB');\n           await this.waitAndClick('.s_PoP-Select-Grp .e_SelGrpB');\n           await this.waitAndClickSelectorWithText(\n-              '.esDropModal_content .esExplDrp_entry', groupName);\n-        },\n-\n-        setMayCreate: async (groupId: UserId, may: Bo) => {\n-          // For now, just click once\n-          await this.waitAndClick(`.s_PoP-Grp-${groupId} .s_PoP_Ps_P_CrPg input`);\n+              '.esDropModal_content .esExplDrp_entry',\n+              _.isString(group) ? group\n+                                : group.fullName || '@' + group.username);\n         },\n \n-        setMayReply: async (groupId: UserId, may: Bo) => {\n-          // For now, just click once\n-          await this.waitAndClick(`.s_PoP-Grp-${groupId} .s_PoP_Ps_P_Re input`);\n+        setMay: async (what: PermName, groupId: UserId, may: Bo) => {\n+          const sel = this.categoryDialog.securityTab._mkSel(what, groupId);\n+          await this.setCheckbox(sel, may);\n         },\n \n-        setMayEditWiki: async (groupId: UserId, may: Bo) => {\n-          // For now, just click once\n-          await this.waitAndClick(`li.s_PoP:last-child .s_PoP_Ps_P_EdWk input`);  // for now\n+        getMay: async (what: PermName, groupId: UserId, disabled?: 'ShouldBeDisabled'): Pr<Bo> => {\n+          const sel = this.categoryDialog.securityTab._mkSel(what, groupId, disabled);\n+          await this.waitForVisible(sel);\n+          return await (await this.$(sel)).isSelected();\n         },\n \n-        setMaySee: async (groupId: UserId, may: Bo) => {\n-          // For now, just click once\n-          await this.waitAndClick(`.s_PoP-Grp-${groupId} .s_PoP_Ps_P_See input`);\n+        assertMay: async (what: PermName, groupId: UserId, may: Bo, disabled?: 'ShouldBeDisabled'): Pr<V> => {\n+          const actual = await this.categoryDialog.securityTab.getMay(what, groupId, disabled);\n+          if (may) {\n+            tyAssert.that(actual, `Group ${groupId} can't ${what} (but they should be able to)`);\n+          }\n+          else {\n+            tyAssert.not(actual, `Group ${groupId} can ${what} (but they should not be able to)`);\n+          }\n         },\n       }\n     }\n@@ -7006,6 +7040,10 @@ export class TyE2eTestBrowser {\n \n       __flagPostSelector: '.icon-flag',  // for now, later: e_...\n \n+      /// needToClickMore:\n+      /// If not logged in, there aren't many buttons to click, and the Flag button\n+      /// is therefore visible directly, rather than \"hidden\" in the More hamburger dropdown.\n+      ///\n       clickFlagPost: async (postNr: PostNr, opts: { needToClickMore?: false } = {}) => {\n         if (opts.needToClickMore !== false) {\n           // Flag button is inside the More dialog.\n@@ -7483,6 +7521,15 @@ export class TyE2eTestBrowser {\n           });\n         },\n \n+        getBacklinkUrlsAndTitles: async (): Pr<{ url: St, title: St }[]> => {\n+          const res = await this.__waitAndGetThingsInList('.s_InLns_Ln', {}, async (e) => {\n+                  const url = await e.getAttribute('href');\n+                  const title = await e.getText();\n+                  return { url, title };\n+                });\n+          return res;\n+        },\n+\n         isLinkedFromPageId: async (pageId: PageId): Pr<Bo> => {\n           return await this.isExisting(this.topic.backlinks.__mkSelector(pageId));\n         },\n@@ -10407,7 +10454,7 @@ export class TyE2eTestBrowser {\n       },\n \n       editPageBody: async (newText: string, opts: { append?: Bo, textAfterIs?: St,\n-              textAfterMatches?: St } = {}) => {\n+              textAfterMatches?: St | RegExp } = {}) => {\n         await this.topic.clickEditOrigPost();\n         await this.editor.editText(newText, opts);\n         await this.editor.save();"
    },
    {
      "sha": "e4384dac4c945a4d7e6253b53a6e8f3c841f1c3c",
      "filename": "tests/e2e-wdio7/utils/utils.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Futils.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -281,7 +281,7 @@ export function makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?:\n       localHostname?: string, color?: string, bgColor: string, htmlToPaste?: string,\n       talkyardConsiderQueryParams?: St[],\n       authnToken?: St | Ay, authnTokenCookie?: St | Ay,\n-      talkyardLogLevel?: St | Nr, appendExtraHtml?:  St  }): St {\n+      talkyardLogLevel?: St | Nr, ssoHow?: St, appendExtraHtml?:  St  }): St {\n     // Dupl code [046KWESJJLI3].\n     dieIf(!!ps.localHostname && !!ps.htmlToPaste, 'TyE502PK562');\n     dieIf(!ps.localHostname && !ps.htmlToPaste, 'TyE7FHQJ45X');\n@@ -299,6 +299,8 @@ export function makeEmbeddedCommentsHtml(ps: { pageName: string, discussionId?:\n             `talkyardLogLevel=${ps.talkyardLogLevel}`;\n     const ignQueryParams = !ps.talkyardConsiderQueryParams ? '' :\n             `talkyardConsiderQueryParams = ${JSON.stringify(ps.talkyardConsiderQueryParams)};`;\n+    const ssoHowParam = !ps.ssoHow ? '' :\n+            `talkyardSsoHow = ${JSON.stringify(ps.ssoHow)};`;\n \n     // Dupl code [_authn_tokn_html].\n     const authnTokenCookieScript = !ps.authnTokenCookie ? '' : `\n@@ -331,6 +333,7 @@ authnTokenScript + `\n talkyardServerUrl='${settings.scheme}://${ps.localHostname}.localhost';\n ${talkyardLogLevel}\n ${ignQueryParams}\n+${ssoHowParam}\n </script>\n <script async defer src=\"${settings.scheme}://${ps.localHostname}.localhost/-/talkyard-comments.js\"></script>\n <div class=\"talkyard-comments\" ${discIdAttr} ${catRefAttr} style=\"margin-top: 45px;\"></div>"
    },
    {
      "sha": "d07cb7d589cec5b3be5f8221b11d7ae691bd38f5",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fyarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e-wdio7%2Fyarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fyarn.lock?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1251,10 +1251,10 @@ chrome-launcher@^0.15.0:\n     is-wsl \"^2.2.0\"\n     lighthouse-logger \"^1.0.0\"\n \n-chromedriver@^128.0.0:\n-  version \"128.0.0\"\n-  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-128.0.0.tgz#7f75a984101199e0bcc2c92fe9f91917fcd1f918\"\n-  integrity sha512-Ggo21z/dFQxTOTgU0vm0V59Mi79yyR+9AUk/KiVAsRfbDRdVZQYQWfgxnIvD/x8KOKn0oB7haRzDO/KfrKyvOA==\n+chromedriver@^128.0.3:\n+  version \"128.0.3\"\n+  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-128.0.3.tgz#7c2cd2d160f269e78f40840ee7a043dac3687148\"\n+  integrity sha512-Xn/bknOpGlY9tKinwS/hVWeNblSeZvbbJbF8XZ73X1jeWfAFPRXx3fMLdNNz8DqruDbx3cKEJ5wR3mnst6G3iw==\n   dependencies:\n     \"@testim/chrome-version\" \"^1.1.4\"\n     axios \"^1.7.4\""
    },
    {
      "sha": "b08a4957c43eea9ae9e3f919efd7453235fd4d24",
      "filename": "tests/e2e/specs/__e2e-test-template__.2br.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Fspecs%2F__e2e-test-template__.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Fspecs%2F__e2e-test-template__.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2F__e2e-test-template__.2br.test.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -73,7 +73,7 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n     //builder.getSite().settings.allowEmbeddingFrom = embeddingOrigin;\n \n     // Adding a new member:\n-    const newMember: Member = builder.addMmember('hens_username');\n+    const newMember: Member = builder.addMember('hens_username');\n \n     const newPage: PageJustAdded = builder.addPage({\n       id: 'extraPageId',"
    },
    {
      "sha": "06c440a0a82dc3fa003f59b595214db5110b4fe3",
      "filename": "tests/e2e/specs/drafts-new-topic.2br.mtime.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Fspecs%2Fdrafts-new-topic.2br.mtime.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Fspecs%2Fdrafts-new-topic.2br.mtime.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fdrafts-new-topic.2br.mtime.test.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -172,7 +172,7 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.userProfilePage.draftsEtc.waitUntilNumDraftsListed(1);\n   });\n \n-  it(\"She clicks it\", () => {\n+  it(\"She clicks it  TyTFRAGACT\", () => {\n     mariasBrowser.userProfilePage.draftsEtc.openDraftIndex(1);\n   });\n "
    },
    {
      "sha": "e29cf0ebb217b18a6e410d23c5e446e80c7982e2",
      "filename": "tests/e2e/utils/site-builder.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Futils%2Fsite-builder.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/tests%2Fe2e%2Futils%2Fsite-builder.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Futils%2Fsite-builder.ts?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -173,7 +173,7 @@ function buildSite(site: SiteData | U = undefined, ps: { okInitEarly?: boolean }\n     },\n \n \n-    addMmember: function(username: string): Member {\n+    addMember: function(username: string): Member {\n       const member = make.member(username, {});\n       (site as SiteData2).members.push(member);\n       return member;"
    },
    {
      "sha": "3a75eb0bc765447a2f804843e1594b5af3bb9c23",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/8340b328b79f222bcd2c7703323b239af2765d43/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/8340b328b79f222bcd2c7703323b239af2765d43/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=8340b328b79f222bcd2c7703323b239af2765d43",
      "patch": "@@ -1 +1 @@\n-v0.2024.006\n+v0.2024.007"
    }
  ]
}
