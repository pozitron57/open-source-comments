{
  "sha": "ce678bf967659c63be0b373120ffa0c818f8221f",
  "node_id": "C_kwDOBtgov9oAKGNlNjc4YmY5Njc2NTljNjNiZTBiMzczMTIwZmZhMGM4MThmODIyMWY",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2023-11-18T19:25:23Z"
    },
    "committer": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2023-11-18T19:30:18Z"
    },
    "message": "fix Commento top-level comments import\n\nPreviously, top-level comments were incorrectly assigned\nparent comment id \"root\", which made them non-root,\nso they are not returned when requested\nin the `/find?format=tree` API call.\n\nTo fix the previously imported comments, please export all your comments\nand replace `\"pid\":\"root\"` with `\"pid\":\"\"` and then re-import them.",
    "tree": {
      "sha": "b57ca475261ffee77cd3c53d44ffedf592677f84",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/b57ca475261ffee77cd3c53d44ffedf592677f84"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/ce678bf967659c63be0b373120ffa0c818f8221f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/ce678bf967659c63be0b373120ffa0c818f8221f",
  "html_url": "https://github.com/umputun/remark42/commit/ce678bf967659c63be0b373120ffa0c818f8221f",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/ce678bf967659c63be0b373120ffa0c818f8221f/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd481d401de7e5fb2eb18267cec69398eec35d98",
      "url": "https://api.github.com/repos/umputun/remark42/commits/cd481d401de7e5fb2eb18267cec69398eec35d98",
      "html_url": "https://github.com/umputun/remark42/commit/cd481d401de7e5fb2eb18267cec69398eec35d98"
    }
  ],
  "stats": {
    "total": 276,
    "additions": 275,
    "deletions": 1
  },
  "files": [
    {
      "sha": "464d853bd9a43949d7804bcc304df73dcaa9382e",
      "filename": "backend/app/migrator/commento.go",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Fmigrator%2Fcommento.go",
      "raw_url": "https://github.com/umputun/remark42/raw/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Fmigrator%2Fcommento.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmigrator%2Fcommento.go?ref=ce678bf967659c63be0b373120ffa0c818f8221f",
      "patch": "@@ -110,6 +110,12 @@ func (d *Commento) convert(r io.Reader, siteID string) (ch chan store.Comment) {\n \t\t\t\tcontinue\n \t\t\t}\n \n+\t\t\tparentID := comment.ParentHex\n+\t\t\t// comments with ParentHex == \"root\" are top-level comments\n+\t\t\tif parentID == \"root\" {\n+\t\t\t\tparentID = \"\"\n+\t\t\t}\n+\n \t\t\tc := store.Comment{\n \t\t\t\tID: comment.CommentHex,\n \t\t\t\tLocator: store.Locator{\n@@ -119,7 +125,7 @@ func (d *Commento) convert(r io.Reader, siteID string) (ch chan store.Comment) {\n \t\t\t\tUser:      u,\n \t\t\t\tText:      comment.Markdown,\n \t\t\t\tTimestamp: comment.CreationDate,\n-\t\t\t\tParentID:  comment.ParentHex,\n+\t\t\t\tParentID:  parentID,\n \t\t\t\tImported:  true,\n \t\t\t}\n "
    },
    {
      "sha": "7146250b52e06a632eec19869be0ead80228f961",
      "filename": "backend/app/rest/api/migrator_test.go",
      "status": "modified",
      "additions": 152,
      "deletions": 0,
      "changes": 152,
      "blob_url": "https://github.com/umputun/remark42/blob/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fmigrator_test.go?ref=ce678bf967659c63be0b373120ffa0c818f8221f",
      "patch": "@@ -9,6 +9,7 @@ import (\n \t\"mime/multipart\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n+\t\"os\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -49,6 +50,22 @@ func TestMigrator_Import(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n }\n \n func TestMigrator_ImportForm(t *testing.T) {\n@@ -84,6 +101,22 @@ func TestMigrator_ImportForm(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n }\n \n func TestMigrator_ImportFromWP(t *testing.T) {\n@@ -108,6 +141,22 @@ func TestMigrator_ImportFromWP(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://realmenweardress.es/2010/07/do-you-rp/\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 3, comments.Info.Count)\n+\trequire.Equal(t, 3, len(comments.Comments))\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://realmenweardress.es/2010/07/do-you-rp/\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 3, comments.Info.Count)\n+\trequire.Equal(t, 2, len(comments.Comments), \"2 comments with 1 reply\")\n }\n \n func TestMigrator_ImportFromCommento(t *testing.T) {\n@@ -137,6 +186,63 @@ func TestMigrator_ImportFromCommento(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://example.com/blog/post/1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://example.com/blog/post/1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n+}\n+\n+func TestMigrator_ImportFromCommentoJSON(t *testing.T) {\n+\tts, _, teardown := startupT(t)\n+\tdefer teardown()\n+\n+\tr, err := os.Open(\"testdata/commento.json\")\n+\trequire.NoError(t, err)\n+\n+\tclient := &http.Client{Timeout: 1 * time.Second}\n+\tdefer client.CloseIdleConnections()\n+\treq, err := http.NewRequest(\"POST\", ts.URL+\"/api/v1/admin/import?site=remark42&provider=commento\", r)\n+\tassert.NoError(t, err)\n+\treq.Header.Add(\"Content-Type\", \"application/json; charset=utf-8\")\n+\treq.SetBasicAuth(\"admin\", \"password\")\n+\tresp, err := client.Do(req)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n+\n+\tb, err := io.ReadAll(resp.Body)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n+\tassert.NoError(t, resp.Body.Close())\n+\n+\twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://example.com/example\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 7, comments.Info.Count)\n+\trequire.Equal(t, 7, len(comments.Comments))\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://example.com/example\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 7, comments.Info.Count)\n+\trequire.Equal(t, 5, len(comments.Comments), \"five comments with two replies\")\n }\n \n func TestMigrator_ImportRejected(t *testing.T) {\n@@ -197,6 +303,20 @@ func TestMigrator_ImportDouble(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusConflict, resp.StatusCode)\n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 50, comments.Info.Count)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://radio-t.com/blah1\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 50, comments.Info.Count)\n }\n \n func TestMigrator_ImportWaitExpired(t *testing.T) {\n@@ -236,6 +356,14 @@ func TestMigrator_ImportWaitExpired(t *testing.T) {\n \tassert.Equal(t, http.StatusGatewayTimeout, resp.StatusCode)\n \n \twaitForMigrationCompletion(t, ts)\n+\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://example.com/example\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 0, comments.Info.Count)\n+\trequire.Equal(t, 0, len(comments.Comments))\n }\n \n func TestMigrator_Export(t *testing.T) {\n@@ -339,6 +467,7 @@ func TestMigrator_Remap(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 2, comments.Info.Count)\n+\trequire.Equal(t, 2, len(comments.Comments))\n \trequire.False(t, comments.Info.ReadOnly)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n@@ -347,6 +476,7 @@ func TestMigrator_Remap(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n \trequire.True(t, comments.Info.ReadOnly)\n \n \t// we want remap urls to another domain - www.remark42.com\n@@ -364,6 +494,16 @@ func TestMigrator_Remap(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 2, comments.Info.Count)\n+\trequire.Equal(t, 2, len(comments.Comments))\n+\trequire.False(t, comments.Info.ReadOnly)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://www.remark42.com/demo/\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 2, comments.Info.Count)\n+\trequire.Equal(t, 2, len(comments.Comments))\n \trequire.False(t, comments.Info.ReadOnly)\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://www.remark42.com/demo-another/\")\n@@ -372,6 +512,16 @@ func TestMigrator_Remap(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n+\trequire.True(t, comments.Info.ReadOnly)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&format=tree&url=https://www.remark42.com/demo-another/\")\n+\trequire.Equal(t, http.StatusOK, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.Equal(t, 1, len(comments.Comments))\n \trequire.True(t, comments.Info.ReadOnly)\n \n \t// should find nothing from previous url\n@@ -381,13 +531,15 @@ func TestMigrator_Remap(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 0, comments.Info.Count)\n+\trequire.Equal(t, 0, len(comments.Comments))\n \n \tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n \trequire.Equal(t, http.StatusOK, code)\n \tcomments = commentsWithInfo{}\n \terr = json.Unmarshal([]byte(res), &comments)\n \trequire.NoError(t, err)\n \trequire.Equal(t, 0, comments.Info.Count)\n+\trequire.Equal(t, 0, len(comments.Comments))\n }\n \n func TestMigrator_RemapReject(t *testing.T) {"
    },
    {
      "sha": "b584460457f85c5856475f8c30e167f31adc0d26",
      "filename": "backend/app/rest/api/testdata/commento.json",
      "status": "added",
      "additions": 116,
      "deletions": 0,
      "changes": 116,
      "blob_url": "https://github.com/umputun/remark42/blob/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Frest%2Fapi%2Ftestdata%2Fcommento.json",
      "raw_url": "https://github.com/umputun/remark42/raw/ce678bf967659c63be0b373120ffa0c818f8221f/backend%2Fapp%2Frest%2Fapi%2Ftestdata%2Fcommento.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Ftestdata%2Fcommento.json?ref=ce678bf967659c63be0b373120ffa0c818f8221f",
      "patch": "@@ -0,0 +1,116 @@\n+{\n+  \"version\": 1,\n+  \"comments\": [\n+    {\n+      \"commentHex\": \"e7a2ef4b4aa1414a7ee65a989889aaecd9d5e7e3bca598ea7a967b4dbcaa8e11\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"root\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2022-10-25T07:25:46.807555Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"a29e741145daceb4ca5b3e5e279e05b56f73c04703d93b944718ef757e15317f\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"root\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-07-26T12:24:55.058552Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"46baf36433830a4e8bda1de56290cf5fd74c08bfa844fee4ec1744985dc77010\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"root\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-10-31T11:03:25.403282Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"6d3bb64ff73b5f9d6a959212ffde472a51abf8bdefaa5ed843659796bceef9de\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"46baf36433830a4e8bda1de56290cf5fd74c08bfa844fee4ec1744985dc77010\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-11-01T22:23:47.112062Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"23fcfcd03745ed71a9d23a9b59387a313df57e5c0faad8ba5dc96112766312c5\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"root\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-10-23T12:33:03.370182Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"d0ad6f11cf0c5f8e17457a378a6bb789f412c6b7ef7ada4ae06ec8451f7a18aa\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"root\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-10-18T01:18:38.193625Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    },\n+    {\n+      \"commentHex\": \"098960fd01c1fc7c0d3ea428f52fab97ea5c18aa52f3565bba679224daddc687\",\n+      \"domain\": \"example.com\",\n+      \"url\": \"https://example.com/example\",\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"markdown\": \"\",\n+      \"html\": \"\",\n+      \"parentHex\": \"23fcfcd03745ed71a9d23a9b59387a313df57e5c0faad8ba5dc96112766312c5\",\n+      \"score\": 0,\n+      \"state\": \"approved\",\n+      \"creationDate\": \"2023-11-01T22:24:04.639965Z\",\n+      \"direction\": 0,\n+      \"deleted\": false\n+    }\n+  ],\n+  \"commenters\": [\n+    {\n+      \"commenterHex\": \"018407e4b12b35f43b1d804d82607b341bef80c4325dd047d93f2cbb439cff85\",\n+      \"email\": \"undefined\",\n+      \"name\": \"blank\",\n+      \"link\": \"undefined\",\n+      \"photo\": \"undefined\",\n+      \"provider\": \"anon\",\n+      \"joinDate\": \"2022-06-09T15:54:29.865919Z\",\n+      \"isModerator\": false,\n+      \"deleted\": false\n+    }\n+  ]\n+}"
    }
  ]
}
