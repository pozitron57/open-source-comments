{
  "sha": "699d3bf24a21ad7d6a22c115c891dc5799faea5d",
  "node_id": "C_kwDOAKEu-toAKDY5OWQzYmYyNGEyMWFkN2Q2YTIyYzExNWM4OTFkYzU3OTlmYWVhNWQ",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2024-12-27T17:12:48Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2024-12-27T17:12:48Z"
    },
    "message": "Merge v0.2024.010 into 'release'.",
    "tree": {
      "sha": "413ce6a2f4ee76b4cc88ee69b2c4f86978573d6c",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/413ce6a2f4ee76b4cc88ee69b2c4f86978573d6c"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/699d3bf24a21ad7d6a22c115c891dc5799faea5d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null,
      "verified_at": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/699d3bf24a21ad7d6a22c115c891dc5799faea5d",
  "html_url": "https://github.com/debiki/talkyard/commit/699d3bf24a21ad7d6a22c115c891dc5799faea5d",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/699d3bf24a21ad7d6a22c115c891dc5799faea5d/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "797271e37029af91c9f4e85a63e75896c0181235",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/797271e37029af91c9f4e85a63e75896c0181235",
      "html_url": "https://github.com/debiki/talkyard/commit/797271e37029af91c9f4e85a63e75896c0181235"
    },
    {
      "sha": "a0d44af51dbdb5ecb2ea16243bc7a1d01c8eb185",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/a0d44af51dbdb5ecb2ea16243bc7a1d01c8eb185",
      "html_url": "https://github.com/debiki/talkyard/commit/a0d44af51dbdb5ecb2ea16243bc7a1d01c8eb185"
    }
  ],
  "stats": {
    "total": 4434,
    "additions": 3594,
    "deletions": 840
  },
  "files": [
    {
      "sha": "eb09473a0e1eb5b0a5e2eec2b6b1a3d926ffcbaf",
      "filename": "appsv/model/src/main/scala/com/debiki/core/ReviewTask.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -32,7 +32,8 @@ case class ModResult(\n   updatedPosts: Seq[Post],\n   updatedAuthor: Option[Participant],\n   updatedPageId: Option[PageId] = None,\n-  deletedPageId: Option[PageId] = None)\n+  deletedPageId: Option[PageId] = None,\n+  bannedUser: Opt[Pat] = None)\n \n object ModResult {\n   val NothingChanged = ModResult(Nil, None, None, None)\n@@ -112,6 +113,7 @@ object ReviewDecision {\n   // 5nnn = Reject.\n   private val FirstBadId = 5000\n   case object DeletePostOrPage extends ReviewDecision(5001)\n+  case object DeleteAndBanSpammer extends ReviewDecision(5501)\n \n \n \n@@ -124,6 +126,7 @@ object ReviewDecision {\n     //case InteractTopicDoingStatus.IntVal => InteractTopicDoingStatus\n     case InteractLike.IntVal => InteractLike\n     case DeletePostOrPage.IntVal => DeletePostOrPage\n+    case DeleteAndBanSpammer.IntVal => DeleteAndBanSpammer\n     case _ => return None\n   })\n }"
    },
    {
      "sha": "cb75d5130860187220b5577153467911ecd0910c",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Site.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -250,6 +250,18 @@ trait SiteLimitsMultipliers {\n   def readLimitsMultiplier: Opt[f32]\n   def logLimitsMultiplier: Opt[f32]\n   def createLimitsMultiplier: Opt[f32]\n+\n+  /** If there's many people — a whole herd — at the same ip, e.g. employees\n+    * in an office building, or attendees at an in-place (not online) conference,\n+    * it can be necessary to let lots of people sign up from the same ip address,\n+    * but in other cases that can be fishy. [site_ip_person_limits]\n+    *\n+    * But no? Instead, would want read/log/create limits, for ip addresses,\n+    * and sometimes a specific address or from a set of geographical areas?\n+    * (E.g. a company's office buildings in a country or city.)\n+    * Not just a single field.\n+    */\n+  // def ipHerdMultiplier: Opt[f32] = None\n }\n \n "
    },
    {
      "sha": "59d064dcabc4bac1b985da266678148c1b88651d",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -543,12 +543,24 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   def loadTheMemberInclDetails(userId: UserId): MemberInclDetails =\n     loadMemberInclDetailsById(userId).getOrElse(throw UserNotFoundException(userId))\n \n-  def loadGroups(memberOrGroup: MemberInclDetails): immutable.Seq[Group] = {\n+  def loadGroups(memberNotGroup: MemberInclDetails): immutable.Seq[Group] = {\n+    dieIf(memberNotGroup.isGroup, \"TyEGROUPGROUP\", \"Use loadGroupsAncestorGroups() instead\")\n     val allGroups = loadAllGroupsAsMap()\n-    val groupIds = loadGroupIdsMemberIdFirst2(memberOrGroup)\n+    val groupIds = loadGroupIdsMemberIdFirst2(memberNotGroup)\n     groupIds.flatMap(allGroups.get)\n   }\n \n+  /** Avoids the pointless [own_id_bef_groups] problem (doesn't incl the group itself first).\n+    */\n+  def loadGroupsAncestorGroups(group: Group): immutable.Seq[Group] = {\n+    val allGroups = loadAllGroupsAsMap()\n+    val groupIds = loadGroupIdsMemberIdFirst2(group)\n+    // Currently only trust level groups can have ancestors — other trust level groups.\n+    val ancestorGroupsTooMany = groupIds.flatMap(allGroups.get)\n+    ancestorGroupsTooMany.filter(g => g.id != group.id // silly [own_id_bef_groups]\n+                                     && g.isBuiltIn)\n+  }\n+\n   // def updateMember(user: Member): Boolean — could add, [6DCU0WYX2]\n \n   def updateMemberInclDetails(member: MemberInclDetails): Unit = {\n@@ -675,11 +687,10 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   def loadUserInclDetailsByExtId(externalId: String): Option[UserInclDetails]\n   def loadUserInclDetailsByEmailAddr(email: String): Option[UserInclDetails]\n \n-  def loadUsersWithUsernamePrefix(\n-    usernamePrefix: String, caseSensitive: Boolean = false, limit: Int = 50): immutable.Seq[User]\n-\n+  def loadUsersWithUsernamePrefix(usernamePrefix: St, caseSensitive: Bo = false,\n+          limit: i32 = 50): ImmSeq[UserBr]\n   // Also see: loadAuthorIdsByPostId(postIds)\n-  def listUsernamesOnPage(pageId: PageId): Seq[NameAndUsername]\n+  def listUsernamesOnPage(pageId: PageId): ImmSeq[UserBr]\n \n   def loadAdmins(): immutable.Seq[User] =\n     loadStaffUsers().filter(_.isAdmin)\n@@ -757,7 +768,6 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n     */\n   def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId]\n \n-\n   def upsertPageNotfPref(notfPref: PageNotfPref): Unit\n   def deletePageNotfPref(notfPref: PageNotfPref): Boolean  // notf level ignored\n   // [REFACTORNOTFS] break out to a Dao, and load just for this member, but also all groups it's in?"
    },
    {
      "sha": "fe6fb66156caf9c462fd64dbbcfa4b3b635de2fb",
      "filename": "appsv/model/src/main/scala/com/debiki/core/permissions.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -20,7 +20,13 @@ package com.debiki.core\n import com.debiki.core.Prelude._\n \n \n-\n+/** Permissions for a user or group that aren't specific to a page or category,\n+  * but for the whole site.\n+  *\n+  * (These are set on groups, not in the perms_on_pages3 table. The site wide perms in\n+  * that table aren't in use [0_site_perms]. But these ones are (and stored in users3),\n+  * and these are better — can vary, by group.)\n+  */\n case class EffPatPerms(\n   maxUploadSizeBytes: i32,\n   allowedUploadExtensions: Set[St],"
    },
    {
      "sha": "6ffb1a65a26174d8dcf3c4ec27efadf22179a7a8",
      "filename": "appsv/model/src/main/scala/com/debiki/core/trust-threat-level.scala",
      "status": "modified",
      "additions": 60,
      "deletions": 9,
      "changes": 69,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -23,6 +23,13 @@ trait HasInt32 {\n   def toInt: i32\n }\n \n+/** Works only up to Core Member, but it's sometimes better to think of mods & admins\n+  * as their own trust levels. — Try to start using TrustLevel2 instead.\n+  *\n+  * But don't set anyone's trust level directly to mod or admin — instead, those are flags:\n+  * an admin doesn't have to also be a moderator. But the admin's trust level is higher.\n+  * See: `effectiveTrustLevel2`.\n+  */\n sealed abstract class TrustLevel(val IntVal: Int) extends HasInt32 {\n   def toInt: Int = IntVal\n \n@@ -42,6 +49,29 @@ sealed abstract class TrustLevel(val IntVal: Int) extends HasInt32 {\n }\n \n \n+/** This works also with mods & admins — but TrustLevel (without 2) works only\n+  * up to Core Member, which is sometimes annoying.\n+  */\n+sealed abstract class TrustLevel2(val IntVal2: i32)\n+    extends TrustLevel(if (IntVal2 > 6) 6 /* CoreMember is max */ else IntVal2)\n+    with HasInt32 {\n+\n+  def toInt2: i32 = IntVal2\n+\n+  def isBelow2(other: TrustLevel2): Bo =\n+    toInt2 < other.toInt2\n+\n+  def isAbove2(other: TrustLevel2): Bo =\n+    toInt2 > other.toInt2\n+\n+  def isAtMost2(level: TrustLevel2): Bo =\n+    toInt2 <= level.toInt2\n+\n+  def isAtLeast2(level: TrustLevel2): Bo =\n+    toInt2 >= level.toInt2\n+}\n+\n+\n /** The same as Discourse's trust levels, plus one more level: the helpful member,\n   *\n   * Discourse's trust levels:\n@@ -51,7 +81,7 @@ sealed abstract class TrustLevel(val IntVal: Int) extends HasInt32 {\n   * https://meta.discourse.org/t/a-new-trust-level-the-helpful-member/56894\n   */\n object TrustLevel {\n-  case object Stranger extends TrustLevel(0)   ; REFACTOR // bump all 1, so won't start at 0\n+  case object Stranger extends TrustLevel2(0)   ; REFACTOR // bump all 1, so won't start at 0\n                                       // 0 is easily buggy-mistaken for undefined, in Javascript.\n   //se object [StrangerWithSecret] — if someone doesn't yet have a real account, but via a secret link  [new_trust_levels]\n   //      has been invited to look at an otherwise private discussion?\n@@ -60,18 +90,21 @@ object TrustLevel {\n   //      Maybe different secret links, some let one create a real account,\n   //      others just lets one view sth, for a limited time maybe. And could have a link-max-use-count.\n \n-  case object NewMember extends TrustLevel(1)   // has created a real account\n-  case object BasicMember extends TrustLevel(2)\n-  case object FullMember extends TrustLevel(3)\n+  case object NewMember extends TrustLevel2(1)   // has created a real account\n+  case object BasicMember extends TrustLevel2(2)\n+  case object FullMember extends TrustLevel2(3)\n+\n   //se object [GoodMember] extends TrustLevel(_)   — the software promotes up to here only\n   //       or DecentMember or WellBehavedMember or Soft(ware)Trusted or BitTrustedMember?\n-  case object TrustedMember extends TrustLevel(4)  // requires manual review, maybe not much but a bit\n-  case object RegularMember extends TrustLevel(5)   ; RENAME // to Trusted Regular, no, remove, and let visit frequency be another dimension, don't conflate with trust level\n+  //se object HelpfulMember extends TrustLevel2(_)  <—— maybe this is best/least-bad after all?\n+\n+  case object TrustedMember extends TrustLevel2(4)  // requires manual review, maybe not much but a bit\n+  case object RegularMember extends TrustLevel2(5)   ; RENAME // to Trusted Regular, no, remove, and let visit frequency be another dimension, don't conflate with trust level\n   //se object TrustedVeteran extends TrustLevel(_) — trusted members who have been around for long,\n   //                and know the community and domain inside and out?\n   //                (Most people who have been along for long, would be FullMembers\n   //                or GoodMembers,  not Trusted-*.)\n-  case object CoreMember extends TrustLevel(6)\n+  case object CoreMember extends TrustLevel2(6)\n \n   // + Mod, [mods_are_core_membs][new_trust_levels]\n   // + ModOfMods (can resolve disagreements between mods)\n@@ -85,9 +118,13 @@ object TrustLevel {\n   // Not real trust levels, but sometimes simpler to remember just one digit, say 7,\n   // instead of 3 things: level + isStaff + isModerator.\n   REFACTOR // Actually, *do* change to real trust levels — see Mod, ModOfMods, Admin above.\n-  val StrangerDummyLevel = 0\n-  val ModeratorDummyLevel = 7\n+  val StrangerDummyLevel = 0  // But there's already a Stranger level above?\n+\n+  val StaffDummyLevel = 7\n+  case object Staff extends TrustLevel2(7)\n+\n   val AdminDummyLevel = 8\n+  case object Admin extends TrustLevel2(8)\n \n   def fromOptInt(value: Opt[i32]): Opt[TrustLevel] = value.flatMap(fromInt)\n \n@@ -114,8 +151,22 @@ object TrustLevel {\n       // Skip: Group.ModeratorsId, AdminsId, because StrangerDummyLevel and\n       // moderators and admins aren't trust levels. [COREINCLSTAFF]\n       // Staff members can have trust level just Basic or Core Member or whatever.\n+      // Edit: Now there's TrustLevel2 with Staff and Admin trust levels,\n+      // but right now, this works fine anyway.\n       return None\n   })\n+\n+  def minOfAny(a: Opt[TrustLevel], b: Opt[TrustLevel]): Opt[TrustLevel] = {\n+    if (a.isEmpty) return b\n+    if (b.isEmpty) return a\n+    if (a.get.toInt < b.get.toInt) a else b\n+  }\n+\n+  def maxOfAny(a: Opt[TrustLevel], b: Opt[TrustLevel]): Opt[TrustLevel] = {\n+    if (a.isEmpty) return b\n+    if (b.isEmpty) return a\n+    if (a.get.toInt > b.get.toInt) a else b\n+  }\n }\n \n "
    },
    {
      "sha": "777f3f587bbabcff6a256e81a93eb028b3ebe1eb",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 178,
      "deletions": 8,
      "changes": 186,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -416,6 +416,86 @@ case object Participant {\n   def isOkayGuestId(id: UserId): Boolean =\n     id == UnknownUserId || id <= MaxCustomGuestId\n \n+\n+  def getBuiltInGroupIdsForUser(member: UserBase): Vector[UserId] = {\n+    val G = Group\n+\n+    BUG // Sleeping: Shouldn't admins who are also mods, be in both groups? Right now,\n+    // they're in the Admins group only.\n+\n+    if (member.isAdmin)\n+      return Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+\n+    if (member.isModerator)\n+      return Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+\n+    member.effectiveTrustLevel match {\n+      case TrustLevel.Stranger =>\n+        // Cannot happen — members always >= NewMember. But incl this\n+        // anyway — in case will refactor in the future, so can be Stranger.\n+        Vector(G.EveryoneId)\n+      case TrustLevel.NewMember =>\n+        Vector(G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.BasicMember =>\n+        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.FullMember =>\n+        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.TrustedMember =>\n+        Vector(G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.RegularMember =>\n+        Vector(G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.CoreMember =>\n+        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+    }\n+  }\n+\n+\n+  def getBuiltInGroupIdsForGroup(group: Group): Vector[UserId] = {\n+    CLEAN_UP // This is annoying: The group's own id is included.  [own_id_bef_groups]\n+    // Sometimes helpful, but turns out it's mostly annoying.\n+    val G = Group\n+    group.id match {\n+      case G.EveryoneId =>\n+        Vector(G.EveryoneId)\n+      case G.AllMembersId =>\n+        Vector(G.AllMembersId, G.EveryoneId)\n+      case G.BasicMembersId =>\n+        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.FullMembersId =>\n+        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.TrustedMembersId =>\n+        Vector(G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.RegularMembersId =>\n+        Vector(G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.CoreMembersId =>\n+        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.StaffId =>\n+        Vector(G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.ModeratorsId =>\n+        Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.AdminsId =>\n+        Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case _ =>\n+        // Custom groups are members, so should be in the all-members group, right.\n+        // But what if one would want to place guests in a group? Then, maybe should\n+        // use only  G.EveryoneId  here?  And only *authenticated* (somehow) guests\n+        // could be placed in any group.  [authnd_guests_group]  And they wouldn't be real\n+        // forum members, only guests.\n+        Vector(G.AllMembersId, G.EveryoneId)\n+    }\n+  }\n+\n+\n   val MinUsernameLength = 3  // must be < 9, search for usages to see why\n   val MaxUsernameLength = 20 // sync with tests [6AKBR20Q]\n \n@@ -655,6 +735,15 @@ case object Participant {\n         isAdmin = true,\n         isModerator = true,\n         )\n+\n+\n+  /** This works and won't need to do any db migration.  Later (and better), could edit\n+    * some db constraints, review [4ELBAUPW2], and set the suspended-till end date\n+    * to null instead of this funny date.\n+    *\n+    * This is 2314-08-31 10:00:01. DO_BEFORE 2200-01-01: Replace w null & review constraints etc.\n+    */\n+  val _BanMagicEpoch: i64 = 10876500001L // [ban_magic_nr]\n }\n \n \n@@ -679,7 +768,10 @@ sealed trait Pat extends HasInt32Id {\n   def emailNotfPrefs: EmailNotfPrefs\n   def tinyAvatar: Opt[UploadRef]\n   def smallAvatar: Opt[UploadRef]\n+  // Later: Set to false, if banned? Add new fn: isSuspendedOrBanned?\n   def suspendedTill: Opt[ju.Date]\n+  /** Banned users cannot log in and view their old posts — but suspended users can. */\n+  def isBanned: Bo = suspendedTill.exists(_.getTime == Participant._BanMagicEpoch)\n   def isAdmin: Bo\n   def isOwner: Bo\n   def isModerator: Bo\n@@ -734,10 +826,21 @@ sealed trait Pat extends HasInt32Id {\n \n   def effectiveTrustLevel: TrustLevel\n \n+  def effectiveTrustLevel2: TrustLevel2 =\n+    if (isAdmin) TrustLevel.Admin\n+    else if (isModerator) TrustLevel.Staff\n+    else effectiveTrustLevel.asInstanceOf[TrustLevel2] // all TrustLevel are TrustLevel2\n+\n   def canPromoteToBasicMember: Bo = false\n   def canPromoteToFullMember: Bo = false\n \n-  /** Sync w Typescript: store_maySendDirectMessageTo().  */\n+  /** Sync w Typescript: store_maySendDirectMessageTo(), hmm, or instead,\n+    * will probably remove that fn, and derive server side, and incl\n+    * in the \"privPrefs\" obj.\n+    *\n+    * Should be inherited from ancestor groups, but not impl.  [inherit_priv_prefs_0impl]\n+    * See: JsUserInclDetails and \"privPrefsDef\", that is, use:  Authz.deriveDefaultPrivPrefs().\n+    */\n   def mayMessage(pat: Pat): Bo = {\n     // It's ok to message oneself? Maybe for some kind of personal journal\n     if (pat.isSystemOrSysbot || pat.isGuest || pat.isGone) return false\n@@ -752,8 +855,15 @@ sealed trait Pat extends HasInt32Id {\n     }\n   }\n \n+  /** Should be inherited from ancestor groups, but not impl.  [inherit_priv_prefs_0impl]\n+    *\n+    * When implementing, let guests @mention users and send DMs [guests_0_mention],\n+    * — because then admins can configure this however they want. But maybe the *default*\n+    * should still be that only members can.\n+    */\n   def mayMention(pat: Pat): Bo = {\n-    if (pat.id == this.id || pat.isSystemOrSysbot || pat.isGuest || pat.isGone) return false\n+    if (pat.id == this.id || pat.isSystemOrSysbot || pat.isGuest  // [guests_0_mention]\n+            || pat.isGone) return false\n     if (isStaffOrCoreMember) return true\n     pat match {\n       case m: Member =>\n@@ -789,6 +899,8 @@ sealed trait Pat extends HasInt32Id {\n   final def nameHashId: St =\n     anyUsername.map(un => s\"@$un #$id\") getOrElse s\"'$usernameOrGuestName' #$id\"\n \n+  def anyPrivPrefs: Opt[MemberPrivacyPrefs] = None\n+\n   final def toMemberOrThrow: Member = toMemberOrThrowCode(\"\")\n \n   final def toMemberOrThrowCode(errCode: ErrCode): Member = {\n@@ -830,12 +942,18 @@ sealed trait Pat extends HasInt32Id {\n   }\n \n   COULD_OPTIMIZE // return UserBase instead?\n-  final def toUserOrThrow: User = {\n+  final def toUserOrNone: Opt[User] = Some {\n     this match {\n       case u: User => u\n       case u: UserVb => u.briefUser // or just return UserBase instead of converting\n       case _: UserBase => die(\"TyE59RKTJ1\", \"Should see UserBr or UserVb before UserBase\")\n-      case _ => throwWrongPatType(wantedWhat = \"a user\")\n+      case _ => return None\n+    }\n+  }\n+\n+  final def toUserOrThrow: User = {\n+    toUserOrNone getOrElse {\n+      throwWrongPatType(wantedWhat = \"a user\")\n     }\n   }\n \n@@ -876,6 +994,7 @@ sealed trait Member extends Pat {\n   final def isApprovedOrStaff: Bo = isApproved.is(true) || isStaff\n \n   def privPrefs: MemberPrivacyPrefs\n+  override def anyPrivPrefs: Opt[MemberPrivacyPrefs] = Some(privPrefs)\n }\n \n \n@@ -1205,6 +1324,7 @@ sealed trait MemberInclDetails extends ParticipantInclDetails {  RENAME // to Me\n   def summaryEmailIntervalMins: Option[Int]\n   def summaryEmailIfActive: Option[Boolean]\n   def privPrefs: MemberPrivacyPrefs\n+  override def anyPrivPrefs: Opt[MemberPrivacyPrefs] = Some(privPrefs)\n \n   def usernameLowercase: String\n \n@@ -1561,14 +1681,52 @@ case class AboutGroupPrefs(\n   * is important).\n   */\n case class MemberPrivacyPrefs(\n+  maySeeMyBriefBioTrLv: Opt[TrustLevel],\n+  maySeeMyMembershipsTrLv: Opt[TrustLevel],\n+  maySeeMyProfileTrLv: Opt[TrustLevel],\n+  mayFindMeTrLv: Opt[TrustLevel],\n+  maySeeMyPresenceTrLv: Opt[TrustLevel],\n+  maySeeMyApproxStatsTrLv: Opt[TrustLevel],\n   seeActivityMinTrustLevel: Opt[TrustLevel],\n   maySendMeDmsTrLv: Opt[TrustLevel],\n   mayMentionMeTrLv: Opt[TrustLevel],\n-)\n+) {\n+\n+  /** If all prefs have been specified, there's no point in looking at even more\n+    * preferences from lower priority user groups (since they'll all be ignored).\n+    */\n+  def everythingSpecified: Bo =\n+        maySeeMyBriefBioTrLv.nonEmpty &&\n+        maySeeMyMembershipsTrLv.nonEmpty &&\n+        maySeeMyProfileTrLv.nonEmpty &&\n+        mayFindMeTrLv.nonEmpty &&\n+        maySeeMyPresenceTrLv.nonEmpty &&\n+        maySeeMyApproxStatsTrLv.nonEmpty &&\n+        seeActivityMinTrustLevel.nonEmpty &&\n+        maySendMeDmsTrLv.nonEmpty &&\n+        mayMentionMeTrLv.nonEmpty\n+\n+  def addMissing(other: MemberPrivacyPrefs): MemberPrivacyPrefs = {\n+    val t = this\n+    val o = other\n+    MemberPrivacyPrefs(\n+          maySeeMyBriefBioTrLv = t.maySeeMyBriefBioTrLv orElse o.maySeeMyBriefBioTrLv,\n+          maySeeMyMembershipsTrLv = t.maySeeMyMembershipsTrLv orElse o.maySeeMyMembershipsTrLv,\n+          maySeeMyProfileTrLv = t.maySeeMyProfileTrLv orElse o.maySeeMyProfileTrLv,\n+          mayFindMeTrLv = t.mayFindMeTrLv orElse o.mayFindMeTrLv,\n+          maySeeMyPresenceTrLv = t.maySeeMyPresenceTrLv orElse o.maySeeMyPresenceTrLv,\n+          maySeeMyApproxStatsTrLv = t.maySeeMyApproxStatsTrLv orElse o.maySeeMyApproxStatsTrLv,\n+          seeActivityMinTrustLevel = t.seeActivityMinTrustLevel orElse o.seeActivityMinTrustLevel,\n+          maySendMeDmsTrLv = t.maySendMeDmsTrLv orElse o.maySendMeDmsTrLv,\n+          mayMentionMeTrLv = t.mayMentionMeTrLv orElse o.mayMentionMeTrLv,\n+          )\n+  }\n+}\n \n \n object MemberPrivacyPrefs {\n-  val empty: MemberPrivacyPrefs = MemberPrivacyPrefs(None, None, None)\n+  val empty: MemberPrivacyPrefs = MemberPrivacyPrefs(\n+        None, None, None, None, None, None, None, None, None)\n }\n \n \n@@ -1626,7 +1784,7 @@ class BuiltInPat extends Participant {\n   def isModerator = false\n   def isGroup = false\n   def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n-  override def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember ; SHOULD // CHANGE to TrustLevel.Stranger\n+  override def effectiveTrustLevel: TrustLevel = TrustLevel.Stranger\n   def usernameOrGuestName: String = UnknownUserName\n   def nameOrUsername: String = UnknownUserName\n   def anyName: Opt[St] = Some(UnknownUserName)\n@@ -1766,6 +1924,18 @@ object Group {\n   // Everyone   (incl people w/o any account)\n   // EveryoneWithAccount\n \n+  // Distant future: If it'll be possible to e.g. have someone from outside one's\n+  // organization join a chat channel, but that person shouldn't have a regular\n+  // user account with a username, maybe some kind of \"authenticated guest\" can make\n+  // sense? (No username reduces the risk that anyone accidentally @mentions such\n+  // a not-company-employee-but-just-a-guest person.)\n+  //\n+  // val Authenticated = 11  // and bump other group ids, in a db migr? [authnd_guests_group]\n+\n+  // Priorities: [group_priorities] Each trust level group will have a priority matching\n+  // its id here, but probably some offset, so the ids start at ... 1? not 11.\n+  // And maybe in steps of ... 2?  or 10?  so can add \"forgotten\" groups in-between.\n+\n   /** All higher trust level members are members of this group too. And so on:\n     * members >= Basic are all members of Basic, too. So this group includes all\n     * people who have created an account at the website.\n@@ -1778,7 +1948,7 @@ object Group {\n \n   val BasicMembersId = 12\n   val FullMembersId = 13\n-  //  GoodMembersId = ?\n+  //  GoodMembersId = ?, no, HelpfulMembers?  [new_trust_levels]\n   val TrustedMembersId = 14\n   val RegularMembersId = 15  ; RENAME // to TrustedVeterans? In typescript  model.ts  too\n   val CoreMembersId = 16"
    },
    {
      "sha": "2b7be5861edc49c308b06d837850c1cf53d1a84d",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PageUsersSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -360,7 +360,7 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n         case\n           when u.suspended_at is not null then ${TrustLevel.StrangerDummyLevel}\n           when u.is_admin then ${TrustLevel.AdminDummyLevel}\n-          when u.is_moderator then ${TrustLevel.ModeratorDummyLevel}\n+          when u.is_moderator then ${TrustLevel.StaffDummyLevel}\n           else coalesce(u.locked_trust_level, u.trust_level)\n         end trust_level\n       from page_users3 pu left join users3 u"
    },
    {
      "sha": "4df5767b11e93df5c3b2572dbfd14c1bb308a00f",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbUtil.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -210,6 +210,12 @@ object RdbUtil {\n       avatar_small_base_url,\n       avatar_small_hash_path,\n       ui_prefs,\n+      may_see_my_brief_bio_tr_lv_c,\n+      may_see_my_memberships_tr_lv_c,\n+      may_see_my_profile_tr_lv_c,\n+      may_see_me_in_lists_tr_lv_c,\n+      may_see_if_im_online_tr_lv_c,\n+      may_see_my_approx_stats_tr_lv_c,\n       may_see_my_activity_tr_lv_c,\n       may_mention_me_tr_lv_c,\n       may_dir_msg_me_tr_lv_c,\n@@ -253,6 +259,12 @@ object RdbUtil {\n       |u.avatar_small_base_url,\n       |u.avatar_small_hash_path,\n       |u.ui_prefs, ${\"\" /* WOULD exclude here, if had time to micro optimize */}\n+      |u.may_see_my_brief_bio_tr_lv_c,\n+      |u.may_see_my_memberships_tr_lv_c,\n+      |u.may_see_my_profile_tr_lv_c,\n+      |u.may_see_me_in_lists_tr_lv_c,\n+      |u.may_see_if_im_online_tr_lv_c,\n+      |u.may_see_my_approx_stats_tr_lv_c,\n       |u.may_see_my_activity_tr_lv_c,\n       |u.may_mention_me_tr_lv_c,\n       |u.may_dir_msg_me_tr_lv_c,\n@@ -440,6 +452,7 @@ object RdbUtil {\n     |may_see_my_medium_avatar_tr_lv_c,\n     |may_see_my_brief_bio_tr_lv_c,\n     |may_see_my_full_bio_tr_lv_c,\n+    |may_see_my_memberships_tr_lv_c,\n     |may_see_my_profile_tr_lv_c,\n     |may_see_me_in_lists_tr_lv_c,\n     |may_see_if_im_online_tr_lv_c,\n@@ -513,9 +526,9 @@ object RdbUtil {\n       return Anonym(\n           id = patId,\n           createdAt = getWhen(rs, \"created_at\"),\n-          anonForPatId = getInt32(rs, \"u_true_id_c\"),\n+          anonForPatId = getInt32(rs, \"true_id_c\"),\n           anonStatus = anonStatus.get,\n-          anonOnPageId = getString(rs, \"u_anon_on_page_id_st_c\"))\n+          anonOnPageId = getString(rs, \"anon_on_page_id_st_c\"))\n     }\n \n     Guest(\n@@ -579,6 +592,12 @@ object RdbUtil {\n \n   def getPrivPrefs(rs: js.ResultSet): MemberPrivacyPrefs = {\n     MemberPrivacyPrefs(\n+          maySeeMyBriefBioTrLv = getOptTrustLevel(rs, \"may_see_my_brief_bio_tr_lv_c\"),\n+          maySeeMyMembershipsTrLv = getOptTrustLevel(rs, \"may_see_my_memberships_tr_lv_c\"),\n+          maySeeMyProfileTrLv = getOptTrustLevel(rs, \"may_see_my_profile_tr_lv_c\"),\n+          mayFindMeTrLv = getOptTrustLevel(rs, \"may_see_me_in_lists_tr_lv_c\"),\n+          maySeeMyPresenceTrLv = getOptTrustLevel(rs, \"may_see_if_im_online_tr_lv_c\"),\n+          maySeeMyApproxStatsTrLv = getOptTrustLevel(rs, \"may_see_my_approx_stats_tr_lv_c\"),\n           seeActivityMinTrustLevel = getOptTrustLevel(rs, \"may_see_my_activity_tr_lv_c\"),\n           maySendMeDmsTrLv = getOptTrustLevel(rs, \"may_dir_msg_me_tr_lv_c\"),\n           mayMentionMeTrLv = getOptTrustLevel(rs, \"may_mention_me_tr_lv_c\"),"
    },
    {
      "sha": "41e4b984809ea08d1c2325b3a9bc39ecc9e72b26",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "status": "modified",
      "additions": 73,
      "deletions": 82,
      "changes": 155,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -342,14 +342,20 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n             summary_email_if_active,\n             -- grants_trust_level,  — later\n             ui_prefs,\n+            may_see_my_brief_bio_tr_lv_c,\n+            may_see_my_memberships_tr_lv_c,\n+            may_see_my_profile_tr_lv_c,\n+            may_see_me_in_lists_tr_lv_c,\n+            may_see_if_im_online_tr_lv_c,\n+            may_see_my_approx_stats_tr_lv_c,\n             may_see_my_activity_tr_lv_c,\n             may_mention_me_tr_lv_c,\n             may_dir_msg_me_tr_lv_c,\n             max_upload_bytes_c,\n             allowed_upload_extensions_c,\n             can_see_others_email_adrs_c,\n             is_group)\n-          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true) \"\"\"\n+          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true) \"\"\"\n \n     val values = List(\n           siteId.asAnyRef,\n@@ -362,6 +368,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           group.summaryEmailIfActive.orNullBoolean,\n           //group.grantsTrustLevel.map(_.toInt).orNullInt,\n           group.uiPrefs.orNullJson,\n+          group.privPrefs.maySeeMyBriefBioTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyMembershipsTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyProfileTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.mayFindMeTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyPresenceTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyApproxStatsTrLv.map(_.toInt).orNullInt,\n           group.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n           group.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n           group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n@@ -406,6 +418,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         summary_email_if_active = ?,\n         -- grants_trust_level = ?,  — later\n         ui_prefs = ?,\n+        may_see_my_brief_bio_tr_lv_c = ?,\n+        may_see_my_memberships_tr_lv_c = ?,\n+        may_see_my_profile_tr_lv_c = ?,\n+        may_see_me_in_lists_tr_lv_c = ?,\n+        may_see_if_im_online_tr_lv_c = ?,\n+        may_see_my_approx_stats_tr_lv_c = ?,\n         may_see_my_activity_tr_lv_c = ?,\n         may_mention_me_tr_lv_c = ?,\n         may_dir_msg_me_tr_lv_c = ?,\n@@ -424,6 +442,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           group.summaryEmailIfActive.orNullBoolean,\n           //group.grantsTrustLevel.map(_.toInt).orNullInt,\n           group.uiPrefs.orNullJson,\n+          group.privPrefs.maySeeMyBriefBioTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyMembershipsTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyProfileTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.mayFindMeTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyPresenceTrLv.map(_.toInt).orNullInt,\n+          group.privPrefs.maySeeMyApproxStatsTrLv.map(_.toInt).orNullInt,\n           group.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n           group.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n           group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n@@ -445,10 +469,10 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId] = {\n     val builtInGroups = ppt match {\n       case _: Guest | _: Anonym | UnknownParticipant => return Vector(Group.EveryoneId)\n-      case u: User => getBuiltInGroupIdsForUser(u)\n-      case u: UserInclDetails => getBuiltInGroupIdsForUser(u)\n+      case u: User => Pat.getBuiltInGroupIdsForUser(u)\n+      case u: UserInclDetails => Pat.getBuiltInGroupIdsForUser(u)\n       case _: UserBase => die(\"TyE26MP431\", \"Should see User or UserInclDetails before UserBase\")\n-      case g: Group => getBuiltInGroupIdsForGroup(g)\n+      case g: Group => Pat.getBuiltInGroupIdsForGroup(g)\n     }\n \n     // The system users cannot be placed in custom groups.\n@@ -457,7 +481,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n     val customGroups = loadCustomGroupsFor(ppt.id)\n     // More specific first: the user henself, then custom groups. And AllMembers and Everyone\n-    // last — the least specific groups.\n+    // last — the least specific groups.\n+    CLEAN_UP // Adding ppt.id here is annoying! [own_id_bef_groups]\n+    // Let callers do instead, where needed.\n     ppt.id +: (customGroups ++ builtInGroups)\n   }\n \n@@ -476,76 +502,6 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  private def getBuiltInGroupIdsForUser(member: UserBase): Vector[UserId] = {\n-    val G = Group\n-\n-    if (member.isAdmin)\n-      return Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-\n-    if (member.isModerator)\n-      return Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-\n-    member.effectiveTrustLevel match {\n-      case TrustLevel.Stranger =>\n-        // Cannot happen — members always >= NewMember. But incl this\n-        // anyway — in case will refactor in the future, so can be Stranger.\n-        Vector(G.EveryoneId)\n-      case TrustLevel.NewMember =>\n-        Vector(G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.BasicMember =>\n-        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.FullMember =>\n-        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.TrustedMember =>\n-        Vector(G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.RegularMember =>\n-        Vector(G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.CoreMember =>\n-        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-    }\n-  }\n-\n-\n-  private def getBuiltInGroupIdsForGroup(group: Group): Vector[UserId] = {\n-    val G = Group\n-    group.id match {\n-      case G.EveryoneId =>\n-        Vector(G.EveryoneId)\n-      case G.AllMembersId =>\n-        Vector(G.AllMembersId, G.EveryoneId)\n-      case G.BasicMembersId =>\n-        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.FullMembersId =>\n-        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.TrustedMembersId =>\n-        Vector(G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.RegularMembersId =>\n-        Vector(G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.CoreMembersId =>\n-        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.StaffId =>\n-        Vector(G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.ModeratorsId =>\n-        Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.AdminsId =>\n-        Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case _ =>\n-        // Custom groups are members, so should be in the all-members group, right.\n-        Vector(G.AllMembersId, G.EveryoneId)\n-    }\n-  }\n-\n-\n   def nextGuestId: UserId = {\n     val query = s\"\"\"\n       select least(min(user_id) - 1, ${Participant.MaxCustomGuestId})\n@@ -642,13 +598,20 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n             IS_OWNER, IS_ADMIN, IS_MODERATOR,\n             about, website, country,\n             ui_prefs,\n+            may_see_my_brief_bio_tr_lv_c,\n+            may_see_my_memberships_tr_lv_c,\n+            may_see_my_profile_tr_lv_c,\n+            may_see_me_in_lists_tr_lv_c,\n+            may_see_if_im_online_tr_lv_c,\n+            may_see_my_approx_stats_tr_lv_c,\n             may_see_my_activity_tr_lv_c,\n-            may_mention_me_tr_lv_c, may_dir_msg_me_tr_lv_c,\n+            may_mention_me_tr_lv_c,\n+            may_dir_msg_me_tr_lv_c,\n             trust_level, locked_trust_level, threat_level, locked_threat_level,\n             deactivated_at, deleted_at)\n         values (\n-            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n-            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n+            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n+            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n         \"\"\",\n         List[AnyRef](\n           siteId.asAnyRef,\n@@ -673,6 +636,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           user.website.trimOrNullVarchar,\n           user.country.trimOrNullVarchar,\n           user.uiPrefs.orNullJson,\n+          user.privPrefs.maySeeMyBriefBioTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.maySeeMyMembershipsTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.maySeeMyProfileTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.mayFindMeTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.maySeeMyPresenceTrLv.map(_.toInt).orNullInt,\n+          user.privPrefs.maySeeMyApproxStatsTrLv.map(_.toInt).orNullInt,\n           user.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n           user.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n           user.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n@@ -1142,6 +1111,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         avatar_medium_base_url = ?,\n         avatar_medium_hash_path = ?,\n         ui_prefs = ?,\n+        may_see_my_brief_bio_tr_lv_c = ?,\n+        may_see_my_memberships_tr_lv_c = ?,\n+        may_see_my_profile_tr_lv_c = ?,\n+        may_see_me_in_lists_tr_lv_c = ?,\n+        may_see_if_im_online_tr_lv_c = ?,\n+        may_see_my_approx_stats_tr_lv_c = ?,\n         may_see_my_activity_tr_lv_c = ?,\n         may_mention_me_tr_lv_c = ?,\n         may_dir_msg_me_tr_lv_c = ?,\n@@ -1186,6 +1161,12 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n       user.mediumAvatar.map(_.baseUrl).orNullVarchar,\n       user.mediumAvatar.map(_.hashPath).orNullVarchar,\n       user.uiPrefs.orNullJson,\n+      user.privPrefs.maySeeMyBriefBioTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.maySeeMyMembershipsTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.maySeeMyProfileTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.mayFindMeTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.maySeeMyPresenceTrLv.map(_.toInt).orNullInt,\n+      user.privPrefs.maySeeMyApproxStatsTrLv.map(_.toInt).orNullInt,\n       user.privPrefs.seeActivityMinTrustLevel.map(_.toInt).orNullInt,\n       user.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n       user.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n@@ -1243,21 +1224,31 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n   // See also:  loadUsersWithUsernamePrefix(usernamePrefix, ...): Seq[User]\n   //\n-  def listUsernamesOnPage(pageId: PageId): Seq[NameAndUsername] = {\n-    val sql = \"\"\"\n+  COULD_OPTIMIZE // Don't need to load all UserBr fields. Previously loaded just\n+  // NameAndUsername,  but that's too little — need privacy prefs and trust level too\n+  // (but now we load too much, instead).\n+  def listUsernamesOnPage(pageId: PageId): ImmSeq[UserBr] = {\n+    // Later, once bookmarks impl: [dont_list_bookmarkers] and don't list [priv_comts] authors.\n+    /* Was, but not enough:\n       select distinct\n           u.user_id,\n           u.full_name,\n           u.USERNAME,\n           u.may_mention_me_tr_lv_c,\n           u.why_may_not_mention_msg_me_html_c\n+    */\n+    // Later, by default exclude deleted & banned users? [mention_all_cb]\n+    val sql = s\"\"\"\n+      select $UserSelectListItemsNoGuests\n       from posts3 p inner join users3 u    -- + pat_node_rels_t [AuthorOf]\n          on p.SITE_ID = u.SITE_ID\n         and p.CREATED_BY_ID = u.USER_ID\n         and u.USERNAME is not null\n       where p.SITE_ID = ? and p.PAGE_ID = ?\"\"\"\n     val values = List(siteId.asAnyRef, pageId)\n-    runQueryFindMany(sql, values, rs => {\n+    runQueryFindMany(sql, values, getUser)\n+\n+    /* Was: rs => {\n       val userId = rs.getInt(\"user_id\")\n       val fullName = Option(rs.getString(\"full_name\")) getOrElse \"\"\n       val username = rs.getString(\"USERNAME\")\n@@ -1266,7 +1257,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n       dieIf(username eq null, \"DwE5BKG1\")\n       NameAndUsername(\n             id = userId, fullName = fullName, username = username, mayMentionMeTrLv)\n-    })\n+    }) */\n   }\n \n "
    },
    {
      "sha": "19e85335c9c3e8d01faff47989b03d237cec7209",
      "filename": "appsv/server/controllers/ForumController.scala",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FForumController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -364,6 +364,31 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     OkSafeJson(Json.obj(\"catsWithTopics\" -> catsAndTopics.catsAndTopicsJson))\n   }\n+\n+\n+  /** For creating a table of groups, categories and permissions,\n+    * to get an overview of all permissions.\n+    *\n+    * For _admins_only, for now. Later, could allow mods & core members to use this\n+    * too? — Note that we're using loadCatsJsArrayMaySee() below, so only\n+    * categories the requester can see are included.\n+    * However, too many pemissions get loaded (namely all).\n+    */\n+  def inspectForum(): Action[Unit] = AdminGetActionRateLimited(RateLimits.ReadsFromDb) { req =>\n+    import req.dao\n+    val catsJsMaySee = loadCatsJsArrayMaySee(req)\n+    val groupsMaySee = dao.getGroupsAndStatsReqrMaySee(req.requesterOrUnknown)\n+    val allPerms = dao.readTx(_.loadPermsOnPages())\n+\n+    OkSafeJson(  // ts: InspectForumResp\n+        Json.obj(\n+            \"catsMaySee\" -> catsJsMaySee,\n+            \"groupsMaySee\" -> groupsMaySee.map(JsGroupAndStatsVb(_, isStaff = req.isStaff)),\n+            // This is for _admins_only: (hence `AdminGetAction...` above)\n+            \"allPerms\" -> allPerms.map(JsonMaker.permissionToJson),\n+            ))\n+  }\n+\n }\n \n "
    },
    {
      "sha": "d70fe9a18fe23d9adadabf0f5b23ac69ae9b91df",
      "filename": "appsv/server/controllers/ModerationController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FModerationController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FModerationController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FModerationController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -67,7 +67,7 @@ class ModerationController @Inject()(cc: ControllerComponents, edContext: TyCont\n           \"numOther\" -> reviewTaskCounts.numOther),\n         // [missing_tags_feats] load user badges too, and page tags\n         // And change to \"pats\".\n-        \"users\" -> usersById.values.map(JsUser(_)),\n+        \"users\" -> usersById.values.map(JsUser(_, inclSuspendedTill = true)),\n         \"pageMetasBrief\" -> pageMetaById.values.map(JsPageMetaBrief)))\n   }\n \n@@ -102,8 +102,12 @@ class ModerationController @Inject()(cc: ControllerComponents, edContext: TyCont\n     val decision = ReviewDecision.fromInt(decisionInt).getOrThrowBadRequest(\n           \"TyE05RKJTR3\", s\"Bad review decision int: $decisionInt\")\n \n-    throwBadRequestIf(decision != ReviewDecision.Accept &&\n-          decision != ReviewDecision.DeletePostOrPage, \"TyE305RKDJ3\",\n+    throwBadRequestIf(decision != ReviewDecision.Accept\n+          && decision != ReviewDecision.DeletePostOrPage,\n+          // Need to fix this first: [incl_all_mod_results], before banning from pages\n+          // (rather than from the review queue). So wait:\n+          // && decision != ReviewDecision.DeleteAndBanSpammer,\n+          \"TyE305RKDJ3\",\n           s\"That decision not allowed here: $decision\")\n \n     val modResult = dao.moderatePostInstantly(postId = postId, postRevNr = postRevNr,"
    },
    {
      "sha": "1fea353525966cd7cda858374418c290d7122a93",
      "filename": "appsv/server/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -107,21 +107,17 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: TyC\n         }\n \n       case None =>\n+        // Don't tell the user that the email address or username doesn't exist; that'd be a\n+        // security issue. Just show the email sent page.\n+        // (Also usernames might be private, e.g. if a community is behind a login wall,\n+        // or if someone has hidden their user profile page. [private_pats])\n         if (isEmailAddress) {\n-          // Don't tell the user that this email address doesn't exist; that'd be a\n-          // security issue. Just show the email sent page.\n           logger.info(o\"\"\"s$siteId: Not sending password reset email to non-existing\n-               email address: $emailOrUsername\"\"\")\n+                email address: $emailOrUsername  [TyMRSTPW_0EML]\"\"\")\n         }\n         else {\n-          // Usernames are publicly visible.\n-          // Unless user is private / name hidden?  [private_pats]  Not impl.\n-          val settings = dao.getWholeSiteSettings()\n-          val notify = !settings.userMustBeAuthenticated\n           logger.info(o\"\"\"s$siteId: Not sending password reset email to non-existing\n-               username: $emailOrUsername, and notifying=$notify hen about it\"\"\")\n-          throwForbiddenIf(notify, \"DwE4KFE03\",\n-                \"There is no user with that username\")\n+                username: $emailOrUsername  [TyMRSTPW_0UN]\"\"\")\n         }\n     }\n "
    },
    {
      "sha": "c04e4e7af1a3cb641a26aa87469e78329a82c4f0",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 201,
      "deletions": 131,
      "changes": 332,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUserController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -33,7 +33,8 @@ import scala.util.Try\n import scala.collection.{mutable => mut}\n import debiki.RateLimits.TrackReadingActivity\n import talkyard.server.{TyContext, TyController}\n-import talkyard.server.authz.Authz\n+import talkyard.server.authz\n+import talkyard.server.authz.{Authz, PatAndPrivPrefs}\n import talkyard.server.security.WhatApiSecret\n import javax.inject.Inject\n import org.scalactic.{Bad, Good}\n@@ -93,7 +94,10 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       val reviewerIds = members.flatMap(_.reviewedById)\n       val suspenderIds = members.flatMap(_.suspendedById)\n       val usersById = tx.loadUsersAsMap(reviewerIds ++ suspenderIds)\n-      COULD // later load all groups too, for each user. Not needed now though. [2WHK7PU0]\n+\n+      COULD // later load all groups too, for each user. Will need, if e.g. a moderator\n+      // may not see sbd's details, later. [private_pats] [hidden_profile]\n+\n       val usersJson = JsArray(membersAndStats.map(memberAndStats => {\n         val member: UserInclDetails = memberAndStats._1\n         val anyStats: Option[UserStats] = memberAndStats._2\n@@ -113,21 +117,78 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   def loadUserAnyDetails(who: St): Action[U] = GetActionRateLimited(\n           RateLimits.ReadsFromDb, MinAuthnStrength.EmbeddingStorageSid12) { request =>\n     import request.{dao, requesterOrUnknown}\n+    import dao.siteId\n+\n     // First try looking up by `who` as a  numeric user id. If won't work,\n     // lookup by `who` as username instead.\n \n-    CLEAN_UP // make reusable   [load_pat_stats_grps]\n+    CLEAN_UP // [load_pat_stats_grps]\n     // Don't incl  anyUserStats  inside the member json?\n     // Don't incl  groupIdsMaySee ?\n \n-    var (userJson, anyStatsJson, pat) = Try(who.toInt).toOption match {\n-      case Some(id) => loadPatJsonAnyDetailsById(id, includeStats = true, request)\n-      case None => loadMemberJsonInclDetailsByEmailOrUsername(\n-                                who, includeStats = true, request)\n+    var (patId: PatId, isByUsernameOrEmail) = Try(who.toInt).toOption match {\n+      case Some(id) =>\n+        (id, false)\n+      case None =>\n+        _lookupMemberIdByEmailOrUsername(who, request) match {\n+          case Left(errCodeMsg) =>\n+            throwIndistinguishableNotFound(errCodeMsg._1,\n+                  s\"User '$who' not found by username/email: ${errCodeMsg._2}\")\n+          case Right(pat) =>\n+            COULD_OPTIMIZE // Don't just forget `pat`, to load again below.\n+            // Maybe best approach is to [cache_username_2_user_id] lookups?\n+            (pat.id, true)\n+        }\n     }\n-    val groupsMaySee = dao.getGroupsReqrMaySee(requesterOrUnknown)\n-    val pptGroupIdsMaybeRestr = dao.getOnesGroupIds(pat)\n-    val pptGroupIds = pptGroupIdsMaybeRestr.filter(id => groupsMaySee.exists(g => g.id == id))\n+\n+    val (userJson0, anyStatsJson, pat) =\n+          _loadPatJsonDetailsById(patId, includeStats = true, request) match {\n+          case Left(errCodeMsg) =>\n+            throwIndistinguishableNotFound(errCodeMsg._1,\n+                  s\"Pat id $patId not found: ${errCodeMsg._2}\")\n+          case Right(res) =>\n+            res\n+        }\n+    var userJson = userJson0\n+\n+    val allGroups: Vec[Group] = dao.getAllGroups()\n+\n+    val targetStuff: PatAndPrivPrefs = dao.getPatAndPrivPrefs(pat, allGroups)\n+    val targetsPrivPrefs = targetStuff.privPrefsOfPat\n+\n+    val isReqrSelf = requesterOrUnknown.id == pat.id\n+\n+    // If the user has been deleted, don't allow looking up the anonymized profile,\n+    // via the old username, only via the \"anon12345\" username. (Shouldn't be possible\n+    // to guess and maybe find out an account's old username, after it's been deleted.)\n+    // (This test won't be needed, if old usernames are replaced w hashes. [6UKBWTA2])\n+    val lookingUpDeletedByUsername = pat.isGone && isByUsernameOrEmail &&\n+          // Since deleted, the current username is like \"anon1234\", and it's ok to\n+          // look up by that username, but not any other username.\n+          !pat.anyUsername.is(who)\n+    if (lookingUpDeletedByUsername && !requesterOrUnknown.isStaff) {\n+      dieIf(isReqrSelf, \"TyE4P02FKJT\", \"Deleted user looking at own profile?\")\n+      throwIndistinguishableNotFound(\n+            \"TyEM0SEE_DELDUN\", s\"Pat '$who' deleted\")\n+    }\n+\n+    // Principal's.\n+    // (We'll need to always fetch these groups, in case some of them has the\n+    // future [maySeeProfiles] permission.)\n+    val groupsMaySee = dao.getGroupsReqrMaySee(requesterOrUnknown, Some(allGroups))\n+\n+    val maySeeProfilePage = isReqrSelf || targetsPrivPrefs.maySeeMyProfileTrLv.forall(\n+                              _.isAtMost(requesterOrUnknown.effectiveTrustLevel2))\n+\n+    if (!maySeeProfilePage)\n+      throwIndistinguishableNotFound(\"TyEM0SEEPROFL\")\n+\n+    // Later: [private_pats]\n+    val maySeeGroups = isReqrSelf || targetsPrivPrefs.maySeeMyMembershipsTrLv.forall(\n+                              _.isAtMost(requesterOrUnknown.effectiveTrustLevel2))\n+    val pptGroupIds =\n+          if (!maySeeGroups) Vec.empty\n+          else targetStuff.patsGroupIds.filter(id => groupsMaySee.exists(g => g.id == id))\n \n     // Later, pass to JsUserInclDetails() instead of adding here.\n     val tags: Seq[Tag] = dao.getTags(forPat = Some(pat.id))\n@@ -144,22 +205,39 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     /*val stats =\n       if (maySeeActivity(userId, request.requester, request.dao)) anyStatsJson\n       else JsNull */\n-    userJson += \"anyUserStats\" -> anyStatsJson\n+\n+    val maySeeStats = isReqrSelf || targetsPrivPrefs.maySeeMyApproxStatsTrLv.forall(\n+                              _.isAtMost(requesterOrUnknown.effectiveTrustLevel2))\n+    userJson += \"anyUserStats\" -> (maySeeStats ? anyStatsJson | JsNull)\n+\n+    // Rename? This is the target's groups that the principal may see. [_similar_grp_fld_name]\n     userJson += \"groupIdsMaySee\" -> JsArray(pptGroupIds.map(id => JsNumber(id)))\n+\n     OkSafeJson(Json.obj(\n       \"user\" -> userJson,\n-      // COULD_OPTIMIZE: need only include user's groups — or always incl in the\n-      // volatile json? [305STGW2] — so need not incl here again?\n+      // COULD_OPTIMIZE: need only include user's (the target's) groups — or always incl in the\n+      // volatile json? [305STGW2] — so need not incl here again? No, that's a bad idea:\n+      // Let's say theres a university with over the years hundreds of different classes,\n+      // all public for other students to know about. Then, wouldn't want to send the list\n+      // of all classes always to all browsers.\n+      // Rename? This is the groups the principal may see. [_similar_grp_fld_name]\n       \"groupsMaySee\" -> groupsMaySee.map(JsGroup),\n       \"tagTypes\" -> tagTypes.map(JsTagType)))\n   }\n \n \n-  // A tiny bit dupl code [5YK02F4]\n+  private def _loadPatJsonById(userId: UserId, request: DebikiRequest[_]): JsObject = {\n+    _loadPatJsonDetailsById(userId, includeStats = false, request) match {\n+      case Left(errCodeMsg) => die(errCodeMsg._1, errCodeMsg._2)\n+      case Right(res) => res._1\n+    }\n+  }\n+\n+\n   // Returns (pat-json, pat-stats-json, Pat)\n   //\n-  private def loadPatJsonAnyDetailsById(userId: UserId, includeStats: Bo,\n-        request: DebikiRequest[_]): (JsObject, JsValue, Pat) = {\n+  private def _loadPatJsonDetailsById(userId: UserId, includeStats: Bo,\n+        request: DebikiRequest[_]): Either[(St, St), (JsObject, JsValue, Pat)] = {\n     import request.dao\n \n     val settings = dao.getWholeSiteSettings()\n@@ -174,23 +252,28 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       val stats = includeStats ? tx.loadUserStats(userId) | None\n       val (pptJson, pat) =\n         if (Participant.isRoleId(userId)) {\n-          val memberOrGroup = tx.loadTheMemberInclDetails(userId)\n-          val groups = tx.loadGroups(memberOrGroup)\n+          val memberOrGroup = tx.loadMemberInclDetailsById(userId) getOrElse {\n+            return Left((\"TyE03JKR53\", s\"User $userId not found\"))\n+          }\n           val json = memberOrGroup match {\n             case m: UserInclDetails =>\n+              val groups = tx.loadGroups(memberOrGroup)\n               JsUserInclDetails(m, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n                     callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself,\n                     maySeePresence = settings.enablePresence,\n                     sensitiveAnonDisc = settings.enableAnonSens,\n                     reqrPerms = Some(reqrPerms))\n             case g: Group =>\n-              jsonForGroupInclDetails(g, callerIsAdmin = callerIsAdmin,\n+              val ancestorGroups = tx.loadGroupsAncestorGroups(g)\n+              jsonForGroupInclDetails(g, ancestorGroups, callerIsAdmin = callerIsAdmin,\n                     callerIsStaff = callerIsStaff, reqrPerms = Some(reqrPerms))\n           }\n           (json, memberOrGroup)\n         }\n         else {\n-          val pat = tx.loadTheParticipant(userId)\n+          val pat = tx.loadParticipant(userId) getOrElse {\n+            return Left((\"TyE03JKR57\", s\"Guest or Anonym $userId not found\"))\n+          }\n           val json = pat match {\n             case anon: Anonym => JsPat(anon, TagsAndBadges.None)\n             case guest: Guest => jsonForGuest(guest, Map.empty, callerIsStaff = callerIsStaff,\n@@ -199,112 +282,82 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           (json, pat.asInstanceOf[ParticipantInclDetails])\n         }\n       dieIf(pat.id != userId, \"TyE36WKDJ03\")\n-      (pptJson,\n+      val statsJson =\n           stats.map(JsUserStats(_, Some(reqrPerms), callerIsStaff = callerIsStaff,\n                 callerIsUserHerself = callerIsUserHerself,\n                 callerIsAdmin = callerIsAdmin, maySeePresence = settings.enablePresence,\n-                sensitiveAnonDisc = settings.enableAnonSens)).getOrElse(JsNull),\n-          pat.noDetails)\n+                sensitiveAnonDisc = settings.enableAnonSens)).getOrElse(JsNull)\n+      Right((pptJson, statsJson,\n+          pat.noDetails))\n     }\n   }\n \n \n-  // A tiny bit dupl code [5YK02F4]\n-  private def loadMemberJsonInclDetailsByEmailOrUsername(emailOrUsername: String,\n-        includeStats: Boolean, request: DebikiRequest[_])\n-        : (JsObject, JsValue, Participant) = {\n-    import request.{dao}\n+  private def _lookupMemberIdByEmailOrUsername(emailOrUsername: String,\n+        request: DebikiRequest[_]): Either[(St, St), PatVb] = {\n \n-    val settings = dao.getWholeSiteSettings()\n-    val callerIsStaff = request.user.exists(_.isStaff)\n     val callerIsAdmin = request.user.exists(_.isAdmin)\n-    val reqrPerms: EffPatPerms =\n-          dao.deriveEffPatPerms(request.authzContext.groupIdsEveryoneLast)\n \n     // For now, unless admin, don't allow emails, so cannot brut-force test email addresses.\n     if (emailOrUsername.contains(\"@\") && !callerIsAdmin)\n-      throwForbidden(\"EsE4UPYW2\", \"Lookup by email not allowed\")\n+      return Left((\"EsE4UPYW2\", \"Lookup by email not allowed\"))\n \n     val isEmail = emailOrUsername.contains(\"@\")\n     if (isEmail)\n-      throwNotImplemented(\"EsE5KY02\", \"Lookup by email not implemented\")\n+      return Left((\"EsE5KY02\", \"Lookup by email not implemented\"))\n \n+    COULD_OPTIMIZE // Cache username —> user id + all hans usernames. [cache_username_2_user_id]\n     request.dao.readOnlyTransaction { tx =>\n       val member = tx.loadMemberVbByUsername(emailOrUsername) getOrElse {\n+        // Later, once lookup-by-email supported, if no user found:\n         if (isEmail)\n-          throwNotFound(\"EsE4PYW20\", \"User not found\")\n+          return Left((\"EsE4PYW20\", \"User not found\"))\n \n         // Username perhaps changed? Then ought to update the url, browser side [8KFU24R]\n         val possibleUserIds = tx.loadUsernameUsages(emailOrUsername).map(_.userId).toSet\n         if (possibleUserIds.isEmpty)\n-          throwNotFound(\"EsEZ6F0U\", \"User not found\")\n+          return Left((\"EsEZ6F0U\", \"User not found, or their profile isn't public\"))\n \n         if (possibleUserIds.size > 1)\n-          throwNotFound(\"EsE4AK7B\", \"Many users with this username, weird\")\n+          return Left((\"EsE4AK7B\", \"Many users with this username, weird\"))\n \n         val userId = possibleUserIds.head\n \n-        // If the user has been deleted, don't allow looking up the anonymized profile,\n-        // via the old username. (This !isGone test won't be needed, if old usernames are\n-        // replaced with hashes. [6UKBWTA2])\n-        tx.loadMemberInclDetailsById(userId).filter(_ match {\n-          case member: UserInclDetails => !member.isGone || callerIsStaff\n-          case _ => true\n-        }) getOrElse throwNotFound(\"EsE8PKU02\", \"User not found\")\n-      }\n-\n-      // Later, check if the requester may see the member. [private_pats]\n-\n-      val groups = tx.loadGroups(member)\n-\n-      member match {\n-        case user: UserVb =>\n-          val stats = includeStats ? tx.loadUserStats(user.id) | None\n-          val callerIsUserHerself = request.user.exists(_.id == user.id)\n-          val isStaffOrSelf = callerIsStaff || callerIsUserHerself\n-          val userJson = JsUserInclDetails(\n-                user, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n-                callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself,\n-                maySeePresence = settings.enablePresence,\n-                sensitiveAnonDisc = settings.enableAnonSens,\n-                reqrPerms = Some(reqrPerms))\n-          (userJson,\n-              stats.map(JsUserStats(_, Some(reqrPerms),\n-                    callerIsStaff = callerIsStaff, callerIsAdmin = callerIsAdmin,\n-                    callerIsUserHerself = callerIsUserHerself,\n-                    maySeePresence = settings.enablePresence,\n-                    sensitiveAnonDisc = settings.enableAnonSens,\n-                    )).getOrElse(JsNull),\n-              user.noDetails)\n-        case group: GroupVb =>\n-          val groupJson = jsonForGroupInclDetails(\n-                group, callerIsAdmin = callerIsAdmin, callerIsStaff = callerIsStaff,\n-                reqrPerms = Some(reqrPerms))\n-          (groupJson, JsNull, group)\n+        tx.loadMemberInclDetailsById(userId) getOrElse {\n+          return Left((\"TyE0USR0638\", s\"User with username $emailOrUsername hard deleted\"))\n+        }\n       }\n+      Right(member)\n     }\n   }\n \n \n   /** [Dupl_perms] Nowadays, could be enough with reqrPerms — and remove\n     * callerIsAdmin/Staff?\n     */\n-  private def jsonForGroupInclDetails(group: Group, callerIsAdmin: Bo,\n+  private def jsonForGroupInclDetails(group: Group, ancestorGroups: ImmSeq[Group],\n+        callerIsAdmin: Bo,\n         callerIsStaff: Bo = false, reqrPerms: Opt[EffPatPerms] = None): JsObject = {\n-    var json = Json.obj(   // hmm a bit dupl code [B28JG4]  also in JsGroup\n-      \"id\" -> group.id,\n-      \"isGroup\" -> JsTrue,\n-      //\"createdAtEpoch\" -> JsWhen(group.createdAt),\n-      \"username\" -> group.theUsername,\n-      \"fullName\" -> JsStringOrNull(group.name))\n-\n-    // These currently needs to be public, so others get to know if they cannot\n-    // mention or message this user. [some_pub_priv_prefs]\n+    var json = JsGroup(group)\n+\n     val privPrefs = group.privPrefs\n-    json = json.addAnyInt32(\"maySendMeDmsTrLv\", privPrefs.maySendMeDmsTrLv)\n-    json = json.addAnyInt32(\"mayMentionMeTrLv\", privPrefs.mayMentionMeTrLv)\n-    json = json.addAnyInt32(\"seeActivityMinTrustLevel\", privPrefs.seeActivityMinTrustLevel)\n \n+    // Own and default prefs needed, if staff wants to edit.\n+    if (callerIsStaff) {\n+      json += \"privPrefsOwn\" -> JsPrivPrefs(privPrefs)\n+      // So can show the default priv prefs, on the priv prefs tab.\n+      val defaults = Authz.deriveDefaultPrivPrefs(ancestorGroups)\n+      json += \"privPrefsDef\" -> JsPrivPrefs(defaults)\n+    }\n+\n+    // These needs to be public, so others get to know if they cannot\n+    // mention or message this group. [some_pub_priv_prefs] (& bit dupl code)\n+    val effPrefs = Authz.derivePrivPrefs(group, ancestorGroups)\n+    json = json.addAnyInt32(\"maySendMeDmsTrLv\", effPrefs.maySendMeDmsTrLv)\n+    json = json.addAnyInt32(\"mayMentionMeTrLv\", effPrefs.mayMentionMeTrLv)\n+    json = json.addAnyInt32(\"maySeeMyActivityTrLv\", effPrefs.seeActivityMinTrustLevel)\n+\n+    // A bit dupl code [B28JG4]  also in JsGroupInclDetailsForExport\n     if (callerIsStaff) {\n       json += \"summaryEmailIntervalMins\" -> JsNumberOrNull(group.summaryEmailIntervalMins)\n       json += \"summaryEmailIfActive\" -> JsBooleanOrNull(group.summaryEmailIfActive)\n@@ -322,7 +375,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         perms.canSeeOthersEmailAdrs.foreach(v =>\n               permsJo += \"canSeeOthersEmailAdrs\" -> JsBoolean(v))\n       }\n-      json += \"perms\" -> permsJo\n+      json += \"perms\" -> permsJo  // should incl here too: [perms_missing]\n     }\n     json\n   }\n@@ -1357,7 +1410,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       case None =>\n         // May not know who the members are.\n         JsFalse\n-      case Some(membs: Vec[Pat]) =>\n+      case Some(membs: ImmSeq[UserBase]) =>\n         // [missing_tags_feats]  load tags and tag types, incl here.\n         JsArray(membs.map(JsUser(_)))\n     }\n@@ -1381,19 +1434,17 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   }\n \n \n-  SECURITY // don't allow if user listing disabled, & isn't staff [8FKU2A4]\n   CHECK_AUTHN_STRENGTH // maybe sometimes not allowed from embedded comments pages?\n   def listAllUsers(usernamePrefix: St): Action[U] = GetActionRateLimited(\n           RateLimits.ReadsFromDb, MinAuthnStrength.EmbeddingStorageSid12) { request =>\n     // Authorization check: Is a member? Add MemberGetAction?\n     request.theMember\n \n-    val json = listAllUsersImpl(usernamePrefix, request)\n+    val json = _listAllUsersImpl(usernamePrefix, request)\n     OkSafeJson(json)\n   }\n \n \n-  SECURITY // user listing disabled? [8FKU2A4]\n   CHECK_AUTHN_STRENGTH // maybe sometimes not allowed from embedded comments pages?\n   def listMembersPubApi(usernamePrefix: String, usersOnly: Boolean)\n         : Action[Unit] = GetAction { request =>\n@@ -1402,7 +1453,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     throwForbiddenIf(!request.siteSettings.enableApi,\n       \"TyE4305RKCGL4\", o\"\"\"API not enabled. If you're admin, you can enable it\n          in the Admin Area | Settings | Features tab.\"\"\")\n-    val json = listAllUsersImpl(usernamePrefix, request)\n+    val json = _listAllUsersImpl(usernamePrefix, request)\n     dieIf(!usersOnly, \"TyE206KTTR4\")  // else: return a 'groups:...' or 'members:' field\n     OkApiJson(\n       // [PUB_API] Wrap in an obj, so, later on, we can add more things (fields)\n@@ -1413,30 +1464,24 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   }\n \n \n-  private def listAllUsersImpl(usernamePrefix: String, request: ApiRequest[_]): JsArray = {\n-    import request.requester\n+  private val _ListUsersLimit = 50\n+\n+  private def _listAllUsersImpl(usernamePrefix: String, request: ApiRequest[_]): JsArray = {\n+    import request.{requester, requesterOrUnknown, dao}\n     // Also load deleted anon12345 members. Simpler, and they'll typically be very few or none. [5KKQXA4]\n     // ... stop doing that?\n-    val members = request.dao.loadUsersWithUsernamePrefix(\n-      usernamePrefix, caseSensitive = false, limit = 50)\n-    JsArray(\n-      members map { member =>\n-        // [PUB_API] .ts: ListUsersApiResponse, ListGroupsApiResponse, ListMembersApiResponse\n-        val jOb = Json.obj(\n-              \"id\" -> member.id,\n-              \"username\" -> member.username,\n-              \"fullName\" -> member.fullName)\n-        _plusAnyNotMention(requester, member.privPrefs.mayMentionMeTrLv, jOb)\n-      })\n+    val patsPrefsMayList: ImmSeq[PatAndPrivPrefs] = dao.loadUserMayListByPrefix(\n+          usernamePrefix, caseSensitive = false, limit = _ListUsersLimit, requesterOrUnknown)\n+    _mkMentionOptionsJson(patsPrefsMayList, requester)\n   }\n \n \n   /** Listing usernames on a particular page is okay, if one may see the page\n-    * — however, listing all usernames for the whole site, isn't always okay. [8FKU2A4]\n+    * — however, listing all usernames for the whole site, isn't always okay.\n     */\n   def listUsernames(pageId: PageId, prefix: St): Action[U] = GetActionRateLimited(\n           RateLimits.ReadsFromDb, MinAuthnStrength.EmbeddingStorageSid12) { request =>\n-    import request.{dao, requester}\n+    import request.{dao, requester, requesterOrUnknown}\n \n     SECURITY // Later: skip authors of hidden / deleted / private comments.  [priv_comts]\n     // & bookmarks, once implemented. [dont_list_bookmarkers]\n@@ -1449,25 +1494,53 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     dao.throwIfMayNotSeePage2(pageId, request.reqrTargetSelf)(anyTx = None)\n \n     // Also load deleted anon12345 members. Simpler, and they'll typically be very few or none. [5KKQXA4]\n+    UX; COULD // Show a checkbox in the @mention-users list that says if deleted/suspended/banned\n+    // users should get loaded. By default, exclude such users, since they cannot be @mentioned\n+    // anyway (in the sense that they aren't getting notified, won't reply). [mention_all_cb]\n     COULD // load groups too, so it'll be simpler to e.g. mention @support.\n     // But this lists names on a page, but groups won't reply, so won't get listed. Hmm.\n     // Maybe if one has typed >= 3 chars matching any group's or user's username, then,\n     // show that group/user, also if hen hasn't replied on this page?\n     // Or maybe two lists: People on this page, and all others?\n     // There could even be a group setting: [mentions_prio_c], which admins can raise,\n     // for their @support group — maybe then it'd get listed directly if just typing ' @'?\n-    val names = dao.listUsernames(\n-      pageId = pageId, prefix = prefix, caseSensitive = false, limit = 50)\n \n-    val json = JsArray(\n-      names map { nameAndUsername =>\n+    // For now, listing by both prefix and page id not implemented.\n+    // Also, unclear if that's what the user wants?  Maybe they *want* to mention\n+    // someone not on the current page?\n+    val patAndPrefs: ImmSeq[PatAndPrivPrefs] = {\n+      if (prefix.nonEmpty) {\n+        dao.loadUserMayListByPrefix(\n+              prefix, caseSensitive = false, limit = _ListUsersLimit, requesterOrUnknown)\n+      }\n+      else {\n+        val users: ImmSeq[UserBr] = dao.listUsernamesOnPage(pageId = pageId)\n+\n+        // Reqr may see page, so can see all users there anyway.\n+        // But maybe may not mention all of them, so we still need everyone's priv prefs.\n+        val allGroups: Vec[Group] = dao.getAllGroups()\n+        dao.derivePrivPrefs(users, allGroups)\n+      }\n+    }\n+\n+    val jsArr = _mkMentionOptionsJson(patAndPrefs, requester)\n+    OkSafeJson(jsArr)\n+  }\n+\n+\n+  private def _mkMentionOptionsJson(patAndPrefs: ImmSeq[PatAndPrivPrefs], requester: Opt[Pat])\n+          : JsArray = {\n+    JsArray(patAndPrefs map { (patPrefs: PatAndPrivPrefs) =>\n+        val nameAndUsername = patPrefs.pat\n+        // [PUB_API] .ts: ListUsersApiResponse, ListGroupsApiResponse, ListMembersApiResponse\n         val jOb = Json.obj(\n               \"id\" -> nameAndUsername.id,\n-              \"username\" -> nameAndUsername.username,\n-              \"fullName\" -> nameAndUsername.fullName)\n-        _plusAnyNotMention(requester, nameAndUsername.mayMentionMeTrLv, jOb)\n+              // Currently always present, since we're listing by username.\n+              \"username\" -> JsStringOrNull(nameAndUsername.anyUsername),\n+              // May be missing.\n+              \"fullName\" -> JsStringOrNull(nameAndUsername.anyName))\n+        _plusAnyNotMention(requester, patPrefs.privPrefsOfPat.mayMentionMeTrLv, jOb)\n       })\n-    OkSafeJson(json)\n   }\n \n \n@@ -1496,9 +1569,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     _quickThrowUnlessMayEditPrefs(prefs.userId, request.theRequester)\n     request.dao.saveAboutMemberPrefsIfAuZ(prefs, request.who)\n \n-    // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(\n-          prefs.userId, includeStats = false, request)\n+    val patJson = _loadPatJsonById(prefs.userId, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n \n@@ -1514,9 +1585,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       throwForbidden(\"EdE5PYKW0\", \"Only admins may change group prefs, right now\")\n     dao.saveAboutGroupPrefs(prefs, request.who)\n \n-    // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(\n-          prefs.groupId, includeStats = false, request)\n+    val patJson = _loadPatJsonById(prefs.groupId, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n \n@@ -1528,8 +1597,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val perms: PatPerms = JsX.parsePatPerms(body, siteId)(IfBadAbortReq)\n     dao.savePatPerms(patId, perms, request.who)\n \n-    // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(patId, includeStats = false, request)\n+    val patJson = _loadPatJsonById(patId, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n \n@@ -1607,14 +1675,15 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n \n   def saveMemberPrivacyPrefs: Action[JsValue] = PostJsonAction(RateLimits.ConfigUser,\n-        maxBytes = 100, ignoreAlias = true) { request =>\n+        // Look at Typescript interface PrivacyPrefs — it's around 500 chars, so 1000\n+        // should be ok for a while.\n+        maxBytes = 1000, ignoreAlias = true) { request =>\n     val userId = parseInt32(request.body, \"userId\")\n     val prefs: MemberPrivacyPrefs = JsX.memberPrivacyPrefsFromJson(request.body)\n     _quickThrowUnlessMayEditPrefs(userId, request.theRequester)\n     request.dao.saveMemberPrivacyPrefsIfAuZ(forUserId = userId, prefs, byWho = request.who)\n \n-    // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(userId, includeStats = false, request)\n+    val patJson = _loadPatJsonById(userId, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n \n@@ -1624,7 +1693,10 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val staffOrSelf = requester.isStaff || requester.id == userId\n     throwForbiddenIf(!staffOrSelf, \"TyE5KKQSFW0\", \"May not edit other people's preferences\")\n     throwForbiddenIf(userId < LowestTalkToMemberId,\n-      \"TyE2GKVQ\", \"Cannot configure preferences for this user, it's a built-in user\")\n+            \"TyE2GKVQ\", \"Cannot configure preferences for this user, it's a built-in user\")\n+    throwForbiddenIf(userId == Group.ModeratorsId,\n+            \"TyE2GKVP\", o\"\"\"Cannot configure preferences for moderators — configure for the Staff\n+            group instead.\"\"\"\")  // [0_conf_mod_priv_prefs]\n   }\n \n \n@@ -1641,9 +1713,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n             and other data. Please change the name, e.g. append \"2\".\"\"\")\n     }\n \n-    // Try to reuse: [load_pat_stats_grps]\n-    val (patJson, _, _) = loadPatJsonAnyDetailsById(\n-          guestId, includeStats = false, request)\n+    val patJson = _loadPatJsonById(guestId, request)\n     OkSafeJson(Json.obj(\"patNoStatsNoGroupIds\" -> patJson))\n   }\n "
    },
    {
      "sha": "e2ef941d5163b027ae7c1f2602c031fbf6506720",
      "filename": "appsv/server/debiki/JsonUtils.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -500,14 +500,15 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n      readOptInt(json, field, altName = altField, min = min, max = max)\n \n \n-  def parseOptInt32(json: JsValue, field: St, altField: St = \"\"): Opt[i32] =\n-     readOptInt(json, fieldName = field, altName = altField)\n+  def parseOptInt32(json: JsValue, field: St, altField: St = \"\", alt2: St = \"\"): Opt[i32] =\n+     readOptInt(json, fieldName = field, altName = altField, alt2 = alt2)\n \n \n-  def readOptInt(json: JsValue, fieldName: String, altName: String = \"\",\n+  def readOptInt(json: JsValue, fieldName: String, altName: String = \"\", alt2: St = \"\",\n           min: Opt[i32] = None, max: Opt[i32] = None): Option[Int] = {\n     val firstFieldValue = readOptLong(json, fieldName)\n-    firstFieldValue.orElse(readOptLong(json, altName)) map { valueAsLong =>\n+    firstFieldValue.orElse(readOptLong(json, altName)).orElse(readOptLong(json, alt2)) map {\n+          valueAsLong =>\n       val usedName = if (firstFieldValue.isDefined) fieldName else altName\n       int64To32ThrowIfOutOfRange(valueAsLong, usedName, min = min, max = max)\n     }\n@@ -537,7 +538,7 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n     readOptLong(json, fieldName = fieldName)\n \n   def readOptLong(json: JsValue, fieldName: String): Option[Long] =\n-    (json \\ fieldName).validateOpt[Long] match {\n+    if (fieldName.isEmpty) None else (json \\ fieldName).validateOpt[Long] match {\n       case JsSuccess(value, _) => value\n       case JsError(errors) =>\n         // Will this be readable? Perhaps use json.value[fieldName] match ... instead, above.\n@@ -643,6 +644,9 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n     }\n   }\n \n+  def parseOptTrustLevel(json: JsValue, field: St, altField: St = \"\", alt2: St = \"\")\n+        : Opt[TrustLevel] =\n+    parseOptInt32(json, field, altField = altField, alt2 = alt2).flatMap(TrustLevel.fromInt)\n \n   def parseOptNeverAlways(json: JsValue, field: St, altField: St = \"\"): Opt[NeverAlways] =\n     NeverAlways.fromOptInt(readOptInt(json, fieldName = field, altName = altField))"
    },
    {
      "sha": "4644708395449b30c952e9486b1ea1a6cd139c9a",
      "filename": "appsv/server/debiki/RateLimiter.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimiter.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -120,7 +120,7 @@ class RateLimiter(globals: Globals, security: EdSecurity) {\n       requestTimestamps = timestampsHolder.timestamps.get\n     }\n \n-    val now: UnixTime = (request.ctime.getTime / 1000).toInt // change before year 2038\n+    val now: UnixTime = (request.ctime.getTime / 1000).toInt // change, DO_BEFORE 2038\n \n     throwIfTooManyRequests(effectiveLimits, now, requestTimestamps, key)\n \n@@ -148,6 +148,9 @@ class RateLimiter(globals: Globals, security: EdSecurity) {\n     var numRequestsLast15Seconds = 0\n     var numRequestsLast15Minutes = 0\n     var numRequestsLastDay = 0\n+    // Could [_remember_oldest_ix], would then only need to count the relevant\n+    // timestamps. Could remember the 15 secs, 15 mins, day indexes too — then,\n+    // could just subtract, instead of counting, but higher bug risk.\n     while (index < recentRequestTimestamps.length) {\n       val timestamp = recentRequestTimestamps(index)\n       if (now - timestamp < 15) {\n@@ -195,6 +198,9 @@ class RateLimiter(globals: Globals, security: EdSecurity) {\n     val timestamps = timestampsToCopy.clone()\n     var indexOfOldestTimestamp = 0\n     var oldestTimestamp = Int.MaxValue\n+    COULD_OPTIMIZE // Cache and remember this oldest-index, together with the array?\n+    // So won't have to search and find. But is it worth it? Usually the queue is just\n+    // 20 or 100 long anyway, that's negligible. [_remember_oldest_ix]\n     var index = 0\n     while (index < timestamps.length) {\n       if (timestamps(index) < oldestTimestamp) {"
    },
    {
      "sha": "6a46da57ebb0393ef0938a57debfa2c7691e4cc6",
      "filename": "appsv/server/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimits.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -100,8 +100,6 @@ case class MaxLimits(\n \n \n \n-// CLEAN\n-\n /**\n   * @param maxPerDayNewUser — If unlimited, maxPerDay is used instead.\n   */\n@@ -128,19 +126,23 @@ abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete\n \n \n   def multBy(siteLimits: SiteLimitsMultipliers): RateLimits = {\n+    // Change this? Only multiply, if the limit is for 1) not-logged-in people, that is,\n+    // ip addresses [site_ip_person_limits], or, later, 2) rate limits for the whole site.\n     val anyMultiplier: Opt[f32] =\n           if (isReadLimits is true) {\n             siteLimits.readLimitsMultiplier\n           }\n           else {\n             // Later, would mult by write limits or log limits?\n+            // No, don't? See [site_ip_person_limits].\n             None\n           }\n \n     val m = anyMultiplier getOrElse {\n       return this // unchanged\n     }\n \n+    // Mults by `m` above.\n     def multByM(lim: i32): i32 = {\n       if (lim == Unlimited) Unlimited\n       else {\n@@ -170,6 +172,7 @@ abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete\n     }\n   }\n \n+\n   def isUnlimited(isNewUser: Bo): Bo =\n     maxPerFifteenSeconds == Unlimited &&\n       maxPerFifteenMinutes == Unlimited &&\n@@ -310,10 +313,10 @@ object RateLimits {\n   }\n \n \n-  val ReadsFromCache = ReadsFromDb  // for now\n+  val ReadsFromCache: RateLimits = ReadsFromDb  // for now\n \n \n-  val ReadsFromCacheALot = ReadsFromDb  // for now\n+  val ReadsFromCacheALot: RateLimits = ReadsFromDb  // for now\n \n \n   object AdminWritesToDb extends RateLimits {"
    },
    {
      "sha": "ebd72f924363bbcd44ceee7d5aab07551c507c23",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FReactJson.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1030,9 +1030,14 @@ class JsonMaker(dao: SiteDao) {\n     COULD_OPTIMIZE // cache this?\n     val effPerms = Authz.deriveEffPatPerms(myGroupsEveryoneLast, permsOnSiteTooMany)\n \n+    // Privacy prefs are _not_needed, the reqr can see everything about hanself anyway. Only\n+    // needed, on the user profile page, if editing one's prefs, see: JsUserInclDetails().\n+    // (To derive, see: Authz.deriveDefaultPrivPrefs().)\n+\n     val (threatLevel,\n          tourTipsSeenJson,\n          uiPrefsOwnFirstJsonSeq,\n+         // privacyPrefs — _not_needed, see above.\n          anyStats) = requester match {\n       case member: User =>\n         COULD_OPTIMIZE // load stats together with other user fields, in the same db request"
    },
    {
      "sha": "3cccbd289cf2ea85da63f1e653a06c103fdb431c",
      "filename": "appsv/server/debiki/dao/ReviewsDao.scala",
      "status": "modified",
      "additions": 71,
      "deletions": 19,
      "changes": 90,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -58,6 +58,12 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n   /** This only remembers a *decision* about what to do. The decision is then\n     * carried out, by JanitorActor.executePendingReviewTasks, after a short\n     * undo-decision timeout.\n+    *\n+    * If the decision affects many review tasks — which `DeleteAndBanSpammer` does\n+    * — then, the client dims other Delete button about additional posts by\n+    * the same spammer, so the moderator won't need to click all those too,\n+    * because other posts by the spammer are deleted too, later when\n+    * the review decision gets carried out. [hide_ban_btns]\n     */\n   def makeReviewDecisionIfAuthz(taskId: ReviewTaskId, requester: Who, anyRevNr: Opt[i32],\n         decision: ReviewDecision): U = {\n@@ -215,7 +221,10 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n     // More authz in the tx below.\n \n     dieIf(decision != ReviewDecision.Accept\n-          && decision != ReviewDecision.DeletePostOrPage, \"TYE06SAKHJ34\",\n+          && decision != ReviewDecision.DeletePostOrPage,\n+          // Need to fix this first: [incl_all_mod_results].\n+          // && decision != ReviewDecision.DeleteAndBanSpammer,\n+          \"TYE06SAKHJ34\",\n           s\"Unexpected moderatePostInstantly() decision: $decision\")\n \n     val modResult = writeTx { (tx, staleStuff) =>\n@@ -366,9 +375,45 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n                 InteractAcceptAnswer | InteractWikify | InteractLike =>\n             reviewAcceptPost(post, tasksToAccept = modTasks, decision,\n                   decidedById = decidedById)(tx, staleStuff)\n-          case DeletePostOrPage =>\n-            rejectAndDeletePost(post, decidedById = decidedById, modTasks,\n+          case DeletePostOrPage | DeleteAndBanSpammer =>\n+            var res = rejectAndDeletePost(\n+                  post, decidedById = decidedById, doingTasksNow = modTasks,\n                   browserIdData)(tx, staleStuff)\n+            if (decision == DeleteAndBanSpammer) {\n+              val bannedUser = banUser(post.createdById, reason = \"DeleteAndBanSpammer\",\n+                    bannedById = decidedById)(tx, staleStuff)\n+\n+              // Has the spammer posted more spam? We'll delete it too, by looking up\n+              // other new post mod tasks related to han, and then delete the posts\n+              // and invalidating the mod tasks (which `rejectAndDeletePost()` does).\n+              val moreSpammerModTasks: Seq[ModTask] = tx.loadReviewTasksAboutUser(\n+                    post.createdById, limit = 999, OrderBy.OldestFirst)\n+              // Similar code: [_loop_pending]\n+              val pendingTasks = moreSpammerModTasks.filter(\n+                      t => t.decision.isEmpty && !t.doneOrGone && t.postId.isDefined)\n+              val pendingTasksByPostId = pendingTasks.groupBy(_.postId getOrDie \"TyE4JKR02J7\")\n+              for {\n+                (post2Id, _tasksForPost2) <- pendingTasksByPostId\n+                post2 <- tx.loadPost(post2Id)\n+              } {\n+                // If banning a spammer directly from a page, then, we should return all\n+                // res2:s too to the browser, not only res. [incl_all_mod_results]\n+                // So if a spammer posts a page and a comment on the page, then, if banning\n+                // via the comment, the moderator sees that this deletes the spammer's\n+                // whole page.\n+                val res2 = rejectAndDeletePost(\n+                      post2, decidedById = decidedById,\n+                      // We aren't doing any of these tasks now — the ones we're handling,\n+                      // are `modTasks` for `post` not `post2`.\n+                      // WOULD_OPTIMIZE: This'll load  the mod tasks about `post2` again,\n+                      // via `tx.loadReviewTasksAboutPostIds()`, although we have them\n+                      // already in _tasksForPost2, oh well.\n+                      doingTasksNow = Nil, browserIdData)(tx, staleStuff)\n+              }\n+\n+              res = res.copy(bannedUser = Some(bannedUser))\n+            }\n+            res\n         }\n \n     completeModTasksMaybeSpamCheckTask(post, modTasks, decision, decidedById = decidedById\n@@ -427,7 +472,8 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n   }\n \n \n-  private def isPageModTask(post: Post, modTasks: Seq[ModTask]): Bo = {\n+  private def _isPageModTask(post: Post): Bo = {\n+    // But isn't this bug mostly solved already by looking at isOrigPost (below)?\n     BUG // need to know if the moderator's intention is to delete the whole page,\n     // and which page — or just the post.\n     // Need a new  ModDecision type. [apr_movd_orig_post]\n@@ -464,7 +510,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n         (tx: SiteTx, staleStuff: StaleStuff): ModResult = {\n \n     dieIf(tasksToAccept.isEmpty, \"TyE306RKTD5\")\n-    val taskIsForBothTitleAndBody = isPageModTask(post, tasksToAccept)\n+    val taskIsForBothTitleAndBody = _isPageModTask(post)\n \n     if (post.isDeleted) {\n       // Approve the post anyway  [apr_deld_post] — maybe gets undeleted\n@@ -504,14 +550,14 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n \n \n \n-  private def rejectAndDeletePost(post: Post, decidedById: UserId, modTasks: Seq[ModTask],\n+  private def rejectAndDeletePost(post: Post, decidedById: UserId, doingTasksNow: Seq[ModTask],\n         browserIdData: BrowserIdData)\n         (tx: SiteTx, staleStuff: StaleStuff): ModResult = {\n \n-    val taskIsForBothTitleAndBody = isPageModTask(post, modTasks)\n+    val taskIsForBothTitleAndBody = _isPageModTask(post)\n     val reqr = Who(TrueId.forMember(decidedById), browserIdData)\n \n-    dieIf(modTasks.exists(_.postId isSomethingButNot post.id), \"TyE50WKDL6\")\n+    dieIf(doingTasksNow.exists(_.postId isSomethingButNot post.id), \"TyE50WKDL6\")\n \n     // Maybe got moved to an new page?\n     val pageId = post.pageId\n@@ -537,10 +583,10 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n \n               // It's annoying if [other review tasks for the same post] would\n               // need to be handled too.\n-              // (If carrying out a mod task decision, then, modTasks is just that\n-              // one mod task — there might be other mod tasks too.)\n+              // (If carrying out a mod task decision, then, doingTasksNow is just that\n+              // one mod task — there might be other mod tasks too, about the same post.)\n               UX; COULD // do this also if deleting the whole page? (see above)\n-              invalidateModTasksForPosts(Seq(post), doingTasksNow = modTasks, tx)\n+              invalidateModTasksForPosts(Seq(post), doingTasksNow = doingTasksNow, tx)\n \n               (updPost.toSeq, None)\n             }\n@@ -728,6 +774,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n \n       val shallApproveRemainingFirstPosts = numApproved >= numFirstToApprove\n       if (shallApproveRemainingFirstPosts) {\n+        // Similar code: [_loop_pending]\n         val pendingTasks = tasks.filter(!_.doneOrGone)\n         val titlesToApprove = mutable.HashSet[PageId]()\n         val postIdsToApprove = pendingTasks flatMap { task =>\n@@ -827,17 +874,20 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n   }\n \n \n-  def loadReviewStuff(olderOrEqualTo: Option[ju.Date], limit: Int, forWho: Who)\n-        : (Seq[ReviewStuff], ReviewTaskCounts, Map[UserId, Participant], Map[PageId, PageMeta]) =\n-    readOnlyTransaction { tx =>\n+  /** Note: Any Guest:s returned were loaded via `..._wrongGuestEmailNotfPerf()`.\n+    */\n+  def loadReviewStuff(olderOrEqualTo: Opt[ju.Date], limit: Int, forWho: Who)\n+        : (Seq[ReviewStuff], ReviewTaskCounts, Map[UserId, PatVb], Map[PageId, PageMeta]) =\n+    readTx { tx =>\n       val requester = tx.loadTheParticipant(forWho.id)\n-      loadStuffImpl(olderOrEqualTo, limit, requester, tx)\n+      _loadStuffImpl(olderOrEqualTo, limit, requester, tx)\n     }\n \n \n-  private def loadStuffImpl(olderOrEqualTo: Option[ju.Date], limit: Int,\n-        requester: Participant, tx: SiteTransaction)\n-        : (Seq[ReviewStuff], ReviewTaskCounts, Map[UserId, Participant], Map[PageId, PageMeta]) = {\n+  private def _loadStuffImpl(olderOrEqualTo: Opt[ju.Date], limit: Int,\n+        requester: Pat, tx: SiteTx)\n+        : (Seq[ReviewStuff], ReviewTaskCounts, Map[UserId, PatVb], Map[PageId, PageMeta]) = {\n+\n     val reviewTasksMaybeNotSee = tx.loadReviewTasks(olderOrEqualTo, limit)\n     val taskCounts = tx.loadReviewTaskCounts(requester.isAdmin)\n \n@@ -897,7 +947,9 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n       userIds.add(flag.flaggerId.pubId)\n     }\n \n-    val usersById = tx.loadParticipantsAsMap(userIds)\n+    // Load details, so we'll know e.g. if sbd has been banned alreayd.\n+    val usersById: immutable.Map[UserId, PatVb] =\n+          tx.loadParticipantsInclDetailsByIdsAsMap_wrongGuestEmailNotfPerf(userIds)\n \n     val titlesByPageId = tx.loadTitlesPreferApproved(pageIds)\n "
    },
    {
      "sha": "e27b2285b99680c8b353decc9e479b0450f9b588",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 106,
      "deletions": 35,
      "changes": 141,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -32,7 +32,7 @@ import talkyard.server._\n import talkyard.server.dao.StaleStuff\n import talkyard.server.authn.{Join, Leave, JoinOrLeave, StayIfMaySee}\n import talkyard.server.authz.{AuthzCtxOnPats, AuthzCtxOnAllWithReqer, AuthzCtxWithReqer}\n-import talkyard.server.authz.{ReqrAndTgt}\n+import talkyard.server.authz.{ReqrAndTgt, PatAndPrivPrefs}\n \n \n case class LoginNotFoundException(siteId: SiteId, userId: UserId)\n@@ -405,23 +405,46 @@ trait UserDao {\n   }\n \n \n+  /** Banning works like suspending, just some UI buttons that will (later) read \"Banned\"\n+    * instead of \"Suspended\", so it's more clear that the person won't be coming back.\n+    * And the person can't log in and view their old posts — but you can if you're\n+    * only suspended.\n+    */\n+  def banUser(userId: UserId, reason: St, bannedById: UserId)(tx: SiteTx, ss: StaleStuff,\n+          ): Pat = {\n+    _suspendOrBan(userId, until = new ju.Date(Pat._BanMagicEpoch), reason = reason,\n+          suspendedById = bannedById)(tx, ss)\n+  }\n+\n+\n   def suspendUser(userId: UserId, numDays: i32, reason: St, suspendedById: UserId): U = {\n     // If later on banning, by setting numDays = none, then look at [4ELBAUPW2], seems\n     // it won't notice someone is suspended, unless there's an end date.\n     require(numDays >= 1, \"DwE4PKF8\")\n \n     val cappedDays = math.min(numDays, 365 * 110)\n-    val now = globals.now()\n \n     writeTx { (tx, staleStuff) =>\n+      val now = tx.now\n+      val suspendedTill = new ju.Date(now.millis + cappedDays * MillisPerDay)\n+\n+      _suspendOrBan(userId, until = suspendedTill, reason = reason,\n+            suspendedById = suspendedById)(tx, staleStuff)\n+    }\n+  }\n+\n+\n+  /** If `until` is epoch `_BanMagicEpoch` the user is considered banned.\n+    */\n+  private def _suspendOrBan(userId: UserId, until: ju.Date, reason: St, suspendedById: UserId,\n+          )(tx: SiteTx, staleStuff: StaleStuff): Pat = {\n       var user = tx.loadTheUserInclDetails(userId)\n       if (user.isAdmin)\n         throwForbidden(\"DwE4KEF24\", \"Cannot suspend admins\")\n \n-      val suspendedTill = new ju.Date(now.millis + cappedDays * MillisPerDay)\n       user = user.copy(\n         suspendedAt = Some(now.toJavaDate),\n-        suspendedTill = Some(suspendedTill),\n+        suspendedTill = Some(until),\n         suspendedById = Some(suspendedById),\n         suspendedReason = Some(reason.trim))\n \n@@ -431,7 +454,8 @@ trait UserDao {\n       logout(user.noDetails, bumpLastSeen = false, anyTx = Some(tx, staleStuff))\n       terminateSessions(  // [end_sess]\n             forPatId = user.id, all = true, anyTx = Some(tx, staleStuff))\n-    }\n+\n+      user\n   }\n \n \n@@ -890,17 +914,29 @@ trait UserDao {\n   }\n \n \n-  def loadUsersWithUsernamePrefix(prefix: String, caseSensitive: Boolean, limit: Int)\n-        : immutable.Seq[User] = {\n+  /** Excludes users with profiles hidden / unlistable,  so can't create\n+    * a list of members, by typing '@' and looking at the result.\n+    */\n+  def loadUserMayListByPrefix(prefix: St, caseSensitive: Bo, limit: i32, reqr: Pat)\n+        : ImmSeq[PatAndPrivPrefs] = {\n+\n+    // See also: this.listUsernamesOnPage().\n+    COULD_OPTIMIZE // needn't load throw away not-needed fields. [ONLYNAME]\n     COULD_OPTIMIZE // cache, sth like:\n     //memCache.lookup[immutable.Seq[User]](\n     //  membersByPrefixKey(prefix, \"u\"),\n     //  orCacheAndReturn = Some(readOnlyTransaction(_.loadUsersWithPrefix(prefix)))).get\n     // BUT then there'd be a DoS attack: iterate through all prefixes and exhaust\n     // the cache. Note that there's a million? Unicode chars, so restricting the\n     // prefix length to <= 2 chars won't work (cache size 1e6 ^ 2 = 1e12).\n-    readOnlyTransaction(_.loadUsersWithUsernamePrefix(\n-      prefix, caseSensitive = caseSensitive, limit = limit))\n+    // But what about caching only ascii?\n+    val usersTooMany: immutable.Seq[User] = readTx(\n+          _.loadUsersWithUsernamePrefix(prefix, caseSensitive = caseSensitive, limit = limit))\n+\n+    val patsPrefsMayList: ImmSeq[PatAndPrivPrefs] = authz.PrivPrefs.filterMayList(\n+          usersTooMany, reqr, dao = this)\n+\n+    patsPrefsMayList\n   }\n \n \n@@ -1103,16 +1139,24 @@ trait UserDao {\n   }\n \n \n-  def getGroupsReqrMaySee(requester: Participant): Vector[Group] = {\n+  COULD_OPTIMIZE // Cache both Vec and Map(groups.map(g => g.id, g): _*)  [cache_groups_by_id]\n+  //\n+  def getAllGroups(): Vec[Group] = {\n     BUG // risk: ?? Maybe shouldn't cache Group:s, but group ids ??  [LDALGRPS]\n     // So cannot get different results if loading groups via  allGroupsKey, or via  pptKey\n-    val tooManyGroups = memCache.lookup[Vector[Group]](\n+    memCache.lookup[Vector[Group]](\n       allGroupsKey,\n       orCacheAndReturn = {\n         readOnlyTransaction { tx =>\n           Some(tx.loadAllGroupsAsSeq())\n         }\n       }).get\n+  }\n+\n+\n+  // Later: make allGroups required, remove getAllGroups() from impl?\n+  def getGroupsReqrMaySee(requester: Pat, allGroups: Opt[Vec[Group]] = None): Vec[Group] = {\n+    val tooManyGroups = allGroups getOrElse getAllGroups()\n \n     val requestersGroupIds = getOnesGroupIds(requester)\n     // + groups one manages or is an adder or bouncer for [GRPMAN]\n@@ -1139,6 +1183,7 @@ trait UserDao {\n \n   private def getGroupStatsIfReqrMaySee(group: Group, requester: Participant): Option[GroupStats] = {\n     // Hmm this counts not only users, but child groups too. [sub_groups]\n+    COULD_OPTIMIZE // Count or cache in the database instead.\n     val members = listGroupMembersIfReqrMaySee(group.id, requester) getOrElse {\n       return None\n     }\n@@ -1147,9 +1192,10 @@ trait UserDao {\n \n \n   /** Returns Some(the members), or, if one isn't allowed to know who they are, None.\n+    * Returns _users_only, at least for now. Groups can't be group members yes anyway.\n     */\n   def listGroupMembersIfReqrMaySee(groupId: UserId, requester: Participant)\n-        : Option[Vector[Participant]] = {\n+        : Opt[ImmSeq[UserBr]] = {\n     // For now, don't allow \"anyone\" to list almost all members in the whole forum, by looking\n     // at built-in groups like Everyone or All Members.\n     if (groupId == Group.EveryoneId)\n@@ -1160,30 +1206,40 @@ trait UserDao {\n \n     // Let everyone see who the staff members are. That's important so one knows whom\n     // to trust about how the community functions?\n-    // Later: configurable count/view-members per group settings.\n+    // Later: configurable count/view-members per group settings.  [list_membs_perm]\n     // Later: or if is manager [GRPMAN]\n     if (!requester.isStaff && !requestersGroupIds.contains(groupId) && !Group.isStaffGroupId(groupId))\n       return None\n \n-    lazy val members = memCache.lookup[Vector[Participant]](\n-      groupMembersKey(groupId),\n-      orCacheAndReturn = {\n-        readOnlyTransaction { tx =>\n-          Some(tx.loadGroupMembers(groupId))\n-        }\n-      }).get\n-\n     if (requester.isStaffOrCoreMember) {\n-      Some(members)\n+      // Ok, may list members.\n     }\n     else if (group.isBuiltIn && requester.effectiveTrustLevel.isBelow(TrustLevel.TrustedMember)) {\n       // For now, don't let not-yet-trusted members list all members in the whole forum\n       // (by looking at the All Members group members).\n-      None\n+      return None\n     }\n     else {\n-      Some(members)\n+      // Ok.\n     }\n+\n+    // (This could be its own fn, but it's good to have checked that groupId is indeed\n+    // a group first (done above), so one cannot DoS-attack by caching None for int-max\n+    // integers that are not group ids.)\n+    val membersTooMany = memCache.lookup[Vec[User]](\n+          groupMembersKey(groupId),\n+          orCacheAndReturn = {\n+            readTx { tx =>\n+              // For now, _users_only.\n+              Some(tx.loadGroupMembers(groupId).flatMap(_.toUserOrNone))\n+            }\n+          }).get\n+\n+    val membersMayList: ImmSeq[PatAndPrivPrefs] =\n+          authz.PrivPrefs.filterMayList(membersTooMany, requester, dao = this)\n+\n+    val usersMayList = membersMayList.map(_.pat.toUserOrThrow)\n+    Some(usersMayList)\n   }\n \n \n@@ -1280,6 +1336,7 @@ trait UserDao {\n   }\n \n \n+  /** Places one's [own_id_bef_groups]! Annoying. CLEAN_UP: remove own-id-first? */\n   def getOnesGroupIds(ppt: Participant): Vector[UserId] = {\n     ppt match {\n       case _: Guest | _: Anonym | UnknownParticipant => Vector(Group.EveryoneId)\n@@ -1288,6 +1345,7 @@ trait UserDao {\n           onesGroupIdsKey(ppt.id),\n           orCacheAndReturn = {\n             readOnlyTransaction { tx =>\n+              // [own_id_bef_groups] sometimes annoying. (Cached! Need to update all callers.)\n               Some(tx.loadGroupIdsMemberIdFirst(ppt))\n             }\n           }).get\n@@ -1986,19 +2044,17 @@ trait UserDao {\n     readOnlyTransaction(_.listUsersNotifiedAboutPost(postId))\n \n \n-  def listUsernames(pageId: PageId, prefix: String, caseSensitive: Boolean, limit: Int)\n-        : Seq[NameAndUsername] = {\n+  /** Returns all users on the page. No need to filter may-see-profile or anything,\n+    * because if you can see a page, you can also see all usernames participating\n+    * on that page. — Except for private comments, later.\n+    */\n+  def listUsernamesOnPage(pageId: PageId): ImmSeq[UserBr] = {\n+    // See also: this.loadUserMayListByPrefix().\n+    // Later, [priv_comts], [dont_list_bookmarkers]: Exclude users who have posted\n+    // private comments or bookmarks only.\n     readOnlyTransaction(tx => {\n-      if (prefix.isEmpty) {\n         COULD_OPTIMIZE // could cache, + maybe use 'limit'?\n         tx.listUsernamesOnPage(pageId)\n-      }\n-      else {\n-        COULD_OPTIMIZE // needn't load throw away not-needed fields. [ONLYNAME]\n-        loadUsersWithUsernamePrefix(\n-          prefix, caseSensitive = caseSensitive, limit = limit)\n-          .map(_.nameAndUsername)\n-      }\n     })\n   }\n \n@@ -2064,6 +2120,11 @@ trait UserDao {\n       tx.updateMemberInclDetails(memberAfter)\n \n       staleStuff.addPatIds(Set(forUserId))\n+      if (memberAfter.isGroup) {\n+        // Priv prefs are inherited from groups. So need to refresh the cache, for changes\n+        // to groups to take effect.  [inherit_group_priv_prefs]\n+        staleStuff.addAllGroups()\n+      }\n     }\n   }\n \n@@ -2223,13 +2284,14 @@ trait UserDao {\n     _editMemberThrowUnlessSelfStaff(patId, byWho, \"TyE3ASHW6703\", \"edit pat perms\",\n                                       mustBeAdmin = true) {\n           case EditMemberCtx(tx, staleStuff, memberInclDetails, _) =>\n+      // Permissions can only be configured on groups (not individual users).\n       val groupBef: Group = memberInclDetails.asGroupOr(IfBadAbortReq)\n       val groupAft = groupBef.copy(perms = perms)\n       val validGroup = groupAft.checkValid(IfBadAbortReq)\n       tx.updateGroup(validGroup)\n       staleStuff.addPatIds(Set(patId))\n+      staleStuff.addAllGroups()\n     }\n-    memCache.remove(allGroupsKey) ; CLEAN_UP // use staleStuff instead, new fn needed?\n   }\n \n \n@@ -2504,6 +2566,10 @@ trait UserDao {\n   def getUsersOnlineStuff(): UsersOnlineStuff = {\n     usersOnlineCache.get(siteId, new ju.function.Function[SiteId, UsersOnlineStuff] {\n       override def apply(dummySiteId: SiteId): UsersOnlineStuff = {\n+        // Later: Exclude users with profiles hidden, but only   [priv_prof_0_presence]\n+        // for those who can't see their profiles. Might need to cache\n+        // one version of the users-online list per trust level group?\n+        // And exclude those with a may-not maySeeMyPresenceTrLv.\n         val (userIdsInclSystem, numStrangers) = redisCache.loadOnlineUserIds()\n         // If a superadmin is visiting the site (e.g. to help fixing a config error), don't  [EXCLSYS]\n         // show hen in the online list — hen isn't a real member.\n@@ -2574,6 +2640,11 @@ trait UserDao {\n     memCache.remove(patKey(userId))\n   }\n \n+  def clearAllGroupsFromMemCache() {\n+    memCache.remove(allGroupsKey)\n+    // (No need to clear group members though, that is, `groupMembersKey(..)`.)\n+  }\n+\n   private def patKey(userId: UserId) = MemCacheKey(siteId, s\"$userId|PptById\")\n \n   // Which: 'u' = users only, 'g' = groups only, 'm' = members — both groups and users."
    },
    {
      "sha": "11e98244cee19f88ad6bf6d41229a3c7e2b909c9",
      "filename": "appsv/server/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 68,
      "deletions": 15,
      "changes": 83,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -23,7 +23,7 @@ import debiki.JsonUtils\n import debiki.JsonUtils._\n import debiki.EdHttp._\n import java.{util => ju}\n-import talkyard.server.authz.AuthzCtxOnPats\n+import talkyard.server.authz.{Authz, AuthzCtxOnPats}\n import talkyard.server.api.{UpsertTypeParams, CreateTagParams}\n import org.scalactic.{Bad, Good, Or}\n \n@@ -211,7 +211,8 @@ object JsX {   RENAME // to JsonPaSe\n     *\n     * ts: Pat and subclasses, e.g. Guest, Anonym.\n     */\n-  def JsUser(user: Pat, tags: Seq[Tag] = Nil, toShowForPatId: Opt[PatId] = None): JsObject = {  //RENAME to JsPat, ts: Pat\n+  def JsUser(user: Pat, tags: Seq[Tag] = Nil, toShowForPatId: Opt[PatId] = None,\n+          inclSuspendedTill: Bo = false): JsObject = {  //RENAME to JsPat, ts: Pat\n     var json = JsPatNameAvatar(user)\n     user.smallAvatar foreach { uploadRef =>\n       json += \"avatarSmallHashPath\" -> JsString(uploadRef.hashPath)\n@@ -255,6 +256,9 @@ object JsX {   RENAME // to JsonPaSe\n     if (tags.nonEmpty) {\n       json += \"pubTags\" -> JsArray(tags map JsTag)\n     }\n+    if (inclSuspendedTill && user.suspendedTill.isDefined) {\n+      json += \"suspendedTillEpoch\" -> DateEpochOrNull(user.suspendedTill)  // [incl_susp_till]\n+    }\n     json\n   }\n \n@@ -313,7 +317,8 @@ object JsX {   RENAME // to JsonPaSe\n       \"bio\" -> JsStringOrNull(user.about),\n       \"websiteUrl\" -> JsStringOrNull(user.website),\n       \"location\" -> JsStringOrNull(user.country),\n-      \"seeActivityMinTrustLevel\" -> JsNumberOrNull(user.privPrefs.seeActivityMinTrustLevel.map(_.toInt)),\n+      \"seeActivityMinTrustLevel\" -> // [ty_v1] remove\n+            JsNumberOrNull(user.privPrefs.seeActivityMinTrustLevel.map(_.toInt)),\n       \"avatarTinyHashPath\" -> JsStringOrNull(user.tinyAvatar.map(_.hashPath)),\n       \"avatarSmallHashPath\" -> JsStringOrNull(user.smallAvatar.map(_.hashPath)),\n       \"avatarMediumHashPath\" -> JsStringOrNull(user.mediumAvatar.map(_.hashPath)),\n@@ -328,9 +333,21 @@ object JsX {   RENAME // to JsonPaSe\n       // (Don't think need not exclude deletedAt & suspendedTillMs)\n     }\n \n-    // Currently needs to be public, see [some_pub_priv_prefs].\n-    userJson = userJson.addAnyInt32(\"maySendMeDmsTrLv\", user.privPrefs.maySendMeDmsTrLv)\n-    userJson = userJson.addAnyInt32(\"mayMentionMeTrLv\", user.privPrefs.mayMentionMeTrLv)\n+    // Private, and of interest client side only to oneself and staff, if wants to edit.\n+    if (reqrIsStaffOrSelf) {\n+      userJson += \"privPrefsOwn\" -> JsPrivPrefs(user.privPrefs)\n+      // Good to know what the defaults are, since usually that's what's in use — most\n+      // people don't look at or configure their own prefs that much.\n+      val defaults = Authz.deriveDefaultPrivPrefs(groups)\n+      userJson += \"privPrefsDef\" -> JsPrivPrefs(defaults)\n+    }\n+\n+    // But these effective prefs need to be public, see [some_pub_priv_prefs] (& bit dupl code).\n+    // so the client can show/disable e.g. the Send Message button, if DMs allowed or not.\n+    val effPrefs = Authz.derivePrivPrefs(user, groups)\n+    userJson = userJson.addAnyInt32(\"maySendMeDmsTrLv\", effPrefs.maySendMeDmsTrLv)\n+    userJson = userJson.addAnyInt32(\"mayMentionMeTrLv\", effPrefs.mayMentionMeTrLv)\n+    userJson = userJson.addAnyInt32(\"maySeeMyActivityTrLv\", effPrefs.seeActivityMinTrustLevel)\n \n     val maySeeEmailAdrs = reqrPerms.exists(_.canSeeOthersEmailAdrs)\n \n@@ -399,15 +416,34 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  def JsPrivPrefs(prefs: MemberPrivacyPrefs): JsObject = {\n+    var obj = JsEmptyObj2\n+    obj = obj.addAnyInt32(\"maySeeMyBriefBioTrLv\", prefs.maySeeMyBriefBioTrLv)\n+    obj = obj.addAnyInt32(\"maySeeMyMembershipsTrLv\", prefs.maySeeMyMembershipsTrLv)\n+    obj = obj.addAnyInt32(\"maySeeMyProfileTrLv\", prefs.maySeeMyProfileTrLv)\n+    obj = obj.addAnyInt32(\"mayFindMeTrLv\", prefs.mayFindMeTrLv)\n+    obj = obj.addAnyInt32(\"maySeeMyPresenceTrLv\", prefs.maySeeMyPresenceTrLv)\n+    obj = obj.addAnyInt32(\"maySeeMyApproxStatsTrLv\", prefs.maySeeMyApproxStatsTrLv)\n+    obj = obj.addAnyInt32(\"maySeeMyActivityTrLv\", prefs.seeActivityMinTrustLevel)\n+    obj = obj.addAnyInt32(\"maySendMeDmsTrLv\", prefs.maySendMeDmsTrLv)\n+    obj = obj.addAnyInt32(\"mayMentionMeTrLv\", prefs.mayMentionMeTrLv)\n+    obj\n+  }\n+\n+\n   def memberPrivacyPrefsFromJson(json: JsValue): MemberPrivacyPrefs = {\n     MemberPrivacyPrefs(\n-          seeActivityMinTrustLevel =\n-              parseOptInt32(json, \"seeActivityTrLv\", altField = \"seeActivityMinTrustLevel\")\n-                  .flatMap(TrustLevel.fromInt),\n-          maySendMeDmsTrLv =\n-              parseOptInt32(json, \"maySendMeDmsTrLv\").flatMap(TrustLevel.fromInt),\n-          mayMentionMeTrLv =\n-              parseOptInt32(json, \"mayMentionMeTrLv\").flatMap(TrustLevel.fromInt),\n+          maySeeMyBriefBioTrLv = parseOptTrustLevel(json, \"maySeeMyBriefBioTrLv\"),\n+          maySeeMyMembershipsTrLv = parseOptTrustLevel(json, \"maySeeMyMembershipsTrLv\"),\n+          maySeeMyProfileTrLv = parseOptTrustLevel(json, \"maySeeMyProfileTrLv\"),\n+          mayFindMeTrLv = parseOptTrustLevel(json, \"mayFindMeTrLv\"),\n+          maySeeMyPresenceTrLv = parseOptTrustLevel(json, \"maySeeMyPresenceTrLv\"),\n+          maySeeMyApproxStatsTrLv = parseOptTrustLevel(json, \"maySeeMyApproxStatsTrLv\"),\n+          seeActivityMinTrustLevel = parseOptTrustLevel(json, \"maySeeMyActivityTrLv\",\n+                  // [ty_v1] remove both these:\n+                  altField = \"seeActivityTrLv\", alt2 = \"seeActivityMinTrustLevel\"),\n+          maySendMeDmsTrLv = parseOptTrustLevel(json, \"maySendMeDmsTrLv\"),\n+          mayMentionMeTrLv = parseOptTrustLevel(json, \"mayMentionMeTrLv\"),\n           )\n   }\n \n@@ -545,7 +581,7 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n-  def JsGroup(group: Group): JsObject = {   // dupl code [B28JG4] also in UserController\n+  def JsGroup(group: Group): JsObject = {   // dupl code [B28JG4] also in JsPatNameAvatar\n     var json = Json.obj(\n       \"id\" -> group.id,\n       \"username\" -> group.theUsername,\n@@ -555,7 +591,7 @@ object JsX {   RENAME // to JsonPaSe\n     group.tinyAvatar foreach { uploadRef =>\n       json += \"avatarTinyHashPath\" -> JsString(uploadRef.hashPath)\n     }\n-    group.isDeleted  // what?\n+    if (group.isDeleted) json += \"isDeleted\" -> JsTrue\n     json\n   }\n \n@@ -570,6 +606,23 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  /** Verbose, more details included.\n+    */\n+  def JsGroupAndStatsVb(groupAndStats: GroupAndStats, isStaff: Bo): JsObject = {\n+    var json = JsGroupAndStats(groupAndStats)\n+\n+    // Needed, for the Inspect page, for admins.\n+    unimplIf(!isStaff, \"Must be staff [TyE702KJCW]\")\n+    json += \"privPrefsOwn\" -> JsPrivPrefs(groupAndStats.group.privPrefs)\n+\n+    // Not currently needed: privPrefsDef.  Or incl anyway?\n+    // val ancestorGroups = tx.loadGroupsAncestorGroups(g) // some caller\n+    // val defaults = Authz.deriveDefaultPrivPrefs(ancestorGroups)\n+\n+    json  // [perms_missing]\n+  }\n+\n+\n   // If ever using for sth else than exporting dump files, then,\n   // sometimes exclude  canSeeOthersEmailAdrs  below.  [can_see_who_can_see_email_adrs]\n   def JsGroupInclDetailsForExport(group: Group): JsObject = {"
    },
    {
      "sha": "841f9a41f3edf6bc38c8cd1bd9eacc447e20bb77",
      "filename": "appsv/server/talkyard/server/TyController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -89,6 +89,11 @@ class TyController(cc: ControllerComponents, val context: TyContext)\n   def AdminGetAction(f: GetRequest => Result): Action[Unit] =\n     PlainApiActionAdminOnly(NoRateLimits, cc.parsers.empty)(f)\n \n+  def AdminGetActionRateLimited(\n+        rateLimits: RateLimits = RateLimits.ExpensiveGetRequest,\n+        )(f: GetRequest => Result): Action[Unit] =\n+    PlainApiActionAdminOnly(rateLimits, cc.parsers.empty)(f)\n+\n   def ApiSecretGetJsonAction(whatSecret: WhatApiSecret, rateLimits: RateLimits)(\n           f: GetRequest => Result): Action[Unit] =\n     PlainApiActionApiSecretOnly(whatSecret, rateLimits, cc.parsers.empty)(f)"
    },
    {
      "sha": "994c07c73a54aa6ee06d852e38653b18a51706d8",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 76,
      "deletions": 1,
      "changes": 77,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -200,6 +200,69 @@ object Authz {\n   }\n \n \n+  /** Derives pat's privacy preferences, by looking at hans own personal\n+    * settings, and filling in any missing by inheriting defaults from\n+    * the groups pat is a member of.\n+    *\n+    * (Later, use AuthzCtxOnPats somehow instead as param?)\n+    *\n+    * @param memberOfGroups Order doesn't matter.\n+    */\n+  def derivePrivPrefs(pat: Pat, patsGroups: ImmSeq[Group]): MemberPrivacyPrefs = {\n+    _derivePrivPrefsImpl(Some(pat), patsGroups)\n+  }\n+\n+\n+  /** Default privacy prefs for someone who is a member of the specified groups.\n+    * Prefs in higher trust level groups (more specific),\n+    * override prefs from lower (less specific) groups.\n+    *\n+    * @param memberOfGroups Order doesn't matter.\n+    */\n+  def deriveDefaultPrivPrefs(memberOfGroups: ImmSeq[Group]): MemberPrivacyPrefs = {\n+    _derivePrivPrefsImpl(None, memberOfGroups)\n+  }\n+\n+\n+  private def _derivePrivPrefsImpl(anyPat: Opt[Pat], patsGroups: ImmSeq[Group])\n+          : MemberPrivacyPrefs = {\n+    var result = anyPat.flatMap(_.anyPrivPrefs) getOrElse MemberPrivacyPrefs.empty\n+\n+    val (groupsByPrioDesc, _customGroups) = sortGroupsByPrioDesc(patsGroups)\n+\n+    // Prefs in higher (more specific) trust level groups override lower group prefs.\n+    // (Later: Consider custom groups too [group_priorities]. Then, we'll need an inner\n+    // loop, to loop over groups with the same prio? And use the most private prefs\n+    // (TrustLevel.maxOfAny()).)\n+    for {\n+      group <- groupsByPrioDesc;\n+      // Should configure the Staff group, not Mods. [0_conf_mod_priv_prefs]\n+      if group.id != Group.ModeratorsId\n+    } {\n+      result = result.addMissing(group.privPrefs)\n+\n+      // All other groups have lower precedence, so if all preferences have been\n+      // specified we're done (which is rare — admins & users tend to leave some things\n+      // as is, using the defaults).\n+      if (result.everythingSpecified)\n+        return result\n+    }\n+\n+    result\n+  }\n+\n+\n+  /** Returns a tuple with:\n+    * - Trust level groups, ordered by trust level descending (so, most specific first).\n+    * - Custom groups, unspecified priority\n+    */\n+  def sortGroupsByPrioDesc(patsGroups: ImmSeq[Group]): (ImmSeq[Group], ImmSeq[Group]) = {\n+    // Groups Everyone, All Members, ... Core Members, Mods, Admins have ids 10, 11, ... 20.\n+    // But custom groups (not built-in) have ids >= 100, so this places them last:\n+    val byId = patsGroups.sortBy(-_.id)\n+    byId.span(_.isBuiltIn)\n+  }\n+\n \n   def mayCreatePage(\n     userAndLevels: AnyUserAndLevels,\n@@ -764,6 +827,8 @@ object Authz {\n \n     // We'll start with no permissions, at the top category, and loop through all categories\n     // down to the category in which the page is placed, and add/remove permissions along the way.\n+    // But only to find out if the user may not *see* the category at all — later,\n+    // we merge only with the most specific category's permissions. [direct_cat_perms]\n     // Move these pageMeta checks to 'Check page' above?\n     val isForumPage = pageMeta.exists(_.pageType == PageType.Forum)\n     val isPageDeleted = pageMeta.exists(_.isDeleted)\n@@ -795,6 +860,7 @@ object Authz {\n             debugCode = \"EdMMSEEFORUM\")\n     }\n \n+    // Site wide permissions not implemented — no way to specify via the ui.  [0_site_perms]\n     val relPermsWholeSite = relevantPermissions.filter(_.onWholeSite.is(true))\n     for (p <- relPermsWholeSite) {\n       // Random order? So better add permissions only (not remove).  [2LG5F04W]\n@@ -861,7 +927,16 @@ object Authz {\n       anyCatMayWhat = Some(mayWhatThisCat)\n     }\n \n-    // Only merge with the permissions set directly on the category the page is in.\n+    // Only merge with the permissions set directly on the category  [direct_cat_perms]\n+    // the page is in.\n+    BUG // The client side algorithm, lets sub cats inherit permissions   [cat_perm_inh_bug]\n+    // of ancestor cats. So, e.g. a Reply or Create Topic button is shown, but when\n+    // submitting, the server refuses.\n+    //\n+    // But then site wide permissions make no sense? Why would they be inherited to sub cats,\n+    // but not permissions set on a direct parent category?\n+    // Fortunately, site wide permissions haven't been implemented anyway  [0_site_perms]\n+    //\n     // This means it's possible to let people post topics in a sub cat,\n     // although they may not post topics in the base cat.\n     // (However if they cannot *see* the base cat, then they cannot access any"
    },
    {
      "sha": "c11ff4a6b549060dbc2475fd3c7a82f51b7f857e",
      "filename": "appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -39,6 +39,54 @@ trait AuthzSiteDaoMixin {\n   import context.security.{throwNoUnless, throwIndistinguishableNotFound}\n \n \n+  def getPatAndPrivPrefs(pat: Pat, allGroups: Vec[Group]): PatAndPrivPrefs = {\n+\n+    COULD_OPTIMIZE // Cache a by-id map instead / too? (in getAllGroups()) [cache_groups_by_id]\n+    val allGroupsById: Map[PatId, Group] = Map(allGroups.map(g => g.id -> g): _*)\n+\n+    val patsGroupIdsMaybeRestr = this.getOnesGroupIds(pat).drop(1) // [own_id_bef_groups]\n+    val patsGroupsMaybeRestr = patsGroupIdsMaybeRestr flatMap { id =>\n+            val g = allGroupsById.get(id)\n+            bugWarnIf(g.isEmpty, \"TyENOGROUP0761\", s\"s$siteId: Group $id missing\")\n+            g\n+          }\n+\n+    val patsPrivPrefs = Authz.derivePrivPrefs(pat, patsGroupsMaybeRestr)\n+\n+    PatAndPrivPrefs(\n+          pat,\n+          privPrefsOfPat = patsPrivPrefs,\n+          patsGroupIds = patsGroupIdsMaybeRestr,\n+          patsGroups = patsGroupsMaybeRestr)\n+  }\n+\n+\n+  /** Derives prefs, like `getPatAndPrivPrefs`, but efficiently for many users at once.\n+    *\n+    * Shouldn't this be a pure fn? Doesn't currently need `this`, will it ever?\n+    */\n+  def derivePrivPrefs(users: Iterable[UserBr], allGroups: Vec[Group]): ImmSeq[PatAndPrivPrefs] = {\n+    COULD_OPTIMIZE // Cache a by-id map instead / too? (in getAllGroups()) [cache_groups_by_id]\n+    val allGroupsById: Map[PatId, Group] = Map(allGroups.map(g => g.id -> g): _*)\n+    users.to[Vec] map { user =>\n+      val usersGroupIdsMaybeRestr = Pat.getBuiltInGroupIdsForUser(user)\n+      val usersGroupsMaybeRestr = usersGroupIdsMaybeRestr flatMap { id =>\n+        val g = allGroupsById.get(id)\n+        bugWarnIf(g.isEmpty, \"TyENOGROUP0761\", s\"s$siteId: Group $id missing\")\n+        g\n+      }\n+\n+      val usersPrivPrefs = Authz.derivePrivPrefs(user, usersGroupsMaybeRestr)\n+\n+      PatAndPrivPrefs(\n+            user,\n+            usersPrivPrefs,\n+            usersGroupIdsMaybeRestr,\n+            usersGroupsMaybeRestr)\n+    }\n+  }\n+\n+\n   def deriveEffPatPerms(groupIdsAnyOrder: Iterable[GroupId]): EffPatPerms = {\n     val groups = groupIdsAnyOrder map getTheGroup\n     val permsOnSite = getPermsOnSiteForEveryone()"
    },
    {
      "sha": "05b3e287431f177d8a1cfd9397630ecb35c8c2a0",
      "filename": "appsv/server/talkyard/server/authz/package.scala",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2Fpackage.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1,7 +1,43 @@\n package talkyard.server\n \n+import com.debiki.core._\n+import debiki.dao.SiteDao\n+\n+\n package object authz {\n \n   type ForumAuthzContext = AuthzCtxOnForum // backw compat, renaming  CLEAN_UP\n \n+\n+  /** Helps us know if the principal may see e.g. pat's user profile or recent activity etc.\n+    */\n+  case class PatAndPrivPrefs(\n+    pat: Pat,\n+    privPrefsOfPat: MemberPrivacyPrefs,\n+    patsGroupIds: Vec[GroupId],\n+    patsGroups: Vec[Group],\n+    )\n+\n+\n+  object PrivPrefs {\n+\n+    /** Returns the users `reqr` may list, and the users' privacy prefs.\n+      *\n+      * Maybe which privacy pref to filter on (maySeeMyProfileTrLv right now) could be a param?\n+      */\n+    def filterMayList(users: ImmSeq[User], reqr: Pat, dao: SiteDao): ImmSeq[PatAndPrivPrefs] = {\n+      val allGroups: Vec[Group] = dao.getAllGroups()\n+      val usersAndPrefs: ImmSeq[PatAndPrivPrefs] = dao.derivePrivPrefs(users, allGroups)\n+      val usersMayList: ImmSeq[PatAndPrivPrefs] = usersAndPrefs.filter { userPrefs =>\n+            val isSelf = reqr.id == userPrefs.pat.id\n+            val maySeeProfilePage =\n+                  isSelf || userPrefs.privPrefsOfPat.maySeeMyProfileTrLv.forall(\n+                              _.isAtMost(reqr.effectiveTrustLevel2))\n+            // Later, will be separate preference:  [list_membs_perm]\n+            val mayListUser = maySeeProfilePage\n+            mayListUser\n+          }\n+      usersMayList\n+    }\n+  }\n }"
    },
    {
      "sha": "e8eb25fe429dff224a20b69a163290ab4e05edfe",
      "filename": "appsv/server/talkyard/server/dao/StaleStuff.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -56,6 +56,7 @@ case class StalePage(\n   * Mutable. Not thread safe.\n   */\n class StaleStuff {\n+  private var _allGroupsStale = false\n   private var _allPagesStale = false\n   private val _stalePages = mut.Map[PageId, StalePage]()\n   private val _stalePpIdsMemCacheOnly = mut.Set[PatId]()\n@@ -82,6 +83,12 @@ class StaleStuff {\n     // Noop, currently not cached.\n   }\n \n+  /** But doesn't mean that any group members list is stale.\n+    */\n+  def addAllGroups(): U = {\n+    _allGroupsStale = true\n+  }\n+\n \n   // ----- Pages\n \n@@ -232,6 +239,11 @@ class StaleStuff {\n         dao.removeUserFromMemCache(ppId)\n       }\n     }\n+\n+    if (_allGroupsStale) {\n+      dao.clearAllGroupsFromMemCache()\n+    }\n+\n   }\n \n }"
    },
    {
      "sha": "afa974371572f2295c201bbbd1927b1a7f8502ff",
      "filename": "appsv/server/talkyard/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -585,8 +585,16 @@ class PlainApiActions(\n                   .discardingCookies(DiscardingSessionCookies: _*))\n       }\n \n-      val isSuspended = anyUserMaybeSuspended.exists(_.isSuspendedAt(new ju.Date))\n+      val isBanned = anyUserMaybeSuspended.exists(_.isBanned)\n+      if (isBanned) {\n+        return Future.successful(\n+              ForbiddenResult(\"TyEBANND\", \"Account banned\")\n+                  .discardingCookies(DiscardingSessionCookies: _*))\n+      }\n \n+      // Suspended users can log in and view their old posts (method GET is enough),\n+      // but not post new posts (uses POST).\n+      val isSuspended = anyUserMaybeSuspended.exists(_.isSuspendedAt(new ju.Date))\n       if (isSuspended && request.method != \"GET\") {\n         // A race. Any session already deleted by UserDao [end_sess],\n         bugWarnIf(dao.listPatsSessions(theUserId).nonEmpty, \"TyESTILLSID02\","
    },
    {
      "sha": "d1f3540d8aca07c95395a5b2a41e134c6afa1487",
      "filename": "appsv/server/talkyard/server/pubsub/PubSub.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FPubSub.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FPubSub.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpubsub%2FPubSub.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -546,6 +546,8 @@ class PubSubActor(val globals: Globals) extends Actor {\n     val toUserIds = clientsByUserId.keySet - user.id\n     traceLog(siteId, s\"Pupl presence ${user.nameHashId}: $presence [TyDPRESCNS]\")\n \n+    // Later: Exclude users with profiles hidden, see: [priv_prof_0_presence].\n+\n     // If some time later, users can be \"invisible\", stop publishing their\n     // presence here.  [PRESPRIV]  [private_pats]\n     // Compare with pages one may not see: [WATCHSEC]."
    },
    {
      "sha": "44b4a288bcd05d160753e9810d39fa14daa73840",
      "filename": "appsv/server/talkyard/server/security/package.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsecurity%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsecurity%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsecurity%2Fpackage.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1415,11 +1415,12 @@ class EdSecurity(globals: Globals) {\n     * to find out that it exists. [7C2KF24]\n     */\n   def throwIndistinguishableNotFound(devModeErrCode: St = \"\",\n-          showErrCodeAnyway: Bo = false): Nothing = {\n+         devModeMsg: St = \"\", showErrCodeAnyway: Bo = false): Nothing = {\n     val suffix =\n       if (showErrCodeAnyway || !globals.isProd && devModeErrCode.nonEmpty) s\"-$devModeErrCode\"\n       else \"\"\n-    throwNotFound(\"TyE404_\" + suffix, \"Not found\")\n+    val msg = if (!globals.isProd && devModeMsg.nonEmpty) devModeMsg else \"Not found\"\n+    throwNotFound(\"TyE404_\" + suffix, msg)\n   }\n \n   /** Throws 404 Not Found if pat may not see the post, or 403 Forbidden if"
    },
    {
      "sha": "deb5867a376955c84c40ddbb88f04e58a334eed1",
      "filename": "appsv/server/talkyard/server/talk/PostsController.scala",
      "status": "modified",
      "additions": 61,
      "deletions": 40,
      "changes": 101,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Ftalk%2FPostsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Ftalkyard%2Fserver%2Ftalk%2FPostsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Ftalk%2FPostsController.scala?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -28,6 +28,7 @@ import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n import scala.collection.{mutable => mut}\n import talkyard.server.{TyContext, TyController}\n+import talkyard.server.authz.{PatAndPrivPrefs}\n import javax.inject.Inject\n import talkyard.server.JsX._\n import talkyard.server.TyLogging\n@@ -42,15 +43,20 @@ class PostsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   import context.globals\n \n \n-  def listTopicsByUser(userId: PatId): Action[U] = GetAction { request =>\n-    import request.{dao, requester}\n+  def listTopicsByUser(userId: PatId): Action[U] = GetActionRateLimited() { request =>\n+    import request.{dao, requesterOrUnknown, requester}\n \n-    val isStaff = requester.exists(_.isStaff)\n-    val isStaffOrSelf = isStaff || requester.exists(_.id == userId)\n-    // Return Not Found directly, using the cache, if no such user.\n-    dao.getTheParticipant(userId)\n+    // Return Not Found directly, using the cache, if no such user.  Bit dupl [_6827]\n+    val targetUser: Pat =\n+          dao.getParticipant(userId) getOrElse {\n+            throwIndistinguishableNotFound(\"TyE0PAT020764\")\n+          }\n+\n+    _throwIfMayNotSeeActivity(requesterOrUnknown, targetUser, dao)\n \n-    throwForbiddenIfActivityPrivate(userId, requester, dao)\n+    val isSelf = requester.exists(_.id == userId)\n+    val isStaff = requester.exists(_.isStaff)\n+    val isStaffOrSelf = isStaff || isSelf\n \n     // Later, include, if reqr is the author henself. [list_anon_posts]\n     val inclAnonPosts = false\n@@ -60,17 +66,29 @@ class PostsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val topics = topicsInclForbidden filter { page: PagePathAndMeta =>\n       dao.maySeePageUseCache(page.meta, requester, maySeeUnlisted = isStaffOrSelf).maySee\n     }\n+\n     controllers.ForumController.makeTopicsResponse(topics, dao)\n   }\n \n \n   def listPostsByUser(authorId: UserId, relType: Opt[Int], which: Opt[Int]): Action[U] =\n           GetActionRateLimited() { req: GetRequest =>\n+    import req.{dao, requesterOrUnknown}\n+\n+    // Return Not Found directly, using the cache, if no such user.  Bit dupl [_6827]\n+    val targetUser: Pat =\n+          dao.getParticipant(authorId) getOrElse {\n+            throwIndistinguishableNotFound(\"TyE0PAT020764\")\n+          }\n+\n+    // (_Double_check 1/2, if calling _listPostsImpl(), oh well.)\n+    _throwIfMayNotSeeActivity(requesterOrUnknown, targetUser, dao)\n+\n     relType match {\n       case None =>\n         // Later, will use PostQuery here too, just like below (and this match-case\n         // branch maybe then no longer needed).\n-        listPostsImpl(authorId, all = false, req)\n+        _listPostsImpl(authorId, all = false, req)\n       case Some(relTypeInt) =>\n \n         // Tests:\n@@ -154,18 +172,21 @@ class PostsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   }\n \n \n-  private def listPostsImpl(authorId: UserId, all: Boolean, request: GetRequest): mvc.Result = {\n+  private def _listPostsImpl(authorId: UserId, all: Boolean, request: GetRequest): mvc.Result = {\n     import request.dao\n-    import request.{dao, requester}\n+    import request.{dao, requester, requesterOrUnknown}\n \n-    val requesterIsStaff = requester.exists(_.isStaff)\n-    val requesterIsStaffOrAuthor = requesterIsStaff || requester.exists(_.id == authorId)\n+    // Return Not Found directly, using the cache, if no such user.  Bit dupl [_6827]\n+    val targetUser: Pat =\n+          dao.getParticipant(authorId) getOrElse {\n+            throwIndistinguishableNotFound(\"TyE0PAT020764\")\n+          }\n \n-     /*/ Later: Throw if the reqr may not see `authorId`. [private_pats]\n-    val author = dao.getParticipant(authorId) getOrElse throwNotFound(\"EdE2FWKA9\", \"Author not found\")\n-     */\n+    // (_Double_check 2/2, if caller is listPostsByUser(), oh well.)\n+    _throwIfMayNotSeeActivity(requesterOrUnknown, targetUser, dao)\n \n-    throwForbiddenIfActivityPrivate(authorId, requester, dao)\n+    val requesterIsStaff = requester.exists(_.isStaff)\n+    val requesterIsStaffOrAuthor = requesterIsStaff || requester.exists(_.id == authorId)\n \n     // For now. LATER: if really many posts, generate an archive in the background.\n     // And if !all, and > 100 posts, add a load-more button.  UX, [to_paginate]\n@@ -255,34 +276,34 @@ class PostsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   def downloadUsersContent(authorId: UserId): Action[Unit] = GetActionRateLimited(\n         RateLimits.DownloadOwnContentArchive) { request: GetRequest =>\n     // These responses can be huge; don't prettify the json.\n-    listPostsImpl(authorId, all = true, request)\n+    _listPostsImpl(authorId, all = true, request)\n   }\n \n \n-  private def throwForbiddenIfActivityPrivate(\n-          userId: UserId, requester: Opt[Pat], dao: SiteDao): U = {\n+  private def _throwIfMayNotSeeActivity(requester: Pat, targetUser: Pat, dao: SiteDao): U = {\n     // Also browser side [THRACTIPRV]\n-    // Related idea: [private_pats].\n-    throwForbiddenIf(!maySeeActivity(userId, requester, dao),\n-          \"TyE4JKKQX3\", \"Not allowed to list activity for this user\")\n-  }\n-\n-\n-  private def maySeeActivity(userId: UserId, requester: Option[Participant], dao: SiteDao): Boolean = {\n-    // Guests cannot hide their activity. One needs to create a real account.\n-    if (!Participant.isMember(userId))\n-      return true\n-\n-    // Staff and the user henself can view hens activity.\n-    if (requester.exists(r => r.isStaff || r.id == userId))\n-      return true\n-\n-    COULD_OPTIMIZE // Use cache\n-    val memberInclDetails = dao.loadTheMemberInclDetailsById(userId)\n-    memberInclDetails.privPrefs.seeActivityMinTrustLevel match {\n-      case None => true\n-      case Some(minLevel) =>\n-        requester.exists(_.effectiveTrustLevel.toInt >= minLevel.toInt)\n+    val isSelf = requester.id == targetUser.id\n+    val isStaff = requester.isStaff\n+    val isStaffOrSelf = isStaff || isSelf\n+\n+    val allGroups: Vec[Group] = dao.getAllGroups()\n+    val targetStuff: PatAndPrivPrefs = dao.getPatAndPrivPrefs(targetUser, allGroups)\n+    val targetsPrivPrefs = targetStuff.privPrefsOfPat\n+\n+    // Can be good if e.g. mods can see someone's post history, even if they can't\n+    // see any of hans profile page details. So they can know if han is well-behaved or not.\n+    // So, it's enough if `maySeeActivity` allows, `maySeeMyProfileTrLv` not required.\n+    // [see_activity_0_profile]\n+    val maySeeActivity = isStaffOrSelf || targetsPrivPrefs.seeActivityMinTrustLevel.forall(\n+          _.isAtMost(requester.effectiveTrustLevel))\n+    val maySeeProfilePage = isSelf || targetsPrivPrefs.maySeeMyProfileTrLv.forall(\n+          _.isAtMost(requester.effectiveTrustLevel))\n+\n+    if (!maySeeActivity) {\n+      if (!maySeeProfilePage) {\n+        throwIndistinguishableNotFound(\"TyEM0SEEPROF053\")\n+      }\n+      throwForbidden(\"TyEM0LISTACT1\", \"Cannot list activity for this user\")\n     }\n   }\n "
    },
    {
      "sha": "939d5e1bc2d06d5f73689d3bf757cfa844a2c8e0",
      "filename": "appsv/server/views/resetpassword/emailSent.scala.html",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fviews%2Fresetpassword%2FemailSent.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/appsv%2Fserver%2Fviews%2Fresetpassword%2FemailSent.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fviews%2Fresetpassword%2FemailSent.scala.html?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -21,24 +21,20 @@\n \n \"\"\")}\n \n+@what = @{ if (isEmailAddress) \"email address\" else \"username\" }\n+\n \n @views.html.createsite.main(tpi, css = css) {\n \n   <h1>Reset Password</h1>\n \n   <br>\n   <p id=\"e2eRPP_ResetEmailSent\">\n-    We just sent you a reset-password email. Please check your inbox.\n+    We just sent you a reset-password email, if there is a user with that @{what}.\n+    Please check your inbox.\n   </p>\n \n   <p>You can close this page.</p>\n \n-  @if(isEmailAddress) {\n-    <p>(If however there is in fact no user with that email address, then we\n-      did not send any email.)</p>\n-  }\n-  @* Else: It's a username, they are public, so an error dialog was shown instead\n-    if there's no such user. *@\n-\n }\n "
    },
    {
      "sha": "7125f369c46180f026c90a3971f2ad9ab7be92d6",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -62,6 +62,8 @@ let listUsernamesCount = 0;\n export const listUsernamesTrigger = {\n \n   // Mentions.\n+  // Tests\n+  //   - Search for 'rta__entity' in the tests/e2e-*/ dirs. (Later, break out reusable fns.)\n   '@': {\n     dataProvider: (charsTyped: St) => {\n       listUsernamesCount += 1;\n@@ -2872,6 +2874,8 @@ export const Editor = createFactory<any, EditorState>({\n \n     // React-textarea-autocomplete docs:\n     //   https://github.com/webscopeio/react-textarea-autocomplete\n+    //\n+    // Much later: A checkbox that if ticked loads deleted/banned/... users? [mention_all_cb]\n \n     const textErrorClass = state.showTextErrors ? ' esError' : '';\n     const textarea ="
    },
    {
      "sha": "b4e53dca7f8870913e0155dca506aafa7dd13200",
      "filename": "client/app-more/more-bundle-already-loaded.d.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -86,6 +86,9 @@ declare namespace debiki2.pagedialogs {\n \n   function getAboutUserDialog();\n   function getProgressBarDialog();\n+\n+  var NeverAlwaysBtn: any;\n+  function neverAlways_title(neverAlways: NeverAlways): St;\n }\n \n declare namespace debiki2.persona {"
    },
    {
      "sha": "c847159424cb498114a05acb4fd1b70340a8e79f",
      "filename": "client/app-more/page-dialogs/about-user-dialog.more.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -45,6 +45,7 @@ export function getAboutUserDialog() { // RENAME QUICK to getAboutPatDialog\n interface AboutPatDialogState {\n   store?: Store;\n   isOpen?: boolean;\n+  notFound?: true\n   user?: BriefUser | UserDetailsStatsGroups;\n   groupsMaySee?: Group[];\n   post?: Post;\n@@ -115,12 +116,18 @@ const AboutPatDialog = createComponent({\n \n   loadPat: function(idOrUsername: Nr | St) {\n     Server.loadPatVvbPatchStore(idOrUsername,\n-            ({ user, groupsMaySee }: LoadPatVvbResponse) => {\n+            (resp: LoadPatVvbResponse | NotFoundResponse) => {\n       if (this.isGone) return;\n+      if (resp === 404) {\n+        this.setState({ notFound: true, user: null, idOrUsername });\n+        return;\n+      }\n+      const { user, groupsMaySee } = resp;\n       const nextState: AboutPatDialogState = {\n         user,\n         groupsMaySee,\n       };\n+      // Dialog closed?\n       if (!this.state.post) {\n         this.setState(nextState);\n         return;\n@@ -152,7 +159,7 @@ const AboutPatDialog = createComponent({\n \n   render: function () {\n     const state: AboutPatDialogState = this.state;\n-    let content;\n+    let content: RElm | U;\n \n     if (state.isOpen) {\n       const user: Guest | BriefUser | UserDetailsStatsGroups = state.user;\n@@ -168,7 +175,11 @@ const AboutPatDialog = createComponent({\n       }, this.props);\n \n       if (!user) {\n-        content = r.p({}, t.Loading);\n+        // Later, make it possible to send DMs also if profile private? [dm_priv_pats]\n+        // That'd be from this dialog? The user's profile page just says Not Found,\n+        // shows no buttons.\n+        content = state.notFound ?\n+              r.p({}, \"This user's info is private.\") : r.p({}, t.Loading);\n       }\n       else if (user.isAnon) {\n         content = AboutAnon({ anon: user as Anonym });"
    },
    {
      "sha": "6411ca6529a7e1497825d194eb96bf3eba14a74d",
      "filename": "client/app-more/page-dialogs/never-alwas-diag.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fpage-dialogs%2Fnever-alwas-diag.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fpage-dialogs%2Fnever-alwas-diag.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fnever-alwas-diag.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -73,7 +73,7 @@ export const NeverAlwaysBtn = React.createFactory<DiscLayoutDropdownBtnProps & N\n });\n \n \n-function neverAlways_title(neverAlways: NeverAlways): St {\n+export function neverAlways_title(neverAlways: NeverAlways): St {\n   switch (neverAlways) {\n     // case PostSortOrder.Inherit:\n     //  Not supposed to happen. Instead the DiscLayoutDiag constructs a list item"
    },
    {
      "sha": "273d949c6420211377db910ecbb0507a103d8df4",
      "filename": "client/app-more/search/search-page.more.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fsearch%2Fsearch-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fsearch%2Fsearch-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fsearch%2Fsearch-page.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -298,8 +298,9 @@ var SearchPageContentComponent = createReactClass(<any> {\n \n // COULD:\n // - search in titles only\n-// - search by user, but then, consider hens privacy seeActivityMinTrustLevel setting,\n+// - search by user, but then, consider hans privacy maySeeMyActivityTrLv setting,\n //    and add e2e test here: [6UKDSQ29].\n+//    Also consider maySeeMyProfileTrLv & mayFindMeTrLv. [private_pats]\n function AdvancedSearchPanel(props: {\n       store: Store,\n       query: SearchQuery,"
    },
    {
      "sha": "33965516129f21b2fd7996ed7987b98d6758dd0f",
      "filename": "client/app-more/users/groups-page.more.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fgroups-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fgroups-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fgroups-page.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -37,6 +37,7 @@ export const ListGroupsComponent = React.createFactory<RouteChildProps>(function\n   const myId = React.useRef(me.id);\n   const [groupsOrNull, setGroups] = React.useState<Group[]>(null);\n \n+  // Dupl code. [dupl_load_groups]\n   React.useEffect(() => {\n     myId.current = me.id;\n     Server.loadGroups((groups) => {\n@@ -181,8 +182,8 @@ const CreateGroupDialog = React.createFactory<{}>(function() {\n     });\n   }\n \n-  let contents;\n-  let saveCancel;\n+  let contents: RElm | U;\n+  let saveCancel: RElm | U;\n \n   if (isOpen) {\n     contents = rFragment({},\n@@ -210,4 +211,5 @@ const CreateGroupDialog = React.createFactory<{}>(function() {\n \n //------------------------------------------------------------------------------\n    }\n-//------------------------------------------------------------------------------\n\\ No newline at end of file\n+//------------------------------------------------------------------------------\n+"
    },
    {
      "sha": "fa1718b92f85265cee410e8ecd21593bf56728f7",
      "filename": "client/app-more/users/user-activity.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -90,7 +90,8 @@ export const UsersActivity = createFactory<PatStatsPanelProps, any>({\n function isHiddenForMe(me: Myself, user: UserInclDetails): boolean[] {\n   // There's also a server side check: [THRACTIPRV].\n   const isStaffOrSelf = isStaff(me) || user.id === me.id;\n-  const hiddenForMe = user.seeActivityMinTrustLevel > me.trustLevel && !isStaffOrSelf;\n+  // [some_pub_priv_prefs]\n+  const hiddenForMe = user.maySeeMyActivityTrLv > me.trustLevel && !isStaffOrSelf;\n   return [isStaffOrSelf, hiddenForMe];\n }\n \n@@ -99,9 +100,9 @@ function isHiddenForMe(me: Myself, user: UserInclDetails): boolean[] {\n function makeMaybeHiddenInfo(me: Myself, user: UserInclDetails) {\n   const [isStaffOrSelf, hiddenForMe] = isHiddenForMe(me, user);\n   const hiddenForSomeText = !isStaffOrSelf ? null : (\n-      user.seeActivityMinTrustLevel >= TrustLevel.CoreMember ?\n+      user.maySeeMyActivityTrLv >= TrustLevel.CoreMember ?\n         t.upp.OnlyStaffCanSee : (\n-          user.seeActivityMinTrustLevel >= TrustLevel.FullMember ?\n+          user.maySeeMyActivityTrLv >= TrustLevel.FullMember ?\n             t.upp.OnlyMbrsCanSee : null));\n \n   const hiddenForSomeElem = hiddenForSomeText ?"
    },
    {
      "sha": "be7d5f56e76bcb07c2d034af2c2722cdb248c26a",
      "filename": "client/app-more/users/user-preferences.more.ts",
      "status": "modified",
      "additions": 153,
      "deletions": 60,
      "changes": 213,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -738,10 +738,7 @@ interface PrivacyPrefsTabProps {\n \n interface PrivacyPrefsTabState {\n   savingStatus?: St;\n-  hideActivityForStrangers: Bo;\n-  hideActivityForAll: Bo;\n-  maySendMeDmsTrLv?: TrustLevelOrStaff;\n-  mayMentionMeTrLv?: TrustLevelOrStaff;\n+  privPrefs: PrivacyPrefsEdited\n }\n \n \n@@ -751,12 +748,8 @@ const PrivacyPrefsTab = createFactory({\n   getInitialState: function() {\n     const props: PrivacyPrefsTabProps = this.props;\n     const user: UserInclDetails = props.user;\n-    const state: PrivacyPrefsTabState = {\n-      hideActivityForStrangers: user.seeActivityMinTrustLevel >= TrustLevel.FullMember,\n-      hideActivityForAll: user.seeActivityMinTrustLevel >= TrustLevel.CoreMember,\n-      maySendMeDmsTrLv: user.maySendMeDmsTrLv,\n-      mayMentionMeTrLv: user.mayMentionMeTrLv,\n-    };\n+    const privPrefs: PrivacyPrefsEdited = { ...user.privPrefsOwn };\n+    const state: PrivacyPrefsTabState = { privPrefs };\n     return state;\n   },\n \n@@ -768,15 +761,8 @@ const PrivacyPrefsTab = createFactory({\n     event.preventDefault();\n     const props: PrivacyPrefsTabProps = this.props;\n     const state: PrivacyPrefsTabState = this.state;\n-    const seeActivityMinTrustLevel = state.hideActivityForAll ? TrustLevel.CoreMember : (\n-        state.hideActivityForStrangers ? TrustLevel.FullMember : null);\n     const user: UserInclDetails = props.user;\n-    const prefs = {\n-      userId: user.id,\n-      seeActivityMinTrustLevel,\n-      maySendMeDmsTrLv: state.maySendMeDmsTrLv,\n-      mayMentionMeTrLv: state.mayMentionMeTrLv,\n-    };\n+    const prefs = { userId: user.id, ...state.privPrefs };\n     // Dupl code [save_pat_pref].\n     Server.saveMemberPrivacyPrefs(prefs, (r: { patNoStatsNoGroupIds: PatVb }) => {\n       if (this.isGone) return;\n@@ -794,6 +780,8 @@ const PrivacyPrefsTab = createFactory({\n     const me: Me = props.store.me;\n     const user: UserInclDetails = props.user;\n     const isSelf = user.id === me.id;\n+    const prefsEdited: PrivacyPrefsEdited = state.privPrefs;\n+    const prefsOwn: PrivacyPrefs = user.privPrefsOwn || {};\n \n     // Dupl Saving... code [7UKBQT2]\n     let savingInfo = null;\n@@ -805,71 +793,176 @@ const PrivacyPrefsTab = createFactory({\n     }\n \n     // Maybe most new members would mess up these settings? [can_config_what_priv_prefs]\n-    // Currently these settings have no effect, for groups. [inherit_group_priv_prefs]\n-    const canConfigWhoMayMessage = isSelf && pat_isBitAdv(me) || pat_isStaff(me);  // UX BUG but not if me is mod, and user is admin\n-    const you =\n-            user.isGroup ? \"members of this group\" : (    // I18N\n-            user.id === me.id ? \"you\" : \"this user\");\n \n+    // Can't config moderators' priv prefs directly — it's better to configure Staff, since both\n+    // admins & mods are staff, but admins might not be mods. [0_conf_mod_priv_prefs]\n+    if (user.id === Groups.ModeratorsId)\n+      return rFr({},\n+          r.p({}, \"Configure the Staff group instead, \",\n+              LinkUnstyled({ to: linkToPatsPrivPrefs(Groups.StaffId) }, \"go here\"), \".\"),\n+          r.p({}, \"You cannot configure privacy prefs of the Moderators group, since I don't \" +\n+              \"know if you want changes to affect admins too, or not. But if you configure \" +\n+              \"the Staff group, that affects both mods and admins.\"));\n+\n+    // Right now, custom groups cannot have privacy preferences.  [0_priv_prefs_4_cust_groups]\n+    const isCustomGroup = user.isGroup && !member_isBuiltIn(user);\n+\n+    const isTrustLevelGroupOrStaff = user.isGroup && member_isBuiltIn(user);\n+\n+    const canConfigHideActivity = !isCustomGroup;\n+\n+    // Currently not inherited from groups, should be (later). [inherit_priv_prefs_0impl]\n+    const canConfigWhoMayMentionOrDM =\n+            isSelf && pat_isBitAdv(me) ||\n+                // UX BUG but not if me is mod, and user is admin.\n+                pat_isStaff(me) && !isCustomGroup;\n+\n+    const canConfigSeeProfile = !isCustomGroup\n+\n+    // See: [0_priv_prefs_4_cust_groups] in wip/.\n+    if (!canConfigHideActivity && !canConfigWhoMayMentionOrDM && !canConfigSeeProfile)\n+      return rFr({},\n+          r.p({}, \"You cannot configure privacy preferences for custom groups, right now.\"),\n+          r.p({}, \"You can, however, configure trust level groups (e.g. All Members, \" +\n+            \"Full Members, etc), which then become the defaults, for people in \" +\n+            \"those groups. \" +\n+            \"Users can change their own preferences individually.\"));\n+            // ... which of course (?) takes precedence over group configs, need not mention?\n+\n+    const you =\n+            user.id === Groups.AllMembersId ? \"members of this forum\" : (    // I18N\n+            user.id === Groups.StaffId ? \"moderators and admins\" : (\n+            user.isGroup ? \"members of this group\" : (\n+            user.id === me.id ? \"you\" : \"this user\")));\n+    const oneYou = !user.isGroup ? you : (             // I18N\n+            user.id === Groups.StaffId ? \"a moderator or admin\" : (\n+            user.id === Groups.AllMembersId ? \"a member\" : (\n+            \"a member of this group\")));\n+    const your =\n+            user.isGroup ? \"the group members'\" : (    // I18N\n+            user.id === me.id ? \"your\" : \"this user's\");\n+\n+    const updPrivPrefs = (prefs: Partial<PrivacyPrefsEdited>) => {\n+      this.setState({\n+              privPrefs: { ...state.privPrefs, ...prefs },\n+              savingStatus: null,\n+            });\n+    }\n \n     return (\n-      r.form({ role: 'form', className: 'e_PrivPrefsF', onSubmit: this.savePrivacyPrefs },\n+      r.form({ role: 'form', className: 'c_PrivPrefsF', onSubmit: this.savePrivacyPrefs },\n \n         // If in the future, adding options for being a bit invisible and not receiving\n         // messages from others — then, stop publishing presence here: [PRESPRIV].\n+        // [private_pats] [priv_prof_0_presence]\n+\n+        !isTrustLevelGroupOrStaff ? null :\n+            r.p({}, \"The privacy preferences of this group are used as \" +\n+                `the defaults for ${you}. `,\n+                !me.isAdmin ? null : r.a({ href: linkToInspect('priv-prefs') }, \"Inspect\")),\n+            // Is this a bit too chatty?:\n+            // \"Preferences from lower trust level groups (e.g. All Members) are overridden\n+            // by any changes you make here.\"\n+            // Or:  (but how many non-native speakers know what \"precedence\" means?)\n+            // \"Preferences in higher trust level groups, have precedence, though.\"\n+            // Or: \"If something is configured differently in two groups, the higher \" +\n+            // \"trust level group has precedence (e.g. Full Members overrides Basic Members).\"\n+\n+        !canConfigHideActivity ? null :\n+          r.div({ className: 'form-group e_WhoMaySeeAct' },\n+            // This used to be these ui texts:\n+            // t.upp.HideActivityStrangers_1, r.br(),\n+            // t.upp.HideActivityStrangers_2,\n+            // t.upp.HideActivityAll_1, r.br(),\n+            // t.upp.HideActivityAll_2,,\n+            // But now, with a dropdown instead of two checkboxes:\n+            r.p({}, `Min trust level to see ${  // I18N\n+                user.isGroup ? `recent activity by ${you}`\n+                            : your + \" recent activity\"}: (e.g. posts, comments) `),\n+            // It's possible to let others see one's activity, but non one's profile.\n+            // [see_activity_0_profile]\n+            TrustLevelBtn({\n+                diagTitle: rFr({},\n+                    `Min trust level:`),  // I18N\n+                ownLevel: firstDefOf( // _first_defined: `null` means use-default.\n+                      prefsEdited.maySeeMyActivityTrLv, prefsOwn.maySeeMyActivityTrLv),\n+                defLevel: firstValOf(\n+                      user.privPrefsDef?.maySeeMyActivityTrLv, TrustLevelOrStaff.Stranger),\n+                minLevel: TrustLevelOrStaff.Stranger,\n+                maxLevel:\n+                    me.isModerator ? TrustLevelOrStaff.Staff : (\n+                    me.isAdmin ? TrustLevelOrStaff.Admin :\n+                    TrustLevelOrStaff.CoreMember),\n+                saveFn: (newLevel) => {\n+                  updPrivPrefs({ maySeeMyActivityTrLv: newLevel });\n+                }})),\n \n-        user.isGroup ? null : rFr({},\n-        Input({ type: 'checkbox', className: 'e_HideActivityStrangersCB',\n-            label: rFragment({},\n-              t.upp.HideActivityStrangers_1, r.br(),\n-              t.upp.HideActivityStrangers_2),\n-            checked: state.hideActivityForStrangers,\n-            onChange: (event: CheckboxEvent) => this.setState({\n-              hideActivityForStrangers: event.target.checked,\n-              hideActivityForAll: false,\n-              savingStatus: null,\n-            }) }),\n-\n-        Input({ type: 'checkbox', className: 'e_HideActivityAllCB',\n-            label: rFragment({},\n-              t.upp.HideActivityAll_1, r.br(),\n-              t.upp.HideActivityAll_2,),\n-            checked: state.hideActivityForAll,\n-            onChange: (event: CheckboxEvent) => this.setState({\n-              hideActivityForStrangers: event.target.checked || state.hideActivityForStrangers,\n-              hideActivityForAll: event.target.checked,\n-              savingStatus: null,\n-            }) })),\n+        !canConfigSeeProfile ? null :\n+          r.div({ className: 'form-group e_SeeProfile' },\n+            r.p({}, `Min trust level to see ${  // I18N\n+                user.isGroup ? `the profile pages of ${you}`\n+                            : your + \" profile page\"}: `),\n+            TrustLevelBtn({\n+                diagTitle: rFr({},\n+                    `Min trust level:`),  // I18N\n+                ownLevel: firstDefOf( // _first_defined\n+                      prefsEdited.maySeeMyProfileTrLv, prefsOwn.maySeeMyProfileTrLv),\n+                defLevel: firstValOf(\n+                      user.privPrefsDef?.maySeeMyProfileTrLv, TrustLevelOrStaff.Stranger),\n+                minLevel: TrustLevelOrStaff.Stranger,\n+                maxLevel:\n+                    me.isModerator ? TrustLevelOrStaff.Staff : (\n+                    me.isAdmin ? TrustLevelOrStaff.Admin :\n+                    TrustLevelOrStaff.FullMember),\n+                saveFn: (newLevel) => {\n+                  updPrivPrefs({ maySeeMyProfileTrLv: newLevel });\n+                }})),\n \n-        // This is notf prefs, rather than privacy? Maybe should move\n+          // Can see everyone else's profile pages:\n+          // For now, if someone can see other people's email addresses,\n+          // then let han see their profile pages too?\n+          // Later: New conf val, init to  can_see_others_email_adrs_c ?\n+\n+        // Maybe this is notf prefs, rather than privacy perfs? Maybe should move\n         // to tne notf prefs tab? Not important, let's wait.\n         //\n-        !canConfigWhoMayMessage ? null : rFr({},\n-          r.div({ className: 'e_WhoMayMention' },\n-            r.span({}, `Min trust level to @mention ${you}: `),  // I18N\n+        !canConfigWhoMayMentionOrDM ? null : rFr({},\n+          r.div({ className: 'form-group e_WhoMayMention' },\n+            r.p({}, `Min trust level to @mention ${oneYou}: *`),  // I18N\n             TrustLevelBtn({\n                 diagTitle: rFr({},\n-                    `Min trust level to get to notify ${you} by typing `,  // I18N\n+                    // UX BUG: I don't think this lets people notify *groups*? Only\n+                    // group *members* individually? Or, hmm, what?  [may_group_prefs]\n+                    `Min trust level to get to notify ${oneYou} by typing `,  // I18N\n                     r.code({}, `@${user.username}`), ':'),\n-                curLevel: firstValOf(\n-                      state.mayMentionMeTrLv, user.mayMentionMeTrLv, TrustLevelOrStaff.New),\n+                ownLevel: firstDefOf( // _first_defined\n+                      prefsEdited.mayMentionMeTrLv, prefsOwn.mayMentionMeTrLv),\n+                defLevel: TrustLevelOrStaff.New, // guests can't mention [guests_0_mention]\n+                      // later: firstValOf(   [inherit_priv_prefs_0impl]\n+                      //   user.privPrefsDef?.mayMentionMeTrLv, TrustLevelOrStaff.Stranger),\n                 minLevel: TrustLevelOrStaff.New,\n                 maxLevel: TrustLevelOrStaff.CoreMember,\n                 saveFn: (newLevel) => {\n-                  this.setState({ mayMentionMeTrLv: newLevel, savingStatus: null });\n+                  updPrivPrefs({ mayMentionMeTrLv: newLevel });\n                 }})),\n \n-          r.div({ className: 'e_WhoMayDm' },\n-            r.span({}, `Min trust level to direct-message (DM) ${you}: `),  // I18N\n+          r.div({ className: 'form-group e_WhoMayDm' },\n+            r.p({}, `Min trust level to direct-message (DM) ${oneYou}: *`),  // I18N\n             TrustLevelBtn({\n-                diagTitle: `Min trust level to get to direct-message ${you}:`,  // I18N\n-                curLevel: firstValOf(\n-                      state.maySendMeDmsTrLv, user.maySendMeDmsTrLv, TrustLevelOrStaff.New),\n+                diagTitle: `Min trust level to get to direct-message ${oneYou}:`,  // I18N\n+                ownLevel: firstDefOf( // _first_defined\n+                      prefsEdited.maySendMeDmsTrLv, prefsOwn.maySendMeDmsTrLv),\n+                defLevel: TrustLevelOrStaff.New,\n+                      // later: firstValOf(   [inherit_priv_prefs_0impl]\n+                      //    user.privPrefsDef?.maySendMeDmsTrLv, TrustLevelOrStaff.New),\n                 minLevel: TrustLevelOrStaff.New,\n                 maxLevel: TrustLevelOrStaff.CoreMember,\n                 saveFn: (newLevel) => {\n-                  this.setState({ maySendMeDmsTrLv: newLevel, savingStatus: null });\n+                  updPrivPrefs({ maySendMeDmsTrLv: newLevel });\n                 }})),\n+\n+          r.p({}, r.i({}, \"* These two settings' default values aren't yet \" +\n+                \"inherited from ancestor groups — not implemented.\")),\n         ),\n \n         InputTypeSubmit({ className: 'e_SavePrivacy', style: { marginTop: '11px' },"
    },
    {
      "sha": "5cbf2018f2db57779fd3e18f8ee587affd969c16",
      "filename": "client/app-more/users/user-prefs.styl",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-prefs.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fuser-prefs.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-prefs.styl?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,5 @@\n+\n+.c_PrivPrefsF\n+  .form-group p\n+    margin-bottom: 0.5ex;\n+"
    },
    {
      "sha": "1af66932fb87ae2c684b5a1c08c080f8acd5f210",
      "filename": "client/app-more/users/users-page.more.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fusers-page.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -94,6 +94,7 @@ const UserPageComponent = createReactClass(<any> {\n       // code assumes we have access to pat's private fields. [pat_prof_fields]\n       // So, until reloaded with those fields included, don't show any pat at all.\n       user: iAmSbdElse ? null : this.state.user,\n+      notFound: iAmSbdElse ? null : this.state.notFound,\n     });\n     if (iAmSbdElse) {\n       // Now we might have access to more/less data about the user, so refresh.\n@@ -143,10 +144,15 @@ const UserPageComponent = createReactClass(<any> {\n     Server.loadPatVvbPatchStore(usernameOrId,\n           // CLEAN_UP don't merge objs server side and pick apart here\n           // — just send them as separate fields from the start. [load_pat_stats_grps]\n-          ({ user, groupsMaySee }: LoadPatVvbResponse) => {\n-      const stats: UserStats | undefined = user.anyUserStats;\n+          (resp: LoadPatVvbResponse | NotFoundResponse) => {\n       this.nowLoading = null;\n       if (this.isGone) return;\n+      if (resp === 404) {\n+        this.setState({ notFound: true, user: null, usernameOrId });\n+        return;\n+      }\n+      const { user, groupsMaySee } = resp;\n+      const stats: UserStats | undefined = user.anyUserStats;\n       // This setState will trigger a rerender immediately, because we're not in a React event handler.\n       // But when rerendering here, the url might still show a user id, not a username. (5GKWS20)\n       this.setState({ user, stats, groupsMaySee });\n@@ -209,6 +215,12 @@ const UserPageComponent = createReactClass(<any> {\n     const user: UserDetailsStatsGroups = state.user;  // ParticipantAnyDetails = better class?\n     const usernameOrId = props.match.params.usernameOrId;\n \n+    if (state.notFound)\n+      return r.div({ className: 'container esUP c_UP_404' },\n+               r.div({ className: 's_UP_Ab dw-user-bar clearfix' },\n+                  r.h1({},\n+                        \"User not found, or their profile is private.\")));\n+\n     // Wait until url updated to show username, instead of id, to avoid mounting & unmounting\n     // sub comoponents, which could result in duplicated load-data requests.  (5GKWS20)\n     if (!user || !me || (user.username && isDigitsOnly(usernameOrId)))\n@@ -433,9 +445,9 @@ const PatTopPanel = createComponent({\n     const me: Myself = props.me;\n     const isGone = user_isGone(user);\n \n-    let suspendedInfo;\n+    let suspendedInfo: RElm | U;\n     if (user.suspendedAtEpoch) {\n-      const thisUserIsWhat = (<number | string> user.suspendedTillEpoch) === 'Forever'\n+      const thisUserIsWhat = pat_isBanned(user)\n           ? t.upp.UserBanned\n           : t.upp.UserSuspended(moment(user.suspendedTillEpoch).format('YYYY-MM-DD HH:mm'));\n       suspendedInfo = r.div({},\n@@ -448,7 +460,7 @@ const PatTopPanel = createComponent({\n \n     const isMe = me.id === user.id;\n \n-    let isAGroup;\n+    let isAGroup: St | U;\n     if (user.isGroup) {\n       isAGroup = t.upp.isGroup;\n     }"
    },
    {
      "sha": "171b5de47b6097eb8fb280ec756b9a9e5e5a364f",
      "filename": "client/app-more/users/users-page.styl",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fusers-page.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Fusers%2Fusers-page.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fusers-page.styl?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1,3 +1,8 @@\n+.c_UP_404 h1\n+  margin-bottom: 1em;\n+  font-size: 22px; // or too big\n+  font-weight: normal;\n+  color: #070707;  // darker, since gray background\n \n .s_Tb_Ln-Grps\n   font-size: 120%;"
    },
    {
      "sha": "1a1bf8bbd5eb2fb4783f22709b2e6fa55403096c",
      "filename": "client/app-more/util/trust-level-dialog.more.ts",
      "status": "modified",
      "additions": 24,
      "deletions": 7,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2Ftrust-level-dialog.more.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -31,20 +31,25 @@ export interface TrustLevelBtnProps {\n   className?: St,\n   minLevel?: TrustLevelOrStaff,\n   maxLevel?: TrustLevelOrStaff,\n-  curLevel: TrustLevelOrStaff | U;\n-  saveFn: (newLevel: TrustLevelOrStaff) => Vo;\n+  ownLevel: TrustLevelOrStaff | U;\n+  defLevel: TrustLevelOrStaff\n+  saveFn: (newLevel: TrustLevelOrStaff | N) => V;\n }\n \n \n // Bit dupl code? [open_diag_btn]\n export function TrustLevelBtn(props: TrustLevelBtnProps) {\n-  const className = `e_TrLv-${props.curLevel} ${props.className || ''}`;\n+  const level = firstValOf(props.ownLevel, props.defLevel);\n+  const isDef = !isVal(props.ownLevel) && isVal(props.defLevel);\n+  const isDefClass = isDef ? ' e_TrLv-Def' : '';\n+  const isDefTxt = isDef ? \" (default)\" : '';\n+  const className = `e_TrLv-${level}${isDefClass} ${props.className || ''}`;\n   return (\n       Button({ className, onClick: event => {\n           const atRect = cloneEventTargetRect(event);\n           openTrustLevelDiag({ ...props, atRect });\n         }},\n-        trustLevel_toString(props.curLevel as any), ' ', r.span({ className: 'caret' })\n+        trustLevel_toString(level as any) + isDefTxt, ' ', r.span({ className: 'caret' })\n       ));\n }\n \n@@ -54,8 +59,9 @@ interface TrustLevelDiagState {\n   atRect: Rect;\n   minLevel?: TrustLevelOrStaff,\n   maxLevel?: TrustLevelOrStaff,\n-  curLevel: TrustLevelOrStaff | U;\n-  saveFn: (newLevel: TrustLevelOrStaff) => Vo;\n+  ownLevel: TrustLevelOrStaff | U;\n+  defLevel: TrustLevelOrStaff\n+  saveFn: (newLevel: TrustLevelOrStaff | N) => V;\n }\n \n \n@@ -87,6 +93,7 @@ const TrustLevelDiag = React.createFactory<{}>(function() {\n   }\n \n   let title: St | U;\n+  let defaultItem: RElm | U;\n   let strangersItem: RElm | U;\n   let allMembersItem: RElm | U;\n   let basicMembersItem: RElm | U;\n@@ -102,7 +109,7 @@ const TrustLevelDiag = React.createFactory<{}>(function() {\n     const makeItem = (level: TrustLevelOrStaff): RElm => {\n       return level < min || max < level ? null : (\n             ExplainingListItem({\n-                active: diagState.curLevel === level,\n+                active: diagState.ownLevel === level,\n                 title: r.span({ className: 'e_TrLv-' + level  },\n                           trustLevel_toString(level as any)),\n                 // text: trustLevel_descr(level),  — later?\n@@ -113,6 +120,15 @@ const TrustLevelDiag = React.createFactory<{}>(function() {\n     }\n \n     title = diagState.diagTitle;\n+    defaultItem = ExplainingListItem({\n+                active: !isVal(diagState.ownLevel),\n+                title: r.span({ className: 'e_TrLv-Def'  },\n+                          \"Default: \" + trustLevel_toString(diagState.defLevel)),\n+                onSelect: () => {\n+                  diagState.saveFn(null);\n+                  close();\n+                }});\n+\n     strangersItem = makeItem(TrustLevelOrStaff.Stranger);\n     allMembersItem = makeItem(TrustLevelOrStaff.New);\n     basicMembersItem = makeItem(TrustLevelOrStaff.Basic);\n@@ -128,6 +144,7 @@ const TrustLevelDiag = React.createFactory<{}>(function() {\n       DropdownModal({ show: isOpen, onHide: close, atX: atRect.left, atY: atRect.top,\n             pullLeft: true, showCloseButton: true, className: 'e_TruLvD' },\n         r.div({ className: 's_ExplDrp_Ttl' }, title),\n+        defaultItem,\n         strangersItem,\n         allMembersItem,\n         basicMembersItem,"
    },
    {
      "sha": "6d53fbb50f9d49e7d71dfdade762c75f36328393",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 6,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2FServer.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2FServer.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FServer.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -677,6 +677,7 @@ interface GetOptions {\n   timeout?: number;\n   suppressErrorDialog?: boolean;\n   showLoadingOverlay?: true;  // default false, for GET requests\n+  notFoundAs404?: true\n }\n \n \n@@ -736,8 +737,18 @@ function get(uri: string, successFn: GetSuccessFn, errorFn?: GetErrorFn, options\n     removeWaitForRequestOverlay(timeoutHandle);\n     const errorAsJson = JSON.stringify(errorObj);\n     const details: string = errorObj.xhr ? errorObj.xhr.responseText : errorObj.stack;\n+    checkE2eTestForbiddenWords(url, details);\n+\n+    // If not found is normal, don't show any error, just run callback. (It's simpler to\n+    // return 404 server side, than to decide on some 200 OK json that in fact\n+    // means \"not found\". And then we get to here.)\n+    if (options.notFoundAs404 && errorObj.status === 404) {\n+      successFn(404);\n+      return;\n+    }\n+\n     console.error(`Error GETting from ${uri}: ${errorAsJson}, details: ${details}`);\n-    let maybeIgnoreError;\n+    let maybeIgnoreError: ErrorPolicy;\n     if (errorFn) {\n       maybeIgnoreError = errorFn(details, errorObj.status);\n     }\n@@ -1126,14 +1137,14 @@ export function saveSpecialContent(specialContent: SpecialContent, success: () =\n }\n \n \n-export function moderatePostOnPage(post, decision: ReviewDecision,\n-          onDone: (storePatch: StorePatch) => void) {\n+export function moderatePostOnPagePatchStore(post: Post, decision: ReviewDecision,\n+          onOk: (_: StorePatch) => V) {\n   const data = {\n     postId: post.uniqueId,\n     postRevNr: post.currRevNr,\n     decision,\n   };\n-  postJsonSuccess('/-/moderate-from-page', onDone, data);\n+  postAndPatchStore('/-/moderate-from-page', onOk, data);\n }\n \n \n@@ -1353,6 +1364,11 @@ export function loadGroups(onDone: (_: Group[]) => void) {\n }\n \n \n+export function inspectForum(onOk: (_: InspectForumResp) => V) {\n+  get('/-/inspect-forum', onOk);\n+}\n+\n+\n export function createGroup(newGroup: Group, onDone: (newGroup: Group) => void) {\n   postJsonSuccess('/-/create-group', onDone, newGroup);\n }\n@@ -1382,11 +1398,11 @@ export function removeGroupMembers(groupId: UserId, memberIds: UserId[], onDone:\n // BUG might get a Guest or Group, not always a UserInclDetails. SHOULD find for usages & fix.\n // (Some callers, but not all, can deal with Group or Guest.)\n export function loadPatVvbPatchStore(userIdOrUsername: UserId | St,\n-      onOk: (resp: LoadPatVvbResponse) => Vo, onErr?: () => Vo) {\n+      onOk: (resp: LoadPatVvbResponse) => V) {\n   get('/-/load-user-any-details?who=' + userIdOrUsername, function(resp: LoadPatVvbResponse) {\n     ReactActions.patchTheStore({ tagTypes: resp.tagTypes });\n     if (onOk) onOk(resp);\n-  }, onErr);\n+  }, undefined, { notFoundAs404: true });\n }\n \n "
    },
    {
      "sha": "aae4c2a9c45751ab9e4b3dc0b387b24e74cccd30",
      "filename": "client/app-slim/links.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Flinks.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Flinks.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Flinks.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -120,6 +120,10 @@ export function linkToStaffInvitePage(): string {\n   return origin() + '/-/admin/users/invited';\n }\n \n+export function linkToInspect(what: 'priv-prefs'): St {\n+  return origin() + '/-/admin/inspect#' + what;\n+}\n+\n export function linkToStaffUsersPage(): St {\n   return origin() + '/-/admin/users/';\n }\n@@ -185,6 +189,14 @@ export function linkToUsersEmailAddrs(userIdOrUsername: UserId | string): string\n   return linkToUserProfilePage(userIdOrUsername) + '/preferences/account';\n }\n \n+export function linkToPatsPrivPrefs(who: Who): St {\n+  return linkToUserProfilePage(who) + '/preferences/privacy';\n+}\n+\n+export function linkToPatsUiPrefs(who: Who): St {\n+  return linkToUserProfilePage(who) + '/preferences/ui';\n+}\n+\n export function linkToMyDraftsEtc(store: Store): string {\n   return linkToMyProfilePage(store) + '/drafts-etc';\n }\n@@ -262,6 +274,11 @@ export function linkToNotificationSource(notf: Notification): string {\n }\n \n \n+export function linkToCat(cat: Cat): St {\n+  return origin() + '/latest/' + cat.slug;\n+}\n+\n+\n export function linkToRedirToAboutCategoryPage(categoryId: CategoryId): string {\n   return origin() + '/-/redir-to-about?categoryId=' + categoryId;\n }"
    },
    {
      "sha": "1eaa22f1ca35a72a63b2986e9b4dde04ba151048",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 47,
      "deletions": 7,
      "changes": 54,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1611,6 +1611,9 @@ interface Pat extends PatNameAvatar {   // Guest or Member, and Member = group o\n   isGuest?: boolean;  // = !isAuthenticated\n   isAuthenticated?: Bo;  // = !isGuest, if is a user (but absent, if is a group)\n \n+  // Not always present, even if is suspended. [incl_susp_till]\n+  suspendedTillEpoch?: WhenSecs;\n+\n   isEmailUnknown?: boolean;\n   avatarSmallHashPath?: string;\n   isMissing?: boolean;\n@@ -1709,14 +1712,18 @@ interface MemberInclDetails extends Member {\n   summaryEmailIntervalMinsOwn?: number;\n   summaryEmailIfActive?: boolean;\n   summaryEmailIfActiveOwn?: boolean;\n+\n+  // For editing one's own prefs (or sbd else's, if one is staff).\n+  privPrefsOwn?: PrivacyPrefs\n+  privPrefsDef?: PrivacyPrefs\n }\n \n \n type GroupInclDetails = GroupVb;\n interface GroupVb extends MemberInclDetails, Group {\n   isGroup: true;\n   //\"createdAtEpoch\" -> JsWhen(group.createdAt),\n-  perms: GroupPerms;\n+  perms: GroupPerms;  // oops missing here: [perms_missing] currently doesn't matter\n }\n \n type UserInclDetails = PatVb; // old name, remove\n@@ -1725,7 +1732,12 @@ type UserInclDetails = PatVb; // old name, remove\n // \"PatVbStaff\" better?)\n /// A Participant including verbose details, for the pat profile pages.\n // RENAME to UserVb? Isn't this alaways a user — not a group or guest.\n-interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n+interface PatVb extends MemberInclDetails, BioWebsiteLocation,\n+      // The priv prefs fields directly on a PatVb are the effective prefs\n+      // so the browser knows if any buttons/features should be disabled.\n+      // privPrefsOwn and ...Def are for editing one's prefs, and only included\n+      // for oneself or staff.\n+      PrivacyPrefs {\n   externalId?: string;\n   createdAtEpoch: number;  // change to millis\n   fullName?: string;\n@@ -1734,11 +1746,6 @@ interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n   emailNotfPrefs: EmailNotfPrefs,\n   // mailingListMode: undefined | true;  // default false  — later\n   hasPassword?: boolean;\n-  // ------- (Could break out interface? Or maybe pointless.)\n-  seeActivityMinTrustLevel?: TrustLevel;\n-  maySendMeDmsTrLv?: TrustLevelOrStaff;\n-  mayMentionMeTrLv?: TrustLevelOrStaff;\n-  // -------\n   uiPrefs: UiPrefs;\n   isAdmin: boolean;\n   isModerator: boolean;\n@@ -1763,6 +1770,30 @@ interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n   deletedAt?: number;\n }\n \n+// Should a group pref group apply to the group, or to members individually?  [may_group_prefs]\n+interface PrivacyPrefs {\n+  maySeeMyBriefBioTrLv?: TrustLevelOrStaff\n+  maySeeMyMembershipsTrLv?: TrustLevelOrStaff\n+  //mayListMyMembersTrLv?   — later, for groups & circles [list_membs_perm] [may_group_prefs]\n+  maySeeMyProfileTrLv?: TrustLevelOrStaff\n+  mayFindMeTrLv?: TrustLevelOrStaff\n+  // Not yet impl. [priv_prof_0_presence]\n+  maySeeMyPresenceTrLv?: TrustLevelOrStaff\n+  maySeeMyApproxStatsTrLv?: TrustLevelOrStaff\n+  maySeeMyActivityTrLv?: TrustLevelOrStaff\n+\n+  // If it's a group, does this mean one can mention the group, e.g. @staff, or that one can\n+  // mention the members individually, e.g. @some_moderator?  Mabye there should be two new\n+  // permissions: one mayMentionGroupTrLv and mayDirMsgGroupTrLv? [may_group_prefs]\n+  maySendMeDmsTrLv?: TrustLevelOrStaff\n+  mayMentionMeTrLv?: TrustLevelOrStaff\n+}\n+\n+/// When editing, value can be null, means \"delete, use default\".\n+type PrivacyPrefsEdited = {\n+  [Property in keyof PrivacyPrefs]: TrustLevelOrStaff | N | U\n+};\n+\n interface UserInclDetailsWithStats extends PatVb {   // REMOVE, instead, use PatVvb? no UserVvb?\n   // Mabye some old accounts lack stats?\n   anyUserStats?: UserStats;\n@@ -3110,6 +3141,8 @@ type ErrorStatusHandler = (httpStatusCode?: Nr, errCode?: ErrCode) => Vo;\n type ErrorDetailsStatusHandler = (\n         errorStatusCode: number | U, errorStatusText: string | U, details?) => void;\n \n+// For endpoints that expect the whatever to maybe not exist. 200 ok always return json.\n+type NotFoundResponse = 404;\n \n /// The browser gives you a Response, but that's not an object so { ...response } won't work.\n /// This is however a real object, with the reponse payload included in 'responseText':\n@@ -3348,6 +3381,13 @@ interface GenPasetoV2LocSecrResp {\n }\n \n \n+interface InspectForumResp {\n+  catsMaySee: Cat[]\n+  groupsMaySee: GroupVb[]\n+  allPerms: PermsOnPage[]\n+}\n+\n+\n // =========================================================================\n //  WebSocket messages\n // ========================================================================="
    },
    {
      "sha": "26f726a47c990dbf4f9b803e0447e9c864ae502f",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Foop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Foop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Foop-methods.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -709,11 +709,18 @@ export function pp_snoozeLeftMs(me: Myself): number {\n }\n \n \n+/// Banned users are condisered suspended too (suspended forever).\n export function user_isSuspended(user: UserInclDetails, nowMs: WhenMs): boolean {\n   return user.suspendedTillEpoch && ((user.suspendedTillEpoch * 1000) > nowMs);\n }\n \n \n+export function pat_isBanned(user: Pat): Bo {\n+  // See [ban_magic_nr] server side.\n+  return user.suspendedTillEpoch === 10876500001;\n+}\n+\n+\n export function user_threatLevel(user: UserInclDetails): ThreatLevel {\n   return user.lockedThreatLevel || user.threatLevel;\n }\n@@ -1023,6 +1030,8 @@ export function store_mayICreateTopics(store: Store, category: Cat | U): Bo {\n     }\n     // @endif\n \n+    // BUG: Server side we look only at the parent cat, not any other ancestors. [cat_perm_inh_bug]\n+\n     // Old, before sub cats:  [subcats]\n     while (currentCategory) {\n       me.permsOnPages.forEach((p: PermsOnPage) => {\n@@ -1082,6 +1091,8 @@ export function store_mayIReply(store: Store, post: Post): boolean {\n \n   // ----- Category perms?\n \n+  // BUG: Server side we look only at the parent cat, not any other ancestors. [cat_perm_inh_bug]\n+\n   // Here we loop through the cats in the correct order though, [0GMK2WAL].\n   for (let i = 0; i < ancestorCategories.length; ++i) {\n     const ancestor = ancestorCategories[i];\n@@ -1767,7 +1778,7 @@ const DiscPropDefaults: DiscPropsBase = {\n   comtsStartHidden: NeverAlways.NeverButCanContinue,\n   comtsStartAnon: NeverAlways.NeverButCanContinue,\n   opStartsAnon: NeverAlways.NeverButCanContinue,\n-  // For now. Later: OnlySelfCanDeanon.\n+  // For now. Later: OnlySelfCanDeanon. [def_anon_status]\n   newAnonStatus: AnonStatus.IsAnonCanAutoDeanon,\n   pseudonymsAllowed: NeverAlways.NeverButCanContinue,\n };\n@@ -2172,7 +2183,7 @@ export function topPeriod_toString(period: TopTopicsPeriod): string {\n // Trust and threat levels\n //----------------------------------\n \n-export function trustLevel_toString(trustLevel: TrustLevel): string {\n+export function trustLevel_toString(trustLevel: TrustLevel | TrustLevelOrStaff): St {\n   switch (trustLevel) {\n     case TrustLevel.Stranger: return t.Stranger || \"Stranger\";  // I18N\n     case TrustLevel.New: return t.NewMember;\n@@ -2181,9 +2192,9 @@ export function trustLevel_toString(trustLevel: TrustLevel): string {\n     case TrustLevel.Trusted: return t.TrustedMember;\n     case TrustLevel.Regular: return t.RegularMember;\n     case TrustLevel.CoreMember: return t.CoreMember;\n+    case TrustLevelOrStaff.Staff: return t.Staff || \"Staff\";  // I18N\n+    case TrustLevelOrStaff.Admin: return t.Admin;\n     default:\n-      if (trustLevel === DummyTrustLevel.Staff) return t.Staff || \"Staff\";   // I18N\n-      if (trustLevel === DummyTrustLevel.Admin) return t.Admin;\n       return `Unknown trust level: ${trustLevel} [TyEUNKTRLVL]`;\n   }\n }"
    },
    {
      "sha": "a7408cf3d7ccadaa515d8561a4f0309fcc0575ec",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fpost-actions.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -476,11 +476,8 @@ export const PostActions = createComponent({\n             secondaryButonTitle: t.Cancel,\n             small: true,\n             onPrimaryClick: () => {\n-              // COULD create a ReactActions fn instead that does this:\n-              Server.moderatePostOnPage(post, decision, (storePatch: StorePatch) => {\n-                ReactActions.patchTheStore(storePatch, () => {\n-                  scrollAndFlashPostNr(post.nr);\n-                });\n+              Server.moderatePostOnPagePatchStore(post, decision, () => {\n+                scrollAndFlashPostNr(post.nr);\n               });\n             },\n           });"
    },
    {
      "sha": "4d793a912c74776ec5ef783c094eb19fe7717502",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fprelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fprelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fprelude.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -534,12 +534,18 @@ export function notVal(x): Bo {\n }\n \n \n+// RENAME to firstDefOf(), started.\n export function firstDefinedOf(x, y, z?) {\n+  return firstDefOf(x, y, z);\n+}\n+\n+\n+export function firstDefOf<T>(x: T | U, y: T | U, z?: T | U): T | U {\n   return !_.isUndefined(x) ? x : (!_.isUndefined(y) ? y : z);\n }\n \n \n-export function firstValOf(x, y, z?, w?) {\n+export function firstValOf<T>(x: T | NU, y: T | NU, z?: T | NU, w?: T | NU): T | NU {\n   return isVal(x) ? x : (isVal(y) ? y : (isVal(z) ? z : w));\n }\n "
    },
    {
      "sha": "0dfc8d8ff86b002bad9622b09bc95d6833e559d8",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fslim-bundle.d.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -348,13 +348,15 @@ declare namespace debiki2 {\n   function pp_snoozeLeftMs(me: Myself): number;\n   function member_isBuiltIn(member: Member): boolean;\n   function user_isSuspended(user: UserInclDetails, nowMs: WhenMs): boolean;\n+  function pat_isBanned(user: Pat): Bo;\n   function user_threatLevel(user: UserInclDetails): ThreatLevel;\n   function user_trustLevel(user: Myself | UserInclDetails): TrustLevel;\n   function user_isGone(user: Myself | BriefUser | UserInclDetails | ParticipantAnyDetails): boolean;\n \n   function uppercaseFirst(text: string): string;\n-  function firstDefinedOf(x, y, z?): any;\n-  function firstValOf(x, y, z?): any;\n+  function firstDefinedOf(x, y, z?): any; // RENAME QUICK to firstDefOf, next line.\n+  function firstDefOf<T>(x: T | U, y: T | U, z?: T | U): T | U;\n+  function firstValOf<T>(x: T | NU, y: T | NU, z?: T | NU, w?: T | NU): T | NU;\n   // Renaming from...\n   function groupByKeepOne<V>(vs: V[], fn: (v: V) => number): { [key: number]: V };\n   // ...to:\n@@ -469,16 +471,24 @@ declare namespace debiki2 {\n   function linkToNotificationSource(notf: Notification): string;\n   function linkToAdminPageAdvancedSettings(hostname?: string): string;\n   function linkToRedirToAboutCategoryPage(categoryId: CategoryId): string;\n+  function linkToCat(cat: Cat): St;\n   function linkToUserInAdminArea(user: Myself | UserInclDetails | Participant | UserId): string;\n   function linkToSendMessage(idOrUsername: UserId | string): string;\n   function linkToUserInAdminArea(userId: UserId): string;\n+\n+  // Don't use:\n   function linkToUserProfilePage(idOrUsername: Myself | Participant | UserId | string): string;\n   function pathTo(user: Participant | Myself | UserId | string): string;\n+  // Use instead, better name:\n+  function linkToPatsProfile(who: Who): St;\n+\n   function linkToUsersNotfs(who: Who): string;\n   function linkToMembersNotfPrefs(userIdOrUsername: UserId | string): string;\n   function linkToSendMessage(userIdOrUsername: UserId | string): string;\n   function linkToInvitesFromUser(userId: UserId): string;\n   function linkToUsersEmailAddrs(userIdOrUsername: UserId | string): string;\n+  function linkToPatsPrivPrefs(who: Who): St;\n+  function linkToPatsUiPrefs(who: Who): St;\n   function linkToAdminPage(): string;\n   function linkToAdminPageLoginSettings(): string;\n   function linkToAdminPageFeatures(): St;\n@@ -487,6 +497,7 @@ declare namespace debiki2 {\n   function linkToAdminPageEmbeddedSettings(): string;\n   function linkToReviewPage(): string;\n   function linkToStaffInvitePage(): string;\n+  function linkToInspect(what: 'priv-prefs'): St;\n   function externalLinkToAdminHelp(): string;\n   function linkToGroups(): string;\n   function linkToMyDraftsEtc(store: Store): string;\n@@ -610,7 +621,7 @@ declare namespace debiki2 {\n   // From oop-methods.ts:\n   function userStats_totalNumPosts(stats: UserStats | NU): Nr | N;\n   function userStats_totalNumPostsRead(stats: UserStats | NU): Nr | N;\n-  function trustLevel_toString(trustLevel: TrustLevel): string;\n+  function trustLevel_toString(trustLevel: TrustLevel | TrustLevelOrStaff): St;\n \n }\n "
    },
    {
      "sha": "3663a35c000404f0c180eb5e5124e053ed9ca587",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -335,6 +335,10 @@ const AdminAppComponent = createReactClass(<any> {\n     const apiLink = me.isAdmin && currentSettings.enableApi ?\n       LiNavLink({ to: ar + 'api', className: 'e_ApiB' }, \"API\") : null;\n \n+    const inspectLink = me.isAdmin ?\n+        LiNavLink({ to: ar + 'inspect', className: 'e_InspB' }, \"Inspect\") : null;\n+\n+\n     const saveBar = _.isEmpty(this.state.editedSettings) ? null :\n       r.div({ className: 'esA_SaveBar' },\n         r.div({ className: 'container' },\n@@ -375,7 +379,8 @@ const AdminAppComponent = createReactClass(<any> {\n         Route({ path: ar + 'customize', render: () => CustomizePanel(childProps) }),\n         Route({ path: ar + 'backup', render: () => BackupPanel(childProps) }),\n         Route({ path: ar + 'api', render: () => ApiPanel(childProps) }),\n-        Route({ path: ar + 'review', render: () => ReviewAllPanel(childProps) }));\n+        Route({ path: ar + 'review', render: () => ReviewAllPanel(childProps) }),\n+        Route({ path: ar + 'inspect', render: () => InspectPanel(childProps) }));\n \n     return (\n       r.div({ className: 'esAdminArea' },\n@@ -391,7 +396,8 @@ const AdminAppComponent = createReactClass(<any> {\n             customizeLink,\n             backupLink,\n             apiLink,\n-            LiNavLink({ to: ar + 'review', className: 'e_RvwB' }, \"Moderation\")),\n+            LiNavLink({ to: ar + 'review', className: 'e_RvwB' }, \"Moderation\"),\n+            inspectLink),\n           childRoutes,\n           saveBar)));\n   }"
    },
    {
      "sha": "092cedf3972f3cc9e3e4523ce2d377dd3d0a901d",
      "filename": "client/app-staff/admin/inspect-panel.styl",
      "status": "added",
      "additions": 151,
      "deletions": 0,
      "changes": 151,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Finspect-panel.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Finspect-panel.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Finspect-panel.styl?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,151 @@\n+$columnBorder = 1px solid lightgray;\n+\n+\n+.c_Insp_PrefsT\n+  // Header texts are position: absolute, so they can be rotated. Need to manually\n+  // reserve some space for the headers. — Hopefully no group name is much longer than this.\n+  // Or would it be good with text-overflow on the group name? (they're column headers)\n+  margin-top: 150px;\n+\n+  th, td\n+    padding: 4px;\n+\n+  th\n+    text-align: center;\n+\n+  tr\n+    border-bottom: 1px solid hsl(0 0% 60%);\n+\n+  td\n+    // Dim prefs inherited from ancestor groups, ...\n+    &.n_Inh\n+      opacity: 0.4;\n+    // ... and make prefs explicitly configured on the current group, stronger.\n+    &.n_Set\n+      color: #000;\n+\n+    border-right: $columnBorder;\n+\n+    // First column is the preference feature name, but the values (remaining columns)\n+    // look better when centered.\n+    &:not(:first-child)\n+      text-align: center;\n+\n+thead.c_Rotated th\n+  min-width: 2.4em; // so space for header text (which is position absolute)\n+  font-weight: normal; // not bold\n+\n+  & > div\n+    & > span\n+      position: absolute;\n+      transform: rotate(-70deg);\n+      transform-origin: center left;\n+\n+      white-space: nowrap; // not needed?\n+      translate: 0 -11px; // otherwise start of header inside topmost <td>s\n+                          // (since position absolute)\n+\n+      // Skip this — simpler and looks ok without border-bottom.\n+      //translate: 9px -11px; // makes the border-bottom start from the column's border\n+      //border-bottom: $columnBorder;\n+\n+\n+\n+ul.c_InspAno,\n+ul.c_InspPrm\n+  margin-top: 2.7ex;\n+  // So the category names (flex: 1) won't become much wider than needed.\n+  display: inline-block;\n+\n+.c_InspAno,\n+.c_InspPrm\n+  & > li\n+    margin-left: 0;  // left-aligs perms list.\n+  li\n+    list-style: none;\n+\n+.c_InspAno_Cat,\n+.c_InspPrm_Cat\n+  display: flex\n+  justify-content: space-between;  // places the is-anon info to the right ...\n+\n+.c_InspAno_Cat_Name,  // ... because the category name elem expands.\n+.c_InspPrm_Cat_Name\n+  flex: 1;\n+\n+.c_InspAno_Cat_AnoSt\n+  min-width: 5em;   // this fits \"How long\", Perm\" and \"Temp\".\n+                    // Hmm maybe an [anonymity_table] would have been better?\n+  color: gray;\n+.c_InspAno_Cat_ComtAno\n+  color: green;\n+\n+.c_InspAno_Cat_ComtAno\n+  min-width: 130px;  // fits \"Recommended\"\n+\n+// Dim inherited and default settings.\n+.c_InspAno_Cat_ComtAno,\n+.c_InspAno_Cat_AnoSt\n+  color: blue;\n+  font-weight: bold;\n+  font-size: 120%;\n+  &.n_Set\n+    color: cyan;\n+\n+// Doesn't work. Only  blue and  cyan works. Why? I don't have time for this any more.\n+//.c_InspAno_Cat_ComtAno,\n+//.c_InspAno_Cat_AnoSt\n+//  color: gray;   // matches inherited (.n_Inh) and default (no class)\n+//  &.n_Set\n+//    color: #000;\n+\n+.c_InhSamp\n+  color: hsl(0deg 0% 40%)  // a bit darker than gray (50%) so simpler to read.\n+                           // (But the \"real\" inherited text has the ancestor's value\n+                           // in dark strong color just before.)\n+\n+.c_InspAno_Cat > span\n+  &:first-child\n+    margin-right: 1.5em;\n+  &:not(:first-child)\n+    margin-left: 0.5em;\n+    text-align: right;\n+\n+.c_InspAno > li\n+  $catBorder = 1px solid lightgray\n+  border-bottom: $catBorder;\n+  padding-bottom: 9px;\n+  &:first-child\n+    border-top: $catBorder;\n+    padding-top: 8px; // 8 looks better than padding-bottom = 9px.\n+\n+.c_InspAno li\n+  list-style: none;\n+\n+// Avoids double margins from a sub cat <li> in an <ul> in a base cat's <li>.\n+ul.c_InspAno ul li:last-child\n+  margin-bottom: 0;\n+\n+\n+// Many perms! let's make bit compact.\n+$compactPermsMargin = 2px;\n+\n+.c_InspPrm_Cat_PrmLs_GrpPrmLs li\n+  margin-bottom: $compactPermsMargin;\n+\n+.c_InspPrm\n+  li > ul, li > ol\n+    margin-top: $compactPermsMargin;\n+\n+.c_InspPrm > li\n+  border-bottom: 2px solid lightgray;\n+\n+  &:first-child\n+    border-top: 2px solid lightgray;\n+\n+.c_InspPrm_Cat + ul > li\n+  border-bottom: 1px solid lightgray;\n+\n+  &:first-child\n+    border-top: 1px solid lightgray;\n+"
    },
    {
      "sha": "14f0f5d4d8aed693bb304a8939845cdbc7f2af59",
      "filename": "client/app-staff/admin/inspect.staff.ts",
      "status": "added",
      "additions": 422,
      "deletions": 0,
      "changes": 422,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Finspect.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Finspect.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Finspect.staff.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,422 @@\n+/*\n+ * Copyright (c) 2024 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.admin {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+\n+type CatsById = { [_: CatId]: Cat };\n+type SubCatsById = { [_: CatId]: Cat[] };\n+type GroupsById = { [groupId: PatId]: GroupVb };\n+\n+// Some privacy preferences haven't been implemented — let's hide in prod mode,\n+// and wrap in '(..)' in dev mode.\n+let hideUnimpl = true;\n+// @ifdef DEBUG\n+hideUnimpl = false;\n+// @endif\n+\n+\n+export const InspectPanel = React.createFactory<AdminPanelProps>(\n+      function(_: AdminPanelProps) {\n+\n+  const store: Store = useStoreState()[0];\n+  const me: Myself = store.me;\n+  const myId = React.useRef(me.id);\n+  const [inspectForumResp, setResp] = React.useState<InspectForumResp>(null);\n+\n+  const groups: GroupVb[] = inspectForumResp?.groupsMaySee || [];\n+  const cats: Cat[] = inspectForumResp?.catsMaySee || [];\n+  const allPerms: PermsOnPage[] = inspectForumResp?.allPerms || [];\n+\n+\n+  // Dupl code. [dupl_load_groups]  Later, use [React19_actions]?\n+  React.useEffect(() => {\n+    myId.current = me.id;\n+    Server.inspectForum((resp: InspectForumResp) => {\n+      if (myId.current !== me.id) return;\n+      setResp(resp);\n+    });\n+    return () => myId.current = null;\n+  }, [me.id]);\n+\n+  const baseCats: Cat[] = [];\n+  const catsById: CatsById = {};\n+  const catsByParentId: SubCatsById = {};\n+  const groupsById: GroupsById = arr_groupByKeepOne(groups, g => g.id);\n+\n+  // Create lookup maps.\n+  for (let cat of cats) {\n+    catsById[cat.id] = cat;\n+    if (cat.parentId) {\n+      const siblings = catsByParentId[cat.parentId] || [];\n+      siblings.push(cat);\n+      catsByParentId[cat.parentId] = siblings;\n+    }\n+  }\n+\n+  // If parent missing, it's a base cat (the server doesn't incl any root cats).\n+  for (let cat of cats) {\n+    const parent: Cat | U = catsById[cat.parentId];\n+    if (!parent) {\n+      baseCats.push(cat);\n+    }\n+  }\n+\n+  return r.div({ className: 's_A_Insp' },\n+      rb.Alert({ bsStyle: 'info' },\n+        r.p({},\n+          r.b({}, \"Might be some bug here. \"), \"This page is pretty new (2024-12).\")),\n+\n+      r.p({},\n+          \"Here you can get an overview of how you've configured this community. \" +\n+          \"(Tell us if there's more things you'd like to see: \",\n+          r.span({}, \"https://forum.talkyard.io\"), \")\"),\n+\n+      !inspectForumResp ? r.p({ className: 'container' }, t.Loading) : rFr({},\n+          PrivPrefsTable({ groups }),\n+          AnonymityTable({ baseCats, catsByParentId }),\n+          PermsTable({ baseCats, catsByParentId, perms: allPerms, groupsById }),\n+          ),\n+\n+      hideUnimpl ? null : r.div({ className: 'n_Dbg' },\n+          r.hr(),\n+          r.h2({}, \"Groups\"),\n+          r.pre({}, JSON.stringify(groups, undefined, 3)),\n+          r.h2({}, \"Cats\"),\n+          r.pre({}, JSON.stringify(cats, undefined, 3))),\n+      );\n+});\n+\n+\n+\n+// Privacy\n+//------------------------------------------------------------------------------\n+\n+\n+const PrivPrefsTable = React.createFactory<{ groups: GroupVb[] }>(function(props) {\n+  // _Skip_custom_groups. Currently priv prefs can't be configured in custom groups\n+  // — hasn't been decided what priority they're going to have, compared to\n+  // the built-in trust level groups. [group_priorities]\n+  const trustLevelGroups: GroupVb[] = _.filter(props.groups, g => member_isBuiltIn(g));\n+\n+  const headers =\n+          trustLevelGroups.map((group: GroupVb) => {\n+            return (\n+                r.th({ className: 'c_InspT_GrpName' },\n+                  r.div({}, r.span({}, GroupPrioNameLink(group, linkToPatsPrivPrefs)))));\n+          });\n+\n+  const body = r.tbody({},\n+          hideUnimpl ? null : PrivPrefsRow(\"See my bio\",\n+              (p: PrivacyPrefs) => p.maySeeMyBriefBioTrLv, trustLevelGroups),\n+          hideUnimpl ? null : PrivPrefsRow(\"See my group memberships\",\n+              (p: PrivacyPrefs) => p.maySeeMyMembershipsTrLv, trustLevelGroups),\n+          PrivPrefsRow(\"See my profile\",\n+              (p: PrivacyPrefs) => p.maySeeMyProfileTrLv, trustLevelGroups),\n+          hideUnimpl ? null : PrivPrefsRow(\"Find me by name\",\n+              (p: PrivacyPrefs) => p.mayFindMeTrLv, trustLevelGroups),\n+          hideUnimpl ? null : PrivPrefsRow(\"See if I'm online\",\n+              (p: PrivacyPrefs) => p.maySeeMyPresenceTrLv, trustLevelGroups),\n+          hideUnimpl ? null : PrivPrefsRow(\"See my statistics\",\n+              (p: PrivacyPrefs) => p.maySeeMyApproxStatsTrLv, trustLevelGroups),\n+          PrivPrefsRow(\"List my recent posts\",\n+              (p: PrivacyPrefs) => p.maySeeMyActivityTrLv, trustLevelGroups),\n+          // These have been implemented, but are currently not inherited properly from\n+          // ancestor groups, so, hide in prod mode for now. [inherit_priv_prefs_0impl]\n+          hideUnimpl ? null : PrivPrefsRow(\"Send me DMs\",\n+              (p: PrivacyPrefs) => p.maySendMeDmsTrLv, trustLevelGroups),\n+          hideUnimpl ? null : PrivPrefsRow(\"Mention me\",\n+              (p: PrivacyPrefs) => p.mayMentionMeTrLv, trustLevelGroups),\n+          );\n+\n+  return rFr({},\n+      r.h2({ id: 'priv-prefs' }, \"Privacy preferences\"),  // [inherit_group_priv_prefs]\n+\n+      r.p({},\n+          \"Here you can see how you've configured privacy preferences, \" +\n+          \"and how they're inherited from groups to groups (and to members of those groups).\"),\n+\n+      r.p({},\n+          \"Higher trust level group settings (that is, groups further to the right), \" +\n+          \"override lower trust level group settings (groups to the left). \",\n+          r.b({}, \"For example, \"), \"if Mons is a moderator, and 'See profile' \" +\n+          \"is configured in the Moderators group, that 'See profile' setting is used, \" +\n+          \"when someone else than Mons tries to look at Mons' profile page. \" +\n+          \"— Any settings from groups to the left (lower precedence), \" +\n+          \"are overridden by the Moderators group.\"),\n+\n+      r.p({},\n+          '\"', r.b({}, \"Me\"), \"\\\", \\\"\", r.b({}, \"My\"), \"\\\" and \\\"\", r.b({}, \"I\"), '\" below ' +\n+          \"mean a member of the group in the column you're looking at. \",\n+          r.b({}, \"For example,\"), \" if, in the All Members column, the \" +\n+          \"'See my profile' row is 3 = Full Members, \" +\n+          \"that means only Full Members and above can see the profile page of someone in \" +\n+          \"the All Members group.\"),\n+\n+      r.p({},\n+          \"The default is Everyone (zero, 0). For example, everyone who can access the forum \" +\n+          \"can see one's profile page, by default. (If the forum is private, \" +\n+          \"only those how have logged in can access it — \" +\n+          \"Everyone then is the same as All Members.)\"),  // right now at least, [new_trust_levels]\n+\n+      r.p({},\n+          r.span({ className: 'c_InhSamp' }, \"Gray color \"),\n+          \"means the preference is inherited from the previous group.\"),\n+\n+      r.table({ className: 'c_Insp_PrefsT' },\n+          r.thead({ className: 'c_Rotated' },\n+              r.th({}, ''), // first column is privacy preference names\n+              headers),\n+          body));\n+});\n+\n+\n+function PrivPrefsRow(title: St, getFn: (_: PrivacyPrefs) => TrustLevel | TrustLevelOrStaff,\n+            groups: GroupVb[]): RElm {\n+  let inheritedPref = null;\n+  return r.tr({},\n+      r.td({}, title),\n+      groups.map(group => {\n+        const thisGroupsPref = group.privPrefsOwn && getFn(group.privPrefsOwn);\n+        let className = '';\n+        let prefToShow: Nr | U;\n+        if (isVal(thisGroupsPref)) {\n+          prefToShow = thisGroupsPref;\n+          // In the next <td>, this'll be the inherited value.\n+          inheritedPref = thisGroupsPref;\n+          // Value was set (specified) on this group.\n+          className = 'n_Set';\n+        }\n+        else if (isVal(inheritedPref)) {\n+          prefToShow = inheritedPref;\n+          // Value inherited. This'll dim it.\n+          className = 'n_Inh';\n+        }\n+        else {\n+          // Preference not configured in this group, or any of its ancestors.\n+          // Leave curVal empty.  (Alternatively, could set to Everyone, or to All Members\n+          // if it's about doing sth (e.g. sending a DM), not just viewing [guests_0_mention].)\n+        }\n+        return r.td({ className }, prefToShow);\n+      }));\n+}\n+\n+\n+\n+// Anonymity\n+//------------------------------------------------------------------------------\n+\n+\n+const AnonymityTable = React.createFactory<{ baseCats: Cat[], catsByParentId: SubCatsById }>(\n+        function(props) {\n+\n+  const catsList = r.ul({ className: 'c_InspAno' },\n+      // Maybe would have been better with a table instead? [anonymity_table] But\n+      // if there're many sub categories, how do you collapse them, in a table? One\n+      // community has hundreds of sub categories.\n+      // But with sub cats as sub lists, you can use accordions widgets.\n+      r.li({}, r.div({ className: 'c_InspAno_Cat' },\n+          r.span({ className: 'c_InspAno_Cat_Name' }, ''),\n+          r.span({ className: 'c_InspAno_Cat_ComtAno' }, \"Anonymous?\"),\n+          r.span({ className: 'c_InspAno_Cat_AnoSt' }, \"How long\"))),\n+      props.baseCats.map((c: Cat) => {\n+        const childCats: Cat[] | U = props.catsByParentId[c.id];\n+        return r.li({ key: c.id },\n+            AnonymityRow(c),\n+            childCats && r.ul({}, childCats.map(cc => {\n+              return r.li({ key: cc.id },\n+                  AnonymityRow(cc, c));\n+            })));\n+      }));\n+\n+  return rFr({},\n+      r.h2({}, \"Anonymity\"),\n+      r.p({ className: '' },\n+          \"Here you can see which categories you've made anonymous.\"),\n+\n+      r.p({ className: '' }, // _anon_intro\n+          \"'\", r.b({}, \"–\"),\n+          \"' means the category is not anonymous. \", r.br(),\n+\n+          \"'\", r.b({}, \"Temp\"),\n+          \"' means the discussions are anonymous \", r.i({}, \"temporarily\"), \" only. \" +\n+          \"This is useful for discussing ideas, for example.\", r.br(),\n+\n+          \"'\", r.b({}, \"Perm\"),\n+          \"' means discussions are anonymous, permanently. \" +\n+          \"Useful for sensitive discussions.\"),\n+\n+      r.p({},\n+          r.span({ className: 'c_InhSamp' }, \"Gray color \"), \", no, other color!, \" +\n+          \"means the setting is inherited from the parent category, or is the default.\"),\n+\n+      catsList,\n+      );\n+});\n+\n+\n+function AnonymityRow(thisCat: Cat, parentCat?: Cat): RElm {\n+  // Inherited?\n+  const comtsStartInh = !thisCat.comtsStartAnon && parentCat?.comtsStartAnon;\n+  const comtsStartCat = comtsStartInh ? parentCat : thisCat;\n+  const comtsStartClass = comtsStartInh ? ' n_Inh' : (thisCat.comtsStartAnon ? ' n_Set' : '');\n+\n+  const anonStatusInh = !isVal(thisCat.newAnonStatus) && isVal(parentCat?.newAnonStatus);\n+  const anonStatusCat = anonStatusInh ? parentCat : thisCat;\n+  const anonStatusClass = anonStatusInh ? ' n_Inh' :\n+                              (isVal(thisCat.newAnonStatus) ? ' n_Set' : '');\n+\n+  return r.div({ className: 'c_InspAno_Cat' },\n+      r.span({ className: 'c_InspAno_Cat_Name' },\n+         LinkUnstyled({ to: linkToCat(thisCat) }, thisCat.name)),\n+\n+      r.span({ className: 'c_InspAno_Cat_ComtAno' + comtsStartClass },\n+          !comtsStartCat.comtsStartAnon ? '–' :\n+              pagedialogs.neverAlways_title(comtsStartCat.comtsStartAnon)),\n+\n+      r.span({ className: 'c_InspAno_Cat_AnoSt' + anonStatusClass },\n+          !anonStatusCat.newAnonStatus ? (\n+              // If not configured, Temp is the default, see: DiscPropDefaults [def_anon_status].\n+              comtsStartCat.comtsStartAnon ? \"Temp\" : '–') : (\n+                  // \"Temp\" and \"Perm\" are explained in the _anon_intro.\n+                  anonStatusCat.newAnonStatus === AnonStatus.IsAnonCanAutoDeanon ? \"Temp\" : (\n+                  anonStatusCat.newAnonStatus === AnonStatus.IsAnonOnlySelfCanDeanon ? \"Perm\" : (\n+                  anonStatusCat.newAnonStatus + ' TyEUNKANONST'))),\n+      ));\n+}\n+\n+\n+\n+// Access permissions\n+//------------------------------------------------------------------------------\n+\n+\n+const PermsTable = React.createFactory<{ baseCats: Cat[], catsByParentId: SubCatsById,\n+        perms: PermsOnPage[], groupsById: GroupsById }>(function(props) {\n+\n+  const catsList = r.ul({ className: 'c_InspPrm' },\n+      props.baseCats.map((baseCat: Cat) => {\n+        const permsBaseCat = props.perms.filter(p => p.onCategoryId === baseCat.id);\n+        // COULD_OPTIMIZE: Group perms by cat id.\n+        const subCats: Cat[] | U = props.catsByParentId[baseCat.id];\n+        return r.li({ key: baseCat.id },\n+            PermissionsOnCat(baseCat, permsBaseCat, props.groupsById),\n+            subCats && r.ul({}, subCats.map(subCat => {\n+              const permsSubCat = props.perms.filter(p => p.onCategoryId === subCat.id);\n+              return r.li({ key: subCat.id },\n+                  PermissionsOnCat(subCat, permsSubCat, props.groupsById));\n+            })));\n+      }));\n+\n+  return rFr({},\n+      r.h2({}, \"Access permissions\"),\n+      r.p({},\n+          \"Here you can see which user groups have access to which categories.\"),\n+      r.p({},\n+          \"Permissions are additive: If any group you are in, \" +\n+          \"has a permission, you have it too.\"),\n+      // Have a look at the algorithm again, before commenting in this? [direct_cat_perms]\n+      // (And maybe permissions should be inherited? And Deny permissions too? [may_not_perms]\n+      // Probably too complicated.)\n+      //r.p({},\n+      //    \"A sub category does *not* inherit permissions from its parent category — \" +\n+      //    \"you need to grant permissions explicitly, per category.\"),\n+      r.p({},\n+          // However, if ...\n+          \"If someone cannot see a category, they also cannot see any of its \" +\n+          \"sub categories. Even if you try to grant may-see directly to a sub category.\"),\n+      catsList);\n+});\n+\n+\n+function PermissionsOnCat(thisCat: Cat, permsThisCat: PermsOnPage[], groupsById: GroupsById): RElm {\n+  const permsList = permsThisCat.map(perms =>\n+      r.li({ key: perms.forPeopleId },\n+        OneGroupsPerms(perms, groupsById)));\n+\n+  return r.div({ className: 'c_InspPrm_Cat' },\n+      r.span({ className: 'c_InspPrm_Cat_Name' },\n+         LinkUnstyled({ to: linkToCat(thisCat) }, thisCat.name)),\n+\n+      r.ul({ className: 'c_InspPrm_Cat_PrmLs' },\n+          permsList),\n+      );\n+}\n+\n+\n+function OneGroupsPerms(perms: PermsOnPage, groupsById: GroupsById): RElm {\n+  const groupId = perms.forPeopleId;\n+  const group = groupsById[groupId];\n+  const groupLink = group ? GroupPrioNameLink(group, linkToPatsProfile, false) :\n+          `Group missing, id ${groupId} [TyE0GRP4802]`;\n+\n+  // The may-see permissions should be the most interesting ones. If missing,\n+  // the other perms have no effect.\n+  const seePermsList = [];\n+  const otherPermsList = [];\n+\n+  _.each(perms, (val, key) => {\n+    // Don't show these; it's already clear from the table.\n+    if (key === 'id' || key === 'forPeopleId' || key === 'onCategoryId')\n+      return;\n+\n+    const list = key.startsWith('maySee') ? seePermsList : otherPermsList;\n+    list.push(r.li({ key }, r.span({}, key), r.span({}, val)));\n+  });\n+\n+  return rFr({},\n+      r.span({}, groupLink),\n+      r.ul({ className: 'c_InspPrm_Cat_PrmLs_GrpPrmLs' },\n+          seePermsList,\n+          otherPermsList));\n+}\n+\n+\n+// Utils\n+//------------------------------------------------------------------------------\n+\n+\n+function GroupPrioNameLink(group: GroupVb, linkFn: (_: Who) => St, showTrustLevel?: Bo): RElm {\n+  // This: `id - 10` just happens to work right now,  [new_trust_levels] [group_priorities]\n+  // except for the Mods group (id 18 but not a trust level), & admins (19),\n+  // then need to subtract 11 because of both the Staff & Mods groups in between.\n+  // TrustLevelOrStaff.CoreMember = 6, Staff = 7, Admins = 8.\n+  const trustLevelNr = group.id <= Groups.StaffId ? group.id - 10 : group.id - 11;\n+\n+  showTrustLevel = showTrustLevel !== false &&\n+        // Only built-in groups have a trust level.\n+        member_isBuiltIn(group) &&\n+        // The Mods group is not a trust level group, although it's built-in.\n+        // (Staff & admins are trust levels, though.)\n+        group.id !== Groups.ModeratorsId;\n+\n+  const groupName = pat_name(group);\n+  const title = showTrustLevel ? `${trustLevelNr}: ${groupName}` : groupName;\n+\n+  return (\n+      LinkUnstyled({ to: linkFn(group.id) }, title));\n+}\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "bac20d700cac6cf665943433659e7eb8e634c706",
      "filename": "client/app-staff/admin/review-all.staff.ts",
      "status": "modified",
      "additions": 83,
      "deletions": 33,
      "changes": 116,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Freview-all.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Freview-all.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Freview-all.staff.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -60,7 +60,7 @@ export const ReviewAllPanel = createFactory({\n \n   componentDidMount: function() {\n     let promise: Promise<void> = Server.loadEditorAndMoreBundlesGetDeferred();\n-    Server.loadReviewTasks(reviewTasks => {\n+    Server.loadReviewTasks((reviewTasks: ReviewTask[]) => {\n       promise.then(() => {\n         this.updateTaskList(reviewTasks);\n       });\n@@ -78,14 +78,29 @@ export const ReviewAllPanel = createFactory({\n     Server.loadReviewTasks(this.updateTaskList)\n   },\n \n-  updateTaskList: function(reviewTasks) {\n+  updateTaskList: function(reviewTasks: ReviewTask[]) {\n     if (this.isGone) {\n       // This previously happened because of a component-unmount bug [5QKBRQ],\n       // resulting in the task list not updating itself properly (one would need to reload the page).\n       return;\n     }\n+\n+    // Find ids of spammers we've decided to ban already, so can skip ban buttons.\n+    const spammersById: { [patId: PatId]: true } = {};\n+    const tasksBanningNow = reviewTasks.filter(t =>\n+            t.decision === ReviewDecision.DeleteAndBanSpammer && !t.completedAtMs);\n+    for (let t of tasksBanningNow) {\n+      const post: PostToReview = t.post;\n+      if (post.createdById !== post.currRevComposedById) {\n+        // Then which one is the spammer?\n+        continue;\n+      }\n+      spammersById[post.createdById] = true;\n+    }\n+\n     this.setState({\n       reviewTasks,\n+      spammersById,\n       nowMs: getNowMs(),\n     });\n     setTimeout(this.countdownUndoTimeout, 1000);\n@@ -132,7 +147,9 @@ export const ReviewAllPanel = createFactory({\n     let elems = this.state.reviewTasks.map((reviewTask: ReviewTask, index: number) => {\n       if (this.state.hideComplTasks && reviewTask_doneOrGone(reviewTask))\n         return null;\n-      return ReviewTask({ reviewTask, key: reviewTask.id, updateTaskList: this.updateTaskList,\n+      const isSpammer = this.state.spammersById[reviewTask.post?.createdById];\n+      return ReviewTask({ reviewTask, key: reviewTask.id, isSpammer,\n+          updateTaskList: this.updateTaskList,\n           store, nowMs: this.state.nowMs, taskIndex: index });\n     });\n \n@@ -188,13 +205,26 @@ const ReviewTask = createComponent({\n   },\n \n   // Returns [string, string[]]\n-  formatWhatAndWhys: function(): any[] {\n-    const reviewTask: ReviewTask = this.props.reviewTask;\n+  formatWhatAndWhys: function(reviewTask: ReviewTask, pageMeta: PageMetaBrief): any[] {\n+    const post: PostToReview = reviewTask.post;\n+    // Is it better with the link here? Or _link_after?\n+    // const linkToPost = '/-'+ post.pageId + (post.nr >= FirstReplyNr ? '#post-'+ post.nr : '');\n+    // const theWhatLink =\n+    //         r.a({ href: linkToPost, className: 's_A_Rvw_Tsk_ViewB', target: '_blank' },\n+    //           reviewTask.pageId ? \"The page below \" : \"The post below \");\n+\n     let what = reviewTask.pageId ? \"The page below \" : \"The post below \";\n     const whys = [];\n \n-    const post = this.props.reviewTask.post;\n-    if (!post.approvedRevNr) {\n+    if (post.deletedById) {\n+      what += \"has been deleted. It \";\n+    }\n+    else if (pageMeta?.deletedAtMs) {\n+      what += post.nr >= FirstReplyNr\n+            ? \"is deleted, because the page has been deleted. It \"\n+            : \"has been deleted. It \";\n+    }\n+    else if (!post.approvedRevNr) {\n       what += \"is hidden, waiting for approval, and \";\n     }\n     else if (post.approvedRevNr !== post.currRevNr) {\n@@ -255,6 +285,7 @@ const ReviewTask = createComponent({\n       changed his/her name\n       changed his/her about text */\n \n+    //return [r.span({}, theWhatLink, what), whys];\n     return [what, whys];\n   },\n \n@@ -296,49 +327,53 @@ const ReviewTask = createComponent({\n     const store: Store = this.props.store;\n     const state: ReviewTaskState = this.state;\n \n-    const whatAndWhys: any[] = this.formatWhatAndWhys();\n-    const what: string = whatAndWhys[0];\n+    const post: PostToReview = reviewTask.post;\n+\n+    // (Currently, the name of anyone who deleted the page, isn't available: deletedById\n+    // isn't saved in page meta. Only in the audit log. Hmm.)\n+    const pageMeta: PageMetaBrief | U = store.pageMetaBriefById[post.pageId];\n+\n+    const whatAndWhys: any[] = this.formatWhatAndWhys(reviewTask, pageMeta);\n+    const what: RElm = whatAndWhys[0];\n     const whys: string[] = whatAndWhys[1];\n \n-    const post: PostToReview = reviewTask.post;\n+    const author = store_getUserOrMissing(store, post.createdById);\n \n+    const authorIsBannedSpammer: Bo = pat_isBanned(author) || this.props.isSpammer;\n+\n+    // Is it better with the go-to _link_after the post, or in the text, before?\n     const linkToPost = '/-'+ post.pageId + (post.nr >= FirstReplyNr ? '#post-'+ post.nr : '');\n     const postOrPage = reviewTask.pageId ? \"page\" : \"post\";\n     const openPostButton =\n         r.a({ href: linkToPost, className: 's_A_Rvw_Tsk_ViewB', target: '_blank' },\n           `Go to ${postOrPage}`);\n \n-    const decideTo = (action) => {\n+    const decideTo = (action: ReviewDecision) => {\n       return () => this.makeReviewDecision(action);\n     };\n \n-    let taskInvalidatedInfo;\n-    let taskDoneInfo;\n-    let undoDecisionButton;\n-    let gotUndoneInfo;\n-    let acceptButton;\n-    let rejectButton;\n+    let taskInvalidatedInfo: RElm | U;\n+    let taskDoneInfo: RElm | U;\n+    let undoDecisionButton: RElm | U;\n+    let gotUndoneInfo: RElm | U;\n+    let acceptButton: RElm | U;\n+    let rejectButton: RElm | U;\n+    let banSpammerBtn: RElm | U;\n \n     const deletedBy = !post.deletedById ? null : store_getUserOrMissing(store, post.deletedById);\n     const itHasBeenDeleted = !post.deletedAtMs ? null :\n         r.span({}, \"It was deleted by \",\n             UserNameLink({ store, user: deletedBy, avoidFullName: true }), \". \");\n \n-    // (Currently, name of anyone who deleted the page, isn't available: deletedById not saved\n-    // in page meta. Only in audit log. Hmm.)\n-    const pageMeta: PageMetaBrief = store.pageMetaBriefById[post.pageId];\n-    const pageHasBeenDeleted = !pageMeta || !pageMeta.deletedAtMs ? null :\n-      r.span({}, \"The page has been deleted. \");\n-\n-    // Skip pageHasBeenDeleted and itHasBeenDeleted — let's review those posts anyway?\n+    // Don't check itHasBeenDeleted — let's review those posts anyway?\n     // So staff get more chances to block bad users early. [deld_post_mod_tasks]\n     const isInvalidated = !reviewTask.completedAtMs && reviewTask.invalidatedAtMs;\n     const doneOrGoneClass = reviewTask_doneOrGone(reviewTask) ? 'e_TskDoneGone' : '';\n \n     if (isInvalidated) {\n-      taskInvalidatedInfo =\n+      taskInvalidatedInfo = itHasBeenDeleted ? null : // incl elsewhere always\n           r.span({ className: doneOrGoneClass },\n-            itHasBeenDeleted || \"Invalidated [TyM5WKBAX2]\");\n+            \"Invalidated [TyM5WKBAX2]\");\n     }\n     else if (state.justDecidedAtMs || reviewTask.decidedAtMs || reviewTask.completedAtMs) {\n       const decider: BriefUser | U = store.usersByIdBrief[reviewTask.decidedById];\n@@ -354,9 +389,14 @@ const ReviewTask = createComponent({\n         //case ReviewDecision.InteractTopicDoingStatus: whatWasDone = \" Seems fine: ... ?\"; break;\n         case ReviewDecision.InteractLike: whatWasDone = \" Seems fine: Liked\"; break;\n         case ReviewDecision.DeletePostOrPage: whatWasDone = \" Deleted\"; break;\n+        case ReviewDecision.DeleteAndBanSpammer: whatWasDone = \" Deleted, author banned,\"; break;\n+        default: whatWasDone = 'TyEWAWADON';\n       }\n       taskDoneInfo = r.span({ className: doneOrGoneClass }, whatWasDone, byWho);\n     }\n+    else if (authorIsBannedSpammer) {\n+      taskDoneInfo = r.span({ className: doneOrGoneClass }, \"Author banned as spammer\");\n+    }\n \n     if (reviewTask.invalidatedAtMs) {\n       // Show no undo info or button — that't be confusing, when, for example, the post, or\n@@ -378,16 +418,27 @@ const ReviewTask = createComponent({\n           || isInvalidated) {\n       // Show no decision buttons. (But maybe an Undo button, see above.)\n     }\n+    else if (authorIsBannedSpammer) {\n+      // Hans posts will be auto deleted when the DeleteAndBanSpammer decision gets\n+      // carried out. (So, show no buttons.)  [hide_ban_btns]\n+    }\n     else {\n-      // UX should maybe be an undelete button? And a ban-bad-user button?\n+      // UX should maybe be an undelete button?\n       const acceptText = post.approvedRevNr !== post.currRevNr ? \"Approve\" : \"Looks fine\";\n       acceptButton = itHasBeenDeleted ? null : // won't undelete it\n           Button({ onClick: decideTo(ReviewDecision.Accept),\n               className: 'e_A_Rvw_Tsk_AcptB' }, acceptText);\n+\n       rejectButton =\n           Button({ onClick: decideTo(ReviewDecision.DeletePostOrPage),\n               className: 'e_A_Rvw_Tsk_RjctB' },\n             itHasBeenDeleted ? \"Do nothing (already deleted)\" : \"Delete\");\n+\n+      const isNewUser = ReviewReasons.isByNewUser(reviewTask);\n+      banSpammerBtn = itHasBeenDeleted || !isNewUser ? null :\n+          Button({ onClick: decideTo(ReviewDecision.DeleteAndBanSpammer),\n+              className: 'e_A_Rvw_Tsk_BanB' },\n+            \"Delete and ban spammer\");\n     }\n \n \n@@ -412,10 +463,9 @@ const ReviewTask = createComponent({\n     const itHasBeenHidden = !post.bodyHiddenAtMs || isInvalidated ? null :\n       \"It has been hidden; only staff can see it. \";\n \n-    const author = store_getUserOrMissing(store, post.createdById);\n     const writtenByInfo =\n         r.div({ className: 's_RT_WrittenBy' },\n-          \"Written by: \", UserNameLink({ user: author, store }));\n+          \"Posted by: \", UserNameLink({ user: author, store }));\n \n     const lastApprovedEditBy = !post.lastApprovedEditById ? null :\n         store_getUserOrMissing(store, post.lastApprovedEditById);\n@@ -456,10 +506,10 @@ const ReviewTask = createComponent({\n             })));\n     }\n \n-    // (If pageHasBeenDeleted, then sth like \"Page deleted\" is shown just above hereIsThePost\n-    // — then, don't use the word \"it\", because would be unclear if referred to the page, or the post.)\n+    /* This is a bit chatty, let's remove?\n     const hereIsThePost = pageHasBeenDeleted ? \"Here is the post:\" : (\n         whys.length > 1 || flaggedByInfo ? \"Here it is:\" : '');\n+      */\n \n     const anyPageTitleToReview = !reviewTask.pageId ? null :\n       r.div({ className: 'esRT_TitleToReview' }, reviewTask.pageTitle);\n@@ -503,8 +553,7 @@ const ReviewTask = createComponent({\n           flaggedByInfo,\n           itHasBeenHidden,\n           itHasBeenDeleted,\n-          pageHasBeenDeleted,\n-          hereIsThePost,\n+          //hereIsThePost,\n           r.div({ className: 'esReviewTask_it' },\n             anyPageTitleToReview,\n             r.div({ dangerouslySetInnerHTML: { __html: safeHtml }}))),\n@@ -515,6 +564,7 @@ const ReviewTask = createComponent({\n           taskDoneInfo,\n           acceptButton,\n           rejectButton,\n+          banSpammerBtn,\n           undoDecisionButton,\n           gotUndoneInfo )));\n "
    },
    {
      "sha": "3b21a8e95584f04fef7bec2ac5b03ac672fe21b5",
      "filename": "client/app-staff/admin/users-one.staff.ts",
      "status": "modified",
      "additions": 44,
      "deletions": 22,
      "changes": 66,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fusers-one.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fusers-one.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fusers-one.staff.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -40,6 +40,7 @@ interface UserProfileAdminViewProps {\n interface UserProfileAdminViewState {\n   user?: UserDetailsStatsGroups | N;\n   myId?: PatId;\n+  notFoundId?: PatId\n }\n \n \n@@ -69,6 +70,12 @@ export const UserProfileAdminView = createFactory({\n     const propsBef: UserProfileAdminViewProps = this.props;\n     const meBef: Me = propsBef.store.me;\n     const params = propsBef.match.params;\n+    const userIdInt = parseInt(params.userId);\n+\n+    // Don't keep trying forever.\n+    if (stateBef.notFoundId === userIdInt)\n+      return;\n+\n     {\n       // The props changes first, before the state gets updated (later in this fn).\n       const isSameMe = meBef.id === stateBef.myId;\n@@ -92,9 +99,13 @@ export const UserProfileAdminView = createFactory({\n       this.nowLoading = params.userId;\n     }\n \n-    Server.loadPatVvbPatchStore(params.userId, (resp: LoadPatVvbResponse) => {\n+    Server.loadPatVvbPatchStore(params.userId, (resp: LoadPatVvbResponse | NotFoundResponse) => {\n       this.nowLoading = null; // (or only if correct id)\n       if (this.isGone) return;\n+      if (resp === 404) {\n+        this.setState({ notFoundId: userIdInt, user: null } satisfies UserProfileAdminViewState);\n+        return;\n+      }\n       const propsAft: UserProfileAdminViewProps = this.props;\n       const meAft = propsAft.store.me;\n       const isSameMeLater = meAft.id === meBef.id;\n@@ -107,7 +118,7 @@ export const UserProfileAdminView = createFactory({\n       if (!rightPat || !isSameMeLater)\n         return;\n \n-      this.setState({ user: pat });\n+      this.setState({ user: pat, notFoundId: null } satisfies UserProfileAdminViewState);\n     });\n   },\n \n@@ -150,8 +161,13 @@ export const UserProfileAdminView = createFactory({\n     const props: UserProfileAdminViewProps = this.props;\n     const store: Store = props.store;\n     const settings: Settings = props.settings;\n-    const user: UserInclDetails = this.state.user;\n+    const state: UserProfileAdminViewState = this.state;\n+    const user: UserInclDetails = state.user;\n     const me: Myself = store.me;\n+\n+    if (state.notFoundId)\n+      return r.p({}, \"User not found.\");\n+\n     if (!user)\n       return r.p({}, \"Loading...\");\n \n@@ -189,10 +205,10 @@ export const UserProfileAdminView = createFactory({\n     // ----- Enabled?\n \n     let enabled = true;\n-    let notEnabledBecauseEmailUnverified;\n-    let notEnabledBecauseWaitingToBeApproved;\n-    let notEnabledBecauseRejected;\n-    let notEnabledBecauseBanned;\n+    let notEnabledBecauseEmailUnverified: RElm | U;\n+    let notEnabledBecauseWaitingToBeApproved: RElm | U;\n+    let notEnabledBecauseRejected: RElm | U;\n+    let notEnabledBecauseBanned: RElm | U;\n \n     if (settings.requireVerifiedEmail && !user.emailVerifiedAtMs) {\n       enabled = false;\n@@ -212,7 +228,7 @@ export const UserProfileAdminView = createFactory({\n       }\n     }\n \n-    if ((<number | string> user.suspendedTillEpoch) === 'Forever') {\n+    if (pat_isBanned(user)) {\n       enabled = false;\n       notEnabledBecauseBanned =\n           r.span({ className: 'e_Banned' }, \" User banned.\");\n@@ -290,25 +306,30 @@ export const UserProfileAdminView = createFactory({\n                 Button({ onClick: makeEditFn(EditMemberAction.SetUnapproved), className: 'e_Appr_RejB' },\n                   \"Reject\"))));\n \n-\n-    const suspendedText = user.suspendedTillEpoch\n-        ? \"from \" + moment(user.suspendedAtEpoch).format('YYYY-MM-DD') +\n-            \" to \" + moment(user.suspendedTillEpoch).format('YYYY-MM-DD HH:mm') +\n-            \", reason: \" + user.suspendedReason\n-        : \"No\";\n-\n-    let whyCannotSuspend;\n+    const fromFn = () => moment(user.suspendedAtEpoch).format('YYYY-MM-DD');\n+    const isBanned = pat_isBanned(user);\n+    const suspendedText =\n+        !user.suspendedAtEpoch ? \"No\" : (\n+            isBanned ? `Banned since ${fromFn()}` : (\n+                \"Suspended at \" + fromFn() +\n+                \" until \" + moment(user.suspendedTillEpoch).format('YYYY-MM-DD HH:mm')\n+            ) +\n+            \", reason: \" + user.suspendedReason);\n+\n+    let whyCannotSuspend: RElm | U;\n     if (thatIsYou) {\n       whyCannotSuspend = r.span({}, \"(you cannot suspend yourself)\");\n     }\n     else if (user.isAdmin) {\n       whyCannotSuspend = r.span({}, \"(cannot suspend admins)\");\n     }\n-    let suspendButton;\n-    let userSuspendedNow = user.suspendedTillEpoch && Date.now() <= user.suspendedTillEpoch;\n+\n+    let suspendButton: RElm | U;\n+    let userSuspendedNow = user_isSuspended(user, Date.now());\n     if (userSuspendedNow) {\n       suspendButton =\n-          Button({ onClick: this.unsuspendUser, className: 'e_Unuspend' }, \"Unsuspend\");\n+          Button({ onClick: this.unsuspendUser, className: 'e_Unuspend' },\n+              isBanned ? \"Unban\" : \"Unsuspend\");\n     }\n     else if (whyCannotSuspend) {\n       suspendButton = whyCannotSuspend;\n@@ -317,7 +338,8 @@ export const UserProfileAdminView = createFactory({\n       suspendButton =\n           Button({ onClick: () => openSuspendUserDialog(user, this.reloadUser),\n               className: 'e_Suspend' },\n-            \"Suspend\");\n+            // UX SHOULD add a way to ban user from here, too.\n+            \"Suspend\");  // \" or ban\" ?\n     }\n \n     const isAdminText =\n@@ -328,8 +350,8 @@ export const UserProfileAdminView = createFactory({\n         r.span({ className: user.isModerator ? 'e_Mod-Yes' : 'e_Mod-No' },\n             prettify(user.isModerator));\n \n-    let toggleAdminButton;\n-    let toggleModeratorButton;\n+    let toggleAdminButton: RElm | U;\n+    let toggleModeratorButton: RElm | U;\n     if (me.isAdmin && !thatIsYou && !userSuspendedNow && !user.isGroup) {\n       toggleAdminButton =\n           Button({ onClick: this.toggleIsAdmin, className: 'e_ToggleAdminB' },"
    },
    {
      "sha": "b60b927d130aea0cb5b14271b7e4947318229b2f",
      "filename": "client/app-staff/admin/users.staff.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fusers.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Fapp-staff%2Fadmin%2Fusers.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fusers.staff.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -366,12 +366,13 @@ const UserRow = createFactory<any>({\n             r.span({ className: 's_A_Us_UsL_U_Modif' },\n               threatLevel === ThreatLevel.MildThreat ? \" — mild threat\" : \" — moderate threat\"),\n         !user_isSuspended(user, nowMs) ? null :\n-            r.span({ className: 's_A_Us_UsL_U_Modif' }, \" — suspended\"),\n+            r.span({ className: 's_A_Us_UsL_U_Modif' }, pat_isBanned(user) ? \" — banned\" : \" — suspended\"),\n         !isDeactivated || isDeleted ? null :\n             r.span({ className: 's_A_Us_UsL_U_Modif' }, \" — deactivated\"),\n         !isDeleted ? null :\n           r.span({ className: 's_A_Us_UsL_U_Modif' }, \" — deleted\"));\n \n+\n     const emailNotVerified = !user.email || user.emailVerifiedAtMs ? null :\n       r.span({ className: 's_A_Us_UsL_U_Modif e_EmNotVerfd' }, \" — not verified\");\n "
    },
    {
      "sha": "366033f7304f628071923e1b08c63ddf68b73b1b",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Ftypes-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/client%2Ftypes-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Ftypes-and-const-enums.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -283,6 +283,7 @@ const enum ReviewDecision {\n   // 3nnn = Request changes.\n   // 5nnn = Reject.\n   DeletePostOrPage = 5001,\n+  DeleteAndBanSpammer = 5501,\n }\n \n \n@@ -639,11 +640,6 @@ const enum TrustLevel {\n   Max = CoreMember,\n }\n \n-const enum DummyTrustLevel {\n-  Staff = 7,\n-  Admin = 8,\n-}\n-\n /// Any way to avoid repetition? (See TrustLevel above.)\n /// Note that Max is different here though!\n const enum TrustLevelOrStaff {\n@@ -652,6 +648,7 @@ const enum TrustLevelOrStaff {\n   New = 1,\n   Basic = 2,\n   FullMember = 3,\n+  // HelpfulMember, later? [new_trust_levels]\n   Trusted = 4,\n   Regular = 5,\n   CoreMember = 6,"
    },
    {
      "sha": "c15b2a32025b9c8160c26552c02ae7b33eae2eca",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/conf%2Froutes",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/conf%2Froutes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf%2Froutes?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -140,7 +140,6 @@ GET   /-/load-cats-tags-site-notf-prefs  controllers.UserController.loadMembersC\n POST  /-/save-privacy-prefs     controllers.UserController.saveMemberPrivacyPrefs\n POST  /-/save-guest             controllers.UserController.saveGuest\n POST  /-/delete-user            controllers.UserController.deleteUser\n-# Currently ignores group inheritance of settings. [2WHK7PU0]\n GET   /-/list-complete-users    controllers.UserController.listCompleteUsers(whichUsers)\n GET   /-/load-user-any-details  controllers.UserController.loadUserAnyDetails(who)\n POST  /-/edit-member            controllers.UserController.editMember\n@@ -192,6 +191,7 @@ POST  /-/save-category          controllers.ForumController.saveCategory\n GET   /-/load-category          controllers.ForumController.loadCategoryToEdit(id: Int)\n POST  /-/delete-category        controllers.ForumController.deleteCategory\n POST  /-/undelete-category      controllers.ForumController.undeleteCategory\n+GET   /-/inspect-forum          controllers.ForumController.inspectForum\n \n GET   /-/redir-to-about         controllers.ForumController.redirectToAboutPage(categoryId: Option[Int])\n "
    },
    {
      "sha": "a771f8aad5012929b26c8e9faf7035c2429344b7",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 65,
      "deletions": 11,
      "changes": 76,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -134,17 +134,42 @@ Also make this work for the root cat? So one can get an overview of permission\n settings for *all* base cats and sub cats in the whole forum — a cat permissions\n table-tree, somehow. [incl_root_cat]\n \n-[may_not_perms] (negative_perms, neg_perms)\n+[may_not_perms] (negative_perms, neg_perms, [deny_perms])\n Currently permissions are additive. Maybe, though, in some cases it'd be good\n with \"negative\" permissions — e.g. a group that may Not something.\n Then, everyone in that group, would be forbidden from doing that something,\n regardless of how they inherited permissions from other groups.\n \n+[0_site_perms]\n+Let's wait. Whole site see/reply/edit/etc permissions haven't been totally implemented —\n+there's no way to set such permissions via the ui (right?).\n+Maybe that's good — site wide permissions would be too coarse grained & permissive,\n+would almost need to be combined with Deny permissions? [may_not_perms] So that it'd\n+still be possible with private categories, even if sbd may see everything by default.\n+But there's group permissions — that's site wide perms, but not related to any\n+specific category, so, fine (no confusion about if inherited in the category tree, since\n+not related to categories). See EffPatPerms.\n+\n [granular_perms]\n E.g. may-see-others'-sessions. Currently only amdins may, but sometimes, good if mods could too?\n Or a mayReplyOnOwn permission? Maybe never.\n Also see: [wiki_perms]\n \n+[inherit_group_priv_prefs]\n+Privacy preferences are inherited from groups, and there's a group priority order see:\n+../wip/priv-prefs/priv-prefs-wip.txt and Scala class MemberPrivacyPrefs.\n+Visualized on the inspect page, ../client/app-staff/admin/inspect.staff.ts.\n+But not implemented everywhere: [inherit_priv_prefs_0impl]\n+\n+[maySeeProfiles](WithMaxTrLv?)\n+New permissions, on groups. Can then see profiles, or maySeeActivity, or mayMessage etc.\n+Might want to grant to all support staff, in a publ forum, f.ex., even if they're not moderators.\n+\n+[group_priorities]\n+Let admins configure which groups have priority, if there're conflicting privacy\n+preferences? Trust level groups have increasing priority from Everyone —> All Members —> ...,\n+Custom groups priorities: See  ../wip/priv-prefs/priv-prefs-wip.txt.\n+\n [tags]\n Nice props / tags in Gerrit: https://chromium-review.googlesource.com/c/v8/v8/+/2537690\n \n@@ -201,6 +226,11 @@ the same group(s) or high enough trust level or sth like that?\n The opposite: Easy to find pats, e.g.:\n       type ' @' and the '@support' group is suggested [mentions_prio_c].\n \n+[dm_priv_pats]\n+If happens to be in same discussion as a private user, can be nice to be able to DM\n+them, although can't access their profile and see any more user details.\n+(maySendMeDmsTrLv can be configured independently.)\n+\n [tech_level] Let users configure their tech level — let's say sbd who knows all about\n Ty joins a new forum. Then, although a New Member, hen can up hens tech level and get\n access to features the software otherwise would have thought were too complicated.\n@@ -209,7 +239,7 @@ Store in pats_t.tech_level_c.\n [new_trust_levels]\n [mods_are_core_membs]\n Let trust level of mods & admins be CoreMember — or maybe add higher trust levels?\n-Can start at 21 = lightweight mod, 22 = mod, 23 = admin, 24 = owner?\n+Can start at 21 = [lightweight_mods], 22 = mod, 23 = mod of mods, 24 = admin, 25 = owner?\n \n [alterPage]\n [core_move_page]\n@@ -218,9 +248,19 @@ Should there be a move-page-perm, not just alter-page?\n [power_mod]\n [power_users]\n \n-[inherit_group_priv_prefs]\n-One should inherit privacy and noise settings from one's closest trust level group,\n-and from any custom group one is in? But one's own settings should override.\n+[power_admin]\n+Various fancy admin features, disabled by default.\n+\n+[mod_of_mods]\n+? Like admins, but cannot edit site configuration (and might not have access to all parts).\n+Can manage [lightweight_mods] and ordinary mods.\n+\n+[lightweight_mods]\n+? People who can approve posts / edit / suspend, but fewer abilities than ordinary mods.\n+\n+[cat_mods]\n+Category moderators. They'd be [lightweight_mods], but in a specific category/ies only.\n+\n \n [user_version] [tag_versions]\n Add a version field to pats_t and an in-mem user? So knows if the in-mem one is stale;\n@@ -263,6 +303,22 @@ If admins try to configure too \"high\" values, e.g. 1 TB upload size,\n need a way for them to know they're above the server or site limits,\n e.g. the Nginx client_max_body_size.\n \n+[site_ip_person_limits]\n+Should be 3 types of rate & max limits multipliers:\n+1) One that affects groups and everyone in those groups,\n+2) One that affects ip addresses, possibly specific addresses or whithin a country,\n+3) One that affects the whole site.\n+But the current  SiteLimitsMultipliers  are for all three at once — which doen't make sense.\n+E.g. shouldn't increase *per person* rate limits, just because there's many members.\n+Instead, should split into 1, 2, 3 above.\n+And, with 1) limits for user groups, then, the Everyone group would be the default\n+limit multipliers (1.0), and e.g. Core Members could have limits x 2?\n+Sth like:\n+    SiteLimitsMultipliers —> LimitsMultipliers,\n+      and look up by:  whole site,  ip addr logged in / not logged in,  user group?\n+      and look at all limits.\n+Add more fields to  PatPerms? No, it's not for limits, but for permissions?  [more_pat_perms]\n+\n [more_runtime_assertions]\n Figure out a way to safely add more runtime assertions — although sometimes\n I'll add *incorrect assertions* some of which will *break* and need to\n@@ -636,9 +692,6 @@ Don't bump page if private comments — or do, for those who can see? Hmm.\n       Same notf level as for direct messages — instead of the page's notf level?\n \n \n-[cat_mods]\n-Category moderators.\n-\n [see_who_notfd]\n When composing a message, see who will get notified — e.g. if mentioning a group,\n or editing a message, can be unclar if a newly edit-added @username gets notified or not\n@@ -697,9 +750,6 @@ a bunch of settings automatically tweaked, for that use case.\n   - Blog comments\n \n \n-[power_admin]\n-Various fancy admin features, disabled by default.\n-\n [tiny-dialog]\n Find (or create?) a tiny modal dialog React class that can be included in slim-bundle.js,\n so can open error dialog also if couldn't load more-bundle.js from the server.\n@@ -932,6 +982,10 @@ Use the C preprocessor? Didn't find anything else that does what I'm looking for\n Maybe make all endpoints that accept, say, only POST, reply and tell other method\n type invocations that they should use POST? Would need to change Play Fmw for this.\n \n+[React19_actions]\n+Can lots of React.useEffect() plus React.useRef() be replaced & simplified by\n+React 19's useActionState()?\n+\n [React_Router_v51]\n Migrate unnecessary Route({ ... render: ({ match }) => ...) to hooks:\n https://reacttraining.com/blog/react-router-v5-1/"
    },
    {
      "sha": "329ec326b6d1afc3f7ba1aa6e3e0a994e684f218",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 36,
      "deletions": 13,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -301,13 +301,19 @@ anonymous comments,\n anons:\n   partly impl:\n             - tests/app/debiki/dao/AnonymAppSpec.scala\n-  Make work again, and code review:\n-            - tests/e2e-wdio7/specs/alias-anons-basic.2br.f.e2e.ts\n-            - tests/e2e-wdio7/specs/alias-anons-true-mixed.2br.f.e2e.ts\n+  _anon_e2e_to_code_review:\n+            - alias-anons-basic-temp.2br.f\n+            - alias-anons-basic-perm.2br.f\n+            - alias-anons-approve-review.2br.f\n+            - alias-anons-edit-alter.2br.f\n+  TESTS_MISSING, not impl:\n+            - alias-anons-true-mixed.2br.f\n+            - alias-anons-see-own.2br.f\n   settings:\n     enabling Anon Sens Disc disables presence:\n             - alias-anons-true-mixed.2br.f  TyTALIANONTRUEMX.TyTANOSENSDISLN\n   TESTS_MISSING:\n+    but now most of this implmented, see _anon_e2e_to_code_review above.\n             - See  ../wip/aliases/auto-test-thoughts.txt\n             - Anon mode, send priv msg?\n             - Callers of  checkAliasOrThrowForbidden() & getAliasOrTruePat() [misc_alias_tests]\n@@ -419,12 +425,6 @@ sessions:\n             - TESTS_MISSING\n \n \n-privacy:  [.noise_and_privacy]\n-  can cannot:\n-    see email:\n-    see username:\n-    see if I'm online:\n-\n navigation:\n   from anywhere, to anywhere:\n           - navigation-as-stranger.test.ts  TyT5WKAB024\n@@ -465,6 +465,7 @@ profile page, user:\n     won't list posts in deleted categories:\n     won't list posts from deleted pages:\n     won't list posts from pages one may not see:\n+  privacy: [_priv]\n \n   list login methods:\n           - create-site-github-oauth-uppercase-email.test.ts  TyT4AR8GFAH\n@@ -536,7 +537,21 @@ groups:\n   permissions, custom groups:\n           - group-permissions-similar-topics.2browsers.test.ts  TyT05BMRSH2J\n           - permissions-edit-wiki-posts.2browsers.test.ts  TyT603RKDEJ46\n+  privacy: [_priv]\n+\n \n+privacy:  [_priv] [.noise_and_privacy]\n+            - privacy-list-activity.2br.f  TyTPRIV_LSACT\n+            - block-mentions.2br.d  TyTMAYMENTION\n+            - block-dir-msgs.2br.d  TyTBLOCKDIRMSGS\n+  inherited from groups:\n+            - privacy-may-see.3br.f.e2e.ts  TyTPRIV_MAYSEE\n+  see activity but not user profile?:  [see_activity_0_profile]\n+      not implemented, and:\n+            - TESTS_MISSING  TyTPRIV_ACT0PROF\n+  see email:\n+  see username:\n+  see if I'm online:\n \n security:\n   access denied,\n@@ -970,6 +985,8 @@ mentions:\n \n   may mention me trust level:\n             - block-mentions.2br.d  TyTMAYMENTION\n+  mentioning users w private profiles:\n+            - privacy-may-see.3br.f.e2e.ts  TyTPRIV_MAYSEE.TyTPRIV_MENTION02\n \n \n link previews:\n@@ -1248,6 +1265,7 @@ users online -\n   unchanged after server restart:\n   not see if I'm online:\n             - see [.noise_and_privacy]\n+            - all   _anon_e2e_to_code_review\n \n watchbar -\n   recent list:\n@@ -1392,10 +1410,12 @@ review after:\n     undoReviewDecision: [4JKWWD4]\n     ... lots of stuff ...\n     bad user auto-banned:\n-    invalidating review tasks - [2VSP5Q8]\n-      reject-delete post -\n-       - admin-review-invalidate-for-reply.2browsers.test.ts  TyT6KWB42A\n-      reject-delete page -\n+    invalidating review tasks: [2VSP5Q8]\n+      band & delete all:\n+            - modn-ban-spammer.2br.f  TyTMODNBANSPM\n+      reject-delete post:\n+            - admin-review-invalidate-for-reply.2browsers.test.ts  TyT6KWB42A\n+      reject-delete page:\n         other review task same page get invalidated:\n         delete one post on the deleted page:\n         undelete page, other tasks reactivated:\n@@ -1508,6 +1528,8 @@ spam: (4BKS0)\n           - spam-basic-akismet-false-positives.2browsers.test.ts  TyT205MKRRK0\n           - spam-basic-akismet-false-negatives.2browsers.test.ts  TyT63MKWYT37\n           - spam-basic-safe-browsing-api-blocked.2browsers.test.ts  TyTSPSAFEBRAPI\n+  ban spammer:\n+            - modn-ban-spammer.2br.f  TyTMODNBANSPM\n \n delete user:    NEXT was a bug, when deleted by admin\n   deletes henself:\n@@ -1715,6 +1737,7 @@ live notfs,\n live notifications -\n   reply appears in 2nd browser:\n             - delete-pages.2br  TyTE2EDELPG602.TyTWS702MEGR5\n+            - modn-ban-spammer.2br.f  TyTMODNBANSPM.TyTWS702MEGR5\n   attacker tries to bypass authentication:\n           -  TESTS_MISSING  TyTWSAUTH\n   reconnects after disconnection:"
    },
    {
      "sha": "0e8a0dffc5601f07adaad7d19f22da6f638f98ab",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1 +1 @@\n-Subproject commit 429156f551aebcfc46c945ab7e81ae06773888f3\n+Subproject commit 0e8a0dffc5601f07adaad7d19f22da6f638f98ab"
    },
    {
      "sha": "531dc51fad031733236b3d32e867135b664bd572",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -414,7 +414,6 @@ function runAllE2eTests {\n   $r s/wdio --only user-profile-change-email.2browsers $args\n   $r s/wdio --only user-profile-change-password.2br.mtime $args  # ... similar\n   $r s/wdio --only user-profile-cannot-delete-idp-email.1br.extidp $args\n-  $r s/wdio --only user-profile-activity-private.2browsers $args\n   $r s/wdio-7 --only user-self-delete-upd-groups.2br.f.e2e.ts --cd -i $args\n \n   $r s/wdio --only group-profile-change-things.2browsers $args\n@@ -431,6 +430,8 @@ function runAllE2eTests {\n   $r s/wdio --only impersonate-post-as-other.2browsers $args\n   $r s/wdio --only impersonate-restricted-areas $args\n \n+  # Notifications\n+  # ------------\n \n   # There're email notfs and unsubscription tests for guests, further below, in:\n   # embedded-comments-guest-login-email-notf-unsbscribe\n@@ -461,9 +462,16 @@ function runAllE2eTests {\n \n   $r s/wdio-7 --only notfs-mark-seen-as-seen.d.2br --cd -i $args  # RENAME append -automatically\n \n+  # Privacy preferences\n+  # ------------\n+\n+  $r s/wdio-7 --only privacy-list-activity.2br.f.e2e.ts --cd -i $args\n+  $r s/wdio-7 --only privacy-may-see.3br.f.e2e.ts --cd -i $args\n   $r s/wdio-7 --only block-mentions.2br.d --cd -i $args\n   $r s/wdio-7 --only block-dir-msgs.2br.d --cd -i $args\n \n+  # ------------\n+\n   # RENAME these to  modn-... ,  and MOVE to (4862065) below?\n   $r s/wdio --only new-user-review-ok.2br.mtime $args\n   #$r s/wdio --only new-user-review-bad.2browsers $args\n@@ -481,6 +489,9 @@ function runAllE2eTests {\n   $r s/wdio --only flag-member-block-agree.2browsers $args\n   $r s/wdio --only flag-guest-block-agree.2browsers $args\n \n+  # Page types\n+  # ------------\n+\n   $r s/wdio-7 --only page-type-discussion-progress.1br.d --cd -i $args\n   $r s/wdio-7 --only page-type-idea-statuses-comments.2br.d --cd -i $args\n   $r s/wdio-7 --only page-type-problem-statuses.2br.d --cd -i $args\n@@ -489,6 +500,9 @@ function runAllE2eTests {\n \n   $r s/wdio-7 --only do-api-upvote-ideas-sort-by-votes.2br.d --cd -i $args\n \n+  # Seach\n+  # ------------\n+\n   $r s/wdio --only search-public-basic.2browsers $args\n   $r s/wdio --only search-private-chat.2browsers $args\n   $r s/wdio-7 --only reindex-sites.2br.f --cd -i $args\n@@ -498,6 +512,9 @@ function runAllE2eTests {\n   # one has seen.\n   $r s/wdio --only summary-emails.2br.mtime $args\n \n+  # Invites\n+  # ------------\n+\n   $r s/wdio --only invites-by-adm-click-email-set-pwd-link.2browsers $args\n   $r s/wdio --only invites-by-mod-try-signup-after.2browsers $args\n   $r s/wdio --only invites-by-core-try-login-after.2browsers $args\n@@ -506,6 +523,8 @@ function runAllE2eTests {\n   $r s/wdio --only invites-too-many.2browsers $args\n   $r s/wdio --only invite-to-groups.2browsers $args\n \n+  # ------------\n+\n   $r s/wdio --only weird-usernames.2browsers $args\n \n   $r s/wdio --only group-mentions-built-in-groups.2browsers $args\n@@ -536,6 +555,8 @@ function runAllE2eTests {\n   # Moderation   (4862065)\n   # ------------\n \n+  $r s/wdio-7 --only modn-ban-spammer.2br.f.e2e.ts --cd -i $args\n+\n   $r s/wdio-7 --only may-see-email-adrs.2br.d --cd -i $args\n \n "
    },
    {
      "sha": "5674c2e0923b276e39034ca708344999d83027a0",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fpackage.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fpackage.json?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -14,7 +14,7 @@\n     \"@wdio/spec-reporter\": \"^7.20.3\",\n     \"@wdio/types\": \"^7.20.3\",\n     \"axios\": \"^0.26.1\",\n-    \"chromedriver\": \"^128.0.3\",\n+    \"chromedriver\": \"^131.0.1\",\n     \"paseto.js\": \"^0.1.7\",\n     \"ts-node\": \"^10.9.1\",\n     \"wdio-chromedriver-service\": \"^7.3.2\""
    },
    {
      "sha": "f6919c765bc6e56bd55f4d35c2edd3261f985f20",
      "filename": "tests/e2e-wdio7/specs/alias-anons-basic-perm.2br.f.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Falias-anons-basic-perm.2br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Falias-anons-basic-perm.2br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Falias-anons-basic-perm.2br.f.e2e.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -226,7 +226,7 @@ describe(`alias-anons-true-mixed.2br.f  TyTALIANONTRUEMX`, () => {\n   // ----- Configure Sensitive Anon Discs  (feature now enabled)\n \n   it(`Owen goes back to the category`, async () => {\n-    // (Can skip: owen_brA.switchBackToFirstTabIfNeeded().)\n+    // (Can skip: await owen_brA.switchBackToFirstTabIfNeeded().)\n     await owen_brA.go2('/latest/category-a');\n   });\n   it(`... edits the category`, async () => {"
    },
    {
      "sha": "7c3763a5018e83f2db4bae2308a69530b6d4deb4",
      "filename": "tests/e2e-wdio7/specs/block-mentions.2br.d.e2e.ts",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fblock-mentions.2br.d.e2e.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -117,13 +117,38 @@ describe(`block-mentions.2br.d  TyTMAYMENTION`, () => {\n \n \n \n+  // ----- @mentions disabled\n+\n+\n+  it(`Memah starts mentioning Owen ...`, async () => {\n+    await memah_brB.topic.clickReplyToOrigPost();\n+    await memah_brB.editor.editText(`Hmm @o`);\n+  });\n+  it(`... Owen appears in a usernames pop up list, but disabled`, async () => {\n+    await memah_brB.waitUntilAnyTextMatches(\n+            '.rta__entity > div.c_Disabled', owen.username + '.* mentions disabled');\n+  });\n+\n+  it(`Memah starts mentioning Maria instead ...`, async () => {\n+    await memah_brB.keys('Escape');\n+    await memah_brB.editor.editText(`Hi @m`);\n+  });\n+  it(`... a usernames list pops up, Maria's name isn't disabled`, async () => {\n+    await memah_brB.waitUntilAnyTextMatches(\n+            '.rta__entity > div:not(.c_Disabled)', maria.username);\n+  });\n+\n+\n+\n   // ----- Block @mentions in comments\n \n \n   it(`Memah again mentions first Owen ...`, async () => {\n     numEmailsTotal += 0;\n-    await memah_brB.complex.replyToOrigPost(\n+    await memah_brB.keys('Escape');\n+    await memah_brB.editor.editText(\n           `Actually @${owen.username}`);\n+    await memah_brB.editor.save();\n   });\n \n "
    },
    {
      "sha": "b2a97b0ba830377c2d2be2b4f47074f06a3ab1c1",
      "filename": "tests/e2e-wdio7/specs/modn-ban-spammer.2br.f.e2e.ts",
      "status": "added",
      "additions": 357,
      "deletions": 0,
      "changes": 357,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,357 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import * as make from '../utils/make';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let angryElk: Member;\n+let angryElk_brA: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let merche: Member;\n+let merche_brB: TyE2eTestBrowser;\n+let mallory: Member;\n+let mallory_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+/* Structure:\n+\n+We_are_protesting!   (Angry Elk)\n+    Use zebra_crossing  (by Maria)\n+    What are you rambling_about? Are you drunk?   (Merche)  <— —ban & delete,\n+                                                                deletes Michaels topic too\n+Elk stew  (by Maria)\n+    We want safety! (Angry Elk)\n+\n+Mashed potatoes (by Maria)   <— ban & delete, deletes all Maria's\n+\n+Who_ate_my_apples  (by Merche)\n+\n+Buy v14gr4   (by Mallory, spammer)\n+    Where can I do that?  (Angry Elk)\n+    Send money to .... (Mallory)   <— banning & deleting this, should delete the whole page\n+                                      since Mallory is the page author too\n+*/\n+\n+\n+const angryElksTopicA_title = 'We_are_protesting!';\n+const angryElksTopicA_body =\n+    `We have had enough! We demand free passage accross all roads.`;\n+let angryElksUrl: St | U;\n+\n+const mariasReply_zebraCrossing = `Can't you just use the zebra_crossing?`;\n+\n+const merchesReply_ramblingDrunk = `What are you rambling_about? Are you drunk?`;\n+// The first reply is by Maria. It gets deleted by Owen.\n+const merchesReplyNr = c.SecondReplyNr;\n+\n+const mariasTopic_elkStew = {\n+  title: `Elk_stew_recipie?`,\n+  body: `I just got my license, and there's elks here. Any recipie_suggestion?`\n+};\n+\n+const mariasTopic_mashedPotatoes = {\n+  title: `Mashed_potatoes`,\n+  body: `Do I need to mash the potatoes? With my clogs_or_a_hammer`\n+};\n+\n+// const angryElksReplyToMariasTopic1 =\n+//     `We want safety in our own forrest!\n+//     We demand that all hunting be forbidden!\n+//     And more equality, and we need to get rid of all the cars and traffic from the roads`;\n+\n+const merchesTopic_ateApples = {\n+  title: `Who_ate_my_apples`,\n+  body: `Someone ate all_my_apples, why would anyone do that`\n+};\n+\n+const mallorysTopic_v14gr4 = {\n+  title: `Buy_v14gr4`,\n+  body: `Cheap v14gr4 who wants`\n+};\n+\n+let mallorysPageUrl: St | U;\n+\n+const angryElksReplyToMallory = `Where can I do that? Can you ship to the murky ` +\n+          `tree at the stone near the lake?`;\n+const mallorysReplyToAngryElk = `Sure, just pay to this BitCoin address, wait`;\n+\n+\n+\n+describe(`modn-ban-spammer.2br.f  TyTMODNBANSPM`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addCatABForum({\n+      title: \"Ban Spam E2E Test\",\n+      members: ['mons', 'maria', 'mallory']\n+    });\n+\n+    builder.settings({\n+      numFirstPostsToApprove: 3,\n+      maxPostsPendApprBefore: 3,\n+      numFirstPostsToReview: 0,\n+    });\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    angryElk = make.member('angryelk', { fullName: \"Angry Elk\" });\n+    angryElk_brA = brA;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    merche = make.memberMerche();\n+    merche_brB = brB;\n+    mallory = forum.members.mallory;\n+    mallory_brB = brB;\n+\n+    // Changing trust & threat levels:\n+    mallory.trustLevel = c.TestTrustLevel.Basic;\n+    mallory.threatLevel = c.TestThreatLevel.HopefullySafe;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Angry Elk, who is indeed angry, like the name implies, goes to the forum`, async () => {\n+    await angryElk_brA.go2(site.origin);\n+  });\n+  it(`... signs up`, async () => {\n+    await angryElk_brA.complex.signUpAsMemberViaTopbar(angryElk);\n+  });\n+  it(`... verifies his email`, async () => {\n+    const url = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+            site.id, angryElk.emailAddress);\n+    await angryElk_brA.go2(url);\n+    await angryElk_brA.hasVerifiedSignupEmailPage.clickContinue();\n+  });\n+\n+\n+  it(`Angry Elk creates a new topic, it'll be pending approval`, async () => {\n+    await angryElk_brA.complex.createAndSaveTopic({\n+          title: angryElksTopicA_title,\n+          body: angryElksTopicA_body,\n+          willBePendingApproval: true });\n+    angryElksUrl = await angryElk_brA.getUrl();\n+  });\n+  it(`Angry Elk leaves, in an unusually bad mood`, async () => {\n+    await angryElk_brA.topbar.clickLogout();\n+  });\n+\n+  it(`Owen logs in, goes to the moderation page`, async () => {\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+    await owen_brA.topbar.myMenu.goToAdminReview();\n+  });\n+  it(`... approves Angry Elk's topic`, async () => {\n+    await owen_brA.adminArea.review.approvePostForMostRecentTask();\n+    await owen_brA.adminArea.review.playTimePastUndo();\n+  });\n+\n+\n+  // ----- Post comment, 2 pages\n+\n+  it(`Maria goes to Angry Elk's page, it gets approved ...`, async () => {\n+    // There's a race: Page might load, before it's been approved and rerendered.\n+    // So, refresh and retry.\n+    await maria_brB.go2(angryElksUrl);\n+    await maria_brB.refreshUntil(async () => {\n+      return await maria_brB.topbar.isVisible();\n+    })\n+  });\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+  it(`... replies to Angry Elk`, async () => {\n+    await maria_brB.complex.replyToOrigPost(mariasReply_zebraCrossing);\n+  });\n+  it(`... posts a new topic: Elk stew?  (will be 2nd _most_recent)`, async () => {\n+    await maria_brB.topbar.clickHome();\n+    await maria_brB.complex.createAndSaveTopic({ ...mariasTopic_elkStew,\n+              willBePendingApproval: true });\n+  });\n+  it(`... posts another topic: Mashed potatoes`, async () => {\n+    await maria_brB.topbar.clickHome();\n+    await maria_brB.complex.createAndSaveTopic({ ...mariasTopic_mashedPotatoes,\n+              willBePendingApproval: true, matchAfter: false });\n+  });\n+\n+\n+  // ----- Banning via page\n+\n+  // This should delete [other pages and comments in the moderation queue] by the spammer.\n+\n+  it(`Owen reloads the moderation page, sees Maria's elk stew topic`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... bans Maria, via the elk stew topic`, async () => {\n+    await owen_brA.adminArea.review.banAndDeleteTaskNr(2);  // 2nd _most_recent\n+    await owen_brA.adminArea.review.playTimePastUndo();\n+  });\n+\n+  it(`Maria no longer sees her mashed potatoes page: it's deleted, not approved`, async () => {\n+    await maria_brB.refresh2();\n+    await maria_brB.assertNotFoundError();\n+  });\n+  it(`... she's no longer logged in`, async () => {\n+    await maria_brB.waitAndClick('.s_LD_NotFound_HomeL');\n+    await maria_brB.me.waitUntilKnowsNotLoggedIn();\n+    await maria_brB.topbar.waitUntilLoginButtonVisible(); // ttt\n+  });\n+  it(`... and can't log in`, async () => {\n+    await maria_brB.topbar.clickLogin();\n+    await maria_brB.loginDialog.loginWithPassword(maria, { resultInError: true });\n+  });\n+  it(`... an error dialog says \"Banned\"`, async () => {\n+    await maria_brB.serverErrorDialog.waitForBannedError();\n+  });\n+\n+\n+  // ----- Post comment and page\n+\n+  it(`Merche signs up`, async () => {\n+    await merche_brB.refresh2();\n+    await merche_brB.complex.signUpAsMemberViaTopbar(merche);\n+  });\n+  it(`... verifies her email`, async () => {\n+    const url = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(\n+            site.id, merche.emailAddress);\n+    await merche_brB.go2(url);\n+    await merche_brB.hasVerifiedSignupEmailPage.clickContinue();\n+  });\n+\n+  it(`... posts a topic: Apples`, async () => {\n+    await merche_brB.complex.createAndSaveTopic({ ...merchesTopic_ateApples,\n+            willBePendingApproval: true, matchAfter: false });\n+  });\n+  it(`... replies to Angry Elk: rambling_about  (will be  _most_recent)`, async () => {\n+    await merche_brB.go2(angryElksUrl);\n+    await merche_brB.complex.replyToOrigPost(merchesReply_ramblingDrunk)\n+  });\n+\n+\n+  // ----- Banning via comment\n+\n+  // This too should delete [other stuff in the queue] by the spammer.\n+\n+  it(`Owen reloads the moderation page, sees Merche's comment`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... bans Merche, via task nr 1, the comment`, async () => {\n+    await owen_brA.adminArea.review.banAndDeleteTaskNr(1); // the _most_recent\n+    await owen_brA.adminArea.review.playTimePastUndo();\n+  });\n+\n+  it(`Merche still sees her unapproved comment`, async () => {\n+    await merche_brB.topic.assertPostNeedsApprovalBodyVisible(merchesReplyNr);\n+  });\n+  it(`... but after page reload, it's gone: Deleted, not approved`, async () => {\n+    await merche_brB.refresh2();\n+    await merche_brB.topic.waitForPostNrVisible(c.BodyNr);\n+    assert.not(await merche_brB.topic.isPostNrVisible(merchesReplyNr));\n+  });\n+  it(`... she's no longer logged in`, async () => {\n+    await merche_brB.me.waitUntilKnowsNotLoggedIn();\n+  });\n+  it(`... can't log in`, async () => {\n+    await merche_brB.topbar.clickLogin();\n+    await merche_brB.loginDialog.loginWithPassword(merche, { resultInError: true });\n+  });\n+  it(`... an error dialog says \"Banned\"`, async () => {\n+    await merche_brB.serverErrorDialog.waitForBannedError();\n+  });\n+\n+\n+  // ----- Owen changes settings to review-after\n+\n+  it(`Owen changes settings to review-after`, async () => {\n+    await owen_brA.adminArea.settings.moderation.goHere();\n+    await owen_brA.adminArea.settings.moderation.setNumFirstToApproveBefore(0);\n+    await owen_brA.adminArea.settings.moderation.setNumFirstToReviewAfter(3);\n+    await owen_brA.adminArea.settings.moderation.setMaxNumPendingReview(3);\n+    await owen_brA.adminArea.settings.clickSaveAll();\n+  });\n+\n+  // ----- Banning via spam comment on spam page\n+\n+  // When deleting a spammer's comment on a spam page by the same spammer,\n+  // the whole page should get deleted, not just the comment.\n+\n+  it(`Mallory arrives, posts a spam page`, async () => {\n+    await mallory_brB.go2('/')\n+    await mallory_brB.complex.loginWithPasswordViaTopbar(mallory);\n+    await mallory_brB.complex.createAndSaveTopic({ ...mallorysTopic_v14gr4, matchAfter: false });\n+    mallorysPageUrl = await mallory_brB.getUrl();\n+  });\n+\n+  it(`Angry Elk is back`, async () => {\n+    await owen_brA.topbar.clickLogout();\n+    await angryElk_brA.complex.loginWithPasswordViaTopbar(angryElk);\n+    await angryElk_brA.go2(mallorysPageUrl);\n+  });\n+  it(`... replies to Mallory's spam page`, async () => {\n+    await angryElk_brA.complex.replyToOrigPost(angryElksReplyToMallory);\n+  });\n+\n+  it(`Mallory replies to Angry Elk  (will be Mallory's _most_recent post)`, async () => {\n+    // Angry Elk's reply should have appeared via WebSocket.  TyTWS702MEGR5\n+    await mallory_brB.complex.replyToPostNr(c.FirstReplyNr, mallorysReplyToAngryElk);\n+  });\n+\n+  it(`Owen is back`, async () => {\n+    await angryElk_brA.topbar.clickLogout();\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(`... Owen goes to the moderation page`, async () => {\n+    await owen_brA.topbar.myMenu.goToAdminReview();\n+  });\n+  it(`... bans Mallory via his comment — should delete the whole page`, async () => {\n+    await owen_brA.adminArea.review.banAndDeleteTaskNr(1); // the comment is _most_recent\n+    await owen_brA.adminArea.review.playTimePastUndo();\n+  });\n+\n+  it(`Mallory no longer sees his spam page: it's deleted`, async () => {\n+    await mallory_brB.refresh2();\n+    await mallory_brB.assertNotFoundError();\n+  });\n+  it(`... he's no longer logged in`, async () => {\n+    await mallory_brB.waitAndClick('.s_LD_NotFound_HomeL');\n+    await mallory_brB.me.waitUntilKnowsNotLoggedIn();\n+  });\n+  it(`... and can't log in`, async () => {\n+    await mallory_brB.topbar.clickLogin();\n+    await mallory_brB.loginDialog.loginWithPassword(mallory, { resultInError: true });\n+  });\n+  it(`... an error dialog says \"Banned\"`, async () => {\n+    await mallory_brB.serverErrorDialog.waitForBannedError();\n+  });\n+\n+  // Angry Elk's reply to Mallory doesn't get deleted, and it's still in the\n+  // moderation queue. But the page it's on, got deleted.\n+  // That's ok, the mods are supposed to review Angry Elk's first comments, and\n+  // now they can do that.\n+  it(`Owen looks at Mallory's deleted page, sees Angry Elks' comment`, async () => {\n+    await owen_brA.go2(mallorysPageUrl);\n+    await owen_brA.topic.assertPostTextIs(c.FirstReplyNr, angryElksReplyToMallory);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "6b96622658a42bd1284879bd9410593d6131f8c6",
      "filename": "tests/e2e-wdio7/specs/privacy-list-activity.2br.f.e2e.ts",
      "status": "added",
      "additions": 221,
      "deletions": 0,
      "changes": 221,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-list-activity.2br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-list-activity.2br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-list-activity.2br.f.e2e.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,221 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+\n+let forum: LargeTestForum;\n+\n+let owen: Member;\n+let owensBrowser: TyE2eTestBrowser;\n+let maria: Member;\n+let mariasBrowser: TyE2eTestBrowser;\n+let mallory: Member;\n+let mallorysBrowser: TyE2eTestBrowser;\n+let michael: Member;\n+let michaelsBrowser: TyE2eTestBrowser;\n+let guestsBrowser: TyE2eTestBrowser;\n+let strangersBrowser: TyE2eTestBrowser;\n+\n+let idAddress: IdAddress;\n+const forumTitle = \"User Profile Access Test Forum\";\n+\n+let oneOfMariasPosts: string;\n+let oneOfMariasTopicTitles: string;\n+\n+\n+describe(`privacy-list-activity.2br.f  TyTPRIV_LSACT`, () => {\n+\n+  it(\"import a site\", async () => {\n+    forum = buildSite().addLargeForum({ title: forumTitle });\n+\n+    // Make Michael a full member so he can see activity that strangers may not see.\n+    forum.members.michael.trustLevel = c.TestTrustLevel.FullMember;\n+\n+    idAddress = await server.importSiteData(forum.siteData);\n+    oneOfMariasPosts = forum.topics.byMariaCategoryANr2.body;\n+    oneOfMariasTopicTitles = forum.topics.byMariaCategoryA.title;\n+  });\n+\n+  it(\"initialize people\", async () => {\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owensBrowser = brA;\n+    owen = forum.members.owen;\n+\n+    mariasBrowser = brB;\n+    maria = forum.members.maria;\n+\n+    mallorysBrowser = brA;\n+    mallory = forum.members.mallory;\n+\n+    michaelsBrowser = brA;\n+    michael = forum.members.michael;\n+    michael.trustLevel = c.TestTrustLevel.FullMember; // so he can se posts that strangers may not see\n+\n+    guestsBrowser = brA;\n+    strangersBrowser = brA;\n+  });\n+\n+\n+  // ----- Everyone sees Maria's stuff\n+\n+  it(\"Everyone sees Maria's public posts\", async () => {\n+    await strangersBrowser.userProfilePage.openActivityFor(maria.username, idAddress.origin);\n+    await strangersBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await strangersBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+  it(\"... and topics\", async () => {\n+    await strangersBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await strangersBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n+    await strangersBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n+  });\n+\n+\n+  // ----- Hide activity for strangers\n+\n+\n+  it(\"Maria goes to her privacy tab\", async () => {\n+    await mariasBrowser.userProfilePage.openActivityFor(maria.username, idAddress.origin);\n+    await mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n+    await mariasBrowser.userProfilePage.goToPreferences();\n+    await mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n+  });\n+\n+  it(\"... hides her activity for strangers & new & basic members\", async () => {\n+    await mariasBrowser.userProfilePage.preferences.privacy.setMaySeeMyActivityTrustLevel(\n+            c.TestTrustLevel.FullMember);\n+    await mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(\"The stranger no longer sees her topics\", async () => {\n+    await strangersBrowser.refresh2();\n+    await strangersBrowser.userProfilePage.activity.topics.waitForNothingToShow();\n+  });\n+\n+  it(\"... and not her posts\", async () => {\n+    await strangersBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: 'NoSinceActivityHidden' });\n+    await strangersBrowser.userProfilePage.activity.posts.waitForNothingToShow(); // hmm redundant\n+  });\n+\n+  /* Guest login not enabled in this forum. Maybe later? skip for now:\n+  it(\"A guest also doesn't see her posts\", async () => {\n+    await guestsBrowser.complex.logInAsGuestViaTopbar(\"Curiosiy Guestiy\");\n+    await guestsBrowser.refresh2();\n+    await guestsBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n+    await guestsBrowser.topbar.clickLogout();\n+  }); */\n+\n+  it(\"Mallory is a new membmer, won't see posts\", async () => {\n+    await mallorysBrowser.complex.loginWithPasswordViaTopbar(mallory);\n+    await mallorysBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n+  });\n+\n+  it(\"But Michael is a full member, does see the posts\", async () => {\n+    await mallorysBrowser.topbar.clickLogout();\n+    await michaelsBrowser.complex.loginWithPasswordViaTopbar(michael);\n+    await michaelsBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await michaelsBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+  it(\"... and the topics\", async () => {\n+    await michaelsBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await michaelsBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n+    await michaelsBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n+  });\n+\n+  it(\"Maria also sees her posts\", async () => {\n+    await mariasBrowser.userProfilePage.goToActivity();\n+    await mariasBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await mariasBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+\n+  // ----- Hide activity for everyone (except staff)\n+\n+\n+  it(\"Maria hides her activity for everyone (up to Core Members))\", async () => {\n+    await mariasBrowser.userProfilePage.goToPreferences();\n+    await mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n+    await mariasBrowser.userProfilePage.preferences.privacy.setMaySeeMyActivityTrustLevel(\n+            c.TestTrustLevel.CoreMember);\n+    await mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(\"Michael now cannot see Maria's topics\", async () => {\n+    await michaelsBrowser.refresh2();\n+    await michaelsBrowser.userProfilePage.activity.topics.waitForNothingToShow();\n+  });\n+\n+  it(\"... or posts\", async () => {\n+    await michaelsBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: 'NoSinceActivityHidden' });\n+    await michaelsBrowser.userProfilePage.activity.posts.waitForNothingToShow(); // hmm redundant\n+  });\n+\n+  it(\"The stranger still don't see the posts\", async () => {\n+    await michaelsBrowser.topbar.clickLogout();\n+    await strangersBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n+  });\n+\n+  it(\"But Owen sees the posts — he's admin\", async () => {\n+    await owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+    await owensBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await owensBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+  it(\"... and the topics too\", async () => {\n+    await owensBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await owensBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n+    await owensBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n+  });\n+\n+  it(\"Maria still sees her own posts\", async () => {\n+    await mariasBrowser.userProfilePage.goToActivity();\n+    await mariasBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await mariasBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+  it(\"... and topics\", async () => {\n+    await mariasBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n+    await mariasBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n+    await mariasBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n+  });\n+\n+\n+  // If implementing search-for-pots-by-user in the advanced search dialog, add e2e tests here\n+  // that disables that, if user has hidden hens activity.  [6UKDSQ29]\n+\n+\n+  // ----- Show activity again\n+\n+\n+  it(\"Maria shows her activity again\", async () => {\n+    await mariasBrowser.userProfilePage.goToPreferences();\n+    await mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n+    await mariasBrowser.userProfilePage.preferences.privacy.setMaySeeMyActivityTrustLevel(\n+            c.TestTrustLevel.Stranger);\n+    await mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+\n+  it(\"Now the stranger sees her topics again\", async () => {\n+    await owensBrowser.topbar.clickLogout();\n+    await strangersBrowser.refresh2();\n+    await strangersBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n+    await strangersBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n+  });\n+\n+  it(\"... and posts\", async () => {\n+    await strangersBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: true });\n+    await strangersBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n+    await strangersBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "a490c5bfbd402ecaf8f93cea9a8e1d963f3a7d6f",
      "filename": "tests/e2e-wdio7/specs/privacy-may-see.3br.f.e2e.ts",
      "status": "added",
      "additions": 400,
      "deletions": 0,
      "changes": 400,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-may-see.3br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-may-see.3br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fprivacy-may-see.3br.f.e2e.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,400 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let brC: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mons: Member;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let mei: Member;\n+let mei_brC: TyE2eTestBrowser;\n+let memah: Member;\n+let michael: Member;\n+let stranger_brC: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoPagesTestForum;\n+\n+let michaelsTopicUrl: St;\n+\n+\n+\n+describe(`privacy-may-see.3br.f.e2e.ts  TyTPRIV_MAYSEE`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Privacy May See E2e Test\",\n+      members: ['mons', 'mei', 'memah', 'maria', 'michael']\n+    });\n+\n+    // Oh, they can't mention people anyway.\n+    // // Let strangers start writing, so can test @mentions without being logged in.\n+    // builder.getSite().settings.requireVerifiedEmail = false;\n+    // builder.getSite().settings.mayComposeBeforeSignup = true;\n+    // builder.getSite().settings.mayPostBeforeEmailVerified = true;\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+    brC = new TyE2eTestBrowser(wdioBrowserC, 'brC');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    mons = forum.members.mons;\n+\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+\n+    mei = forum.members.mei;\n+    mei_brC = brC;\n+    memah = forum.members.memah;\n+    michael = forum.members.michael;\n+    stranger_brC = brC;\n+\n+    // Changing trust & threat levels: (longer name = more trusted)\n+    mei.trustLevel = c.TestTrustLevel.New;\n+    memah.trustLevel = c.TestTrustLevel.Basic;\n+    michael.trustLevel = c.TestTrustLevel.FullMember;\n+\n+    maria.trustLevel = c.TestTrustLevel.Trusted;\n+    maria.threatLevel = c.TestThreatLevel.HopefullySafe;\n+\n+    // Good with _always_one_member listed when starting to @mentioning someone, typing '@m',\n+    // also if group preferences hide user profiles, disable mentions.\n+    memah.maySeeMyProfileTrLv = c.TestTrustLevel.Stranger;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    server.skipRateLimits(site.id);\n+    michaelsTopicUrl = site.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n+  });\n+\n+\n+  it(`Owen goes to All Members privacy settings, logs in`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.goHere(\n+            'all_members', { isGroup: true, origin: site.origin });\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`.. all settings are the default`, async () => {\n+    const assertLevelIs = owen_brA.userProfilePage.preferences.privacy.assertLevelIs;\n+    await assertLevelIs('MaySeeProfile', c.TestTrustLevel.Stranger, 'IsDefault');\n+    await assertLevelIs('MaySeeActivity', c.TestTrustLevel.Stranger, 'IsDefault');\n+    await assertLevelIs('MayMention', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MayDirectMessage', c.TestTrustLevel.New, 'IsDefault');\n+  });\n+\n+\n+  // ----- ttt: See everything\n+\n+  it(`A stranger looks at Maria's profile`, async () => {\n+    await stranger_brC.userProfilePage.openActivityFor(maria.username, site.origin);\n+  });\n+\n+  addSeeMariaStep(`... sees Maria's name and recent activity  11`, () => stranger_brC, {\n+        seeProfile: true, seeActivity: true, skipRefresh: true });\n+\n+\n+  // ----- Inherit from All Members: Block strangers\n+\n+  it(`Owen sets All Members' maySeeMyActivity trust level to New Member`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyActivityTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+\n+  addSeeMariaStep(`... the stranger now can't see Maria's recent activity  22`,\n+        () => stranger_brC, { seeProfile: true, seeActivity: false });\n+\n+\n+  it(`Owen sets maySeeMyProfilePage trust level to New Member`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyProfileTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now the stranger can't see Maria's profile page at all  33`,\n+        () => stranger_brC, { seeProfile: false, seeActivity: false });\n+\n+\n+  it(`Mei, a new member, logs in`, async () => {\n+    await mei_brC.complex.loginWithPasswordViaTopbar(mei);\n+  });\n+  addSeeMariaStep(`... sees Maria's name and recent activity  44`,\n+        () => mei_brC, { seeProfile: true, seeActivity: true, skipRefresh: true,\n+                          canMention: true });\n+\n+\n+  // ----- Inherit from All Members: Block Basic Members\n+\n+  it(`Owen sets maySeeMyActivity trust level to Full Member`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyActivityTrustLevel(c.TestTrustLevel.FullMember);\n+    await privacy.savePrivacySettings();\n+  });\n+\n+  addSeeMariaStep(`... now Mei sees Maria's profile, but not recent activity  55`,\n+        () => mei_brC, { seeProfile: true, seeActivity: false });\n+\n+\n+  it(`Owen sets maySeeMyProfile trust level to Full Member`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyProfileTrustLevel(c.TestTrustLevel.FullMember);\n+    await privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now also Mei can't see Maria's profile  66`,\n+        () => mei_brC, { seeProfile: false, seeActivity: false,\n+                          canMention: false });\n+\n+\n+  // ----- Basic Members config overrides\n+\n+  it(`Owen goes to the Basic Members group`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.goHere('basic_members', { isGroup: true });\n+  });\n+  it(`... sets maySeeMyProfile trust level to New Member.\n+              Since Maria is a Full Member, she's in the Basic Members group too, and\n+              this new config has precedence over the All Members config.`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyProfileTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+\n+  addSeeMariaStep(`... now Mei sees Maria's profile again, but still not recent activity  77`,\n+        () => mei_brC, { seeProfile: true, seeActivity: false,\n+                          canMention: true });\n+\n+  it(`Owen sets setMaySeeMyActivity trust level to New, too`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyActivityTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now Mei sees Maria's recent activity again  88`,\n+        () => mei_brC, { seeProfile: true, seeActivity: true });\n+\n+\n+\n+  // ----- Own trust level group config overrides\n+\n+  it(`Owen goes to the Trusted Members group — that's Maria's trust level`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.goHere('trusted_members', { isGroup: true });\n+  });\n+  it(`... sets maySeeMyProfile trust level to Trusted Member.\n+              This new config has precedence over the All and Basic configs.`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyProfileTrustLevel(c.TestTrustLevel.Trusted);\n+    await privacy.savePrivacySettings();\n+  });\n+\n+  addSeeMariaStep(`... now Mei can't see Maria's profile, or recent activity  99`,\n+        () => mei_brC, { seeProfile: false,\n+                          seeActivity: true, // but still can't see, since profile hidden\n+                                             // Hmm what's best?  [see_activity_0_profile]\n+                          canMention: false });\n+\n+  it(`Owen sets maySeeMyActivity trust level to Core Member`, async () => {\n+    const privacy = owen_brA.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyActivityTrustLevel(c.TestTrustLevel.CoreMember);\n+    await privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... Mei still can't see anything  AA`,\n+        () => mei_brC, { seeProfile: false, seeActivity: false,\n+                          canMention: false,\n+                          // Try once _without_a_page_id, when cannot mention.\n+                          mentionFromNoPageId: true });\n+\n+\n+  // ----- Own config overrides groups\n+\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.userProfilePage.preferences.privacy.goHere(\n+            maria.username, { origin: site.origin });\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+  it(`... sees default levels inherited from the Trusted Members group`, async () => {\n+    const assertLevelIs = maria_brB.userProfilePage.preferences.privacy.assertLevelIs;\n+    await assertLevelIs('MaySeeProfile', c.TestTrustLevel.Trusted, 'IsDefault');\n+    await assertLevelIs('MaySeeActivity', c.TestTrustLevel.CoreMember, 'IsDefault');\n+    await assertLevelIs('MayMention', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MayDirectMessage', c.TestTrustLevel.New, 'IsDefault');\n+  });\n+  it(`... sets her maySeeMyProfile trust level to New Member.\n+              This has precedence over trust level group configs.`, async () => {\n+    const privacy = maria_brB.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyProfileTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now Mei can see Maria's profile. But still not recent activity  BB`,\n+        () => mei_brC, { seeProfile: true,\n+                          seeActivity: false,\n+                          canMention: true,\n+                          // But Mons is in the Trusted Members group, so, his profile\n+                          // is still hidden — can't mention him.\n+                          canSeeMons: false,\n+                          // Try once _without_a_page_id, when *can* mention.\n+                          mentionFromNoPageId: true });\n+\n+  it(`Maria sets maySeeMyActivity trust level to New, too`, async () => {\n+    const privacy = maria_brB.userProfilePage.preferences.privacy;\n+    await privacy.setMaySeeMyActivityTrustLevel(c.TestTrustLevel.New);\n+    await privacy.savePrivacySettings();\n+  });\n+  it(`... \"default\" text gone`, async () => {\n+    const assertLevelIs = maria_brB.userProfilePage.preferences.privacy.assertLevelIs;\n+    await assertLevelIs('MaySeeProfile', c.TestTrustLevel.New);\n+    await assertLevelIs('MaySeeActivity', c.TestTrustLevel.New);\n+  });\n+  addSeeMariaStep(`... Mei can see everything now  CC`,\n+        () => mei_brC, { seeProfile: true, seeActivity: true });\n+\n+\n+\n+  // ----- User can change back to default\n+\n+  it(`Maria sets her maySeeMyActivity trust level back to the default`, async () => {\n+    await maria_brB.userProfilePage.preferences.privacy.setMaySeeMyActivityTrustLevel(null);\n+    await maria_brB.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now Mei can see Maria's profile, but not any recent activity  DD`,\n+        () => mei_brC, { seeProfile: true, seeActivity: false });\n+\n+  it(`Maria sets maySeeMyProfile back to the default`, async () => {\n+    await maria_brB.userProfilePage.preferences.privacy.setMaySeeMyProfileTrustLevel(null);\n+    await maria_brB.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now Mei can't see Maria's profile at all  EE`,\n+        () => mei_brC, { seeProfile: false, seeActivity: false,\n+                          canMention: false });\n+\n+  it(`... \"default\" texts is back`, async () => {\n+    const assertLevelIs = maria_brB.userProfilePage.preferences.privacy.assertLevelIs;\n+    await assertLevelIs('MaySeeProfile', c.TestTrustLevel.Trusted, 'IsDefault');\n+    await assertLevelIs('MaySeeActivity', c.TestTrustLevel.CoreMember, 'IsDefault');\n+    await assertLevelIs('MayMention', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MayDirectMessage', c.TestTrustLevel.New, 'IsDefault');\n+  });\n+\n+\n+\n+  // ----- Group can change back to default\n+\n+  it(`Owen sets all Trusted Members preferences back to the defaults\n+          — which are inherited from the Basic Members group`, async () => {\n+    await owen_brA.userProfilePage.preferences.privacy.setMaySeeMyProfileTrustLevel(null);\n+    await owen_brA.userProfilePage.preferences.privacy.setMaySeeMyActivityTrustLevel(null);\n+    await owen_brA.userProfilePage.preferences.privacy.savePrivacySettings();\n+  });\n+  addSeeMariaStep(`... now Mei can see everything again  FF`,\n+        () => mei_brC, { seeProfile: true, seeActivity: true });\n+\n+  it(`Owen sees default from the Basic Members group`, async () => {\n+    const assertLevelIs = owen_brA.userProfilePage.preferences.privacy.assertLevelIs;\n+    await assertLevelIs('MaySeeProfile', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MaySeeActivity', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MayMention', c.TestTrustLevel.New, 'IsDefault');\n+    await assertLevelIs('MayDirectMessage', c.TestTrustLevel.New, 'IsDefault');\n+  });\n+\n+\n+  let mentionNr = 0;\n+\n+  function addSeeMariaStep(descr: St, brX: () => TyE2eTestBrowser, ps: {\n+          seeProfile?: Bo, seeActivity?: Bo, skipRefresh?: true,\n+          canMention?: Bo, canSeeMons?: false,\n+          // For trying from somewhere with no page id too. Triggers different code paths\n+          // on the server: looking up by username prefix only, or page id and prefix.\n+          mentionFromNoPageId?: true }) {\n+\n+    it(descr, async () => {\n+      if (!ps.skipRefresh)\n+        await brX().refresh2();\n+\n+      if (ps.seeProfile) {\n+        await brX().userProfilePage.waitUntilUsernameIs(maria.username);\n+      }\n+      else {\n+        await brX().waitForVisible('.c_UP_404');\n+      }\n+\n+      if (!ps.seeProfile) {\n+        // TESTS_MISSING: TyTPRIV_ACT0PROF\n+        // if (ps.seeActivity)\n+        //    send http request to server to see activity, verify replies 404,\n+        //    although can't be done via the UI (since profile hidden, buttons gone).\n+        // Or, should it be ok to configure see-activity w/o see-profile? [see_activity_0_profile]\n+      }\n+      else if (ps.seeActivity) {\n+        await brX().userProfilePage.activity.posts.waitForPostTextsVisible(/By Maria in CategoryA/);\n+      }\n+      else {\n+        await brX().userProfilePage.activity.posts.waitForNothingToShow();\n+      }\n+    });\n+\n+\n+    if (_.isBoolean(ps.canMention)) {  // TyTPRIV_MENTION02\n+      if (ps.mentionFromNoPageId) {\n+        it(`... goes to Memah's profile page, starts writing a direct message`, async () => {\n+          await brX().userProfilePage.preferences.privacy.goHere(memah.username);\n+          await brX().userProfilePage.clickSendMessage();\n+        });\n+      }\n+      else  {\n+        it(`... goes to Michael's page, starts writing a reply`, async () => {\n+          // Maria hasn't participated on this page.\n+          await brX().go2(michaelsTopicUrl);\n+          await brX().topic.clickReplyToOrigPost();\n+        });\n+      }\n+\n+      it(`... types \"@m\", to mention Maria`, async () => {\n+        // Need to type different texts, otherwise @m won't get retyped, the mentions\n+        // list won't get refetched.\n+        mentionNr += 1;\n+        await brX().editor.editText(`Hi ${mentionNr} @m`);\n+      });\n+\n+      if (ps.canMention) {\n+        it(`... and yes, can @mention Maria`, async () => {\n+          await brX().waitUntilAnyTextMatches('.rta__entity', maria.username);\n+        });\n+\n+        // Members starting_with_m:  maria  mei  memah  michael  mod_modya,  that's 5.\n+        // But if can't see Trusted members, then, can't see Moderator Mons.\n+        const canSeeMons = ps.canSeeMons !== false;  // default true\n+        const numExpected = canSeeMons ? 5 : 4;\n+\n+        it(`... can${ canSeeMons ? '' : \" not\"} see Mons`, async () => {\n+          if (canSeeMons) await brX().assertTextMatches('.rta__entity', mons.username);\n+          else await brX().assertNoTextMatches('.rta__entity', mons.username);\n+        });\n+\n+        it(`... there's ${numExpected} @mention suggestions`, async () => {\n+          await brX().waitForExactly(numExpected, '.rta__entity');\n+          await brX().back();\n+        });\n+      }\n+      else {\n+        it(`... but cannot @mention Maria or Mons, names not in suggestions list`, async () => {\n+          // There's _always_one_member, at least, namely Memah.\n+          await brX().waitUntilAnyTextMatches('.rta__entity', memah.username);\n+          await brX().assertNoTextMatches('.rta__entity', maria.username);\n+          await brX().assertNoTextMatches('.rta__entity', mons.username);\n+          await brX().back();\n+        });\n+      }\n+    }\n+  }\n+\n+});\n+"
    },
    {
      "sha": "b050de3b388a22ed3b24c94e5684a73d2d557a4a",
      "filename": "tests/e2e-wdio7/test-constants.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Ftest-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Ftest-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Ftest-constants.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -87,6 +87,7 @@ export enum TestAnonStatus {\n \n \n const TestTrustLevel = {\n+  Stranger: <TrustLevel> 0,\n   New: <TrustLevel> 1,\n   Basic: <TrustLevel> 2,\n   FullMember: <TrustLevel> 3,"
    },
    {
      "sha": "f735d7eb0689c8c81aa01a1574fedef8584ab8cf",
      "filename": "tests/e2e-wdio7/test-types.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Ftest-types.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Ftest-types.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Ftest-types.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -89,3 +89,8 @@ export type PermName =\n         'SeeOthers' |\n         'SeeOwn';\n \n+export type PrivPrefName =\n+        'MaySeeProfile' |\n+        'MaySeeActivity' |\n+        'MayMention' |\n+        'MayDirectMessage';"
    },
    {
      "sha": "596ad97c4339df6fea179f690b081080c53722cc",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 49,
      "deletions": 15,
      "changes": 64,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1,5 +1,5 @@\n import * as _ from 'lodash';\n-import { IsWhere, E2eAuthor, E2eVote, isWhere_isInIframe, PermName } from '../test-types';\n+import { IsWhere, E2eAuthor, E2eVote, isWhere_isInIframe, PermName, PrivPrefName } from '../test-types';\n import { ServerSays, TestPersonaMode } from '../test-types2';\n import { SiteType, NewSiteOwnerType, TestNeverAlways, TestAnonStatus } from '../test-constants';\n \n@@ -8582,7 +8582,7 @@ export class TyE2eTestBrowser {\n \n         switchToPrivacy: async () => {\n           await this.waitAndClick('.e_UP_Prf_Nav_PrivL');\n-          await this.waitForVisible('.e_PrivPrefsF');\n+          await this.waitForVisible('.c_PrivPrefsF');\n         },\n \n         // ---- Should be wrapped in `about { .. }`:\n@@ -8652,24 +8652,47 @@ export class TyE2eTestBrowser {\n         },\n \n         privacy: {\n-          setHideActivityForStrangers: async (enabled: Bo) => {\n-            await this.setCheckbox('.e_HideActivityStrangersCB input', enabled);\n+          goHere: async (username: St, ps: { isGroup?: true, origin?: St } = {}) => {\n+            await this.userProfilePage._goHere(username, ps, '/preferences/privacy');\n+          },\n+\n+          _mkSel: (what: PrivPrefName): St => {\n+            switch (what) {\n+              case 'MaySeeProfile': return '.e_SeeProfile';\n+              case 'MaySeeActivity': return '.e_WhoMaySeeAct';\n+              case 'MayMention': return '.e_WhoMayMention';\n+              case 'MayDirectMessage': return '.e_WhoMayDm';\n+              default: die('TyE0532SNLTS5');\n+            }\n+          },\n+\n+          _setMayWhat: async (what: St, level: Nr | N) => {\n+            await this.waitAndClick(what + ' .btn');\n+            const levelStr = level === null ? 'Def' : level;\n+            await this.waitAndClick(`.e_TruLvD .e_TrLv-${levelStr}`);\n+            await this.waitForVisible(what + ` .e_TrLv-${levelStr}.btn`);\n+          },\n+\n+          setMaySeeMyProfileTrustLevel: async (level: Nr | N) => {\n+            await this.userProfilePage.preferences.privacy._setMayWhat('.e_SeeProfile', level);\n           },\n \n-          setHideActivityForAll: async (enabled: Bo) => {\n-            await this.setCheckbox('.e_HideActivityAllCB input', enabled);\n+          setMaySeeMyActivityTrustLevel: async (level: Nr | N) => {\n+            await this.userProfilePage.preferences.privacy._setMayWhat('.e_WhoMaySeeAct', level);\n           },\n \n-          setMayMentionMeTrustLevel: async (level: Nr) => {\n-            await this.waitAndClick('.e_WhoMayMention .btn');\n-            await this.waitAndClick(`.e_TruLvD .e_TrLv-${level}`);\n-            await this.waitForVisible(`.e_WhoMayMention .e_TrLv-${level}.btn`);\n+          setMayMentionMeTrustLevel: async (level: Nr | N) => {\n+            await this.userProfilePage.preferences.privacy._setMayWhat('.e_WhoMayMention', level);\n           },\n \n-          setMayDirMsgMeTrustLevel: async (level: Nr) => {\n-            await this.waitAndClick('.e_WhoMayDm .btn');\n-            await this.waitAndClick(`.e_TruLvD .e_TrLv-${level}`);\n-            await this.waitForVisible(`.e_WhoMayDm .e_TrLv-${level}.btn`);\n+          setMayDirMsgMeTrustLevel: async (level: Nr | N) => {\n+            await this.userProfilePage.preferences.privacy._setMayWhat('.e_WhoMayDm', level);\n+          },\n+\n+          assertLevelIs: async (what: PrivPrefName, level: Nr, isDefault?: 'IsDefault') => {\n+            const whatSel = this.userProfilePage.preferences.privacy._mkSel(what);\n+            const defaultStr = isDefault ? '.e_TrLv-Def' : ':not(.e_TrLv-Def)';\n+            await this.assertDisplayed(whatSel + ` .e_TrLv-${level}${defaultStr}.btn`);\n           },\n \n           savePrivacySettings: async () => {\n@@ -9824,7 +9847,8 @@ export class TyE2eTestBrowser {\n               const stillVisible = await this.filterVisible([\n                       pagePostSelector + ' .s_A_Rvw_Tsk_UndoB',\n                       pagePostSelector + ' .e_A_Rvw_Tsk_AcptB',\n-                      pagePostSelector + ' .e_A_Rvw_Tsk_RjctB'],\n+                      pagePostSelector + ' .e_A_Rvw_Tsk_RjctB',\n+                      pagePostSelector + ' .e_A_Rvw_Tsk_BanB'],\n                       { keepVisible: true });\n               if (!stillVisible.length)\n                 return true;\n@@ -9871,6 +9895,12 @@ export class TyE2eTestBrowser {\n           await this.waitUntilLoadingOverlayGone();\n         },\n \n+        banAndDeleteTaskNr: async (nr: Nr) => {\n+          await this.topic.clickPostActionButton(`.e_RT-Ix-${nr} .e_A_Rvw_Tsk_BanB`);\n+          await this.waitUntilModalGone();\n+          await this.waitUntilLoadingOverlayGone();\n+        },\n+\n         countReviewTasksFor: async (pageId: PageId, postNr: PostNr,\n               opts: { waiting: Bo }): Pr<Nr> => {\n           const pageIdPostNrSelector = '.e_Pg-Id-' + pageId + '.e_P-Nr-' + postNr;\n@@ -10299,6 +10329,10 @@ export class TyE2eTestBrowser {\n         await this.waitUntilTextMatches('.s_SED_Msg', 'TyESUSPENDED_|TyE0LGDIN_');\n       },\n \n+      waitForBannedError: async () => {\n+        await this.waitUntilTextMatches('.s_SED_Msg', 'banned.*TyEBANND');\n+      },\n+\n       dismissReloadPageAlert: async () => {\n         // Seems this alert appears only in a visible browser (but not if invisible/headless).\n         for (let i = 0; i < 3; ++i) {"
    },
    {
      "sha": "311cd4147eeda967d805fab31630a4a9ef7af876",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fyarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/tests%2Fe2e-wdio7%2Fyarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fyarn.lock?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1251,10 +1251,10 @@ chrome-launcher@^0.15.0:\n     is-wsl \"^2.2.0\"\n     lighthouse-logger \"^1.0.0\"\n \n-chromedriver@^128.0.3:\n-  version \"128.0.3\"\n-  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-128.0.3.tgz#7c2cd2d160f269e78f40840ee7a043dac3687148\"\n-  integrity sha512-Xn/bknOpGlY9tKinwS/hVWeNblSeZvbbJbF8XZ73X1jeWfAFPRXx3fMLdNNz8DqruDbx3cKEJ5wR3mnst6G3iw==\n+chromedriver@^131.0.1:\n+  version \"131.0.1\"\n+  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-131.0.1.tgz#bfbf47f6c2ad7a65c154ff47d321bd8c33b52a77\"\n+  integrity sha512-LHRh+oaNU1WowJjAkWsviN8pTzQYJDbv/FvJyrQ7XhjKdIzVh/s3GV1iU7IjMTsxIQnBsTjx+9jWjzCWIXC7ug==\n   dependencies:\n     \"@testim/chrome-version\" \"^1.1.4\"\n     axios \"^1.7.4\""
    },
    {
      "sha": "6a15112b37ad17df9b638ea521a39055b9abb021",
      "filename": "tests/e2e/specs/user-profile-activity-private.2browsers.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 223,
      "changes": 223,
      "blob_url": "https://github.com/debiki/talkyard/blob/797271e37029af91c9f4e85a63e75896c0181235/tests%2Fe2e%2Fspecs%2Fuser-profile-activity-private.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/797271e37029af91c9f4e85a63e75896c0181235/tests%2Fe2e%2Fspecs%2Fuser-profile-activity-private.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fuser-profile-activity-private.2browsers.test.ts?ref=797271e37029af91c9f4e85a63e75896c0181235",
      "patch": "@@ -1,223 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import * as _ from 'lodash';\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import { buildSite } from '../utils/site-builder';\n-import logAndDie = require('../utils/log-and-die');\n-import c = require('../test-constants');\n-\n-let browser: TyE2eTestBrowser;\n-declare let browserA: any;\n-declare let browserB: any;\n-\n-let forum: LargeTestForum;\n-\n-let everyonesBrowser: TyE2eTestBrowser;\n-let owen: Member;\n-let owensBrowser: TyE2eTestBrowser;\n-let maria: Member;\n-let mariasBrowser: TyE2eTestBrowser;\n-let mallory: Member;\n-let mallorysBrowser: TyE2eTestBrowser;\n-let michael: Member;\n-let michaelsBrowser: TyE2eTestBrowser;\n-let guestsBrowser: TyE2eTestBrowser;\n-let strangersBrowser: TyE2eTestBrowser;\n-\n-let idAddress: IdAddress;\n-const forumTitle = \"User Profile Access Test Forum\";\n-\n-let oneOfMariasPosts: string;\n-let oneOfMariasTopicTitles: string;\n-\n-\n-describe(\"user profile access:\", () => {\n-\n-  it(\"import a site\", () => {\n-    forum = buildSite().addLargeForum({ title: forumTitle });\n-\n-    // Make Michael a full member so he can see activity that strangers may not see.\n-    forum.members.michael.trustLevel = c.TestTrustLevel.FullMember;\n-\n-    idAddress = server.importSiteData(forum.siteData);\n-    oneOfMariasPosts = forum.topics.byMariaCategoryANr2.body;\n-    oneOfMariasTopicTitles = forum.topics.byMariaCategoryA.title;\n-  });\n-\n-  it(\"initialize people\", () => {\n-    everyonesBrowser = new TyE2eTestBrowser(wdioBrowser);\n-\n-    owensBrowser = new TyE2eTestBrowser(browserA);\n-    owen = forum.members.owen;\n-\n-    mariasBrowser = new TyE2eTestBrowser(browserB);\n-    maria = forum.members.maria;\n-\n-    mallorysBrowser = owensBrowser;\n-    mallory = forum.members.mallory;\n-\n-    michaelsBrowser = owensBrowser;\n-    michael = forum.members.michael;\n-    michael.trustLevel = c.TestTrustLevel.FullMember; // so he can se posts that strangers may not see\n-\n-    guestsBrowser = owensBrowser;\n-    strangersBrowser = owensBrowser;\n-  });\n-\n-\n-  // ----- Everyone sees Maria's stuff\n-\n-  it(\"Everyone sees Maria's public posts\", () => {\n-    strangersBrowser.userProfilePage.openActivityFor(maria.username, idAddress.origin);\n-    strangersBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    strangersBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-  it(\"... and topics\", () => {\n-    strangersBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n-    strangersBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n-    strangersBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n-  });\n-\n-\n-  // ----- Hide activity for strangers\n-\n-\n-  it(\"Maria goes to her privacy tab\", () => {\n-    mariasBrowser.userProfilePage.openActivityFor(maria.username, idAddress.origin);\n-    mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n-    mariasBrowser.userProfilePage.goToPreferences();\n-    mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n-  });\n-\n-  it(\"... hides her activity for strangers\", () => {\n-    mariasBrowser.userProfilePage.preferences.privacy.setHideActivityForStrangers(true);\n-    mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n-  });\n-\n-  it(\"The stranger no longer sees her topics\", () => {\n-    strangersBrowser.refresh();\n-    strangersBrowser.userProfilePage.activity.topics.waitForNothingToShow();\n-  });\n-\n-  it(\"... and not her posts\", () => {\n-    strangersBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: 'NoSinceActivityHidden' });\n-    strangersBrowser.userProfilePage.activity.posts.waitForNothingToShow(); // hmm redundant\n-  });\n-\n-  /* Guest login not enabled in this forum. Maybe later? skip for now:\n-  it(\"A guest also doesn't see her posts\", () => {\n-    guestsBrowser.complex.logInAsGuestViaTopbar(\"Curiosiy Guestiy\");\n-    guestsBrowser.refresh();\n-    guestsBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n-    guestsBrowser.topbar.clickLogout();\n-  }); */\n-\n-  it(\"Mallory is a new membmer, won't see posts\", () => {\n-    mallorysBrowser.complex.loginWithPasswordViaTopbar(mallory);\n-    mallorysBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n-  });\n-\n-  it(\"But Michael is a full member, does see the posts\", () => {\n-    mallorysBrowser.topbar.clickLogout();\n-    michaelsBrowser.complex.loginWithPasswordViaTopbar(michael);\n-    michaelsBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    michaelsBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-  it(\"... and the topics\", () => {\n-    michaelsBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n-    michaelsBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n-    michaelsBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n-  });\n-\n-  it(\"Maria also sees her posts\", () => {\n-    mariasBrowser.userProfilePage.goToActivity();\n-    mariasBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    mariasBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-\n-  // ----- Hide activity for everyone (except staff)\n-\n-\n-  it(\"Maria hides her activity for everyone\", () => {\n-    mariasBrowser.userProfilePage.goToPreferences();\n-    mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n-    mariasBrowser.userProfilePage.preferences.privacy.setHideActivityForAll(true);\n-    mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n-  });\n-\n-  it(\"Michael now cannot see Maria's topics\", () => {\n-    michaelsBrowser.refresh();\n-    michaelsBrowser.userProfilePage.activity.topics.waitForNothingToShow();\n-  });\n-\n-  it(\"... or posts\", () => {\n-    michaelsBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: 'NoSinceActivityHidden' });\n-    michaelsBrowser.userProfilePage.activity.posts.waitForNothingToShow(); // hmm redundant\n-  });\n-\n-  it(\"The stranger still don't see the posts\", () => {\n-    michaelsBrowser.topbar.clickLogout();\n-    strangersBrowser.userProfilePage.activity.posts.waitForNothingToShow();\n-  });\n-\n-  it(\"But Owen sees the posts — he's admin\", () => {\n-    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n-    owensBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    owensBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-  it(\"... and the topics too\", () => {\n-    owensBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n-    owensBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n-    owensBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n-  });\n-\n-  it(\"Maria still sees her own posts\", () => {\n-    mariasBrowser.userProfilePage.goToActivity();\n-    mariasBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    mariasBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-  it(\"... and topics\", () => {\n-    mariasBrowser.userProfilePage.activity.switchToTopics({ shallFindTopics: true });\n-    mariasBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n-    mariasBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n-  });\n-\n-\n-  // If implementing search-for-pots-by-user in the advanced search dialog, add e2e tests here\n-  // that disables that, if user has hidden hens activity.  [6UKDSQ29]\n-\n-\n-  // ----- Show activity again\n-\n-\n-  it(\"Maria shows her activity again\", () => {\n-    mariasBrowser.userProfilePage.goToPreferences();\n-    mariasBrowser.userProfilePage.preferences.switchToPrivacy();\n-    mariasBrowser.userProfilePage.preferences.privacy.setHideActivityForStrangers(false);\n-    mariasBrowser.userProfilePage.preferences.privacy.savePrivacySettings();\n-  });\n-\n-  it(\"Now the stranger sees her topics again\", () => {\n-    owensBrowser.topbar.clickLogout();\n-    strangersBrowser.refresh();\n-    strangersBrowser.userProfilePage.activity.topics.waitForTopicTitlesVisible();\n-    strangersBrowser.userProfilePage.activity.topics.assertTopicTitleVisible(oneOfMariasTopicTitles);\n-  });\n-\n-  it(\"... and posts\", () => {\n-    strangersBrowser.userProfilePage.activity.switchToPosts({ shallFindPosts: true });\n-    strangersBrowser.userProfilePage.activity.posts.waitForPostTextsVisible();\n-    strangersBrowser.userProfilePage.activity.posts.assertPostTextVisible(oneOfMariasPosts);\n-  });\n-\n-});\n-"
    },
    {
      "sha": "6695507c4d48d8d8d1b3a857c2c8bb94648cf1b5",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -1 +1 @@\n-v0.2024.009\n+v0.2024.010"
    },
    {
      "sha": "545638879be8e0a06ffce6ba53b4bb6d0efce675",
      "filename": "wip/aliases/wip.txt",
      "status": "modified",
      "additions": 27,
      "deletions": 9,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Faliases%2Fwip.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Faliases%2Fwip.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/wip%2Faliases%2Fwip.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -76,6 +76,7 @@ Later, quick:\n   - Rename def getAliasOrTruePat()  to getPersona()?  And \"nnnMaybeAnon\" to \"nnnPersona\"?\n \n Minor & medium:\n+  - Even more hidden user profiles? See: ../priv-prefs/priv-prefs-wip.txt  [hidden_profile]\n \n   - Remember post-as-oneself in drafts3, use post_as_id_c, and,\n   - Remember anon status, also when reusing anons, in drafts3.\n@@ -274,9 +275,33 @@ Guessing who is who?  [deanon_risk] [mod_deanon_risk]\n - Inherits permissions — see [pseudonym_types] below.\n     - Posting anonymously in a category few people have access too.\n     - Anonymously moving a page from one access restricted cat to another.\n-- 9999 more things...\n \n-When posting anonymously, often safer to [not_use_true_users]' permissions.\n+- Count people with access: If doing things few others can do, e.g. posting anonymously\n+  in a category to which few people have access (especially if doing repeatedly\n+  using a pseudonym), then:\n+      Count how many have acces, and estimate total % likelihood\n+      that someone correctly guesses who the person is.\n+\n+      For example, 1 / num-people-with-access.  Or, look at all past posts and actions\n+      of a pseudonym (can use AI and spend a bunch of lifetimes, researching this?).\n+\n+      And if too easy to guess, show an info message to the user, maybe they\n+      then don't want to post. Or they might want to create a new pseudonym.\n+      If hard to guess (what's that? 1 in 20? 1 in 200? 2000?) then just\n+      show an info symbol somewhere, e.g. \"Anonymity 99%\" if 100 people have access?\n+\n+  Also helpful in, say, a forum for a university, when in the beginning just a few\n+  peolpe have joined. Then, might want to wait with posting anonymously, until there's\n+  lots of people in the forum, so others can't guess who is who.\n+\n+  This needs a way to calculate how many people can see the relevant category.\n+  And, turns out this is useful also if moving a (sub) category to somewhere else,\n+  or editing its permission settings:  Then it'd be nice if the admin could see\n+  how the changes affect who can/not see the category, thereafter.\n+  [direct_cat_perms] [cat_perm_inh_bug]\n+\n+- When posting anonymously, sometimes safer to [not_use_true_users]' permissions.\n+  Maybe that could be an option somehow?\n \n \n Lots of work\n@@ -289,13 +314,6 @@ Lots of work\n - If admins configure categories so there's small groups with unique sets of permissions,\n   and pseudonyms allowed: Maybe tell the admins that it's possible to make pretty\n   good guesses about who the pseudonyms are?\n-- If repeatedly doing very different things that few others can do,\n-  using the same pseudonym, then what? Calculate total % likelihood that someone\n-  correctly guesses their true identity, looking at all past actions\n-  (can use AI and spend a bunch of lifetimes, researching this?), and if too high,\n-  consider switching to a new pseudonym?  — Maybe simpler to just suggest that\n-  the user switches to a new pseudonym after N time units or M interactions/comments.\n-\n - If an admin Alice impersonates Bob, then, even if Bob's list of aliases are hidden\n   (so Alice can't see them),  it can still be partly possible for Alice to figure out\n   which aliases are Bob's aliases — by looking at when Bob did *not* get notified about"
    },
    {
      "sha": "f77f7ecc8cdd4258d389766178f675ab1e68acdf",
      "filename": "wip/cr-priv-prefs.txt",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Fcr-priv-prefs.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Fcr-priv-prefs.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/wip%2Fcr-priv-prefs.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,51 @@\n+\n+Cr:ing:\n+\n+          ~/styd/ty9 priv/p/m/9 *$% $ git diff --stat 16a1bffa7~ 16a1bffa7 # Derive priv prefs \n+           appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala  |  21 +-\n+           appsv/model/src/main/scala/com/debiki/core/permissions.scala      |   8 +-\n+           .../model/src/main/scala/com/debiki/core/trust-threat-level.scala |  12 +\n+           appsv/model/src/main/scala/com/debiki/core/user.scala             | 110 ++++++++-\n+           .../rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala  |  31 ++-\n+           appsv/server/controllers/UserController.scala                     | 313 +++++++++++++++++------\n+           appsv/server/debiki/ReactJson.scala                               |   8 +\n+           appsv/server/debiki/dao/UserDao.scala                             |  73 ++++--\n+           appsv/server/talkyard/server/JsX.scala                            |  56 +++--\n+           appsv/server/talkyard/server/authz/Authz.scala                    |  88 +++++++\n+           appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala        |  48 ++++\n+           appsv/server/talkyard/server/authz/package.scala                  |  36 +++\n+           appsv/server/talkyard/server/dao/StaleStuff.scala                 |  10 +\n+           appsv/server/talkyard/server/pubsub/PubSub.scala                  |   2 +\n+           appsv/server/talkyard/server/security/package.scala               |   5 +-\n+           appsv/server/talkyard/server/talk/PostsController.scala           | 109 +++++---\n+           client/app-more/page-dialogs/about-user-dialog.more.ts            |  17 +-\n+           client/app-more/users/groups-page.more.ts                         |   8 +-\n+           client/app-more/users/user-activity.more.ts                       |   1 +\n+           client/app-more/users/user-preferences.more.ts                    | 179 +++++++++-----\n+           client/app-more/users/user-prefs.styl                             |   5 +\n+           client/app-more/users/users-page.more.ts                          |  16 +-\n+           client/app-more/users/users-page.styl                             |   5 +\n+           client/app-more/util/trust-level-dialog.more.ts                   |  25 +-\n+           client/app-slim/Server.ts                                         |  16 +-\n+           client/app-slim/model.ts                                          |  15 +-\n+           client/app-slim/oop-methods.ts                                    |   6 +-\n+           client/app-slim/prelude.ts                                        |   5 +\n+           client/app-slim/slim-bundle.d.ts                                  |   5 +-\n+           client/types-and-const-enums.ts                                   |   8 +-\n+           docs/maybe-do-later.txt                                           |  26 +-\n+     ---crd---\n+\n+    crd——> docs/tests-map.txt                                                |  14 +-\n+    crd——> s/run-e2e-tests.sh                                                |  19 ++\n+    crd——> tests/e2e-wdio7/specs/privacy-list-activity.2br.f.e2e.ts          |  13 +-\n+    crd——> tests/e2e-wdio7/specs/privacy-may-see.3br.f.e2e.ts                | 397 ++++++++++++++++++++++++++++++\n+    crd——> tests/e2e-wdio7/test-constants.ts                                 |   1 +\n+    crd——> tests/e2e-wdio7/test-types.ts                                     |   5 +\n+    crd——> tests/e2e-wdio7/utils/ty-e2e-test-browser.ts                      |  51 ++--\n+    crd——> wip/priv-prefs/priv-prefs-wip.txt                                 |  93 +++++++\n+           39 files changed, 1576 insertions(+), 284 deletions(-)\n+\n+\n+\n+\n+"
    },
    {
      "sha": "e8ac99d500ffa45160aec9ab91aaa112b121f230",
      "filename": "wip/priv-prefs/priv-prefs-wip.txt",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/debiki/talkyard/blob/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Fpriv-prefs%2Fpriv-prefs-wip.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/699d3bf24a21ad7d6a22c115c891dc5799faea5d/wip%2Fpriv-prefs%2Fpriv-prefs-wip.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/wip%2Fpriv-prefs%2Fpriv-prefs-wip.txt?ref=699d3bf24a21ad7d6a22c115c891dc5799faea5d",
      "patch": "@@ -0,0 +1,111 @@\n+Privacy Preferences  [inherit_group_priv_prefs]\n+-----------------------\n+\n+Privacy preferences:\n+- Are inherited from trust level groups.\n+- Not yet inherited from custom groups, see below.\n+- Higher trust level groups (more specific) override lower trust level (less specific) groups.\n+- User's own prefs are most specific, override any from groups.\n+- Only may-see-my-profile and -activity inherited, right now (but not may-mention or send-DM).\n+- Not yet implemented everywhere: [inherit_priv_prefs_0impl]\n+\n+- But should a priv prefs on a group, affect the group (only)  [may_group_prefs]\n+  or all members in the group? Right now, affects both. E.g. if may-not-see-profile — is that\n+  the group's profile page, or all its members' individual pages? Currently, both.\n+  But that's annoying — typically, if you hide Everyone's profile pages, it's still ok\n+  to know that the Everyone group exists (it's built-in, hardcoded even), although\n+  you cannot list its members or see their profile pages.\n+\n+Later:\n+- Custom groups can have priv prefs.\n+- Maybe: Trust level group's priority = trust level * 10,\n+- Custom group priority by default = between Core Members and Moderators?\n+  But priority can be edited & changed.\n+- Add some space for light-weight mods and mods-of-mods? [new_trust_levels]\n+- If two groups have the same priority, the most restrictive priv prefs is used\n+  (cannot happen currently, since custom groups cannot have priv prefs, yet).\n+\n+For example, these endpoints require the requester to be allowed to see the target user:\n+    /-/load-user-any-details?who=username  (by username)\n+    /-/load-user-any-details?who=123      (by id)\n+    /-/list-posts?authorId=123\n+    /-/list-topics-by-user?userId=123\n+    /-/list-all-users   — one's name is excluded if requester may not see one's profile\n+    /-/list-usernames   — same\n+\n+More, later:\n+- Moderators should maybe not always be able to see everyone's usernames? If\n+  a communtity is about something sensitive and everyone is anonymous,\n+  maybe better if they don't know what any usernames are. [private_pats] [hidden_profile]\n+\n+- Probably if hiding one's profile, by default, those who then can't see it, also\n+  shouldn't see one's online status in the users online list.\n+  Not yet implemented though. See: [priv_prof_0_presence] (\"private profile -> no presence\")\n+\n+- How send DMs to users whose profile one may not see? (Let's say user Usra has\n+  commented in the same topic and you, and you can't see hans profile, but you\n+  still want to ask sth privately, and Usra has configured hans priv prefs to\n+  allow this (profile private, but DMs are ok). Then, should the message be sent\n+  ... via Usra's profile page? But you can't see it. So, via the about-user dialog then?)\n+\n+- How see activity of users whose profile one may not see?  Maybe it's then\n+  better if the profile page is partly visible, just name (?), bio & stats removed?\n+  But then it's better with the hide-bio preference instead? [see_activity_0_profile]\n+\n+- Impl more inheritance:  may-dm-me, may-mention-me. And:  may-see-me-in-lists,\n+    may-see-my-presence, may-see-my-group-memberships. By default, these'll be\n+    No-may-not, for people for which one's profile is hidden.\n+\n+Custom groups can't have prefs  [0_priv_prefs_4_cust_groups]\n+-----------------------\n+\n+Right now, custom groups aren't considered when deriving a user's privacy prefs,\n+because there's not yet a way to specify how that should be done.\n+\n+Sometimes one wants a custom group's prefs to override trust level group prefs.\n+In other cases, one wants trust level groups to override custom group prefs.\n+A way to specify the priority of a custom group, is needed? [group_priorities]\n+\n+For example, 1/2: Consider a communtity for university students who post\n+anonymous questions to teachers and other students. All user profiles are\n+hidden by default, so no one can guess who worte what (which might otherwise\n+have been simpler to guess, in the beginning if there were only a few members\n+initially — but with profiles hidden, it's not possible to know who the forum\n+members are at all).\n+\n+However, there're some teachers and tech support people, who should have their\n+profiles visible (so students can aks about the university or e.g. how the\n+forum works). Let's say these people are in a Support group, and you'd like to\n+configure that group so the user profiles of its members are shown (not\n+hidden). Thus, you want this custom group's preferences to override the trust\n+level groups' preferences. (The Support people aren't necessarily moderators;\n+making them all mods and configuring the Mods group might not be ok.)\n+\n+But, 2/2, in another forum, for another university, there're more teachers\n+and professors, and students are instead added to a Students custom group.\n+The students' profiles are hidden, for student privacy reasons. However,\n+some students help out as moderators in the forum, so they're in the\n+Moderators trust level group. This group's user profiles are shown, so\n+everyone knows who the moderators are. — Now you want a trust level group\n+(Moderators) to override a custom group's privacy prefs (the Students group).\n+\n+Is it maybe unavoidable that privacy preferences from different groups,\n+have different pirority? And it'd make sense if each custom groups too, not\n+only trust level groups, has its own priority number?\n+\n+And among groups with the same priority, the most restrictive privacy settings\n+would be used.\n+\n+This is for privacy preferences. Access permissions, however, are additive, and\n+don't run into this trickiness. For example, if posting in Category X is\n+granted to a Students group, but not granted to the Full Members group, and a\n+student is in both those groups — that's fine, the student then has access to X\n+(since access permissions from all groups the student is in, are added\n+together). — Maybe there'll be some Deny permission [may_not_perms] but that'd be\n+in the distant future, or never, and then that could result in access\n+permissions becoming a bit tricky too, just like privacy prefs, with group\n+priorities playing a role. Or, Deny:s could \"simply\" be added together from all\n+one's groups, and if there's any, then that overrides any access permission\n+granted.\n+\n+"
    }
  ]
}
