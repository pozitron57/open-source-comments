{
  "sha": "eaa64bac45336cc27a8000590890dd3e0374f129",
  "node_id": "C_kwDOBtgov9oAKGVhYTY0YmFjNDUzMzZjYzI3YTgwMDA1OTA4OTBkZDNlMDM3NGYxMjk",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2025-07-06T22:55:09Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2025-07-06T22:55:09Z"
    },
    "message": "Merge pull request #1929 from umputun/fix/auth-send-jwt-header\n\nFix login persistence with AUTH_SEND_JWT_HEADER enabled",
    "tree": {
      "sha": "cf21af58c5c09020c66434c077320726f7ae485c",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/cf21af58c5c09020c66434c077320726f7ae485c"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/eaa64bac45336cc27a8000590890dd3e0374f129",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoav7NCRC1aQ7uu5UhlAAAol8QAEwTMMxR1o4JiAXFj36QH5Bv\n9kn6q9JzmzKgCERQVUFVSWiPrRSNfaCR9RU1LWHUjn+GLfzSVJ3xsVqycoYPQVCS\n1LT2wKTNv+k5xMNdisDlPiX/PJcVuzmlAsafOc50IkZ56tjxFnYJEpz6jW+Fgb9Z\nIb06dc1MkClooUzUup/Yc1phtCW6zw64iUIyMZLUy0FEJhJIuc1MrTmldPQjnb6s\nX8CYOo1vwFmMS8AllBl4GIJZOxGd31vASWWIaBxxLnzaRXwWsxTSKpvU+9SsqUoc\ntvAar3hP2iGHcBd9GVfWDhNEIKrTZPtYke2zb3AtijrgCjwg9aFdPC69dmxwIhjE\nPTvCOk/XoyT/W3i7Dhk8uiLd7OWNiksoCZ7Y6OzPmectThXteJKVXB7oWJfX38u9\nXKKtIDYnE/f7QpKrfD0CzAUthNqR5ana1iiV4VuJbmlaJYRpt7B5cpuM3ZbKFk4t\nvwTKzKGKS4GNHjUdydwuAZFE0l4SytrU1m3/lq1vrFzBfewWRQ6dYblYyXDNsRgX\njl7eSWk+JNIEXik4lW42abAtMzRj4tJk4GM0Thh+WVstRKADz5wYyybGv9kJ5Piq\n85bPvN+mt3DPdvpMjrCQbvT/AFks+92TDaDOhDe0ss3BnX7v3Rvy3mIZUWW3XStc\nNHNckBhSVzPc1rVWlLvJ\n=688C\n-----END PGP SIGNATURE-----\n",
      "payload": "tree cf21af58c5c09020c66434c077320726f7ae485c\nparent a9c8cf51a016708bd1f8ef08b935f6ccb59d722f\nparent abdca907a792f58b731ada57a60a3115ee28a03b\nauthor Umputun <umputun@gmail.com> 1751842509 -0500\ncommitter GitHub <noreply@github.com> 1751842509 -0500\n\nMerge pull request #1929 from umputun/fix/auth-send-jwt-header\n\nFix login persistence with AUTH_SEND_JWT_HEADER enabled",
      "verified_at": "2025-07-06T22:55:09Z"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/eaa64bac45336cc27a8000590890dd3e0374f129",
  "html_url": "https://github.com/umputun/remark42/commit/eaa64bac45336cc27a8000590890dd3e0374f129",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/eaa64bac45336cc27a8000590890dd3e0374f129/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9c8cf51a016708bd1f8ef08b935f6ccb59d722f",
      "url": "https://api.github.com/repos/umputun/remark42/commits/a9c8cf51a016708bd1f8ef08b935f6ccb59d722f",
      "html_url": "https://github.com/umputun/remark42/commit/a9c8cf51a016708bd1f8ef08b935f6ccb59d722f"
    },
    {
      "sha": "abdca907a792f58b731ada57a60a3115ee28a03b",
      "url": "https://api.github.com/repos/umputun/remark42/commits/abdca907a792f58b731ada57a60a3115ee28a03b",
      "html_url": "https://github.com/umputun/remark42/commit/abdca907a792f58b731ada57a60a3115ee28a03b"
    }
  ],
  "stats": {
    "total": 285,
    "additions": 263,
    "deletions": 22
  },
  "files": [
    {
      "sha": "9a6256d1168424d11f47c0378fabb49157f166e3",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/backend%2Fapp%2Fcmd%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/backend%2Fapp%2Fcmd%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver.go?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -96,7 +96,7 @@ type ServerCommand struct {\n \t\t\tCookie time.Duration `long:\"cookie\" env:\"COOKIE\" default:\"200h\" description:\"auth cookie TTL\"`\n \t\t} `group:\"ttl\" namespace:\"ttl\" env-namespace:\"TTL\"`\n \n-\t\tSendJWTHeader bool   `long:\"send-jwt-header\" env:\"SEND_JWT_HEADER\" description:\"send JWT as a header instead of cookie\"`\n+\t\tSendJWTHeader bool   `long:\"send-jwt-header\" env:\"SEND_JWT_HEADER\" description:\"send JWT as a header instead of server-set cookie; with this enabled, frontend stores the JWT in a client-side cookie (note: increases vulnerability to XSS attacks)\"`\n \t\tSameSite      string `long:\"same-site\" env:\"SAME_SITE\" description:\"set same site policy for cookies\" choice:\"default\" choice:\"none\" choice:\"lax\" choice:\"strict\" default:\"default\"` // nolint\n \n \t\tApple     AppleGroup `group:\"apple\" namespace:\"apple\" env-namespace:\"APPLE\" description:\"Apple OAuth\"`"
    },
    {
      "sha": "7ac4590b3bdd5028691694f92179bff5fba5130c",
      "filename": "frontend/apps/remark42/app/common/cookies.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 7,
      "changes": 61,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Fcookies.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Fcookies.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Fcookies.ts?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -8,15 +8,14 @@ interface CookieOptions {\n   path?: string;\n   domain?: string;\n   secure?: boolean;\n+  sameSite?: 'Strict' | 'Lax' | 'None';\n }\n \n export function setCookie(name: string, value: string, options: CookieOptions = {}) {\n   if (options.expires) {\n+    // Convert number (seconds) or Date to UTC string\n     if (typeof options.expires === 'number') {\n-      const d = new Date();\n-      d.setTime(d.getTime() + options.expires * 1000);\n-      options.expires = d;\n-      options.expires = options.expires.toUTCString();\n+      options.expires = new Date(Date.now() + options.expires * 1000).toUTCString();\n     } else if (options.expires instanceof Date) {\n       options.expires = options.expires.toUTCString();\n     }\n@@ -27,15 +26,63 @@ export function setCookie(name: string, value: string, options: CookieOptions =\n   let updatedCookie = `${name}=${value}`;\n \n   for (const [key, value] of Object.entries(options)) {\n-    updatedCookie += `; ${key}`;\n-    if (value !== true) {\n-      updatedCookie += `=${value}`;\n+    // For boolean attributes like 'secure', only add them if true, otherwise skip\n+    if (value === true) {\n+      updatedCookie += `; ${key}`;\n+    }\n+    if (typeof value !== 'boolean') {\n+      updatedCookie += `; ${key}=${value}`;\n     }\n   }\n \n   document.cookie = updatedCookie;\n }\n \n+/**\n+ * Sets a cookie with enhanced security options for authentication\n+ * @param name The name of the cookie\n+ * @param value The value to set\n+ * @param options Additional cookie options\n+ */\n+export function setAuthCookie(name: string, value: string, options: CookieOptions = {}) {\n+  const isSecure = window.location.protocol === 'https:';\n+  const cookiePrefix = isSecure ? '__Host-' : '';\n+\n+  // Default options for auth cookies with strong security\n+  const authOptions: CookieOptions = {\n+    path: '/',\n+    sameSite: 'Strict',\n+    secure: isSecure,\n+    ...options,\n+  };\n+\n+  setCookie(`${cookiePrefix}${name}`, value, authOptions);\n+}\n+\n+/**\n+ * Clears an authentication cookie by setting its expiration to the past\n+ * @param name The name of the cookie to clear\n+ */\n+export function clearAuthCookie(name: string) {\n+  const isSecure = window.location.protocol === 'https:';\n+  const cookiePrefix = isSecure ? '__Host-' : '';\n+\n+  setCookie(`${cookiePrefix}${name}`, '', {\n+    path: '/',\n+    secure: isSecure,\n+    expires: new Date(0), // Set to epoch time to expire immediately\n+  });\n+\n+  // Also try to clear the non-prefixed version to be thorough\n+  if (cookiePrefix) {\n+    setCookie(name, '', {\n+      path: '/',\n+      secure: isSecure,\n+      expires: new Date(0),\n+    });\n+  }\n+}\n+\n export function getCookie(name: string) {\n   const matches = document.cookie.match(\n     new RegExp(`(?:^|; )${name.replace(/([.$?*|{}()[\\]\\\\/+^])/g, '\\\\$1')}=([^;]*)`)"
    },
    {
      "sha": "e9252b6bb60039a193e236b62fbc4fc73c546407",
      "filename": "frontend/apps/remark42/app/common/fetcher.test.ts",
      "status": "modified",
      "additions": 139,
      "deletions": 1,
      "changes": 140,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.test.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.test.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.test.ts?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -4,7 +4,16 @@ jest.mock('./settings', () => ({\n \n import { RequestError } from 'utils/errorUtils';\n import { API_BASE, BASE_URL } from './constants.config';\n-import { apiFetcher, authFetcher, adminFetcher, JWT_HEADER } from './fetcher';\n+import {\n+  apiFetcher,\n+  authFetcher,\n+  adminFetcher,\n+  JWT_HEADER,\n+  JWT_COOKIE_NAME,\n+  XSRF_COOKIE,\n+  AUTH_COOKIE_TTL_SECONDS,\n+} from './fetcher';\n+import * as cookies from './cookies';\n \n type FetchImplementationProps = {\n   status?: number;\n@@ -31,6 +40,16 @@ function mockFetch({ headers = {}, data = {}, ...props }: FetchImplementationPro\n }\n \n describe('fetcher', () => {\n+  // Mock cookies for the test environment\n+  beforeEach(() => {\n+    // Mock getCookie to always return undefined for XSRF_COOKIE\n+    jest.spyOn(cookies, 'getCookie').mockImplementation(() => undefined);\n+  });\n+\n+  afterEach(() => {\n+    jest.restoreAllMocks();\n+  });\n+\n   const headers = {};\n   const apiUri = '/anything';\n   const apiUrl = `${BASE_URL}${API_BASE}/anything?site=remark`;\n@@ -96,6 +115,12 @@ describe('fetcher', () => {\n   });\n \n   describe('headers', () => {\n+    beforeEach(() => {\n+      // Clear cookies before each test\n+      document.cookie = `${JWT_COOKIE_NAME}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n+      document.cookie = `${XSRF_COOKIE}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n+    });\n+\n     it('should set active token and than clean it on unauthorized response', async () => {\n       expect.assertions(4);\n \n@@ -125,6 +150,119 @@ describe('fetcher', () => {\n \n       expect(window.fetch).toHaveBeenCalledWith(apiUrl, { method: 'get', headers });\n     });\n+\n+    it('should store JWT token in a cookie when received in header', async () => {\n+      // Mock the auth cookie helper - use mockReturnValueOnce for cleaner tests\n+      jest.spyOn(cookies, 'setAuthCookie').mockReturnValueOnce(undefined);\n+\n+      // Create test JWT token - we'll mock the parsing\n+      const jwtToken = 'test.jwt.token';\n+\n+      // Mock parseJwtPayload implementation since it's not directly accessible\n+      jest.spyOn(window, 'atob').mockReturnValueOnce(JSON.stringify({ jti: 'test-jti-id', sub: '1234567890' }));\n+\n+      mockFetch({ headers: { [JWT_HEADER]: jwtToken, ...headers } });\n+      await apiFetcher.get(apiUri);\n+\n+      // Check that setAuthCookie was called for both JWT and XSRF tokens\n+      expect(cookies.setAuthCookie).toHaveBeenCalledWith(\n+        JWT_COOKIE_NAME,\n+        jwtToken,\n+        expect.objectContaining({ expires: AUTH_COOKIE_TTL_SECONDS })\n+      );\n+\n+      expect(cookies.setAuthCookie).toHaveBeenCalledWith(\n+        XSRF_COOKIE,\n+        'test-jti-id',\n+        expect.objectContaining({ expires: AUTH_COOKIE_TTL_SECONDS })\n+      );\n+    });\n+\n+    it('should call setAuthCookie with proper parameters when receiving JWT token', async () => {\n+      // Spy on setAuthCookie calls with mockImplementationOnce and jest.fn()\n+      jest.spyOn(cookies, 'setAuthCookie').mockImplementationOnce(jest.fn());\n+\n+      // Create test JWT token\n+      const jwtToken = 'test.jwt.token';\n+\n+      // Mock parseJwtPayload implementation since it's not directly accessible\n+      jest.spyOn(window, 'atob').mockReturnValueOnce(JSON.stringify({ jti: 'test-jti-id', sub: '1234567890' }));\n+\n+      mockFetch({ headers: { [JWT_HEADER]: jwtToken, ...headers } });\n+      await apiFetcher.get(apiUri);\n+\n+      // Verify setAuthCookie was called with expected parameters\n+      expect(cookies.setAuthCookie).toHaveBeenCalledWith(\n+        JWT_COOKIE_NAME,\n+        jwtToken,\n+        expect.objectContaining({ expires: AUTH_COOKIE_TTL_SECONDS })\n+      );\n+\n+      expect(cookies.setAuthCookie).toHaveBeenCalledWith(\n+        XSRF_COOKIE,\n+        'test-jti-id',\n+        expect.objectContaining({ expires: AUTH_COOKIE_TTL_SECONDS })\n+      );\n+    });\n+\n+    it('should handle errors when setting cookies', async () => {\n+      // Mock console.error using jest.spyOn\n+      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n+\n+      // Make setAuthCookie throw an error\n+      jest.spyOn(cookies, 'setAuthCookie').mockImplementationOnce(() => {\n+        throw new Error('Cookie access denied');\n+      });\n+\n+      // Create test JWT token\n+      const jwtToken = 'test.jwt.token';\n+\n+      // Mock parseJwtPayload implementation since it's not directly accessible\n+      jest.spyOn(window, 'atob').mockReturnValueOnce(JSON.stringify({ jti: 'test-jti-id', sub: '1234567890' }));\n+\n+      mockFetch({ headers: { [JWT_HEADER]: jwtToken, ...headers } });\n+\n+      // This should not throw despite cookie setting failing\n+      await apiFetcher.get(apiUri);\n+\n+      // Error should be logged\n+      expect(consoleErrorSpy).toHaveBeenCalled();\n+\n+      // Restore console.error\n+      consoleErrorSpy.mockRestore();\n+    });\n+\n+    it('should reset activeJwtToken and clear cookies on 401/403 responses', async () => {\n+      // Mock clearAuthCookie\n+      jest.spyOn(cookies, 'clearAuthCookie').mockImplementationOnce(jest.fn());\n+\n+      // Setup JWT token with mocked payload\n+      const jwtToken = 'test.jwt.token';\n+\n+      // Mock JWT parsing\n+      const mockPayload = { jti: 'test-jti-id', sub: '1234567890' };\n+      jest.spyOn(window, 'atob').mockReturnValueOnce(JSON.stringify(mockPayload));\n+\n+      // First set JWT token\n+      mockFetch({ headers: { [JWT_HEADER]: jwtToken, ...headers } });\n+      await apiFetcher.get(apiUri);\n+\n+      // Now trigger a 401 response\n+      mockFetch({ status: 401 });\n+\n+      // Use await expect().rejects for async errors instead of try/catch\n+      await expect(apiFetcher.get(apiUri)).rejects.toEqual(new RequestError('Not authorized.', 401));\n+\n+      // Verify cookies were cleared\n+      expect(cookies.clearAuthCookie).toHaveBeenCalledWith(JWT_COOKIE_NAME);\n+      expect(cookies.clearAuthCookie).toHaveBeenCalledWith(XSRF_COOKIE);\n+\n+      // Verify that subsequent requests don't include the JWT header\n+      mockFetch({ headers });\n+      await apiFetcher.get(apiUri);\n+\n+      expect(window.fetch).toHaveBeenCalled();\n+    });\n   });\n \n   describe('send data', () => {"
    },
    {
      "sha": "6cdfc582adfcedef3d827a620926fff2c1c577bc",
      "filename": "frontend/apps/remark42/app/common/fetcher.ts",
      "status": "modified",
      "additions": 48,
      "deletions": 1,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.ts",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fapps%2Fremark42%2Fapp%2Fcommon%2Ffetcher.ts?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -1,16 +1,43 @@\n import { errorMessages, RequestError } from 'utils/errorUtils';\n \n import { siteId } from './settings';\n-import { getCookie } from './cookies';\n+import { getCookie, setAuthCookie, clearAuthCookie } from './cookies';\n import { StaticStore } from './static-store';\n import { BASE_URL, API_BASE } from './constants';\n \n /** Header name for JWT token */\n export const JWT_HEADER = 'X-JWT';\n+/** Cookie name for JWT token when using AUTH_SEND_JWT_HEADER */\n+export const JWT_COOKIE_NAME = 'JWT';\n /** Header name for XSRF token */\n export const XSRF_HEADER = 'X-XSRF-TOKEN';\n /** Cookie field with XSRF token */\n export const XSRF_COOKIE = 'XSRF-TOKEN';\n+/**\n+ * Cookie TTL in seconds - matches backend's auth.ttl.cookie default of 200 hours\n+ * The JWT token itself expires in 5 minutes, but the cookie persists longer\n+ * to match server-side behavior when not using AUTH_SEND_JWT_HEADER\n+ */\n+export const AUTH_COOKIE_TTL_SECONDS = 200 * 60 * 60;\n+\n+/**\n+ * Safely parses JWT payload with proper base64url handling\n+ * @param token - JWT token string\n+ * @returns parsed payload or null if parsing fails\n+ */\n+function parseJwtPayload(token: string): Record<string, unknown> | null {\n+  try {\n+    const base64Url = token.split('.')[1];\n+    if (!base64Url) return null;\n+\n+    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n+    const rawPayload = window.atob(base64);\n+    return JSON.parse(rawPayload);\n+  } catch (e) {\n+    console.error('Failed to parse JWT payload', e);\n+    return null;\n+  }\n+}\n \n type QueryParams = Record<string, string | number | undefined>;\n type Payload = BodyInit | Record<string, unknown> | null;\n@@ -74,10 +101,30 @@ const createFetcher = (baseUrl: string = ''): Methods => {\n       // backend could update jwt in any time. so, we should handle it\n       if (res.headers.has(JWT_HEADER)) {\n         activeJwtToken = res.headers.get(JWT_HEADER) as string;\n+\n+        // Store the JWT token in cookies for persistence across page reloads\n+        try {\n+          const payload = parseJwtPayload(activeJwtToken);\n+          if (payload && payload.jti) {\n+            // Set XSRF cookie with the JWT ID using enhanced security\n+            setAuthCookie(XSRF_COOKIE, payload.jti as string, {\n+              expires: AUTH_COOKIE_TTL_SECONDS,\n+            });\n+\n+            // Store the JWT in cookie for persistence with enhanced security\n+            setAuthCookie(JWT_COOKIE_NAME, activeJwtToken, {\n+              expires: AUTH_COOKIE_TTL_SECONDS,\n+            });\n+          }\n+        } catch (e) {\n+          console.error('Failed to process JWT token', e);\n+        }\n       }\n \n       if ([401, 403].includes(res.status)) {\n         activeJwtToken = undefined;\n+        clearAuthCookie(JWT_COOKIE_NAME);\n+        clearAuthCookie(XSRF_COOKIE);\n       }\n \n       if (res.status >= 400) {"
    },
    {
      "sha": "4117c975dbdcc1544701760d56b84e8e432cb110",
      "filename": "frontend/pnpm-lock.yaml",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fpnpm-lock.yaml",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/frontend%2Fpnpm-lock.yaml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/frontend%2Fpnpm-lock.yaml?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -4994,7 +4994,7 @@ packages:\n       normalize-path: 3.0.0\n       readdirp: 3.6.0\n     optionalDependencies:\n-      fsevents: 2.3.2\n+      fsevents: 2.3.3\n     dev: true\n \n   /chrome-trace-event@1.0.3:\n@@ -6986,14 +6986,6 @@ packages:\n     resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}\n     dev: true\n \n-  /fsevents@2.3.2:\n-    resolution: {integrity: sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==}\n-    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}\n-    os: [darwin]\n-    requiresBuild: true\n-    dev: true\n-    optional: true\n-\n   /fsevents@2.3.3:\n     resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}\n     engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}\n@@ -8225,7 +8217,7 @@ packages:\n       micromatch: 4.0.5\n       walker: 1.0.8\n     optionalDependencies:\n-      fsevents: 2.3.2\n+      fsevents: 2.3.3\n     dev: true\n \n   /jest-haste-map@28.1.3:\n@@ -8244,7 +8236,7 @@ packages:\n       micromatch: 4.0.5\n       walker: 1.0.8\n     optionalDependencies:\n-      fsevents: 2.3.2\n+      fsevents: 2.3.3\n     dev: true\n \n   /jest-leak-detector@28.1.3:"
    },
    {
      "sha": "ac80a0682e49a6de5ccd2fc8a3c4c07697475e55",
      "filename": "site/src/docs/configuration/parameters/index.md",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/umputun/remark42/blob/eaa64bac45336cc27a8000590890dd3e0374f129/site%2Fsrc%2Fdocs%2Fconfiguration%2Fparameters%2Findex.md",
      "raw_url": "https://github.com/umputun/remark42/raw/eaa64bac45336cc27a8000590890dd3e0374f129/site%2Fsrc%2Fdocs%2Fconfiguration%2Fparameters%2Findex.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/site%2Fsrc%2Fdocs%2Fconfiguration%2Fparameters%2Findex.md?ref=eaa64bac45336cc27a8000590890dd3e0374f129",
      "patch": "@@ -79,7 +79,7 @@ services:\n | image.resize-height            | IMAGE_RESIZE_HEIGHT            | `900`                   | height of a resized image                                |\n | auth.ttl.jwt                   | AUTH_TTL_JWT                   | `5m`                    | JWT TTL                                                  |\n | auth.ttl.cookie                | AUTH_TTL_COOKIE                | `200h`                  | cookie TTL                                               |\n-| auth.send-jwt-header           | AUTH_SEND_JWT_HEADER           | `false`                 | send JWT as a header instead of a cookie                 |\n+| auth.send-jwt-header           | AUTH_SEND_JWT_HEADER           | `false`                 | send JWT as a header instead of a server-set cookie; with this enabled, frontend stores the JWT in a client-side cookie. [See security considerations](#security-considerations-for-auth.send-jwt-header). |\n | auth.same-site                 | AUTH_SAME_SITE                 | `default`               | set same site policy for cookies (`default`, `none`, `lax` or `strict`) |\n | auth.apple.cid                 | AUTH_APPLE_CID                 |                         | Apple client ID (App ID or Services ID)                  |\n | auth.apple.tid                 | AUTH_APPLE_TID                 |                         | Apple service ID                                         |\n@@ -169,6 +169,23 @@ services:\n - _multi_ parameters separated by `,` in the environment or repeated with command-line keys, like `--site=s1 --site=s2 ...`\n - _required_ parameters have to be presented in the environment or provided in the command-line\n \n+### Security Considerations for auth.send-jwt-header\n+\n+When `auth.send-jwt-header=true` is enabled:\n+\n+- **Security Impact**: JWT tokens are stored in client-accessible cookies that can be accessed by JavaScript\n+- **Vulnerability**: This increases vulnerability to XSS attacks compared to server-set HttpOnly cookies\n+- **Implementation Mitigations**:\n+  - SameSite=Strict cookies to prevent CSRF attacks\n+  - Secure flag automatically added on HTTPS connections\n+  - __Host- prefix added on HTTPS to prevent subdomain attacks\n+  - Double Submit Cookie pattern with XSRF token matching the JWT ID\n+\n+This configuration should only be used when:\n+1. You need cross-domain authentication support\n+2. You understand and accept the increased XSS risk\n+3. You have implemented strong XSS protections on your site\n+\n ### Deprecated parameters\n \n The following list of command-line options is deprecated and might be removed in the next major release after the version they were deprecated. After the Remark42 version update, please check the startup log once for deprecation warning messages to avoid trouble with unrecognized command-line options in the future."
    }
  ]
}
