{
  "sha": "640fa7ded4c79be80b3105c0db9b3d33e1404b88",
  "node_id": "C_kwDOCQOkhNoAKDY0MGZhN2RlZDRjNzliZTgwYjMxMDVjMGRiOWIzZDMzZTE0MDRiODg",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-02-12T12:50:01Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-02-12T13:12:55Z"
    },
    "message": "feat(ui/plugins): support dynamic loading of ui plug-in scripts (#774)",
    "tree": {
      "sha": "2ab733fdf99d847207891721f8d5a7d7e7ca8480",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/2ab733fdf99d847207891721f8d5a7d7e7ca8480"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/640fa7ded4c79be80b3105c0db9b3d33e1404b88",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZcoZXwAKCRDUbg8O6nwT\naswOAQCjL1M94mKwPXUTQcP6IkZEFVn8pzyNw833bqwICjwCWgD+J5bOsDxbgnCc\ndwoWkru7B+BijKs77AGgkCQTMn0uHw0=\n=E7pm\n-----END PGP SIGNATURE-----",
      "payload": "tree 2ab733fdf99d847207891721f8d5a7d7e7ca8480\nparent 18123f7002fe341c5b2f3346db8ae0cc1269b5c7\nauthor qwqcode <qwqcode@gmail.com> 1707742201 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1707743575 +0800\n\nfeat(ui/plugins): support dynamic loading of ui plug-in scripts (#774)\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/640fa7ded4c79be80b3105c0db9b3d33e1404b88",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/640fa7ded4c79be80b3105c0db9b3d33e1404b88",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/640fa7ded4c79be80b3105c0db9b3d33e1404b88/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "18123f7002fe341c5b2f3346db8ae0cc1269b5c7",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/18123f7002fe341c5b2f3346db8ae0cc1269b5c7",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/18123f7002fe341c5b2f3346db8ae0cc1269b5c7"
    }
  ],
  "stats": {
    "total": 256,
    "additions": 168,
    "deletions": 88
  },
  "files": [
    {
      "sha": "1f2d107aae32bb90a60fa6f39a50c5e273d070da",
      "filename": "conf/artalk.example.simple.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.simple.yml",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.simple.yml",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/conf%2Fartalk.example.simple.yml?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -168,3 +168,4 @@ frontend:\n     scrollable: false\n   reqTimeout: 15000\n   versionCheck: true\n+  pluginURLs: []"
    },
    {
      "sha": "3eb4712e2f4797504cf4661c462b7fc0fd88bedc",
      "filename": "conf/artalk.example.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.yml",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.yml",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/conf%2Fartalk.example.yml?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -329,3 +329,5 @@ frontend:\n   reqTimeout: 15000\n   # Version check\n   versionCheck: true\n+  # Plugins\n+  pluginURLs: []"
    },
    {
      "sha": "93944f0c9bbd44dc731240c6a479468db9cab4aa",
      "filename": "conf/artalk.example.zh-CN.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.zh-CN.yml",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/conf%2Fartalk.example.zh-CN.yml",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/conf%2Fartalk.example.zh-CN.yml?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -336,3 +336,5 @@ frontend:\n   reqTimeout: 15000\n   # 版本检测\n   versionCheck: true\n+  # 插件\n+  pluginURLs: []"
    },
    {
      "sha": "514b1498164f33f6d616525e596aed41431843dc",
      "filename": "server/common/conf.go",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/server%2Fcommon%2Fconf.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/server%2Fcommon%2Fconf.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fcommon%2Fconf.go?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -1,12 +1,15 @@\n package common\n \n import (\n+\t\"fmt\"\n \t\"strings\"\n \n \t\"github.com/ArtalkJS/Artalk/internal/config\"\n \t\"github.com/ArtalkJS/Artalk/internal/core\"\n \t\"github.com/ArtalkJS/Artalk/internal/utils\"\n+\t\"github.com/ArtalkJS/Artalk/server/middleware\"\n \t\"github.com/gofiber/fiber/v2\"\n+\t\"github.com/samber/lo\"\n )\n \n type ApiVersionData struct {\n@@ -48,8 +51,30 @@ func GetApiPublicConfDataMap(app *core.App, c *fiber.Ctx) ConfData {\n \t\tfrontendConf[\"locale\"] = app.Conf().Locale\n \t}\n \n+\tif pluginURLs, ok := frontendConf[\"pluginURLs\"].([]any); ok {\n+\t\tfrontendConf[\"pluginURLs\"] = handlePluginURLs(app,\n+\t\t\tlo.Map[any, string](pluginURLs, func(u any, _ int) string {\n+\t\t\t\treturn strings.TrimSpace(fmt.Sprintf(\"%v\", u))\n+\t\t\t}))\n+\t}\n+\n \treturn ConfData{\n \t\tFrontendConf: frontendConf,\n \t\tVersion:      GetApiVersionDataMap(),\n \t}\n }\n+\n+func handlePluginURLs(app *core.App, urls []string) []string {\n+\treturn lo.Filter[string](urls, func(u string, _ int) bool {\n+\t\tif strings.TrimSpace(u) == \"\" {\n+\t\t\treturn false\n+\t\t}\n+\t\tif !utils.ValidateURL(u) {\n+\t\t\treturn true\n+\t\t}\n+\t\tif trusted, _, _ := middleware.CheckURLTrusted(app, u); trusted {\n+\t\t\treturn true\n+\t\t}\n+\t\treturn false\n+\t})\n+}"
    },
    {
      "sha": "f8fbe104fcc2ce5a99d28c4055a7b82e00972ada",
      "filename": "ui/artalk/src/artalk.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 15,
      "changes": 19,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fartalk.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fartalk.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Fartalk.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -5,13 +5,10 @@ import type { EventHandler } from './lib/event-manager'\n import Context from './context'\n import { handelCustomConf, convertApiOptions } from './config'\n import Services from './service'\n-import { DefaultPlugins } from './plugins'\n import * as Stat from './plugins/stat'\n import { Api } from './api'\n import type { TInjectedServices } from './service'\n-\n-/** Global Plugins for all instances */\n-const GlobalPlugins: ArtalkPlugin[] = [ ...DefaultPlugins ]\n+import { GlobalPlugins, load } from './load'\n \n /**\n  * Artalk\n@@ -21,9 +18,6 @@ const GlobalPlugins: ArtalkPlugin[] = [ ...DefaultPlugins ]\n export default class Artalk {\n   public ctx!: ContextApi\n \n-  /** Plugins */\n-  protected plugins: ArtalkPlugin[] = [ ...GlobalPlugins ]\n-\n   constructor(conf: Partial<ArtalkConfig>) {\n     // Init Config\n     const handledConf = handelCustomConf(conf, true)\n@@ -34,16 +28,11 @@ export default class Artalk {\n     // Init Services\n     Object.entries(Services).forEach(([name, initService]) => {\n       const obj = initService(this.ctx)\n-      if (obj) this.ctx.inject(name as keyof TInjectedServices, obj) // auto inject deps to ctx\n-    })\n-\n-    // Init Plugins\n-    this.plugins.forEach(plugin => {\n-      if (typeof plugin === 'function') plugin(this.ctx)\n+      obj && this.ctx.inject(name as keyof TInjectedServices, obj) // auto inject deps to ctx\n     })\n \n-    // Trigger created event\n-    this.ctx.trigger('created')\n+    if (import.meta.env.DEV && import.meta.env.VITEST) global.devLoadArtalk = () => load(this.ctx)\n+    else load(this.ctx)\n   }\n \n   /** Get the config of Artalk */"
    },
    {
      "sha": "96050f83288ff4429c2292302876bdf5041f3b1f",
      "filename": "ui/artalk/src/load.ts",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fload.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fload.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Fload.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -0,0 +1,119 @@\n+import type { ArtalkConfig, ArtalkPlugin, ContextApi } from '@/types'\n+import { handleConfFormServer } from '@/config'\n+import { showErrorDialog } from '@/components/error-dialog'\n+import { DefaultPlugins } from './plugins'\n+\n+/**\n+ * Global Plugins for all Artalk instances\n+ */\n+export const GlobalPlugins: ArtalkPlugin[] = [ ...DefaultPlugins ]\n+\n+export async function load(ctx: ContextApi) {\n+  const loadedPlugins: ArtalkPlugin[] = []\n+  const loadPlugins = (plugins: ArtalkPlugin[]) => {\n+    plugins.forEach((plugin) => {\n+      if (typeof plugin === 'function' && !loadedPlugins.includes(plugin)) {\n+        plugin(ctx)\n+        loadedPlugins.push(plugin)\n+      }\n+    })\n+  }\n+\n+  // Load local plugins\n+  loadPlugins(GlobalPlugins)\n+\n+  // Get conf from server\n+  const { data } = await ctx.getApi().conf.conf().catch((err) => {\n+    onLoadErr(ctx, err)\n+    throw err\n+  })\n+\n+  // Initial config\n+  let conf: Partial<ArtalkConfig> = {\n+    apiVersion: data.version?.version, // version info\n+  }\n+\n+  // Reference conf from backend\n+  if (ctx.conf.useBackendConf) {\n+    if (!data.frontend_conf) throw new Error('The remote backend does not respond to the frontend conf, but `useBackendConf` conf is enabled')\n+    conf = { ...conf, ...handleConfFormServer(data.frontend_conf) }\n+  }\n+\n+  // Apply conf modifier\n+  ctx.conf.remoteConfModifier && ctx.conf.remoteConfModifier(conf)\n+\n+  // Dynamically load network plugins\n+  conf.pluginURLs && await loadNetworkPlugins(conf.pluginURLs, ctx.conf.server).then((plugins) => {\n+    loadPlugins(plugins)\n+  }).catch((err) => {\n+    console.error('Failed to load plugin', err)\n+  })\n+\n+  // After all plugins are loaded\n+  ctx.trigger('created')\n+\n+  // Apply conf updating\n+  ctx.updateConf(conf)\n+\n+  // Trigger mounted event\n+  ctx.trigger('mounted')\n+\n+  // Load comment list\n+  if (!ctx.conf.remoteConfModifier) {  // only auto fetch when no remoteConfModifier\n+    ctx.fetch({ offset: 0 })\n+  }\n+}\n+\n+/**\n+ * Dynamically load plugins from Network\n+ */\n+async function loadNetworkPlugins(scripts: string[], apiBase: string): Promise<ArtalkPlugin[]> {\n+  if (!scripts || !Array.isArray(scripts)) return []\n+\n+  const tasks: Promise<void>[] = []\n+\n+  scripts.forEach((url) => {\n+    // check url valid\n+    if (!/^(http|https):\\/\\//.test(url))\n+      url = `${apiBase.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`\n+\n+    tasks.push(new Promise<void>((resolve, reject) => {\n+      // check if loaded\n+      if (document.querySelector(`script[src=\"${url}\"]`)) {\n+        resolve()\n+        return\n+      }\n+\n+      // load script\n+      const script = document.createElement('script')\n+      script.src = url\n+      document.head.appendChild(script)\n+      script.onload = () => resolve()\n+      script.onerror = (err) => reject(err)\n+    }))\n+  })\n+\n+  await Promise.all(tasks)\n+\n+  return Object.values(window.ArtalkPlugins || {})\n+}\n+\n+export function onLoadErr(ctx: ContextApi, err: any) {\n+  let sidebarOpenView = ''\n+\n+  // if response err_no_site, modify the sidebar open view to create site\n+  if (err.data?.err_no_site) {\n+    const viewLoadParam = { create_name: ctx.conf.site, create_urls: `${window.location.protocol}//${window.location.host}` }\n+    sidebarOpenView = `sites|${JSON.stringify(viewLoadParam)}`\n+  }\n+\n+  showErrorDialog({\n+    $err: ctx.get('list').$el,\n+    errMsg: err.msg || String(err),\n+    errData: err.data,\n+    retryFn: () => load(ctx),\n+    onOpenSidebar: ctx.get('user').getData().isAdmin ? () => ctx.showSidebar({\n+      view: sidebarOpenView as any\n+    }) : undefined // only show open sidebar button when user is admin\n+  })\n+}"
    },
    {
      "sha": "078b0778440e3470a562f88a87f657be1068941d",
      "filename": "ui/artalk/src/plugins/conf-remoter.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 63,
      "changes": 63,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/18123f7002fe341c5b2f3346db8ae0cc1269b5c7/ui%2Fartalk%2Fsrc%2Fplugins%2Fconf-remoter.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/18123f7002fe341c5b2f3346db8ae0cc1269b5c7/ui%2Fartalk%2Fsrc%2Fplugins%2Fconf-remoter.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Fplugins%2Fconf-remoter.ts?ref=18123f7002fe341c5b2f3346db8ae0cc1269b5c7",
      "patch": "@@ -1,63 +0,0 @@\n-import type { ArtalkConfig, ArtalkPlugin, ContextApi } from '@/types'\n-import { handleConfFormServer } from '@/config'\n-import { showErrorDialog } from '../components/error-dialog'\n-\n-export const ConfRemoter: ArtalkPlugin = (ctx) => {\n-  ctx.on('created', () => {\n-    if (ctx.conf.immediateFetch !== false)\n-      ctx.trigger('conf-fetch')\n-  })\n-\n-  ctx.on('conf-fetch', () => {\n-    loadConf(ctx)\n-  })\n-}\n-\n-function loadConf(ctx: ContextApi) {\n-  ctx.getApi().conf.conf().then((res) => {\n-    let conf: Partial<ArtalkConfig> = {\n-      apiVersion: res.data.version?.version, // version info\n-    }\n-\n-    // reference conf from backend\n-    if (ctx.conf.useBackendConf) {\n-      if (!res.data.frontend_conf) throw new Error('The remote backend does not respond to the frontend conf, but `useBackendConf` conf is enabled')\n-      conf = { ...conf, ...handleConfFormServer(res.data.frontend_conf) }\n-    }\n-\n-    // apply conf modifier\n-    ctx.conf.remoteConfModifier && ctx.conf.remoteConfModifier(conf)\n-\n-    ctx.updateConf(conf)\n-  }).catch((err) => {\n-    ctx.updateConf({})\n-\n-    let sidebarOpenView = ''\n-\n-    // if response err_no_site, modify the sidebar open view to create site\n-    if (err.data?.err_no_site) {\n-      const viewLoadParam = { create_name: ctx.conf.site, create_urls: `${window.location.protocol}//${window.location.host}` }\n-      sidebarOpenView = `sites|${JSON.stringify(viewLoadParam)}`\n-    }\n-\n-    showErrorDialog({\n-      $err: ctx.get('list').$el,\n-      errMsg: err.msg || String(err),\n-      errData: err.data,\n-      retryFn: () => loadConf(ctx),\n-      onOpenSidebar: ctx.get('user').getData().isAdmin ? () => ctx.showSidebar({\n-        view: sidebarOpenView as any\n-      }) : undefined // only show open sidebar button when user is admin\n-    })\n-\n-    console.error(err)\n-    throw err\n-  }).then(() => {\n-    // Trigger mounted event\n-    ctx.trigger('mounted')\n-  }).then(() => {\n-    // 评论获取\n-    if (ctx.conf.remoteConfModifier) return // only auto fetch when no remoteConfModifier\n-    ctx.fetch({ offset: 0 })\n-  }).catch(() => {})\n-}"
    },
    {
      "sha": "bd3d818c22228f7dd8b05bbf32e24ac8bd323fb6",
      "filename": "ui/artalk/src/plugins/index.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fplugins%2Findex.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Fplugins%2Findex.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Fplugins%2Findex.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -1,5 +1,4 @@\n import type { ArtalkPlugin } from '@/types'\n-import { ConfRemoter } from './conf-remoter'\n import { Markdown } from './markdown'\n import { EditorKit } from './editor-kit'\n import { ListPlugins } from './list'\n@@ -10,7 +9,6 @@ import { AdminOnlyElem } from './admin-only-elem'\n import { DarkMode } from './dark-mode'\n \n export const DefaultPlugins: ArtalkPlugin[] = [\n-  ConfRemoter,\n   Markdown, EditorKit, AdminOnlyElem,\n   ...ListPlugins,\n   Notifies,"
    },
    {
      "sha": "dfab3bc41c8e29a4eba5b62c812e7edebf2b477e",
      "filename": "ui/artalk/src/types/config.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fconfig.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fconfig.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Ftypes%2Fconfig.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -120,6 +120,9 @@ export interface ArtalkConfig {\n   /** 后端版本 (系统数据，用户不允许更改) */\n   apiVersion?: string\n \n+  /** Plugin script urls */\n+  pluginURLs?: string[]\n+\n   /** Replacer for marked */\n   markedReplacers?: ((raw: string) => string)[]\n \n@@ -130,7 +133,6 @@ export interface ArtalkConfig {\n   remoteConfModifier?: (conf: Partial<ArtalkConfig>) => void\n   listUnreadHighlight?: boolean\n   scrollRelativeTo?: () => HTMLElement\n-  immediateFetch?: boolean\n   pvAdd?: boolean\n   beforeSubmit?: (editor: EditorApi, next: () => void) => void\n }"
    },
    {
      "sha": "3c0ef9ec534a915ce6ad154850f01883927140b3",
      "filename": "ui/artalk/src/types/event.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fevent.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fevent.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Ftypes%2Fevent.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -13,7 +13,6 @@ export interface EventPayloadMap {\n   'updated': ArtalkConfig\n   'unmounted': undefined\n \n-  'conf-fetch': undefined          // 配置请求时\n   'list-fetch': Partial<ListFetchParams>    // 评论列表请求时\n   'list-fetched': ListFetchedArgs           // 评论列表请求后\n   'list-load': CommentData[]     // 评论装载前 (list-load payload is partial comments)"
    },
    {
      "sha": "0aee2f6a6fc801f1a6e7b390a5c0580d62011467",
      "filename": "ui/artalk/src/types/window.d.ts",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fwindow.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Fsrc%2Ftypes%2Fwindow.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Fsrc%2Ftypes%2Fwindow.d.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -0,0 +1,9 @@\n+import { ArtalkPlugin } from '.'\n+\n+export {}\n+\n+declare global {\n+  interface Window {\n+    ArtalkPlugins?: { [name: string]: ArtalkPlugin }\n+  }\n+}"
    },
    {
      "sha": "c22292e7aee46322d5d051c057155f43990d383c",
      "filename": "ui/artalk/tests/ui-api.test.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Ftests%2Fui-api.test.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/640fa7ded4c79be80b3105c0db9b3d33e1404b88/ui%2Fartalk%2Ftests%2Fui-api.test.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fartalk%2Ftests%2Fui-api.test.ts?ref=640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "patch": "@@ -66,7 +66,6 @@ describe('Artalk instance', () => {\n     artalk = Artalk.init({\n       ...InitConf,\n       el,\n-      immediateFetch: false,  // for testing\n     })\n \n     expect(artalk).toBeInstanceOf(Artalk)\n@@ -81,19 +80,17 @@ describe('Artalk instance', () => {\n     expect(conf.site).toBe(InitConf.site)\n     expect(conf.darkMode).toBe(InitConf.darkMode)\n \n-    expect(artalk.getEl().classList.contains('atk-dark-mode')).toBe(true)\n-\n     confCopy = JSON.parse(JSON.stringify(conf))\n   })\n \n   it('should can listen to events and the conf-remoter works (artalk.trigger, artalk.on, conf-remoter)', async () => {\n-    artalk.trigger('conf-fetch')\n+    global.devLoadArtalk()\n \n     const fn = vi.fn()\n \n-    await new Promise(resolve => {\n+    await new Promise<void>(resolve => {\n       artalk.on('mounted', (conf) => {\n-        resolve(null)\n+        resolve()\n         fn()\n       })\n     })"
    }
  ]
}
