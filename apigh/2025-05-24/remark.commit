{
  "sha": "242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
  "node_id": "C_kwDOBtgov9oAKDI0MjQ5OTc4N2VhZjA3NWFlNjRjZGYzM2Q4MDJjNmNkNWYzZWU0ZDk",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2025-04-29T07:31:12Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2025-04-29T07:31:12Z"
    },
    "message": "Merge pull request #1930 from umputun/paskal/update-gopkgz\n\nUpdate go-pkgz, system modules",
    "tree": {
      "sha": "ee210163a1c4cbcb7cf5813f1d1feb039f1c5b87",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/ee210163a1c4cbcb7cf5813f1d1feb039f1c5b87"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoEIBACRC1aQ7uu5UhlAAAn4AQAKNQZFyr6LTmdtihuBaBtOkw\n45DVs9a/Dl2p5moqU5S53UBwDXCFBldxCXO0y409YaRoVtOGVlFf5zpCf3cFofQg\nUOhYb0Gwbuc2KLePqsUV/8CEej4GZZHQBW5KNPscFB7SfEo29A4OjX+MLTIUkLIy\nXh1lpAgDLB9i3dX1V9J+KnxBbY0L9B00mXQJAvvmDjCi3eoYLr1cBcgBAxyUAkfU\nT4M0j/rxkZeO6HN7ogHe3rkjFiHvR5CFe0kWCFoj53WV8E7eKrrCuJGEJwZbk11L\nMLv3cAAElzwdQrGUitWVolCBnPyzAcjBxuCOJtiT0gSdICljKiM9WjjAtqoOHITI\nAqqT0ZQCtitcqTlwD4lON8CMeJZ7beASg8qvGIU3OwOZuKk9953FefdFDhPiaEbU\nEldVBCPGmq1YavWPhmk3mX3SJHvoCXIhphWH7z9l+G/o09n7MMi4udDMUk9+t8z1\nx7QP0+rhvJxRPHZu7Wm5RyXKKHG9QvD5KPUI7QMZxYO8aHpOug2GE1OCn4/GY6iG\nCHmpCnHPluOzy4Bi/RBjZkNzk1oxH+Gdl/6kY/fL9LeRWJJS1lEvhYbF44LeCSk4\n7WM5dvzN1XVF8trFto9xqGGiRsMopkpOFCe26Hc2VF50BB9krvI9FwynzSUIUjc4\nlrSWyJJrTW5iSEkjz/I5\n=oTwU\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ee210163a1c4cbcb7cf5813f1d1feb039f1c5b87\nparent 61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6\nparent fd0799384fe22a3f3b2ae14d78543e8f4e06225d\nauthor Umputun <umputun@gmail.com> 1745911872 -0500\ncommitter GitHub <noreply@github.com> 1745911872 -0500\n\nMerge pull request #1930 from umputun/paskal/update-gopkgz\n\nUpdate go-pkgz, system modules",
      "verified_at": "2025-04-29T07:31:16Z"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
  "html_url": "https://github.com/umputun/remark42/commit/242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6",
      "url": "https://api.github.com/repos/umputun/remark42/commits/61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6",
      "html_url": "https://github.com/umputun/remark42/commit/61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6"
    },
    {
      "sha": "fd0799384fe22a3f3b2ae14d78543e8f4e06225d",
      "url": "https://api.github.com/repos/umputun/remark42/commits/fd0799384fe22a3f3b2ae14d78543e8f4e06225d",
      "html_url": "https://github.com/umputun/remark42/commit/fd0799384fe22a3f3b2ae14d78543e8f4e06225d"
    }
  ],
  "stats": {
    "total": 3439,
    "additions": 2363,
    "deletions": 1076
  },
  "files": [
    {
      "sha": "6f8b4bf3173f9af5e5511a2cd8a49e23a76d69bc",
      "filename": "backend/_example/memory_store/go.mod",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.mod?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -6,7 +6,7 @@ toolchain go1.24.1\n \n require (\n \tgithub.com/go-pkgz/jrpc v0.3.1\n-\tgithub.com/go-pkgz/lgr v0.11.1\n+\tgithub.com/go-pkgz/lgr v0.12.0\n \tgithub.com/jessevdk/go-flags v1.6.1\n \tgithub.com/stretchr/testify v1.10.0\n \tgithub.com/umputun/remark42/backend v1.1000.0\n@@ -25,7 +25,7 @@ require (\n \tgithub.com/go-chi/chi/v5 v5.2.1 // indirect\n \tgithub.com/go-chi/render v1.0.3 // indirect\n \tgithub.com/go-pkgz/expirable-cache/v3 v3.0.0 // indirect\n-\tgithub.com/go-pkgz/rest v1.20.2 // indirect\n+\tgithub.com/go-pkgz/rest v1.20.3 // indirect\n \tgithub.com/gorilla/css v1.0.1 // indirect\n \tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n \tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n@@ -36,10 +36,10 @@ require (\n \tgithub.com/rs/xid v1.6.0 // indirect\n \tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n \tgo.etcd.io/bbolt v1.4.0 // indirect\n-\tgolang.org/x/crypto v0.36.0 // indirect\n-\tgolang.org/x/image v0.25.0 // indirect\n-\tgolang.org/x/net v0.37.0 // indirect\n-\tgolang.org/x/sys v0.31.0 // indirect\n+\tgolang.org/x/crypto v0.37.0 // indirect\n+\tgolang.org/x/image v0.26.0 // indirect\n+\tgolang.org/x/net v0.39.0 // indirect\n+\tgolang.org/x/sys v0.32.0 // indirect\n \tgopkg.in/yaml.v3 v3.0.1 // indirect\n )\n "
    },
    {
      "sha": "0230470438aaf146cabce33d8f955e542373bea7",
      "filename": "backend/_example/memory_store/go.sum",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.sum?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -29,10 +29,10 @@ github.com/go-pkgz/expirable-cache/v3 v3.0.0 h1:u3/gcu3sabLYiTCevoRKv+WzjIn5oo7P\n github.com/go-pkgz/expirable-cache/v3 v3.0.0/go.mod h1:2OQiDyEGQalYecLWmXprm3maPXeVb5/6/X7yRPYTzec=\n github.com/go-pkgz/jrpc v0.3.1 h1:jRxnO5ppOookkL9PuOWw/IloevmzqbsKaGImTR3iALQ=\n github.com/go-pkgz/jrpc v0.3.1/go.mod h1:DJg1RfhwvJpVT3YXtk8LxowB7DN5jUoZ3U4MbHnm76M=\n-github.com/go-pkgz/lgr v0.11.1 h1:hXFhZcznehI6imLhEa379oMOKFz7TQUmisAqb3oLOSM=\n-github.com/go-pkgz/lgr v0.11.1/go.mod h1:tgDF4RXQnBfIgJqjgkv0yOeTQ3F1yewWIZkpUhHnAkU=\n-github.com/go-pkgz/rest v1.20.2 h1:6wYWo85H7xFU09FadVKKc5LKIfIpCStBXJj9F/P4COc=\n-github.com/go-pkgz/rest v1.20.2/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n+github.com/go-pkgz/lgr v0.12.0 h1:uoSCLdiMocZDa+L66DavHG5UIkOJvWKOVqt6sNQllw0=\n+github.com/go-pkgz/lgr v0.12.0/go.mod h1:A4AxjOthFVFK6jRnVYMeusno5SeDAxcLVHd0kI/lN/Y=\n+github.com/go-pkgz/rest v1.20.3 h1:oGGfM8XTnvwek29q1OAhcI1nkKKOpurRFApBiYH44Fk=\n+github.com/go-pkgz/rest v1.20.3/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\n github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\n github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\n@@ -72,10 +72,10 @@ golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliY\n golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\n golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\n golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\n-golang.org/x/crypto v0.36.0 h1:AnAEvhDddvBdpY+uR+MyHmuZzzNqXSe/GvuDeob5L34=\n-golang.org/x/crypto v0.36.0/go.mod h1:Y4J0ReaxCR1IMaabaSMugxJES1EpwhBHhv2bDHklZvc=\n-golang.org/x/image v0.25.0 h1:Y6uW6rH1y5y/LK1J8BPWZtr6yZ7hrsy6hFrXjgsc2fQ=\n-golang.org/x/image v0.25.0/go.mod h1:tCAmOEGthTtkalusGp1g3xa2gke8J6c2N565dTyl9Rs=\n+golang.org/x/crypto v0.37.0 h1:kJNSjF/Xp7kU0iB2Z+9viTPMW4EqqsrywMXLJOOsXSE=\n+golang.org/x/crypto v0.37.0/go.mod h1:vg+k43peMZ0pUMhYmVAWysMK35e6ioLh3wB8ZCAfbVc=\n+golang.org/x/image v0.26.0 h1:4XjIFEZWQmCZi6Wv8BoxsDhRU3RVnLX04dToTDAEPlY=\n+golang.org/x/image v0.26.0/go.mod h1:lcxbMFAovzpnJxzXS3nyL83K27tmqtKzIJpctK8YO5c=\n golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\n golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n@@ -90,17 +90,17 @@ golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\n golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\n golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\n golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\n-golang.org/x/net v0.37.0 h1:1zLorHbz+LYj7MQlSf1+2tPIIgibq2eL5xkrGk6f+2c=\n-golang.org/x/net v0.37.0/go.mod h1:ivrbrMbzFq5J41QOQh0siUuly180yBYtLp+CKbEaFx8=\n+golang.org/x/net v0.39.0 h1:ZCu7HMWDxpXpaiKdhzIfaltL9Lp31x/3fCP11bc6/fY=\n+golang.org/x/net v0.39.0/go.mod h1:X7NRbYVEA+ewNkCNyJ513WmMdQ3BineSwVtN2zD/d+E=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\n golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n-golang.org/x/sync v0.12.0 h1:MHc5BpPuC30uJk597Ri8TV3CNZcTLu6B6z4lJy+g6Jw=\n-golang.org/x/sync v0.12.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=\n+golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=\n+golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n@@ -112,8 +112,8 @@ golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n-golang.org/x/sys v0.31.0 h1:ioabZlmFYtWhL+TRYpcnNlLwhyxaM9kWTDEmfnprqik=\n-golang.org/x/sys v0.31.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=\n+golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=\n+golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=\n golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\n golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8="
    },
    {
      "sha": "41797fe28b12b88f5185579c9fc0f192c082501e",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.mod?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1,7 +1,8 @@\n module github.com/umputun/remark42/backend\n \n-go 1.23\n-toolchain go1.24.1\n+go 1.23.0\n+\n+toolchain go1.24.2\n \n require (\n \tgithub.com/Depado/bfchroma/v2 v2.0.0\n@@ -12,13 +13,13 @@ require (\n \tgithub.com/go-chi/chi/v5 v5.2.1\n \tgithub.com/go-chi/cors v1.2.1\n \tgithub.com/go-chi/render v1.0.3\n-\tgithub.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba\n+\tgithub.com/go-pkgz/auth/v2 v2.0.1-0.20250415030422-4f9f2c5e3b0d\n \tgithub.com/go-pkgz/jrpc v0.3.1\n \tgithub.com/go-pkgz/lcw/v2 v2.0.0\n-\tgithub.com/go-pkgz/lgr v0.11.1\n+\tgithub.com/go-pkgz/lgr v0.12.0\n \tgithub.com/go-pkgz/notify v1.2.0\n \tgithub.com/go-pkgz/repeater v1.2.0\n-\tgithub.com/go-pkgz/rest v1.20.2\n+\tgithub.com/go-pkgz/rest v1.20.3\n \tgithub.com/go-pkgz/syncs v1.3.2\n \tgithub.com/golang-jwt/jwt/v5 v5.2.2\n \tgithub.com/google/uuid v1.6.0\n@@ -33,9 +34,9 @@ require (\n \tgithub.com/stretchr/testify v1.10.0\n \tgo.etcd.io/bbolt v1.4.0\n \tgo.uber.org/goleak v1.3.0\n-\tgolang.org/x/crypto v0.36.0\n-\tgolang.org/x/image v0.25.0\n-\tgolang.org/x/net v0.37.0\n+\tgolang.org/x/crypto v0.37.0\n+\tgolang.org/x/image v0.26.0\n+\tgolang.org/x/net v0.39.0\n )\n \n require (\n@@ -49,15 +50,15 @@ require (\n \tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n \tgithub.com/didip/tollbooth/v8 v8.0.1 // indirect\n \tgithub.com/dlclark/regexp2 v1.11.4 // indirect\n-\tgithub.com/go-oauth2/oauth2/v4 v4.5.2 // indirect\n+\tgithub.com/go-oauth2/oauth2/v4 v4.5.3 // indirect\n \tgithub.com/go-pkgz/email v0.5.0 // indirect\n \tgithub.com/go-pkgz/expirable-cache/v3 v3.0.0 // indirect\n-\tgithub.com/golang/snappy v0.0.4 // indirect\n+\tgithub.com/golang/snappy v1.0.0 // indirect\n \tgithub.com/gorilla/css v1.0.1 // indirect\n \tgithub.com/gorilla/websocket v1.5.3 // indirect\n \tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n \tgithub.com/hashicorp/golang-lru/v2 v2.0.7 // indirect\n-\tgithub.com/klauspost/compress v1.17.11 // indirect\n+\tgithub.com/klauspost/compress v1.18.0 // indirect\n \tgithub.com/montanaflynn/stats v0.7.1 // indirect\n \tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n \tgithub.com/redis/go-redis/v9 v9.7.3 // indirect\n@@ -67,10 +68,10 @@ require (\n \tgithub.com/xdg-go/scram v1.1.2 // indirect\n \tgithub.com/xdg-go/stringprep v1.0.4 // indirect\n \tgithub.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78 // indirect\n-\tgo.mongodb.org/mongo-driver v1.17.1 // indirect\n-\tgolang.org/x/oauth2 v0.24.0 // indirect\n-\tgolang.org/x/sync v0.12.0 // indirect\n-\tgolang.org/x/sys v0.31.0 // indirect\n-\tgolang.org/x/text v0.23.0 // indirect\n+\tgo.mongodb.org/mongo-driver v1.17.3 // indirect\n+\tgolang.org/x/oauth2 v0.29.0 // indirect\n+\tgolang.org/x/sync v0.13.0 // indirect\n+\tgolang.org/x/sys v0.32.0 // indirect\n+\tgolang.org/x/text v0.24.0 // indirect\n \tgopkg.in/yaml.v3 v3.0.1 // indirect\n )"
    },
    {
      "sha": "66bbb5ec88ce7d65d152ccd9d74dea359f4e5b80",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 39,
      "deletions": 32,
      "changes": 71,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.sum?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -27,6 +27,7 @@ github.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\n github.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\n github.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\n github.com/bsm/gomega v1.27.10/go.mod h1:JyEr/xRbxbtgWNi8tIEVPUYZ5Dzef52k01W3YH0H+O0=\n+github.com/bytedance/gopkg v0.0.0-20221122125632-68358b8ecec6/go.mod h1:5FoAH5xUHHCMDvQPy1rnj8moqLkLHFaDVBjHhcFwEi0=\n github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\n github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n@@ -58,10 +59,10 @@ github.com/go-chi/cors v1.2.1 h1:xEC8UT3Rlp2QuWNEr4Fs/c2EAGVKBwy/1vHx3bppil4=\n github.com/go-chi/cors v1.2.1/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=\n github.com/go-chi/render v1.0.3 h1:AsXqd2a1/INaIfUSKq3G5uA8weYx20FOsM7uSoCyyt4=\n github.com/go-chi/render v1.0.3/go.mod h1:/gr3hVkmYR0YlEy3LxCuVRFzEu9Ruok+gFqbIofjao0=\n-github.com/go-oauth2/oauth2/v4 v4.5.2 h1:CuZhD3lhGuI6aNLyUbRHXsgG2RwGRBOuCBfd4WQKqBQ=\n-github.com/go-oauth2/oauth2/v4 v4.5.2/go.mod h1:wk/2uLImWIa9VVQDgxz99H2GDbhmfi/9/Xr+GvkSUSQ=\n-github.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba h1:TqoOfThmmcoiSAs/J+y0/3hwS/YRhzR2XepO147jR+I=\n-github.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba/go.mod h1:VkvKMNbRJz36sdTL1F75khRqpl4yux4u2CujFzCZOeY=\n+github.com/go-oauth2/oauth2/v4 v4.5.3 h1:lQt7O9KOnu/v4awe166FH7+p8tFUXQyR+no6nctAKU0=\n+github.com/go-oauth2/oauth2/v4 v4.5.3/go.mod h1:ryzb7zr8fdQBlciD0+tcnEWeOok5B0J8V/DniwYqQ2k=\n+github.com/go-pkgz/auth/v2 v2.0.1-0.20250415030422-4f9f2c5e3b0d h1:xyTp7JRaHy3/ttpcNiJO/YzxENZcvxcZL8iE3QfssnY=\n+github.com/go-pkgz/auth/v2 v2.0.1-0.20250415030422-4f9f2c5e3b0d/go.mod h1:YTCEC2cBE2ugyRf0ePew4NZIJE5ozglI06/IokmtiwU=\n github.com/go-pkgz/email v0.5.0 h1:fdtMDGJ8NwyBACLR0LYHaCIK/OeUwZHMhH7Q0+oty9U=\n github.com/go-pkgz/email v0.5.0/go.mod h1:BdxglsQnymzhfdbnncEE72a6DrucZHy6I+42LK2jLEc=\n github.com/go-pkgz/expirable-cache v0.1.0/go.mod h1:GTrEl0X+q0mPNqN6dtcQXksACnzCBQ5k/k1SwXJsZKs=\n@@ -71,21 +72,19 @@ github.com/go-pkgz/jrpc v0.3.1 h1:jRxnO5ppOookkL9PuOWw/IloevmzqbsKaGImTR3iALQ=\n github.com/go-pkgz/jrpc v0.3.1/go.mod h1:DJg1RfhwvJpVT3YXtk8LxowB7DN5jUoZ3U4MbHnm76M=\n github.com/go-pkgz/lcw/v2 v2.0.0 h1:gTwXpiJBhQeA1rXuqkRuLcV79uATFna8CckH8ZBBrH0=\n github.com/go-pkgz/lcw/v2 v2.0.0/go.mod h1:yxJHOn+IbQBQHxUqkCtMrbGjIfdYcsBAZcVCBaL1Va8=\n-github.com/go-pkgz/lgr v0.11.1 h1:hXFhZcznehI6imLhEa379oMOKFz7TQUmisAqb3oLOSM=\n-github.com/go-pkgz/lgr v0.11.1/go.mod h1:tgDF4RXQnBfIgJqjgkv0yOeTQ3F1yewWIZkpUhHnAkU=\n+github.com/go-pkgz/lgr v0.12.0 h1:uoSCLdiMocZDa+L66DavHG5UIkOJvWKOVqt6sNQllw0=\n+github.com/go-pkgz/lgr v0.12.0/go.mod h1:A4AxjOthFVFK6jRnVYMeusno5SeDAxcLVHd0kI/lN/Y=\n github.com/go-pkgz/notify v1.2.0 h1:jqbsbWkodCDB9ffyI9fCG1bTSgidWJRS5UWD/twjU44=\n github.com/go-pkgz/notify v1.2.0/go.mod h1:BTHj9ly7xZpaxg91lBdxCxSmkpVQ9R6q5QviX/upeYo=\n github.com/go-pkgz/repeater v1.2.0 h1:oJFvjyKdTDd5RCzpzxlzYIZFFj6Zfl17rE1aUfu6UjQ=\n github.com/go-pkgz/repeater v1.2.0/go.mod h1:vypP6xamA53MFmafnGUucqOmALKk36xgKu2hSG73LHM=\n-github.com/go-pkgz/rest v1.20.2 h1:6wYWo85H7xFU09FadVKKc5LKIfIpCStBXJj9F/P4COc=\n-github.com/go-pkgz/rest v1.20.2/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n+github.com/go-pkgz/rest v1.20.3 h1:oGGfM8XTnvwek29q1OAhcI1nkKKOpurRFApBiYH44Fk=\n+github.com/go-pkgz/rest v1.20.3/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n github.com/go-pkgz/syncs v1.3.2 h1:gmioASlJNy3gNosPlgvWOM2QP0Hdjzn2u+/sUShgd8E=\n github.com/go-pkgz/syncs v1.3.2/go.mod h1:qjgzpp7OpuhDf7BWsW/FHCu9DLjE32NPy6/vXAXT/Cw=\n-github.com/go-session/session v3.1.2+incompatible/go.mod h1:8B3iivBQjrz/JtC68Np2T1yBBLxTan3mn/3OM0CyRt0=\n+github.com/go-session/session/v3 v3.2.1/go.mod h1:RftEBbyuzqkNCAxIrCLJe+rfBqB/4G11qxq9KYKrx4M=\n github.com/go-test/deep v1.0.4 h1:u2CU3YKy9I2pmu9pX0eq50wCgjfGIt539SqR7FbHiho=\n github.com/go-test/deep v1.0.4/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\n-github.com/golang-jwt/jwt v3.2.1+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\n-github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\n github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\n github.com/golang-jwt/jwt/v5 v5.2.2 h1:Rl4B7itRWVtYIHFrSNd7vhTiz9UpLdi6gZhZ3wEeDy8=\n github.com/golang-jwt/jwt/v5 v5.2.2/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\n@@ -97,8 +96,8 @@ github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrU\n github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\n github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\n github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\n-github.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=\n-github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\n+github.com/golang/snappy v1.0.0 h1:Oy607GVXHs7RtbggtPBnr2RmDArIsAefDwvrdWvRhGs=\n+github.com/golang/snappy v1.0.0/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\n github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\n github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\n github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\n@@ -111,6 +110,8 @@ github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+\n github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\n github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\n github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\n+github.com/gopherjs/gopherjs v0.0.0-20200217142428-fce0ec30dd00 h1:l5lAOZEym3oK3SQ2HBHWsJUfbNBiTXJDeW2QDxw9AQ0=\n+github.com/gopherjs/gopherjs v0.0.0-20200217142428-fce0ec30dd00/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\n github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\n github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\n github.com/gorilla/feeds v1.2.0 h1:O6pBiXJ5JHhPvqy53NsjKOThq+dNFm8+DFrxBEdzSCc=\n@@ -132,11 +133,12 @@ github.com/imkira/go-interpol v1.1.0 h1:KIiKr0VSG2CUW1hl1jpiyuzuJeKUUpC8iM1AIE7N\n github.com/imkira/go-interpol v1.1.0/go.mod h1:z0h2/2T3XF8kyEPpRgJ3kmNv+C43p+I/CoI+jC3w2iA=\n github.com/jessevdk/go-flags v1.6.1 h1:Cvu5U8UGrLay1rZfv/zP7iLpSHGUZ/Ou68T0iX1bBK4=\n github.com/jessevdk/go-flags v1.6.1/go.mod h1:Mk8T1hIAWpOiJiHa9rJASDK2UGWji0EuPGBnNLMooyc=\n+github.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\n github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\n github.com/k0kubun/colorstring v0.0.0-20150214042306-9440f1994b88/go.mod h1:3w7q1U84EfirKl04SVQ/s7nPm1ZPhiXd34z40TNz36k=\n github.com/klauspost/compress v1.15.0/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\n-github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\n-github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\n+github.com/klauspost/compress v1.18.0 h1:c/Cqfb0r+Yi+JtIEq73FWXVkRonBlf0CRNYc8Zttxdo=\n+github.com/klauspost/compress v1.18.0/go.mod h1:2Pp+KzxcywXVXMr50+X0Q/Lsb43OQHYWRCY2AiWywWQ=\n github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\n github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\n github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\n@@ -180,12 +182,15 @@ github.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e/go.mod h1:XV66xRDq\n github.com/slack-go/slack v0.15.0 h1:LE2lj2y9vqqiOf+qIIy0GvEoxgF1N5yLGZffmEZykt0=\n github.com/slack-go/slack v0.15.0/go.mod h1:hlGi5oXA+Gt+yWTPP0plCdRKmjsDxecdHxYQdlMQKOw=\n github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\n+github.com/smartystreets/assertions v1.1.0 h1:MkTeG1DMwsrdH7QtLXy5W+fUxWq+vmb6cLmyJ7aRtF0=\n+github.com/smartystreets/assertions v1.1.0/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=\n+github.com/smartystreets/goconvey v1.6.4 h1:fv0U8FUIMPNf1L9lnHLvLhgicrIVChEkdzIKYqbNC9s=\n github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\n github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\n-github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\n github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\n github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\n@@ -246,8 +251,8 @@ github.com/yuin/gopher-lua v1.1.1 h1:kYKnWBjvbNP4XLT3+bPEwAXJx262OhaHDWDVOPjL46M\n github.com/yuin/gopher-lua v1.1.1/go.mod h1:GBR0iDaNXjAgGg9zfCvksxSRnQx76gclCIb7kdAd1Pw=\n go.etcd.io/bbolt v1.4.0 h1:TU77id3TnN/zKr7CO/uk+fBCwF2jGcMuw2B/FMAzYIk=\n go.etcd.io/bbolt v1.4.0/go.mod h1:AsD+OCi/qPN1giOX1aiLAha3o1U8rAz65bvN4j0sRuk=\n-go.mongodb.org/mongo-driver v1.17.1 h1:Wic5cJIwJgSpBhe3lx3+/RybR5PiYRMpVFgO7cOHyIM=\n-go.mongodb.org/mongo-driver v1.17.1/go.mod h1:wwWm/+BuOddhcq3n68LKRmgk2wXzmF6s0SFOa0GINL4=\n+go.mongodb.org/mongo-driver v1.17.3 h1:TQyXhnsWfWtgAhMtOgtYHMTkZIfBTpMTsMnd9ZBeHxQ=\n+go.mongodb.org/mongo-driver v1.17.3/go.mod h1:Hy04i7O2kC4RS06ZrhPRqj/u4DTYkFDAAccj+rVKqgQ=\n go.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\n go.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n@@ -257,10 +262,10 @@ golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliY\n golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\n golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\n golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\n-golang.org/x/crypto v0.36.0 h1:AnAEvhDddvBdpY+uR+MyHmuZzzNqXSe/GvuDeob5L34=\n-golang.org/x/crypto v0.36.0/go.mod h1:Y4J0ReaxCR1IMaabaSMugxJES1EpwhBHhv2bDHklZvc=\n-golang.org/x/image v0.25.0 h1:Y6uW6rH1y5y/LK1J8BPWZtr6yZ7hrsy6hFrXjgsc2fQ=\n-golang.org/x/image v0.25.0/go.mod h1:tCAmOEGthTtkalusGp1g3xa2gke8J6c2N565dTyl9Rs=\n+golang.org/x/crypto v0.37.0 h1:kJNSjF/Xp7kU0iB2Z+9viTPMW4EqqsrywMXLJOOsXSE=\n+golang.org/x/crypto v0.37.0/go.mod h1:vg+k43peMZ0pUMhYmVAWysMK35e6ioLh3wB8ZCAfbVc=\n+golang.org/x/image v0.26.0 h1:4XjIFEZWQmCZi6Wv8BoxsDhRU3RVnLX04dToTDAEPlY=\n+golang.org/x/image v0.26.0/go.mod h1:lcxbMFAovzpnJxzXS3nyL83K27tmqtKzIJpctK8YO5c=\n golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\n golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n@@ -283,22 +288,23 @@ golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\n golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\n golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\n golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\n-golang.org/x/net v0.37.0 h1:1zLorHbz+LYj7MQlSf1+2tPIIgibq2eL5xkrGk6f+2c=\n-golang.org/x/net v0.37.0/go.mod h1:ivrbrMbzFq5J41QOQh0siUuly180yBYtLp+CKbEaFx8=\n+golang.org/x/net v0.39.0 h1:ZCu7HMWDxpXpaiKdhzIfaltL9Lp31x/3fCP11bc6/fY=\n+golang.org/x/net v0.39.0/go.mod h1:X7NRbYVEA+ewNkCNyJ513WmMdQ3BineSwVtN2zD/d+E=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n-golang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\n-golang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\n+golang.org/x/oauth2 v0.29.0 h1:WdYw2tdTK1S8olAzWHdgeqfy+Mtm9XNhv/xJsY65d98=\n+golang.org/x/oauth2 v0.29.0/go.mod h1:onh5ek6nERTohokkhCD/y2cV4Do3fxFHFuAejCkRWT8=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\n golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n-golang.org/x/sync v0.12.0 h1:MHc5BpPuC30uJk597Ri8TV3CNZcTLu6B6z4lJy+g6Jw=\n-golang.org/x/sync v0.12.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=\n+golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=\n+golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n@@ -315,14 +321,15 @@ golang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBc\n golang.org/x/sys v0.0.0-20220227234510-4e6760a101f9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.0.0-20221010170243-090e33056c14/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n-golang.org/x/sys v0.31.0 h1:ioabZlmFYtWhL+TRYpcnNlLwhyxaM9kWTDEmfnprqik=\n-golang.org/x/sys v0.31.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=\n+golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=\n+golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=\n golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\n golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\n@@ -344,8 +351,8 @@ golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\n golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\n-golang.org/x/text v0.23.0 h1:D71I7dUrlY+VX0gQShAThNGHFxZ13dGLBHQLVl1mJlY=\n-golang.org/x/text v0.23.0/go.mod h1:/BLNzu4aZCJ1+kcD0DNRotWKage4q2rGVAg4o22unh4=\n+golang.org/x/text v0.24.0 h1:dd5Bzh4yt5KYA8f9CJHCP4FB4D51c2c6JvN37xJJkJ0=\n+golang.org/x/text v0.24.0/go.mod h1:L8rBsPeo2pSS+xqN0d5u2ikmjtmoJbDBT1b7nHvFCdU=\n golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\n golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo="
    },
    {
      "sha": "74aa1f67dd9ee516938982bb68dcbeeab16f11c6",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/.editorconfig",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2F.editorconfig",
      "raw_url": "https://github.com/umputun/remark42/raw/61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2F.editorconfig",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2F.editorconfig?ref=61dbf6b1f28aff2eef399ee0a935a6f8a2ce9db6",
      "patch": "@@ -1,2 +0,0 @@\n-[*.go]\n-end_of_line = crlf\n\\ No newline at end of file"
    },
    {
      "sha": "9368799081c61a842472d9ea2272110035fbf936",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/README.md",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2FREADME.md?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -68,6 +68,10 @@ func main() {\n \tsrv.SetAllowGetAccessRequest(true)\n \tsrv.SetClientInfoHandler(server.ClientFormHandler)\n \n+\tsrv.UserAuthorizationHandler = func(w http.ResponseWriter, r *http.Request) (userID string, err error) {\n+\t\treturn \"000000\", nil\n+\t}\n+\n \tsrv.SetInternalErrorHandler(func(err error) (re *errors.Response) {\n \t\tlog.Println(\"Internal Error:\", err.Error())\n \t\treturn"
    },
    {
      "sha": "9073e40ef9aa33620443cef2bfd7b315c46605f4",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/model.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fmodel.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fmodel.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fmodel.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1,6 +1,7 @@\n package oauth2\n \n import (\n+\t\"net/url\"\n \t\"time\"\n )\n \n@@ -57,4 +58,10 @@ type (\n \t\tGetRefreshExpiresIn() time.Duration\n \t\tSetRefreshExpiresIn(time.Duration)\n \t}\n+\n+\tExtendableTokenInfo interface {\n+\t\tTokenInfo\n+\t\tGetExtension() url.Values\n+\t\tSetExtension(url.Values)\n+\t}\n )"
    },
    {
      "sha": "81d54a1def1f2f9098d666bcd6eaf020e2f11bd4",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/server/handler.go",
      "status": "modified",
      "additions": 49,
      "deletions": 1,
      "changes": 50,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fhandler.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fhandler.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fhandler.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -3,6 +3,7 @@ package server\n import (\n \t\"context\"\n \t\"net/http\"\n+\t\"strings\"\n \t\"time\"\n \n \t\"github.com/go-oauth2/oauth2/v4\"\n@@ -49,8 +50,14 @@ type (\n \t// ExtensionFieldsHandler in response to the access token with the extension of the field\n \tExtensionFieldsHandler func(ti oauth2.TokenInfo) (fieldsValue map[string]interface{})\n \n-\t// ResponseTokenHandler response token handing\n+\t// ResponseTokenHandler response token handling\n \tResponseTokenHandler func(w http.ResponseWriter, data map[string]interface{}, header http.Header, statusCode ...int) error\n+\n+\t// Handler to fetch the refresh token from the request\n+\tRefreshTokenResolveHandler func(r *http.Request) (string, error)\n+\n+\t// Handler to fetch the access token from the request\n+\tAccessTokenResolveHandler func(r *http.Request) (string, bool)\n )\n \n // ClientFormHandler get client data from form\n@@ -71,3 +78,44 @@ func ClientBasicHandler(r *http.Request) (string, string, error) {\n \t}\n \treturn username, password, nil\n }\n+\n+func RefreshTokenFormResolveHandler(r *http.Request) (string, error) {\n+\trt := r.FormValue(\"refresh_token\")\n+\tif rt == \"\" {\n+\t\treturn \"\", errors.ErrInvalidRequest\n+\t}\n+\n+\treturn rt, nil\n+}\n+\n+func RefreshTokenCookieResolveHandler(r *http.Request) (string, error) {\n+\tc, err := r.Cookie(\"refresh_token\")\n+\tif err != nil {\n+\t\treturn \"\", errors.ErrInvalidRequest\n+\t}\n+\n+\treturn c.Value, nil\n+}\n+\n+func AccessTokenDefaultResolveHandler(r *http.Request) (string, bool) {\n+\ttoken := \"\"\n+\tauth := r.Header.Get(\"Authorization\")\n+\tprefix := \"Bearer \"\n+\n+\tif auth != \"\" && strings.HasPrefix(auth, prefix) {\n+\t\ttoken = auth[len(prefix):]\n+\t} else {\n+\t\ttoken = r.FormValue(\"access_token\")\n+\t}\n+\n+\treturn token, token != \"\"\n+}\n+\n+func AccessTokenCookieResolveHandler(r *http.Request) (string, bool) {\n+\tc, err := r.Cookie(\"access_token\")\n+\tif err != nil {\n+\t\treturn \"\", false\n+\t}\n+\n+\treturn c.Value, true\n+}"
    },
    {
      "sha": "f4dba2d8e6af3e933920b9e0287c5d4bfd5f6db9",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/server/server.go",
      "status": "modified",
      "additions": 9,
      "deletions": 21,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -6,7 +6,6 @@ import (\n \t\"fmt\"\n \t\"net/http\"\n \t\"net/url\"\n-\t\"strings\"\n \t\"time\"\n \n \t\"github.com/go-oauth2/oauth2/v4\"\n@@ -25,8 +24,10 @@ func NewServer(cfg *Config, manager oauth2.Manager) *Server {\n \t\tManager: manager,\n \t}\n \n-\t// default handler\n+\t// default handlers\n \tsrv.ClientInfoHandler = ClientBasicHandler\n+\tsrv.RefreshTokenResolveHandler = RefreshTokenFormResolveHandler\n+\tsrv.AccessTokenResolveHandler = AccessTokenDefaultResolveHandler\n \n \tsrv.UserAuthorizationHandler = func(w http.ResponseWriter, r *http.Request) (string, error) {\n \t\treturn \"\", errors.ErrAccessDenied\n@@ -56,6 +57,8 @@ type Server struct {\n \tAccessTokenExpHandler        AccessTokenExpHandler\n \tAuthorizeScopeHandler        AuthorizeScopeHandler\n \tResponseTokenHandler         ResponseTokenHandler\n+\tRefreshTokenResolveHandler   RefreshTokenResolveHandler\n+\tAccessTokenResolveHandler    AccessTokenResolveHandler\n }\n \n func (s *Server) handleError(w http.ResponseWriter, req *AuthorizeRequest, err error) error {\n@@ -367,10 +370,10 @@ func (s *Server) ValidationTokenRequest(r *http.Request) (oauth2.GrantType, *oau\n \tcase oauth2.ClientCredentials:\n \t\ttgr.Scope = r.FormValue(\"scope\")\n \tcase oauth2.Refreshing:\n-\t\ttgr.Refresh = r.FormValue(\"refresh_token\")\n+\t\ttgr.Refresh, err = s.RefreshTokenResolveHandler(r)\n \t\ttgr.Scope = r.FormValue(\"scope\")\n-\t\tif tgr.Refresh == \"\" {\n-\t\t\treturn \"\", nil, errors.ErrInvalidRequest\n+\t\tif err != nil {\n+\t\t\treturn \"\", nil, err\n \t\t}\n \t}\n \treturn gt, tgr, nil\n@@ -569,27 +572,12 @@ func (s *Server) GetErrorData(err error) (map[string]interface{}, int, http.Head\n \treturn data, statusCode, re.Header\n }\n \n-// BearerAuth parse bearer token\n-func (s *Server) BearerAuth(r *http.Request) (string, bool) {\n-\tauth := r.Header.Get(\"Authorization\")\n-\tprefix := \"Bearer \"\n-\ttoken := \"\"\n-\n-\tif auth != \"\" && strings.HasPrefix(auth, prefix) {\n-\t\ttoken = auth[len(prefix):]\n-\t} else {\n-\t\ttoken = r.FormValue(\"access_token\")\n-\t}\n-\n-\treturn token, token != \"\"\n-}\n-\n // ValidationBearerToken validation the bearer tokens\n // https://tools.ietf.org/html/rfc6750\n func (s *Server) ValidationBearerToken(r *http.Request) (oauth2.TokenInfo, error) {\n \tctx := r.Context()\n \n-\taccessToken, ok := s.BearerAuth(r)\n+\taccessToken, ok := s.AccessTokenResolveHandler(r)\n \tif !ok {\n \t\treturn nil, errors.ErrInvalidAccessToken\n \t}"
    },
    {
      "sha": "660da8d13395ff58c3e48bc2fe36100e970bbb4d",
      "filename": "backend/vendor/github.com/go-oauth2/oauth2/v4/server/server_config.go",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver_config.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver_config.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-oauth2%2Foauth2%2Fv4%2Fserver%2Fserver_config.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -93,3 +93,13 @@ func (s *Server) SetAuthorizeScopeHandler(handler AuthorizeScopeHandler) {\n func (s *Server) SetResponseTokenHandler(handler ResponseTokenHandler) {\n \ts.ResponseTokenHandler = handler\n }\n+\n+// SetRefreshTokenResolveHandler refresh token resolver\n+func (s *Server) SetRefreshTokenResolveHandler(handler RefreshTokenResolveHandler) {\n+\ts.RefreshTokenResolveHandler = handler\n+}\n+\n+// SetAccessTokenResolveHandler access token resolver\n+func (s *Server) SetAccessTokenResolveHandler(handler AccessTokenResolveHandler) {\n+\ts.AccessTokenResolveHandler = handler\n+}"
    },
    {
      "sha": "c3c61f75b15b4addcae0971b55756781a585547e",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/auth.go",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fauth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fauth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fauth.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -4,6 +4,8 @@ package auth\n import (\n \t\"fmt\"\n \t\"net/http\"\n+\t\"net/url\"\n+\t\"regexp\"\n \t\"strings\"\n \t\"time\"\n \n@@ -270,10 +272,42 @@ func (s *Service) addProviderByName(name string, p provider.Params) {\n }\n \n func (s *Service) addProvider(prov provider.Provider) {\n+\tif !s.isValidProviderName(prov.Name()) {\n+\t\treturn\n+\t}\n \ts.providers = append(s.providers, provider.NewService(prov))\n \ts.authMiddleware.Providers = s.providers\n }\n \n+func (s *Service) isValidProviderName(name string) bool {\n+\tif strings.TrimSpace(name) == \"\" {\n+\t\ts.logger.Logf(\"[ERROR] provider has been ignored because its name is empty\")\n+\t\treturn false\n+\t}\n+\n+\tformatForbidden := func(name string) string {\n+\t\treturn fmt.Sprintf(\"provider has been ignored because its name contains forbidden characters: '%s'\", name)\n+\t}\n+\n+\tpath, err := url.PathUnescape(name)\n+\tif err != nil || path != name {\n+\t\ts.logger.Logf(\"[ERROR] %s\", formatForbidden(name))\n+\t\treturn false\n+\t}\n+\tif name != url.PathEscape(name) {\n+\t\ts.logger.Logf(\"[ERROR] %s\", formatForbidden(name))\n+\t\treturn false\n+\t}\n+\t// net/url package does not escape everything (https://github.com/golang/go/issues/5684)\n+\t// It is better to reject all reserved characters from https://datatracker.ietf.org/doc/html/rfc3986#section-2.2\n+\tif regexp.MustCompile(`[:/?#\\[\\]@!$&'\\(\\)*+,;=]`).MatchString(name) {\n+\t\ts.logger.Logf(\"[ERROR] %s\", formatForbidden(name))\n+\t\treturn false\n+\t}\n+\n+\treturn true\n+}\n+\n // AddProvider adds provider for given name\n func (s *Service) AddProvider(name, cid, csecret string) {\n \tp := provider.Params{"
    },
    {
      "sha": "6aafa0337ebdf16add451f171cac6f034bf632aa",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/middleware/auth.go",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fmiddleware%2Fauth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fmiddleware%2Fauth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fmiddleware%2Fauth.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -129,7 +129,7 @@ func (a *Authenticator) auth(reqAuth bool) func(http.Handler) http.Handler {\n \t\t\t\t}\n \n \t\t\t\t// check if user provider is allowed\n-\t\t\t\tif !a.isProviderAllowed(claims.User.ID) {\n+\t\t\t\tif !a.isProviderAllowed(&claims) {\n \t\t\t\t\tonError(h, w, r, fmt.Errorf(\"user %s/%s provider is not allowed\", claims.User.Name, claims.User.ID))\n \t\t\t\t\ta.JWTService.Reset(w)\n \t\t\t\t\treturn\n@@ -153,13 +153,24 @@ func (a *Authenticator) auth(reqAuth bool) func(http.Handler) http.Handler {\n \treturn f\n }\n \n-// isProviderAllowed checks if user provider is allowed, user id looks like \"provider_1234567890\"\n-// this check is needed to reject users from providers what are used to be allowed but not anymore.\n+// isProviderAllowed checks if user provider is allowed.\n+// If provider name is explicitly set in the token claims, then that provider is checked.\n+//\n+// If user id looks like \"provider_1234567890\",\n+// then there is an attempt to extract provider name from that user ID.\n+// Note that such read can fail if user id has multiple \"_\" separator symbols.\n+//\n+// This check is needed to reject users from providers what are used to be allowed but not anymore.\n // Such users made token before the provider was disabled and should not be allowed to login anymore.\n-func (a *Authenticator) isProviderAllowed(userID string) bool {\n-\tuserProvider := strings.Split(userID, \"_\")[0]\n+func (a *Authenticator) isProviderAllowed(claims *token.Claims) bool {\n+\t// TODO: remove this read when old tokens expire and all new tokens have a provider name in them\n+\tuserIDProvider := strings.Split(claims.User.ID, \"_\")[0]\n \tfor _, p := range a.Providers {\n-\t\tif p.Name() == userProvider {\n+\t\tname := p.Name()\n+\t\tif claims.AuthProvider != nil && claims.AuthProvider.Name == name {\n+\t\t\treturn true\n+\t\t}\n+\t\tif name == userIDProvider {\n \t\t\treturn true\n \t\t}\n \t}"
    },
    {
      "sha": "3781ab62c235d0d85626b2cfad15487c5b1ec239",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/apple.go",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fapple.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fapple.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fapple.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -267,6 +267,9 @@ func (ah *AppleHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tExpiresAt: jwt.NewNumericDate(time.Now().Add(30 * time.Minute)),\n \t\t\tNotBefore: jwt.NewNumericDate(time.Now().Add(-1 * time.Minute)),\n \t\t},\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: ah.name,\n+\t\t},\n \t}\n \n \tif _, err = ah.JwtService.Set(w, claims); err != nil {\n@@ -337,7 +340,7 @@ func (ah AppleHandler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t// trying to fetch Apple public key (JWK) for verify token signature, it need for verify IDToken received from Apple\n \tkeySet, err := fetchAppleJWK(r.Context(), ah.conf.jwkURL)\n \tif err != nil {\n-\t\tah.L.Logf(\"[ERROR] failed to fetch JWK from Apple key service: \" + err.Error())\n+\t\tah.Logf(\"[ERROR] failed to fetch JWK from Apple key service: \" + err.Error())\n \t\trest.SendErrorJSON(w, r, ah.L, http.StatusInternalServerError, nil, fmt.Sprintf(\"failed to fetch JWK from Apple key service: %s\", resp.Error))\n \t\treturn\n \t}\n@@ -346,7 +349,7 @@ func (ah AppleHandler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \ttokenClaims := jwt.MapClaims{}\n \t_, err = jwt.ParseWithClaims(resp.IDToken, tokenClaims, keySet.keyFunc)\n \tif err != nil {\n-\t\tah.L.Logf(\"[ERROR] failed to get claims: \" + err.Error())\n+\t\tah.Logf(\"[ERROR] failed to get claims: \" + err.Error())\n \t\trest.SendErrorJSON(w, r, ah.L, http.StatusInternalServerError, nil, fmt.Sprintf(\"failed to token validation, key is invalid: %s\", resp.Error))\n \t\treturn\n \t}\n@@ -376,6 +379,9 @@ func (ah AppleHandler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tAudience: oauthClaims.Audience,\n \t\t},\n \t\tSessionOnly: false,\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: ah.name,\n+\t\t},\n \t}\n \n \tif _, err = ah.JwtService.Set(w, claims); err != nil {\n@@ -445,7 +451,7 @@ func (ah *AppleHandler) exchange(ctx context.Context, code, redirectURI string,\n \n \tdefer func() {\n \t\tif err = res.Body.Close(); err != nil {\n-\t\t\tah.L.Logf(\"[ERROR] close request body failed when get access token: %v\", err)\n+\t\t\tah.Logf(\"[ERROR] close request body failed when get access token: %v\", err)\n \t\t}\n \t}()\n \n@@ -498,7 +504,7 @@ func (ah *AppleHandler) parseUserData(user *token.User, jUser string) {\n \n \t// Catch error for log only. No need break flow if user name doesn't exist\n \tif err := json.Unmarshal([]byte(jUser), &userData); err != nil {\n-\t\tah.L.Logf(\"[DEBUG] failed to parse user data %s: %v\", user, err)\n+\t\tah.Logf(\"[DEBUG] failed to parse user data %s: %v\", user, err)\n \t\tuser.Name = \"noname_\" + user.ID[6:12] // paste noname if user name failed to parse\n \t\treturn\n \t}"
    },
    {
      "sha": "9844989c024cbd76de3ec55ef408015304bee8c0",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/direct.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fdirect.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fdirect.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fdirect.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -126,6 +126,9 @@ func (p DirectHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tAudience: []string{creds.Audience},\n \t\t},\n \t\tSessionOnly: sessOnly,\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: p.ProviderName,\n+\t\t},\n \t}\n \n \tif _, err = p.TokenService.Set(w, claims); err != nil {"
    },
    {
      "sha": "8484a4f0c977dd85e8cc3f2ba48df0491aefeb81",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/oauth1.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth1.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth1.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth1.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -61,6 +61,9 @@ func (h Oauth1Handler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tExpiresAt: jwt.NewNumericDate(time.Now().Add(30 * time.Minute)),\n \t\t\tNotBefore: jwt.NewNumericDate(time.Now().Add(-1 * time.Minute)),\n \t\t},\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: h.name,\n+\t\t},\n \t}\n \n \tif _, err = h.JwtService.Set(w, claims); err != nil {\n@@ -146,6 +149,9 @@ func (h Oauth1Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tAudience: oauthClaims.Audience,\n \t\t},\n \t\tSessionOnly: oauthClaims.SessionOnly,\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: h.name,\n+\t\t},\n \t}\n \n \tif _, err = h.JwtService.Set(w, claims); err != nil {"
    },
    {
      "sha": "273a1906d14da04aff4f0e68eba6c3377108d459",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/oauth2.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth2.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth2.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Foauth2.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -118,6 +118,9 @@ func (p Oauth2Handler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tNotBefore: jwt.NewNumericDate(time.Now().Add(-1 * time.Minute)),\n \t\t},\n \t\tNoAva: r.URL.Query().Get(\"noava\") == \"1\",\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: p.name,\n+\t\t},\n \t}\n \n \tif _, err := p.JwtService.Set(w, claims); err != nil {\n@@ -215,6 +218,9 @@ func (p Oauth2Handler) AuthHandler(w http.ResponseWriter, r *http.Request) {\n \t\t},\n \t\tSessionOnly: oauthClaims.SessionOnly,\n \t\tNoAva:       oauthClaims.NoAva,\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: p.name,\n+\t\t},\n \t}\n \n \tif _, err = p.JwtService.Set(w, claims); err != nil {"
    },
    {
      "sha": "5b884eb92e54332e3a5bc1d2a6e9496a4cfe1798",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/telegram.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Ftelegram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Ftelegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Ftelegram.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -310,6 +310,9 @@ func (th *TelegramHandler) LoginHandler(w http.ResponseWriter, r *http.Request)\n \t\t\tNotBefore: jwt.NewNumericDate(time.Now().Add(-1 * time.Minute)),\n \t\t},\n \t\tSessionOnly: false, // TODO review?\n+\t\tAuthProvider: &authtoken.AuthProvider{\n+\t\t\tName: th.ProviderName,\n+\t\t},\n \t}\n \n \tif _, err := th.TokenService.Set(w, claims); err != nil {"
    },
    {
      "sha": "1c459532bccac858bb8b3203b3b2bdc7a52cb03e",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/provider/verify.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fverify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fverify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Fprovider%2Fverify.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -117,6 +117,9 @@ func (e VerifyHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \t\t\tAudience: confClaims.Audience,\n \t\t},\n \t\tSessionOnly: sessOnly,\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: e.ProviderName,\n+\t\t},\n \t}\n \n \tif _, err = e.TokenService.Set(w, claims); err != nil {\n@@ -152,6 +155,9 @@ func (e VerifyHandler) sendConfirmation(w http.ResponseWriter, r *http.Request)\n \t\t\tNotBefore: jwt.NewNumericDate(time.Now().Add(-1 * time.Minute)),\n \t\t\tIssuer:    e.Issuer,\n \t\t},\n+\t\tAuthProvider: &token.AuthProvider{\n+\t\t\tName: e.ProviderName,\n+\t\t},\n \t}\n \n \ttkn, err := e.TokenService.Token(claims)"
    },
    {
      "sha": "22954ef29f64e41b8e26dda591967611dbe016b7",
      "filename": "backend/vendor/github.com/go-pkgz/auth/v2/token/jwt.go",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Ftoken%2Fjwt.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Ftoken%2Fjwt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Fauth%2Fv2%2Ftoken%2Fjwt.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -23,10 +23,11 @@ type Service struct {\n // Claims stores user info for token and state & from from login\n type Claims struct {\n \tjwt.RegisteredClaims\n-\tUser        *User      `json:\"user,omitempty\"` // user info\n-\tSessionOnly bool       `json:\"sess_only,omitempty\"`\n-\tHandshake   *Handshake `json:\"handshake,omitempty\"` // used for oauth handshake\n-\tNoAva       bool       `json:\"no-ava,omitempty\"`    // disable avatar, always use identicon\n+\tUser         *User         `json:\"user,omitempty\"` // user info\n+\tSessionOnly  bool          `json:\"sess_only,omitempty\"`\n+\tHandshake    *Handshake    `json:\"handshake,omitempty\"`     // used for oauth handshake\n+\tNoAva        bool          `json:\"no-ava,omitempty\"`        // disable avatar, always use identicon\n+\tAuthProvider *AuthProvider `json:\"auth_provider,omitempty\"` // auth provider info\n }\n \n // Handshake used for oauth handshake\n@@ -36,6 +37,11 @@ type Handshake struct {\n \tID    string `json:\"id,omitempty\"`\n }\n \n+// AuthProvider stores attributes of provider which has created a JWT token\n+type AuthProvider struct {\n+\tName string `json:\"name,omitempty\"`\n+}\n+\n const (\n \t// default names for cookies and headers\n \tdefaultJWTCookieName   = \"JWT\"\n@@ -241,7 +247,7 @@ func (j *Service) validate(claims *Claims) error {\n func (j *Service) Set(w http.ResponseWriter, claims Claims) (Claims, error) {\n \tnowUnix := time.Now().Unix()\n \n-\tif claims.ExpiresAt == nil || claims.ExpiresAt.Time.Unix() == 0 {\n+\tif claims.ExpiresAt == nil || claims.ExpiresAt.Unix() == 0 {\n \t\tclaims.ExpiresAt = jwt.NewNumericDate(time.Unix(nowUnix, 0).Add(j.TokenDuration))\n \t}\n "
    },
    {
      "sha": "c90a0281d77f8039f2728717a353ce1228f75c48",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/.golangci.yml",
      "status": "modified",
      "additions": 50,
      "deletions": 14,
      "changes": 64,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2F.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2F.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2F.golangci.yml?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1,8 +1,8 @@\n linters-settings:\n   govet:\n-    check-shadowing: true\n+    shadow: true\n   golint:\n-    min-confidence: 0\n+    min-confidence: 0.6\n   gocyclo:\n     min-complexity: 15\n   maligned:\n@@ -24,44 +24,80 @@ linters-settings:\n     disabled-checks:\n       - wrapperFunc\n       - hugeParam\n+      - rangeValCopy\n \n linters:\n+  disable-all: true\n   enable:\n-    - megacheck\n     - revive\n     - govet\n     - unconvert\n-    - megacheck\n-    - gas\n-    - gocyclo\n-    - dupl\n-    - misspell\n+    - gosec\n     - unparam\n     - unused\n     - typecheck\n     - ineffassign\n     - stylecheck\n     - gochecknoinits\n-    - exportloopref\n     - gocritic\n     - nakedret\n     - gosimple\n     - prealloc\n+\n   fast: false\n-  disable-all: true\n+\n \n run:\n-  output:\n-    format: tab\n-  skip-dirs:\n-    - vendor\n+  concurrency: 4\n \n issues:\n+  exclude-dirs:\n+    - vendor\n   exclude-rules:\n     - text: \"should have a package comment, unless it's in another file for this package\"\n       linters:\n         - golint\n+    - text: \"exitAfterDefer:\"\n+      linters:\n+        - gocritic\n+    - text: \"whyNoLint: include an explanation for nolint directive\"\n+      linters:\n+        - gocritic\n+    - text: \"go.mongodb.org/mongo-driver/bson/primitive.E\"\n+      linters:\n+        - govet\n+    - text: \"weak cryptographic primitive\"\n+      linters:\n+        - gosec\n+    - text: \"integer overflow conversion\"\n+      linters:\n+        - gosec\n+    - text: \"should have a package comment\"\n+      linters:\n+        - revive\n     - text: \"at least one file in a package should have a package comment\"\n       linters:\n         - stylecheck\n+    - text: \"commentedOutCode: may want to remove commented-out code\"\n+      linters:\n+        - gocritic\n+    - text: \"unnamedResult: consider giving a name to these results\"\n+      linters:\n+        - gocritic\n+    - text: \"var-naming: don't use an underscore in package name\"\n+      linters:\n+        - revive\n+    - text: \"should not use underscores in package names\"\n+      linters:\n+        - stylecheck\n+    - text: \"struct literal uses unkeyed fields\"\n+      linters:\n+        - govet\n+    - linters:\n+        - unparam\n+        - unused\n+        - revive\n+      path: _test\\.go$\n+      text: \"unused-parameter\"\n   exclude-use-default: false\n+"
    },
    {
      "sha": "91c94cb1beb4027070be86a83cca0b61b6b54718",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/CODEOWNERS",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FCODEOWNERS",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FCODEOWNERS",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FCODEOWNERS?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,5 @@\n+# These owners will be the default owners for everything in the repo.\n+# Unless a later match takes precedence, @umputun will be requested for\n+# review when someone opens a pull request.\n+\n+*       @umputun"
    },
    {
      "sha": "87494b8eb7655850ab00c80e0b50d9c03e8d1228",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/README.md",
      "status": "modified",
      "additions": 77,
      "deletions": 4,
      "changes": 81,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2FREADME.md?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -37,15 +37,16 @@ _Without `lgr.Caller*` it will drop `{caller}` part_\n - `lgr.Trace` - turn trace mode on to allow messages with \"TRACE\" abd \"DEBUG\" levels both (filtered otherwise)\n - `lgr.Out(io.Writer)` - sets the output writer, default `os.Stdout`\n - `lgr.Err(io.Writer)` - sets the error writer, default `os.Stderr`\n-- `lgr.CallerFile` - adds the caller file info\n-- `lgr.CallerFunc` - adds the caller function info\n-- `lgr.CallerPkg` - adds the caller package\n+- `lgr.CallerFile` - adds the caller file info (only affects lgr's native text format, not slog output)\n+- `lgr.CallerFunc` - adds the caller function info (only affects lgr's native text format, not slog output)\n+- `lgr.CallerPkg` - adds the caller package (only affects lgr's native text format, not slog output)\n - `lgr.LevelBraces` - wraps levels with \"[\" and \"]\"\n - `lgr.Msec` - adds milliseconds to timestamp\n - `lgr.Format` - sets a custom template, overwrite all other formatting modifiers.\n - `lgr.Secret(secret ...)` - sets list of the secrets to hide from the logging outputs.\n - `lgr.Map(mapper)` - sets mapper functions to change elements of the logging output based on levels.\n - `lgr.StackTraceOnError` - turns on stack trace for ERROR level.\n+- `lgr.SlogHandler(h slog.Handler)` - delegates logging to the provided slog handler.\n \n example: `l := lgr.New(lgr.Debug, lgr.Msec)`\n \n@@ -106,15 +107,87 @@ example with [fatih/color](https://github.com/fatih/color):\n ```\n ### adaptors\n \n-`lgr` logger can be converted to `io.Writer` or `*log.Logger`\n+`lgr` logger can be converted to `io.Writer`, `*log.Logger`, or `slog.Handler`\n \n - `lgr.ToWriter(l lgr.L, level string) io.Writer` - makes io.Writer forwarding write ops to underlying `lgr.L`\n - `lgr.ToStdLogger(l lgr.L, level string) *log.Logger` - makes standard logger on top of `lgr.L`\n+- `lgr.ToSlogHandler(l lgr.L) slog.Handler` - converts lgr.L to a slog.Handler for use with slog\n \n _`level` parameter is optional, if defined (non-empty) will enforce the level._\n \n - `lgr.SetupStdLogger(opts ...Option)` initializes std global logger (`log.std`) with lgr logger and given options. \n All standard methods like `log.Print`, `log.Println`, `log.Fatal` and so on will be forwarder to lgr.\n+- `lgr.SetupWithSlog(logger *slog.Logger)` sets up the global logger with a slog logger.\n+\n+### slog integration\n+\n+In addition to the standard logger interface, lgr provides seamless integration with Go's `log/slog` package:\n+\n+#### Using lgr with slog\n+\n+```go\n+// Create lgr logger\n+lgrLogger := lgr.New(lgr.Debug, lgr.Msec)\n+\n+// Convert to slog handler and create slog logger\n+handler := lgr.ToSlogHandler(lgrLogger)\n+logger := slog.New(handler)\n+\n+// Use standard slog API with lgr formatting\n+logger.Info(\"message\", \"key1\", \"value1\")\n+// Output: 2023/09/15 10:34:56.789 INFO  message key1=\"value1\" \n+```\n+\n+#### Using slog with lgr interface\n+\n+```go\n+// Create slog handler\n+jsonHandler := slog.NewJSONHandler(os.Stdout, nil)\n+\n+// Wrap it with lgr interface\n+logger := lgr.FromSlogHandler(jsonHandler)\n+\n+// Use lgr API with slog backend\n+logger.Logf(\"INFO message with %s\", \"structured data\")\n+// Output: {\"time\":\"2023-09-15T10:34:56.789Z\",\"level\":\"INFO\",\"msg\":\"message with structured data\"}\n+```\n+\n+#### Using slog directly in lgr\n+\n+```go\n+// Create a logger that uses slog directly\n+jsonHandler := slog.NewJSONHandler(os.Stdout, nil)\n+logger := lgr.New(lgr.SlogHandler(jsonHandler))\n+\n+// Use lgr API with slog backend\n+logger.Logf(\"INFO message\")\n+// Output: {\"time\":\"2023-09-15T10:34:56.789Z\",\"level\":\"INFO\",\"msg\":\"message\"}\n+```\n+\n+#### JSON output with caller information\n+\n+To get caller information in JSON output when using slog handlers, create the handler with `AddSource: true`:\n+\n+```go\n+// Create JSON handler with source information (caller info)\n+jsonHandler := slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{\n+    AddSource: true,  // This enables caller information in JSON output\n+})\n+\n+// Use handler with lgr\n+logger := lgr.New(lgr.SlogHandler(jsonHandler))\n+\n+logger.Logf(\"INFO message with caller info\")\n+// Output will include source file, line and function in JSON\n+```\n+\n+Note: The lgr caller options (`lgr.CallerFile`, `lgr.CallerFunc`, `lgr.CallerPkg`) only work with lgr's native text format\n+and don't affect JSON output from slog handlers. To include caller information in JSON logs:\n+\n+1. For slog JSON handlers: Create the handler with `AddSource: true` as shown above\n+2. For text-based logs: Use lgr's native caller options without slog integration\n+\n+This behavior is designed to respect each logging system's conventions for representing caller information.\n \n ### global logger\n "
    },
    {
      "sha": "11ecd0149a0bf1a401c496e865c8c22e9948dd54",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/interface.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Finterface.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Finterface.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Finterface.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -18,7 +18,7 @@ type Func func(format string, args ...interface{})\n func (f Func) Logf(format string, args ...interface{}) { f(format, args...) }\n \n // NoOp logger\n-var NoOp = Func(func(format string, args ...interface{}) {})\n+var NoOp = Func(func(format string, args ...interface{}) {}) //nolint:revive\n \n // Std logger sends to std default logger directly\n var Std = Func(func(format string, args ...interface{}) { stdlog.Printf(format, args...) })\n@@ -30,7 +30,7 @@ func Printf(format string, args ...interface{}) {\n \n // Print simplifies replacement of std logger\n func Print(line string) {\n-\tdef.logf(line)\n+\tdef.logf(line) //nolint:govet\n }\n \n // Fatalf simplifies replacement of std logger"
    },
    {
      "sha": "00cc0d9e94f77ecffb9fd3664ab46e0a853dc341",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/logger.go",
      "status": "modified",
      "additions": 34,
      "deletions": 12,
      "changes": 46,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Flogger.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Flogger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Flogger.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -11,8 +11,10 @@ package lgr\n \n import (\n \t\"bytes\"\n+\t\"context\"\n \t\"fmt\"\n \t\"io\"\n+\t\"log/slog\"\n \t\"os\"\n \t\"path\"\n \t\"regexp\"\n@@ -51,18 +53,19 @@ var (\n // Logger provided simple logger with basic support of levels. Thread safe\n type Logger struct {\n \t// set with Option calls\n-\tstdout, stderr io.Writer // destination writes for out and err\n-\tsameStream     bool      // stdout and stderr are the same stream\n-\tdbg            bool      // allows reporting for DEBUG level\n-\ttrace          bool      // allows reporting for TRACE and DEBUG levels\n-\tcallerFile     bool      // reports caller file with line number, i.e. foo/bar.go:89\n-\tcallerFunc     bool      // reports caller function name, i.e. bar.myFunc\n-\tcallerPkg      bool      // reports caller package name\n-\tlevelBraces    bool      // encloses level with [], i.e. [INFO]\n-\tcallerDepth    int       // how many stack frames to skip, relative to the real (reported) frame\n-\tformat         string    // layout template\n-\tsecrets        [][]byte  // sub-strings to secrets by matching\n-\tmapper         Mapper    // map (alter) output based on levels\n+\tstdout, stderr io.Writer    // destination writes for out and err\n+\tsameStream     bool         // stdout and stderr are the same stream\n+\tdbg            bool         // allows reporting for DEBUG level\n+\ttrace          bool         // allows reporting for TRACE and DEBUG levels\n+\tcallerFile     bool         // reports caller file with line number, i.e. foo/bar.go:89\n+\tcallerFunc     bool         // reports caller function name, i.e. bar.myFunc\n+\tcallerPkg      bool         // reports caller package name\n+\tlevelBraces    bool         // encloses level with [], i.e. [INFO]\n+\tcallerDepth    int          // how many stack frames to skip, relative to the real (reported) frame\n+\tformat         string       // layout template\n+\tsecrets        [][]byte     // sub-strings to secrets by matching\n+\tmapper         Mapper       // map (alter) output based on levels\n+\tslogHandler    slog.Handler // optional slog handler to delegate logging\n \n \t// internal use\n \tnow           nowFn\n@@ -161,6 +164,25 @@ func (l *Logger) logf(format string, args ...interface{}) {\n \t\treturn\n \t}\n \n+\t// if slog handler is set, use it\n+\tif l.slogHandler != nil {\n+\t\t// use NewRecord for consistency with adapter setup\n+\t\t// skip=0 because we don't need caller information from this context\n+\t\trecord := slog.NewRecord(l.now(), stringToLevel(lv), msg, 0)\n+\t\t_ = l.slogHandler.Handle(context.Background(), record)\n+\n+\t\t// handle FATAL and PANIC levels as they have special behavior\n+\t\tif lv == \"FATAL\" || lv == \"PANIC\" {\n+\t\t\tif lv == \"PANIC\" {\n+\t\t\t\t// print panic stack trace\n+\t\t\t\tstack := getDump()\n+\t\t\t\t_, _ = l.stderr.Write([]byte(fmt.Sprintf(\"\\n*** PANIC: %s\\n\\n%s\", msg, stack)))\n+\t\t\t}\n+\t\t\tl.fatal()\n+\t\t}\n+\t\treturn\n+\t}\n+\n \tvar ci callerInfo\n \tif l.callerOn { // optimization to avoid expensive caller evaluation if caller info not in the template\n \t\tci = l.reportCaller(l.callerDepth)"
    },
    {
      "sha": "5225d91ba80c2b5c749e48e0b347208ee001e6dd",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/options.go",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Foptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Foptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Foptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -2,6 +2,7 @@ package lgr\n \n import (\n \t\"io\"\n+\t\"log/slog\"\n \t\"strings\"\n )\n \n@@ -48,11 +49,13 @@ func Format(f string) Option {\n }\n \n // CallerFunc adds caller info with function name. Ignored if Format option used.\n+// Note: This option only affects lgr's native text format and is ignored when using SlogHandler.\n func CallerFunc(l *Logger) {\n \tl.callerFunc = true\n }\n \n // CallerPkg adds caller's package name. Ignored if Format option used.\n+// Note: This option only affects lgr's native text format and is ignored when using SlogHandler.\n func CallerPkg(l *Logger) {\n \tl.callerPkg = true\n }\n@@ -63,6 +66,7 @@ func LevelBraces(l *Logger) {\n }\n \n // CallerFile adds caller info with file, and line number. Ignored if Format option used.\n+// Note: This option only affects lgr's native text format and is ignored when using SlogHandler.\n func CallerFile(l *Logger) {\n \tl.callerFile = true\n }\n@@ -96,3 +100,34 @@ func Map(m Mapper) Option {\n func StackTraceOnError(l *Logger) {\n \tl.errorDump = true\n }\n+\n+// SlogHandler sets slog.Handler to delegate logging to. When using this option,\n+// the output format will be controlled by the slog.Handler provided, not by lgr's\n+// format options.\n+//\n+// IMPORTANT: When using lgr.SlogHandler:\n+//\n+//  1. To get caller information in JSON output, you must create the handler with\n+//     slog.HandlerOptions{AddSource: true}.\n+//\n+//  2. The lgr caller info options (lgr.CallerFile, lgr.CallerFunc) do NOT affect\n+//     JSON output from slog handlers. They only work with lgr's native text format.\n+//\n+// Example of correct setup for JSON with caller info:\n+//\n+//\t// create handler with AddSource enabled\n+//\tjsonHandler := slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{\n+//\t    AddSource: true,  // This enables caller information in JSON output\n+//\t})\n+//\n+//\t// use handler with lgr\n+//\tlogger := lgr.New(lgr.SlogHandler(jsonHandler))\n+//\n+// For text format with caller info, use lgr's native caller options:\n+//\n+//\tlogger := lgr.New(lgr.CallerFile, lgr.CallerFunc)\n+func SlogHandler(h slog.Handler) Option {\n+\treturn func(l *Logger) {\n+\t\tl.slogHandler = h\n+\t}\n+}"
    },
    {
      "sha": "0f930814fad407a8362e8d4d19a51aa32322b86f",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/slog.go",
      "status": "added",
      "additions": 220,
      "deletions": 0,
      "changes": 220,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Fslog.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Fslog.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Flgr%2Fslog.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,220 @@\n+package lgr\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log/slog\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"strings\"\n+\t\"time\"\n+)\n+\n+// ToSlogHandler converts lgr.L to slog.Handler\n+func ToSlogHandler(l L) slog.Handler {\n+\treturn &lgrSlogHandler{lgr: l}\n+}\n+\n+// FromSlogHandler creates lgr.L wrapper around slog.Handler\n+func FromSlogHandler(h slog.Handler) L {\n+\treturn &slogLgrAdapter{handler: h}\n+}\n+\n+// SetupWithSlog sets up the global logger with a slog logger\n+func SetupWithSlog(logger *slog.Logger) {\n+\tSetup(SlogHandler(logger.Handler()))\n+}\n+\n+// lgrSlogHandler implements slog.Handler using lgr.L\n+type lgrSlogHandler struct {\n+\tlgr    L\n+\tattrs  []slog.Attr\n+\tgroups []string\n+}\n+\n+// Enabled implements slog.Handler\n+func (h *lgrSlogHandler) Enabled(_ context.Context, level slog.Level) bool {\n+\tswitch {\n+\tcase level < slog.LevelInfo: // debug, Trace\n+\t\t// check if underlying lgr logger is configured to show debug\n+\t\t// since we can't directly query lgr's debug status, we assume enabled\n+\t\treturn true\n+\tdefault:\n+\t\treturn true\n+\t}\n+}\n+\n+// Handle implements slog.Handler\n+func (h *lgrSlogHandler) Handle(_ context.Context, record slog.Record) error {\n+\tlevel := levelToString(record.Level)\n+\n+\t// build message with attributes\n+\tmsg := record.Message\n+\n+\t// add time if record has it, otherwise current time is used by lgr\n+\tvar timeStr string\n+\tif !record.Time.IsZero() {\n+\t\ttimeStr = record.Time.Format(\"2006/01/02 15:04:05.000 \")\n+\t}\n+\n+\t// format attributes as key=value pairs\n+\tvar attrs strings.Builder\n+\tif len(h.attrs) > 0 || record.NumAttrs() > 0 {\n+\t\tattrs.WriteString(\" \")\n+\t}\n+\n+\t// add pre-defined attributes\n+\tfor _, attr := range h.attrs {\n+\t\tattrs.WriteString(formatAttr(attr, h.groups))\n+\t}\n+\n+\t// add record attributes\n+\trecord.Attrs(func(attr slog.Attr) bool {\n+\t\tattrs.WriteString(formatAttr(attr, h.groups))\n+\t\treturn true\n+\t})\n+\n+\t// combine everything into final message\n+\tlogMsg := fmt.Sprintf(\"%s%s %s%s\", timeStr, level, msg, attrs.String())\n+\th.lgr.Logf(logMsg)\n+\treturn nil\n+}\n+\n+// WithAttrs implements slog.Handler\n+func (h *lgrSlogHandler) WithAttrs(attrs []slog.Attr) slog.Handler {\n+\tnewHandler := &lgrSlogHandler{\n+\t\tlgr:    h.lgr,\n+\t\tattrs:  append(h.attrs, attrs...),\n+\t\tgroups: h.groups,\n+\t}\n+\treturn newHandler\n+}\n+\n+// WithGroup implements slog.Handler\n+func (h *lgrSlogHandler) WithGroup(name string) slog.Handler {\n+\tnewHandler := &lgrSlogHandler{\n+\t\tlgr:    h.lgr,\n+\t\tattrs:  h.attrs,\n+\t\tgroups: append(h.groups, name),\n+\t}\n+\treturn newHandler\n+}\n+\n+// slogLgrAdapter implements lgr.L using slog.Handler\n+type slogLgrAdapter struct {\n+\thandler slog.Handler\n+}\n+\n+// Logf implements lgr.L interface\n+func (a *slogLgrAdapter) Logf(format string, args ...interface{}) {\n+\t// parse log level from the beginning of the message\n+\tmsg := fmt.Sprintf(format, args...)\n+\tlevel, msg := extractLevel(msg)\n+\n+\t// create a record with caller information\n+\t// skip level is critical:\n+\t// - 0 = this line\n+\t// - 1 = this function (Logf)\n+\t// - 2 = caller of Logf (user code)\n+\t//\n+\t// note: We use PC=0 to ensure slog.Record.PC() returns 0,\n+\t// which causes slog to skip obtaining the caller info itself\n+\trecord := slog.NewRecord(time.Now(), stringToLevel(level), msg, 2)\n+\n+\t// we need to manually add the source information ourselves, since\n+\t// slog.Handler might have AddSource=true but won't get the caller\n+\t// right due to how we're adapting lgr → slog\n+\tpc, file, line, ok := runtime.Caller(2) // skip to caller of Logf\n+\tif ok {\n+\t\t// only add source info if we can find it\n+\t\tfuncName := runtime.FuncForPC(pc).Name()\n+\t\trecord.AddAttrs(\n+\t\t\tslog.Group(\"source\",\n+\t\t\t\tslog.String(\"function\", funcName),\n+\t\t\t\tslog.String(\"file\", file),\n+\t\t\t\tslog.Int(\"line\", line),\n+\t\t\t),\n+\t\t)\n+\t}\n+\n+\t// handle the record\n+\tif err := a.handler.Handle(context.Background(), record); err != nil {\n+\t\t// if handling fails, fallback to stderr\n+\t\tfmt.Fprintf(os.Stderr, \"slog handler error: %v\\n\", err)\n+\t}\n+}\n+\n+// Helper functions\n+\n+// levelToString converts slog.Level to string representation used by lgr\n+func levelToString(level slog.Level) string {\n+\tswitch {\n+\tcase level < slog.LevelInfo:\n+\t\tif level <= slog.LevelDebug-4 {\n+\t\t\treturn \"TRACE\"\n+\t\t}\n+\t\treturn \"DEBUG\"\n+\tcase level < slog.LevelWarn:\n+\t\treturn \"INFO\"\n+\tcase level < slog.LevelError:\n+\t\treturn \"WARN\"\n+\tdefault:\n+\t\treturn \"ERROR\"\n+\t}\n+}\n+\n+// stringToLevel converts lgr level string to slog.Level\n+func stringToLevel(level string) slog.Level {\n+\tswitch level {\n+\tcase \"TRACE\":\n+\t\treturn slog.LevelDebug - 4\n+\tcase \"DEBUG\":\n+\t\treturn slog.LevelDebug\n+\tcase \"INFO\":\n+\t\treturn slog.LevelInfo\n+\tcase \"WARN\":\n+\t\treturn slog.LevelWarn\n+\tcase \"ERROR\", \"PANIC\", \"FATAL\":\n+\t\treturn slog.LevelError\n+\tdefault:\n+\t\treturn slog.LevelInfo\n+\t}\n+}\n+\n+// extractLevel parses lgr-style log message to extract level prefix\n+func extractLevel(msg string) (level, message string) {\n+\tfor _, lvl := range levels {\n+\t\tprefix := lvl + \" \"\n+\t\tbracketPrefix := \"[\" + lvl + \"] \"\n+\n+\t\tif strings.HasPrefix(msg, prefix) {\n+\t\t\treturn lvl, strings.TrimPrefix(msg, prefix)\n+\t\t}\n+\t\tif strings.HasPrefix(msg, bracketPrefix) {\n+\t\t\treturn lvl, strings.TrimPrefix(msg, bracketPrefix)\n+\t\t}\n+\t}\n+\n+\treturn \"INFO\", msg\n+}\n+\n+// formatAttr converts slog.Attr to string representation\n+func formatAttr(attr slog.Attr, groups []string) string {\n+\tif attr.Equal(slog.Attr{}) {\n+\t\treturn \"\"\n+\t}\n+\n+\tkey := attr.Key\n+\tif len(groups) > 0 {\n+\t\tkey = strings.Join(groups, \".\") + \".\" + key\n+\t}\n+\n+\tval := attr.Value.String()\n+\n+\t// handle string values specially by quoting them\n+\tif attr.Value.Kind() == slog.KindString {\n+\t\tval = fmt.Sprintf(\"%q\", attr.Value.String())\n+\t}\n+\n+\treturn fmt.Sprintf(\"%s=%s \", key, val)\n+}"
    },
    {
      "sha": "eb7a95250f75295953f5bad7eecf183194bb14ad",
      "filename": "backend/vendor/github.com/go-pkgz/rest/realip/real.go",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -45,7 +45,8 @@ func Get(r *http.Request) (string, error) {\n \t\t\tif firstIP == \"\" && realIP != nil {\n \t\t\t\tfirstIP = ip\n \t\t\t}\n-\t\t\tif !realIP.IsGlobalUnicast() || isPrivateSubnet(realIP) {\n+\t\t\t// Guard against nil realIP\n+\t\t\tif realIP == nil || !realIP.IsGlobalUnicast() || isPrivateSubnet(realIP) {\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\treturn ip, nil\n@@ -56,22 +57,30 @@ func Get(r *http.Request) (string, error) {\n \t\treturn firstIP, nil\n \t}\n \n-\tip, _, err := net.SplitHostPort(r.RemoteAddr)\n-\tif err != nil {\n-\t\treturn \"\", fmt.Errorf(\"can't parse ip %q: %w\", r.RemoteAddr, err)\n+\t// handle RemoteAddr which may be just an IP or IP:port\n+\tremoteIP := r.RemoteAddr\n+\n+\t// try to extract host from host:port format\n+\thost, _, err := net.SplitHostPort(remoteIP)\n+\tif err == nil {\n+\t\tremoteIP = host\n \t}\n-\tif netIP := net.ParseIP(ip); netIP == nil {\n-\t\treturn \"\", fmt.Errorf(\"no valid ip found\")\n+\n+\t// at this point remoteIP could be either:\n+\t// 1. the host part extracted from host:port\n+\t// 2. yhe original RemoteAddr if it doesn't contain a port\n+\n+\t// try to parse it as a valid IP address\n+\tif netIP := net.ParseIP(remoteIP); netIP == nil {\n+\t\treturn \"\", fmt.Errorf(\"no valid ip found in %q\", r.RemoteAddr)\n \t}\n \n-\treturn ip, nil\n+\treturn remoteIP, nil\n }\n \n // isPrivateSubnet - check to see if this ip is in a private subnet\n func isPrivateSubnet(ipAddress net.IP) bool {\n-\n-\t// inRange - check to see if a given ip address is within a range given\n-\tinRange := func(r ipRange, ipAddress net.IP) bool {\n+\tinRange := func(r ipRange, ipAddress net.IP) bool { // check to see if a given ip address is within a range given\n \t\t// ensure the IPs are in the same format for comparison\n \t\tipAddress = ipAddress.To16()\n \t\tr.start = r.start.To16()"
    },
    {
      "sha": "fd191f78c7f8725956d6da198c657c812334cccd",
      "filename": "backend/vendor/github.com/golang/snappy/README",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2FREADME",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2FREADME",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2FREADME?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1,8 +1,13 @@\n The Snappy compression format in the Go programming language.\n \n-To download and install from source:\n+To use as a library:\n $ go get github.com/golang/snappy\n \n+To use as a binary:\n+$ go install github.com/golang/snappy/cmd/snappytool@latest\n+$ cat decoded | ~/go/bin/snappytool -e > encoded\n+$ cat encoded | ~/go/bin/snappytool -d > decoded\n+\n Unless otherwise noted, the Snappy-Go source files are distributed\n under the BSD-style license found in the LICENSE file.\n "
    },
    {
      "sha": "f0c876a248469054771fdc31f312faf43978127d",
      "filename": "backend/vendor/github.com/golang/snappy/encode_arm64.s",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2Fencode_arm64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2Fencode_arm64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgolang%2Fsnappy%2Fencode_arm64.s?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -27,7 +27,7 @@\n // The unusual register allocation of local variables, such as R10 for the\n // source pointer, matches the allocation used at the call site in encodeBlock,\n // which makes it easier to manually inline this function.\n-TEXT ·emitLiteral(SB), NOSPLIT, $32-56\n+TEXT ·emitLiteral(SB), NOSPLIT, $40-56\n \tMOVD dst_base+0(FP), R8\n \tMOVD lit_base+24(FP), R10\n \tMOVD lit_len+32(FP), R3\n@@ -261,7 +261,7 @@ extendMatchEnd:\n // \"var table [maxTableSize]uint16\" takes up 32768 bytes of stack space. An\n // extra 64 bytes, to call other functions, and an extra 64 bytes, to spill\n // local variables (registers) during calls gives 32768 + 64 + 64 = 32896.\n-TEXT ·encodeBlock(SB), 0, $32896-56\n+TEXT ·encodeBlock(SB), 0, $32904-56\n \tMOVD dst_base+0(FP), R8\n \tMOVD src_base+24(FP), R7\n \tMOVD src_len+32(FP), R14"
    },
    {
      "sha": "244ee19c4bfa19905577ef65a325a120254f0273",
      "filename": "backend/vendor/github.com/klauspost/compress/README.md",
      "status": "modified",
      "additions": 45,
      "deletions": 95,
      "changes": 140,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -14,8 +14,34 @@ This package provides various compression algorithms.\n [![Go](https://github.com/klauspost/compress/actions/workflows/go.yml/badge.svg)](https://github.com/klauspost/compress/actions/workflows/go.yml)\r\n [![Sourcegraph Badge](https://sourcegraph.com/github.com/klauspost/compress/-/badge.svg)](https://sourcegraph.com/github.com/klauspost/compress?badge)\r\n \r\n+# package usage\r\n+\r\n+Use `go get github.com/klauspost/compress@latest` to add it to your project.\r\n+\r\n+This package will support the current Go version and 2 versions back.\r\n+\r\n+* Use the `nounsafe` tag to disable all use of the \"unsafe\" package.\r\n+* Use the `noasm` tag to disable all assembly across packages.\r\n+\r\n+Use the links above for more information on each.\r\n+\r\n # changelog\r\n \r\n+* Feb 19th, 2025 - [1.18.0](https://github.com/klauspost/compress/releases/tag/v1.18.0)\r\n+  * Add unsafe little endian loaders https://github.com/klauspost/compress/pull/1036\r\n+  * fix: check `r.err != nil` but return a nil value error `err` by @alingse in https://github.com/klauspost/compress/pull/1028\r\n+  * flate: Simplify L4-6 loading https://github.com/klauspost/compress/pull/1043\r\n+  * flate: Simplify matchlen (remove asm) https://github.com/klauspost/compress/pull/1045\r\n+  * s2: Improve small block compression speed w/o asm https://github.com/klauspost/compress/pull/1048\r\n+  * flate: Fix matchlen L5+L6 https://github.com/klauspost/compress/pull/1049\r\n+  * flate: Cleanup & reduce casts https://github.com/klauspost/compress/pull/1050\r\n+\r\n+* Oct 11th, 2024 - [1.17.11](https://github.com/klauspost/compress/releases/tag/v1.17.11)\r\n+  * zstd: Fix extra CRC written with multiple Close calls https://github.com/klauspost/compress/pull/1017\r\n+  * s2: Don't use stack for index tables https://github.com/klauspost/compress/pull/1014\r\n+  * gzhttp: No content-type on no body response code by @juliens in https://github.com/klauspost/compress/pull/1011\r\n+  * gzhttp: Do not set the content-type when response has no body by @kevinpollet in https://github.com/klauspost/compress/pull/1013\r\n+\r\n * Sep 23rd, 2024 - [1.17.10](https://github.com/klauspost/compress/releases/tag/v1.17.10)\r\n \t* gzhttp: Add TransportAlwaysDecompress option. https://github.com/klauspost/compress/pull/978\r\n \t* gzhttp: Add supported decompress request body by @mirecl in https://github.com/klauspost/compress/pull/1002\r\n@@ -65,9 +91,9 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t* zstd: Fix rare *CORRUPTION* output in \"best\" mode. See https://github.com/klauspost/compress/pull/876\r\n \r\n * Oct 14th, 2023 - [v1.17.1](https://github.com/klauspost/compress/releases/tag/v1.17.1)\r\n-\t* s2: Fix S2 \"best\" dictionary wrong encoding by @klauspost in https://github.com/klauspost/compress/pull/871\r\n+\t* s2: Fix S2 \"best\" dictionary wrong encoding https://github.com/klauspost/compress/pull/871\r\n \t* flate: Reduce allocations in decompressor and minor code improvements by @fakefloordiv in https://github.com/klauspost/compress/pull/869\r\n-\t* s2: Fix EstimateBlockSize on 6&7 length input by @klauspost in https://github.com/klauspost/compress/pull/867\r\n+\t* s2: Fix EstimateBlockSize on 6&7 length input https://github.com/klauspost/compress/pull/867\r\n \r\n * Sept 19th, 2023 - [v1.17.0](https://github.com/klauspost/compress/releases/tag/v1.17.0)\r\n \t* Add experimental dictionary builder  https://github.com/klauspost/compress/pull/853\r\n@@ -124,7 +150,7 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t<summary>See changes to v1.15.x</summary>\r\n \t\r\n * Jan 21st, 2023 (v1.15.15)\r\n-\t* deflate: Improve level 7-9 by @klauspost in https://github.com/klauspost/compress/pull/739\r\n+\t* deflate: Improve level 7-9 https://github.com/klauspost/compress/pull/739\r\n \t* zstd: Add delta encoding support by @greatroar in https://github.com/klauspost/compress/pull/728\r\n \t* zstd: Various speed improvements by @greatroar https://github.com/klauspost/compress/pull/741 https://github.com/klauspost/compress/pull/734 https://github.com/klauspost/compress/pull/736 https://github.com/klauspost/compress/pull/744 https://github.com/klauspost/compress/pull/743 https://github.com/klauspost/compress/pull/745\r\n \t* gzhttp: Add SuffixETag() and DropETag() options to prevent ETag collisions on compressed responses by @willbicks in https://github.com/klauspost/compress/pull/740\r\n@@ -167,7 +193,7 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \r\n \t* zstd: Fix decoder crash on amd64 (no BMI) on invalid input https://github.com/klauspost/compress/pull/645\r\n \t* zstd: Disable decoder extended memory copies (amd64) due to possible crashes https://github.com/klauspost/compress/pull/644\r\n-\t* zstd: Allow single segments up to \"max decoded size\" by @klauspost in https://github.com/klauspost/compress/pull/643\r\n+\t* zstd: Allow single segments up to \"max decoded size\" https://github.com/klauspost/compress/pull/643\r\n \r\n * July 13, 2022 (v1.15.8)\r\n \r\n@@ -209,7 +235,7 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t* zstd: Speed up when WithDecoderLowmem(false) https://github.com/klauspost/compress/pull/599\r\n \t* zstd: faster next state update in BMI2 version of decode by @WojciechMula in https://github.com/klauspost/compress/pull/593\r\n \t* huff0: Do not check max size when reading table. https://github.com/klauspost/compress/pull/586\r\n-\t* flate: Inplace hashing for level 7-9 by @klauspost in https://github.com/klauspost/compress/pull/590\r\n+\t* flate: Inplace hashing for level 7-9 https://github.com/klauspost/compress/pull/590\r\n \r\n \r\n * May 11, 2022 (v1.15.4)\r\n@@ -236,12 +262,12 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t* zstd: Add stricter block size checks in [#523](https://github.com/klauspost/compress/pull/523)\r\n \r\n * Mar 3, 2022 (v1.15.0)\r\n-\t* zstd: Refactor decoder by @klauspost in [#498](https://github.com/klauspost/compress/pull/498)\r\n-\t* zstd: Add stream encoding without goroutines by @klauspost in [#505](https://github.com/klauspost/compress/pull/505)\r\n+\t* zstd: Refactor decoder [#498](https://github.com/klauspost/compress/pull/498)\r\n+\t* zstd: Add stream encoding without goroutines [#505](https://github.com/klauspost/compress/pull/505)\r\n \t* huff0: Prevent single blocks exceeding 16 bits by @klauspost in[#507](https://github.com/klauspost/compress/pull/507)\r\n-\t* flate: Inline literal emission by @klauspost in [#509](https://github.com/klauspost/compress/pull/509)\r\n-\t* gzhttp: Add zstd to transport by @klauspost in [#400](https://github.com/klauspost/compress/pull/400)\r\n-\t* gzhttp: Make content-type optional by @klauspost in [#510](https://github.com/klauspost/compress/pull/510)\r\n+\t* flate: Inline literal emission [#509](https://github.com/klauspost/compress/pull/509)\r\n+\t* gzhttp: Add zstd to transport [#400](https://github.com/klauspost/compress/pull/400)\r\n+\t* gzhttp: Make content-type optional [#510](https://github.com/klauspost/compress/pull/510)\r\n \r\n Both compression and decompression now supports \"synchronous\" stream operations. This means that whenever \"concurrency\" is set to 1, they will operate without spawning goroutines.\r\n \r\n@@ -258,7 +284,7 @@ While the release has been extensively tested, it is recommended to testing when\n \t* flate: Fix rare huffman only (-2) corruption. [#503](https://github.com/klauspost/compress/pull/503)\r\n \t* zip: Update deprecated CreateHeaderRaw to correctly call CreateRaw by @saracen in [#502](https://github.com/klauspost/compress/pull/502)\r\n \t* zip: don't read data descriptor early by @saracen in [#501](https://github.com/klauspost/compress/pull/501)  #501\r\n-\t* huff0: Use static decompression buffer up to 30% faster by @klauspost in [#499](https://github.com/klauspost/compress/pull/499) [#500](https://github.com/klauspost/compress/pull/500)\r\n+\t* huff0: Use static decompression buffer up to 30% faster [#499](https://github.com/klauspost/compress/pull/499) [#500](https://github.com/klauspost/compress/pull/500)\r\n \r\n * Feb 17, 2022 (v1.14.3)\r\n \t* flate: Improve fastest levels compression speed ~10% more throughput. [#482](https://github.com/klauspost/compress/pull/482) [#489](https://github.com/klauspost/compress/pull/489) [#490](https://github.com/klauspost/compress/pull/490) [#491](https://github.com/klauspost/compress/pull/491) [#494](https://github.com/klauspost/compress/pull/494)  [#478](https://github.com/klauspost/compress/pull/478)\r\n@@ -565,12 +591,14 @@ While the release has been extensively tested, it is recommended to testing when\n \r\n The packages are drop-in replacements for standard libraries. Simply replace the import path to use them:\r\n \r\n-| old import         | new import                              | Documentation\r\n-|--------------------|-----------------------------------------|--------------------|\r\n-| `compress/gzip`    | `github.com/klauspost/compress/gzip`    | [gzip](https://pkg.go.dev/github.com/klauspost/compress/gzip?tab=doc)\r\n-| `compress/zlib`    | `github.com/klauspost/compress/zlib`    | [zlib](https://pkg.go.dev/github.com/klauspost/compress/zlib?tab=doc)\r\n-| `archive/zip`      | `github.com/klauspost/compress/zip`     | [zip](https://pkg.go.dev/github.com/klauspost/compress/zip?tab=doc)\r\n-| `compress/flate`   | `github.com/klauspost/compress/flate`   | [flate](https://pkg.go.dev/github.com/klauspost/compress/flate?tab=doc)\r\n+Typical speed is about 2x of the standard library packages.\r\n+\r\n+| old import       | new import                            | Documentation                                                           |\r\n+|------------------|---------------------------------------|-------------------------------------------------------------------------|\r\n+| `compress/gzip`  | `github.com/klauspost/compress/gzip`  | [gzip](https://pkg.go.dev/github.com/klauspost/compress/gzip?tab=doc)   |\r\n+| `compress/zlib`  | `github.com/klauspost/compress/zlib`  | [zlib](https://pkg.go.dev/github.com/klauspost/compress/zlib?tab=doc)   |\r\n+| `archive/zip`    | `github.com/klauspost/compress/zip`   | [zip](https://pkg.go.dev/github.com/klauspost/compress/zip?tab=doc)     |\r\n+| `compress/flate` | `github.com/klauspost/compress/flate` | [flate](https://pkg.go.dev/github.com/klauspost/compress/flate?tab=doc) |\r\n \r\n * Optimized [deflate](https://godoc.org/github.com/klauspost/compress/flate) packages which can be used as a dropin replacement for [gzip](https://godoc.org/github.com/klauspost/compress/gzip), [zip](https://godoc.org/github.com/klauspost/compress/zip) and [zlib](https://godoc.org/github.com/klauspost/compress/zlib).\r\n \r\n@@ -625,84 +653,6 @@ This will only use up to 4KB in memory when the writer is idle.\n Compression is almost always worse than the fastest compression level \r\n and each write will allocate (a little) memory. \r\n \r\n-# Performance Update 2018\r\n-\r\n-It has been a while since we have been looking at the speed of this package compared to the standard library, so I thought I would re-do my tests and give some overall recommendations based on the current state. All benchmarks have been performed with Go 1.10 on my Desktop Intel(R) Core(TM) i7-2600 CPU @3.40GHz. Since I last ran the tests, I have gotten more RAM, which means tests with big files are no longer limited by my SSD.\r\n-\r\n-The raw results are in my [updated spreadsheet](https://docs.google.com/spreadsheets/d/1nuNE2nPfuINCZJRMt6wFWhKpToF95I47XjSsc-1rbPQ/edit?usp=sharing). Due to cgo changes and upstream updates i could not get the cgo version of gzip to compile. Instead I included the [zstd](https://github.com/datadog/zstd) cgo implementation. If I get cgo gzip to work again, I might replace the results in the sheet.\r\n-\r\n-The columns to take note of are: *MB/s* - the throughput. *Reduction* - the data size reduction in percent of the original. *Rel Speed* relative speed compared to the standard library at the same level. *Smaller* - how many percent smaller is the compressed output compared to stdlib. Negative means the output was bigger. *Loss* means the loss (or gain) in compression as a percentage difference of the input.\r\n-\r\n-The `gzstd` (standard library gzip) and `gzkp` (this package gzip) only uses one CPU core. [`pgzip`](https://github.com/klauspost/pgzip), [`bgzf`](https://github.com/biogo/hts/tree/master/bgzf) uses all 4 cores. [`zstd`](https://github.com/DataDog/zstd) uses one core, and is a beast (but not Go, yet).\r\n-\r\n-\r\n-## Overall differences.\r\n-\r\n-There appears to be a roughly 5-10% speed advantage over the standard library when comparing at similar compression levels.\r\n-\r\n-The biggest difference you will see is the result of [re-balancing](https://blog.klauspost.com/rebalancing-deflate-compression-levels/) the compression levels. I wanted by library to give a smoother transition between the compression levels than the standard library.\r\n-\r\n-This package attempts to provide a more smooth transition, where \"1\" is taking a lot of shortcuts, \"5\" is the reasonable trade-off and \"9\" is the \"give me the best compression\", and the values in between gives something reasonable in between. The standard library has big differences in levels 1-4, but levels 5-9 having no significant gains - often spending a lot more time than can be justified by the achieved compression.\r\n-\r\n-There are links to all the test data in the [spreadsheet](https://docs.google.com/spreadsheets/d/1nuNE2nPfuINCZJRMt6wFWhKpToF95I47XjSsc-1rbPQ/edit?usp=sharing) in the top left field on each tab.\r\n-\r\n-## Web Content\r\n-\r\n-This test set aims to emulate typical use in a web server. The test-set is 4GB data in 53k files, and is a mixture of (mostly) HTML, JS, CSS.\r\n-\r\n-Since level 1 and 9 are close to being the same code, they are quite close. But looking at the levels in-between the differences are quite big.\r\n-\r\n-Looking at level 6, this package is 88% faster, but will output about 6% more data. For a web server, this means you can serve 88% more data, but have to pay for 6% more bandwidth. You can draw your own conclusions on what would be the most expensive for your case.\r\n-\r\n-## Object files\r\n-\r\n-This test is for typical data files stored on a server. In this case it is a collection of Go precompiled objects. They are very compressible.\r\n-\r\n-The picture is similar to the web content, but with small differences since this is very compressible. Levels 2-3 offer good speed, but is sacrificing quite a bit of compression. \r\n-\r\n-The standard library seems suboptimal on level 3 and 4 - offering both worse compression and speed than level 6 & 7 of this package respectively.\r\n-\r\n-## Highly Compressible File\r\n-\r\n-This is a JSON file with very high redundancy. The reduction starts at 95% on level 1, so in real life terms we are dealing with something like a highly redundant stream of data, etc.\r\n-\r\n-It is definitely visible that we are dealing with specialized content here, so the results are very scattered. This package does not do very well at levels 1-4, but picks up significantly at level 5 and levels 7 and 8 offering great speed for the achieved compression.\r\n-\r\n-So if you know you content is extremely compressible you might want to go slightly higher than the defaults. The standard library has a huge gap between levels 3 and 4 in terms of speed (2.75x slowdown), so it offers little \"middle ground\".\r\n-\r\n-## Medium-High Compressible\r\n-\r\n-This is a pretty common test corpus: [enwik9](http://mattmahoney.net/dc/textdata.html). It contains the first 10^9 bytes of the English Wikipedia dump on Mar. 3, 2006. This is a very good test of typical text based compression and more data heavy streams.\r\n-\r\n-We see a similar picture here as in \"Web Content\". On equal levels some compression is sacrificed for more speed. Level 5 seems to be the best trade-off between speed and size, beating stdlib level 3 in both.\r\n-\r\n-## Medium Compressible\r\n-\r\n-I will combine two test sets, one [10GB file set](http://mattmahoney.net/dc/10gb.html) and a VM disk image (~8GB). Both contain different data types and represent a typical backup scenario.\r\n-\r\n-The most notable thing is how quickly the standard library drops to very low compression speeds around level 5-6 without any big gains in compression. Since this type of data is fairly common, this does not seem like good behavior.\r\n-\r\n-\r\n-## Un-compressible Content\r\n-\r\n-This is mainly a test of how good the algorithms are at detecting un-compressible input. The standard library only offers this feature with very conservative settings at level 1. Obviously there is no reason for the algorithms to try to compress input that cannot be compressed.  The only downside is that it might skip some compressible data on false detections.\r\n-\r\n-\r\n-## Huffman only compression\r\n-\r\n-This compression library adds a special compression level, named `HuffmanOnly`, which allows near linear time compression. This is done by completely disabling matching of previous data, and only reduce the number of bits to represent each character. \r\n-\r\n-This means that often used characters, like 'e' and ' ' (space) in text use the fewest bits to represent, and rare characters like '¤' takes more bits to represent. For more information see [wikipedia](https://en.wikipedia.org/wiki/Huffman_coding) or this nice [video](https://youtu.be/ZdooBTdW5bM).\r\n-\r\n-Since this type of compression has much less variance, the compression speed is mostly unaffected by the input data, and is usually more than *180MB/s* for a single core.\r\n-\r\n-The downside is that the compression ratio is usually considerably worse than even the fastest conventional compression. The compression ratio can never be better than 8:1 (12.5%). \r\n-\r\n-The linear time compression can be used as a \"better than nothing\" mode, where you cannot risk the encoder to slow down on some content. For comparison, the size of the \"Twain\" text is *233460 bytes* (+29% vs. level 1) and encode speed is 144MB/s (4.5x level 1). So in this case you trade a 30% size increase for a 4 times speedup.\r\n-\r\n-For more information see my blog post on [Fast Linear Time Compression](http://blog.klauspost.com/constant-time-gzipzip-compression/).\r\n-\r\n-This is implemented on Go 1.7 as \"Huffman Only\" mode, though not exposed for gzip.\r\n \r\n # Other packages\r\n \r"
    },
    {
      "sha": "bfc7a523dee7d4813b76831e67c5340f746d9072",
      "filename": "backend/vendor/github.com/klauspost/compress/huff0/bitreader.go",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fbitreader.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fbitreader.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fbitreader.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -6,10 +6,11 @@\n package huff0\n \n import (\n-\t\"encoding/binary\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\n+\t\"github.com/klauspost/compress/internal/le\"\n )\n \n // bitReader reads a bitstream in reverse.\n@@ -46,7 +47,7 @@ func (b *bitReaderBytes) init(in []byte) error {\n \treturn nil\n }\n \n-// peekBitsFast requires that at least one bit is requested every time.\n+// peekByteFast requires that at least one byte is requested every time.\n // There are no checks if the buffer is filled.\n func (b *bitReaderBytes) peekByteFast() uint8 {\n \tgot := uint8(b.value >> 56)\n@@ -66,8 +67,7 @@ func (b *bitReaderBytes) fillFast() {\n \t}\n \n \t// 2 bounds checks.\n-\tv := b.in[b.off-4 : b.off]\n-\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n+\tlow := le.Load32(b.in, b.off-4)\n \tb.value |= uint64(low) << (b.bitsRead - 32)\n \tb.bitsRead -= 32\n \tb.off -= 4\n@@ -76,7 +76,7 @@ func (b *bitReaderBytes) fillFast() {\n // fillFastStart() assumes the bitReaderBytes is empty and there is at least 8 bytes to read.\n func (b *bitReaderBytes) fillFastStart() {\n \t// Do single re-slice to avoid bounds checks.\n-\tb.value = binary.LittleEndian.Uint64(b.in[b.off-8:])\n+\tb.value = le.Load64(b.in, b.off-8)\n \tb.bitsRead = 0\n \tb.off -= 8\n }\n@@ -86,9 +86,8 @@ func (b *bitReaderBytes) fill() {\n \tif b.bitsRead < 32 {\n \t\treturn\n \t}\n-\tif b.off > 4 {\n-\t\tv := b.in[b.off-4 : b.off]\n-\t\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n+\tif b.off >= 4 {\n+\t\tlow := le.Load32(b.in, b.off-4)\n \t\tb.value |= uint64(low) << (b.bitsRead - 32)\n \t\tb.bitsRead -= 32\n \t\tb.off -= 4\n@@ -175,18 +174,15 @@ func (b *bitReaderShifted) fillFast() {\n \t\treturn\n \t}\n \n-\t// 2 bounds checks.\n-\tv := b.in[b.off-4 : b.off]\n-\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n+\tlow := le.Load32(b.in, b.off-4)\n \tb.value |= uint64(low) << ((b.bitsRead - 32) & 63)\n \tb.bitsRead -= 32\n \tb.off -= 4\n }\n \n // fillFastStart() assumes the bitReaderShifted is empty and there is at least 8 bytes to read.\n func (b *bitReaderShifted) fillFastStart() {\n-\t// Do single re-slice to avoid bounds checks.\n-\tb.value = binary.LittleEndian.Uint64(b.in[b.off-8:])\n+\tb.value = le.Load64(b.in, b.off-8)\n \tb.bitsRead = 0\n \tb.off -= 8\n }\n@@ -197,8 +193,7 @@ func (b *bitReaderShifted) fill() {\n \t\treturn\n \t}\n \tif b.off > 4 {\n-\t\tv := b.in[b.off-4 : b.off]\n-\t\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n+\t\tlow := le.Load32(b.in, b.off-4)\n \t\tb.value |= uint64(low) << ((b.bitsRead - 32) & 63)\n \t\tb.bitsRead -= 32\n \t\tb.off -= 4"
    },
    {
      "sha": "e54909e16fc91aa35b65831f2d2fa44da0b81d60",
      "filename": "backend/vendor/github.com/klauspost/compress/internal/le/le.go",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Fle.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Fle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Fle.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,5 @@\n+package le\n+\n+type Indexer interface {\n+\tint | int8 | int16 | int32 | int64 | uint | uint8 | uint16 | uint32 | uint64\n+}"
    },
    {
      "sha": "0cfb5c0e27851250fc6549b5bb0e613da559b97f",
      "filename": "backend/vendor/github.com/klauspost/compress/internal/le/unsafe_disabled.go",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_disabled.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_disabled.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_disabled.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,42 @@\n+//go:build !(amd64 || arm64 || ppc64le || riscv64) || nounsafe || purego || appengine\n+\n+package le\n+\n+import (\n+\t\"encoding/binary\"\n+)\n+\n+// Load8 will load from b at index i.\n+func Load8[I Indexer](b []byte, i I) byte {\n+\treturn b[i]\n+}\n+\n+// Load16 will load from b at index i.\n+func Load16[I Indexer](b []byte, i I) uint16 {\n+\treturn binary.LittleEndian.Uint16(b[i:])\n+}\n+\n+// Load32 will load from b at index i.\n+func Load32[I Indexer](b []byte, i I) uint32 {\n+\treturn binary.LittleEndian.Uint32(b[i:])\n+}\n+\n+// Load64 will load from b at index i.\n+func Load64[I Indexer](b []byte, i I) uint64 {\n+\treturn binary.LittleEndian.Uint64(b[i:])\n+}\n+\n+// Store16 will store v at b.\n+func Store16(b []byte, v uint16) {\n+\tbinary.LittleEndian.PutUint16(b, v)\n+}\n+\n+// Store32 will store v at b.\n+func Store32(b []byte, v uint32) {\n+\tbinary.LittleEndian.PutUint32(b, v)\n+}\n+\n+// Store64 will store v at b.\n+func Store64(b []byte, v uint64) {\n+\tbinary.LittleEndian.PutUint64(b, v)\n+}"
    },
    {
      "sha": "ada45cd909e130887e361b4b4987cc87c227183f",
      "filename": "backend/vendor/github.com/klauspost/compress/internal/le/unsafe_enabled.go",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_enabled.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_enabled.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Finternal%2Fle%2Funsafe_enabled.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,55 @@\n+// We enable 64 bit LE platforms:\n+\n+//go:build (amd64 || arm64 || ppc64le || riscv64) && !nounsafe && !purego && !appengine\n+\n+package le\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+// Load8 will load from b at index i.\n+func Load8[I Indexer](b []byte, i I) byte {\n+\t//return binary.LittleEndian.Uint16(b[i:])\n+\t//return *(*uint16)(unsafe.Pointer(&b[i]))\n+\treturn *(*byte)(unsafe.Add(unsafe.Pointer(unsafe.SliceData(b)), i))\n+}\n+\n+// Load16 will load from b at index i.\n+func Load16[I Indexer](b []byte, i I) uint16 {\n+\t//return binary.LittleEndian.Uint16(b[i:])\n+\t//return *(*uint16)(unsafe.Pointer(&b[i]))\n+\treturn *(*uint16)(unsafe.Add(unsafe.Pointer(unsafe.SliceData(b)), i))\n+}\n+\n+// Load32 will load from b at index i.\n+func Load32[I Indexer](b []byte, i I) uint32 {\n+\t//return binary.LittleEndian.Uint32(b[i:])\n+\t//return *(*uint32)(unsafe.Pointer(&b[i]))\n+\treturn *(*uint32)(unsafe.Add(unsafe.Pointer(unsafe.SliceData(b)), i))\n+}\n+\n+// Load64 will load from b at index i.\n+func Load64[I Indexer](b []byte, i I) uint64 {\n+\t//return binary.LittleEndian.Uint64(b[i:])\n+\t//return *(*uint64)(unsafe.Pointer(&b[i]))\n+\treturn *(*uint64)(unsafe.Add(unsafe.Pointer(unsafe.SliceData(b)), i))\n+}\n+\n+// Store16 will store v at b.\n+func Store16(b []byte, v uint16) {\n+\t//binary.LittleEndian.PutUint16(b, v)\n+\t*(*uint16)(unsafe.Pointer(unsafe.SliceData(b))) = v\n+}\n+\n+// Store32 will store v at b.\n+func Store32(b []byte, v uint32) {\n+\t//binary.LittleEndian.PutUint32(b, v)\n+\t*(*uint32)(unsafe.Pointer(unsafe.SliceData(b))) = v\n+}\n+\n+// Store64 will store v at b.\n+func Store64(b []byte, v uint64) {\n+\t//binary.LittleEndian.PutUint64(b, v)\n+\t*(*uint64)(unsafe.Pointer(unsafe.SliceData(b))) = v\n+}"
    },
    {
      "sha": "81bda5e2946a3a754fb02a6c3754786aaeb70ce0",
      "filename": "backend/vendor/github.com/klauspost/compress/s2sx.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fs2sx.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fs2sx.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fs2sx.mod?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1,4 +1,3 @@\n module github.com/klauspost/compress\n \n-go 1.19\n-\n+go 1.22"
    },
    {
      "sha": "c11d7fa28e32dcfd6065511fd7dd196247cb90b5",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2FREADME.md?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -6,7 +6,7 @@ A high performance compression algorithm is implemented. For now focused on spee\n \n This package provides [compression](#Compressor) to and [decompression](#Decompressor) of Zstandard content. \n \n-This package is pure Go and without use of \"unsafe\". \n+This package is pure Go. Use `noasm` and `nounsafe` to disable relevant features.\n \n The `zstd` package is provided as open source software using a Go standard license.\n "
    },
    {
      "sha": "d41e3e1709b825b0bc7a8718a531e77ad402d700",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/bitreader.go",
      "status": "modified",
      "additions": 18,
      "deletions": 19,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fbitreader.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fbitreader.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fbitreader.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -5,11 +5,12 @@\n package zstd\n \n import (\n-\t\"encoding/binary\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"math/bits\"\n+\n+\t\"github.com/klauspost/compress/internal/le\"\n )\n \n // bitReader reads a bitstream in reverse.\n@@ -18,6 +19,7 @@ import (\n type bitReader struct {\n \tin       []byte\n \tvalue    uint64 // Maybe use [16]byte, but shifting is awkward.\n+\tcursor   int    // offset where next read should end\n \tbitsRead uint8\n }\n \n@@ -32,6 +34,7 @@ func (b *bitReader) init(in []byte) error {\n \tif v == 0 {\n \t\treturn errors.New(\"corrupt stream, did not find end of stream\")\n \t}\n+\tb.cursor = len(in)\n \tb.bitsRead = 64\n \tb.value = 0\n \tif len(in) >= 8 {\n@@ -67,18 +70,15 @@ func (b *bitReader) fillFast() {\n \tif b.bitsRead < 32 {\n \t\treturn\n \t}\n-\tv := b.in[len(b.in)-4:]\n-\tb.in = b.in[:len(b.in)-4]\n-\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n-\tb.value = (b.value << 32) | uint64(low)\n+\tb.cursor -= 4\n+\tb.value = (b.value << 32) | uint64(le.Load32(b.in, b.cursor))\n \tb.bitsRead -= 32\n }\n \n // fillFastStart() assumes the bitreader is empty and there is at least 8 bytes to read.\n func (b *bitReader) fillFastStart() {\n-\tv := b.in[len(b.in)-8:]\n-\tb.in = b.in[:len(b.in)-8]\n-\tb.value = binary.LittleEndian.Uint64(v)\n+\tb.cursor -= 8\n+\tb.value = le.Load64(b.in, b.cursor)\n \tb.bitsRead = 0\n }\n \n@@ -87,25 +87,23 @@ func (b *bitReader) fill() {\n \tif b.bitsRead < 32 {\n \t\treturn\n \t}\n-\tif len(b.in) >= 4 {\n-\t\tv := b.in[len(b.in)-4:]\n-\t\tb.in = b.in[:len(b.in)-4]\n-\t\tlow := (uint32(v[0])) | (uint32(v[1]) << 8) | (uint32(v[2]) << 16) | (uint32(v[3]) << 24)\n-\t\tb.value = (b.value << 32) | uint64(low)\n+\tif b.cursor >= 4 {\n+\t\tb.cursor -= 4\n+\t\tb.value = (b.value << 32) | uint64(le.Load32(b.in, b.cursor))\n \t\tb.bitsRead -= 32\n \t\treturn\n \t}\n \n-\tb.bitsRead -= uint8(8 * len(b.in))\n-\tfor len(b.in) > 0 {\n-\t\tb.value = (b.value << 8) | uint64(b.in[len(b.in)-1])\n-\t\tb.in = b.in[:len(b.in)-1]\n+\tb.bitsRead -= uint8(8 * b.cursor)\n+\tfor b.cursor > 0 {\n+\t\tb.cursor -= 1\n+\t\tb.value = (b.value << 8) | uint64(b.in[b.cursor])\n \t}\n }\n \n // finished returns true if all bits have been read from the bit stream.\n func (b *bitReader) finished() bool {\n-\treturn len(b.in) == 0 && b.bitsRead >= 64\n+\treturn b.cursor == 0 && b.bitsRead >= 64\n }\n \n // overread returns true if more bits have been requested than is on the stream.\n@@ -115,13 +113,14 @@ func (b *bitReader) overread() bool {\n \n // remain returns the number of bits remaining.\n func (b *bitReader) remain() uint {\n-\treturn 8*uint(len(b.in)) + 64 - uint(b.bitsRead)\n+\treturn 8*uint(b.cursor) + 64 - uint(b.bitsRead)\n }\n \n // close the bitstream and returns an error if out-of-buffer reads occurred.\n func (b *bitReader) close() error {\n \t// Release reference.\n \tb.in = nil\n+\tb.cursor = 0\n \tif !b.finished() {\n \t\treturn fmt.Errorf(\"%d extra bits on block, should be 0\", b.remain())\n \t}"
    },
    {
      "sha": "0dd742fd2a6d98156bd4dd32fb261f46e0cc3248",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/blockdec.go",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -5,14 +5,10 @@\n package zstd\n \n import (\n-\t\"bytes\"\n-\t\"encoding/binary\"\n \t\"errors\"\n \t\"fmt\"\n \t\"hash/crc32\"\n \t\"io\"\n-\t\"os\"\n-\t\"path/filepath\"\n \t\"sync\"\n \n \t\"github.com/klauspost/compress/huff0\"\n@@ -648,21 +644,6 @@ func (b *blockDec) prepareSequences(in []byte, hist *history) (err error) {\n \t\tprintln(\"initializing sequences:\", err)\n \t\treturn err\n \t}\n-\t// Extract blocks...\n-\tif false && hist.dict == nil {\n-\t\tfatalErr := func(err error) {\n-\t\t\tif err != nil {\n-\t\t\t\tpanic(err)\n-\t\t\t}\n-\t\t}\n-\t\tfn := fmt.Sprintf(\"n-%d-lits-%d-prev-%d-%d-%d-win-%d.blk\", hist.decoders.nSeqs, len(hist.decoders.literals), hist.recentOffsets[0], hist.recentOffsets[1], hist.recentOffsets[2], hist.windowSize)\n-\t\tvar buf bytes.Buffer\n-\t\tfatalErr(binary.Write(&buf, binary.LittleEndian, hist.decoders.litLengths.fse))\n-\t\tfatalErr(binary.Write(&buf, binary.LittleEndian, hist.decoders.matchLengths.fse))\n-\t\tfatalErr(binary.Write(&buf, binary.LittleEndian, hist.decoders.offsets.fse))\n-\t\tbuf.Write(in)\n-\t\tos.WriteFile(filepath.Join(\"testdata\", \"seqs\", fn), buf.Bytes(), os.ModePerm)\n-\t}\n \n \treturn nil\n }"
    },
    {
      "sha": "fd35ea1480a0db2c2232a5004cbd27f44a9e576d",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/blockenc.go",
      "status": "modified",
      "additions": 5,
      "deletions": 22,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockenc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockenc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockenc.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -9,6 +9,7 @@ import (\n \t\"fmt\"\n \t\"math\"\n \t\"math/bits\"\n+\t\"slices\"\n \n \t\"github.com/klauspost/compress/huff0\"\n )\n@@ -457,16 +458,7 @@ func fuzzFseEncoder(data []byte) int {\n \t\t// All 0\n \t\treturn 0\n \t}\n-\tmaxCount := func(a []uint32) int {\n-\t\tvar max uint32\n-\t\tfor _, v := range a {\n-\t\t\tif v > max {\n-\t\t\t\tmax = v\n-\t\t\t}\n-\t\t}\n-\t\treturn int(max)\n-\t}\n-\tcnt := maxCount(hist[:maxSym])\n+\tcnt := int(slices.Max(hist[:maxSym]))\n \tif cnt == len(data) {\n \t\t// RLE\n \t\treturn 0\n@@ -884,15 +876,6 @@ func (b *blockEnc) genCodes() {\n \t\t\t}\n \t\t}\n \t}\n-\tmaxCount := func(a []uint32) int {\n-\t\tvar max uint32\n-\t\tfor _, v := range a {\n-\t\t\tif v > max {\n-\t\t\t\tmax = v\n-\t\t\t}\n-\t\t}\n-\t\treturn int(max)\n-\t}\n \tif debugAsserts && mlMax > maxMatchLengthSymbol {\n \t\tpanic(fmt.Errorf(\"mlMax > maxMatchLengthSymbol (%d)\", mlMax))\n \t}\n@@ -903,7 +886,7 @@ func (b *blockEnc) genCodes() {\n \t\tpanic(fmt.Errorf(\"llMax > maxLiteralLengthSymbol (%d)\", llMax))\n \t}\n \n-\tb.coders.mlEnc.HistogramFinished(mlMax, maxCount(mlH[:mlMax+1]))\n-\tb.coders.ofEnc.HistogramFinished(ofMax, maxCount(ofH[:ofMax+1]))\n-\tb.coders.llEnc.HistogramFinished(llMax, maxCount(llH[:llMax+1]))\n+\tb.coders.mlEnc.HistogramFinished(mlMax, int(slices.Max(mlH[:mlMax+1])))\n+\tb.coders.ofEnc.HistogramFinished(ofMax, int(slices.Max(ofH[:ofMax+1])))\n+\tb.coders.llEnc.HistogramFinished(llMax, int(slices.Max(llH[:llMax+1])))\n }"
    },
    {
      "sha": "ea2a19376c1b1df1a1649307ed89cf01313a95d2",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/decoder.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fdecoder.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fdecoder.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fdecoder.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -123,7 +123,7 @@ func NewReader(r io.Reader, opts ...DOption) (*Decoder, error) {\n }\n \n // Read bytes from the decompressed stream into p.\n-// Returns the number of bytes written and any error that occurred.\n+// Returns the number of bytes read and any error that occurred.\n // When the stream is done, io.EOF will be returned.\n func (d *Decoder) Read(p []byte) (int, error) {\n \tvar n int\n@@ -323,6 +323,7 @@ func (d *Decoder) DecodeAll(input, dst []byte) ([]byte, error) {\n \t\tframe.bBuf = nil\n \t\tif frame.history.decoders.br != nil {\n \t\t\tframe.history.decoders.br.in = nil\n+\t\t\tframe.history.decoders.br.cursor = 0\n \t\t}\n \t\td.decoders <- block\n \t}()"
    },
    {
      "sha": "7d250c67f596a211a88faedf5119e02682394e45",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/enc_base.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_base.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_base.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_base.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -116,7 +116,7 @@ func (e *fastBase) matchlen(s, t int32, src []byte) int32 {\n \t\t\tpanic(err)\n \t\t}\n \t\tif t < 0 {\n-\t\t\terr := fmt.Sprintf(\"s (%d) < 0\", s)\n+\t\t\terr := fmt.Sprintf(\"t (%d) < 0\", t)\n \t\t\tpanic(err)\n \t\t}\n \t\tif s-t > e.maxMatchOff {"
    },
    {
      "sha": "bea1779e973ecc0209736b93ac43abefc4704495",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/matchlen_generic.go",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fmatchlen_generic.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fmatchlen_generic.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fmatchlen_generic.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -7,20 +7,25 @@\n package zstd\n \n import (\n-\t\"encoding/binary\"\n \t\"math/bits\"\n+\n+\t\"github.com/klauspost/compress/internal/le\"\n )\n \n // matchLen returns the maximum common prefix length of a and b.\n // a must be the shortest of the two.\n func matchLen(a, b []byte) (n int) {\n-\tfor ; len(a) >= 8 && len(b) >= 8; a, b = a[8:], b[8:] {\n-\t\tdiff := binary.LittleEndian.Uint64(a) ^ binary.LittleEndian.Uint64(b)\n+\tleft := len(a)\n+\tfor left >= 8 {\n+\t\tdiff := le.Load64(a, n) ^ le.Load64(b, n)\n \t\tif diff != 0 {\n \t\t\treturn n + bits.TrailingZeros64(diff)>>3\n \t\t}\n \t\tn += 8\n+\t\tleft -= 8\n \t}\n+\ta = a[n:]\n+\tb = b[n:]\n \n \tfor i := range a {\n \t\tif a[i] != b[i] {"
    },
    {
      "sha": "9a7de82f9efc2d4871a50c7fc3925f65e2837035",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqdec.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -245,7 +245,7 @@ func (s *sequenceDecs) decodeSync(hist []byte) error {\n \t\t\treturn io.ErrUnexpectedEOF\n \t\t}\n \t\tvar ll, mo, ml int\n-\t\tif len(br.in) > 4+((maxOffsetBits+16+16)>>3) {\n+\t\tif br.cursor > 4+((maxOffsetBits+16+16)>>3) {\n \t\t\t// inlined function:\n \t\t\t// ll, mo, ml = s.nextFast(br, llState, mlState, ofState)\n "
    },
    {
      "sha": "a708ca6d3d9d697e1260e707a76c117862789d8f",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqdec_amd64.s",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -7,9 +7,9 @@\n TEXT ·sequenceDecs_decode_amd64(SB), $8-32\n \tMOVQ    br+8(FP), CX\n \tMOVQ    24(CX), DX\n-\tMOVBQZX 32(CX), BX\n+\tMOVBQZX 40(CX), BX\n \tMOVQ    (CX), AX\n-\tMOVQ    8(CX), SI\n+\tMOVQ    32(CX), SI\n \tADDQ    SI, AX\n \tMOVQ    AX, (SP)\n \tMOVQ    ctx+16(FP), AX\n@@ -299,8 +299,8 @@ sequenceDecs_decode_amd64_match_len_ofs_ok:\n \tMOVQ R13, 160(AX)\n \tMOVQ br+8(FP), AX\n \tMOVQ DX, 24(AX)\n-\tMOVB BL, 32(AX)\n-\tMOVQ SI, 8(AX)\n+\tMOVB BL, 40(AX)\n+\tMOVQ SI, 32(AX)\n \n \t// Return success\n \tMOVQ $0x00000000, ret+24(FP)\n@@ -335,9 +335,9 @@ error_overread:\n TEXT ·sequenceDecs_decode_56_amd64(SB), $8-32\n \tMOVQ    br+8(FP), CX\n \tMOVQ    24(CX), DX\n-\tMOVBQZX 32(CX), BX\n+\tMOVBQZX 40(CX), BX\n \tMOVQ    (CX), AX\n-\tMOVQ    8(CX), SI\n+\tMOVQ    32(CX), SI\n \tADDQ    SI, AX\n \tMOVQ    AX, (SP)\n \tMOVQ    ctx+16(FP), AX\n@@ -598,8 +598,8 @@ sequenceDecs_decode_56_amd64_match_len_ofs_ok:\n \tMOVQ R13, 160(AX)\n \tMOVQ br+8(FP), AX\n \tMOVQ DX, 24(AX)\n-\tMOVB BL, 32(AX)\n-\tMOVQ SI, 8(AX)\n+\tMOVB BL, 40(AX)\n+\tMOVQ SI, 32(AX)\n \n \t// Return success\n \tMOVQ $0x00000000, ret+24(FP)\n@@ -634,9 +634,9 @@ error_overread:\n TEXT ·sequenceDecs_decode_bmi2(SB), $8-32\n \tMOVQ    br+8(FP), BX\n \tMOVQ    24(BX), AX\n-\tMOVBQZX 32(BX), DX\n+\tMOVBQZX 40(BX), DX\n \tMOVQ    (BX), CX\n-\tMOVQ    8(BX), BX\n+\tMOVQ    32(BX), BX\n \tADDQ    BX, CX\n \tMOVQ    CX, (SP)\n \tMOVQ    ctx+16(FP), CX\n@@ -884,8 +884,8 @@ sequenceDecs_decode_bmi2_match_len_ofs_ok:\n \tMOVQ R12, 160(CX)\n \tMOVQ br+8(FP), CX\n \tMOVQ AX, 24(CX)\n-\tMOVB DL, 32(CX)\n-\tMOVQ BX, 8(CX)\n+\tMOVB DL, 40(CX)\n+\tMOVQ BX, 32(CX)\n \n \t// Return success\n \tMOVQ $0x00000000, ret+24(FP)\n@@ -920,9 +920,9 @@ error_overread:\n TEXT ·sequenceDecs_decode_56_bmi2(SB), $8-32\n \tMOVQ    br+8(FP), BX\n \tMOVQ    24(BX), AX\n-\tMOVBQZX 32(BX), DX\n+\tMOVBQZX 40(BX), DX\n \tMOVQ    (BX), CX\n-\tMOVQ    8(BX), BX\n+\tMOVQ    32(BX), BX\n \tADDQ    BX, CX\n \tMOVQ    CX, (SP)\n \tMOVQ    ctx+16(FP), CX\n@@ -1141,8 +1141,8 @@ sequenceDecs_decode_56_bmi2_match_len_ofs_ok:\n \tMOVQ R12, 160(CX)\n \tMOVQ br+8(FP), CX\n \tMOVQ AX, 24(CX)\n-\tMOVB DL, 32(CX)\n-\tMOVQ BX, 8(CX)\n+\tMOVB DL, 40(CX)\n+\tMOVQ BX, 32(CX)\n \n \t// Return success\n \tMOVQ $0x00000000, ret+24(FP)\n@@ -1787,9 +1787,9 @@ empty_seqs:\n TEXT ·sequenceDecs_decodeSync_amd64(SB), $64-32\n \tMOVQ    br+8(FP), CX\n \tMOVQ    24(CX), DX\n-\tMOVBQZX 32(CX), BX\n+\tMOVBQZX 40(CX), BX\n \tMOVQ    (CX), AX\n-\tMOVQ    8(CX), SI\n+\tMOVQ    32(CX), SI\n \tADDQ    SI, AX\n \tMOVQ    AX, (SP)\n \tMOVQ    ctx+16(FP), AX\n@@ -2281,8 +2281,8 @@ handle_loop:\n loop_finished:\n \tMOVQ br+8(FP), AX\n \tMOVQ DX, 24(AX)\n-\tMOVB BL, 32(AX)\n-\tMOVQ SI, 8(AX)\n+\tMOVB BL, 40(AX)\n+\tMOVQ SI, 32(AX)\n \n \t// Update the context\n \tMOVQ ctx+16(FP), AX\n@@ -2349,9 +2349,9 @@ error_not_enough_space:\n TEXT ·sequenceDecs_decodeSync_bmi2(SB), $64-32\n \tMOVQ    br+8(FP), BX\n \tMOVQ    24(BX), AX\n-\tMOVBQZX 32(BX), DX\n+\tMOVBQZX 40(BX), DX\n \tMOVQ    (BX), CX\n-\tMOVQ    8(BX), BX\n+\tMOVQ    32(BX), BX\n \tADDQ    BX, CX\n \tMOVQ    CX, (SP)\n \tMOVQ    ctx+16(FP), CX\n@@ -2801,8 +2801,8 @@ handle_loop:\n loop_finished:\n \tMOVQ br+8(FP), CX\n \tMOVQ AX, 24(CX)\n-\tMOVB DL, 32(CX)\n-\tMOVQ BX, 8(CX)\n+\tMOVB DL, 40(CX)\n+\tMOVQ BX, 32(CX)\n \n \t// Update the context\n \tMOVQ ctx+16(FP), AX\n@@ -2869,9 +2869,9 @@ error_not_enough_space:\n TEXT ·sequenceDecs_decodeSync_safe_amd64(SB), $64-32\n \tMOVQ    br+8(FP), CX\n \tMOVQ    24(CX), DX\n-\tMOVBQZX 32(CX), BX\n+\tMOVBQZX 40(CX), BX\n \tMOVQ    (CX), AX\n-\tMOVQ    8(CX), SI\n+\tMOVQ    32(CX), SI\n \tADDQ    SI, AX\n \tMOVQ    AX, (SP)\n \tMOVQ    ctx+16(FP), AX\n@@ -3465,8 +3465,8 @@ handle_loop:\n loop_finished:\n \tMOVQ br+8(FP), AX\n \tMOVQ DX, 24(AX)\n-\tMOVB BL, 32(AX)\n-\tMOVQ SI, 8(AX)\n+\tMOVB BL, 40(AX)\n+\tMOVQ SI, 32(AX)\n \n \t// Update the context\n \tMOVQ ctx+16(FP), AX\n@@ -3533,9 +3533,9 @@ error_not_enough_space:\n TEXT ·sequenceDecs_decodeSync_safe_bmi2(SB), $64-32\n \tMOVQ    br+8(FP), BX\n \tMOVQ    24(BX), AX\n-\tMOVBQZX 32(BX), DX\n+\tMOVBQZX 40(BX), DX\n \tMOVQ    (BX), CX\n-\tMOVQ    8(BX), BX\n+\tMOVQ    32(BX), BX\n \tADDQ    BX, CX\n \tMOVQ    CX, (SP)\n \tMOVQ    ctx+16(FP), CX\n@@ -4087,8 +4087,8 @@ handle_loop:\n loop_finished:\n \tMOVQ br+8(FP), CX\n \tMOVQ AX, 24(CX)\n-\tMOVB DL, 32(CX)\n-\tMOVQ BX, 8(CX)\n+\tMOVB DL, 40(CX)\n+\tMOVQ BX, 32(CX)\n \n \t// Update the context\n \tMOVQ ctx+16(FP), AX"
    },
    {
      "sha": "7cec2197cd9c4b51d8a4b82b195e05617df626ee",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqdec_generic.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_generic.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_generic.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_generic.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -29,7 +29,7 @@ func (s *sequenceDecs) decode(seqs []seqVals) error {\n \t}\n \tfor i := range seqs {\n \t\tvar ll, mo, ml int\n-\t\tif len(br.in) > 4+((maxOffsetBits+16+16)>>3) {\n+\t\tif br.cursor > 4+((maxOffsetBits+16+16)>>3) {\n \t\t\t// inlined function:\n \t\t\t// ll, mo, ml = s.nextFast(br, llState, mlState, ofState)\n "
    },
    {
      "sha": "65045eabdded7658bbf7c8428a4cad39d887f549",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqenc.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqenc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqenc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqenc.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -69,7 +69,6 @@ var llBitsTable = [maxLLCode + 1]byte{\n func llCode(litLength uint32) uint8 {\n \tconst llDeltaCode = 19\n \tif litLength <= 63 {\n-\t\t// Compiler insists on bounds check (Go 1.12)\n \t\treturn llCodeTable[litLength&63]\n \t}\n \treturn uint8(highBit(litLength)) + llDeltaCode\n@@ -102,7 +101,6 @@ var mlBitsTable = [maxMLCode + 1]byte{\n func mlCode(mlBase uint32) uint8 {\n \tconst mlDeltaCode = 36\n \tif mlBase <= 127 {\n-\t\t// Compiler insists on bounds check (Go 1.12)\n \t\treturn mlCodeTable[mlBase&127]\n \t}\n \treturn uint8(highBit(mlBase)) + mlDeltaCode"
    },
    {
      "sha": "a17381b8f8905b68cb9e61de645c3fdeb5346dfc",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/snappy.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fsnappy.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fsnappy.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fsnappy.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -197,7 +197,7 @@ func (r *SnappyConverter) Convert(in io.Reader, w io.Writer) (int64, error) {\n \n \t\t\tn, r.err = w.Write(r.block.output)\n \t\t\tif r.err != nil {\n-\t\t\t\treturn written, err\n+\t\t\t\treturn written, r.err\n \t\t\t}\n \t\t\twritten += int64(n)\n \t\t\tcontinue\n@@ -239,7 +239,7 @@ func (r *SnappyConverter) Convert(in io.Reader, w io.Writer) (int64, error) {\n \t\t\t}\n \t\t\tn, r.err = w.Write(r.block.output)\n \t\t\tif r.err != nil {\n-\t\t\t\treturn written, err\n+\t\t\t\treturn written, r.err\n \t\t\t}\n \t\t\twritten += int64(n)\n \t\t\tcontinue"
    },
    {
      "sha": "6252b46ae6fd3f27a1e63fcacfe86f0f6cecc272",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/zstd.go",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -5,10 +5,11 @@ package zstd\n \n import (\n \t\"bytes\"\n-\t\"encoding/binary\"\n \t\"errors\"\n \t\"log\"\n \t\"math\"\n+\n+\t\"github.com/klauspost/compress/internal/le\"\n )\n \n // enable debug printing\n@@ -110,11 +111,11 @@ func printf(format string, a ...interface{}) {\n }\n \n func load3232(b []byte, i int32) uint32 {\n-\treturn binary.LittleEndian.Uint32(b[:len(b):len(b)][i:])\n+\treturn le.Load32(b, i)\n }\n \n func load6432(b []byte, i int32) uint64 {\n-\treturn binary.LittleEndian.Uint64(b[:len(b):len(b)][i:])\n+\treturn le.Load64(b, i)\n }\n \n type byter interface {"
    },
    {
      "sha": "8702d6d39e09fe920804853f8cd381a3963526e5",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/bsoncodec/default_value_decoders.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsoncodec%2Fdefault_value_decoders.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsoncodec%2Fdefault_value_decoders.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsoncodec%2Fdefault_value_decoders.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1521,6 +1521,18 @@ func (dvd DefaultValueDecoders) ValueUnmarshalerDecodeValue(_ DecodeContext, vr\n \t\treturn ValueDecoderError{Name: \"ValueUnmarshalerDecodeValue\", Types: []reflect.Type{tValueUnmarshaler}, Received: val}\n \t}\n \n+\t// If BSON value is null and the go value is a pointer, then don't call\n+\t// UnmarshalBSONValue. Even if the Go pointer is already initialized (i.e.,\n+\t// non-nil), encountering null in BSON will result in the pointer being\n+\t// directly set to nil here. Since the pointer is being replaced with nil,\n+\t// there is no opportunity (or reason) for the custom UnmarshalBSONValue logic\n+\t// to be called.\n+\tif vr.Type() == bsontype.Null && val.Kind() == reflect.Ptr {\n+\t\tval.Set(reflect.Zero(val.Type()))\n+\n+\t\treturn vr.ReadNull()\n+\t}\n+\n \tif val.Kind() == reflect.Ptr && val.IsNil() {\n \t\tif !val.CanSet() {\n \t\t\treturn ValueDecoderError{Name: \"ValueUnmarshalerDecodeValue\", Types: []reflect.Type{tValueUnmarshaler}, Received: val}"
    },
    {
      "sha": "d749ba373b59b88d84f00f24100090deacec3761",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/unmarshal.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Funmarshal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Funmarshal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Funmarshal.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -41,6 +41,9 @@ type ValueUnmarshaler interface {\n // Unmarshal parses the BSON-encoded data and stores the result in the value\n // pointed to by val. If val is nil or not a pointer, Unmarshal returns\n // InvalidUnmarshalError.\n+//\n+// When unmarshaling BSON, if the BSON value is null and the Go value is a\n+// pointer, the pointer is set to nil without calling UnmarshalBSONValue.\n func Unmarshal(data []byte, val interface{}) error {\n \treturn UnmarshalWithRegistry(DefaultRegistry, data, val)\n }"
    },
    {
      "sha": "81dfbb1d8ecdf426bd80a5ba5d1f8f5d13bcbfa3",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/bulk_write.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -39,6 +39,7 @@ type bulkWrite struct {\n \twriteConcern             *writeconcern.WriteConcern\n \tresult                   BulkWriteResult\n \tlet                      interface{}\n+\tbypassEmptyTsReplacement *bool\n }\n \n func (bw *bulkWrite) execute(ctx context.Context) error {\n@@ -207,6 +208,10 @@ func (bw *bulkWrite) runInsert(ctx context.Context, batch bulkWriteBatch) (opera\n \t}\n \top = op.Retry(retry)\n \n+\tif bw.bypassEmptyTsReplacement != nil {\n+\t\top.BypassEmptyTsReplacement(*bw.bypassEmptyTsReplacement)\n+\t}\n+\n \terr := op.Execute(ctx)\n \n \treturn op.Result(), err\n@@ -415,6 +420,10 @@ func (bw *bulkWrite) runUpdate(ctx context.Context, batch bulkWriteBatch) (opera\n \t}\n \top = op.Retry(retry)\n \n+\tif bw.bypassEmptyTsReplacement != nil {\n+\t\top.BypassEmptyTsReplacement(*bw.bypassEmptyTsReplacement)\n+\t}\n+\n \terr := op.Execute(ctx)\n \n \treturn op.Result(), err"
    },
    {
      "sha": "232d0a3c51cee990739643483859045741b81484",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/client.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -861,7 +861,7 @@ func newLogger(opts *options.LoggerOptions) (*logger.Logger, error) {\n \n \t// If there are no component-level options and the environment does not\n \t// contain component variables, then do nothing.\n-\tif (opts.ComponentLevels == nil || len(opts.ComponentLevels) == 0) &&\n+\tif (len(opts.ComponentLevels) == 0) &&\n \t\t!logger.EnvHasComponentVariables() {\n \n \t\treturn nil, nil"
    },
    {
      "sha": "95889c80a44d90424787f2a164014a08ae4a97d5",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/collection.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -234,6 +234,7 @@ func (coll *Collection) BulkWrite(ctx context.Context, models []WriteModel,\n \t\tselector:                 selector,\n \t\twriteConcern:             wc,\n \t\tlet:                      bwo.Let,\n+\t\tbypassEmptyTsReplacement: bwo.BypassEmptyTsReplacement,\n \t}\n \n \terr = op.execute(ctx)\n@@ -307,6 +308,9 @@ func (coll *Collection) insert(ctx context.Context, documents []interface{},\n \tif imo.Ordered != nil {\n \t\top = op.Ordered(*imo.Ordered)\n \t}\n+\tif imo.BypassEmptyTsReplacement != nil {\n+\t\top = op.BypassEmptyTsReplacement(*imo.BypassEmptyTsReplacement)\n+\t}\n \tretry := driver.RetryNone\n \tif coll.client.retryWrites {\n \t\tretry = driver.RetryOncePerCommand\n@@ -355,6 +359,9 @@ func (coll *Collection) InsertOne(ctx context.Context, document interface{},\n \tif ioOpts.Comment != nil {\n \t\timOpts.SetComment(ioOpts.Comment)\n \t}\n+\tif ioOpts.BypassEmptyTsReplacement != nil {\n+\t\timOpts.BypassEmptyTsReplacement = ioOpts.BypassEmptyTsReplacement\n+\t}\n \tres, err := coll.insert(ctx, []interface{}{document}, imOpts)\n \n \trr, err := processWriteError(err)\n@@ -609,6 +616,9 @@ func (coll *Collection) updateOrReplace(ctx context.Context, filter bsoncore.Doc\n \t\t}\n \t\top = op.Comment(comment)\n \t}\n+\tif uo.BypassEmptyTsReplacement != nil {\n+\t\top.BypassEmptyTsReplacement(*uo.BypassEmptyTsReplacement)\n+\t}\n \tretry := driver.RetryNone\n \t// retryable writes are only enabled updateOne/replaceOne operations\n \tif !multi && coll.client.retryWrites {\n@@ -760,6 +770,7 @@ func (coll *Collection) ReplaceOne(ctx context.Context, filter interface{},\n \t\tuOpts.Hint = opt.Hint\n \t\tuOpts.Let = opt.Let\n \t\tuOpts.Comment = opt.Comment\n+\t\tuOpts.BypassEmptyTsReplacement = opt.BypassEmptyTsReplacement\n \t\tupdateOptions = append(updateOptions, uOpts)\n \t}\n \n@@ -1659,6 +1670,9 @@ func (coll *Collection) FindOneAndReplace(ctx context.Context, filter interface{\n \t\t}\n \t\top = op.Let(let)\n \t}\n+\tif fo.BypassEmptyTsReplacement != nil {\n+\t\top = op.BypassEmptyTsReplacement(*fo.BypassEmptyTsReplacement)\n+\t}\n \n \treturn coll.findAndModify(ctx, op)\n }\n@@ -1765,6 +1779,9 @@ func (coll *Collection) FindOneAndUpdate(ctx context.Context, filter interface{}\n \t\t}\n \t\top = op.Let(let)\n \t}\n+\tif fo.BypassEmptyTsReplacement != nil {\n+\t\top = op.BypassEmptyTsReplacement(*fo.BypassEmptyTsReplacement)\n+\t}\n \n \treturn coll.findAndModify(ctx, op)\n }"
    },
    {
      "sha": "49d7a0f5a5fc910cb009c84ff829eb4aa9845fda",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/bulkwriteoptions.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fbulkwriteoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fbulkwriteoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fbulkwriteoptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -29,6 +29,12 @@ type BulkWriteOptions struct {\n \t// parameter names to values. Values must be constant or closed expressions that do not reference document fields.\n \t// Parameters can then be accessed as variables in an aggregate expression context (e.g. \"$$var\").\n \tLet interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // BulkWrite creates a new *BulkWriteOptions instance.\n@@ -88,6 +94,9 @@ func MergeBulkWriteOptions(opts ...*BulkWriteOptions) *BulkWriteOptions {\n \t\tif opt.Let != nil {\n \t\t\tb.Let = opt.Let\n \t\t}\n+\t\tif opt.BypassEmptyTsReplacement != nil {\n+\t\t\tb.BypassEmptyTsReplacement = opt.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn b"
    },
    {
      "sha": "5795f95a43295a184d4f7939fb3ae2fdc4f2254c",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/findoptions.go",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Ffindoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Ffindoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Ffindoptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -675,6 +675,12 @@ type FindOneAndReplaceOptions struct {\n \t// Values must be constant or closed expressions that do not reference document fields. Parameters can then be\n \t// accessed as variables in an aggregate expression context (e.g. \"$$var\").\n \tLet interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // FindOneAndReplace creates a new FindOneAndReplaceOptions instance.\n@@ -787,6 +793,9 @@ func MergeFindOneAndReplaceOptions(opts ...*FindOneAndReplaceOptions) *FindOneAn\n \t\tif opt.Let != nil {\n \t\t\tfo.Let = opt.Let\n \t\t}\n+\t\tif opt.BypassEmptyTsReplacement != nil {\n+\t\t\tfo.BypassEmptyTsReplacement = opt.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn fo\n@@ -852,6 +861,12 @@ type FindOneAndUpdateOptions struct {\n \t// Values must be constant or closed expressions that do not reference document fields. Parameters can then be\n \t// accessed as variables in an aggregate expression context (e.g. \"$$var\").\n \tLet interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // FindOneAndUpdate creates a new FindOneAndUpdateOptions instance.\n@@ -973,6 +988,9 @@ func MergeFindOneAndUpdateOptions(opts ...*FindOneAndUpdateOptions) *FindOneAndU\n \t\tif opt.Let != nil {\n \t\t\tfo.Let = opt.Let\n \t\t}\n+\t\tif opt.BypassEmptyTsReplacement != nil {\n+\t\t\tfo.BypassEmptyTsReplacement = opt.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn fo"
    },
    {
      "sha": "f84f799defbc235167de6f3844d8258dc6706101",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/insertoptions.go",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Finsertoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Finsertoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Finsertoptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -17,6 +17,12 @@ type InsertOneOptions struct {\n \t// A string or document that will be included in server logs, profiling logs, and currentOp queries to help trace\n \t// the operation.  The default value is nil, which means that no comment will be included in the logs.\n \tComment interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // InsertOne creates a new InsertOneOptions instance.\n@@ -53,6 +59,9 @@ func MergeInsertOneOptions(opts ...*InsertOneOptions) *InsertOneOptions {\n \t\tif ioo.Comment != nil {\n \t\t\tioOpts.Comment = ioo.Comment\n \t\t}\n+\t\tif ioo.BypassEmptyTsReplacement != nil {\n+\t\t\tioOpts.BypassEmptyTsReplacement = ioo.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn ioOpts\n@@ -72,6 +81,12 @@ type InsertManyOptions struct {\n \n \t// If true, no writes will be executed after one fails. The default value is true.\n \tOrdered *bool\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // InsertMany creates a new InsertManyOptions instance.\n@@ -119,6 +134,9 @@ func MergeInsertManyOptions(opts ...*InsertManyOptions) *InsertManyOptions {\n \t\tif imo.Ordered != nil {\n \t\t\timOpts.Ordered = imo.Ordered\n \t\t}\n+\t\tif imo.BypassEmptyTsReplacement != nil {\n+\t\t\timOpts.BypassEmptyTsReplacement = imo.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn imOpts"
    },
    {
      "sha": "ae3e7849486f858618a0e1ce9b240208ca6d1076",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/replaceoptions.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Freplaceoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Freplaceoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Freplaceoptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -40,6 +40,12 @@ type ReplaceOptions struct {\n \t// Values must be constant or closed expressions that do not reference document fields. Parameters can then be\n \t// accessed as variables in an aggregate expression context (e.g. \"$$var\").\n \tLet interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // Replace creates a new ReplaceOptions instance.\n@@ -112,6 +118,9 @@ func MergeReplaceOptions(opts ...*ReplaceOptions) *ReplaceOptions {\n \t\tif ro.Let != nil {\n \t\t\trOpts.Let = ro.Let\n \t\t}\n+\t\tif ro.BypassEmptyTsReplacement != nil {\n+\t\t\trOpts.BypassEmptyTsReplacement = ro.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn rOpts"
    },
    {
      "sha": "9f22ca90420d8cfe19c43e8f9e5a563ddd430777",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/updateoptions.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fupdateoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fupdateoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fupdateoptions.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -45,6 +45,12 @@ type UpdateOptions struct {\n \t// Values must be constant or closed expressions that do not reference document fields. Parameters can then be\n \t// accessed as variables in an aggregate expression context (e.g. \"$$var\").\n \tLet interface{}\n+\n+\t// If true, the server accepts empty Timestamp as a literal rather than replacing it with the current time.\n+\t//\n+\t// Deprecated: This option is for internal use only and should not be set. It may be changed or removed in any\n+\t// release.\n+\tBypassEmptyTsReplacement *bool\n }\n \n // Update creates a new UpdateOptions instance.\n@@ -125,6 +131,9 @@ func MergeUpdateOptions(opts ...*UpdateOptions) *UpdateOptions {\n \t\tif uo.Let != nil {\n \t\t\tuOpts.Let = uo.Let\n \t\t}\n+\t\tif uo.BypassEmptyTsReplacement != nil {\n+\t\t\tuOpts.BypassEmptyTsReplacement = uo.BypassEmptyTsReplacement\n+\t\t}\n \t}\n \n \treturn uOpts"
    },
    {
      "sha": "8992fada15a7ed673ff669b3d5ba773e5d4966b9",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/version/version.go",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -4,8 +4,11 @@\n // not use this file except in compliance with the License. You may obtain\n // a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n \n+// DO NOT EDIT. Code generated by Github action\n+// \"mongodb-labs/drivers-github-tools/golang/pre-publish\".\n+\n // Package version defines the Go Driver version.\n-package version // import \"go.mongodb.org/mongo-driver/version\"\n+package version\n \n // Driver is the current version of the driver.\n-var Driver = \"1.17.1\"\n+var Driver = \"1.17.3\""
    },
    {
      "sha": "89f88747778b744c5764ac3934dedd49535009ea",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/find_and_modify.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -52,6 +52,7 @@ type FindAndModify struct {\n \tserverAPI                *driver.ServerAPIOptions\n \tlet                      bsoncore.Document\n \ttimeout                  *time.Duration\n+\tbypassEmptyTsReplacement *bool\n \n \tresult FindAndModifyResult\n }\n@@ -214,6 +215,9 @@ func (fam *FindAndModify) command(dst []byte, desc description.SelectedServer) (\n \tif fam.let != nil {\n \t\tdst = bsoncore.AppendDocumentElement(dst, \"let\", fam.let)\n \t}\n+\tif fam.bypassEmptyTsReplacement != nil {\n+\t\tdst = bsoncore.AppendBooleanElement(dst, \"bypassEmptyTsReplacement\", *fam.bypassEmptyTsReplacement)\n+\t}\n \n \treturn dst, nil\n }\n@@ -489,3 +493,13 @@ func (fam *FindAndModify) Authenticator(authenticator driver.Authenticator) *Fin\n \tfam.authenticator = authenticator\n \treturn fam\n }\n+\n+// BypassEmptyTsReplacement sets the bypassEmptyTsReplacement to use for this operation.\n+func (fam *FindAndModify) BypassEmptyTsReplacement(bypassEmptyTsReplacement bool) *FindAndModify {\n+\tif fam == nil {\n+\t\tfam = new(FindAndModify)\n+\t}\n+\n+\tfam.bypassEmptyTsReplacement = &bypassEmptyTsReplacement\n+\treturn fam\n+}"
    },
    {
      "sha": "eea285b4052fe949b796426221ec4df5163c7b5a",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/insert.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -43,6 +43,7 @@ type Insert struct {\n \tresult                   InsertResult\n \tserverAPI                *driver.ServerAPIOptions\n \ttimeout                  *time.Duration\n+\tbypassEmptyTsReplacement *bool\n \tlogger                   *logger.Logger\n }\n \n@@ -131,6 +132,9 @@ func (i *Insert) command(dst []byte, desc description.SelectedServer) ([]byte, e\n \tif i.ordered != nil {\n \t\tdst = bsoncore.AppendBooleanElement(dst, \"ordered\", *i.ordered)\n \t}\n+\tif i.bypassEmptyTsReplacement != nil {\n+\t\tdst = bsoncore.AppendBooleanElement(dst, \"bypassEmptyTsReplacement\", *i.bypassEmptyTsReplacement)\n+\t}\n \treturn dst, nil\n }\n \n@@ -317,3 +321,13 @@ func (i *Insert) Authenticator(authenticator driver.Authenticator) *Insert {\n \ti.authenticator = authenticator\n \treturn i\n }\n+\n+// BypassEmptyTsReplacement sets the bypassEmptyTsReplacement to use for this operation.\n+func (i *Insert) BypassEmptyTsReplacement(bypassEmptyTsReplacement bool) *Insert {\n+\tif i == nil {\n+\t\ti = new(Insert)\n+\t}\n+\n+\ti.bypassEmptyTsReplacement = &bypassEmptyTsReplacement\n+\treturn i\n+}"
    },
    {
      "sha": "a33c67ee23a350354e7f91eb8529be2d3bac3507",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/update.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -47,6 +47,7 @@ type Update struct {\n \tserverAPI                *driver.ServerAPIOptions\n \tlet                      bsoncore.Document\n \ttimeout                  *time.Duration\n+\tbypassEmptyTsReplacement *bool\n \tlogger                   *logger.Logger\n }\n \n@@ -204,6 +205,9 @@ func (u *Update) command(dst []byte, desc description.SelectedServer) ([]byte, e\n \tif u.let != nil {\n \t\tdst = bsoncore.AppendDocumentElement(dst, \"let\", u.let)\n \t}\n+\tif u.bypassEmptyTsReplacement != nil {\n+\t\tdst = bsoncore.AppendBooleanElement(dst, \"bypassEmptyTsReplacement\", *u.bypassEmptyTsReplacement)\n+\t}\n \n \treturn dst, nil\n }\n@@ -426,3 +430,13 @@ func (u *Update) Authenticator(authenticator driver.Authenticator) *Update {\n \tu.authenticator = authenticator\n \treturn u\n }\n+\n+// BypassEmptyTsReplacement sets the bypassEmptyTsReplacement to use for this operation.\n+func (u *Update) BypassEmptyTsReplacement(bypassEmptyTsReplacement bool) *Update {\n+\tif u == nil {\n+\t\tu = new(Update)\n+\t}\n+\n+\tu.bypassEmptyTsReplacement = &bypassEmptyTsReplacement\n+\treturn u\n+}"
    },
    {
      "sha": "424d025cfc60815ca063337ed411f049b22565c1",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage/wiremessage.go",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -539,6 +539,17 @@ func ReadCompressedCompressorID(src []byte) (id CompressorID, rem []byte, ok boo\n \treturn CompressorID(src[0]), src[1:], true\n }\n \n+// ReadCompressedCompressedMessage reads the compressed wiremessage to dst.\n+//\n+// Deprecated: This function is not required by the Go Driver and will be\n+// removed in the 2.0 release.\n+func ReadCompressedCompressedMessage(src []byte, length int32) (msg []byte, rem []byte, ok bool) {\n+\tif len(src) < int(length) || length < 0 {\n+\t\treturn nil, src, false\n+\t}\n+\treturn src[:length], src[length:], true\n+}\n+\n // ReadKillCursorsZero reads the zero field from src.\n func ReadKillCursorsZero(src []byte) (zero int32, rem []byte, ok bool) {\n \treturn readi32(src)"
    },
    {
      "sha": "6850275665f87cda1ce6306bc2c0d466d220eb85",
      "filename": "backend/vendor/golang.org/x/crypto/acme/jws.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Facme%2Fjws.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Facme%2Fjws.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Facme%2Fjws.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -92,7 +92,7 @@ func jwsEncodeJSON(claimset interface{}, key crypto.Signer, kid KeyID, nonce, ur\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tphead := base64.RawURLEncoding.EncodeToString([]byte(phJSON))\n+\tphead := base64.RawURLEncoding.EncodeToString(phJSON)\n \tvar payload string\n \tif val, ok := claimset.(string); ok {\n \t\tpayload = val"
    },
    {
      "sha": "b460e6f722b9b6f8699af31c30b92f73c829036e",
      "filename": "backend/vendor/golang.org/x/net/html/atom/table.go",
      "status": "modified",
      "additions": 629,
      "deletions": 627,
      "changes": 1256,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fatom%2Ftable.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fatom%2Ftable.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fatom%2Ftable.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -11,23 +11,23 @@ const (\n \tAcceptCharset             Atom = 0x1a0e\n \tAccesskey                 Atom = 0x2c09\n \tAcronym                   Atom = 0xaa07\n-\tAction                    Atom = 0x27206\n-\tAddress                   Atom = 0x6f307\n+\tAction                    Atom = 0x26506\n+\tAddress                   Atom = 0x6f107\n \tAlign                     Atom = 0xb105\n-\tAllowfullscreen           Atom = 0x2080f\n+\tAllowfullscreen           Atom = 0x3280f\n \tAllowpaymentrequest       Atom = 0xc113\n \tAllowusermedia            Atom = 0xdd0e\n \tAlt                       Atom = 0xf303\n \tAnnotation                Atom = 0x1c90a\n \tAnnotationXml             Atom = 0x1c90e\n-\tApplet                    Atom = 0x31906\n-\tArea                      Atom = 0x35604\n-\tArticle                   Atom = 0x3fc07\n+\tApplet                    Atom = 0x30806\n+\tArea                      Atom = 0x35004\n+\tArticle                   Atom = 0x3f607\n \tAs                        Atom = 0x3c02\n \tAside                     Atom = 0x10705\n \tAsync                     Atom = 0xff05\n \tAudio                     Atom = 0x11505\n-\tAutocomplete              Atom = 0x2780c\n+\tAutocomplete              Atom = 0x26b0c\n \tAutofocus                 Atom = 0x12109\n \tAutoplay                  Atom = 0x13c08\n \tB                         Atom = 0x101\n@@ -43,243 +43,243 @@ const (\n \tBr                        Atom = 0x202\n \tButton                    Atom = 0x19106\n \tCanvas                    Atom = 0x10306\n-\tCaption                   Atom = 0x23107\n-\tCenter                    Atom = 0x22006\n-\tChallenge                 Atom = 0x29b09\n+\tCaption                   Atom = 0x22407\n+\tCenter                    Atom = 0x21306\n+\tChallenge                 Atom = 0x28e09\n \tCharset                   Atom = 0x2107\n-\tChecked                   Atom = 0x47907\n+\tChecked                   Atom = 0x5b507\n \tCite                      Atom = 0x19c04\n-\tClass                     Atom = 0x56405\n-\tCode                      Atom = 0x5c504\n+\tClass                     Atom = 0x55805\n+\tCode                      Atom = 0x5ee04\n \tCol                       Atom = 0x1ab03\n \tColgroup                  Atom = 0x1ab08\n \tColor                     Atom = 0x1bf05\n \tCols                      Atom = 0x1c404\n \tColspan                   Atom = 0x1c407\n \tCommand                   Atom = 0x1d707\n-\tContent                   Atom = 0x58b07\n-\tContenteditable           Atom = 0x58b0f\n-\tContextmenu               Atom = 0x3800b\n+\tContent                   Atom = 0x57b07\n+\tContenteditable           Atom = 0x57b0f\n+\tContextmenu               Atom = 0x37a0b\n \tControls                  Atom = 0x1de08\n-\tCoords                    Atom = 0x1ea06\n-\tCrossorigin               Atom = 0x1fb0b\n-\tData                      Atom = 0x4a504\n-\tDatalist                  Atom = 0x4a508\n-\tDatetime                  Atom = 0x2b808\n-\tDd                        Atom = 0x2d702\n+\tCoords                    Atom = 0x1f006\n+\tCrossorigin               Atom = 0x1fa0b\n+\tData                      Atom = 0x49904\n+\tDatalist                  Atom = 0x49908\n+\tDatetime                  Atom = 0x2ab08\n+\tDd                        Atom = 0x2bf02\n \tDefault                   Atom = 0x10a07\n-\tDefer                     Atom = 0x5c705\n-\tDel                       Atom = 0x45203\n-\tDesc                      Atom = 0x56104\n+\tDefer                     Atom = 0x5f005\n+\tDel                       Atom = 0x44c03\n+\tDesc                      Atom = 0x55504\n \tDetails                   Atom = 0x7207\n \tDfn                       Atom = 0x8703\n \tDialog                    Atom = 0xbb06\n \tDir                       Atom = 0x9303\n \tDirname                   Atom = 0x9307\n \tDisabled                  Atom = 0x16408\n \tDiv                       Atom = 0x16b03\n-\tDl                        Atom = 0x5e602\n-\tDownload                  Atom = 0x46308\n+\tDl                        Atom = 0x5d602\n+\tDownload                  Atom = 0x45d08\n \tDraggable                 Atom = 0x17a09\n-\tDropzone                  Atom = 0x40508\n-\tDt                        Atom = 0x64b02\n+\tDropzone                  Atom = 0x3ff08\n+\tDt                        Atom = 0x64002\n \tEm                        Atom = 0x6e02\n \tEmbed                     Atom = 0x6e05\n-\tEnctype                   Atom = 0x28d07\n-\tFace                      Atom = 0x21e04\n-\tFieldset                  Atom = 0x22608\n-\tFigcaption                Atom = 0x22e0a\n-\tFigure                    Atom = 0x24806\n+\tEnctype                   Atom = 0x28007\n+\tFace                      Atom = 0x21104\n+\tFieldset                  Atom = 0x21908\n+\tFigcaption                Atom = 0x2210a\n+\tFigure                    Atom = 0x23b06\n \tFont                      Atom = 0x3f04\n \tFooter                    Atom = 0xf606\n-\tFor                       Atom = 0x25403\n-\tForeignObject             Atom = 0x2540d\n-\tForeignobject             Atom = 0x2610d\n-\tForm                      Atom = 0x26e04\n-\tFormaction                Atom = 0x26e0a\n-\tFormenctype               Atom = 0x2890b\n-\tFormmethod                Atom = 0x2a40a\n-\tFormnovalidate            Atom = 0x2ae0e\n-\tFormtarget                Atom = 0x2c00a\n+\tFor                       Atom = 0x24703\n+\tForeignObject             Atom = 0x2470d\n+\tForeignobject             Atom = 0x2540d\n+\tForm                      Atom = 0x26104\n+\tFormaction                Atom = 0x2610a\n+\tFormenctype               Atom = 0x27c0b\n+\tFormmethod                Atom = 0x2970a\n+\tFormnovalidate            Atom = 0x2a10e\n+\tFormtarget                Atom = 0x2b30a\n \tFrame                     Atom = 0x8b05\n \tFrameset                  Atom = 0x8b08\n \tH1                        Atom = 0x15c02\n-\tH2                        Atom = 0x2de02\n-\tH3                        Atom = 0x30d02\n-\tH4                        Atom = 0x34502\n-\tH5                        Atom = 0x34f02\n-\tH6                        Atom = 0x64d02\n-\tHead                      Atom = 0x33104\n-\tHeader                    Atom = 0x33106\n-\tHeaders                   Atom = 0x33107\n+\tH2                        Atom = 0x56102\n+\tH3                        Atom = 0x2cd02\n+\tH4                        Atom = 0x2fc02\n+\tH5                        Atom = 0x33f02\n+\tH6                        Atom = 0x34902\n+\tHead                      Atom = 0x32004\n+\tHeader                    Atom = 0x32006\n+\tHeaders                   Atom = 0x32007\n \tHeight                    Atom = 0x5206\n-\tHgroup                    Atom = 0x2ca06\n-\tHidden                    Atom = 0x2d506\n-\tHigh                      Atom = 0x2db04\n+\tHgroup                    Atom = 0x64206\n+\tHidden                    Atom = 0x2bd06\n+\tHigh                      Atom = 0x2ca04\n \tHr                        Atom = 0x15702\n-\tHref                      Atom = 0x2e004\n-\tHreflang                  Atom = 0x2e008\n+\tHref                      Atom = 0x2cf04\n+\tHreflang                  Atom = 0x2cf08\n \tHtml                      Atom = 0x5604\n-\tHttpEquiv                 Atom = 0x2e80a\n+\tHttpEquiv                 Atom = 0x2d70a\n \tI                         Atom = 0x601\n-\tIcon                      Atom = 0x58a04\n+\tIcon                      Atom = 0x57a04\n \tId                        Atom = 0x10902\n-\tIframe                    Atom = 0x2fc06\n-\tImage                     Atom = 0x30205\n-\tImg                       Atom = 0x30703\n-\tInput                     Atom = 0x44b05\n-\tInputmode                 Atom = 0x44b09\n-\tIns                       Atom = 0x20403\n-\tIntegrity                 Atom = 0x23f09\n+\tIframe                    Atom = 0x2eb06\n+\tImage                     Atom = 0x2f105\n+\tImg                       Atom = 0x2f603\n+\tInput                     Atom = 0x44505\n+\tInputmode                 Atom = 0x44509\n+\tIns                       Atom = 0x20303\n+\tIntegrity                 Atom = 0x23209\n \tIs                        Atom = 0x16502\n-\tIsindex                   Atom = 0x30f07\n-\tIsmap                     Atom = 0x31605\n-\tItemid                    Atom = 0x38b06\n+\tIsindex                   Atom = 0x2fe07\n+\tIsmap                     Atom = 0x30505\n+\tItemid                    Atom = 0x38506\n \tItemprop                  Atom = 0x19d08\n-\tItemref                   Atom = 0x3cd07\n-\tItemscope                 Atom = 0x67109\n-\tItemtype                  Atom = 0x31f08\n+\tItemref                   Atom = 0x3c707\n+\tItemscope                 Atom = 0x66f09\n+\tItemtype                  Atom = 0x30e08\n \tKbd                       Atom = 0xb903\n \tKeygen                    Atom = 0x3206\n \tKeytype                   Atom = 0xd607\n \tKind                      Atom = 0x17704\n \tLabel                     Atom = 0x5905\n-\tLang                      Atom = 0x2e404\n+\tLang                      Atom = 0x2d304\n \tLegend                    Atom = 0x18106\n \tLi                        Atom = 0xb202\n \tLink                      Atom = 0x17404\n-\tList                      Atom = 0x4a904\n-\tListing                   Atom = 0x4a907\n+\tList                      Atom = 0x49d04\n+\tListing                   Atom = 0x49d07\n \tLoop                      Atom = 0x5d04\n \tLow                       Atom = 0xc303\n \tMain                      Atom = 0x1004\n \tMalignmark                Atom = 0xb00a\n-\tManifest                  Atom = 0x6d708\n-\tMap                       Atom = 0x31803\n+\tManifest                  Atom = 0x6d508\n+\tMap                       Atom = 0x30703\n \tMark                      Atom = 0xb604\n-\tMarquee                   Atom = 0x32707\n-\tMath                      Atom = 0x32e04\n-\tMax                       Atom = 0x33d03\n-\tMaxlength                 Atom = 0x33d09\n+\tMarquee                   Atom = 0x31607\n+\tMath                      Atom = 0x31d04\n+\tMax                       Atom = 0x33703\n+\tMaxlength                 Atom = 0x33709\n \tMedia                     Atom = 0xe605\n \tMediagroup                Atom = 0xe60a\n-\tMenu                      Atom = 0x38704\n-\tMenuitem                  Atom = 0x38708\n-\tMeta                      Atom = 0x4b804\n+\tMenu                      Atom = 0x38104\n+\tMenuitem                  Atom = 0x38108\n+\tMeta                      Atom = 0x4ac04\n \tMeter                     Atom = 0x9805\n-\tMethod                    Atom = 0x2a806\n-\tMglyph                    Atom = 0x30806\n-\tMi                        Atom = 0x34702\n-\tMin                       Atom = 0x34703\n-\tMinlength                 Atom = 0x34709\n-\tMn                        Atom = 0x2b102\n+\tMethod                    Atom = 0x29b06\n+\tMglyph                    Atom = 0x2f706\n+\tMi                        Atom = 0x34102\n+\tMin                       Atom = 0x34103\n+\tMinlength                 Atom = 0x34109\n+\tMn                        Atom = 0x2a402\n \tMo                        Atom = 0xa402\n-\tMs                        Atom = 0x67402\n-\tMtext                     Atom = 0x35105\n-\tMultiple                  Atom = 0x35f08\n-\tMuted                     Atom = 0x36705\n+\tMs                        Atom = 0x67202\n+\tMtext                     Atom = 0x34b05\n+\tMultiple                  Atom = 0x35908\n+\tMuted                     Atom = 0x36105\n \tName                      Atom = 0x9604\n \tNav                       Atom = 0x1303\n \tNobr                      Atom = 0x3704\n \tNoembed                   Atom = 0x6c07\n \tNoframes                  Atom = 0x8908\n \tNomodule                  Atom = 0xa208\n \tNonce                     Atom = 0x1a605\n-\tNoscript                  Atom = 0x21608\n-\tNovalidate                Atom = 0x2b20a\n-\tObject                    Atom = 0x26806\n+\tNoscript                  Atom = 0x2c208\n+\tNovalidate                Atom = 0x2a50a\n+\tObject                    Atom = 0x25b06\n \tOl                        Atom = 0x13702\n \tOnabort                   Atom = 0x19507\n-\tOnafterprint              Atom = 0x2360c\n-\tOnautocomplete            Atom = 0x2760e\n-\tOnautocompleteerror       Atom = 0x27613\n-\tOnauxclick                Atom = 0x61f0a\n-\tOnbeforeprint             Atom = 0x69e0d\n-\tOnbeforeunload            Atom = 0x6e70e\n-\tOnblur                    Atom = 0x56d06\n+\tOnafterprint              Atom = 0x2290c\n+\tOnautocomplete            Atom = 0x2690e\n+\tOnautocompleteerror       Atom = 0x26913\n+\tOnauxclick                Atom = 0x6140a\n+\tOnbeforeprint             Atom = 0x69c0d\n+\tOnbeforeunload            Atom = 0x6e50e\n+\tOnblur                    Atom = 0x1ea06\n \tOncancel                  Atom = 0x11908\n \tOncanplay                 Atom = 0x14d09\n \tOncanplaythrough          Atom = 0x14d10\n-\tOnchange                  Atom = 0x41b08\n-\tOnclick                   Atom = 0x2f507\n-\tOnclose                   Atom = 0x36c07\n-\tOncontextmenu             Atom = 0x37e0d\n-\tOncopy                    Atom = 0x39106\n-\tOncuechange               Atom = 0x3970b\n-\tOncut                     Atom = 0x3a205\n-\tOndblclick                Atom = 0x3a70a\n-\tOndrag                    Atom = 0x3b106\n-\tOndragend                 Atom = 0x3b109\n-\tOndragenter               Atom = 0x3ba0b\n-\tOndragexit                Atom = 0x3c50a\n-\tOndragleave               Atom = 0x3df0b\n-\tOndragover                Atom = 0x3ea0a\n-\tOndragstart               Atom = 0x3f40b\n-\tOndrop                    Atom = 0x40306\n-\tOndurationchange          Atom = 0x41310\n-\tOnemptied                 Atom = 0x40a09\n-\tOnended                   Atom = 0x42307\n-\tOnerror                   Atom = 0x42a07\n-\tOnfocus                   Atom = 0x43107\n-\tOnhashchange              Atom = 0x43d0c\n-\tOninput                   Atom = 0x44907\n-\tOninvalid                 Atom = 0x45509\n-\tOnkeydown                 Atom = 0x45e09\n-\tOnkeypress                Atom = 0x46b0a\n-\tOnkeyup                   Atom = 0x48007\n-\tOnlanguagechange          Atom = 0x48d10\n-\tOnload                    Atom = 0x49d06\n-\tOnloadeddata              Atom = 0x49d0c\n-\tOnloadedmetadata          Atom = 0x4b010\n-\tOnloadend                 Atom = 0x4c609\n-\tOnloadstart               Atom = 0x4cf0b\n-\tOnmessage                 Atom = 0x4da09\n-\tOnmessageerror            Atom = 0x4da0e\n-\tOnmousedown               Atom = 0x4e80b\n-\tOnmouseenter              Atom = 0x4f30c\n-\tOnmouseleave              Atom = 0x4ff0c\n-\tOnmousemove               Atom = 0x50b0b\n-\tOnmouseout                Atom = 0x5160a\n-\tOnmouseover               Atom = 0x5230b\n-\tOnmouseup                 Atom = 0x52e09\n-\tOnmousewheel              Atom = 0x53c0c\n-\tOnoffline                 Atom = 0x54809\n-\tOnonline                  Atom = 0x55108\n-\tOnpagehide                Atom = 0x5590a\n-\tOnpageshow                Atom = 0x5730a\n-\tOnpaste                   Atom = 0x57f07\n-\tOnpause                   Atom = 0x59a07\n-\tOnplay                    Atom = 0x5a406\n-\tOnplaying                 Atom = 0x5a409\n-\tOnpopstate                Atom = 0x5ad0a\n-\tOnprogress                Atom = 0x5b70a\n-\tOnratechange              Atom = 0x5cc0c\n-\tOnrejectionhandled        Atom = 0x5d812\n-\tOnreset                   Atom = 0x5ea07\n-\tOnresize                  Atom = 0x5f108\n-\tOnscroll                  Atom = 0x60008\n-\tOnsecuritypolicyviolation Atom = 0x60819\n-\tOnseeked                  Atom = 0x62908\n-\tOnseeking                 Atom = 0x63109\n-\tOnselect                  Atom = 0x63a08\n-\tOnshow                    Atom = 0x64406\n-\tOnsort                    Atom = 0x64f06\n-\tOnstalled                 Atom = 0x65909\n-\tOnstorage                 Atom = 0x66209\n-\tOnsubmit                  Atom = 0x66b08\n-\tOnsuspend                 Atom = 0x67b09\n+\tOnchange                  Atom = 0x41508\n+\tOnclick                   Atom = 0x2e407\n+\tOnclose                   Atom = 0x36607\n+\tOncontextmenu             Atom = 0x3780d\n+\tOncopy                    Atom = 0x38b06\n+\tOncuechange               Atom = 0x3910b\n+\tOncut                     Atom = 0x39c05\n+\tOndblclick                Atom = 0x3a10a\n+\tOndrag                    Atom = 0x3ab06\n+\tOndragend                 Atom = 0x3ab09\n+\tOndragenter               Atom = 0x3b40b\n+\tOndragexit                Atom = 0x3bf0a\n+\tOndragleave               Atom = 0x3d90b\n+\tOndragover                Atom = 0x3e40a\n+\tOndragstart               Atom = 0x3ee0b\n+\tOndrop                    Atom = 0x3fd06\n+\tOndurationchange          Atom = 0x40d10\n+\tOnemptied                 Atom = 0x40409\n+\tOnended                   Atom = 0x41d07\n+\tOnerror                   Atom = 0x42407\n+\tOnfocus                   Atom = 0x42b07\n+\tOnhashchange              Atom = 0x4370c\n+\tOninput                   Atom = 0x44307\n+\tOninvalid                 Atom = 0x44f09\n+\tOnkeydown                 Atom = 0x45809\n+\tOnkeypress                Atom = 0x4650a\n+\tOnkeyup                   Atom = 0x47407\n+\tOnlanguagechange          Atom = 0x48110\n+\tOnload                    Atom = 0x49106\n+\tOnloadeddata              Atom = 0x4910c\n+\tOnloadedmetadata          Atom = 0x4a410\n+\tOnloadend                 Atom = 0x4ba09\n+\tOnloadstart               Atom = 0x4c30b\n+\tOnmessage                 Atom = 0x4ce09\n+\tOnmessageerror            Atom = 0x4ce0e\n+\tOnmousedown               Atom = 0x4dc0b\n+\tOnmouseenter              Atom = 0x4e70c\n+\tOnmouseleave              Atom = 0x4f30c\n+\tOnmousemove               Atom = 0x4ff0b\n+\tOnmouseout                Atom = 0x50a0a\n+\tOnmouseover               Atom = 0x5170b\n+\tOnmouseup                 Atom = 0x52209\n+\tOnmousewheel              Atom = 0x5300c\n+\tOnoffline                 Atom = 0x53c09\n+\tOnonline                  Atom = 0x54508\n+\tOnpagehide                Atom = 0x54d0a\n+\tOnpageshow                Atom = 0x5630a\n+\tOnpaste                   Atom = 0x56f07\n+\tOnpause                   Atom = 0x58a07\n+\tOnplay                    Atom = 0x59406\n+\tOnplaying                 Atom = 0x59409\n+\tOnpopstate                Atom = 0x59d0a\n+\tOnprogress                Atom = 0x5a70a\n+\tOnratechange              Atom = 0x5bc0c\n+\tOnrejectionhandled        Atom = 0x5c812\n+\tOnreset                   Atom = 0x5da07\n+\tOnresize                  Atom = 0x5e108\n+\tOnscroll                  Atom = 0x5f508\n+\tOnsecuritypolicyviolation Atom = 0x5fd19\n+\tOnseeked                  Atom = 0x61e08\n+\tOnseeking                 Atom = 0x62609\n+\tOnselect                  Atom = 0x62f08\n+\tOnshow                    Atom = 0x63906\n+\tOnsort                    Atom = 0x64d06\n+\tOnstalled                 Atom = 0x65709\n+\tOnstorage                 Atom = 0x66009\n+\tOnsubmit                  Atom = 0x66908\n+\tOnsuspend                 Atom = 0x67909\n \tOntimeupdate              Atom = 0x400c\n-\tOntoggle                  Atom = 0x68408\n-\tOnunhandledrejection      Atom = 0x68c14\n-\tOnunload                  Atom = 0x6ab08\n-\tOnvolumechange            Atom = 0x6b30e\n-\tOnwaiting                 Atom = 0x6c109\n-\tOnwheel                   Atom = 0x6ca07\n+\tOntoggle                  Atom = 0x68208\n+\tOnunhandledrejection      Atom = 0x68a14\n+\tOnunload                  Atom = 0x6a908\n+\tOnvolumechange            Atom = 0x6b10e\n+\tOnwaiting                 Atom = 0x6bf09\n+\tOnwheel                   Atom = 0x6c807\n \tOpen                      Atom = 0x1a304\n \tOptgroup                  Atom = 0x5f08\n-\tOptimum                   Atom = 0x6d107\n-\tOption                    Atom = 0x6e306\n-\tOutput                    Atom = 0x51d06\n+\tOptimum                   Atom = 0x6cf07\n+\tOption                    Atom = 0x6e106\n+\tOutput                    Atom = 0x51106\n \tP                         Atom = 0xc01\n \tParam                     Atom = 0xc05\n \tPattern                   Atom = 0x6607\n@@ -288,466 +288,468 @@ const (\n \tPlaceholder               Atom = 0x1310b\n \tPlaintext                 Atom = 0x1b209\n \tPlaysinline               Atom = 0x1400b\n-\tPoster                    Atom = 0x2cf06\n-\tPre                       Atom = 0x47003\n-\tPreload                   Atom = 0x48607\n-\tProgress                  Atom = 0x5b908\n-\tPrompt                    Atom = 0x53606\n-\tPublic                    Atom = 0x58606\n+\tPoster                    Atom = 0x64706\n+\tPre                       Atom = 0x46a03\n+\tPreload                   Atom = 0x47a07\n+\tProgress                  Atom = 0x5a908\n+\tPrompt                    Atom = 0x52a06\n+\tPublic                    Atom = 0x57606\n \tQ                         Atom = 0xcf01\n \tRadiogroup                Atom = 0x30a\n \tRb                        Atom = 0x3a02\n-\tReadonly                  Atom = 0x35708\n-\tReferrerpolicy            Atom = 0x3d10e\n-\tRel                       Atom = 0x48703\n-\tRequired                  Atom = 0x24c08\n+\tReadonly                  Atom = 0x35108\n+\tReferrerpolicy            Atom = 0x3cb0e\n+\tRel                       Atom = 0x47b03\n+\tRequired                  Atom = 0x23f08\n \tReversed                  Atom = 0x8008\n \tRows                      Atom = 0x9c04\n \tRowspan                   Atom = 0x9c07\n-\tRp                        Atom = 0x23c02\n+\tRp                        Atom = 0x22f02\n \tRt                        Atom = 0x19a02\n \tRtc                       Atom = 0x19a03\n \tRuby                      Atom = 0xfb04\n \tS                         Atom = 0x2501\n \tSamp                      Atom = 0x7804\n \tSandbox                   Atom = 0x12907\n-\tScope                     Atom = 0x67505\n-\tScoped                    Atom = 0x67506\n-\tScript                    Atom = 0x21806\n-\tSeamless                  Atom = 0x37108\n-\tSection                   Atom = 0x56807\n-\tSelect                    Atom = 0x63c06\n-\tSelected                  Atom = 0x63c08\n-\tShape                     Atom = 0x1e505\n-\tSize                      Atom = 0x5f504\n-\tSizes                     Atom = 0x5f505\n-\tSlot                      Atom = 0x1ef04\n-\tSmall                     Atom = 0x20605\n-\tSortable                  Atom = 0x65108\n-\tSorted                    Atom = 0x33706\n-\tSource                    Atom = 0x37806\n-\tSpacer                    Atom = 0x43706\n+\tScope                     Atom = 0x67305\n+\tScoped                    Atom = 0x67306\n+\tScript                    Atom = 0x2c406\n+\tSeamless                  Atom = 0x36b08\n+\tSearch                    Atom = 0x55c06\n+\tSection                   Atom = 0x1e507\n+\tSelect                    Atom = 0x63106\n+\tSelected                  Atom = 0x63108\n+\tShape                     Atom = 0x1f505\n+\tSize                      Atom = 0x5e504\n+\tSizes                     Atom = 0x5e505\n+\tSlot                      Atom = 0x20504\n+\tSmall                     Atom = 0x32605\n+\tSortable                  Atom = 0x64f08\n+\tSorted                    Atom = 0x37206\n+\tSource                    Atom = 0x43106\n+\tSpacer                    Atom = 0x46e06\n \tSpan                      Atom = 0x9f04\n-\tSpellcheck                Atom = 0x4740a\n-\tSrc                       Atom = 0x5c003\n-\tSrcdoc                    Atom = 0x5c006\n-\tSrclang                   Atom = 0x5f907\n-\tSrcset                    Atom = 0x6f906\n-\tStart                     Atom = 0x3fa05\n-\tStep                      Atom = 0x58304\n+\tSpellcheck                Atom = 0x5b00a\n+\tSrc                       Atom = 0x5e903\n+\tSrcdoc                    Atom = 0x5e906\n+\tSrclang                   Atom = 0x6f707\n+\tSrcset                    Atom = 0x6fe06\n+\tStart                     Atom = 0x3f405\n+\tStep                      Atom = 0x57304\n \tStrike                    Atom = 0xd206\n-\tStrong                    Atom = 0x6dd06\n-\tStyle                     Atom = 0x6ff05\n-\tSub                       Atom = 0x66d03\n-\tSummary                   Atom = 0x70407\n-\tSup                       Atom = 0x70b03\n-\tSvg                       Atom = 0x70e03\n-\tSystem                    Atom = 0x71106\n-\tTabindex                  Atom = 0x4be08\n-\tTable                     Atom = 0x59505\n-\tTarget                    Atom = 0x2c406\n+\tStrong                    Atom = 0x6db06\n+\tStyle                     Atom = 0x70405\n+\tSub                       Atom = 0x66b03\n+\tSummary                   Atom = 0x70907\n+\tSup                       Atom = 0x71003\n+\tSvg                       Atom = 0x71303\n+\tSystem                    Atom = 0x71606\n+\tTabindex                  Atom = 0x4b208\n+\tTable                     Atom = 0x58505\n+\tTarget                    Atom = 0x2b706\n \tTbody                     Atom = 0x2705\n \tTd                        Atom = 0x9202\n-\tTemplate                  Atom = 0x71408\n-\tTextarea                  Atom = 0x35208\n+\tTemplate                  Atom = 0x71908\n+\tTextarea                  Atom = 0x34c08\n \tTfoot                     Atom = 0xf505\n \tTh                        Atom = 0x15602\n-\tThead                     Atom = 0x33005\n+\tThead                     Atom = 0x31f05\n \tTime                      Atom = 0x4204\n \tTitle                     Atom = 0x11005\n \tTr                        Atom = 0xcc02\n \tTrack                     Atom = 0x1ba05\n-\tTranslate                 Atom = 0x1f209\n+\tTranslate                 Atom = 0x20809\n \tTt                        Atom = 0x6802\n \tType                      Atom = 0xd904\n-\tTypemustmatch             Atom = 0x2900d\n+\tTypemustmatch             Atom = 0x2830d\n \tU                         Atom = 0xb01\n \tUl                        Atom = 0xa702\n \tUpdateviacache            Atom = 0x460e\n-\tUsemap                    Atom = 0x59e06\n+\tUsemap                    Atom = 0x58e06\n \tValue                     Atom = 0x1505\n \tVar                       Atom = 0x16d03\n-\tVideo                     Atom = 0x2f105\n-\tWbr                       Atom = 0x57c03\n-\tWidth                     Atom = 0x64905\n-\tWorkertype                Atom = 0x71c0a\n-\tWrap                      Atom = 0x72604\n+\tVideo                     Atom = 0x2e005\n+\tWbr                       Atom = 0x56c03\n+\tWidth                     Atom = 0x63e05\n+\tWorkertype                Atom = 0x7210a\n+\tWrap                      Atom = 0x72b04\n \tXmp                       Atom = 0x12f03\n )\n \n-const hash0 = 0x81cdf10e\n+const hash0 = 0x84f70e16\n \n const maxAtomLen = 25\n \n var table = [1 << 9]Atom{\n-\t0x1:   0xe60a,  // mediagroup\n-\t0x2:   0x2e404, // lang\n-\t0x4:   0x2c09,  // accesskey\n-\t0x5:   0x8b08,  // frameset\n-\t0x7:   0x63a08, // onselect\n-\t0x8:   0x71106, // system\n-\t0xa:   0x64905, // width\n-\t0xc:   0x2890b, // formenctype\n-\t0xd:   0x13702, // ol\n-\t0xe:   0x3970b, // oncuechange\n-\t0x10:  0x14b03, // bdo\n-\t0x11:  0x11505, // audio\n-\t0x12:  0x17a09, // draggable\n-\t0x14:  0x2f105, // video\n-\t0x15:  0x2b102, // mn\n-\t0x16:  0x38704, // menu\n-\t0x17:  0x2cf06, // poster\n-\t0x19:  0xf606,  // footer\n-\t0x1a:  0x2a806, // method\n-\t0x1b:  0x2b808, // datetime\n-\t0x1c:  0x19507, // onabort\n-\t0x1d:  0x460e,  // updateviacache\n-\t0x1e:  0xff05,  // async\n-\t0x1f:  0x49d06, // onload\n-\t0x21:  0x11908, // oncancel\n-\t0x22:  0x62908, // onseeked\n-\t0x23:  0x30205, // image\n-\t0x24:  0x5d812, // onrejectionhandled\n-\t0x26:  0x17404, // link\n-\t0x27:  0x51d06, // output\n-\t0x28:  0x33104, // head\n-\t0x29:  0x4ff0c, // onmouseleave\n-\t0x2a:  0x57f07, // onpaste\n-\t0x2b:  0x5a409, // onplaying\n-\t0x2c:  0x1c407, // colspan\n-\t0x2f:  0x1bf05, // color\n-\t0x30:  0x5f504, // size\n-\t0x31:  0x2e80a, // http-equiv\n-\t0x33:  0x601,   // i\n-\t0x34:  0x5590a, // onpagehide\n-\t0x35:  0x68c14, // onunhandledrejection\n-\t0x37:  0x42a07, // onerror\n-\t0x3a:  0x3b08,  // basefont\n-\t0x3f:  0x1303,  // nav\n-\t0x40:  0x17704, // kind\n-\t0x41:  0x35708, // readonly\n-\t0x42:  0x30806, // mglyph\n-\t0x44:  0xb202,  // li\n-\t0x46:  0x2d506, // hidden\n-\t0x47:  0x70e03, // svg\n-\t0x48:  0x58304, // step\n-\t0x49:  0x23f09, // integrity\n-\t0x4a:  0x58606, // public\n-\t0x4c:  0x1ab03, // col\n-\t0x4d:  0x1870a, // blockquote\n-\t0x4e:  0x34f02, // h5\n-\t0x50:  0x5b908, // progress\n-\t0x51:  0x5f505, // sizes\n-\t0x52:  0x34502, // h4\n-\t0x56:  0x33005, // thead\n-\t0x57:  0xd607,  // keytype\n-\t0x58:  0x5b70a, // onprogress\n-\t0x59:  0x44b09, // inputmode\n-\t0x5a:  0x3b109, // ondragend\n-\t0x5d:  0x3a205, // oncut\n-\t0x5e:  0x43706, // spacer\n-\t0x5f:  0x1ab08, // colgroup\n-\t0x62:  0x16502, // is\n-\t0x65:  0x3c02,  // as\n-\t0x66:  0x54809, // onoffline\n-\t0x67:  0x33706, // sorted\n-\t0x69:  0x48d10, // onlanguagechange\n-\t0x6c:  0x43d0c, // onhashchange\n-\t0x6d:  0x9604,  // name\n-\t0x6e:  0xf505,  // tfoot\n-\t0x6f:  0x56104, // desc\n-\t0x70:  0x33d03, // max\n-\t0x72:  0x1ea06, // coords\n-\t0x73:  0x30d02, // h3\n-\t0x74:  0x6e70e, // onbeforeunload\n-\t0x75:  0x9c04,  // rows\n-\t0x76:  0x63c06, // select\n-\t0x77:  0x9805,  // meter\n-\t0x78:  0x38b06, // itemid\n-\t0x79:  0x53c0c, // onmousewheel\n-\t0x7a:  0x5c006, // srcdoc\n-\t0x7d:  0x1ba05, // track\n-\t0x7f:  0x31f08, // itemtype\n-\t0x82:  0xa402,  // mo\n-\t0x83:  0x41b08, // onchange\n-\t0x84:  0x33107, // headers\n-\t0x85:  0x5cc0c, // onratechange\n-\t0x86:  0x60819, // onsecuritypolicyviolation\n-\t0x88:  0x4a508, // datalist\n-\t0x89:  0x4e80b, // onmousedown\n-\t0x8a:  0x1ef04, // slot\n-\t0x8b:  0x4b010, // onloadedmetadata\n-\t0x8c:  0x1a06,  // accept\n-\t0x8d:  0x26806, // object\n-\t0x91:  0x6b30e, // onvolumechange\n-\t0x92:  0x2107,  // charset\n-\t0x93:  0x27613, // onautocompleteerror\n-\t0x94:  0xc113,  // allowpaymentrequest\n-\t0x95:  0x2804,  // body\n-\t0x96:  0x10a07, // default\n-\t0x97:  0x63c08, // selected\n-\t0x98:  0x21e04, // face\n-\t0x99:  0x1e505, // shape\n-\t0x9b:  0x68408, // ontoggle\n-\t0x9e:  0x64b02, // dt\n-\t0x9f:  0xb604,  // mark\n-\t0xa1:  0xb01,   // u\n-\t0xa4:  0x6ab08, // onunload\n-\t0xa5:  0x5d04,  // loop\n-\t0xa6:  0x16408, // disabled\n-\t0xaa:  0x42307, // onended\n-\t0xab:  0xb00a,  // malignmark\n-\t0xad:  0x67b09, // onsuspend\n-\t0xae:  0x35105, // mtext\n-\t0xaf:  0x64f06, // onsort\n-\t0xb0:  0x19d08, // itemprop\n-\t0xb3:  0x67109, // itemscope\n-\t0xb4:  0x17305, // blink\n-\t0xb6:  0x3b106, // ondrag\n-\t0xb7:  0xa702,  // ul\n-\t0xb8:  0x26e04, // form\n-\t0xb9:  0x12907, // sandbox\n-\t0xba:  0x8b05,  // frame\n-\t0xbb:  0x1505,  // value\n-\t0xbc:  0x66209, // onstorage\n-\t0xbf:  0xaa07,  // acronym\n-\t0xc0:  0x19a02, // rt\n-\t0xc2:  0x202,   // br\n-\t0xc3:  0x22608, // fieldset\n-\t0xc4:  0x2900d, // typemustmatch\n-\t0xc5:  0xa208,  // nomodule\n-\t0xc6:  0x6c07,  // noembed\n-\t0xc7:  0x69e0d, // onbeforeprint\n-\t0xc8:  0x19106, // button\n-\t0xc9:  0x2f507, // onclick\n-\t0xca:  0x70407, // summary\n-\t0xcd:  0xfb04,  // ruby\n-\t0xce:  0x56405, // class\n-\t0xcf:  0x3f40b, // ondragstart\n-\t0xd0:  0x23107, // caption\n-\t0xd4:  0xdd0e,  // allowusermedia\n-\t0xd5:  0x4cf0b, // onloadstart\n-\t0xd9:  0x16b03, // div\n-\t0xda:  0x4a904, // list\n-\t0xdb:  0x32e04, // math\n-\t0xdc:  0x44b05, // input\n-\t0xdf:  0x3ea0a, // ondragover\n-\t0xe0:  0x2de02, // h2\n-\t0xe2:  0x1b209, // plaintext\n-\t0xe4:  0x4f30c, // onmouseenter\n-\t0xe7:  0x47907, // checked\n-\t0xe8:  0x47003, // pre\n-\t0xea:  0x35f08, // multiple\n-\t0xeb:  0xba03,  // bdi\n-\t0xec:  0x33d09, // maxlength\n-\t0xed:  0xcf01,  // q\n-\t0xee:  0x61f0a, // onauxclick\n-\t0xf0:  0x57c03, // wbr\n-\t0xf2:  0x3b04,  // base\n-\t0xf3:  0x6e306, // option\n-\t0xf5:  0x41310, // ondurationchange\n-\t0xf7:  0x8908,  // noframes\n-\t0xf9:  0x40508, // dropzone\n-\t0xfb:  0x67505, // scope\n-\t0xfc:  0x8008,  // reversed\n-\t0xfd:  0x3ba0b, // ondragenter\n-\t0xfe:  0x3fa05, // start\n-\t0xff:  0x12f03, // xmp\n-\t0x100: 0x5f907, // srclang\n-\t0x101: 0x30703, // img\n-\t0x104: 0x101,   // b\n-\t0x105: 0x25403, // for\n-\t0x106: 0x10705, // aside\n-\t0x107: 0x44907, // oninput\n-\t0x108: 0x35604, // area\n-\t0x109: 0x2a40a, // formmethod\n-\t0x10a: 0x72604, // wrap\n-\t0x10c: 0x23c02, // rp\n-\t0x10d: 0x46b0a, // onkeypress\n-\t0x10e: 0x6802,  // tt\n-\t0x110: 0x34702, // mi\n-\t0x111: 0x36705, // muted\n-\t0x112: 0xf303,  // alt\n-\t0x113: 0x5c504, // code\n-\t0x114: 0x6e02,  // em\n-\t0x115: 0x3c50a, // ondragexit\n-\t0x117: 0x9f04,  // span\n-\t0x119: 0x6d708, // manifest\n-\t0x11a: 0x38708, // menuitem\n-\t0x11b: 0x58b07, // content\n-\t0x11d: 0x6c109, // onwaiting\n-\t0x11f: 0x4c609, // onloadend\n-\t0x121: 0x37e0d, // oncontextmenu\n-\t0x123: 0x56d06, // onblur\n-\t0x124: 0x3fc07, // article\n-\t0x125: 0x9303,  // dir\n-\t0x126: 0xef04,  // ping\n-\t0x127: 0x24c08, // required\n-\t0x128: 0x45509, // oninvalid\n-\t0x129: 0xb105,  // align\n-\t0x12b: 0x58a04, // icon\n-\t0x12c: 0x64d02, // h6\n-\t0x12d: 0x1c404, // cols\n-\t0x12e: 0x22e0a, // figcaption\n-\t0x12f: 0x45e09, // onkeydown\n-\t0x130: 0x66b08, // onsubmit\n-\t0x131: 0x14d09, // oncanplay\n-\t0x132: 0x70b03, // sup\n-\t0x133: 0xc01,   // p\n-\t0x135: 0x40a09, // onemptied\n-\t0x136: 0x39106, // oncopy\n-\t0x137: 0x19c04, // cite\n-\t0x138: 0x3a70a, // ondblclick\n-\t0x13a: 0x50b0b, // onmousemove\n-\t0x13c: 0x66d03, // sub\n-\t0x13d: 0x48703, // rel\n-\t0x13e: 0x5f08,  // optgroup\n-\t0x142: 0x9c07,  // rowspan\n-\t0x143: 0x37806, // source\n-\t0x144: 0x21608, // noscript\n-\t0x145: 0x1a304, // open\n-\t0x146: 0x20403, // ins\n-\t0x147: 0x2540d, // foreignObject\n-\t0x148: 0x5ad0a, // onpopstate\n-\t0x14a: 0x28d07, // enctype\n-\t0x14b: 0x2760e, // onautocomplete\n-\t0x14c: 0x35208, // textarea\n-\t0x14e: 0x2780c, // autocomplete\n-\t0x14f: 0x15702, // hr\n-\t0x150: 0x1de08, // controls\n-\t0x151: 0x10902, // id\n-\t0x153: 0x2360c, // onafterprint\n-\t0x155: 0x2610d, // foreignobject\n-\t0x156: 0x32707, // marquee\n-\t0x157: 0x59a07, // onpause\n-\t0x158: 0x5e602, // dl\n-\t0x159: 0x5206,  // height\n-\t0x15a: 0x34703, // min\n-\t0x15b: 0x9307,  // dirname\n-\t0x15c: 0x1f209, // translate\n-\t0x15d: 0x5604,  // html\n-\t0x15e: 0x34709, // minlength\n-\t0x15f: 0x48607, // preload\n-\t0x160: 0x71408, // template\n-\t0x161: 0x3df0b, // ondragleave\n-\t0x162: 0x3a02,  // rb\n-\t0x164: 0x5c003, // src\n-\t0x165: 0x6dd06, // strong\n-\t0x167: 0x7804,  // samp\n-\t0x168: 0x6f307, // address\n-\t0x169: 0x55108, // ononline\n-\t0x16b: 0x1310b, // placeholder\n-\t0x16c: 0x2c406, // target\n-\t0x16d: 0x20605, // small\n-\t0x16e: 0x6ca07, // onwheel\n-\t0x16f: 0x1c90a, // annotation\n-\t0x170: 0x4740a, // spellcheck\n-\t0x171: 0x7207,  // details\n-\t0x172: 0x10306, // canvas\n-\t0x173: 0x12109, // autofocus\n-\t0x174: 0xc05,   // param\n-\t0x176: 0x46308, // download\n-\t0x177: 0x45203, // del\n-\t0x178: 0x36c07, // onclose\n-\t0x179: 0xb903,  // kbd\n-\t0x17a: 0x31906, // applet\n-\t0x17b: 0x2e004, // href\n-\t0x17c: 0x5f108, // onresize\n-\t0x17e: 0x49d0c, // onloadeddata\n-\t0x180: 0xcc02,  // tr\n-\t0x181: 0x2c00a, // formtarget\n-\t0x182: 0x11005, // title\n-\t0x183: 0x6ff05, // style\n-\t0x184: 0xd206,  // strike\n-\t0x185: 0x59e06, // usemap\n-\t0x186: 0x2fc06, // iframe\n-\t0x187: 0x1004,  // main\n-\t0x189: 0x7b07,  // picture\n-\t0x18c: 0x31605, // ismap\n-\t0x18e: 0x4a504, // data\n-\t0x18f: 0x5905,  // label\n-\t0x191: 0x3d10e, // referrerpolicy\n-\t0x192: 0x15602, // th\n-\t0x194: 0x53606, // prompt\n-\t0x195: 0x56807, // section\n-\t0x197: 0x6d107, // optimum\n-\t0x198: 0x2db04, // high\n-\t0x199: 0x15c02, // h1\n-\t0x19a: 0x65909, // onstalled\n-\t0x19b: 0x16d03, // var\n-\t0x19c: 0x4204,  // time\n-\t0x19e: 0x67402, // ms\n-\t0x19f: 0x33106, // header\n-\t0x1a0: 0x4da09, // onmessage\n-\t0x1a1: 0x1a605, // nonce\n-\t0x1a2: 0x26e0a, // formaction\n-\t0x1a3: 0x22006, // center\n-\t0x1a4: 0x3704,  // nobr\n-\t0x1a5: 0x59505, // table\n-\t0x1a6: 0x4a907, // listing\n-\t0x1a7: 0x18106, // legend\n-\t0x1a9: 0x29b09, // challenge\n-\t0x1aa: 0x24806, // figure\n-\t0x1ab: 0xe605,  // media\n-\t0x1ae: 0xd904,  // type\n-\t0x1af: 0x3f04,  // font\n-\t0x1b0: 0x4da0e, // onmessageerror\n-\t0x1b1: 0x37108, // seamless\n-\t0x1b2: 0x8703,  // dfn\n-\t0x1b3: 0x5c705, // defer\n-\t0x1b4: 0xc303,  // low\n-\t0x1b5: 0x19a03, // rtc\n-\t0x1b6: 0x5230b, // onmouseover\n-\t0x1b7: 0x2b20a, // novalidate\n-\t0x1b8: 0x71c0a, // workertype\n-\t0x1ba: 0x3cd07, // itemref\n-\t0x1bd: 0x1,     // a\n-\t0x1be: 0x31803, // map\n-\t0x1bf: 0x400c,  // ontimeupdate\n-\t0x1c0: 0x15e07, // bgsound\n-\t0x1c1: 0x3206,  // keygen\n-\t0x1c2: 0x2705,  // tbody\n-\t0x1c5: 0x64406, // onshow\n-\t0x1c7: 0x2501,  // s\n-\t0x1c8: 0x6607,  // pattern\n-\t0x1cc: 0x14d10, // oncanplaythrough\n-\t0x1ce: 0x2d702, // dd\n-\t0x1cf: 0x6f906, // srcset\n-\t0x1d0: 0x17003, // big\n-\t0x1d2: 0x65108, // sortable\n-\t0x1d3: 0x48007, // onkeyup\n-\t0x1d5: 0x5a406, // onplay\n-\t0x1d7: 0x4b804, // meta\n-\t0x1d8: 0x40306, // ondrop\n-\t0x1da: 0x60008, // onscroll\n-\t0x1db: 0x1fb0b, // crossorigin\n-\t0x1dc: 0x5730a, // onpageshow\n-\t0x1dd: 0x4,     // abbr\n-\t0x1de: 0x9202,  // td\n-\t0x1df: 0x58b0f, // contenteditable\n-\t0x1e0: 0x27206, // action\n-\t0x1e1: 0x1400b, // playsinline\n-\t0x1e2: 0x43107, // onfocus\n-\t0x1e3: 0x2e008, // hreflang\n-\t0x1e5: 0x5160a, // onmouseout\n-\t0x1e6: 0x5ea07, // onreset\n-\t0x1e7: 0x13c08, // autoplay\n-\t0x1e8: 0x63109, // onseeking\n-\t0x1ea: 0x67506, // scoped\n-\t0x1ec: 0x30a,   // radiogroup\n-\t0x1ee: 0x3800b, // contextmenu\n-\t0x1ef: 0x52e09, // onmouseup\n-\t0x1f1: 0x2ca06, // hgroup\n-\t0x1f2: 0x2080f, // allowfullscreen\n-\t0x1f3: 0x4be08, // tabindex\n-\t0x1f6: 0x30f07, // isindex\n-\t0x1f7: 0x1a0e,  // accept-charset\n-\t0x1f8: 0x2ae0e, // formnovalidate\n-\t0x1fb: 0x1c90e, // annotation-xml\n-\t0x1fc: 0x6e05,  // embed\n-\t0x1fd: 0x21806, // script\n-\t0x1fe: 0xbb06,  // dialog\n-\t0x1ff: 0x1d707, // command\n+\t0x1:   0x3ff08, // dropzone\n+\t0x2:   0x3b08,  // basefont\n+\t0x3:   0x23209, // integrity\n+\t0x4:   0x43106, // source\n+\t0x5:   0x2c09,  // accesskey\n+\t0x6:   0x1a06,  // accept\n+\t0x7:   0x6c807, // onwheel\n+\t0xb:   0x47407, // onkeyup\n+\t0xc:   0x32007, // headers\n+\t0xd:   0x67306, // scoped\n+\t0xe:   0x67909, // onsuspend\n+\t0xf:   0x8908,  // noframes\n+\t0x10:  0x1fa0b, // crossorigin\n+\t0x11:  0x2e407, // onclick\n+\t0x12:  0x3f405, // start\n+\t0x13:  0x37a0b, // contextmenu\n+\t0x14:  0x5e903, // src\n+\t0x15:  0x1c404, // cols\n+\t0x16:  0xbb06,  // dialog\n+\t0x17:  0x47a07, // preload\n+\t0x18:  0x3c707, // itemref\n+\t0x1b:  0x2f105, // image\n+\t0x1d:  0x4ba09, // onloadend\n+\t0x1e:  0x45d08, // download\n+\t0x1f:  0x46a03, // pre\n+\t0x23:  0x2970a, // formmethod\n+\t0x24:  0x71303, // svg\n+\t0x25:  0xcf01,  // q\n+\t0x26:  0x64002, // dt\n+\t0x27:  0x1de08, // controls\n+\t0x2a:  0x2804,  // body\n+\t0x2b:  0xd206,  // strike\n+\t0x2c:  0x3910b, // oncuechange\n+\t0x2d:  0x4c30b, // onloadstart\n+\t0x2e:  0x2fe07, // isindex\n+\t0x2f:  0xb202,  // li\n+\t0x30:  0x1400b, // playsinline\n+\t0x31:  0x34102, // mi\n+\t0x32:  0x30806, // applet\n+\t0x33:  0x4ce09, // onmessage\n+\t0x35:  0x13702, // ol\n+\t0x36:  0x1a304, // open\n+\t0x39:  0x14d09, // oncanplay\n+\t0x3a:  0x6bf09, // onwaiting\n+\t0x3b:  0x11908, // oncancel\n+\t0x3c:  0x6a908, // onunload\n+\t0x3e:  0x53c09, // onoffline\n+\t0x3f:  0x1a0e,  // accept-charset\n+\t0x40:  0x32004, // head\n+\t0x42:  0x3ab09, // ondragend\n+\t0x43:  0x1310b, // placeholder\n+\t0x44:  0x2b30a, // formtarget\n+\t0x45:  0x2540d, // foreignobject\n+\t0x47:  0x400c,  // ontimeupdate\n+\t0x48:  0xdd0e,  // allowusermedia\n+\t0x4a:  0x69c0d, // onbeforeprint\n+\t0x4b:  0x5604,  // html\n+\t0x4c:  0x9f04,  // span\n+\t0x4d:  0x64206, // hgroup\n+\t0x4e:  0x16408, // disabled\n+\t0x4f:  0x4204,  // time\n+\t0x51:  0x42b07, // onfocus\n+\t0x53:  0xb00a,  // malignmark\n+\t0x55:  0x4650a, // onkeypress\n+\t0x56:  0x55805, // class\n+\t0x57:  0x1ab08, // colgroup\n+\t0x58:  0x33709, // maxlength\n+\t0x59:  0x5a908, // progress\n+\t0x5b:  0x70405, // style\n+\t0x5c:  0x2a10e, // formnovalidate\n+\t0x5e:  0x38b06, // oncopy\n+\t0x60:  0x26104, // form\n+\t0x61:  0xf606,  // footer\n+\t0x64:  0x30a,   // radiogroup\n+\t0x66:  0xfb04,  // ruby\n+\t0x67:  0x4ff0b, // onmousemove\n+\t0x68:  0x19d08, // itemprop\n+\t0x69:  0x2d70a, // http-equiv\n+\t0x6a:  0x15602, // th\n+\t0x6c:  0x6e02,  // em\n+\t0x6d:  0x38108, // menuitem\n+\t0x6e:  0x63106, // select\n+\t0x6f:  0x48110, // onlanguagechange\n+\t0x70:  0x31f05, // thead\n+\t0x71:  0x15c02, // h1\n+\t0x72:  0x5e906, // srcdoc\n+\t0x75:  0x9604,  // name\n+\t0x76:  0x19106, // button\n+\t0x77:  0x55504, // desc\n+\t0x78:  0x17704, // kind\n+\t0x79:  0x1bf05, // color\n+\t0x7c:  0x58e06, // usemap\n+\t0x7d:  0x30e08, // itemtype\n+\t0x7f:  0x6d508, // manifest\n+\t0x81:  0x5300c, // onmousewheel\n+\t0x82:  0x4dc0b, // onmousedown\n+\t0x84:  0xc05,   // param\n+\t0x85:  0x2e005, // video\n+\t0x86:  0x4910c, // onloadeddata\n+\t0x87:  0x6f107, // address\n+\t0x8c:  0xef04,  // ping\n+\t0x8d:  0x24703, // for\n+\t0x8f:  0x62f08, // onselect\n+\t0x90:  0x30703, // map\n+\t0x92:  0xc01,   // p\n+\t0x93:  0x8008,  // reversed\n+\t0x94:  0x54d0a, // onpagehide\n+\t0x95:  0x3206,  // keygen\n+\t0x96:  0x34109, // minlength\n+\t0x97:  0x3e40a, // ondragover\n+\t0x98:  0x42407, // onerror\n+\t0x9a:  0x2107,  // charset\n+\t0x9b:  0x29b06, // method\n+\t0x9c:  0x101,   // b\n+\t0x9d:  0x68208, // ontoggle\n+\t0x9e:  0x2bd06, // hidden\n+\t0xa0:  0x3f607, // article\n+\t0xa2:  0x63906, // onshow\n+\t0xa3:  0x64d06, // onsort\n+\t0xa5:  0x57b0f, // contenteditable\n+\t0xa6:  0x66908, // onsubmit\n+\t0xa8:  0x44f09, // oninvalid\n+\t0xaa:  0x202,   // br\n+\t0xab:  0x10902, // id\n+\t0xac:  0x5d04,  // loop\n+\t0xad:  0x5630a, // onpageshow\n+\t0xb0:  0x2cf04, // href\n+\t0xb2:  0x2210a, // figcaption\n+\t0xb3:  0x2690e, // onautocomplete\n+\t0xb4:  0x49106, // onload\n+\t0xb6:  0x9c04,  // rows\n+\t0xb7:  0x1a605, // nonce\n+\t0xb8:  0x68a14, // onunhandledrejection\n+\t0xbb:  0x21306, // center\n+\t0xbc:  0x59406, // onplay\n+\t0xbd:  0x33f02, // h5\n+\t0xbe:  0x49d07, // listing\n+\t0xbf:  0x57606, // public\n+\t0xc2:  0x23b06, // figure\n+\t0xc3:  0x57a04, // icon\n+\t0xc4:  0x1ab03, // col\n+\t0xc5:  0x47b03, // rel\n+\t0xc6:  0xe605,  // media\n+\t0xc7:  0x12109, // autofocus\n+\t0xc8:  0x19a02, // rt\n+\t0xca:  0x2d304, // lang\n+\t0xcc:  0x49908, // datalist\n+\t0xce:  0x2eb06, // iframe\n+\t0xcf:  0x36105, // muted\n+\t0xd0:  0x6140a, // onauxclick\n+\t0xd2:  0x3c02,  // as\n+\t0xd6:  0x3fd06, // ondrop\n+\t0xd7:  0x1c90a, // annotation\n+\t0xd8:  0x21908, // fieldset\n+\t0xdb:  0x2cf08, // hreflang\n+\t0xdc:  0x4e70c, // onmouseenter\n+\t0xdd:  0x2a402, // mn\n+\t0xde:  0xe60a,  // mediagroup\n+\t0xdf:  0x9805,  // meter\n+\t0xe0:  0x56c03, // wbr\n+\t0xe2:  0x63e05, // width\n+\t0xe3:  0x2290c, // onafterprint\n+\t0xe4:  0x30505, // ismap\n+\t0xe5:  0x1505,  // value\n+\t0xe7:  0x1303,  // nav\n+\t0xe8:  0x54508, // ononline\n+\t0xe9:  0xb604,  // mark\n+\t0xea:  0xc303,  // low\n+\t0xeb:  0x3ee0b, // ondragstart\n+\t0xef:  0x12f03, // xmp\n+\t0xf0:  0x22407, // caption\n+\t0xf1:  0xd904,  // type\n+\t0xf2:  0x70907, // summary\n+\t0xf3:  0x6802,  // tt\n+\t0xf4:  0x20809, // translate\n+\t0xf5:  0x1870a, // blockquote\n+\t0xf8:  0x15702, // hr\n+\t0xfa:  0x2705,  // tbody\n+\t0xfc:  0x7b07,  // picture\n+\t0xfd:  0x5206,  // height\n+\t0xfe:  0x19c04, // cite\n+\t0xff:  0x2501,  // s\n+\t0x101: 0xff05,  // async\n+\t0x102: 0x56f07, // onpaste\n+\t0x103: 0x19507, // onabort\n+\t0x104: 0x2b706, // target\n+\t0x105: 0x14b03, // bdo\n+\t0x106: 0x1f006, // coords\n+\t0x107: 0x5e108, // onresize\n+\t0x108: 0x71908, // template\n+\t0x10a: 0x3a02,  // rb\n+\t0x10b: 0x2a50a, // novalidate\n+\t0x10c: 0x460e,  // updateviacache\n+\t0x10d: 0x71003, // sup\n+\t0x10e: 0x6c07,  // noembed\n+\t0x10f: 0x16b03, // div\n+\t0x110: 0x6f707, // srclang\n+\t0x111: 0x17a09, // draggable\n+\t0x112: 0x67305, // scope\n+\t0x113: 0x5905,  // label\n+\t0x114: 0x22f02, // rp\n+\t0x115: 0x23f08, // required\n+\t0x116: 0x3780d, // oncontextmenu\n+\t0x117: 0x5e504, // size\n+\t0x118: 0x5b00a, // spellcheck\n+\t0x119: 0x3f04,  // font\n+\t0x11a: 0x9c07,  // rowspan\n+\t0x11b: 0x10a07, // default\n+\t0x11d: 0x44307, // oninput\n+\t0x11e: 0x38506, // itemid\n+\t0x11f: 0x5ee04, // code\n+\t0x120: 0xaa07,  // acronym\n+\t0x121: 0x3b04,  // base\n+\t0x125: 0x2470d, // foreignObject\n+\t0x126: 0x2ca04, // high\n+\t0x127: 0x3cb0e, // referrerpolicy\n+\t0x128: 0x33703, // max\n+\t0x129: 0x59d0a, // onpopstate\n+\t0x12a: 0x2fc02, // h4\n+\t0x12b: 0x4ac04, // meta\n+\t0x12c: 0x17305, // blink\n+\t0x12e: 0x5f508, // onscroll\n+\t0x12f: 0x59409, // onplaying\n+\t0x130: 0xc113,  // allowpaymentrequest\n+\t0x131: 0x19a03, // rtc\n+\t0x132: 0x72b04, // wrap\n+\t0x134: 0x8b08,  // frameset\n+\t0x135: 0x32605, // small\n+\t0x137: 0x32006, // header\n+\t0x138: 0x40409, // onemptied\n+\t0x139: 0x34902, // h6\n+\t0x13a: 0x35908, // multiple\n+\t0x13c: 0x52a06, // prompt\n+\t0x13f: 0x28e09, // challenge\n+\t0x141: 0x4370c, // onhashchange\n+\t0x142: 0x57b07, // content\n+\t0x143: 0x1c90e, // annotation-xml\n+\t0x144: 0x36607, // onclose\n+\t0x145: 0x14d10, // oncanplaythrough\n+\t0x148: 0x5170b, // onmouseover\n+\t0x149: 0x64f08, // sortable\n+\t0x14a: 0xa402,  // mo\n+\t0x14b: 0x2cd02, // h3\n+\t0x14c: 0x2c406, // script\n+\t0x14d: 0x41d07, // onended\n+\t0x14f: 0x64706, // poster\n+\t0x150: 0x7210a, // workertype\n+\t0x153: 0x1f505, // shape\n+\t0x154: 0x4,     // abbr\n+\t0x155: 0x1,     // a\n+\t0x156: 0x2bf02, // dd\n+\t0x157: 0x71606, // system\n+\t0x158: 0x4ce0e, // onmessageerror\n+\t0x159: 0x36b08, // seamless\n+\t0x15a: 0x2610a, // formaction\n+\t0x15b: 0x6e106, // option\n+\t0x15c: 0x31d04, // math\n+\t0x15d: 0x62609, // onseeking\n+\t0x15e: 0x39c05, // oncut\n+\t0x15f: 0x44c03, // del\n+\t0x160: 0x11005, // title\n+\t0x161: 0x11505, // audio\n+\t0x162: 0x63108, // selected\n+\t0x165: 0x3b40b, // ondragenter\n+\t0x166: 0x46e06, // spacer\n+\t0x167: 0x4a410, // onloadedmetadata\n+\t0x168: 0x44505, // input\n+\t0x16a: 0x58505, // table\n+\t0x16b: 0x41508, // onchange\n+\t0x16e: 0x5f005, // defer\n+\t0x171: 0x50a0a, // onmouseout\n+\t0x172: 0x20504, // slot\n+\t0x175: 0x3704,  // nobr\n+\t0x177: 0x1d707, // command\n+\t0x17a: 0x7207,  // details\n+\t0x17b: 0x38104, // menu\n+\t0x17c: 0xb903,  // kbd\n+\t0x17d: 0x57304, // step\n+\t0x17e: 0x20303, // ins\n+\t0x17f: 0x13c08, // autoplay\n+\t0x182: 0x34103, // min\n+\t0x183: 0x17404, // link\n+\t0x185: 0x40d10, // ondurationchange\n+\t0x186: 0x9202,  // td\n+\t0x187: 0x8b05,  // frame\n+\t0x18a: 0x2ab08, // datetime\n+\t0x18b: 0x44509, // inputmode\n+\t0x18c: 0x35108, // readonly\n+\t0x18d: 0x21104, // face\n+\t0x18f: 0x5e505, // sizes\n+\t0x191: 0x4b208, // tabindex\n+\t0x192: 0x6db06, // strong\n+\t0x193: 0xba03,  // bdi\n+\t0x194: 0x6fe06, // srcset\n+\t0x196: 0x67202, // ms\n+\t0x197: 0x5b507, // checked\n+\t0x198: 0xb105,  // align\n+\t0x199: 0x1e507, // section\n+\t0x19b: 0x6e05,  // embed\n+\t0x19d: 0x15e07, // bgsound\n+\t0x1a2: 0x49d04, // list\n+\t0x1a3: 0x61e08, // onseeked\n+\t0x1a4: 0x66009, // onstorage\n+\t0x1a5: 0x2f603, // img\n+\t0x1a6: 0xf505,  // tfoot\n+\t0x1a9: 0x26913, // onautocompleteerror\n+\t0x1aa: 0x5fd19, // onsecuritypolicyviolation\n+\t0x1ad: 0x9303,  // dir\n+\t0x1ae: 0x9307,  // dirname\n+\t0x1b0: 0x5a70a, // onprogress\n+\t0x1b2: 0x65709, // onstalled\n+\t0x1b5: 0x66f09, // itemscope\n+\t0x1b6: 0x49904, // data\n+\t0x1b7: 0x3d90b, // ondragleave\n+\t0x1b8: 0x56102, // h2\n+\t0x1b9: 0x2f706, // mglyph\n+\t0x1ba: 0x16502, // is\n+\t0x1bb: 0x6e50e, // onbeforeunload\n+\t0x1bc: 0x2830d, // typemustmatch\n+\t0x1bd: 0x3ab06, // ondrag\n+\t0x1be: 0x5da07, // onreset\n+\t0x1c0: 0x51106, // output\n+\t0x1c1: 0x12907, // sandbox\n+\t0x1c2: 0x1b209, // plaintext\n+\t0x1c4: 0x34c08, // textarea\n+\t0x1c7: 0xd607,  // keytype\n+\t0x1c8: 0x34b05, // mtext\n+\t0x1c9: 0x6b10e, // onvolumechange\n+\t0x1ca: 0x1ea06, // onblur\n+\t0x1cb: 0x58a07, // onpause\n+\t0x1cd: 0x5bc0c, // onratechange\n+\t0x1ce: 0x10705, // aside\n+\t0x1cf: 0x6cf07, // optimum\n+\t0x1d1: 0x45809, // onkeydown\n+\t0x1d2: 0x1c407, // colspan\n+\t0x1d3: 0x1004,  // main\n+\t0x1d4: 0x66b03, // sub\n+\t0x1d5: 0x25b06, // object\n+\t0x1d6: 0x55c06, // search\n+\t0x1d7: 0x37206, // sorted\n+\t0x1d8: 0x17003, // big\n+\t0x1d9: 0xb01,   // u\n+\t0x1db: 0x26b0c, // autocomplete\n+\t0x1dc: 0xcc02,  // tr\n+\t0x1dd: 0xf303,  // alt\n+\t0x1df: 0x7804,  // samp\n+\t0x1e0: 0x5c812, // onrejectionhandled\n+\t0x1e1: 0x4f30c, // onmouseleave\n+\t0x1e2: 0x28007, // enctype\n+\t0x1e3: 0xa208,  // nomodule\n+\t0x1e5: 0x3280f, // allowfullscreen\n+\t0x1e6: 0x5f08,  // optgroup\n+\t0x1e8: 0x27c0b, // formenctype\n+\t0x1e9: 0x18106, // legend\n+\t0x1ea: 0x10306, // canvas\n+\t0x1eb: 0x6607,  // pattern\n+\t0x1ec: 0x2c208, // noscript\n+\t0x1ed: 0x601,   // i\n+\t0x1ee: 0x5d602, // dl\n+\t0x1ef: 0xa702,  // ul\n+\t0x1f2: 0x52209, // onmouseup\n+\t0x1f4: 0x1ba05, // track\n+\t0x1f7: 0x3a10a, // ondblclick\n+\t0x1f8: 0x3bf0a, // ondragexit\n+\t0x1fa: 0x8703,  // dfn\n+\t0x1fc: 0x26506, // action\n+\t0x1fd: 0x35004, // area\n+\t0x1fe: 0x31607, // marquee\n+\t0x1ff: 0x16d03, // var\n }\n \n const atomText = \"abbradiogrouparamainavalueaccept-charsetbodyaccesskeygenobrb\" +\n@@ -758,26 +760,26 @@ const atomText = \"abbradiogrouparamainavalueaccept-charsetbodyaccesskeygenobrb\"\n \t\"dboxmplaceholderautoplaysinlinebdoncanplaythrough1bgsoundisa\" +\n \t\"bledivarbigblinkindraggablegendblockquotebuttonabortcitempro\" +\n \t\"penoncecolgrouplaintextrackcolorcolspannotation-xmlcommandco\" +\n-\t\"ntrolshapecoordslotranslatecrossoriginsmallowfullscreenoscri\" +\n-\t\"ptfacenterfieldsetfigcaptionafterprintegrityfigurequiredfore\" +\n-\t\"ignObjectforeignobjectformactionautocompleteerrorformenctype\" +\n-\t\"mustmatchallengeformmethodformnovalidatetimeformtargethgroup\" +\n-\t\"osterhiddenhigh2hreflanghttp-equivideonclickiframeimageimgly\" +\n-\t\"ph3isindexismappletitemtypemarqueematheadersortedmaxlength4m\" +\n-\t\"inlength5mtextareadonlymultiplemutedoncloseamlessourceoncont\" +\n-\t\"extmenuitemidoncopyoncuechangeoncutondblclickondragendondrag\" +\n-\t\"enterondragexitemreferrerpolicyondragleaveondragoverondragst\" +\n-\t\"articleondropzonemptiedondurationchangeonendedonerroronfocus\" +\n-\t\"paceronhashchangeoninputmodeloninvalidonkeydownloadonkeypres\" +\n-\t\"spellcheckedonkeyupreloadonlanguagechangeonloadeddatalisting\" +\n-\t\"onloadedmetadatabindexonloadendonloadstartonmessageerroronmo\" +\n-\t\"usedownonmouseenteronmouseleaveonmousemoveonmouseoutputonmou\" +\n-\t\"seoveronmouseupromptonmousewheelonofflineononlineonpagehides\" +\n-\t\"classectionbluronpageshowbronpastepublicontenteditableonpaus\" +\n-\t\"emaponplayingonpopstateonprogressrcdocodeferonratechangeonre\" +\n-\t\"jectionhandledonresetonresizesrclangonscrollonsecuritypolicy\" +\n-\t\"violationauxclickonseekedonseekingonselectedonshowidth6onsor\" +\n-\t\"tableonstalledonstorageonsubmitemscopedonsuspendontoggleonun\" +\n-\t\"handledrejectionbeforeprintonunloadonvolumechangeonwaitingon\" +\n-\t\"wheeloptimumanifestrongoptionbeforeunloaddressrcsetstylesumm\" +\n-\t\"arysupsvgsystemplateworkertypewrap\"\n+\t\"ntrolsectionblurcoordshapecrossoriginslotranslatefacenterfie\" +\n+\t\"ldsetfigcaptionafterprintegrityfigurequiredforeignObjectfore\" +\n+\t\"ignobjectformactionautocompleteerrorformenctypemustmatchalle\" +\n+\t\"ngeformmethodformnovalidatetimeformtargethiddenoscripthigh3h\" +\n+\t\"reflanghttp-equivideonclickiframeimageimglyph4isindexismappl\" +\n+\t\"etitemtypemarqueematheadersmallowfullscreenmaxlength5minleng\" +\n+\t\"th6mtextareadonlymultiplemutedoncloseamlessortedoncontextmen\" +\n+\t\"uitemidoncopyoncuechangeoncutondblclickondragendondragentero\" +\n+\t\"ndragexitemreferrerpolicyondragleaveondragoverondragstarticl\" +\n+\t\"eondropzonemptiedondurationchangeonendedonerroronfocusourceo\" +\n+\t\"nhashchangeoninputmodeloninvalidonkeydownloadonkeypresspacer\" +\n+\t\"onkeyupreloadonlanguagechangeonloadeddatalistingonloadedmeta\" +\n+\t\"databindexonloadendonloadstartonmessageerroronmousedownonmou\" +\n+\t\"seenteronmouseleaveonmousemoveonmouseoutputonmouseoveronmous\" +\n+\t\"eupromptonmousewheelonofflineononlineonpagehidesclassearch2o\" +\n+\t\"npageshowbronpastepublicontenteditableonpausemaponplayingonp\" +\n+\t\"opstateonprogresspellcheckedonratechangeonrejectionhandledon\" +\n+\t\"resetonresizesrcdocodeferonscrollonsecuritypolicyviolationau\" +\n+\t\"xclickonseekedonseekingonselectedonshowidthgrouposteronsorta\" +\n+\t\"bleonstalledonstorageonsubmitemscopedonsuspendontoggleonunha\" +\n+\t\"ndledrejectionbeforeprintonunloadonvolumechangeonwaitingonwh\" +\n+\t\"eeloptimumanifestrongoptionbeforeunloaddressrclangsrcsetstyl\" +\n+\t\"esummarysupsvgsystemplateworkertypewrap\""
    },
    {
      "sha": "518ee4c94e7498da110263ef680b7c4adae8f024",
      "filename": "backend/vendor/golang.org/x/net/html/parse.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -924,7 +924,7 @@ func inBodyIM(p *parser) bool {\n \t\t\tp.addElement()\n \t\t\tp.im = inFramesetIM\n \t\t\treturn true\n-\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Center, a.Details, a.Dialog, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Main, a.Menu, a.Nav, a.Ol, a.P, a.Section, a.Summary, a.Ul:\n+\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Center, a.Details, a.Dialog, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Main, a.Menu, a.Nav, a.Ol, a.P, a.Search, a.Section, a.Summary, a.Ul:\n \t\t\tp.popUntil(buttonScope, a.P)\n \t\t\tp.addElement()\n \t\tcase a.H1, a.H2, a.H3, a.H4, a.H5, a.H6:\n@@ -1136,7 +1136,7 @@ func inBodyIM(p *parser) bool {\n \t\t\t\treturn false\n \t\t\t}\n \t\t\treturn true\n-\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Button, a.Center, a.Details, a.Dialog, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Listing, a.Main, a.Menu, a.Nav, a.Ol, a.Pre, a.Section, a.Summary, a.Ul:\n+\t\tcase a.Address, a.Article, a.Aside, a.Blockquote, a.Button, a.Center, a.Details, a.Dialog, a.Dir, a.Div, a.Dl, a.Fieldset, a.Figcaption, a.Figure, a.Footer, a.Header, a.Hgroup, a.Listing, a.Main, a.Menu, a.Nav, a.Ol, a.Pre, a.Search, a.Section, a.Summary, a.Ul:\n \t\t\tp.popUntil(defaultScope, p.tok.DataAtom)\n \t\tcase a.Form:\n \t\t\tif p.oe.contains(a.Template) {"
    },
    {
      "sha": "6598c1f7b320fbb19ebf73af7e4c752a4f8ba508",
      "filename": "backend/vendor/golang.org/x/net/html/token.go",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Ftoken.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Ftoken.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Ftoken.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -839,8 +839,22 @@ func (z *Tokenizer) readStartTag() TokenType {\n \tif raw {\n \t\tz.rawTag = strings.ToLower(string(z.buf[z.data.start:z.data.end]))\n \t}\n-\t// Look for a self-closing token like \"<br/>\".\n-\tif z.err == nil && z.buf[z.raw.end-2] == '/' {\n+\t// Look for a self-closing token (e.g. <br/>).\n+\t//\n+\t// Originally, we did this by just checking that the last character of the\n+\t// tag (ignoring the closing bracket) was a solidus (/) character, but this\n+\t// is not always accurate.\n+\t//\n+\t// We need to be careful that we don't misinterpret a non-self-closing tag\n+\t// as self-closing, as can happen if the tag contains unquoted attribute\n+\t// values (i.e. <p a=/>).\n+\t//\n+\t// To avoid this, we check that the last non-bracket character of the tag\n+\t// (z.raw.end-2) isn't the same character as the last non-quote character of\n+\t// the last attribute of the tag (z.pendingAttr[1].end-1), if the tag has\n+\t// attributes.\n+\tnAttrs := len(z.attr)\n+\tif z.err == nil && z.buf[z.raw.end-2] == '/' && (nAttrs == 0 || z.raw.end-2 != z.attr[nAttrs-1][1].end-1) {\n \t\treturn SelfClosingTagToken\n \t}\n \treturn StartTagToken"
    },
    {
      "sha": "d6e575e1ff38b2c714900ec83ba52dbb2bee9328",
      "filename": "backend/vendor/golang.org/x/oauth2/endpoints/endpoints.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -35,6 +35,12 @@ var Cern = oauth2.Endpoint{\n \tTokenURL: \"https://oauth.web.cern.ch/OAuth/Token\",\n }\n \n+// Discord is the endpoint for Discord.\n+var Discord = oauth2.Endpoint{\n+\tAuthURL:  \"https://discord.com/oauth2/authorize\",\n+\tTokenURL: \"https://discord.com/api/oauth2/token\",\n+}\n+\n // Facebook is the endpoint for Facebook.\n var Facebook = oauth2.Endpoint{\n \tAuthURL:  \"https://www.facebook.com/v3.2/dialog/oauth\",\n@@ -146,6 +152,12 @@ var Odnoklassniki = oauth2.Endpoint{\n \tTokenURL: \"https://api.odnoklassniki.ru/oauth/token.do\",\n }\n \n+// Patreon is the endpoint for Patreon.\n+var Patreon = oauth2.Endpoint{\n+\tAuthURL:  \"https://www.patreon.com/oauth2/authorize\",\n+\tTokenURL: \"https://www.patreon.com/api/oauth2/token\",\n+}\n+\n // PayPal is the endpoint for PayPal.\n var PayPal = oauth2.Endpoint{\n \tAuthURL:  \"https://www.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\","
    },
    {
      "sha": "0260935bab7453982f18066d8fe690e20447bc7a",
      "filename": "backend/vendor/golang.org/x/oauth2/google/default.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fdefault.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fdefault.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fdefault.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -251,6 +251,12 @@ func FindDefaultCredentials(ctx context.Context, scopes ...string) (*Credentials\n // a Google Developers service account key file, a gcloud user credentials file (a.k.a. refresh\n // token JSON), or the JSON configuration file for workload identity federation in non-Google cloud\n // platforms (see https://cloud.google.com/iam/docs/how-to#using-workload-identity-federation).\n+//\n+// Important: If you accept a credential configuration (credential JSON/File/Stream) from an\n+// external source for authentication to Google Cloud Platform, you must validate it before\n+// providing it to any Google API or library. Providing an unvalidated credential configuration to\n+// Google APIs can compromise the security of your systems and data. For more information, refer to\n+// [Validate credential configurations from external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n func CredentialsFromJSONWithParams(ctx context.Context, jsonData []byte, params CredentialsParams) (*Credentials, error) {\n \t// Make defensive copy of the slices in params.\n \tparams = params.deepCopy()\n@@ -294,6 +300,12 @@ func CredentialsFromJSONWithParams(ctx context.Context, jsonData []byte, params\n }\n \n // CredentialsFromJSON invokes CredentialsFromJSONWithParams with the specified scopes.\n+//\n+// Important: If you accept a credential configuration (credential JSON/File/Stream) from an\n+// external source for authentication to Google Cloud Platform, you must validate it before\n+// providing it to any Google API or library. Providing an unvalidated credential configuration to\n+// Google APIs can compromise the security of your systems and data. For more information, refer to\n+// [Validate credential configurations from external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n func CredentialsFromJSON(ctx context.Context, jsonData []byte, scopes ...string) (*Credentials, error) {\n \tvar params CredentialsParams\n \tparams.Scopes = scopes"
    },
    {
      "sha": "55d59999e0e861d06c4b740b8aa3477cb8f82148",
      "filename": "backend/vendor/golang.org/x/oauth2/google/externalaccount/aws.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Faws.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Faws.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Faws.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -28,7 +28,7 @@ import (\n \n // AwsSecurityCredentials models AWS security credentials.\n type AwsSecurityCredentials struct {\n-\t// AccessKeyId is the AWS Access Key ID - Required.\n+\t// AccessKeyID is the AWS Access Key ID - Required.\n \tAccessKeyID string `json:\"AccessKeyID\"`\n \t// SecretAccessKey is the AWS Secret Access Key - Required.\n \tSecretAccessKey string `json:\"SecretAccessKey\"`"
    },
    {
      "sha": "aa0bba2eb3d78f02432a5b6c11937e64e69164c0",
      "filename": "backend/vendor/golang.org/x/oauth2/google/externalaccount/basecredentials.go",
      "status": "modified",
      "additions": 34,
      "deletions": 2,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Fbasecredentials.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Fbasecredentials.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fgoogle%2Fexternalaccount%2Fbasecredentials.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -263,7 +263,7 @@ const (\n \tfileTypeJSON = \"json\"\n )\n \n-// Format contains information needed to retireve a subject token for URL or File sourced credentials.\n+// Format contains information needed to retrieve a subject token for URL or File sourced credentials.\n type Format struct {\n \t// Type should be either \"text\" or \"json\". This determines whether the file or URL sourced credentials\n \t// expect a simple text subject token or if the subject token will be contained in a JSON object.\n@@ -278,20 +278,52 @@ type Format struct {\n type CredentialSource struct {\n \t// File is the location for file sourced credentials.\n \t// One field amongst File, URL, Executable, or EnvironmentID should be provided, depending on the kind of credential in question.\n+\t//\n+\t// Important: If you accept a credential configuration (credential\n+\t// JSON/File/Stream) from an external source for authentication to Google\n+\t// Cloud Platform, you must validate it before providing it to any Google\n+\t// API or library. Providing an unvalidated credential configuration to\n+\t// Google APIs can compromise the security of your systems and data. For\n+\t// more information, refer to [Validate credential configurations from\n+\t// external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n \tFile string `json:\"file\"`\n \n \t// Url is the URL to call for URL sourced credentials.\n \t// One field amongst File, URL, Executable, or EnvironmentID should be provided, depending on the kind of credential in question.\n+\t//\n+\t// Important: If you accept a credential configuration (credential\n+\t// JSON/File/Stream) from an external source for authentication to Google\n+\t// Cloud Platform, you must validate it before providing it to any Google\n+\t// API or library. Providing an unvalidated credential configuration to\n+\t// Google APIs can compromise the security of your systems and data. For\n+\t// more information, refer to [Validate credential configurations from\n+\t// external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n \tURL string `json:\"url\"`\n \t// Headers are the headers to attach to the request for URL sourced credentials.\n \tHeaders map[string]string `json:\"headers\"`\n \n \t// Executable is the configuration object for executable sourced credentials.\n \t// One field amongst File, URL, Executable, or EnvironmentID should be provided, depending on the kind of credential in question.\n+\t//\n+\t// Important: If you accept a credential configuration (credential\n+\t// JSON/File/Stream) from an external source for authentication to Google\n+\t// Cloud Platform, you must validate it before providing it to any Google\n+\t// API or library. Providing an unvalidated credential configuration to\n+\t// Google APIs can compromise the security of your systems and data. For\n+\t// more information, refer to [Validate credential configurations from\n+\t// external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n \tExecutable *ExecutableConfig `json:\"executable\"`\n \n \t// EnvironmentID is the EnvironmentID used for AWS sourced credentials. This should start with \"AWS\".\n \t// One field amongst File, URL, Executable, or EnvironmentID should be provided, depending on the kind of credential in question.\n+\t//\n+\t// Important: If you accept a credential configuration (credential\n+\t// JSON/File/Stream) from an external source for authentication to Google\n+\t// Cloud Platform, you must validate it before providing it to any Google\n+\t// API or library. Providing an unvalidated credential configuration to\n+\t// Google APIs can compromise the security of your systems and data. For\n+\t// more information, refer to [Validate credential configurations from\n+\t// external sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).\n \tEnvironmentID string `json:\"environment_id\"`\n \t// RegionURL is the metadata URL to retrieve the region from for EC2 AWS credentials.\n \tRegionURL string `json:\"region_url\"`\n@@ -329,7 +361,7 @@ type SubjectTokenSupplier interface {\n type AwsSecurityCredentialsSupplier interface {\n \t// AwsRegion should return the AWS region or an error.\n \tAwsRegion(ctx context.Context, options SupplierOptions) (string, error)\n-\t// GetAwsSecurityCredentials should return a valid set of AwsSecurityCredentials or an error.\n+\t// AwsSecurityCredentials should return a valid set of AwsSecurityCredentials or an error.\n \t// The external account token source does not cache the returned security credentials, so caching\n \t// logic should be implemented in the supplier to prevent multiple requests for the same security credentials.\n \tAwsSecurityCredentials(ctx context.Context, options SupplierOptions) (*AwsSecurityCredentials, error)"
    },
    {
      "sha": "27ab06139aaeaff4e4138edc8e3578230de5e4b4",
      "filename": "backend/vendor/golang.org/x/oauth2/jws/jws.go",
      "status": "modified",
      "additions": 25,
      "deletions": 9,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fjws%2Fjws.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fjws%2Fjws.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fjws%2Fjws.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -116,12 +116,12 @@ func (h *Header) encode() (string, error) {\n // Decode decodes a claim set from a JWS payload.\n func Decode(payload string) (*ClaimSet, error) {\n \t// decode returned id token to get expiry\n-\ts := strings.Split(payload, \".\")\n-\tif len(s) < 2 {\n+\t_, claims, _, ok := parseToken(payload)\n+\tif !ok {\n \t\t// TODO(jbd): Provide more context about the error.\n \t\treturn nil, errors.New(\"jws: invalid token received\")\n \t}\n-\tdecoded, err := base64.RawURLEncoding.DecodeString(s[1])\n+\tdecoded, err := base64.RawURLEncoding.DecodeString(claims)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -165,18 +165,34 @@ func Encode(header *Header, c *ClaimSet, key *rsa.PrivateKey) (string, error) {\n // Verify tests whether the provided JWT token's signature was produced by the private key\n // associated with the supplied public key.\n func Verify(token string, key *rsa.PublicKey) error {\n-\tparts := strings.Split(token, \".\")\n-\tif len(parts) != 3 {\n+\theader, claims, sig, ok := parseToken(token)\n+\tif !ok {\n \t\treturn errors.New(\"jws: invalid token received, token must have 3 parts\")\n \t}\n-\n-\tsignedContent := parts[0] + \".\" + parts[1]\n-\tsignatureString, err := base64.RawURLEncoding.DecodeString(parts[2])\n+\tsignatureString, err := base64.RawURLEncoding.DecodeString(sig)\n \tif err != nil {\n \t\treturn err\n \t}\n \n \th := sha256.New()\n-\th.Write([]byte(signedContent))\n+\th.Write([]byte(header + tokenDelim + claims))\n \treturn rsa.VerifyPKCS1v15(key, crypto.SHA256, h.Sum(nil), signatureString)\n }\n+\n+func parseToken(s string) (header, claims, sig string, ok bool) {\n+\theader, s, ok = strings.Cut(s, tokenDelim)\n+\tif !ok { // no period found\n+\t\treturn \"\", \"\", \"\", false\n+\t}\n+\tclaims, s, ok = strings.Cut(s, tokenDelim)\n+\tif !ok { // only one period found\n+\t\treturn \"\", \"\", \"\", false\n+\t}\n+\tsig, _, ok = strings.Cut(s, tokenDelim)\n+\tif ok { // three periods found\n+\t\treturn \"\", \"\", \"\", false\n+\t}\n+\treturn header, claims, sig, true\n+}\n+\n+const tokenDelim = \".\""
    },
    {
      "sha": "eacdd7fd9336e1773273b39fb59db87d20b0a56d",
      "filename": "backend/vendor/golang.org/x/oauth2/oauth2.go",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Foauth2.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Foauth2.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Foauth2.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -56,7 +56,7 @@ type Config struct {\n \t// the OAuth flow, after the resource owner's URLs.\n \tRedirectURL string\n \n-\t// Scope specifies optional requested permissions.\n+\t// Scopes specifies optional requested permissions.\n \tScopes []string\n \n \t// authStyleCache caches which auth style to use when Endpoint.AuthStyle is\n@@ -288,7 +288,7 @@ func (tf *tokenRefresher) Token() (*Token, error) {\n \tif tf.refreshToken != tk.RefreshToken {\n \t\ttf.refreshToken = tk.RefreshToken\n \t}\n-\treturn tk, err\n+\treturn tk, nil\n }\n \n // reuseTokenSource is a TokenSource that holds a single token in memory\n@@ -356,11 +356,15 @@ func NewClient(ctx context.Context, src TokenSource) *http.Client {\n \tif src == nil {\n \t\treturn internal.ContextClient(ctx)\n \t}\n+\tcc := internal.ContextClient(ctx)\n \treturn &http.Client{\n \t\tTransport: &Transport{\n-\t\t\tBase:   internal.ContextClient(ctx).Transport,\n+\t\t\tBase:   cc.Transport,\n \t\t\tSource: ReuseTokenSource(nil, src),\n \t\t},\n+\t\tCheckRedirect: cc.CheckRedirect,\n+\t\tJar:           cc.Jar,\n+\t\tTimeout:       cc.Timeout,\n \t}\n }\n "
    },
    {
      "sha": "6a95da975ce35dd9de545f8ce5d3d405fd14e6c4",
      "filename": "backend/vendor/golang.org/x/oauth2/pkce.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fpkce.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fpkce.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fpkce.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -21,7 +21,7 @@ const (\n //\n // A fresh verifier should be generated for each authorization.\n // S256ChallengeOption(verifier) should then be passed to Config.AuthCodeURL\n-// (or Config.DeviceAccess) and VerifierOption(verifier) to Config.Exchange\n+// (or Config.DeviceAuth) and VerifierOption(verifier) to Config.Exchange\n // (or Config.DeviceAccessToken).\n func GenerateVerifier() string {\n \t// \"RECOMMENDED that the output of a suitable random number generator be\n@@ -51,7 +51,7 @@ func S256ChallengeFromVerifier(verifier string) string {\n }\n \n // S256ChallengeOption derives a PKCE code challenge derived from verifier with\n-// method S256. It should be passed to Config.AuthCodeURL or Config.DeviceAccess\n+// method S256. It should be passed to Config.AuthCodeURL or Config.DeviceAuth\n // only.\n func S256ChallengeOption(verifier string) AuthCodeOption {\n \treturn challengeOption{"
    },
    {
      "sha": "8c31136c402e58ad1ceac7e4878547e761727328",
      "filename": "backend/vendor/golang.org/x/oauth2/token.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -169,7 +169,7 @@ func tokenFromInternal(t *internal.Token) *Token {\n \n // retrieveToken takes a *Config and uses that to retrieve an *internal.Token.\n // This token is then mapped from *internal.Token into an *oauth2.Token which is returned along\n-// with an error..\n+// with an error.\n func retrieveToken(ctx context.Context, c *Config, v url.Values) (*Token, error) {\n \ttk, err := internal.RetrieveToken(ctx, c.ClientID, c.ClientSecret, c.Endpoint.TokenURL, v, internal.AuthStyle(c.Endpoint.AuthStyle), c.authStyleCache.Get())\n \tif err != nil {"
    },
    {
      "sha": "f8c3c092658fec60811794c6146edf4e1d9129ea",
      "filename": "backend/vendor/golang.org/x/sync/errgroup/errgroup.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsync%2Ferrgroup%2Ferrgroup.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsync%2Ferrgroup%2Ferrgroup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsync%2Ferrgroup%2Ferrgroup.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -18,7 +18,7 @@ import (\n type token struct{}\n \n // A Group is a collection of goroutines working on subtasks that are part of\n-// the same overall task.\n+// the same overall task. A Group should not be reused for different tasks.\n //\n // A zero Group is valid, has no limit on the number of active goroutines,\n // and does not cancel on error.\n@@ -61,6 +61,7 @@ func (g *Group) Wait() error {\n }\n \n // Go calls the given function in a new goroutine.\n+// The first call to Go must happen before a Wait.\n // It blocks until the new goroutine can be added without the number of\n // active goroutines in the group exceeding the configured limit.\n //"
    },
    {
      "sha": "2e73ee1975277af4f6c04f5ef7985ede60838927",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -149,6 +149,18 @@ var ARM struct {\n \t_           CacheLinePad\n }\n \n+// The booleans in Loong64 contain the correspondingly named cpu feature bit.\n+// The struct is padded to avoid false sharing.\n+var Loong64 struct {\n+\t_         CacheLinePad\n+\tHasLSX    bool // support 128-bit vector extension\n+\tHasLASX   bool // support 256-bit vector extension\n+\tHasCRC32  bool // support CRC instruction\n+\tHasLAM_BH bool // support AM{SWAP/ADD}[_DB].{B/H} instruction\n+\tHasLAMCAS bool // support AMCAS[_DB].{B/H/W/D} instruction\n+\t_         CacheLinePad\n+}\n+\n // MIPS64X contains the supported CPU features of the current mips64/mips64le\n // platforms. If the current platform is not mips64/mips64le or the current\n // operating system is not Linux then all feature flags are false."
    },
    {
      "sha": "4f34114329eae0065c3204c42f07f29b33b6b838",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_loong64.go",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_loong64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_loong64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_loong64.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2025 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+// HWCAP bits. These are exposed by the Linux kernel.\n+const (\n+\thwcap_LOONGARCH_LSX  = 1 << 4\n+\thwcap_LOONGARCH_LASX = 1 << 5\n+)\n+\n+func doinit() {\n+\t// TODO: Features that require kernel support like LSX and LASX can\n+\t// be detected here once needed in std library or by the compiler.\n+\tLoong64.HasLSX = hwcIsSet(hwCap, hwcap_LOONGARCH_LSX)\n+\tLoong64.HasLASX = hwcIsSet(hwCap, hwcap_LOONGARCH_LASX)\n+}\n+\n+func hwcIsSet(hwc uint, val uint) bool {\n+\treturn hwc&val != 0\n+}"
    },
    {
      "sha": "a428dec9cde9418c90ec01780f9beaa3099ac19c",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_noinit.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-//go:build linux && !arm && !arm64 && !mips64 && !mips64le && !ppc64 && !ppc64le && !s390x && !riscv64\n+//go:build linux && !arm && !arm64 && !loong64 && !mips64 && !mips64le && !ppc64 && !ppc64le && !s390x && !riscv64\n \n package cpu\n "
    },
    {
      "sha": "45ecb29ae78a51903b4c32c08932869c8d3d6daa",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_loong64.go",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -8,5 +8,43 @@ package cpu\n \n const cacheLineSize = 64\n \n+// Bit fields for CPUCFG registers, Related reference documents:\n+// https://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html#_cpucfg\n+const (\n+\t// CPUCFG1 bits\n+\tcpucfg1_CRC32 = 1 << 25\n+\n+\t// CPUCFG2 bits\n+\tcpucfg2_LAM_BH = 1 << 27\n+\tcpucfg2_LAMCAS = 1 << 28\n+)\n+\n func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"lsx\", Feature: &Loong64.HasLSX},\n+\t\t{Name: \"lasx\", Feature: &Loong64.HasLASX},\n+\t\t{Name: \"crc32\", Feature: &Loong64.HasCRC32},\n+\t\t{Name: \"lam_bh\", Feature: &Loong64.HasLAM_BH},\n+\t\t{Name: \"lamcas\", Feature: &Loong64.HasLAMCAS},\n+\t}\n+\n+\t// The CPUCFG data on Loong64 only reflects the hardware capabilities,\n+\t// not the kernel support status, so features such as LSX and LASX that\n+\t// require kernel support cannot be obtained from the CPUCFG data.\n+\t//\n+\t// These features only require hardware capability support and do not\n+\t// require kernel specific support, so they can be obtained directly\n+\t// through CPUCFG\n+\tcfg1 := get_cpucfg(1)\n+\tcfg2 := get_cpucfg(2)\n+\n+\tLoong64.HasCRC32 = cfgIsSet(cfg1, cpucfg1_CRC32)\n+\tLoong64.HasLAMCAS = cfgIsSet(cfg2, cpucfg2_LAMCAS)\n+\tLoong64.HasLAM_BH = cfgIsSet(cfg2, cpucfg2_LAM_BH)\n+}\n+\n+func get_cpucfg(reg uint32) uint32\n+\n+func cfgIsSet(cfg uint32, val uint32) bool {\n+\treturn cfg&val != 0\n }"
    },
    {
      "sha": "71cbaf1ce276de1d6a3842d6a2c830866eb8f6ea",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_loong64.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.s?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2025 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include \"textflag.h\"\n+\n+// func get_cpucfg(reg uint32) uint32\n+TEXT ·get_cpucfg(SB), NOSPLIT|NOFRAME, $0\n+\tMOVW\treg+0(FP), R5\n+\t// CPUCFG R5, R4 = 0x00006ca4\n+\tWORD\t$0x00006ca4\n+\tMOVW\tR4, ret+8(FP)\n+\tRET"
    },
    {
      "sha": "56a7e1a176f92e2af954c69289d5c16b54c3029d",
      "filename": "backend/vendor/golang.org/x/sys/cpu/parse.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -13,15 +13,15 @@ import \"strconv\"\n // https://golang.org/cl/209597.\n func parseRelease(rel string) (major, minor, patch int, ok bool) {\n \t// Strip anything after a dash or plus.\n-\tfor i := 0; i < len(rel); i++ {\n+\tfor i := range len(rel) {\n \t\tif rel[i] == '-' || rel[i] == '+' {\n \t\t\trel = rel[:i]\n \t\t\tbreak\n \t\t}\n \t}\n \n \tnext := func() (int, bool) {\n-\t\tfor i := 0; i < len(rel); i++ {\n+\t\tfor i := range len(rel) {\n \t\t\tif rel[i] == '.' {\n \t\t\t\tver, err := strconv.Atoi(rel[:i])\n \t\t\t\trel = rel[i+1:]"
    },
    {
      "sha": "798f61ad3bf97d34df8c993500c12166f90039c3",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "status": "modified",
      "additions": 148,
      "deletions": 1,
      "changes": 149,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_darwin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_darwin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_darwin.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -602,7 +602,150 @@ func Connectx(fd int, srcIf uint32, srcAddr, dstAddr Sockaddr, associd SaeAssocI\n \treturn\n }\n \n-//sys\tconnectx(fd int, endpoints *SaEndpoints, associd SaeAssocID, flags uint32, iov []Iovec, n *uintptr, connid *SaeConnID) (err error)\n+// sys\tconnectx(fd int, endpoints *SaEndpoints, associd SaeAssocID, flags uint32, iov []Iovec, n *uintptr, connid *SaeConnID) (err error)\n+const minIovec = 8\n+\n+func Readv(fd int, iovs [][]byte) (n int, err error) {\n+\tif !darwinKernelVersionMin(11, 0, 0) {\n+\t\treturn 0, ENOSYS\n+\t}\n+\n+\tiovecs := make([]Iovec, 0, minIovec)\n+\tiovecs = appendBytes(iovecs, iovs)\n+\tn, err = readv(fd, iovecs)\n+\treadvRacedetect(iovecs, n, err)\n+\treturn n, err\n+}\n+\n+func Preadv(fd int, iovs [][]byte, offset int64) (n int, err error) {\n+\tif !darwinKernelVersionMin(11, 0, 0) {\n+\t\treturn 0, ENOSYS\n+\t}\n+\tiovecs := make([]Iovec, 0, minIovec)\n+\tiovecs = appendBytes(iovecs, iovs)\n+\tn, err = preadv(fd, iovecs, offset)\n+\treadvRacedetect(iovecs, n, err)\n+\treturn n, err\n+}\n+\n+func Writev(fd int, iovs [][]byte) (n int, err error) {\n+\tif !darwinKernelVersionMin(11, 0, 0) {\n+\t\treturn 0, ENOSYS\n+\t}\n+\n+\tiovecs := make([]Iovec, 0, minIovec)\n+\tiovecs = appendBytes(iovecs, iovs)\n+\tif raceenabled {\n+\t\traceReleaseMerge(unsafe.Pointer(&ioSync))\n+\t}\n+\tn, err = writev(fd, iovecs)\n+\twritevRacedetect(iovecs, n)\n+\treturn n, err\n+}\n+\n+func Pwritev(fd int, iovs [][]byte, offset int64) (n int, err error) {\n+\tif !darwinKernelVersionMin(11, 0, 0) {\n+\t\treturn 0, ENOSYS\n+\t}\n+\n+\tiovecs := make([]Iovec, 0, minIovec)\n+\tiovecs = appendBytes(iovecs, iovs)\n+\tif raceenabled {\n+\t\traceReleaseMerge(unsafe.Pointer(&ioSync))\n+\t}\n+\tn, err = pwritev(fd, iovecs, offset)\n+\twritevRacedetect(iovecs, n)\n+\treturn n, err\n+}\n+\n+func appendBytes(vecs []Iovec, bs [][]byte) []Iovec {\n+\tfor _, b := range bs {\n+\t\tvar v Iovec\n+\t\tv.SetLen(len(b))\n+\t\tif len(b) > 0 {\n+\t\t\tv.Base = &b[0]\n+\t\t} else {\n+\t\t\tv.Base = (*byte)(unsafe.Pointer(&_zero))\n+\t\t}\n+\t\tvecs = append(vecs, v)\n+\t}\n+\treturn vecs\n+}\n+\n+func writevRacedetect(iovecs []Iovec, n int) {\n+\tif !raceenabled {\n+\t\treturn\n+\t}\n+\tfor i := 0; n > 0 && i < len(iovecs); i++ {\n+\t\tm := int(iovecs[i].Len)\n+\t\tif m > n {\n+\t\t\tm = n\n+\t\t}\n+\t\tn -= m\n+\t\tif m > 0 {\n+\t\t\traceReadRange(unsafe.Pointer(iovecs[i].Base), m)\n+\t\t}\n+\t}\n+}\n+\n+func readvRacedetect(iovecs []Iovec, n int, err error) {\n+\tif !raceenabled {\n+\t\treturn\n+\t}\n+\tfor i := 0; n > 0 && i < len(iovecs); i++ {\n+\t\tm := int(iovecs[i].Len)\n+\t\tif m > n {\n+\t\t\tm = n\n+\t\t}\n+\t\tn -= m\n+\t\tif m > 0 {\n+\t\t\traceWriteRange(unsafe.Pointer(iovecs[i].Base), m)\n+\t\t}\n+\t}\n+\tif err == nil {\n+\t\traceAcquire(unsafe.Pointer(&ioSync))\n+\t}\n+}\n+\n+func darwinMajorMinPatch() (maj, min, patch int, err error) {\n+\tvar un Utsname\n+\terr = Uname(&un)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tvar mmp [3]int\n+\tc := 0\n+Loop:\n+\tfor _, b := range un.Release[:] {\n+\t\tswitch {\n+\t\tcase b >= '0' && b <= '9':\n+\t\t\tmmp[c] = 10*mmp[c] + int(b-'0')\n+\t\tcase b == '.':\n+\t\t\tc++\n+\t\t\tif c > 2 {\n+\t\t\t\treturn 0, 0, 0, ENOTSUP\n+\t\t\t}\n+\t\tcase b == 0:\n+\t\t\tbreak Loop\n+\t\tdefault:\n+\t\t\treturn 0, 0, 0, ENOTSUP\n+\t\t}\n+\t}\n+\tif c != 2 {\n+\t\treturn 0, 0, 0, ENOTSUP\n+\t}\n+\treturn mmp[0], mmp[1], mmp[2], nil\n+}\n+\n+func darwinKernelVersionMin(maj, min, patch int) bool {\n+\tactualMaj, actualMin, actualPatch, err := darwinMajorMinPatch()\n+\tif err != nil {\n+\t\treturn false\n+\t}\n+\treturn actualMaj > maj || actualMaj == maj && (actualMin > min || actualMin == min && actualPatch >= patch)\n+}\n+\n //sys\tsendfile(infd int, outfd int, offset int64, len *int64, hdtr unsafe.Pointer, flags int) (err error)\n \n //sys\tshmat(id int, addr uintptr, flag int) (ret uintptr, err error)\n@@ -705,3 +848,7 @@ func Connectx(fd int, srcIf uint32, srcAddr, dstAddr Sockaddr, associd SaeAssocI\n //sys\twrite(fd int, p []byte) (n int, err error)\n //sys\tmmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error)\n //sys\tmunmap(addr uintptr, length uintptr) (err error)\n+//sys\treadv(fd int, iovecs []Iovec) (n int, err error)\n+//sys\tpreadv(fd int, iovecs []Iovec, offset int64) (n int, err error)\n+//sys\twritev(fd int, iovecs []Iovec) (n int, err error)\n+//sys\tpwritev(fd int, iovecs []Iovec, offset int64) (n int, err error)"
    },
    {
      "sha": "4958a657085bcde240ca296bc15e7f6404095ead",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_linux.go",
      "status": "modified",
      "additions": 16,
      "deletions": 26,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_linux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fsyscall_linux.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -13,6 +13,7 @@ package unix\n \n import (\n \t\"encoding/binary\"\n+\t\"slices\"\n \t\"strconv\"\n \t\"syscall\"\n \t\"time\"\n@@ -417,7 +418,7 @@ func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {\n \t\treturn nil, 0, EINVAL\n \t}\n \tsa.raw.Family = AF_UNIX\n-\tfor i := 0; i < n; i++ {\n+\tfor i := range n {\n \t\tsa.raw.Path[i] = int8(name[i])\n \t}\n \t// length is family (uint16), name, NUL.\n@@ -507,7 +508,7 @@ func (sa *SockaddrL2) sockaddr() (unsafe.Pointer, _Socklen, error) {\n \tpsm := (*[2]byte)(unsafe.Pointer(&sa.raw.Psm))\n \tpsm[0] = byte(sa.PSM)\n \tpsm[1] = byte(sa.PSM >> 8)\n-\tfor i := 0; i < len(sa.Addr); i++ {\n+\tfor i := range len(sa.Addr) {\n \t\tsa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]\n \t}\n \tcid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))\n@@ -589,11 +590,11 @@ func (sa *SockaddrCAN) sockaddr() (unsafe.Pointer, _Socklen, error) {\n \tsa.raw.Family = AF_CAN\n \tsa.raw.Ifindex = int32(sa.Ifindex)\n \trx := (*[4]byte)(unsafe.Pointer(&sa.RxID))\n-\tfor i := 0; i < 4; i++ {\n+\tfor i := range 4 {\n \t\tsa.raw.Addr[i] = rx[i]\n \t}\n \ttx := (*[4]byte)(unsafe.Pointer(&sa.TxID))\n-\tfor i := 0; i < 4; i++ {\n+\tfor i := range 4 {\n \t\tsa.raw.Addr[i+4] = tx[i]\n \t}\n \treturn unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil\n@@ -618,11 +619,11 @@ func (sa *SockaddrCANJ1939) sockaddr() (unsafe.Pointer, _Socklen, error) {\n \tsa.raw.Family = AF_CAN\n \tsa.raw.Ifindex = int32(sa.Ifindex)\n \tn := (*[8]byte)(unsafe.Pointer(&sa.Name))\n-\tfor i := 0; i < 8; i++ {\n+\tfor i := range 8 {\n \t\tsa.raw.Addr[i] = n[i]\n \t}\n \tp := (*[4]byte)(unsafe.Pointer(&sa.PGN))\n-\tfor i := 0; i < 4; i++ {\n+\tfor i := range 4 {\n \t\tsa.raw.Addr[i+8] = p[i]\n \t}\n \tsa.raw.Addr[12] = sa.Addr\n@@ -911,7 +912,7 @@ func (sa *SockaddrIUCV) sockaddr() (unsafe.Pointer, _Socklen, error) {\n \t// These are EBCDIC encoded by the kernel, but we still need to pad them\n \t// with blanks. Initializing with blanks allows the caller to feed in either\n \t// a padded or an unpadded string.\n-\tfor i := 0; i < 8; i++ {\n+\tfor i := range 8 {\n \t\tsa.raw.Nodeid[i] = ' '\n \t\tsa.raw.User_id[i] = ' '\n \t\tsa.raw.Name[i] = ' '\n@@ -1148,7 +1149,7 @@ func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {\n \t\tvar user [8]byte\n \t\tvar name [8]byte\n \n-\t\tfor i := 0; i < 8; i++ {\n+\t\tfor i := range 8 {\n \t\t\tuser[i] = byte(pp.User_id[i])\n \t\t\tname[i] = byte(pp.Name[i])\n \t\t}\n@@ -1173,11 +1174,11 @@ func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {\n \t\t\t\tIfindex: int(pp.Ifindex),\n \t\t\t}\n \t\t\tname := (*[8]byte)(unsafe.Pointer(&sa.Name))\n-\t\t\tfor i := 0; i < 8; i++ {\n+\t\t\tfor i := range 8 {\n \t\t\t\tname[i] = pp.Addr[i]\n \t\t\t}\n \t\t\tpgn := (*[4]byte)(unsafe.Pointer(&sa.PGN))\n-\t\t\tfor i := 0; i < 4; i++ {\n+\t\t\tfor i := range 4 {\n \t\t\t\tpgn[i] = pp.Addr[i+8]\n \t\t\t}\n \t\t\taddr := (*[1]byte)(unsafe.Pointer(&sa.Addr))\n@@ -1188,11 +1189,11 @@ func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {\n \t\t\t\tIfindex: int(pp.Ifindex),\n \t\t\t}\n \t\t\trx := (*[4]byte)(unsafe.Pointer(&sa.RxID))\n-\t\t\tfor i := 0; i < 4; i++ {\n+\t\t\tfor i := range 4 {\n \t\t\t\trx[i] = pp.Addr[i]\n \t\t\t}\n \t\t\ttx := (*[4]byte)(unsafe.Pointer(&sa.TxID))\n-\t\t\tfor i := 0; i < 4; i++ {\n+\t\t\tfor i := range 4 {\n \t\t\t\ttx[i] = pp.Addr[i+4]\n \t\t\t}\n \t\t\treturn sa, nil\n@@ -2216,10 +2217,7 @@ func readvRacedetect(iovecs []Iovec, n int, err error) {\n \t\treturn\n \t}\n \tfor i := 0; n > 0 && i < len(iovecs); i++ {\n-\t\tm := int(iovecs[i].Len)\n-\t\tif m > n {\n-\t\t\tm = n\n-\t\t}\n+\t\tm := min(int(iovecs[i].Len), n)\n \t\tn -= m\n \t\tif m > 0 {\n \t\t\traceWriteRange(unsafe.Pointer(iovecs[i].Base), m)\n@@ -2270,10 +2268,7 @@ func writevRacedetect(iovecs []Iovec, n int) {\n \t\treturn\n \t}\n \tfor i := 0; n > 0 && i < len(iovecs); i++ {\n-\t\tm := int(iovecs[i].Len)\n-\t\tif m > n {\n-\t\t\tm = n\n-\t\t}\n+\t\tm := min(int(iovecs[i].Len), n)\n \t\tn -= m\n \t\tif m > 0 {\n \t\t\traceReadRange(unsafe.Pointer(iovecs[i].Base), m)\n@@ -2320,12 +2315,7 @@ func isGroupMember(gid int) bool {\n \t\treturn false\n \t}\n \n-\tfor _, g := range groups {\n-\t\tif g == gid {\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\treturn false\n+\treturn slices.Contains(groups, gid)\n }\n \n func isCapDacOverrideSet() bool {"
    },
    {
      "sha": "813c05b6647bbc274760ab15f1a697577c72fc3f",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_darwin_amd64.go",
      "status": "modified",
      "additions": 84,
      "deletions": 0,
      "changes": 84,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -2512,6 +2512,90 @@ var libc_munmap_trampoline_addr uintptr\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func readv(fd int, iovecs []Iovec) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall(libc_readv_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_readv_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_readv readv \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func preadv(fd int, iovecs []Iovec, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall6(libc_preadv_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)), uintptr(offset), 0, 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_preadv_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_preadv preadv \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func writev(fd int, iovecs []Iovec) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall(libc_writev_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_writev_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_writev writev \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func pwritev(fd int, iovecs []Iovec, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall6(libc_pwritev_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)), uintptr(offset), 0, 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_pwritev_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_pwritev pwritev \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Fstat(fd int, stat *Stat_t) (err error) {\n \t_, _, e1 := syscall_syscall(libc_fstat64_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)\n \tif e1 != 0 {"
    },
    {
      "sha": "fda328582b2be4fc8e1f607c5fa22293f10dfd40",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_darwin_amd64.s",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_amd64.s?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -738,6 +738,26 @@ TEXT libc_munmap_trampoline<>(SB),NOSPLIT,$0-0\n GLOBL\t·libc_munmap_trampoline_addr(SB), RODATA, $8\n DATA\t·libc_munmap_trampoline_addr(SB)/8, $libc_munmap_trampoline<>(SB)\n \n+TEXT libc_readv_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_readv(SB)\n+GLOBL\t·libc_readv_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_readv_trampoline_addr(SB)/8, $libc_readv_trampoline<>(SB)\n+\n+TEXT libc_preadv_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_preadv(SB)\n+GLOBL\t·libc_preadv_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_preadv_trampoline_addr(SB)/8, $libc_preadv_trampoline<>(SB)\n+\n+TEXT libc_writev_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_writev(SB)\n+GLOBL\t·libc_writev_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_writev_trampoline_addr(SB)/8, $libc_writev_trampoline<>(SB)\n+\n+TEXT libc_pwritev_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_pwritev(SB)\n+GLOBL\t·libc_pwritev_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_pwritev_trampoline_addr(SB)/8, $libc_pwritev_trampoline<>(SB)\n+\n TEXT libc_fstat64_trampoline<>(SB),NOSPLIT,$0-0\n \tJMP\tlibc_fstat64(SB)\n GLOBL\t·libc_fstat64_trampoline_addr(SB), RODATA, $8"
    },
    {
      "sha": "e6f58f3c6f4fb860f212d64b8a03cc0ef4817b1e",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_darwin_arm64.go",
      "status": "modified",
      "additions": 84,
      "deletions": 0,
      "changes": 84,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -2512,6 +2512,90 @@ var libc_munmap_trampoline_addr uintptr\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func readv(fd int, iovecs []Iovec) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall(libc_readv_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_readv_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_readv readv \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func preadv(fd int, iovecs []Iovec, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall6(libc_preadv_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)), uintptr(offset), 0, 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_preadv_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_preadv preadv \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func writev(fd int, iovecs []Iovec) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall(libc_writev_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_writev_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_writev writev \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func pwritev(fd int, iovecs []Iovec, offset int64) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(iovecs) > 0 {\n+\t\t_p0 = unsafe.Pointer(&iovecs[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := syscall_syscall6(libc_pwritev_trampoline_addr, uintptr(fd), uintptr(_p0), uintptr(len(iovecs)), uintptr(offset), 0, 0)\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+var libc_pwritev_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_pwritev pwritev \"/usr/lib/libSystem.B.dylib\"\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Fstat(fd int, stat *Stat_t) (err error) {\n \t_, _, e1 := syscall_syscall(libc_fstat_trampoline_addr, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)\n \tif e1 != 0 {"
    },
    {
      "sha": "7f8998b905b917572465655d9ee6dd30ee422c93",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_darwin_arm64.s",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Funix%2Fzsyscall_darwin_arm64.s?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -738,6 +738,26 @@ TEXT libc_munmap_trampoline<>(SB),NOSPLIT,$0-0\n GLOBL\t·libc_munmap_trampoline_addr(SB), RODATA, $8\n DATA\t·libc_munmap_trampoline_addr(SB)/8, $libc_munmap_trampoline<>(SB)\n \n+TEXT libc_readv_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_readv(SB)\n+GLOBL\t·libc_readv_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_readv_trampoline_addr(SB)/8, $libc_readv_trampoline<>(SB)\n+\n+TEXT libc_preadv_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_preadv(SB)\n+GLOBL\t·libc_preadv_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_preadv_trampoline_addr(SB)/8, $libc_preadv_trampoline<>(SB)\n+\n+TEXT libc_writev_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_writev(SB)\n+GLOBL\t·libc_writev_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_writev_trampoline_addr(SB)/8, $libc_writev_trampoline<>(SB)\n+\n+TEXT libc_pwritev_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_pwritev(SB)\n+GLOBL\t·libc_pwritev_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_pwritev_trampoline_addr(SB)/8, $libc_pwritev_trampoline<>(SB)\n+\n TEXT libc_fstat_trampoline<>(SB),NOSPLIT,$0-0\n \tJMP\tlibc_fstat(SB)\n GLOBL\t·libc_fstat_trampoline_addr(SB), RODATA, $8"
    },
    {
      "sha": "39aeeb644f5512ef68ab3741e16d2a1d5643895a",
      "filename": "backend/vendor/golang.org/x/sys/windows/registry/key.go",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fkey.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fkey.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fkey.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -164,7 +164,12 @@ loopItems:\n func CreateKey(k Key, path string, access uint32) (newk Key, openedExisting bool, err error) {\n \tvar h syscall.Handle\n \tvar d uint32\n-\terr = regCreateKeyEx(syscall.Handle(k), syscall.StringToUTF16Ptr(path),\n+\tvar pathPointer *uint16\n+\tpathPointer, err = syscall.UTF16PtrFromString(path)\n+\tif err != nil {\n+\t\treturn 0, false, err\n+\t}\n+\terr = regCreateKeyEx(syscall.Handle(k), pathPointer,\n \t\t0, nil, _REG_OPTION_NON_VOLATILE, access, nil, &h, &d)\n \tif err != nil {\n \t\treturn 0, false, err\n@@ -174,7 +179,11 @@ func CreateKey(k Key, path string, access uint32) (newk Key, openedExisting bool\n \n // DeleteKey deletes the subkey path of key k and its values.\n func DeleteKey(k Key, path string) error {\n-\treturn regDeleteKey(syscall.Handle(k), syscall.StringToUTF16Ptr(path))\n+\tpathPointer, err := syscall.UTF16PtrFromString(path)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn regDeleteKey(syscall.Handle(k), pathPointer)\n }\n \n // A KeyInfo describes the statistics of a key. It is returned by Stat."
    },
    {
      "sha": "a1bcbb2362cc488e562928eeda6df743758d2099",
      "filename": "backend/vendor/golang.org/x/sys/windows/registry/value.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fvalue.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fvalue.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Fregistry%2Fvalue.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -340,7 +340,11 @@ func (k Key) SetBinaryValue(name string, value []byte) error {\n \n // DeleteValue removes a named value from the key k.\n func (k Key) DeleteValue(name string) error {\n-\treturn regDeleteValue(syscall.Handle(k), syscall.StringToUTF16Ptr(name))\n+\tnamePointer, err := syscall.UTF16PtrFromString(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn regDeleteValue(syscall.Handle(k), namePointer)\n }\n \n // ReadValueNames returns the value names of key k."
    },
    {
      "sha": "ad67df2fdb6f51b8075e7bd79621b69c6d6d7cdc",
      "filename": "backend/vendor/golang.org/x/sys/windows/types_windows.go",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Ftypes_windows.go",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Ftypes_windows.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fwindows%2Ftypes_windows.go?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -1074,6 +1074,7 @@ const (\n \tIP_ADD_MEMBERSHIP  = 0xc\n \tIP_DROP_MEMBERSHIP = 0xd\n \tIP_PKTINFO         = 0x13\n+\tIP_MTU_DISCOVER    = 0x47\n \n \tIPV6_V6ONLY         = 0x1b\n \tIPV6_UNICAST_HOPS   = 0x4\n@@ -1083,6 +1084,7 @@ const (\n \tIPV6_JOIN_GROUP     = 0xc\n \tIPV6_LEAVE_GROUP    = 0xd\n \tIPV6_PKTINFO        = 0x13\n+\tIPV6_MTU_DISCOVER   = 0x47\n \n \tMSG_OOB       = 0x1\n \tMSG_PEEK      = 0x2\n@@ -1132,6 +1134,15 @@ const (\n \tWSASYS_STATUS_LEN  = 128\n )\n \n+// enum PMTUD_STATE from ws2ipdef.h\n+const (\n+\tIP_PMTUDISC_NOT_SET = 0\n+\tIP_PMTUDISC_DO      = 1\n+\tIP_PMTUDISC_DONT    = 2\n+\tIP_PMTUDISC_PROBE   = 3\n+\tIP_PMTUDISC_MAX     = 4\n+)\n+\n type WSABuf struct {\n \tLen uint32\n \tBuf *byte\n@@ -1146,6 +1157,22 @@ type WSAMsg struct {\n \tFlags       uint32\n }\n \n+type WSACMSGHDR struct {\n+\tLen   uintptr\n+\tLevel int32\n+\tType  int32\n+}\n+\n+type IN_PKTINFO struct {\n+\tAddr    [4]byte\n+\tIfindex uint32\n+}\n+\n+type IN6_PKTINFO struct {\n+\tAddr    [16]byte\n+\tIfindex uint32\n+}\n+\n // Flags for WSASocket\n const (\n \tWSA_FLAG_OVERLAPPED             = 0x01"
    },
    {
      "sha": "4e33a104cef8bd8544b2014232096f5fb48c5e1e",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fmodules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/242499787eaf075ae64cdf33d802c6cd5f3ee4d9/backend%2Fvendor%2Fmodules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fmodules.txt?ref=242499787eaf075ae64cdf33d802c6cd5f3ee4d9",
      "patch": "@@ -67,13 +67,13 @@ github.com/go-chi/cors\n # github.com/go-chi/render v1.0.3\n ## explicit; go 1.16\n github.com/go-chi/render\n-# github.com/go-oauth2/oauth2/v4 v4.5.2\n+# github.com/go-oauth2/oauth2/v4 v4.5.3\n ## explicit; go 1.13\n github.com/go-oauth2/oauth2/v4\n github.com/go-oauth2/oauth2/v4/errors\n github.com/go-oauth2/oauth2/v4/server\n-# github.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba\n-## explicit; go 1.21\n+# github.com/go-pkgz/auth/v2 v2.0.1-0.20250415030422-4f9f2c5e3b0d\n+## explicit; go 1.23.0\n github.com/go-pkgz/auth/v2\n github.com/go-pkgz/auth/v2/avatar\n github.com/go-pkgz/auth/v2/logger\n@@ -94,8 +94,8 @@ github.com/go-pkgz/jrpc\n ## explicit; go 1.21\n github.com/go-pkgz/lcw/v2\n github.com/go-pkgz/lcw/v2/eventbus\n-# github.com/go-pkgz/lgr v0.11.1\n-## explicit; go 1.20\n+# github.com/go-pkgz/lgr v0.12.0\n+## explicit; go 1.21\n github.com/go-pkgz/lgr\n # github.com/go-pkgz/notify v1.2.0\n ## explicit; go 1.21\n@@ -104,7 +104,7 @@ github.com/go-pkgz/notify\n ## explicit; go 1.20\n github.com/go-pkgz/repeater\n github.com/go-pkgz/repeater/strategy\n-# github.com/go-pkgz/rest v1.20.2\n+# github.com/go-pkgz/rest v1.20.3\n ## explicit; go 1.21\n github.com/go-pkgz/rest\n github.com/go-pkgz/rest/logger\n@@ -115,7 +115,7 @@ github.com/go-pkgz/syncs\n # github.com/golang-jwt/jwt/v5 v5.2.2\n ## explicit; go 1.18\n github.com/golang-jwt/jwt/v5\n-# github.com/golang/snappy v0.0.4\n+# github.com/golang/snappy v1.0.0\n ## explicit\n github.com/golang/snappy\n # github.com/google/uuid v1.6.0\n@@ -145,12 +145,13 @@ github.com/hashicorp/golang-lru/v2/simplelru\n # github.com/jessevdk/go-flags v1.6.1\n ## explicit; go 1.20\n github.com/jessevdk/go-flags\n-# github.com/klauspost/compress v1.17.11\n-## explicit; go 1.21\n+# github.com/klauspost/compress v1.18.0\n+## explicit; go 1.22\n github.com/klauspost/compress\n github.com/klauspost/compress/fse\n github.com/klauspost/compress/huff0\n github.com/klauspost/compress/internal/cpuinfo\n+github.com/klauspost/compress/internal/le\n github.com/klauspost/compress/internal/snapref\n github.com/klauspost/compress/zstd\n github.com/klauspost/compress/zstd/internal/xxhash\n@@ -221,7 +222,7 @@ go.etcd.io/bbolt\n go.etcd.io/bbolt/errors\n go.etcd.io/bbolt/internal/common\n go.etcd.io/bbolt/internal/freelist\n-# go.mongodb.org/mongo-driver v1.17.1\n+# go.mongodb.org/mongo-driver v1.17.3\n ## explicit; go 1.18\n go.mongodb.org/mongo-driver/bson\n go.mongodb.org/mongo-driver/bson/bsoncodec\n@@ -275,7 +276,7 @@ go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage\n ## explicit; go 1.20\n go.uber.org/goleak\n go.uber.org/goleak/internal/stack\n-# golang.org/x/crypto v0.36.0\n+# golang.org/x/crypto v0.37.0\n ## explicit; go 1.23.0\n golang.org/x/crypto/acme\n golang.org/x/crypto/acme/autocert\n@@ -286,17 +287,17 @@ golang.org/x/crypto/blowfish\n golang.org/x/crypto/ocsp\n golang.org/x/crypto/pbkdf2\n golang.org/x/crypto/scrypt\n-# golang.org/x/image v0.25.0\n+# golang.org/x/image v0.26.0\n ## explicit; go 1.23.0\n golang.org/x/image/draw\n golang.org/x/image/math/f64\n-# golang.org/x/net v0.37.0\n+# golang.org/x/net v0.39.0\n ## explicit; go 1.23.0\n golang.org/x/net/html\n golang.org/x/net/html/atom\n golang.org/x/net/idna\n-# golang.org/x/oauth2 v0.24.0\n-## explicit; go 1.18\n+# golang.org/x/oauth2 v0.29.0\n+## explicit; go 1.23.0\n golang.org/x/oauth2\n golang.org/x/oauth2/authhandler\n golang.org/x/oauth2/endpoints\n@@ -312,17 +313,17 @@ golang.org/x/oauth2/jws\n golang.org/x/oauth2/jwt\n golang.org/x/oauth2/microsoft\n golang.org/x/oauth2/yandex\n-# golang.org/x/sync v0.12.0\n+# golang.org/x/sync v0.13.0\n ## explicit; go 1.23.0\n golang.org/x/sync/errgroup\n golang.org/x/sync/singleflight\n-# golang.org/x/sys v0.31.0\n+# golang.org/x/sys v0.32.0\n ## explicit; go 1.23.0\n golang.org/x/sys/cpu\n golang.org/x/sys/unix\n golang.org/x/sys/windows\n golang.org/x/sys/windows/registry\n-# golang.org/x/text v0.23.0\n+# golang.org/x/text v0.24.0\n ## explicit; go 1.23.0\n golang.org/x/text/secure/bidirule\n golang.org/x/text/transform"
    }
  ]
}
