{
  "sha": "8ff3f5e875612c6bda796507cf286c440f6d7530",
  "node_id": "C_kwDOCQOkhNoAKDhmZjNmNWU4NzU2MTJjNmJkYTc5NjUwN2NmMjg2YzQ0MGY2ZDc1MzA",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-02-13T16:17:32Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-02-13T16:21:48Z"
    },
    "message": "refactor(dao): validate the args of the `FindCreateUser` function",
    "tree": {
      "sha": "7cb33ba4733cd74e5f1d58b55a239ce27bb95004",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/7cb33ba4733cd74e5f1d58b55a239ce27bb95004"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/8ff3f5e875612c6bda796507cf286c440f6d7530",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZcuXHwAKCRDUbg8O6nwT\napUlAPsE4R5Eglzl7A/WzqdgAmW7LWJHjxawPJA83qqPyeucwwD/VgYpMJYPIuRp\nVGeAWyBszDJF1XvGMLshjN+MYXPVPgs=\n=npt2\n-----END PGP SIGNATURE-----",
      "payload": "tree 7cb33ba4733cd74e5f1d58b55a239ce27bb95004\nparent 640fa7ded4c79be80b3105c0db9b3d33e1404b88\nauthor qwqcode <qwqcode@gmail.com> 1707841052 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1707841308 +0800\n\nrefactor(dao): validate the args of the `FindCreateUser` function\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/8ff3f5e875612c6bda796507cf286c440f6d7530",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/8ff3f5e875612c6bda796507cf286c440f6d7530",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/8ff3f5e875612c6bda796507cf286c440f6d7530/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/640fa7ded4c79be80b3105c0db9b3d33e1404b88",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/640fa7ded4c79be80b3105c0db9b3d33e1404b88"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 67,
    "deletions": 18
  },
  "files": [
    {
      "sha": "2616a4d76a1c889b74b271da52f1f83e1079fe69",
      "filename": "README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/README.md",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/README.md",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/README.md?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -71,7 +71,7 @@ import Artalk from 'artalk'\n Artalk.init({\n   el:      '#Comments',\n   site:    'Artalk 的博客',\n-  server:  'https://artalk.example.com'\n+  server:  'https://artalk.example.com',\n   pageKey: '/2018/10/02/hello-world.html'\n })\n ```"
    },
    {
      "sha": "8ce5469e1785eb2982f986c00c955eb6a134475e",
      "filename": "internal/artransfer/importer.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fartransfer%2Fimporter.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fartransfer%2Fimporter.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fartransfer%2Fimporter.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -106,8 +106,8 @@ func importArtrans(dao *dao.Dao, params *ImportParams, comments []*entity.Artran\n \t\t}\n \n \t\t// 准备 user\n-\t\tuser := dao.FindCreateUser(c.Nick, c.Email, c.Link)\n-\t\tif !user.IsAdmin {\n+\t\tuser, err := dao.FindCreateUser(c.Nick, c.Email, c.Link)\n+\t\tif err == nil && !user.IsAdmin {\n \t\t\tuserModified := false\n \t\t\tif c.BadgeName != \"\" && c.BadgeName != user.BadgeName {\n \t\t\t\tuser.BadgeName = c.BadgeName"
    },
    {
      "sha": "8bcfab486836db22cd565d4d4b6f3fba9e41d547",
      "filename": "internal/dao/query_find_create.go",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_find_create.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_find_create.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find_create.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -1,7 +1,11 @@\n package dao\n \n import (\n+\t\"fmt\"\n+\t\"strings\"\n+\n \t\"github.com/ArtalkJS/Artalk/internal/entity\"\n+\t\"github.com/ArtalkJS/Artalk/internal/utils\"\n )\n \n func (dao *Dao) FindCreateSite(siteName string) entity.Site {\n@@ -20,12 +24,27 @@ func (dao *Dao) FindCreatePage(pageKey string, pageTitle string, siteName string\n \treturn page\n }\n \n-func (dao *Dao) FindCreateUser(name string, email string, link string) entity.User {\n-\tuser := dao.FindUser(name, email)\n+func (dao *Dao) FindCreateUser(name string, email string, link string) (user entity.User, err error) {\n+\tname = strings.TrimSpace(name)\n+\temail = strings.TrimSpace(email)\n+\tlink = strings.TrimSpace(link)\n+\tif name == \"\" || email == \"\" {\n+\t\treturn entity.User{}, fmt.Errorf(\"name and email are required\")\n+\t}\n+\tif !utils.ValidateEmail(email) {\n+\t\treturn entity.User{}, fmt.Errorf(\"email is invalid\")\n+\t}\n+\tif link != \"\" && !utils.ValidateURL(link) {\n+\t\tlink = \"\"\n+\t}\n+\tuser = dao.FindUser(name, email)\n \tif user.IsEmpty() {\n-\t\tuser = dao.NewUser(name, email, link) // save a new user\n+\t\tuser, err = dao.NewUser(name, email, link) // save a new user\n+\t\tif err != nil {\n+\t\t\treturn entity.User{}, err\n+\t\t}\n \t}\n-\treturn user\n+\treturn user, nil\n }\n \n func (dao *Dao) FindCreateNotify(userID uint, lookCommentID uint) entity.Notify {"
    },
    {
      "sha": "0ef4c074649b2252a8c15d02c611675152a9d5e1",
      "filename": "internal/dao/query_find_create_test.go",
      "status": "modified",
      "additions": 28,
      "deletions": 2,
      "changes": 30,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_find_create_test.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_find_create_test.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find_create_test.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -70,7 +70,8 @@ func TestFindCreateUser(t *testing.T) {\n \t\t\tuserLink  = \"https://qwqaq.com\"\n \t\t)\n \n-\t\tresult := app.Dao().FindCreateUser(userName, userEmail, userLink)\n+\t\tresult, err := app.Dao().FindCreateUser(userName, userEmail, userLink)\n+\t\tassert.NoError(t, err)\n \t\tassert.False(t, result.IsEmpty())\n \t\tassert.Equal(t, userName, result.Name)\n \t\tassert.Equal(t, userEmail, result.Email)\n@@ -81,8 +82,33 @@ func TestFindCreateUser(t *testing.T) {\n \t\tassert.Equal(t, app.Dao().CookUser(&result), app.Dao().CookUser(&findUser), \"创建后的用户数据有问题\")\n \t})\n \n+\tt.Run(\"Valid User Values\", func(t *testing.T) {\n+\t\targs := []struct {\n+\t\t\tname   string\n+\t\t\temail  string\n+\t\t\tlink   string\n+\t\t\tresult bool\n+\t\t}{\n+\t\t\t{\"\", \"\", \"\", false},\n+\t\t\t{\"userA\", \"\", \"\", false},\n+\t\t\t{\"\", \"user_a@example.com\", \"\", false},\n+\t\t\t{\"userB\", \"user_b\", \"\", false},\n+\t\t\t{\"userC\", \"user_c@example.com\", \"https://xxxx.com\", true},\n+\t\t}\n+\t\tfor _, arg := range args {\n+\t\t\t_, err := app.Dao().FindCreateUser(arg.name, arg.email, arg.link)\n+\t\t\tassert.Equal(t, arg.result, err == nil, \"FindCreateUser(%s, %s, %s) should return %v\", arg.name, arg.email, arg.link, arg.result)\n+\t\t}\n+\n+\t\t// Invalid user link\n+\t\tu, err := app.Dao().FindCreateUser(\"userD\", \"user_d@example.com\", \"xxxx.com\")\n+\t\tassert.NoError(t, err)\n+\t\tassert.Equal(t, \"\", u.Link, \"The user should be create but link is empty because it's invalid\")\n+\t})\n+\n \tt.Run(\"Find Existed User\", func(t *testing.T) {\n-\t\tresult := app.Dao().FindCreateUser(\"userA\", \"user_a@qwqaq.com\", \"\")\n+\t\tresult, err := app.Dao().FindCreateUser(\"userA\", \"user_a@qwqaq.com\", \"\")\n+\t\tassert.NoError(t, err)\n \t\tassert.False(t, result.IsEmpty())\n \t\tassert.Equal(t, app.Dao().FindUser(\"userA\", \"user_a@qwqaq.com\"), result)\n \t})"
    },
    {
      "sha": "bc8674b93bbc67d85d3c7892f275267d77198f07",
      "filename": "internal/dao/query_new.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_new.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/internal%2Fdao%2Fquery_new.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_new.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -33,7 +33,7 @@ func (dao *Dao) CreateSite(site *entity.Site) error {\n \treturn nil\n }\n \n-func (dao *Dao) NewUser(name string, email string, link string) entity.User {\n+func (dao *Dao) NewUser(name string, email string, link string) (entity.User, error) {\n \tuser := entity.User{\n \t\tName:  name,\n \t\tEmail: email,\n@@ -43,9 +43,10 @@ func (dao *Dao) NewUser(name string, email string, link string) entity.User {\n \terr := dao.CreateUser(&user)\n \tif err != nil {\n \t\tlog.Error(\"Create User error: \", err)\n+\t\treturn entity.User{}, err\n \t}\n \n-\treturn user\n+\treturn user, nil\n }\n \n func (dao *Dao) CreateUser(user *entity.User) error {"
    },
    {
      "sha": "3dd592508f34b52260c7ea44605e6454b019390c",
      "filename": "server/handler/comment_create.go",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fcomment_create.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fcomment_create.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomment_create.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -104,8 +104,8 @@ func CommentCreate(app *core.App, router fiber.Router) {\n \t\t}\n \n \t\t// find user\n-\t\tuser := app.Dao().FindCreateUser(p.Name, p.Email, p.Link)\n-\t\tif user.ID == 0 || page.Key == \"\" {\n+\t\tuser, err := app.Dao().FindCreateUser(p.Name, p.Email, p.Link)\n+\t\tif err != nil || page.Key == \"\" {\n \t\t\tlog.Error(\"Cannot get user or page\")\n \t\t\treturn common.RespError(c, 500, i18n.T(\"Comment failed\"))\n \t\t}\n@@ -141,8 +141,7 @@ func CommentCreate(app *core.App, router fiber.Router) {\n \t\t}\n \n \t\t// save to database\n-\t\terr := app.Dao().CreateComment(&comment)\n-\t\tif err != nil {\n+\t\tif err := app.Dao().CreateComment(&comment); err != nil {\n \t\t\tlog.Error(\"Save Comment error: \", err)\n \t\t\treturn common.RespError(c, 500, i18n.T(\"Comment failed\"))\n \t\t}"
    },
    {
      "sha": "229daa1f4ecc0e1be9407e7787416ffc9c31ef07",
      "filename": "server/handler/comment_update.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fcomment_update.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fcomment_update.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomment_update.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -90,8 +90,8 @@ func CommentUpdate(app *core.App, router fiber.Router) {\n \t\t}\n \n \t\t// find or save new user\n-\t\tuser := app.Dao().FindCreateUser(p.Nick, p.Email, p.Link)\n-\t\tif user.ID != comment.UserID {\n+\t\tuser, err := app.Dao().FindCreateUser(p.Nick, p.Email, p.Link)\n+\t\tif err == nil && user.ID != comment.UserID {\n \t\t\tcomment.UserID = user.ID\n \t\t}\n "
    },
    {
      "sha": "691a635c0ccfd9e464d955621af04bc6e9274e1c",
      "filename": "server/handler/vote.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fvote.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/8ff3f5e875612c6bda796507cf286c440f6d7530/server%2Fhandler%2Fvote.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fvote.go?ref=8ff3f5e875612c6bda796507cf286c440f6d7530",
      "patch": "@@ -47,7 +47,11 @@ func Vote(app *core.App, router fiber.Router) {\n \t\t// find user\n \t\tvar user entity.User\n \t\tif p.Name != \"\" && p.Email != \"\" {\n-\t\t\tuser = app.Dao().FindCreateUser(p.Name, p.Email, \"\")\n+\t\t\tvar err error\n+\t\t\tuser, err = app.Dao().FindCreateUser(p.Name, p.Email, \"\")\n+\t\t\tif err != nil {\n+\t\t\t\treturn common.RespError(c, 500, \"Failed to create user\")\n+\t\t\t}\n \t\t}\n \n \t\tip := c.IP()"
    }
  ]
}
