{
  "sha": "603c7d94396cc9d292845aa315387334ad583b34",
  "node_id": "C_kwDOCQOkhNoAKDYwM2M3ZDk0Mzk2Y2M5ZDI5Mjg0NWFhMzE1Mzg3MzM0YWQ1ODNiMzQ",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-11-05T14:48:00Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-11-05T14:48:00Z"
    },
    "message": "docs: provide clearer and more detailed instructions in CONTRIBUTING.md",
    "tree": {
      "sha": "b0064f533dc887f3203d4d92a7c7a75c0483a70a",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/b0064f533dc887f3203d4d92a7c7a75c0483a70a"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/603c7d94396cc9d292845aa315387334ad583b34",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZUerIAAKCRDUbg8O6nwT\nagerAP9q3V88mErao6nOAp/gxxBVQ5/qw8udFW56LfjF3gGu5QD/VBwi7E3Q9SKZ\ngoEnYHdhf1hPo1fp2V/uu8QEA1S6AgI=\n=EYga\n-----END PGP SIGNATURE-----",
      "payload": "tree b0064f533dc887f3203d4d92a7c7a75c0483a70a\nparent fb93231b3504b7de2cf1b2acf4930ab4ad1bdcf0\nauthor qwqcode <qwqcode@gmail.com> 1699195680 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1699195680 +0800\n\ndocs: provide clearer and more detailed instructions in CONTRIBUTING.md\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/603c7d94396cc9d292845aa315387334ad583b34",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/603c7d94396cc9d292845aa315387334ad583b34",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/603c7d94396cc9d292845aa315387334ad583b34/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb93231b3504b7de2cf1b2acf4930ab4ad1bdcf0",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/fb93231b3504b7de2cf1b2acf4930ab4ad1bdcf0",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/fb93231b3504b7de2cf1b2acf4930ab4ad1bdcf0"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 37,
    "deletions": 10
  },
  "files": [
    {
      "sha": "3fa01fecf52c8c210a38ca37e461ba26404f9c3e",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 37,
      "deletions": 10,
      "changes": 47,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/603c7d94396cc9d292845aa315387334ad583b34/CONTRIBUTING.md",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/603c7d94396cc9d292845aa315387334ad583b34/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/CONTRIBUTING.md?ref=603c7d94396cc9d292845aa315387334ad583b34",
      "patch": "@@ -29,22 +29,41 @@ Enter the directory:\n cd Artalk\n ```\n \n-### Build frontend and backend\n+### Build Backend\n \n-First, we need to install the dependencies for backend written in Go. Simply run the following command:\n+First, you need to install the dependencies for the backend written in Go. Simply run the `make install` command to install the dependencies.\n \n-```sh\n-make build-debug\n-```\n+Then, run the `make dev` to build and run `./bin/artalk`, and you can pass startup parameters to the program using `ARGS=\"version\" make dev`.\n+\n+This will build the backend with debugging symbols. The binary file will be placed under the `./bin` directory.\n+\n+The backend program will run by default on port `23366`. You can access it through a browser at `http://localhost:23366`. It's recommended not to change this port number for testing the backend program.\n+\n+## Build Frontend\n+\n+First, you need to install the dependencies for the frontend. Simply run the `cd ui && pnpm install` command to install the dependencies.\n+\n+Then, run the `cd ui && pnpm dev` to build and run the frontend, and you can pass startup parameters to the program using `ARGS=\"--port 5173\" pnpm dev`.\n+\n+The frontend program will run by default on port `5173`, and you can access it in a browser at `http://localhost:5173`. The frontend testing client will, by default, request the backend on port `23366`, so it's essential to keep the backend on this port.\n+\n+The frontend program is divided into the main program and a sidebar program, with the sidebar program running on a separate port, which is `23367`.\n \n-This will build both the frontend and backend, with debugging symbols.\n+## Development Workflow\n \n-- **Frontend** will be built under `./ui/packages/artalk` and copied to `./public` directory.\n-- **Backend** will be built under `./bin` directory.\n+In most cases, to set up a complete development instance, you need to navigate to the Artalk Repo directory and then execute `make dev`. This will run the backend on port `23366`. Then, execute `cd ui && pnpm dev`, which will run the frontend on port `5173`. You can optionally execute `pnpm dev:sidebar` to run the sidebar frontend on port `23367`. For frontend development, you need to access `http://localhost:5173` in your browser to perform your development and testing.\n \n-### Optional: Use one-key script to run a demo site\n+When you make changes to the frontend code, you can build the complete frontend program using `cd ui && pnpm build:all`. The JavaScript and CSS code can be found in `ui/packages/artalk/dist`.\n \n-If you want to run a demo site, you can use the following command:\n+When you make changes to the backend code, running `make all` will build the complete backend program. Note that since the backend program also embeds the frontend code, the `scripts/build-frontend.sh` script will run during backend program building, which includes the embedded frontend main program and sidebar frontend program. If you are interested, you can explore the complete frontend build process in the `Makefile` code.\n+\n+Additionally, there is automated CI on GitHub for building. You can find the relevant code in the `.github/workflows` directory.\n+\n+### Optional: Use a One-Key Script to Run a Demo Site\n+\n+When you access `http://localhost:5173` during frontend development, you will get a minimalist interface that only contains the Artalk program interface and not a real blog environment. If you want to make testing closer to a real environment, you can create a demo blog site using the following steps.\n+\n+Run the following command:\n \n ```sh\n ./scripts/setup-example-site.sh\n@@ -70,6 +89,14 @@ email: \"admin@test.com\"\n password: \"admin\"\n ```\n \n+### Testing\n+\n+The backend Go program can be tested by running `make test` for unit testing. The test results will be outputted in the terminal. You can also execute `test-coverage` to check the code test coverage.\n+\n+Frontend testing is conducted using Playwright for end-to-end (E2E) testing. To start the E2E testing, run `make test-frontend-e2e`.\n+\n+Both frontend and backend testing are automated and will be performed during Git pull requests and as part of the build process using CircleCI or GitHub Actions.\n+\n ## Project Structure\n \n Artalk is a monorepo project, which means all the source code is in the same repository. However, the frontend and backend are separated. The frontend part is located in `./ui` directory."
    }
  ]
}
