{
  "sha": "cd481d401de7e5fb2eb18267cec69398eec35d98",
  "node_id": "C_kwDOBtgov9oAKGNkNDgxZDQwMWRlN2U1ZmIyZWIxODI2N2NlYzY5Mzk4ZWVjMzVkOTg",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2023-11-04T16:12:29Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2023-11-04T17:49:40Z"
    },
    "message": "add tests for admin Store and DataService",
    "tree": {
      "sha": "d763f4318fc7c029ba72c5e1ca6000fb9f5f4083",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/d763f4318fc7c029ba72c5e1ca6000fb9f5f4083"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/cd481d401de7e5fb2eb18267cec69398eec35d98",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/cd481d401de7e5fb2eb18267cec69398eec35d98",
  "html_url": "https://github.com/umputun/remark42/commit/cd481d401de7e5fb2eb18267cec69398eec35d98",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/cd481d401de7e5fb2eb18267cec69398eec35d98/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "618c267370aaa5cfb05bc18512c3d6d8ae089943",
      "url": "https://api.github.com/repos/umputun/remark42/commits/618c267370aaa5cfb05bc18512c3d6d8ae089943",
      "html_url": "https://github.com/umputun/remark42/commit/618c267370aaa5cfb05bc18512c3d6d8ae089943"
    }
  ],
  "stats": {
    "total": 462,
    "additions": 461,
    "deletions": 1
  },
  "files": [
    {
      "sha": "8961f431faaf1917f4a700ea80e7a5a6560ec7d2",
      "filename": "backend/app/store/admin/admin.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin.go",
      "raw_url": "https://github.com/umputun/remark42/raw/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fadmin%2Fadmin.go?ref=cd481d401de7e5fb2eb18267cec69398eec35d98",
      "patch": "@@ -8,6 +8,9 @@ import (\n \tlog \"github.com/go-pkgz/lgr\"\n )\n \n+// NOTE: matryer/moq should be installed globally and works with `go generate ./...`\n+//go:generate moq --out admin_mock.go . Store\n+\n // Store defines interface returning admins info for given site\n type Store interface {\n \tKey(siteID string) (key string, err error)"
    },
    {
      "sha": "496836c51ba3208e458fb173887445ecc9db768e",
      "filename": "backend/app/store/admin/admin_mock.go",
      "status": "added",
      "additions": 256,
      "deletions": 0,
      "changes": 256,
      "blob_url": "https://github.com/umputun/remark42/blob/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_mock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_mock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_mock.go?ref=cd481d401de7e5fb2eb18267cec69398eec35d98",
      "patch": "@@ -0,0 +1,256 @@\n+// Code generated by moq; DO NOT EDIT.\n+// github.com/matryer/moq\n+\n+package admin\n+\n+import (\n+\t\"sync\"\n+)\n+\n+// Ensure, that StoreMock does implement Store.\n+// If this is not the case, regenerate this file with moq.\n+var _ Store = &StoreMock{}\n+\n+// StoreMock is a mock implementation of Store.\n+//\n+//\tfunc TestSomethingThatUsesStore(t *testing.T) {\n+//\n+//\t\t// make and configure a mocked Store\n+//\t\tmockedStore := &StoreMock{\n+//\t\t\tAdminsFunc: func(siteID string) ([]string, error) {\n+//\t\t\t\tpanic(\"mock out the Admins method\")\n+//\t\t\t},\n+//\t\t\tEmailFunc: func(siteID string) (string, error) {\n+//\t\t\t\tpanic(\"mock out the Email method\")\n+//\t\t\t},\n+//\t\t\tEnabledFunc: func(siteID string) (bool, error) {\n+//\t\t\t\tpanic(\"mock out the Enabled method\")\n+//\t\t\t},\n+//\t\t\tKeyFunc: func(siteID string) (string, error) {\n+//\t\t\t\tpanic(\"mock out the Key method\")\n+//\t\t\t},\n+//\t\t\tOnEventFunc: func(siteID string, et EventType) error {\n+//\t\t\t\tpanic(\"mock out the OnEvent method\")\n+//\t\t\t},\n+//\t\t}\n+//\n+//\t\t// use mockedStore in code that requires Store\n+//\t\t// and then make assertions.\n+//\n+//\t}\n+type StoreMock struct {\n+\t// AdminsFunc mocks the Admins method.\n+\tAdminsFunc func(siteID string) ([]string, error)\n+\n+\t// EmailFunc mocks the Email method.\n+\tEmailFunc func(siteID string) (string, error)\n+\n+\t// EnabledFunc mocks the Enabled method.\n+\tEnabledFunc func(siteID string) (bool, error)\n+\n+\t// KeyFunc mocks the Key method.\n+\tKeyFunc func(siteID string) (string, error)\n+\n+\t// OnEventFunc mocks the OnEvent method.\n+\tOnEventFunc func(siteID string, et EventType) error\n+\n+\t// calls tracks calls to the methods.\n+\tcalls struct {\n+\t\t// Admins holds details about calls to the Admins method.\n+\t\tAdmins []struct {\n+\t\t\t// SiteID is the siteID argument value.\n+\t\t\tSiteID string\n+\t\t}\n+\t\t// Email holds details about calls to the Email method.\n+\t\tEmail []struct {\n+\t\t\t// SiteID is the siteID argument value.\n+\t\t\tSiteID string\n+\t\t}\n+\t\t// Enabled holds details about calls to the Enabled method.\n+\t\tEnabled []struct {\n+\t\t\t// SiteID is the siteID argument value.\n+\t\t\tSiteID string\n+\t\t}\n+\t\t// Key holds details about calls to the Key method.\n+\t\tKey []struct {\n+\t\t\t// SiteID is the siteID argument value.\n+\t\t\tSiteID string\n+\t\t}\n+\t\t// OnEvent holds details about calls to the OnEvent method.\n+\t\tOnEvent []struct {\n+\t\t\t// SiteID is the siteID argument value.\n+\t\t\tSiteID string\n+\t\t\t// Et is the et argument value.\n+\t\t\tEt EventType\n+\t\t}\n+\t}\n+\tlockAdmins  sync.RWMutex\n+\tlockEmail   sync.RWMutex\n+\tlockEnabled sync.RWMutex\n+\tlockKey     sync.RWMutex\n+\tlockOnEvent sync.RWMutex\n+}\n+\n+// Admins calls AdminsFunc.\n+func (mock *StoreMock) Admins(siteID string) ([]string, error) {\n+\tif mock.AdminsFunc == nil {\n+\t\tpanic(\"StoreMock.AdminsFunc: method is nil but Store.Admins was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tSiteID string\n+\t}{\n+\t\tSiteID: siteID,\n+\t}\n+\tmock.lockAdmins.Lock()\n+\tmock.calls.Admins = append(mock.calls.Admins, callInfo)\n+\tmock.lockAdmins.Unlock()\n+\treturn mock.AdminsFunc(siteID)\n+}\n+\n+// AdminsCalls gets all the calls that were made to Admins.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.AdminsCalls())\n+func (mock *StoreMock) AdminsCalls() []struct {\n+\tSiteID string\n+} {\n+\tvar calls []struct {\n+\t\tSiteID string\n+\t}\n+\tmock.lockAdmins.RLock()\n+\tcalls = mock.calls.Admins\n+\tmock.lockAdmins.RUnlock()\n+\treturn calls\n+}\n+\n+// Email calls EmailFunc.\n+func (mock *StoreMock) Email(siteID string) (string, error) {\n+\tif mock.EmailFunc == nil {\n+\t\tpanic(\"StoreMock.EmailFunc: method is nil but Store.Email was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tSiteID string\n+\t}{\n+\t\tSiteID: siteID,\n+\t}\n+\tmock.lockEmail.Lock()\n+\tmock.calls.Email = append(mock.calls.Email, callInfo)\n+\tmock.lockEmail.Unlock()\n+\treturn mock.EmailFunc(siteID)\n+}\n+\n+// EmailCalls gets all the calls that were made to Email.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.EmailCalls())\n+func (mock *StoreMock) EmailCalls() []struct {\n+\tSiteID string\n+} {\n+\tvar calls []struct {\n+\t\tSiteID string\n+\t}\n+\tmock.lockEmail.RLock()\n+\tcalls = mock.calls.Email\n+\tmock.lockEmail.RUnlock()\n+\treturn calls\n+}\n+\n+// Enabled calls EnabledFunc.\n+func (mock *StoreMock) Enabled(siteID string) (bool, error) {\n+\tif mock.EnabledFunc == nil {\n+\t\tpanic(\"StoreMock.EnabledFunc: method is nil but Store.Enabled was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tSiteID string\n+\t}{\n+\t\tSiteID: siteID,\n+\t}\n+\tmock.lockEnabled.Lock()\n+\tmock.calls.Enabled = append(mock.calls.Enabled, callInfo)\n+\tmock.lockEnabled.Unlock()\n+\treturn mock.EnabledFunc(siteID)\n+}\n+\n+// EnabledCalls gets all the calls that were made to Enabled.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.EnabledCalls())\n+func (mock *StoreMock) EnabledCalls() []struct {\n+\tSiteID string\n+} {\n+\tvar calls []struct {\n+\t\tSiteID string\n+\t}\n+\tmock.lockEnabled.RLock()\n+\tcalls = mock.calls.Enabled\n+\tmock.lockEnabled.RUnlock()\n+\treturn calls\n+}\n+\n+// Key calls KeyFunc.\n+func (mock *StoreMock) Key(siteID string) (string, error) {\n+\tif mock.KeyFunc == nil {\n+\t\tpanic(\"StoreMock.KeyFunc: method is nil but Store.Key was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tSiteID string\n+\t}{\n+\t\tSiteID: siteID,\n+\t}\n+\tmock.lockKey.Lock()\n+\tmock.calls.Key = append(mock.calls.Key, callInfo)\n+\tmock.lockKey.Unlock()\n+\treturn mock.KeyFunc(siteID)\n+}\n+\n+// KeyCalls gets all the calls that were made to Key.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.KeyCalls())\n+func (mock *StoreMock) KeyCalls() []struct {\n+\tSiteID string\n+} {\n+\tvar calls []struct {\n+\t\tSiteID string\n+\t}\n+\tmock.lockKey.RLock()\n+\tcalls = mock.calls.Key\n+\tmock.lockKey.RUnlock()\n+\treturn calls\n+}\n+\n+// OnEvent calls OnEventFunc.\n+func (mock *StoreMock) OnEvent(siteID string, et EventType) error {\n+\tif mock.OnEventFunc == nil {\n+\t\tpanic(\"StoreMock.OnEventFunc: method is nil but Store.OnEvent was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tSiteID string\n+\t\tEt     EventType\n+\t}{\n+\t\tSiteID: siteID,\n+\t\tEt:     et,\n+\t}\n+\tmock.lockOnEvent.Lock()\n+\tmock.calls.OnEvent = append(mock.calls.OnEvent, callInfo)\n+\tmock.lockOnEvent.Unlock()\n+\treturn mock.OnEventFunc(siteID, et)\n+}\n+\n+// OnEventCalls gets all the calls that were made to OnEvent.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.OnEventCalls())\n+func (mock *StoreMock) OnEventCalls() []struct {\n+\tSiteID string\n+\tEt     EventType\n+} {\n+\tvar calls []struct {\n+\t\tSiteID string\n+\t\tEt     EventType\n+\t}\n+\tmock.lockOnEvent.RLock()\n+\tcalls = mock.calls.OnEvent\n+\tmock.lockOnEvent.RUnlock()\n+\treturn calls\n+}"
    },
    {
      "sha": "3d6925e8ba0d3441cbdf91cb5b773532430f0610",
      "filename": "backend/app/store/admin/admin_test.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fadmin%2Fadmin_test.go?ref=cd481d401de7e5fb2eb18267cec69398eec35d98",
      "patch": "@@ -6,6 +6,20 @@ import (\n \t\"github.com/stretchr/testify/assert\"\n )\n \n+func TestStaticStore_StoreWithoutSites(t *testing.T) {\n+\tvar ks Store = NewStaticKeyStore(\"key123\")\n+\tenabled, err := ks.Enabled(\"any\")\n+\tassert.NoError(t, err)\n+\tassert.True(t, enabled, \"on empty store all sites are enabled\")\n+\tassert.NoError(t, ks.OnEvent(\"test\", EvCreate), \"static store does nothing OnEvent\")\n+\n+\t// empty key\n+\tks = NewStaticKeyStore(\"\")\n+\tkey, err := ks.Key(\"any\")\n+\tassert.Error(t, err, \"empty key\")\n+\tassert.Empty(t, key)\n+}\n+\n func TestStaticStore_Get(t *testing.T) {\n \tvar ks Store = NewStaticStore(\"key123\", []string{\"s1\", \"s2\", \"s3\"},\n \t\t[]string{\"123\", \"xyz\"}, \"aa@example.com\")"
    },
    {
      "sha": "195b6b3c9d65aac8d0673c753a4189533f1b20d4",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 188,
      "deletions": 1,
      "changes": 189,
      "blob_url": "https://github.com/umputun/remark42/blob/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/cd481d401de7e5fb2eb18267cec69398eec35d98/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go?ref=cd481d401de7e5fb2eb18267cec69398eec35d98",
      "patch": "@@ -2,6 +2,7 @@ package service\n \n import (\n \t\"context\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"math/rand\"\n \t\"net/http\"\n@@ -171,6 +172,50 @@ func TestService_CreateFromPartialWithTitle(t *testing.T) {\n \tassert.Equal(t, \"post blah\", res.PostTitle, \"keep comment title\")\n }\n \n+func TestService_Put(t *testing.T) {\n+\tks := admin.NewStaticKeyStore(\"secret 123\")\n+\teng, teardown := prepStoreEngine(t)\n+\tdefer teardown()\n+\tb := DataStore{Engine: eng, AdminStore: ks}\n+\n+\tcomment := store.Comment{\n+\t\tID:        \"c-1\",\n+\t\tParentID:  \"id-1\",\n+\t\tText:      \"test text\",\n+\t\tUser:      store.User{ID: \"user2\", Name: \"user name 2\"},\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tTimestamp: time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local),\n+\t}\n+\t_, err := b.Create(comment)\n+\trequire.NoError(t, err)\n+\n+\t// create new comment with everything different to replace the first one with fields below\n+\tupdatedComment := store.Comment{\n+\t\tID:        \"c-1\",\n+\t\tParentID:  \"id-new\",\n+\t\tText:      \"new text\",\n+\t\tUser:      store.User{ID: \"user3\", Name: \"user name 3\"},\n+\t\tLocator:   store.Locator{URL: \"https://example.com\", SiteID: \"example\"},\n+\t\tTimestamp: time.Date(2018, 12, 20, 15, 18, 22, 0, time.Local),\n+\t}\n+\n+\terr = b.Put(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, updatedComment)\n+\trequire.NoError(t, err)\n+\n+\t// request with wrong user, should not affect the comment user\n+\tgot, err := b.Get(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"c-1\", store.User{ID: \"user1\", Name: \"user name 1\"})\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, \"c-1\", got.ID)\n+\tassert.Equal(t, \"new text\", got.Text)\n+\tassert.Equal(t, \"id-1\", got.ParentID, \"should be unaltered\")\n+\tassert.Equal(t, \"user2\", got.User.ID, \"should be unaltered\")\n+\tassert.Equal(t, \"user name 2\", got.User.Name, \"should be unaltered\")\n+\tassert.Equal(t, \"https://radio-t.com\", got.Locator.URL, \"should be unaltered\")\n+\tassert.Equal(t, \"radio-t\", got.Locator.SiteID, \"should be unaltered\")\n+\tassert.Equal(t, time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local), got.Timestamp, \"should be unaltered\")\n+\n+}\n+\n func TestService_SetTitle(t *testing.T) {\n \tvar titleEnable int32\n \ttss := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n@@ -545,6 +590,111 @@ func TestService_VoteControversy(t *testing.T) {\n \tassert.InDelta(t, 1.73, res[0].Controversy, 0.01)\n }\n \n+func TestService_RestrictedWords(t *testing.T) {\n+\tks := admin.NewStaticKeyStore(\"secret 123\")\n+\teng, teardown := prepStoreEngine(t)\n+\tdefer teardown()\n+\trestictedWordLister := StaticRestrictedWordsLister{Words: []string{\"restricted\"}}\n+\tb := DataStore{Engine: eng, AdminStore: ks, RestrictedWordsMatcher: NewRestrictedWordsMatcher(restictedWordLister)}\n+\n+\t// test creating a comment with restricted words which should fail with appropriate error\n+\treply := store.Comment{\n+\t\tID:        \"c-1\",\n+\t\tParentID:  \"id-1\",\n+\t\tText:      \"restricted word\",\n+\t\tTimestamp: time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local),\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tUser:      store.User{ID: \"user2\", Name: \"user name 2\"},\n+\t}\n+\tid, err := b.Create(reply)\n+\tassert.EqualError(t, err, ErrRestrictedWordsFound.Error(), \"should fail with RestrictedWordError\")\n+\tassert.Empty(t, id)\n+}\n+\n+func TestDataStore_AdminStoreErrors(t *testing.T) {\n+\tbadKey := true\n+\tbadEnabled := true\n+\tas := admin.StoreMock{\n+\t\tOnEventFunc: func(siteID string, et admin.EventType) error { return errors.New(\"err\") },\n+\t\tKeyFunc: func(siteID string) (string, error) {\n+\t\t\tif badKey {\n+\t\t\t\treturn \"\", errors.New(\"mock key err\")\n+\t\t\t}\n+\t\t\treturn \"secret\", nil\n+\t\t},\n+\t\tEnabledFunc: func(siteID string) (bool, error) {\n+\t\t\tif badEnabled {\n+\t\t\t\treturn false, errors.New(\"mock enabled err\")\n+\t\t\t}\n+\t\t\treturn true, nil\n+\t\t},\n+\t\tAdminsFunc: func(siteID string) ([]string, error) { return nil, errors.New(\"mock admins err\") },\n+\t}\n+\teng, teardown := prepStoreEngine(t)\n+\tdefer teardown()\n+\tb := DataStore{Engine: eng, AdminStore: &as, MaxVotes: -1}\n+\tcomment := store.Comment{\n+\t\tID:        \"c-1\",\n+\t\tParentID:  \"id-1\",\n+\t\tText:      \"restricted word\",\n+\t\tTimestamp: time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local),\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tUser:      store.User{ID: \"user2\", Name: \"user name 2\"},\n+\t}\n+\n+\t// Key call error\n+\tid, err := b.Create(comment)\n+\tassert.ErrorContainsf(t, err, \"mock key err\", \"should fail with mock error\")\n+\tassert.Empty(t, id)\n+\tassert.Equal(t, len(as.KeyCalls()), 1)\n+\tassert.Equal(t, len(as.EnabledCalls()), 0)\n+\tassert.Equal(t, len(as.OnEventCalls()), 0)\n+\n+\t// Enabled call error\n+\tbadKey = false\n+\tid, err = b.Create(comment)\n+\tassert.ErrorContains(t, err, \"mock enabled err\", \"should fail with mock error\")\n+\tassert.Empty(t, id)\n+\tassert.Equal(t, len(as.KeyCalls()), 2)\n+\tassert.Equal(t, len(as.EnabledCalls()), 1)\n+\tassert.Equal(t, len(as.OnEventCalls()), 0)\n+\n+\t// only OnEvent error\n+\tbadEnabled = false\n+\tid, err = b.Create(comment)\n+\tassert.NoError(t, err, \"OnEvent error should be just logged\")\n+\tassert.Equal(t, id, \"c-1\")\n+\tassert.Equal(t, len(as.KeyCalls()), 3)\n+\tassert.Equal(t, len(as.EnabledCalls()), 2)\n+\tassert.Equal(t, len(as.OnEventCalls()), 1)\n+\n+\t// OnEvent error on Vote call\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"c-1\",\n+\t\tUserID: \"user4\", Val: true})\n+\tassert.NoError(t, err, \"OnEvent error should be just logged\")\n+\tassert.Equal(t, len(as.KeyCalls()), 4)\n+\tassert.Equal(t, len(as.EnabledCalls()), 3)\n+\tassert.Equal(t, len(as.OnEventCalls()), 2)\n+\n+\t// Admins error\n+\tisAdmin := b.IsAdmin(\"radio-t\", \"user2\")\n+\tassert.False(t, isAdmin)\n+\tassert.Equal(t, len(as.AdminsCalls()), 1)\n+\tassert.Equal(t, len(as.OnEventCalls()), 2)\n+\n+\t// OnEvent error on EditComment call\n+\t_, err = b.EditComment(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"c-1\", EditRequest{Text: \"new text\"})\n+\tassert.NoError(t, err, \"OnEvent error should be just logged\")\n+\n+\t// OnEvent error on Delete call\n+\terr = b.Delete(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"c-1\", store.SoftDelete)\n+\tassert.NoError(t, err, \"OnEvent error should be just logged\")\n+\n+\t// OnEvent error on EditComment Delete call\n+\t_, err = b.EditComment(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"c-1\", EditRequest{Delete: true})\n+\tassert.NoError(t, err, \"OnEvent error should be just logged\")\n+}\n+\n func TestService_VoteSameIP(t *testing.T) {\n \teng, teardown := prepStoreEngine(t)\n \tdefer teardown()\n@@ -1185,18 +1335,55 @@ func TestService_Info(t *testing.T) {\n \tb := DataStore{Engine: eng, EditDuration: 100 * time.Millisecond,\n \t\tAdminStore: admin.NewStaticStore(\"secret 123\", nil, []string{\"user2\"}, \"user@email.com\")}\n \n-\tinfo, err := b.Info(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, 0)\n+\t// add one more comment for another URL to test site-wide Info request\n+\tcomment := store.Comment{\n+\t\tID:        \"123456xyz\",\n+\t\tText:      `some text, <a href=\"http://radio-t.com\">link</a>`,\n+\t\tTimestamp: time.Date(2018, 12, 20, 15, 18, 22, 0, time.Local),\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com/another\", SiteID: \"radio-t\"},\n+\t\tUser:      store.User{ID: \"user2\", Name: \"user name\"},\n+\t}\n+\t_, err := b.Create(comment)\n+\trequire.NoError(t, err)\n+\n+\t// get non-existing URL info\n+\tinfo, err := b.Info(store.Locator{URL: \"bad\", SiteID: \"radio-t\"}, 0)\n+\tassert.Error(t, err)\n+\tassert.Empty(t, info)\n+\n+\t// get non-existing site info\n+\tinfo, err = b.Info(store.Locator{SiteID: \"bad\"}, 0)\n+\tassert.Error(t, err)\n+\tassert.Empty(t, info)\n+\n+\t// test two initially created comments and store first comment FirstTS\n+\tinfo, err = b.Info(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, 0)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com\", info.URL)\n \tassert.Equal(t, 2, info.Count)\n \tassert.False(t, info.ReadOnly)\n \tassert.True(t, info.LastTS.After(info.FirstTS))\n+\tfirstTS := info.FirstTS\n \n \ttime.Sleep(1 * time.Second) // make post RO in 1sec\n \tinfo, err = b.Info(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, 1)\n \trequire.NoError(t, err)\n \tassert.Equal(t, \"https://radio-t.com\", info.URL)\n \tassert.True(t, info.ReadOnly)\n+\n+\t// get last created comment LastTS\n+\tinfo, err = b.Info(store.Locator{URL: \"https://radio-t.com/another\", SiteID: \"radio-t\"}, 0)\n+\trequire.NoError(t, err)\n+\tlastTS := info.LastTS\n+\n+\t// site-level request\n+\tinfo, err = b.Info(store.Locator{SiteID: \"radio-t\"}, 1)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, 3, info.Count)\n+\tassert.Empty(t, info.URL, \"site-level request should not set URL\")\n+\tassert.False(t, info.ReadOnly, \"site-level request should not set ReadOnly\")\n+\tassert.Equal(t, firstTS, info.FirstTS, \"site-level request should have FirstTS from the first post\")\n+\tassert.Equal(t, lastTS, info.LastTS, \"site-level request should have LastTS from the last post\")\n }\n \n func TestService_Delete(t *testing.T) {"
    }
  ]
}
