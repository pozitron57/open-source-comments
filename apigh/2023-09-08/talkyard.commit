{
  "sha": "31b5021eca11d4153af935b0cc30781d4b5614c7",
  "node_id": "C_kwDOAKEu-toAKDMxYjUwMjFlY2ExMWQ0MTUzYWY5MzViMGNjMzA3ODFkNGI1NjE0Yzc",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-07-07T09:23:13Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-07-07T09:23:13Z"
    },
    "message": "Merge v0.2023.008 into 'release'.",
    "tree": {
      "sha": "d03b4bf6786a3f61c62579e7d82e4328eab69a2b",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/d03b4bf6786a3f61c62579e7d82e4328eab69a2b"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/31b5021eca11d4153af935b0cc30781d4b5614c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/31b5021eca11d4153af935b0cc30781d4b5614c7",
  "html_url": "https://github.com/debiki/talkyard/commit/31b5021eca11d4153af935b0cc30781d4b5614c7",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/31b5021eca11d4153af935b0cc30781d4b5614c7/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b32536195294e78bdd83c31b66f562acfa248b03",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/b32536195294e78bdd83c31b66f562acfa248b03",
      "html_url": "https://github.com/debiki/talkyard/commit/b32536195294e78bdd83c31b66f562acfa248b03"
    },
    {
      "sha": "ae58b375471bebad5652e651e282d03a3e676ae1",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/ae58b375471bebad5652e651e282d03a3e676ae1",
      "html_url": "https://github.com/debiki/talkyard/commit/ae58b375471bebad5652e651e282d03a3e676ae1"
    }
  ],
  "stats": {
    "total": 3823,
    "additions": 2385,
    "deletions": 1438
  },
  "files": [
    {
      "sha": "2245d3273d00db9ec6aac73b655123d49cc81468",
      "filename": "appsv/model/src/main/scala/com/debiki/core/DbDao2.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FDbDao2.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FDbDao2.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FDbDao2.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -18,6 +18,10 @@\n package com.debiki.core\n \n \n+case class SystemSettings(\n+  maintenanceUntilUnixSecs: Opt[i64])\n+\n+\n /** A database data access object (DAO). It gives you serializable transactions,\n   * either read only, or read-write, and either for a single site, or for the whole\n   * system (no particular site)."
    },
    {
      "sha": "8189a7b8e73c61d0f07c70d0c6b5af8d0177a38d",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Email.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FEmail.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -272,9 +272,18 @@ object EmailType {\n \n   case object NewMemberToApprove extends EmailType(51)\n   case object YourAccountApproved extends EmailType(52)\n+  case object NewMemberJoined extends EmailType(55)\n+\n+  //case object MaybePromote extends EmailType(63)\n+  //case object MemberPromoted extends EmailType(65)\n \n   case object YouCannotReply extends EmailType(91)\n \n+  case object FormFilledIn extends EmailType(411)\n+\n+  // 501-999 could be available for plugins? — There's also an EmailOutSubType [1, 999]\n+  // for each plugin to use.\n+\n   def fromInt(value: Int): Option[EmailType] = Some(value match {\n     case Notification.IntVal      => Notification\n     case ActivitySummary.IntVal   => ActivitySummary\n@@ -287,6 +296,11 @@ object EmailType {\n     case LinkAccounts.IntVal      => LinkAccounts\n     case SiteCreatedSuperAdminNotf.IntVal => SiteCreatedSuperAdminNotf\n     case HelpExchangeReminder.IntVal => HelpExchangeReminder\n+    case NewMemberToApprove.IntVal => NewMemberToApprove\n+    case YourAccountApproved.IntVal => YourAccountApproved\n+    case NewMemberJoined.IntVal => NewMemberJoined\n+    case YouCannotReply.IntVal => YouCannotReply\n+    case FormFilledIn.IntVal => FormFilledIn\n     case _ =>\n       return None\n   })"
    },
    {
      "sha": "2ac7c32ca44f4ea70aae0ea5002c91c08a2c6703",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "status": "modified",
      "additions": 19,
      "deletions": 2,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -186,7 +186,16 @@ object PageMeta {\n   * @param updatedAt\n   * @param publishedAt\n   * @param bumpedAt\n-  * @param lastApprovedReplyAt\n+  * @param lastApprovedReplyAt When then [most recent comment that\n+  *     has gotten approved] got approved. Including those approved automatically,\n+  *     e.g. because posted by a moderator.\n+  *     Maybe RENAME to:  lastTreeVisibleAt,  because if the mods reply to a\n+  *     not-yet-approved comment, then, once it gets approved, the mods' replies\n+  *     will appear too — a whole tree of comments. And then, maybe it's\n+  *     more clear that the interesting thing that appeared, isn't just\n+  *     the newly approved comment, but the replies too — the whole tree.\n+  *     And then, maybe \"(comment) tree\"  instead of just \"comment\" makes\n+  *     it simpler to remember / understand this?\n   * @param lastApprovedReplyById Set to None if there's no reply.\n   * @param categoryId\n   * @param embeddingPageUrl The canonical URL to the page, useful when linking to the page.\n@@ -337,7 +346,8 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n   require(updatedAt.getTime >= createdAt.getTime, s\"[TyEOLDUPDAT] $wp\")\n   require(publishedAt.forall(_.getTime >= createdAt.getTime), s\"[TyEOLDPUBAT] $wp\")\n   require(bumpedAt.forall(_.getTime >= createdAt.getTime), s\"[TyEOLDBUMPAT] $wp\")\n-  // If there are no replies, then there are no frequent posters.\n+\n+  // If there are no replies, then there are no frequent posters. [poster_stats]\n   require(lastApprovedReplyById.isDefined || frequentPosterIds.isEmpty, s\"[TyE306HMSJ24] $wp\")\n   require(frequentPosterIds.length <= 3, s\"[DwE6UMW3] $wp\") // for now — change if needed\n \n@@ -403,6 +413,13 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n   def isChatPinnedGlobally: Boolean =\n     pageType == PageType.OpenChat && pinWhere.contains(PinPageWhere.Globally)\n \n+  def interestingPosters: InterestingPosters =\n+    InterestingPosters(\n+          origPostAuthorId = Some(authorId),\n+          lastReplyWhen = lastApprovedReplyAt.map(When.fromDate),\n+          lastReplyById = lastApprovedReplyById,\n+          frequentPosterIds = frequentPosterIds)\n+\n   def status: PageStatus =   // RENAME to publishedStatus\n     if (publishedAt.isDefined) PageStatus.Published\n     else PageStatus.Draft"
    },
    {
      "sha": "8499f67c84fe05e2a01017c123f4fefb9bfb22f3",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PageParts.scala",
      "status": "modified",
      "additions": 88,
      "deletions": 10,
      "changes": 98,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -24,6 +24,24 @@ import PageParts._\n import org.scalactic.{Bad, Good, One, Or}\n \n \n+case class InterestingPosters(\n+  origPostAuthorId: Opt[PatId], // Might have been deleted\n+  lastReplyWhen: Opt[When], // REN to  lastApproved...  ?\n+  lastReplyById: Opt[PatId],\n+  frequentPosterIds: Seq[PatId]) {\n+\n+  require(lastReplyWhen.isDefined == lastReplyById.isDefined, \"TyE40WJKH21\")\n+  require(origPostAuthorId isNot NoUserId, \"TyE40WJKH22\")\n+  require(lastReplyById isNot NoUserId, \"TyE40WJKH23\")\n+  require(!frequentPosterIds.contains(NoUserId), \"TyE40WJKH24\")\n+\n+  // If there are no replies, then there are no frequent posters. [poster_stats]\n+  require(lastReplyById.isDefined || frequentPosterIds.isEmpty, \"TyE40WJKH24\")\n+\n+  def lastReplyAt: Opt[java.util.Date] = lastReplyWhen.map(_.toJavaDate)\n+}\n+\n+\n object PageParts {\n \n   val MaxPrivateNr: i32 = -1001\n@@ -58,24 +76,86 @@ object PageParts {\n   }\n \n \n-  /** Finds the 0 to 3 most frequent posters.\n+  /** Finds the 3 most frequent posters.\n     * Would: If two users have both posted X posts, then, among them, pick the most recent poster?\n     */\n-  def findFrequentPosters(posts: Seq[Post], ignoreIds: Set[UserId]): Seq[UserId] = {\n+  def findFrequentPosters(posts: Seq[Post], butWithUpdatedPosts: Seq[Post]): Seq[UserId] = {\n+    findInterestingPosters(posts = posts, butWithUpdatedPosts).frequentPosterIds\n+  }\n+\n+\n+  def findInterestingPosters(posts: Seq[Post], butWithUpdatedPosts: Seq[Post])\n+          : InterestingPosters = {\n+    // Tests: [prom_pats_tests]\n+\n+    val postsWithChanges = postAndChanges(posts, updatedPosts = butWithUpdatedPosts)\n+\n+    assert(NoUserId == 0)\n+    var origPostAuthorId = 0\n+    var lastReplyById = 0\n+    // The last approved comment, and last posted comment, need not be the same.\n+    // Currently, for simplicity, we use only the last *created* comment,\n+    // to show the last replyer.\n+    var lastReplyCreatedWhen: When = When.Genesis\n+\n+    for (post <- postsWithChanges) {\n+      if (post.isOrigPost) origPostAuthorId = post.createdById\n+      else if (post.isReply && post.isVisible) {\n+        if (post.createdWhen isAfter lastReplyCreatedWhen) {\n+          lastReplyById = post.createdById\n+          lastReplyCreatedWhen = post.createdWhen\n+          // Later, might sometimes want:  post.approvedWhen.get // [first_last_apr_at]\n+        }\n+      }\n+    }\n+\n     val numPostsByUserId = mutable.HashMap[UserId, Int]().withDefaultValue(0)\n+\n     for {\n-      post <- posts\n+      post <- postsWithChanges\n       if post.isReply && post.isVisible  // (96502764)\n-      if !ignoreIds.contains(post.createdById)  // [3296KGP]\n+      // Ignore the page creator and the last replyer, because they have their own first-&-last\n+      // entries in the Users column in the forum topic list. [7UKPF26], and a test [206K94QTD]\n+      if post.createdById != origPostAuthorId && post.createdById != lastReplyById\n     } {\n       val numPosts = numPostsByUserId(post.createdById)\n       numPostsByUserId(post.createdById) = numPosts + 1\n     }\n+\n     val userIdsAndNumPostsSortedDesc =\n-      numPostsByUserId.toSeq.sortBy(userIdAndNumPosts => userIdAndNumPosts._2)\n-    userIdsAndNumPostsSortedDesc.take(3).map(_._1)\n+          numPostsByUserId.toSeq.sortBy(userIdAndNumPosts => -userIdAndNumPosts._2)\n+    val frequentPosterIdsDesc: Seq[PatId] =\n+          userIdsAndNumPostsSortedDesc.take(3).map(_._1)\n+\n+    InterestingPosters(\n+          origPostAuthorId = if (origPostAuthorId == 0) None else Some(origPostAuthorId),\n+          lastReplyWhen = if (lastReplyById == 0) None else Some(lastReplyCreatedWhen),\n+          lastReplyById = if (lastReplyById == 0) None else Some(lastReplyById),\n+          frequentPosterIds = frequentPosterIdsDesc)\n   }\n \n+\n+  private def postAndChanges(posts: Seq[Post], updatedPosts: Seq[Post]): Seq[Post] = {\n+    if (updatedPosts.isEmpty)\n+      return posts\n+\n+    // The bool says if we've seen the updated-post in `posts` — if not, it's new.\n+    val changeMap = mutable.HashMap(updatedPosts.map(p => p.id -> (p, false)): _*)\n+    val oldAndUpdatedPosts = posts map { post =>\n+      changeMap.get(post.id) map { case (updatedPost, _) =>\n+        // Remember we've seen the updated post.\n+        changeMap.update(post.id, (updatedPost, true))\n+        // Use it instead of the old.\n+        updatedPost\n+      } getOrElse post\n+    }\n+\n+    // Add any new posts (the ones we didn't mark as seen above).\n+    val newPosts = changeMap.values.filter(postAndSeen => !postAndSeen._2).map(_._1)\n+\n+    // Order is undefined? Still, appending makes more sense?\n+    oldAndUpdatedPosts ++ newPosts\n+  }\n }\n \n \n@@ -279,10 +359,8 @@ abstract class PageParts {\n \n \n   def frequentPosterIds: Seq[UserId] = {\n-    // Ignore the page creator and the last replyer, because they have their own first-&-last\n-    // entries in the Users column in the forum topic list. [7UKPF26], and a test [206K94QTD]\n-    PageParts.findFrequentPosters(this.allPosts,\n-      ignoreIds = body.map(_.createdById).toSet ++ lastVisibleReply.map(_.createdById).toSet)\n+    PageParts.findFrequentPosters(\n+          this.allPosts, butWithUpdatedPosts = Nil)\n   }\n \n "
    },
    {
      "sha": "1683ad492142b7a6415a5810c489f5c0ebfd3346",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -591,8 +591,10 @@ case class Post(   // [exp] ok use\n   def pagePostNr = PagePostNr(pageId, nr)\n   def hasAnId: Boolean = nr >= PageParts.LowestPostNr\n \n+  def approvedWhen = approvedAt.map(When.fromDate)\n   def lastApprovedAt: Option[When] =\n     lastApprovedEditAt.map(When.fromDate) orElse {\n+      BUG // Shouldn't this be approvedAt instead of createdWhen? [first_last_apr_at]\n       if (isSomeVersionApproved) Some(createdWhen)\n       else None\n     }"
    },
    {
      "sha": "87f9d228ccd7da84dd46eb10a8161e482b1b7746",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Prelude.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPrelude.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -125,6 +125,18 @@ object Prelude {   CLEAN_UP; RENAME // to BugDie and re-export the interesting\n   }\n \n \n+  def getRootCause(thr: Throwable): Throwable = {\n+    var rootCause = thr\n+    // This limit should be enough: (stringifyExceptionAndCauses() above is overkill?)\n+    var loopLimit = 99\n+    while ((rootCause.getCause ne null) && loopLimit > 0) {\n+      rootCause = rootCause.getCause\n+      loopLimit -= 1\n+    }\n+    rootCause\n+  }\n+\n+\n   /** Converts from a perhaps-{@code null} reference to an {@code Option}.\n    */\n   def ?[A <: AnyRef](x: A): Option[A] = if (x eq null) None else Some(x)"
    },
    {
      "sha": "0f38c73fe293b8f9d65566d899ee595497c60aaf",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SystemTransaction.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSystemTransaction.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -122,6 +122,10 @@ trait SystemTransaction {  RENAME // to SysTx, started already\n \n   def loadPendingWebhooks(): Map[SiteId, ImmSeq[Webhook]]\n \n+  // ----- System\n+\n+  def loadSystemSettings(): SystemSettings\n+\n   // ----- Testing\n \n   /** Deletes all data from the database. For example, for a RDBMS,"
    },
    {
      "sha": "d2cf9240e2b102f6065d4710215f6cc3933f3e66",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Validation.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FValidation.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FValidation.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FValidation.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -41,6 +41,7 @@ object Validation {  // rename // to Check, so:  Check.ifBadEmail( ...)  — loo\n \n   // CLEAN_UP don't return the name — looks as if it's maybe getting changed\n   def checkName(name: Option[String]): Option[String] Or ErrorMessage = {\n+    // Dupl code. [full_name_checks]\n     if (name.map(_.trim) != name)\n       return Bad(\"Name starts or ends with blanks\")\n \n@@ -72,6 +73,7 @@ object Validation {  // rename // to Check, so:  Check.ifBadEmail( ...)  — loo\n   def isObviouslyBadEmail(email: String): Bo =\n     checkEmail(email).isBad\n \n+  // Dupl code. [email_adrs_checks]\n   // @deprecated // use ifBadEmail() instead — then cannot forget to check any return val\n   // No, return a ParsedEmail type instead, and use that type everywhere a seemingly\n   // OK email is needed."
    },
    {
      "sha": "f3d74fa72966823b85c1eb4a3344168aa3f2cbaf",
      "filename": "appsv/model/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1831,7 +1831,12 @@ package object core {\n   def isBlank(char: Char): Boolean = char <= ' '\n \n \n-  /** Tests if is valid non local address, and that Apache Commons Email accepts it. */\n+  /** Tests if is valid non local address, and that Apache Commons Email accepts it.\n+    *\n+    * The returned error message does *not* need to be prefixed with \"Invalid email address: \".\n+    *\n+    * Dupl code. [email_adrs_checks]\n+    */\n   def anyEmailAddressError(address: String): Option[ErrorMessage] = {\n     // Try to construct an email first, because results in a somewhat friendly error message,\n     // rather than just a true/false from EmailValidator.isValid().\n@@ -1842,16 +1847,23 @@ package object core {\n     }\n     catch {\n       case ex: Exception =>\n-        return Some(ex.getMessage)\n+        val exNameAndMsg = ex.getMessage\n+        // This drops \"java.package.ExceptionName: \". (If using `getRootCause(ex).getMessage`,\n+        // the message is less detailed.)\n+        val message =\n+              if (!exNameAndMsg.contains(':')) exNameAndMsg\n+              else exNameAndMsg.dropWhile(_ != ':').drop(2)\n+        return Some(s\"Invalid email address: $message\")\n     }\n \n+    // (Move deprecated [email_adrs_checks] to here, to get a better err msg?)\n     val seemsValid = EmailValidator.getInstance(/* allowLocal = */ false).isValid(address)\n     if (!seemsValid)\n-      return Some(\"EmailValidator says the email address is not valid\")\n+      return Some(\"Invalid email address\")\n \n     // The database doesn't allow uppercase (e.g.: `select email_seems_ok('A@ex.co');`).\n     if (address.toLowerCase != address)\n-      return Some(\"Email address contains uppercase characters\")\n+      return Some(\"Invalid (unsupported) email address — it contains uppercase characters\")\n \n     None\n   }"
    },
    {
      "sha": "eedf67f704862ba71eaef862459b59b4ce9b2ee2",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -422,6 +422,7 @@ case object Participant {\n    * and we should handle anything they accept?\n    */\n   def nameIsWeird(name: String): Boolean = {\n+    // Dupl code. [full_name_checks]\n     // Could check for weird Unicode whitespace too, but that will\n     // probably be implicitly solved, when handling spam? ASCII,\n     // however, could mess up the internals of something, because\n@@ -441,7 +442,12 @@ case object Participant {\n   /**\n    * Checks for weird ASCII chars in an email,\n    * and that it matches \"\"\".+@.+\\..+\"\"\".\n-   */\n+   *\n+   * But + should be allowed!\n+   *\n+   * Anyway, no longer needed. But maybe reuse parts of this,\n+   * to generate more friendly invalid-email-addr messages?  [email_adrs_checks]\n+   *  /\n   def emailIsWeird(email: String): Boolean = {\n     // Differences from nameIsOk(): allow \"@_\", disallows \"'\".\n     for (c <- email if c < 0x80) {\n@@ -456,7 +462,7 @@ case object Participant {\n     }\n     if (email matches \"\"\".+@.+\\..+\"\"\") return false\n     true\n-  }\n+  } */\n \n \n   def isOkayGuestBrowserdId(anyValue: Option[String]): Boolean = anyValue match {"
    },
    {
      "sha": "b7079613c178c444ff4aacf6f1082aea79990cd0",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2023/v421__sys_settings.sql",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv421__sys_settings.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv421__sys_settings.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv421__sys_settings.sql?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,16 @@\n+\n+alter table emails_out3 rename column  id    to  email_id_c;\n+alter table emails_out3 rename column  type  to  out_type_c;\n+\n+alter table emails_out3\n+    alter column  out_type_c      type i16_gz_lt1000_d,\n+    add   column  out_sub_type_c       i16_gz_lt1000_d,\n+    drop constraint emailsout_type__c_betw;\n+\n+\n+create table system_settings_t (\n+  maintenance_until_unix_secs_c i64_gz_d\n+);\n+\n+\n+insert into system_settings_t (maintenance_until_unix_secs_c) values (null);"
    },
    {
      "sha": "fd8268c8789956c3a4bce334aa016bdf07965475",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1016,8 +1016,8 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n     val statement = s\"\"\"\n           insert into emails_out3(\n               SITE_ID,\n-              ID,\n-              TYPE,\n+              email_id_c,\n+              out_type_c,\n               SENT_TO,\n               TO_USER_ID,\n               sent_from_c,\n@@ -1070,15 +1070,15 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n             secret_status_c = ?,\n             num_replies_back_c = ?,\n             can_login_again = ?\n-        where SITE_ID = ? and ID = ?\n+        where SITE_ID = ? and email_id_c = ?\n         \"\"\", vals)\n   }\n \n \n   def loadEmailByIdOnly(emailId: St): Option[Email] = {\n     val query = s\"\"\"\n       select * from emails_out3\n-      where SITE_ID = ? and ID = ?\n+      where SITE_ID = ? and email_id_c = ?\n       \"\"\"\n     runQueryFindOneOrNone(query, List(siteId.asAnyRef, emailId), rs => {\n       val e = getEmail(rs)\n@@ -1094,7 +1094,7 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n   def loadEmailBySecretOrId(secretOrId: St): Opt[Email] = {\n     val query = s\"\"\"\n           select * from emails_out3\n-          where site_id = ? and (id = ? or secret_value_c = ?)\n+          where site_id = ? and (email_id_c = ? or secret_value_c = ?)\n           \"\"\"\n     val values = List(siteId.asAnyRef, secretOrId, secretOrId)\n     runQueryFindOneOrNone(query, values, rs => {\n@@ -1114,7 +1114,7 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n       select * from emails_out3\n       where site_id = ?\n         and sent_on > ?\n-        and type = ?\n+        and out_type_c = ?\n         and to_user_id in (${makeInListFor(userIds)})\n       \"\"\"\n     val values =\n@@ -1151,8 +1151,8 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n \n \n   private def getEmail(rs: ResultSet): Email = {\n-    val emailId = rs.getString(\"id\")\n-    val emailTypeInt = rs.getInt(\"type\")\n+    val emailId = rs.getString(\"email_id_c\")\n+    val emailTypeInt = rs.getInt(\"out_type_c\")\n     val emailType = EmailType.fromInt(emailTypeInt) getOrElse throwBadDatabaseData(\n       \"EdE840FSIE\", s\"Bad email type: $emailTypeInt, email id: $siteId:$emailId\")\n     Email("
    },
    {
      "sha": "4e3206e3b31dc745b44ad93d83f05f43f23b1893",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1092,6 +1092,17 @@ class RdbSystemTransaction(\n   }\n \n \n+  def loadSystemSettings(): SystemSettings = {\n+    // There's always exactly one row.\n+    val query = \"\"\" -- loadSystemSettings\n+          select * from system_settings_t \"\"\"\n+    runQueryFindExactlyOne(query, List(), rs => {\n+      SystemSettings(\n+            maintenanceUntilUnixSecs = getOptI64(rs, \"maintenance_until_unix_secs_c\"))\n+    })\n+  }\n+\n+\n   /** Finds all evolution scripts below src/main/resources/db/migration and applies them.\n     */\n   def applyEvolutions() {"
    },
    {
      "sha": "cc4f8065f2cdf0dc743d9901d86d3dafb525bf1c",
      "filename": "appsv/server/controllers/CustomFormController.scala",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FCustomFormController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FCustomFormController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FCustomFormController.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -91,4 +91,63 @@ class CustomFormController @Inject()(cc: ControllerComponents, edContext: TyCont\n     OkSafeJson(Json.obj(\"newPageId\" -> pagePath.pageId))\n   }\n \n+\n+  def handleExternalForm_unused: Action[Either[MaxSizeExceeded, Map[String, Seq[String]]]] =\n+        PostFormAction_unused(\n+            RateLimits.SubmitExternalForm_unused, maxBytes = MaxPostSize,\n+            allowAnyone = true, skipXsrfCheck = true) { req =>\n+    import edContext.globals\n+    import req.dao\n+    val notifyEmailAdr: St = globals.config.forms.notifyAboutFormsEmailAdr getOrElse {\n+      throwForbidden(\"TyE0FORMCONFGD\", o\"\"\"This site hasn't been configured to save\n+            custom forms — conf val missing:  talkyard.notifyAboutFormsEmailAddr\"\"\")\n+    }\n+\n+    val fromIpAdr = req.ip\n+    val formAsText = req.body.toString\n+    val formAsHtml = debiki.TextAndHtml.sanitizeAllowLinksAndBlocks(unsafeHtml = formAsText)\n+\n+    val formNotfEmail = Email.createGenId(\n+          EmailType.FormFilledIn,\n+          createdAt = globals.now(),\n+          sendTo = notifyEmailAdr,\n+          toUserId = None, // maybe could lookup if happens to match formNotfEmail\n+          sendFrom = None,\n+          aboutWhat = None, //  Opt[EmailAbout],\n+          subject = \"Form filled in\",\n+          bodyHtml = formAsHtml,\n+          smtpMsgId = None,  // hash(salt + ip) + seq nr?\n+          inReplyToSmtpMsgId = None,\n+          referencesSmtpMsgIds = Nil)\n+\n+    dao.saveUnsentEmail(formNotfEmail)\n+    globals.sendEmail(formNotfEmail, siteId = dao.siteId)\n+    // I18N, maybe should be a React/Typescript page instead.\n+    Utils.OkHtml(<div>\n+        <script>\n+        function goBackOrClose() {{\n+          if (history.length >= 2) history.back()\n+          else window.close();\n+        }}\n+        </script>\n+        <h2>Saved</h2>\n+        <p>We'll try to remember. Thanks</p>\n+        <p>\n+          <button onclick=\"goBackOrClose()\">Okay</button>\n+        </p>\n+      </div>)\n+  }\n+\n+  def sayCantUseMethodGetHere_unused: Action[U] = GetActionAllowAnyoneRateLimited(\n+        RateLimits.NoRateLimits) { request =>\n+    Utils.OkHtml(\n+          <div>\n+          <h3>Nothing here to do</h3>\n+          <p>\n+          <button onclick=\"history.back()\">Go back</button>\n+          &nbsp; &nbsp;\n+          <button onclick=\"window.close()\">Close</button>\n+          </p>\n+          </div>)\n+  }\n }"
    },
    {
      "sha": "8019467a2ac48845b279004080fef3e121f2b9bd",
      "filename": "appsv/server/controllers/LoginAsGuestController.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -60,10 +60,13 @@ class LoginAsGuestController @Inject()(cc: ControllerComponents, edContext: TyCo\n     throwForbiddenIf(!settings.isGuestLoginAllowed,\n           \"TyE4K5FW2\", \"Guest login disabled; you cannot login as guest here\")\n \n-    throwForbiddenIf(Participant nameIsWeird name, \"TyE82CW19\", \"Weird name. Please use no weird characters\")\n+    throwForbiddenIf(Participant nameIsWeird name,\n+          \"TyE82CW19\", \"Unsupported name: Unexpected characters\")\n     throwForbiddenIf(name.isEmpty, \"TyE872Y90\", \"Please fill in your name\")\n-    throwForbiddenIf(email.nonEmpty && Participant.emailIsWeird(email),\n-      \"TyE04HK83\", \"Weird email. Please use a real email address\")\n+\n+    if (email.nonEmpty) anyEmailAddressError(email) foreach { err =>\n+      throwForbidden(\"TyE04HK83\", err)\n+    }\n     throwForbiddenIf(!settings.isEmailAddressAllowed(email),\n       \"TyEBADEMLDMN_-GST\", \"You cannot sign up using that email address\")\n "
    },
    {
      "sha": "16dee39bff3549b9ec617d432ba8d2e557119ba5",
      "filename": "appsv/server/controllers/SiteAssetBundlesController.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FSiteAssetBundlesController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FSiteAssetBundlesController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FSiteAssetBundlesController.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -22,7 +22,7 @@ import debiki.EdHttp._\n import talkyard.server.{TyContext, TyController}\n import talkyard.server.http._\n import javax.inject.Inject\n-import play.api.mvc.{Action, ControllerComponents}\n+import play.api.mvc.{Action, ControllerComponents, Request => p_Request}\n import scala.util.matching.Regex\n import SiteAssetBundlesController._\n \n@@ -39,6 +39,7 @@ class SiteAssetBundlesController @Inject()(cc: ControllerComponents, edContext:\n   extends TyController(cc, edContext) {\n \n   import context.globals\n+  import context.safeActions.ExceptionAction\n \n   /**\n    * Serves asset bundles.\n@@ -52,19 +53,23 @@ class SiteAssetBundlesController @Inject()(cc: ControllerComponents, edContext:\n   // ?? not in use ?? I changed to 'customAsset' and added a site id param?\n   CLEAN_UP; REMOVE // ?\n   def at(file: String) = GetAction { request =>\n-    customAssetImpl(siteId = request.siteId, fileName = file, request)\n+    customAssetImpl(siteId = request.siteId, fileName = file, request.underlying)\n   }\n \n \n-  def customAsset(pubSiteId: PubSiteId, fileName: String): Action[Unit] = GetAction { request =>\n+  def customAsset(pubSiteId: PubSiteId, fileName: St) = ExceptionAction {\n+          request: p_Request[_] =>\n+    COULD // verify that the host is the same site, or an admin assets UGC (sub)domain,\n+    // or CDN?  But not the wrong site, or u-... instead of a-...  [cust_assets_origin_check].\n+    // But for now, just look at the pub site id param in the url path.\n     val siteId = globals.systemDao.getSiteIdByPubId(pubSiteId) getOrElse {\n       throwNotFound(\"TyE2PKH8\", s\"No site with publ id $pubSiteId\")\n     }\n     customAssetImpl(siteId = siteId, fileName = fileName, request)\n   }\n \n \n-  private def customAssetImpl(siteId: SiteId, fileName: String, request: DebikiRequest[_]) = {\n+  private def customAssetImpl(siteId: SiteId, fileName: String, request: p_Request[_]) = {\n     val dao = globals.siteDao(siteId)\n     // `fileName` is like: bundle-name.<version>.css.\n     fileName match {"
    },
    {
      "sha": "d91692aa6dc4a4e6ba1f94dc78cae33f568c50c2",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -440,6 +440,10 @@ object ViewPageController {\n       \"stuffForMe\" -> JsObjOrNull(anyMeAndRestrStuff.map(_.stuffForMe.toJson(dao))),\n       )\n \n+    request.context.globals.maintWorkUntilSecs foreach { secs =>\n+      volatileJson += \"maintWorkUntilSecs\" -> JsNumber(secs)\n+    }\n+\n     // (If the requester is logged in so we could load a real 'me' here,\n     // then, somehow the browser sent the server the session id, so no need to\n     // include it in the response — the browser knows already."
    },
    {
      "sha": "510d314324d47c315869a496616dec4a7a7d228e",
      "filename": "appsv/server/debiki/Globals.scala",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FGlobals.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -372,11 +372,23 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n \n   def spamChecker: SpamChecker = state.spamChecker\n \n+  @volatile\n+  private var sysSettings: Opt[SystemSettings] = None\n+\n+  def updateSystemSettings(newSettings: SystemSettings): U = {\n+    sysSettings = Some(newSettings)\n+  }\n+\n   /** Is non-zero iff server maintenance is going on, so that the server is read-only.\n     * Should be set to the Unix second when one thinks the maintenance will be done,\n     * or to 1 if one isn't sure. A change requires a Play app server restart to get picked up.\n     */\n-  val maintWorkUntilSecs: Option[Long] = conf.getOptional[Long](\"talkyard.maintenanceUntilUnixSeconds\")\n+  def maintWorkUntilSecs: Opt[i64] = {\n+    sysSettings.flatMap(_.maintenanceUntilUnixSecs) orElse maintWorkUntilSecsInConfFile\n+  }\n+\n+  private val maintWorkUntilSecsInConfFile: Option[Long] =\n+    conf.getOptional[Long](\"talkyard.maintenanceUntilUnixSeconds\")\n \n   /* Add configurable support email address?  [CONFADDRS]\n   val supportEmailAddress: Option[String] =\n@@ -884,6 +896,9 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n         val isAssets = prefix == AssetsUgcHostnamePrefix\n         import talkyard.{server => srv}\n         // Site custom assets URL paths should start with: /-/site/.\n+        // But they are handled by SiteAssetBundlesController.customAsset(pubSiteId, fileName)\n+        // — maybe add / move this check, to there instead? But allow same site access for now,\n+        // and via CDN. [cust_assets_origin_check]\n         throwForbiddenIf(isAssets && !pathAndQuery.startsWith(srv.CustomAssetsUrlBasePath),\n               \"TyEUGCAPATH\", s\"Bad a- UGC path: $path\")\n         // Uploaded files paths should be:  /-/u/\n@@ -1430,6 +1445,12 @@ class Config(conf: play.api.Configuration) extends TyLogging {\n   val createSiteApiSecret: Opt[St] =\n     conf.getOptional[St](\"talkyard.createSiteApiSecret\").noneIfBlank\n \n+  // FOR NOW\n+  object forms {\n+    val notifyAboutFormsEmailAdr: Opt[St] =\n+          conf.getOptional[St](\"talkyard.notifyAboutFormsEmailAddr\").noneIfBlank\n+  }\n+\n   object uploads {\n     TESTS_MISSING // test that these conf vals work properly, by running UploadsDaoSpec twice,\n     // once with default values, once with 2 x higher values (people typically want to increase,"
    },
    {
      "sha": "f20567b467cbf77efc9785f31cf4a9d6c1101f0a",
      "filename": "appsv/server/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FPageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FPageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FPageTpi.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -166,6 +166,12 @@ class SiteTpi protected (\n   def talkyardStyles: xml.Unparsed =\n     xml.Unparsed(views.html.debikiStyles(this).body)\n \n+  def anyGlobalAdminScript: xml.NodeSeq =\n+    if (globals.loadGlobalAdminScript)\n+      <script async=\"async\" src={cdnOrServerOrigin + \"/-/globalAdminScript.js\"}></script>\n+    else\n+      xml.Unparsed(\"\")\n+\n   CLEAN_UP // isAdminApp not needed? already has isAdminArea.\n   def jsonDataMustBeFirst(\n         isCreateSitePage: Bo = false,"
    },
    {
      "sha": "6f01115eba05f1299450a3ea9dbcd9d4c30b2069",
      "filename": "appsv/server/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimits.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -101,6 +101,10 @@ case class MaxLimits(\n \n \n // CLEAN\n+\n+/**\n+  * @param maxPerDayNewUser — If unlimited, maxPerDay is used instead.\n+  */\n abstract class RateLimits {  CLEAN_UP // change to case class, and all concrete limits to vals instead of objects [rate_lims_case_cl]\n   def key: St\n   def what: St\n@@ -736,6 +740,16 @@ object RateLimits {\n     def maxPerDayNewUser: Int = Unlimited\n     override def isReadLimits: Opt[Bo] = Some(true)\n   }\n+\n+\n+  object SubmitExternalForm_unused extends RateLimits {\n+    val key = \"ExFm\"\n+    val what = \"submitted too many forms\"\n+    def maxPerFifteenSeconds = 3\n+    def maxPerFifteenMinutes = 10\n+    def maxPerDay = 30\n+    def maxPerDayNewUser: i32 = Unlimited\n+  }\n }\n \n "
    },
    {
      "sha": "351807923501fa7d43399b7a024b24751370dcf8",
      "filename": "appsv/server/debiki/dao/PageDao.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FPageDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FPageDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPageDao.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -185,6 +185,9 @@ case class PagePartsDao(\n     _allPosts\n   }\n \n+\n+  def updatePostInMem_unimpl(posts: Iterable[Post]): PagePartsDao = this // impl later?\n+\n   def siteId: SiteId = transaction.siteId\n \n   private def throwPageNotFound() ="
    },
    {
      "sha": "c4948e2eee454b12e8af849888f64eecadcbcee4",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 105,
      "deletions": 42,
      "changes": 147,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -227,11 +227,11 @@ trait PostsDao {\n     val shallBumpPage = shallApprove  // (7BMZW24)\n     val numNewOpRepliesVisible = (shallApprove && newPost.isOrigPostReply) ? 1 | 0\n     val newFrequentPosterIds: Seq[UserId] =\n-      if (shallApprove)\n-        PageParts.findFrequentPosters(page.parts.allPosts, // skip newPost, since we ignore ...\n-          ignoreIds = Set(page.meta.authorId, authorMaybeAnon.id))   // ... the author here anyway [3296KGP]\n-      else\n-        page.meta.frequentPosterIds\n+          if (shallApprove)\n+            PageParts.findFrequentPosters(\n+                  page.parts.allPosts, butWithUpdatedPosts = Seq(newPost))\n+          else\n+            page.meta.frequentPosterIds\n \n     val oldMeta = page.meta\n     val newMeta = oldMeta.copy(\n@@ -728,8 +728,8 @@ trait PostsDao {\n \n     // COULD find the most recent posters in the last 100 messages only, because is chat.\n     val newFrequentPosterIds: Seq[UserId] =\n-      PageParts.findFrequentPosters(page.parts.allPosts,  // skip newPost since we ignore ...\n-        ignoreIds = Set(page.meta.authorId, author.id))    // ...the author here anyway [3296KGP]\n+          PageParts.findFrequentPosters(\n+                page.parts.allPosts, butWithUpdatedPosts = Seq(newPost))\n \n     val oldMeta = page.meta\n     val newMeta = oldMeta.copy(\n@@ -815,7 +815,11 @@ trait PostsDao {\n     tx.insertPost(newPost)\n     tx.indexPostsSoon(newPost)\n     tx.updatePageMeta(newMeta, oldMeta = oldMeta, markSectionPageStale = true)\n+\n+    BUG // page.parts is from *before* the new chat msg got added?  [stale_stats]\n+    // Do sth like in:  findInterestingPosters(posts, **butWithUpdatedPosts**) ?\n     updatePagePopularity(page.parts, tx)\n+\n     uploadRefs foreach { uploadRef =>\n       AUDIT_LOG // uploaded files? (And elsewhere too then)\n       tx.insertUploadedFileReference(newPost.id, uploadRef, addedById = author.id)\n@@ -1376,7 +1380,7 @@ trait PostsDao {\n     */\n   def saveDeleteLinks(post: Post, sourceAndHtml: SourceAndHtml, writerTrueId: TrueId,\n           tx: SiteTx, staleStuff: StaleStuff, skipBugWarn: Bo = false): U = {\n-    // Some e2e tests: backlinks-basic.2browsers.test.ts  TyTINTLNS54824\n+    // Some e2e tests: backlinks-basic.2br.d  TyTINTLNS54824\n \n     // Let's always add the page id to staleStuff before, just so that\n     // here we can check that that wasn't forgotten.\n@@ -1833,18 +1837,18 @@ trait PostsDao {\n     import com.debiki.core.{PostStatusAction => PSA}\n     import context.security.throwIndistinguishableNotFound\n \n-    val page = newPageDao(pageId, tx)\n-    if (!page.exists)\n+    val pageBef = newPageDao(pageId, tx)\n+    if (!pageBef.exists)\n       throwIndistinguishableNotFound(\"TyE05KSRDM3\")\n \n     val userId: UserId = reqr.id\n     val user = tx.loadParticipant(userId) getOrElse throwForbidden(\"DwE3KFW2\", \"Bad user id\")\n \n     SECURITY; COULD // check if may see post, not just the page?  [priv_comts] [staff_can_see]\n     // If doing that, then: TESTS_MISSING — namely deleting an anon post on may not see.\n-    throwIfMayNotSeePage(page, Some(user))(tx)\n+    throwIfMayNotSeePage(pageBef, Some(user))(tx)\n \n-    val postBefore = page.parts.thePostByNr(postNr)\n+    val postBefore = pageBef.parts.thePostByNr(postNr)\n     lazy val postAuthor = tx.loadTheParticipant(postBefore.createdById)\n     ANON_UNIMPL // Cannot do this as an anonym, although looks as if one can change\n     // one's own anon posts (using one's real account).\n@@ -1937,6 +1941,8 @@ trait PostsDao {\n     val postsUndeleted = ArrayBuffer[Post]()\n \n     tx.updatePost(postAfter)\n+    val allUpdatedPosts = MutArrBuf(postAfter)\n+\n     if (postBefore.isDeleted != postAfter.isDeleted) {\n       tx.indexPostsSoon(postAfter)\n       if (postAfter.isDeleted) {\n@@ -1951,7 +1957,8 @@ trait PostsDao {\n \n     // Update any indirectly affected posts, e.g. subsequent comments in the same\n     // thread that are being deleted recursively.\n-    if (action.affectsSuccessors) for (successor: Post <- page.parts.descendantsOf(postNr)) {\n+    val postsToReindex = MutArrBuf[Post]()\n+    if (action.affectsSuccessors) for (successor: Post <- pageBef.parts.descendantsOf(postNr)) {\n       val anyUpdatedSuccessor: Option[Post] = action match {\n         case PSA.CloseTree =>\n           if (successor.closedStatus.areAncestorsClosed) None\n@@ -1970,17 +1977,18 @@ trait PostsDao {\n           die(\"TyE2KBIF5\", \"Unexpected PostAction: \" + x)\n       }\n \n-      var postsToReindex = Vector[Post]()\n       anyUpdatedSuccessor foreach { updatedSuccessor =>\n         rememberBacklinksUpdCounts(postBefore = successor, postAfter = updatedSuccessor)\n         tx.updatePost(updatedSuccessor)\n+        allUpdatedPosts.append(updatedSuccessor)\n         if (successor.isDeleted != updatedSuccessor.isDeleted) {\n-          postsToReindex :+= updatedSuccessor\n+          postsToReindex.append(updatedSuccessor)\n         }\n       }\n-      tx.indexPostsSoon(postsToReindex: _*)\n     }\n \n+    tx.indexPostsSoon(postsToReindex: _*)\n+\n     // ----- Update related things\n \n     BUG; SHOULD // delete upload refs, if any posts deleted?  [rm_upl_refs]\n@@ -1998,7 +2006,7 @@ trait PostsDao {\n             linkedPageIds, pageModified = false, backlinksStale = true)\n     }\n \n-    val oldMeta = page.meta\n+    val oldMeta = pageBef.meta\n     var newMeta = oldMeta.copy(version = oldMeta.version + 1)\n     var markSectionPageStale = false\n     var answerGotDeleted = false\n@@ -2065,22 +2073,36 @@ trait PostsDao {\n \n     // COULD update database to fix this. (Previously, chat pages didn't count num-chat-messages.)\n     val isChatWithWrongReplyCount =\n-      page.pageType.isChat && oldMeta.numRepliesVisible == 0 && numVisibleRepliesGone > 0\n+          pageBef.pageType.isChat && oldMeta.numRepliesVisible == 0 && numVisibleRepliesGone > 0\n     val numVisibleRepliesChanged = numVisibleRepliesGone > 0 || numVisibleRepliesBack > 0\n \n     if (numVisibleRepliesChanged && !isChatWithWrongReplyCount) {\n+      UX; BUG // Harmless: If deleting the latest reply, we do update PageMeta.lastApprovedReplyById,\n+      // but maybe some more fields should be updated too?  [stale_stats]\n+      val interestingPosters = PageParts.findInterestingPosters(\n+            pageBef.parts.allPosts, butWithUpdatedPosts = allUpdatedPosts.toSeq)\n       newMeta = newMeta.copy(\n-        numRepliesVisible =\n-            oldMeta.numRepliesVisible + numVisibleRepliesBack - numVisibleRepliesGone,\n-        numOrigPostRepliesVisible =\n-          // For now: use max() because the db field was just added so some counts are off.\n-          math.max(0, oldMeta.numOrigPostRepliesVisible +\n-              numOrigPostVisibleRepliesBack - numOrigPostVisibleRepliesGone))\n+            frequentPosterIds = interestingPosters.frequentPosterIds,\n+            lastApprovedReplyAt = interestingPosters.lastReplyAt,\n+            lastApprovedReplyById = interestingPosters.lastReplyById,\n+            numRepliesVisible =\n+                oldMeta.numRepliesVisible + numVisibleRepliesBack - numVisibleRepliesGone,\n+            numOrigPostRepliesVisible =\n+              // For now: use max() because the db field was just added so some counts are off.\n+              math.max(0, oldMeta.numOrigPostRepliesVisible +\n+                  numOrigPostVisibleRepliesBack - numOrigPostVisibleRepliesGone))\n       markSectionPageStale = true\n-      updatePagePopularity(page.parts, tx)\n+\n+      COULD_OPTIMIZE // Don't reload all posts — instead, update pageBef.parts in-place?\n+      val partsAfter_unimpl = pageBef.parts.updatePostInMem_unimpl(allUpdatedPosts) // later?\n+      // Also see:  butWithUpdatedPosts = ...  just above, and [stale_stats].\n+      // But for now:\n+      val pageAft = newPageDao(pageId, tx)\n+\n+      updatePagePopularity(pageAft.parts, tx)\n     }\n \n-    staleStuff.addPageId(page.id, memCacheOnly = true)  // page version bumped above\n+    staleStuff.addPageId(pageBef.id, memCacheOnly = true)  // page version bumped above\n     tx.updatePageMeta(newMeta, oldMeta = oldMeta, markSectionPageStale)\n \n     // In the future: if is a forum topic, and we're restoring the OP, then bump the topic.\n@@ -2190,20 +2212,35 @@ trait PostsDao {\n     // or if the original post was edited.\n     var makesSectionPageHtmlStale = false\n     if (isApprovingNewPost || isApprovingPageBody) {\n-      val (numNewReplies, numNewOrigPostReplies, newLastApprovedReplyAt, newLastApprovedReplyById) =\n-        if (isApprovingNewPost && postAfter.isReply)\n-          (1, postAfter.isOrigPostReply ? 1 | 0,\n-            Some(tx.now.toJavaDate), Some(postAfter.createdById))\n-        else\n-          (0, 0, pageMeta.lastApprovedReplyAt, pageMeta.lastApprovedReplyById)\n+      val (numNewReplies, numNewOpReplies) =\n+            if (isApprovingNewPost && postAfter.isReply)\n+              (1, postAfter.isOrigPostReply ? 1 | 0)\n+            else\n+              (0, 0)\n+\n+      // Update the frequent replyers list, if this is a reply that's becoming visible\n+      // to everyone, after having been hidden waiting for approval.\n+      val interestingPosters =\n+            if (numNewReplies >= 1)\n+              PageParts.findInterestingPosters(\n+                    page.parts.allPosts, butWithUpdatedPosts = Seq(postAfter))\n+            else\n+              page.meta.interestingPosters\n \n       newMeta = newMeta.copy(\n-        numRepliesVisible = pageMeta.numRepliesVisible + numNewReplies,\n-        numOrigPostRepliesVisible = pageMeta.numOrigPostRepliesVisible + numNewOrigPostReplies,\n-        lastApprovedReplyAt = newLastApprovedReplyAt,\n-        lastApprovedReplyById = newLastApprovedReplyById,\n-        hiddenAt = newHiddenAt,\n-        bumpedAt = pageMeta.isClosed ? pageMeta.bumpedAt | Some(tx.now.toJavaDate))\n+            frequentPosterIds = interestingPosters.frequentPosterIds,\n+            numRepliesVisible = pageMeta.numRepliesVisible + numNewReplies,\n+            numOrigPostRepliesVisible = pageMeta.numOrigPostRepliesVisible + numNewOpReplies,\n+            // The most recent reply might not be the post we're approving: the mods might\n+            // have posted a reply to the reply being approved, when it was still hidden\n+            // & unapproved. Then, the mods' reply won't appear until now, when this reply\n+            // gets approved, becomes visible.\n+            // There might be minor BUGs related to that.  [wrong_latest_reply] [stale_stats]\n+            // E.g. autoApprovePendingEarlyPosts() doesn't think about that.\n+            lastApprovedReplyAt = interestingPosters.lastReplyAt,\n+            lastApprovedReplyById = interestingPosters.lastReplyById,\n+            hiddenAt = newHiddenAt,\n+            bumpedAt = pageMeta.isClosed ? pageMeta.bumpedAt | Some(tx.now.toJavaDate))\n       makesSectionPageHtmlStale = true\n     }\n     tx.updatePageMeta(newMeta, oldMeta = pageMeta, makesSectionPageHtmlStale)\n@@ -2247,6 +2284,8 @@ trait PostsDao {\n \n     var numNewVisibleReplies = 0\n     var numNewVisibleOpReplies = 0\n+    val allUpdatedPosts = MutArrBuf[Post]()\n+\n \n     staleStuff.addPageId(pageId, memCacheOnly = true)  // page version bumped below\n \n@@ -2289,6 +2328,7 @@ trait PostsDao {\n \n       tx.updatePost(postAfter)\n       tx.indexPostsSoon(postAfter)\n+      allUpdatedPosts.append(postAfter)\n \n       val author = tx.loadTheParticipant(post.createdById)\n       saveDeleteLinks(postAfter, sourceAndHtml, author.trueId2, tx, staleStuff)\n@@ -2325,9 +2365,19 @@ trait PostsDao {\n         (Some(tx.now.toJavaDate), lastApprovedReply.map(_.createdById))\n       }\n \n+    val newFrequentPosterIds: Seq[UserId] =\n+          if (numNewVisibleReplies >= 1)\n+            PageParts.findFrequentPosters(\n+                  page.parts.allPosts, butWithUpdatedPosts = allUpdatedPosts.toSeq)\n+          else\n+            page.meta.frequentPosterIds\n+\n     val newMeta = pageMeta.copy(\n+      frequentPosterIds = newFrequentPosterIds,\n       numRepliesVisible = pageMeta.numRepliesVisible + numNewVisibleReplies,\n       numOrigPostRepliesVisible = pageMeta.numOrigPostRepliesVisible + numNewVisibleOpReplies,\n+      // If the mods have replied to some of the replies now getting approved,  [wrong_latest_reply]\n+      // then, the mods' replies are in fact the most recent ones? Harmless BUG.\n       lastApprovedReplyAt = newLastApprovedReplyAt orElse pageMeta.lastApprovedReplyAt,\n       lastApprovedReplyById = newLastApprovedReplyById orElse pageMeta.lastApprovedReplyById,\n       bumpedAt = pageMeta.isClosed ? pageMeta.bumpedAt | Some(tx.now.toJavaDate),\n@@ -2534,7 +2584,7 @@ trait PostsDao {\n       // For now:\n       throwIfMayNotSeePost(postBef, Some(reqr))(tx)\n       dieIf(relType != PatNodeRelType.AssignedTo, \"TyE6X0WMSHUW5\")\n-      throwForbiddenIf(!reqr.isStaffOrTrustedNotThreat,\n+      throwForbiddenIf(!reqr.isStaffOrTrustedNotThreat,  // [who_can_assign]\n             \"TyECAN0ASGN\", s\"You cannot assign people (min trust level is TrustedMember).\")\n \n       // Only works for type AssignedTo (since we look at assigneeIds).\n@@ -3103,10 +3153,23 @@ trait PostsDao {\n       tx.updatePost(postAfter)\n     }\n \n+    lazy val page = newPageDao(pageId, tx)\n+\n+    val interestingPosters =\n+          if (postsToHide.isEmpty) page.meta.interestingPosters\n+          else\n+            PageParts.findInterestingPosters(\n+                  page.parts.allPosts,\n+                  // `page` is from after updatePost(), so no need to:\n+                  butWithUpdatedPosts = Nil)\n+\n     var pageMetaAfter = pageMetaBefore.copy(\n-      numRepliesVisible = pageMetaBefore.numRepliesVisible - numRepliesHidden,\n-      numOrigPostRepliesVisible =\n-          pageMetaBefore.numOrigPostRepliesVisible - numOrigPostRepliesHidden)\n+          frequentPosterIds = interestingPosters.frequentPosterIds,\n+          lastApprovedReplyAt = interestingPosters.lastReplyAt,\n+          lastApprovedReplyById = interestingPosters.lastReplyById,\n+          numRepliesVisible = pageMetaBefore.numRepliesVisible - numRepliesHidden,\n+          numOrigPostRepliesVisible =\n+              pageMetaBefore.numOrigPostRepliesVisible - numOrigPostRepliesHidden)\n \n     // If none of the posts were visible (e.g. because deleted already), we don't need\n     // to update the page meta."
    },
    {
      "sha": "5803b4feb50a7f327c96967a522558f233a9e032",
      "filename": "appsv/server/debiki/dao/SystemDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -798,6 +798,14 @@ class SystemDao(\n   }\n \n \n+  def refreshSystemSettings(): U = {\n+    val sysSettings = readTx { tx =>\n+      tx.loadSystemSettings()\n+    }\n+    globals.updateSystemSettings(sysSettings)\n+  }\n+\n+\n   // ----- Testing\n \n   def emptyDatabase(): Unit = {"
    },
    {
      "sha": "28a8e716bb2db10b8e87e148e87efe79143b1c68",
      "filename": "appsv/server/talkyard/server/TyController.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FTyController.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -161,6 +161,15 @@ class TyController(cc: ControllerComponents, val context: TyContext)\n     PlainApiActionSuperAdminOnly(\n       cc.parsers.json(maxLength = maxBytes))(f)\n \n+  def PostFormAction_unused(rateLimits: RateLimits, maxBytes: i32, allowAnyone: Bo = false,\n+          skipXsrfCheck: Bo = false)(\n+          f: ApiRequest[Either[p.mvc.MaxSizeExceeded, Map[St, Seq[St]]]] => Result)\n+          : Action[Either[MaxSizeExceeded, Map[St, Seq[St]]]] = {\n+    implicit val materializer = context.akkaStreamMaterializer  // [6KFW02G]\n+    PlainApiAction(cc.parsers.maxLength(maxBytes, cc.parsers.formUrlEncoded(maxBytes)),\n+          rateLimits, allowAnyone = allowAnyone, skipXsrfCheck = skipXsrfCheck)(f)\n+  }\n+\n \n   def PostFilesAction(rateLimits: RateLimits, maxBytes: Int, allowAnyone: Boolean = false)(\n         f: ApiRequest[Either[p.mvc.MaxSizeExceeded, MultipartFormData[TemporaryFile]]] => Result)"
    },
    {
      "sha": "a2b154f5510c89662ffeb872fc6869154712a5c6",
      "filename": "appsv/server/talkyard/server/http/SafeActions.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FSafeActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FSafeActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FSafeActions.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -271,12 +271,7 @@ class SafeActions(val globals: Globals, val security: EdSecurity, parsers: PlayB\n \n   private def databaseGoneError(request: Request[_], throwable: Throwable, startingUp: Boolean) = {\n     val url = request.method + \" //\" + request.host + request.uri\n-    var rootCause = throwable\n-    var loopLimit = 99\n-    while ((rootCause.getCause ne null) && loopLimit > 0) {\n-      rootCause = rootCause.getCause\n-      loopLimit -= 1\n-    }\n+    val rootCause = getRootCause(throwable)\n \n     // Seems role-missing never happens, nowadays — instead, Postgres says:\n     // \"password authentication failed\" also if the user doesn't exist."
    },
    {
      "sha": "355a0d628632314c57d62fb30ce4410747f05dd4",
      "filename": "appsv/server/talkyard/server/jobs/Janitor.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -76,13 +76,18 @@ object Janitor {\n           isOrWasTest ? 2.seconds | 23.seconds,\n           isOrWasTest ? delayIfTest | WebhookIntervalSecs.seconds, actorRef, SendWebhooks)\n \n+    globals.actorSystem.scheduler.scheduleWithFixedDelay(\n+          1.seconds,\n+          isOrWasTest ? delayIfTest | 10.seconds, actorRef, RefreshSystemSettings)\n+\n     actorRef\n   }\n \n   object DeleteOldStuff\n   object PurgeOldDeletedSites\n   object ExecuteReviewTasks\n   object SendWebhooks\n+  object RefreshSystemSettings\n }\n \n \n@@ -135,6 +140,8 @@ class JanitorActor(val globals: Globals) extends BackgroundJobsActor(\"JanitorAct\n         executePendingReviewTasks()\n       case SendWebhooks =>\n         sendWebhooks()\n+      case RefreshSystemSettings =>\n+        refreshSystemSettings()\n     }\n   }\n \n@@ -160,4 +167,10 @@ class JanitorActor(val globals: Globals) extends BackgroundJobsActor(\"JanitorAct\n     dao.sendWebhookRequests()\n   }\n \n+\n+  private def refreshSystemSettings(): U = {\n+    val dao = globals.systemDao\n+    dao.refreshSystemSettings()\n+  }\n+\n }"
    },
    {
      "sha": "504cef156f348fcd42aa7db3e49ab58c606fe2d4",
      "filename": "appsv/server/views/createsite/main.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fviews%2Fcreatesite%2Fmain.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/appsv%2Fserver%2Fviews%2Fcreatesite%2Fmain.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fviews%2Fcreatesite%2Fmain.scala.html?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -22,6 +22,7 @@\n <head>\n <title>Create Website</title>\n @tpi.talkyardStyles\n+@tpi.anyGlobalAdminScript\n <style>@Html(css)</style>\n </head>\n <body style=\"overflow: auto\">"
    },
    {
      "sha": "bc35e747521703e11559be8c67dfcb4e77fd0b61",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 127,
      "deletions": 70,
      "changes": 197,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1478,14 +1478,6 @@ export const Editor = createFactory<any, EditorState>({\n     this._handleEditsImpl(title, state.text);\n   },\n \n-  isTitleOk: function() {\n-    // For now\n-    const state: EditorState = this.state;\n-    const title = state.title ? state.title.trim() : null;\n-    if (!title) return false;\n-    return true;\n-  },\n-\n   onTextEdited: function(event) {\n     const text = event.target.value;\n     const state: EditorState = this.state;\n@@ -1501,9 +1493,13 @@ export const Editor = createFactory<any, EditorState>({\n         ? DraftStatus.EditsUndone\n         : DraftStatus.ShouldSave;\n \n+    const newState: Partial<EditorState> = { title, text, draftStatus };\n+\n     const titleChanged = state.title !== title;\n+    if (titleChanged) newState.showTitleErrors = false;\n+    else newState.showTextErrors = false; // maybe a mistake in some edge case, oh well\n \n-    this.setState({ title, text, draftStatus }, () => {\n+    this.setState(newState, () => {\n       if (draftStatus === DraftStatus.ShouldSave) {\n         this.saveDraftSoon();\n       }\n@@ -1525,14 +1521,6 @@ export const Editor = createFactory<any, EditorState>({\n     }\n   },\n \n-  isTextOk: function() {\n-    // For now\n-    const state: EditorState = this.state;\n-    const text = state.text ? state.text.trim() : null;\n-    if (!text) return false;\n-    return true;\n-  },\n-\n   updatePreviewNow: function() {\n     // This function is debounce-d, so the editor might have been cleared\n     // and closed already, or even unmounted.\n@@ -1976,51 +1964,54 @@ export const Editor = createFactory<any, EditorState>({\n   },\n \n   saveEdits: function() {\n-    this.throwIfBadTitleOrText(null, t.e.PleaseDontDeleteAll);\n-    const state: EditorState = this.state;\n-    Server.saveEdits(state.editorsPageId, state.editingPostNr, state.text,\n-          this.anyDraftNr(), state.doAsAnon, () => {\n-      // BUG (harmless) poor UX: [JMPBCK] If we're no longer on the same page as\n-      // the post we were editing (e.g. because keeping the editor open and\n-      // navigating away) then, one won't see the edits appear. Probably should\n-      // navigate back to the post that got edited? First show a popup:\n-      //   \"Go back and view the now edited post? It's on another page;\n-      //   you have navigated away frome it, to here\"\"\n-      this.callOnDoneCallback(true);\n-      this.clearAndCloseFineIfGone(); // [6027TKWAPJ5]\n-    }, state.inFrame);\n+    this.ifNewPostLooksOk(null, t.e.PleaseDontDeleteAll, () => {\n+      const state: EditorState = this.state;\n+      Server.saveEdits(state.editorsPageId, state.editingPostNr, state.text,\n+            this.anyDraftNr(), state.doAsAnon, () => {\n+        // BUG (harmless) poor UX: [JMPBCK] If we're no longer on the same page as\n+        // the post we were editing (e.g. because keeping the editor open and\n+        // navigating away) then, one won't see the edits appear. Probably should\n+        // navigate back to the post that got edited? First show a popup:\n+        //   \"Go back and view the now edited post? It's on another page;\n+        //   you have navigated away frome it, to here\"\"\n+        this.callOnDoneCallback(true);\n+        this.clearAndCloseFineIfGone(); // [6027TKWAPJ5]\n+      }, state.inFrame);\n+    });\n   },\n \n   saveNewPost: function() {\n-    this.throwIfBadTitleOrText(null, t.e.PleaseWriteSth);\n-    const state: EditorState = this.state;\n-    ReactActions.saveReply(state.editorsPageId, state.replyToPostNrs, state.text,\n-          state.anyPostType, state.draft, state.doAsAnon, () => {\n-      // BUG (harmless) poor UX: See [JMPBCK] aboe.\n-      // Also, if we've navigaated away, seems any draft won't get deleted.\n-      this.callOnDoneCallback(true);\n-      this.clearAndCloseFineIfGone();\n-    }, state.inFrame);\n+    this.ifNewPostLooksOk(null, t.e.PleaseWriteSth, () => {\n+      const state: EditorState = this.state;\n+      ReactActions.saveReply(state.editorsPageId, state.replyToPostNrs, state.text,\n+            state.anyPostType, state.draft, state.doAsAnon, () => {\n+        // BUG (harmless) poor UX: See [JMPBCK] aboe.\n+        // Also, if we've navigaated away, seems any draft won't get deleted.\n+        this.callOnDoneCallback(true);\n+        this.clearAndCloseFineIfGone();\n+      }, state.inFrame);\n+    });\n   },\n \n   saveNewForumPage: function() {\n     const state: EditorState = this.state;\n-    this.throwIfBadTitleOrText(t.e.PleaseWriteTitle, t.e.PleaseWriteSth);\n-    const data = {\n-      categoryId: state.newForumTopicCategoryId,\n-      pageRole: state.newPageRole,\n-      pageStatus: 'Published',\n-      pageTitle: state.title,\n-      pageBody: state.text,\n-      deleteDraftNr: this.anyDraftNr(),\n-      doAsAnon: state.doAsAnon,\n-    };\n-    // [DRAFTS_BUG] This doesn't delete the draft? (if any)\n-    Server.createPage(data, (newPageId: string) => {\n-      // Could, but not needed, since assign() below:\n-      //   this.callOnDoneCallback(true);\n-      this.clearAndCloseFineIfGone();\n-      window.location.assign('/-' + newPageId);\n+      this.ifNewPostLooksOk(t.e.PleaseWriteTitle, t.e.PleaseWriteSth, () => {\n+      const data = {\n+        categoryId: state.newForumTopicCategoryId,\n+        pageRole: state.newPageRole,\n+        pageStatus: 'Published',\n+        pageTitle: state.title,\n+        pageBody: state.text,\n+        deleteDraftNr: this.anyDraftNr(),\n+        doAsAnon: state.doAsAnon,\n+      };\n+      // [DRAFTS_BUG] This doesn't delete the draft? (if any)\n+      Server.createPage(data, (newPageId: string) => {\n+        // Could, but not needed, since assign() below:\n+        //   this.callOnDoneCallback(true);\n+        this.clearAndCloseFineIfGone();\n+        window.location.assign('/-' + newPageId);\n+      });\n     });\n   },\n \n@@ -2034,15 +2025,16 @@ export const Editor = createFactory<any, EditorState>({\n   },\n \n   startPrivateGroupTalk: function() {\n-    this.throwIfBadTitleOrText(t.e.PleaseWriteMsgTitle, t.e.PleaseWriteMsg);\n-    const state: EditorState = this.state;\n-    // [DRAFTS_BUG] I think this *does* delete any draft?  this.anyDraftNr() below\n-    Server.startPrivateGroupTalk(state.title, state.text, state.newPageRole,\n-        state.messageToUserIds, this.anyDraftNr(), (pageId: PageId) => {\n-      // Could, but not needed, since assign() below:\n-      //   this.callOnDoneCallback(true);\n-      this.clearAndCloseFineIfGone();\n-      window.location.assign('/-' + pageId);\n+    this.ifNewPostLooksOk(t.e.PleaseWriteMsgTitle, t.e.PleaseWriteMsg, () => {\n+      const state: EditorState = this.state;\n+      // [DRAFTS_BUG] I think this *does* delete any draft?  this.anyDraftNr() below\n+      Server.startPrivateGroupTalk(state.title, state.text, state.newPageRole,\n+          state.messageToUserIds, this.anyDraftNr(), (pageId: PageId) => {\n+        // Could, but not needed, since assign() below:\n+        //   this.callOnDoneCallback(true);\n+        this.clearAndCloseFineIfGone();\n+        window.location.assign('/-' + pageId);\n+      });\n     });\n   },\n \n@@ -2052,7 +2044,7 @@ export const Editor = createFactory<any, EditorState>({\n     if (draft) return draft.draftNr;\n   },\n \n-  throwIfBadTitleOrText: function(titleErrorMessage, textErrorMessage) {\n+  ifNewPostLooksOk: function(titleErrorMessage, textErrorMessage, ifOkFn: () => Vo) {\n     const state: EditorState = this.state;\n     let errors = '';\n     if (titleErrorMessage && isBlank(state.title)) {\n@@ -2066,8 +2058,67 @@ export const Editor = createFactory<any, EditorState>({\n     }\n     if (errors) {\n       util.openDefaultStupidDialog({ body: errors });\n-      throw 'Bad title or text. Not saving this to the server. [EsM7KCW]';\n+      return;\n+    }\n+\n+    // Haven't updated the tests — many would fail, if \"That's a short ...\" dialogs pop up.\n+    const isAutoTest = isAutoTestSite();\n+\n+    const titleLen = state.title.trim().length;\n+    const textLen = state.text.trim().length;\n+    const longTitle = !isAutoTest && titleErrorMessage && titleLen > 130;\n+    const shortTitle = !isAutoTest && titleErrorMessage && titleLen < (\n+            // Chats often have short titles, e.g. \"dev\" or \"support\" or \"ux\" 2 letters :- )\n+            page_isChat(state.newPageRole) ? 2 : 15);\n+    // Orig posts generally need a bit more details than comments (replies).\n+    const shortOrigPost = !isAutoTest && textErrorMessage && state.newPageRole && textLen < 90;\n+    const shortComment = !isAutoTest && textErrorMessage && !state.newPageRole && textLen < 30;\n+    const moreMargin = (text: St) => r.span({ className: 'n_MoreMargin' }, text)\n+    const problemText =   // I18N\n+        // Show title errors first — the title input field is above  [.title_errs_1st].\n+        // the page body textarea.\n+        longTitle ?\n+            r.p({}, `That's a long title. Fewer people read titles that long.`) : (\n+        shortTitle ?\n+            r.p({}, `That's a short title. Descriptive titles tend to get better responses.`) : (\n+        shortOrigPost ?\n+            r.p({}, `Your post is pretty short. Any more details you can add?`) : (\n+        shortComment ? r.div({ className: 'c_2Short-Cmt'},\n+            r.p({}, `That's a short comment. Any more details you can add to the discussion?`),\n+            r.p({},\n+              `Instead of comments like `,\n+              moreMargin(`\"Me too\" `), `or `, moreMargin(`\"+1\", `),\n+              `click the `,\n+              moreMargin(rFr({}, r.b({}, `Like `), r.span({ className: 'icon-heart' }))),\n+              ` button on the comment you're replying to.`)) :\n+        null)));\n+\n+    if (problemText) {\n+      // Paint a red error outline around the too short text or title, so simpler\n+      // to see what the dialog refers to (although will be dimmed behind the\n+      // dialog's overlay, until it's closed).\n+      const showTitleErrors = shortTitle || longTitle;\n+      this.setState({\n+        // Title errors shown first.  [.title_errs_1st].\n+        showTitleErrors,\n+        showTextErrors: (shortOrigPost || shortComment) && !showTitleErrors,\n+      });\n+\n+      util.openDefaultStupidDialog({\n+        body: problemText,\n+        primaryButtonTitle: \"Okay (continue editing)\",  // I18N\n+        secondaryButonTitle: \"Post anyway\",             // I18N\n+        onCloseOk: (bttonNr: Nr) => {\n+          if (bttonNr === 2) {\n+            // Pat clicked 2 \"Post anyway\", so submit.\n+            ifOkFn();\n+          }\n+        },\n+      });\n+      return;\n     }\n+\n+    ifOkFn();\n   },\n \n \n@@ -2390,13 +2441,15 @@ export const Editor = createFactory<any, EditorState>({\n     let pageRoleDropdown;\n     let categoriesDropdown;\n     if (state.newForumTopicCategoryId || isPrivateGroup) {\n-      const titleErrorClass = state.showTitleErrors && !this.isTitleOk() ? ' esError' : '';\n+      const titleErrorClass = state.showTitleErrors ? ' esError' : '';\n+      let titlePlaceholder = page_isChat(state.newPageRole) && t.c.TypeTitle ?\n+                                t.c.TypeTitle : t.e.TitlePlaceholder;\n       titleInput =\n           r.input({ className: 'title-input esEdtr_titleEtc_title form-control' + titleErrorClass,\n               type: 'text', ref: (e: HElm) => this.titleElm = e,\n               tabIndex: 1, onChange: this.onTitleEdited,\n               value: state.title, disabled: !anyDraftLoaded,\n-              placeholder: t.e.TitlePlaceholder,\n+              placeholder: titlePlaceholder,\n               onKeyPress: this.onKeyPressOrKeyDown,\n               onKeyDown: this.onKeyPressOrKeyDown,\n             });\n@@ -2598,6 +2651,8 @@ export const Editor = createFactory<any, EditorState>({\n \n     let saveButtonTitle = t.Save;\n     let cancelButtonTitle = t.Cancel;  // UX should be entitled  t.SaveDraft  instead?  I18N\n+    let textareaPlaceholder = t.e.TypeHerePlaceholder;\n+\n     if (_.isNumber(editingPostNr)) {\n       saveButtonTitle = makeSaveTitle(t.e.Save, t.e.edits);\n     }\n@@ -2637,6 +2692,8 @@ export const Editor = createFactory<any, EditorState>({\n         case PageRole.OpenChat:\n         case PageRole.PrivateChat:\n           saveButtonTitle = makeSaveTitle(t.e.Create, t.e.chat);\n+          textareaPlaceholder = t.c.TypePurpose ||\n+                \"Type here — tell others what this chat is about, its purpose.\";  // I18N\n           break;\n         case PageRole.Question: saveButtonTitle = makeSaveTitle(t.e.Post, t.e.question); break;\n         case PageRole.Problem: saveButtonTitle = makeSaveTitle(t.e.Submit, t.e.problem); break;\n@@ -2695,7 +2752,7 @@ export const Editor = createFactory<any, EditorState>({\n     // React-textarea-autocomplete docs:\n     //   https://github.com/webscopeio/react-textarea-autocomplete\n \n-    const textErrorClass = state.showTextErrors && !this.isTextOk() ? ' esError' : '';\n+    const textErrorClass = state.showTextErrors ? ' esError' : '';\n     const textarea =\n         !anyDraftLoaded ? r.pre({ className: 'e_LdDft' }, t.e.LoadingDraftDots) :\n           ReactTextareaAutocomplete({\n@@ -2729,7 +2786,7 @@ export const Editor = createFactory<any, EditorState>({\n             onKeyPress: this.onKeyPressOrKeyDown,  // ? maybe bind to textarea instead?\n             onKeyDown: this.onKeyPressOrKeyDown,   // ?\n             tabIndex: 1,\n-            placeholder: t.e.TypeHerePlaceholder,\n+            placeholder: textareaPlaceholder ,\n             loadingComponent: () => r.span({}, t.Loading),\n \n             // Currently the server says Forbidden unless one is logged in, when listing usernames."
    },
    {
      "sha": "ef0cfbd633f4d2b2c564bcc6a5467a10c08acc5b",
      "filename": "client/app-editor/editor/editor.styl",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.styl?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -474,6 +474,11 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n     color: $errorColor;\n     background: $errorBackground;\n \n+.c_2Short-Cmt\n+  .n_MoreMargin\n+    margin: 0 0.85ex;  // or sample list becomes hard to read\n+  .icon-heart\n+    color: hsl(0 0% 33%);  // or too dark\n \n \n // React-textarea-autocomplete problems / bugs:   [rta_overfl_top_bgfx]"
    },
    {
      "sha": "20d368198846998f76ad5332fdbd2549fb84f658",
      "filename": "client/app-editor/editor/formatting-help.editor.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -129,7 +129,7 @@ export const formattingHelp: () => StupidDialogStuff = () => {\n     r.p({},\n       \"You can read more about CommonMark at \",\n       r.a({ href: 'https://commonmark.org/help/', target: '_blank' },\n-          \"commonmark.org \", r.span({ className: 'icon-link-ext' })), '.)'));\n+          \"commonmark.org \", r.span({ className: 'icon-link-ext' })), '.'));\n \n   return { body, large: true, dialogClassName: 'c_FmtHlpD', showCloseButton: true };\n }"
    },
    {
      "sha": "7917ba4b5044b453f66493d84b9142a774361f0f",
      "filename": "client/app-head/head-bundle.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-head%2Fhead-bundle.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-head%2Fhead-bundle.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-head%2Fhead-bundle.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -126,6 +126,10 @@ var _pageId = _store.currentPageId;\n var _cp = _store.pagesById[_pageId];\n _store.currentPage = _cp; // Is set to {} in the embedded editor [2BK4P3R]\n \n+if (_volatileData.maintWorkUntilSecs) {\n+  _doc.className += ' n_MaintWork';\n+}\n+\n if (eds.isInEmbeddedEditor) {\n   // This avoids null errors when editor accesses the current page. [2BK4P3R]\n   _store.currentPage = {} as Page;"
    },
    {
      "sha": "0e0e0e9a243da9b9e868f98d7e94983cbc84388d",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Flogin%2Flogin-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Flogin%2Flogin-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Flogin%2Flogin-dialog.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -17,8 +17,6 @@\n \n /// <reference path=\"../more-prelude.more.ts\" />\n /// <reference path=\"../react-bootstrap-old/Input.more.ts\" />\n-/// <reference path=\"../util/FullNameInput.more.ts\" />\n-/// <reference path=\"../util/EmailInput.more.ts\" />\n /// <reference path=\"create-user-dialog.more.ts\" />\n \n //------------------------------------------------------------------------------\n@@ -30,10 +28,6 @@ const r = ReactDOMFactories;\n const Modal = rb.Modal;\n const ModalBody = rb.ModalBody;\n const ModalFooter = rb.ModalFooter;\n-const ModalHeader = rb.ModalHeader;\n-const ModalTitle = rb.ModalTitle;\n-const FullNameInput = util.FullNameInput;\n-const EmailInput = util.EmailInput;\n \n \n let loginDialog;"
    },
    {
      "sha": "646d32d3c7017ed86c727c2f1725fdbd4d235e5c",
      "filename": "client/app-more/page-dialogs/ChangePageModal.more.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -80,6 +80,7 @@ const ChangePageDialog = createComponent({\n     const isOwnPage = store_thisIsMyPage(store);  // [.store_or_state_pg]\n     const isOwnOrStaff = isOwnPage || isStaff(me);\n     const isOwnOrCore = isOwnOrStaff || user_isTrustMinNotThreat(me, TrustLevel.CoreMember);\n+    const isStaffOrTrusted = isStaff(me) || user_isTrustMinNotThreat(me, TrustLevel.Trusted);\n \n     let anyViewAnswerButton;\n     let changeStatusTitle;\n@@ -178,17 +179,17 @@ const ChangePageDialog = createComponent({\n             text: page.pageRole === PageRole.Problem ? t.d.TooltipProblFixed : t.d.TooltipDone,\n             onSelect: () => savePage({ doingStatus: PageDoingStatus.Done }) });\n \n-      // If it can be closed, it can also be assigned?\n+      // If it can be closed, it can also be assigned?  [who_can_assign]\n+      // (Also if it's been closed already — so can change assignee to show\n+      // who was assigned / did it, without having to reopen and close again.)\n       const canAssign = page_canToggleClosed(page) &&\n-          // Also if it's been colsed already? — To show who was previously assigned?\n-          // So don't:  `!alreadyDoneOrAnswered ||`\n           // (Later, will use the permission system: can_assign_pats_c, can_assign_self_c.)\n-          isOwnOrCore;\n+          isStaffOrTrusted;\n       assignBtn = !canAssign ? null : rFr({},\n           r.div({ className: 's_ExplDrp_Ttl' }, \"Assigned to: \"),   // I18N\n           r.div({ className: 's_ExplDrp_ActIt' },\n             !origPost.assigneeIds\n-                ? r.span({ className: 'esP_By e_Asg20' }, `(None)`)  // I18N\n+                ? r.span({ className: 'c_Asg20' }, `(None)`) // I18N\n                 : r.ul({ className: 'c_AsgsL' }, origPost.assigneeIds.map(patId =>\n                     r.li({ key: patId },\n                       UserName({ patId, store, avoidFullName: true })))),"
    },
    {
      "sha": "2a29a021f41b7a77c0db9e70d751d824eb425f37",
      "filename": "client/app-more/page-dialogs/about-user-dialog.more.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -260,8 +260,8 @@ const AboutUser = createComponent({\n \n     const sendMessageButton =\n             !userDetailed || !store_maySendDirectMessageTo(store, userDetailed) ? null :\n-        PrimaryLinkButton({ href: linkToSendMessage(user.id), id: 'e2eUD_MessageB', afterClick,\n-            target: '_blank' },\n+        PrimaryLinkButton({ href: linkToSendMessage(user.id), className: 'c_UD_MsgB',\n+              afterClick, target: '_blank' },\n           t.SendMsg);\n \n     // If in the admin area, typically wants to view the user in the admin area."
    },
    {
      "sha": "33d24fd6e8b9cca8584e4f558fdb2e6143368bc0",
      "filename": "client/app-more/util/EmailInput.more.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futil%2FEmailInput.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futil%2FEmailInput.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2FEmailInput.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -53,7 +53,6 @@ export var EmailInput = createClassAndFactory({\n         notMessageThree: t.inp.NoBadChrs, // \"No weird characters please\"\n         error: this.props.error,\n         onChange: this.props.onChangeValueOk, disabled: this.props.disabled,\n-        onBlur: this.props.onBlur,\n         defaultValue }));\n   }\n });"
    },
    {
      "sha": "4918a0b99b99347377aa4bbd9f8e7ba75c44eb43",
      "filename": "client/app-more/util/UsernameInput.more.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futil%2FUsernameInput.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futil%2FUsernameInput.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2FUsernameInput.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -83,7 +83,6 @@ export const UsernameInput = createClassAndFactory({\n           this.setState({ username: value });\n           this.props.onChangeValueOk(value, ok);\n         },\n-        onBlur: this.props.onBlur,\n         defaultValue,\n         help: this.props.isForGroup\n           ?  r.span({},"
    },
    {
      "sha": "b35d5b786fa72e582131d617817fc1dd8a4947bd",
      "filename": "client/app-more/utils/PatternInput.more.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 24,
      "changes": 62,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futils%2FPatternInput.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-more%2Futils%2FPatternInput.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futils%2FPatternInput.more.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -31,7 +31,6 @@ export const PatternInput = createClassAndFactory({\n       value = value.toLowerCase();\n     }\n     return {\n-      showErrors: (this.props || <any> {}).showErrors,\n       value,\n     };\n   },\n@@ -57,6 +56,11 @@ export const PatternInput = createClassAndFactory({\n     if (onChangeValuOk) {\n       onChangeValuOk(valueMaybeTrimmed, !anyError);\n     }\n+\n+    // If pat stops typing for a while, it's nice to, once hen looks at the\n+    // input again, show any errors, since hen might a bit have forgotten what\n+    // hen was doing?\n+    this.showErrorsSoon();\n   },\n \n   componentDidUpdate: function() {\n@@ -81,11 +85,11 @@ export const PatternInput = createClassAndFactory({\n     this.showErrorsTimeoutHandle = setTimeout(() => {\n       if (this.isGone) return;\n       this.showErrors();\n-    }, 3000);\n+    }, 15*1000);\n   },\n \n   showErrors: function() {\n-    this.setState({ showErrors: true });\n+    this.setState({ showOnBlurErrs: true });\n   },\n \n   findAnyError: function(value: string) {\n@@ -96,40 +100,52 @@ export const PatternInput = createClassAndFactory({\n     if (this.props.required === false && _.isEmpty(value))\n       return null;\n \n-    const lengthError = this.checkLength(value);\n-    if (this.props.testLengthFirst && lengthError)\n-      return lengthError;\n+    // ---- Check directly\n \n-    if (this.props.regex && !this.props.regex.test(value))\n-      return this.props.message;\n+    // Always check the Not regular exprs — they typically check for disallowed\n+    // characters (e.g. typos) and then one would want to hit Backspace directly.\n \n     if (this.props.notRegex && this.props.notRegex.test(value))\n       return this.props.notMessage;\n \n-    if (this.props.regexTwo && !this.props.regexTwo.test(value))\n-      return this.props.messageTwo;\n-\n     if (this.props.notRegexTwo && this.props.notRegexTwo.test(value))\n       return this.props.notMessageTwo;\n \n-    if (this.props.regexThree && !this.props.regexThree.test(value))\n-      return this.props.messageThree;\n-\n     if (this.props.notRegexThree && this.props.notRegexThree.test(value))\n       return this.props.notMessageThree;\n \n-    if (this.props.regexFour && !this.props.regexFour.test(value))\n-      return this.props.messageFour;\n-\n     if (this.props.notRegexFour && this.props.notRegexFour.test(value))\n       return this.props.notMessageFour;\n \n     if (this.props.notRegexFive && this.props.notRegexFive.test(value))\n       return this.props.notMessageFive;\n \n+    // Don't show the other errors, until pat tabs away from this input,\n+    // or becomes inactive for a while — see showErrorsSoon().\n+    if (!this.state.showOnBlurErrs)\n+      return null;\n+\n+    // ---- Check when done typing\n+\n+    // It's annoying if \"Too short ...\" or \"Not a valid address\" appears\n+    // when one has started typing a few characters.\n+\n+    if (this.props.regex && !this.props.regex.test(value))\n+      return this.props.message;\n+\n+    if (this.props.regexTwo && !this.props.regexTwo.test(value))\n+      return this.props.messageTwo;\n+\n+    if (this.props.regexThree && !this.props.regexThree.test(value))\n+      return this.props.messageThree;\n+\n+    if (this.props.regexFour && !this.props.regexFour.test(value))\n+      return this.props.messageFour;\n+\n     if (this.props.lastRegex && !this.props.lastRegex.test(value))\n       return this.props.lastMessage;\n \n+    const lengthError = this.checkLength(value);\n     if (lengthError)\n       return lengthError;\n \n@@ -147,12 +163,10 @@ export const PatternInput = createClassAndFactory({\n   },\n \n   render: function() {\n-    let anyError;\n-    if (this.state.showErrors || this.props.error) {\n-      anyError = this.findAnyError(this.props.trim ? this.state.value.trim() : this.state.value);\n-      if (anyError) {\n-        anyError = r.div({ className: 's_PatInp_Err' }, anyError);\n-      }\n+    let anyError = this.findAnyError(\n+            this.props.trim ? this.state.value.trim() : this.state.value);\n+    if (anyError) {\n+      anyError = r.div({ className: 's_PatInp_Err' }, anyError);\n     }\n     return (\n       r.div({ style: this.props.style },\n@@ -165,7 +179,7 @@ export const PatternInput = createClassAndFactory({\n             this.showErrors();\n             if (this.props.onBlur) this.props.onBlur();\n           },\n-          disabled: this.props.disabled, value: this.state.value, onFocus: this.showErrorsSoon,\n+          disabled: this.props.disabled, value: this.state.value,\n           help: this.props.help }),\n         anyError));\n   }"
    },
    {
      "sha": "7122f107f4c2a5d3b4dc25a18ea1d627355f8a7d",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2FServer.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2FServer.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FServer.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -494,12 +494,10 @@ export function loadJs(src: string, onOk?: () => void, onError?: () => void): an\n let globalStaffScriptLoaded = false;\n \n export function maybeLoadGlobalStaffScript() {\n-  // A bit hacky: e2e test site hostnames contain '-test-', and test sites people\n-  // create to try out the admin features, instead starts with 'test--' [5UKF03].\n   // We don't want any global feedback widget scripts or whatever, to load for e2e tests\n-  // (because the tests would break, if they clicked those widgets) — so don't load any\n-  // script, for '-test-' hostnames (but do load, for 'test--' hostnames).\n-  if (location.hostname.indexOf('-test-') >= 0) return;\n+  // (because the tests would break, if they clicked those widgets).\n+  // (But do load, for test sites created by real people to try out Talkyard.)\n+  if (isAutoTestSite()) return;  // [load_global_js]\n   if (!globalStaffScriptLoaded && eds.loadGlobalStaffScript) {\n     loadJs(eds.cdnOrServerOrigin + '/-/globalStaffScript.js');\n     globalStaffScriptLoaded = true;\n@@ -510,7 +508,7 @@ export function maybeLoadGlobalStaffScript() {\n let globalAdminScriptLoaded = false;\n \n export function maybeLoadGlobalAdminScript() {\n-  if (location.hostname.indexOf('-test-') >= 0) return;  // [5UKF03]\n+  if (isAutoTestSite()) return;  // [load_global_js]\n   if (!globalAdminScriptLoaded && eds.loadGlobalAdminScript) {\n     loadJs(eds.cdnOrServerOrigin + '/-/globalAdminScript.js');\n     globalAdminScriptLoaded = true;"
    },
    {
      "sha": "897f2f11f2c71ae33fc68840165dcdafef4ca4fe",
      "filename": "client/app-slim/disconnected.styl",
      "status": "modified",
      "additions": 56,
      "deletions": 4,
      "changes": 60,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fdisconnected.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fdisconnected.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fdisconnected.styl?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -5,16 +5,68 @@\n .s_NoInetM  // [NOINETMSG]\n   display: none;\n   margin: 5px 5px 0;\n-  padding: 5px 10px 4px;\n-  font-weight: bold;\n+  padding: 4px 10px 5px 12px;\n+  font-size: 14.5px;\n   color: $errorColor;\n   background: $errorBackground;\n   border: 1px solid $errorColor;\n+  @media (min-width: 1000px)\n+    // Why won't these margins work, unless .esTopbar_custom uses  display: flex?\n+    margin-left: auto;\n+    margin-right: auto;\n+    padding: 10px 22px 13px\n+    font-size: 15.5px;\n \n-.s_MaintWorkM,\n+.s_MaintWorkM button\n+  margin: 2px 3px 0 0;\n+  padding: 1px 7px 3px;\n+  border: none;\n+  color: white;\n+  background: hsl(207 100% 47%);\n+  box-shadow: 3px 2px 3px rgba(0, 0, 0, 0.35);\n+  font-weight: bold;\n+\n+html.n_MaintWork .s_MaintWorkM,\n html.s_NoInet .s_NoInetM\n   display: inline-block;\n \n+.s_Tb-Fxd .s_MaintWorkM\n+  // Otherwise the page title will be 0px to the right. [maint_msg_in_middle]\n+  margin-right: 17px;\n+\n+// Or maybe use this always? — Let's wait.\n+html.n_MaintWork .esTopbar_custom\n+  display: flex;\n+  flex: 1;\n+\n+html.n_MaintWork .s_TbW-Stc\n+  margin-bottom: 20px;\n+\n+\n // For now, until has made WebSocket reconnect work, see: tryReonnectWebSocket() [WSRECONN].\n .s_NoInetM\n-  display: none !important; // [NOINETMSG]\n\\ No newline at end of file\n+  display: none !important; // [NOINETMSG]\n+\n+\n+// Disable most buttons that would make the server write to the database, if clicked,\n+// since everything is read-only, and clicking would just make the server reply No.\n+html.n_MaintWork\n+  .dw-a-tools,\n+  .esF_BB_NewTpcB,\n+  .dw-p-as,\n+  .s_APAs,\n+  .s_F_Ts_Cat_Edt,\n+  .esWB_CreateB,\n+  .c_UD_MsgB,\n+  .s_UP_SendMsgB,\n+  // Can't change one's notification level (would write to the database).\n+  .dw-notf-level,\n+  // The edit-page-title button.\n+  .dw-a-edit,\n+  // The edit-forum-intro button.\n+  .esForumIntro_edit,\n+  // It's ok to click View Answer, but not any other Change Page dialog button.\n+  .s_ChPgD button:not(.e_VwAnsB)\n+    opacity: 0.4 !important;\n+    pointer-events: none;\n+    cursor: not-allowed;"
    },
    {
      "sha": "b0de69a24c3be6a9795c71cc9f26980768249232",
      "filename": "client/app-slim/forum/forum.styl",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fforum%2Fforum.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fforum%2Fforum.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fforum%2Fforum.styl?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -429,6 +429,14 @@ html.js:not(.dw-react-started) #dw-topic-list tbody\n     line-height: 0;\n     padding: 0 0 0 2px;\n \n+.c_F_TsL_T_Users\n+  .n_AvsL_AsgSep\n+    float: left;\n+    margin-right: 5px;\n+    font-size: 20px;\n+    color: #999;  // oddly enough, 72% (see just above) is too bright here\n+\n+\n th.dw-tpc-replies\n   padding-left: 0;  // is bug? Remove?\n "
    },
    {
      "sha": "2d5f105074254fb22cfe77e5dac039181295eaa9",
      "filename": "client/app-slim/keyboard-shortcuts.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fkeyboard-shortcuts.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fkeyboard-shortcuts.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fkeyboard-shortcuts.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -159,16 +159,20 @@ function makeMyShortcuts(store: Store, keysTyped: St): ShortcFnInfoZ[] {\n   const origPost: Post | U = curPage && curPage.postsByNr[BodyNr];\n   const isDisc = page_isDiscussion(curPageType);\n   const isForum = curPageType === PageRole.Forum;\n+  const isOwnPage = store_thisIsMyPage(store);\n \n   const me: Me = store.me;\n   const isAdmin: Bo = me.isAdmin;\n   const isStaff: Bo = pat_isStaff(me);\n   const isMember: Bo = pat_isMember(me);\n   const isPageAuthorOrStaff = isStaff || curPageAuthorId === me.id;\n-  const isTrustedOrCore = isStaff || user_trustLevel(me) >= TrustLevel.Trusted;\n-  const isOpAssigned = origPost && !_.isEmpty(origPost.assigneeIds);\n+  const isStaffOrTrusted = isStaff || user_trustLevel(me) >= TrustLevel.Trusted;\n   const isOpAssignedToMe: Bo = origPost && _.includes(origPost.assigneeIds, me.id);\n \n+  // Later, look at permissions:  can_assign_pats_c, can_assign_self_c  [who_can_assign]\n+  const canAssignOrigPost =\n+          page_canToggleClosed(curPage) && isStaffOrTrusted && origPost;\n+\n   // Later:  mayChangePage = ... calculate permissions, look at PostActions,\n   // show Edit button or not, for example.\n \n@@ -223,17 +227,17 @@ function makeMyShortcuts(store: Store, keysTyped: St): ShortcFnInfoZ[] {\n \n       // ----- In a topic\n \n-      isTrustedOrCore && origPost &&\n+      canAssignOrigPost &&\n       ['at', `Assign to:`\n           ] as ShortcInfoItem,\n \n-      isTrustedOrCore && origPost &&\n+      canAssignOrigPost &&\n       ['ato',\n           descr('a',\"ssign \", 't',\"o \", 'o', \"thers\"),\n           () => widgets.openAssignToDiag(origPost, store)],\n \n       // (Don't add any *un*assign ShortcInfoItem — there's just one item (unassign me).)\n-      isTrustedOrCore && origPost &&\n+      canAssignOrigPost &&\n       [isOpAssignedToMe ? 'uam' : 'atm',\n           isOpAssignedToMe ? descr('u',\"n\", 'a',\"ssign \",           'm', \"e\")\n                            : descr(         'a',\"ssign \", 't',\"o \", 'm', \"e\"),"
    },
    {
      "sha": "2aee863802a73f11c8fe64eccf285485afb29213",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -938,6 +938,7 @@ interface WatchbarTopics {\n /// When loading new page html, this is included, as json, in a <script> tag in the page html.\n ///\n interface VolatileDataFromServer {\n+  maintWorkUntilSecs?: WhenSecs;\n   usersOnline: Pat[];\n   numStrangersOnline: Nr;\n   me?: Me;\n@@ -2983,6 +2984,7 @@ interface ServerVars {\n \n   newPasswordData?: NewPasswordData;\n \n+  // CLEAN_UP, REMOVE, instead, use: VolatileDataFromServer.maintWorkUntilSecs.\n   // Is non-zero, if the server is read-only, because of maintenance work. The value\n   // is the Unix second when the maintenance work is believed to be done, or 1 if unspecified.\n   mainWorkUntilSecs?: number;"
    },
    {
      "sha": "5ad4b335cefd1e99b50a56dfecdc4e6aafef9b04",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fprelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fprelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fprelude.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -85,6 +85,13 @@ function isSelfHosted(): Bo {\n   return eds.siteId === 1;\n }\n \n+function isAutoTestSite(): Bo {\n+  // A bit hacky: e2e test site hostnames contain '-test-', but test sites real people\n+  // create to try out Talkyard, instead start with 'test--' [5UKF03]\n+  return location.hostname.indexOf('-test-') >= 0 ||\n+            eds.embeddingUrl && eds.embeddingUrl.indexOf('-test-') >= 0;\n+}\n+\n \n // Use this function to call getBoundingClientRect() and other stuff just before the next repaint,\n // to avoid forced refresh of the layout."
    },
    {
      "sha": "b03ffeafbc2e21543bd979efa14d013ff7ac76e4",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fslim-bundle.d.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -138,6 +138,7 @@ declare namespace ed {\n \n declare function isServerSide(): Bo;\n declare function isSelfHosted(): Bo;\n+declare function isAutoTestSite(): Bo;\n \n \n // In other files:"
    },
    {
      "sha": "0182c1c5f0819a173faaa6b53d93a57f1c394b04",
      "filename": "client/app-slim/topbar/topbar.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Ftopbar%2Ftopbar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Ftopbar%2Ftopbar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Ftopbar%2Ftopbar.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -616,10 +616,15 @@ export const TopBar = createComponent({\n \n     const extraMarginClass = extraMargin ? ' esTopbar-extraMargin' : '';\n \n-    const anyMaintWorkMessage = !eds.mainWorkUntilSecs || isServerSide() ? null :\n-        r.div({ className: 's_MaintWorkM' },\n+    const maintWorkNow = (\n+            eds.mainWorkUntilSecs || // backw compat, CLEAN_UP remove\n+            eds.volatileDataFromServer &&\n+                eds.volatileDataFromServer.maintWorkUntilSecs);\n+    const anyMaintWorkMessage = !maintWorkNow || isServerSide() ? null :\n+        r.div({ className: 's_MaintWorkM' }, r.span({ className: 'n_SysMsg_Txt'},\n           r.b({}, \"Under maintenance\"),\n-          \", everything is read-only.\" ); /* + (\n+          \", read-only. \",\n+          r.button({ onClick: () => location.reload() }, \"Click here\"), \" to retry\")); /* + (\n             eds.mainWorkUntilSecs === 1 ? '' : (\n               \" Time left: \" +\n               Math.max(0, Math.ceil((eds.mainWorkUntilSecs * 1000 - Date.now()) / 3600/1000)) + \" hours\")));\n@@ -631,9 +636,13 @@ export const TopBar = createComponent({\n         r.div({ className: 'esTopbar_custom' },\n           customTitle,\n           // UX REFACTOR break out to its own widget, incl a retry-timeout countdown?\n+          // And place in the middle, *after* CatsAndTitle? [maint_msg_in_middle]\n+          // ----------------------\n           r.div({ className: 's_NoInetM' }, t.ni.NoInet), //  [NOINETMSG]\n           // \"Will retry in X seconds\"  I18N  seconds for live notfs retry, not reading progr\n+          // No, it's better if instead the server sends a msg when maint work done?\n           anyMaintWorkMessage,\n+          // ----------------------\n           backToGroups,\n           backToSiteButton),\n         // Incl also if custNavRow2 defined — otherwise React's hydration won't work."
    },
    {
      "sha": "93cc18833d9c2e6fd4966146ed92a897e30016f4",
      "filename": "client/app-slim/translations.d.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Ftranslations.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Ftranslations.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Ftranslations.d.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -597,6 +597,8 @@ interface TalkyardTranslations {\n     JoinThisChat: string;\n     PostMessage: string;\n     AdvancedEditor: string;\n+    TypeTitle?: string;  // MISSING\n+    TypePurpose?: string;    // MISSING\n     TypeHere: string;\n   }\n "
    },
    {
      "sha": "91e9c7e47858d423893c7597f2ebc836bea1ea27",
      "filename": "client/app-slim/util/ExplainingDropdown.styl",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -20,7 +20,8 @@ $sideSpace = 20px;\n   margin: 0;\n \n   button,\n-  .esP_By,\n+  .c_Asg20,\n+  .c_AsgsL,\n   .esExplDrp_ActIt_Expl\n     margin: 0 0 7px $sideSpace;\n "
    },
    {
      "sha": "c17f39ff096f81a754e4929e46812e68bda14321",
      "filename": "client/app-slim/variables.styl",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fvariables.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Fapp-slim%2Fvariables.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fvariables.styl?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -43,9 +43,9 @@ $pendingModHue = 0;    // red\n $rejectHue = $pendingModHue;\n $acceptHue = $uiHue;\n \n-$errorColor = hsl(8, 100%, 20%);\n-$errorBackground = hsl(45, 100%, 86%);\n-$errorTextColorNoBg = hsl(8, 100%, 40%);\n+$errorColor = hsl(8, 100%, 23%);\n+$errorBackground = hsl(45, 100%, 90%);\n+$errorTextColorNoBg = hsl(9, 100%, 40%);\n \n $subNavColor = hsl(0, 0%, 10%);\n $subNavBackgroundColor = hsl(0, 0%, 91%);"
    },
    {
      "sha": "ba71461fe271afa539fe5da38805c4ad95479ab5",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Ftypes-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/client%2Ftypes-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Ftypes-and-const-enums.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -108,6 +108,7 @@ type AuditLogEntryId = number;\n type TagLabel = string;\n type ApiSecretNr = number;\n type WhenMs = number;   // Unix time: milliseconds since 1970, needs 8 bytes\n+type WhenSecs = number; // Unix time: seconds since 1970, needs 8 bytes too\n type WhenMins = number; // Unix time: minutes since 1970, needs just 4 bytes\n type ExtId = string;\n type ExtImpId = ExtId; // RENAME to ExtId"
    },
    {
      "sha": "46206615bb9aea8805aca9f87541da82d03c988a",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/conf%2Froutes",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/conf%2Froutes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf%2Froutes?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -226,6 +226,9 @@ POST  /-/delete-drafts-text     controllers.DraftsController.deleteDraftsBeacon\n \n POST  /-/submit-custom-form-as-json-reply controllers.CustomFormController.handleJsonReply\n POST  /-/submit-custom-form-as-new-topic  controllers.CustomFormController.handleNewTopic\n+# Not yet:\n+# POST  /-/save-custom-form       controllers.CustomFormController.handleExternalForm\n+# GET   /-/save-custom-form       controllers.CustomFormController.sayCantUseMethodGetHere\n \n # UsabilityTestingExchangeController = [plugin]\n POST  /-/submit-usability-testing-form    talkyard.server.plugins.utx.UsabilityTestingExchangeController.handleUsabilityTestingForm"
    },
    {
      "sha": "36980620151fa0921c0cc2861053addb60c5ef7a",
      "filename": "docs/abbreviations.txt",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Fabbreviations.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Fabbreviations.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fabbreviations.txt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -233,6 +233,8 @@ Txt = text\n Tx  = text (tx = transaction is only server side)\n Typ = type\n U   = user\n+UD  = about user dialog\n+UP  = about user page\n Un  = username\n Upl = upload\n Vb  = verbose, instead of Fat (and Thin) data?. Also Br = brief, Tn = tiny\n@@ -353,7 +355,7 @@ s_UD            = About user dialog\n s_UD_ExtrInf    = Extra info about the user, e.g. s/he is a Frequent Poster in a topic, or topic starter.\n \n s_PP  --yes--   = Profile page, or Participant's page\n-s_UP  --no--    = A user's public profile page  RENAME to  s_PP = profile page or pat's page, since groups and gusets too, not just users.\n+s_UP  --no--    = A user's public profile page  RENAME to  s_PP = profile page or pat's page, since groups and gusets too, not just users.  Or DON't rename? 'U' is maybe simpler to remember what it is for? 'P' could be interpreted as Post?\n s_UP_Ab         = The about part (the top of the profile page)\n s_UP_EmLg       = Emails and logins\n esUP_Un         = Username  COULD rename t s_UP_Ab_UN"
    },
    {
      "sha": "0470ba41226eac99ae6e35a5bf561099eb39b0b7",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -20,6 +20,9 @@ when exceeded 50%, so can review and bump. And warnings if exceeds 75%, 90%.\n [first_last_apr_at]\n Fix sort order bug: Add Post.firstApprovedAt.\n \n+[stale_stats]\n+Popularity calcs sometimes ignore the very latest comment / chat msg?\n+\n [timeline_comts] Maybe. Rename \"progress posts\" to \"timeline comments\"?\n \n [ty_themes]"
    },
    {
      "sha": "3efb9569b0869d742be26be4dc1e413f2b6747e7",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 31,
      "deletions": 12,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -101,17 +101,19 @@ authn:\n           - create-site-github-oauth-uppercase-email  TyT5AKR2Z95\n   to long username generated from email gets truncated to 20 chars = MaxUsernameLength\n           - create-site-github-oauth-uppercase-email  TyT5AKR2Z95  [6AKBR20Q]\n-  providers -\n+  providers:\n     google:\n-          - create-site-all-logins.test.ts  TyT5KBWAZ2\n-          - gmail-fb-join-login.extidp.1br.test.ts  TyTE2EGMFBJOINLGI\n+            - create-site-gmail-and-email-notf.1br.d.extidp  TyT7KKTEHS24\n+            - create-site-all-logins.test.ts  TyT5KBWAZ2\n+            - gmail-fb-join-login.extidp.1br.test.ts  TyTE2EGMFBJOINLGI\n     facebook:\n-          - create-site-all-logins.test.ts  TyT5KBWAZ2\n-          - gmail-fb-join-login.extidp.1br.test.ts  TyTE2EGMFBJOINLGI\n+            - create-site-facebook.1br.d.extidp  TyT8KA9AW3\n+            - create-site-all-logins.test.ts  TyT5KBWAZ2\n+            - gmail-fb-join-login.extidp.1br.test.ts  TyTE2EGMFBJOINLGI\n     github:\n-          - create-site-github-oauth-uppercase-email  TyT5AKR2Z95\n+            - create-site-github-uppercase-email.1br.d.extidp  TyT5AKR2Z95\n     linkedin:\n-          - create-site-linkedin.test.ts  T8KA9AW3\n+            - create-site-linkedin.1br.d.extidp  TyT402KDTT5Z\n     twitter:\n   openauth security:\n           - generate fake login request: TESTS_MISSING\n@@ -559,6 +561,14 @@ forum -\n     'newest' and a category:\n     click load-more twice:\n \n+[prom_pats_tests],\n+topic list,\n+forum topic list:\n+  orig poster, frequent posters, last poster, assigned avatar list:\n+            - topic-prominent-pats-basic.2br.d  TyTPROMPATS_BSC\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR\n+            - SitePatcherAppSpec.scala  206K94QTD\n+\n forum intro text -  (5KC2)\n   edit, remove, add back:\n   hide, show:\n@@ -589,11 +599,11 @@ categories:\n     gets marked as deleted for staff:\n     hidden for non-staff:\n     topics hidden unless staff:\n-          - links-internal.2browsers.test.ts  TyTINTLNS54824.TyTDELCATTPC054\n+          - backlinks-basic.2br.d  TyTINTLNS54824.TyTDELCATTPC054\n     topics not found when searching:\n     can undelete:\n     backlinks from topics inside disappear:\n-          - links-internal.2browsers.test.ts  TyTINTLNS54824.TyTDELCATBLNS\n+          - backlinks-basic.2br.d  TyTINTLNS54824.TyTDELCATBLNS\n   permissions:   (1QRY7)\n             - category-perms.2br.d  TyTE2ECATPREMS01\n             - cats-perf-many.2br.d  TyTECATPREFMNY.TyTPRIVCATS\n@@ -828,7 +838,7 @@ link previews:\n backlinks,\n internal links:  # (687295)\n   blockquote:\n-          - links-internal.2browsers.test.ts  TyTINTLNS54824\n+          - backlinks-basic.2br.d  TyTINTLNS54824\n           - link-previews-internal-may-see.2br  TyTE2ELNPVIN7252.TyT606SRTR3\n           - link-previews-internal-not-see-cat.2br TyTE2ELNPVIN4837.TyT60T6SRTR3\n   inline, just title:\n@@ -1178,6 +1188,7 @@ review after:\n     approve posts:\n             - admin-user-threat-mild.2browsers.test.ts  [TyT2WKBG4Z]\n             - admin-user-threat-moderate.2browsers.test.ts  [TyT5KHFIQ20]\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR\n       with tags:\n             - tags-badges-not-missing.2br  TyTETAGS0MISNG.TyTAPRTGDPO\n \n@@ -1216,8 +1227,9 @@ review after:\n     remaining get approved:\n           - admin-review-cascade-approval.2browsers.test.ts  TyT0SKDE24\n   mod new page:\n-          - modn-approve-before.2browsers.test.ts  TyTE2E52RKDHI\n-          - modn-from-disc-page-appr-befr.2browsers.test.ts  TyTE2E603RTJ\n+            - modn-approve-before.2browsers.test.ts  TyTE2E52RKDHI.TyTAPRTHRPG01\n+            - modn-from-disc-page-appr-befr.2browsers.test.ts  TyTE2E603RTJ\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR.TyTAPRTHRT\n   mod first posts:\n           - FirstPostsAppSpec.scala  TyTIT205RKDJ4\n           - modn-appr-bef-comb-w-revw-aftr.2browsers.test.ts  TyTE2E05RKD3\n@@ -1230,10 +1242,14 @@ review after:\n           - new-member-allow-approve.2browsers.test.ts  TyT4AKBJ20.TyTE2E306RKP\n     staff can edit:\n           - modn-from-disc-page-appr-befr.2browsers.test.ts  TyTE2E603RTJ.TyTE2E407RKS\n+    staff can reply to not yet approved pages and comments:\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR.TyTREBEFAPR\n   require approval before, if trust less than:\n           - modn-approve-before.2browsers.test.ts  TyTE2E52RKDHI\n           - modn-appr-bef-comb-w-revw-aftr.2browsers.test.ts  TyTE2E05RKD3\n           - server side: TyT305RKTH205\n+  require approval before, if threat:\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR.TyTAPRTHRT\n   require approval before, because flagged:\n           - flag-member-block-agree.2browsers  TyTE2EFLGMEMBLK.TyTE2EFLAGTRTMOD\n   review after, if trust less than:\n@@ -1252,6 +1268,7 @@ review after:\n   moderate from page:\n             - modn-from-disc-page-appr-befr.2browsers.test.ts  TyTE2E603RTJ\n             - tags-badges-not-missing.2br  TyTETAGS0MISNG.TyTAPRTGDPO\n+            - topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR.TyTAPRTHRT\n     other mod moderates just after, from moderation page:\n           - TESTS_MISSING TyT204RKSTEM\n \n@@ -1424,6 +1441,8 @@ assign posts:\n       see who is assigned (if any), then, one won't get notfications\n       that show who's assigned:\n             - assign-can-see.2br.d  TyTASSIGNCANSEE\n+  see assignee(s) in topic list:\n+            - topic-prominent-pats-basic.2br.d  TyTPROMPATS_BSC.TyTSEETOPICASGS\n \n \n superadmin -"
    },
    {
      "sha": "446f88f60dfcef008eb5d891461ca7b5af0195bc",
      "filename": "lock.sbt",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/lock.sbt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -54,24 +54,24 @@ Compile / dependencyOverrides ++= {\n       \"com.typesafe.akka\" % \"akka-serialization-jackson_2.12\" % \"2.6.20\",\n       \"com.typesafe.akka\" % \"akka-slf4j_2.12\" % \"2.6.20\",\n       \"com.typesafe.akka\" % \"akka-stream_2.12\" % \"2.6.20\",\n-      \"com.typesafe.play\" % \"build-link\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"build-link\" % \"2.8.19\",\n       \"com.typesafe.play\" % \"cachecontrol_2.12\" % \"2.0.0\",\n-      \"com.typesafe.play\" % \"filters-helpers_2.12\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"filters-helpers_2.12\" % \"2.8.19\",\n       \"com.typesafe.play\" % \"play-ahc-ws-standalone_2.12\" % \"2.1.10\",\n-      \"com.typesafe.play\" % \"play-ahc-ws_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-akka-http-server_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"play-ahc-ws_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play-akka-http-server_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.19\",\n       \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.4\",\n       \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.4\",\n-      \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.19\",\n       \"com.typesafe.play\" % \"play-ws-standalone-json_2.12\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"play-ws-standalone-xml_2.12\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"play-ws-standalone_2.12\" % \"2.1.10\",\n-      \"com.typesafe.play\" % \"play-ws_2.12\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play_2.12\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"play-ws_2.12\" % \"2.8.19\",\n+      \"com.typesafe.play\" % \"play_2.12\" % \"2.8.19\",\n       \"com.typesafe.play\" % \"shaded-asynchttpclient\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"shaded-oauth\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"twirl-api_2.12\" % \"1.5.1\",\n@@ -185,4 +185,4 @@ Compile / dependencyOverrides ++= {\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH a4c4bf8e20217ab288b7f32276dc87b6943e7e10\n+// LIBRARY_DEPENDENCIES_HASH 1d8857cfedb2b632c40fc15210e7161950584144"
    },
    {
      "sha": "e31aafcc10e27deb3b047dc7dcba66504ed9f143",
      "filename": "modules/ty-translations",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules%2Fty-translations?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1 +1 @@\n-Subproject commit ccb23ca518d4f07411afeecad93f0e198c45581b\n+Subproject commit e31aafcc10e27deb3b047dc7dcba66504ed9f143"
    },
    {
      "sha": "16fcf2d033562c1bcc46a800428c8d2dd2f59684",
      "filename": "project/build.properties",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/project%2Fbuild.properties",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/project%2Fbuild.properties",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2Fbuild.properties?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1,4 +1,8 @@\n-sbt.version=1.7.3\n+sbt.version=1.7.2\n+# Oops, 1.7.3 also causes the below error  (not only 1.8.x).  See:\n+#   https://github.com/playframework/playframework/issues/11522\n+#   \"Play project doesn't work with sbt 1.7.3 and 1.8.0+\"\n+\n \n # Let's wait with v1.8, Play still uses some XML lib v1 but this upgrade instead\n # starts using v2, causing an error:"
    },
    {
      "sha": "1d67f36eca1502fecc8a717619927fda54e55766",
      "filename": "project/plugins.sbt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/project%2Fplugins.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/project%2Fplugins.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2Fplugins.sbt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -18,7 +18,7 @@ resolvers ++= Seq(\n   Resolver.sbtPluginRepo(\"releases\")) // =  https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/\n \n // Use the Play sbt plugin for Play projects\n-addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.18\")\n+addSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.8.19\")\n \n // A refactoring and linting tool for Scala\n addSbtPlugin(\"ch.epfl.scala\" % \"sbt-scalafix\" % \"0.10.4\")"
    },
    {
      "sha": "4e856d659e1cbec62acd40b2127ea368ef060d25",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1 +1 @@\n-Subproject commit c42361fa3e6ac7df6b50180a7e74df5d59ae8c18\n+Subproject commit 4e856d659e1cbec62acd40b2127ea368ef060d25"
    },
    {
      "sha": "d15569f7ce8ddc0030d68f2fb7bc09ba4976ed8d",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -288,12 +288,12 @@ function runAllE2eTests {\n   #   s/wdio --only manual.2browsers --dt --da --reuse --localHostname e2e-test-something\n \n   $r s/wdio --only all-links $args   # RENAME to test-import  ?\n-  $r s/wdio --only create-site-password-run-admin-intro-tours $args\n-  $r s/wdio --only create-site-gmail-and-email-notf.1br.extidp $args\n-  $r s/wdio --only create-site-facebook.1br.extidp $args\n-  $r s/wdio --only create-site-github-uppercase-email.1br.extidp $args\n-  $r s/wdio --only create-site-linkedin.1br.extidp $args\n-  $r s/wdio --only create-site-admin-guide.2browsers $args\n+  $r s/wdio-7 --only create-site-password-run-admin-intro-tours.1br.d --cd -i $args\n+  $r s/wdio-7 --only create-site-gmail-and-email-notf.1br.d.extidp --cd -i $args\n+  $r s/wdio-7 --only create-site-facebook.1br.d.extidp --cd -i $args\n+  $r s/wdio-7 --only create-site-github-uppercase-email.1br.d.extidp --cd -i $args\n+  $r s/wdio-7 --only create-site-linkedin.1br.d.extidp --cd -i $args\n+  $r s/wdio-7 --only create-site-admin-guide.2br.d --cd -i $args\n   $r s/wdio --only gmail-fb-join-login.extidp.1br $args\n \n   # Needs HTTPS (dummy localhost cert is ok).\n@@ -323,8 +323,7 @@ function runAllE2eTests {\n   $r s/wdio-7 --only comment-sort-order-inherited.d.2br --cd -i $args\n   $r s/wdio-7 --only dir.summarize-squash-siblings.2br --cd -i $args\n \n-  # RENAME to internal-inline-link-previews-and-backlinks.2br?\n-  $r s/wdio --only links-internal.2browsers $args\n+  $r s/wdio-7 --only backlinks-basic.2br.d --cd -i $args\n \n   $r s/wdio-7 --only link-previews-internal-may-see.2br.d --cd -i $args\n   $r s/wdio-7 --only link-previews-internal-not-see-cat.2br.d --cd -i $args\n@@ -515,6 +514,9 @@ function runAllE2eTests {\n   $r s/wdio-7 --only assign-to-notfs.2br.d --cd -i $args\n   $r s/wdio-7 --only assign-can-see.2br.d --cd -i $args\n \n+  $r s/wdio-7 --only topic-prominent-pats-basic.2br.d --cd -i $args\n+  $r s/wdio-7 --only topic-prominent-pats-reply-approve.2br.d --cd -i $args\n+\n \n   # Moderation   (4862065)\n   # ------------"
    },
    {
      "sha": "b27e2f6e415c832d6596691409650f503fba8b31",
      "filename": "tests/e2e-wdio7/specs/__e2e-test-template.2br.d.e2e__.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.d.e2e__.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.d.e2e__.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2F__e2e-test-template.2br.d.e2e__.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -141,6 +141,10 @@ describe(`some-e2e-test  TyTE2E1234ABC`, () => {\n     mallory_brB = brB;\n     stranger_brB = brB;\n \n+    // Changing trust & threat levels:\n+    maria.trustLevel = c.TestTrustLevel.Basic;\n+    maria.threatLevel = c.TestThreatLevel.HopefullySafe;\n+\n     assert.refEq(builder.getSite(), forum.siteData);\n   });\n "
    },
    {
      "sha": "830bfff3e1c4e831f59b234a3d5e8ed1789ddb23",
      "filename": "tests/e2e-wdio7/specs/backlinks-basic.2br.d.e2e.ts",
      "status": "added",
      "additions": 468,
      "deletions": 0,
      "changes": 468,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fbacklinks-basic.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fbacklinks-basic.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fbacklinks-basic.2br.d.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,468 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import { logBoring } from '../utils/log-and-die';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owensBrowser: TyE2eTestBrowser;\n+let memah: Member;\n+let memahsBrowser: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+\n+let forum: TwoPagesTestForum;\n+\n+\n+describe(\"backlinks-basic.2br.d  TyTINTLNS54824\", () => {\n+\n+  it(\"import a site\", async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Some E2E Test\",\n+      members: ['maria', 'memah', 'michael'],\n+    });\n+\n+    // Disable notifications, or notf email counts will be off (since Owen would get emails).\n+    builder.settings({ numFirstPostsToReview: 0, numFirstPostsToApprove: 0 });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }];\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+  it(\"initialize people\", async () => {\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owensBrowser = brA;\n+\n+    memah = forum.members.memah;\n+    memahsBrowser = brB;\n+  });\n+\n+  it(\"Memah logs in\", async () => {\n+    await memahsBrowser.go2(site.origin);\n+    await memahsBrowser.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+\n+\n+  // ------ Simple backlinks\n+\n+  const michelsTopicUrl = () => `${site.origin}/${forum.topics.byMichaelCategoryA.slug}`;\n+  const michelsTopicTitle = () => forum.topics.byMichaelCategoryA.title;\n+  const mariasTopicUrl = () => `${site.origin}/${forum.topics.byMariaCategoryA.slug}`;\n+  const mariasTopicTitle = () => forum.topics.byMariaCategoryA.title;\n+\n+  // We'll edit and then delete topic A.\n+  let topicAUrl: string;\n+  let topicAId: string;\n+\n+  const topicA_title = 'topicA_title';\n+\n+  const topicA_body_link2MiTpc_link2MaTpc = () =>\n+      `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicUrl()} ${mariasTopicUrl()}`;\n+  const topicA_body_link2MiTpc_link2MaTpc_withPreviews = (): St =>\n+      `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicTitle()} ${mariasTopicTitle()}`;\n+\n+  const topicA_body_link2MiTpc = (): St =>\n+      `topicA_body_link2MiTpc ${michelsTopicUrl()}`;\n+  const topicA_body_link2MiTpc_withPreviews = (): St =>\n+      `topicA_body_link2MiTpc ${michelsTopicTitle()}`;\n+\n+  const topicA_body_noLinks = `topicA_body_noLinks`;\n+\n+  const topicAReply_link2MaTpc = () =>\n+        `topicAReply_link2MaTpc ${mariasTopicUrl()}`;\n+  const topicAReply_link2MaTpc_withPreviews = () =>\n+        `topicAReply_link2MaTpc ${mariasTopicTitle()}`;\n+\n+\n+  // Topic B will disappear when we delete its whole category.\n+  let topicBUrl: string;\n+  let topicBId: string;\n+  const topicB_title = 'topicB_title';\n+  const topicB_body_link2MiTpc = () => `topicB_body_link2MiTpc ${michelsTopicUrl()}`;\n+  const topicB_body_link2MiTpc_withPreviews = () =>\n+          `topicB_body_link2MiTpc ${michelsTopicTitle()}`;\n+\n+\n+  it(\"Memah posts a topic A that links to Michael's and Maria's pages\", async () => {\n+    await memahsBrowser.complex.createAndSaveTopic({\n+          title: topicA_title,\n+          body: topicA_body_link2MiTpc_link2MaTpc(),\n+          bodyMatchAfter: 'topicA_body_link2MiTpc_link2MaTpc' });\n+    topicAUrl = await memahsBrowser.getUrl();\n+    topicAId = '2';  // how know?\n+  });\n+\n+  it(\"... inline link previews appear\", async () => {\n+    await memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n+          topicA_body_link2MiTpc_link2MaTpc_withPreviews());\n+  });\n+\n+  it(\"Owen goes to Memah's new topic\", async () => {\n+    await owensBrowser.go2(topicAUrl);\n+    await owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(\"No backlinks to this page\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 0); // ttt\n+  });\n+\n+  it(\"Owen follows the link to Michael's page\", async () => {\n+    await owensBrowser.waitAndClickFirst('#post-1 a');\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+          c.BodyNr, forum.topics.byMichaelCategoryA.body);\n+    assert.eq(await owensBrowser.getUrl(), michelsTopicUrl());\n+  });\n+\n+  it(\"There's a backlink\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(1);\n+  });\n+\n+  it(\"... from Memah's page\", async () => {\n+    assert.ok(await owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n+  });\n+\n+  it(\"... with Memah's page's title\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.getLinkTitle(topicAId), topicA_title);\n+  });\n+\n+  it(\"Owen clicks the backlink\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.clickBacklinkFrom(topicAId));  // ttt — there's a real link?\n+  });\n+\n+  it(\"... gets to Memah's page again\", async () => {\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+            c.BodyNr, 'topicA_body_link2MiTpc_link2MaTpc');\n+  });\n+\n+  it(\"Owen now follows the link to Maria's page\", async () => {\n+    await owensBrowser.waitAndClickNth('#post-1 a', 2);\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+            c.BodyNr, forum.topics.byMariaCategoryA.body);\n+    assert.eq(await owensBrowser.getUrl(), mariasTopicUrl());\n+  });\n+\n+  it(\"There's a backlink here too\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 1);\n+  });\n+\n+  it(\"... from Memah's page\", async () => {\n+    assert.ok(await owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n+  });\n+\n+  it(\"... with Memah's page's title\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.getLinkTitle(topicAId), topicA_title);\n+  });\n+\n+\n+\n+  // ------ Deleting a backlink, by editing it out\n+\n+\n+  it(\"Memah deletes the link to Maria's topic\", async () => {\n+    // But keeps the link to Michael's topic.\n+    await memahsBrowser.complex.editPageBody(topicA_body_link2MiTpc(),\n+          { textAfterMatches: 'topicA_body_link2MiTpc' });\n+  });\n+\n+  it(\"... now there's only one inline link preview — to Michael's topic\", async () => {\n+    await memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n+          topicA_body_link2MiTpc_withPreviews());\n+  });\n+\n+  it(\"Owen refreshes Maria's page until the backlink is gone\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(0);\n+  });\n+\n+  it(\"Owen goes to Michael's page\", async () => {\n+    await owensBrowser.go2(michelsTopicUrl());\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+            c.BodyNr, forum.topics.byMichaelCategoryA.body);\n+  });\n+\n+  it(\"... still a backlink here\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 1);\n+  });\n+\n+  it(\"... from Memah's page\", async () => {\n+    assert.ok(await owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n+  });\n+\n+\n+\n+  // ------ Deleting backlinks, by deleting the whole page\n+\n+\n+  it(\"Memah links to Maria's page again, via a reply\", async () => {\n+    await memahsBrowser.complex.replyToOrigPost(topicAReply_link2MaTpc());\n+  });\n+\n+  it(\"... a block link preview appears\", async () => {\n+    const text = await memahsBrowser.topic.getPostText(c.FirstReplyNr);\n+    assert.includes(text, topicAReply_link2MaTpc_withPreviews());\n+  });\n+\n+  it(\"Owen goes there\", async () => {\n+    await owensBrowser.go2(mariasTopicUrl());\n+    await owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMariaCategoryA.body);\n+  });\n+\n+  it(\"... there's a backlink here, again\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(1);\n+  });\n+\n+  it(\"... from Memah's page\", async () => {\n+    assert.ok(await owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n+  });\n+\n+  it(\"Owen deletes Memah's whole page!\", async () => {\n+    await owensBrowser.go2(topicAUrl);\n+    await owensBrowser.topbar.pageTools.deletePage();\n+  });\n+\n+  it(\"... returns to Maria's page\", async () => {\n+    await owensBrowser.go2(mariasTopicUrl());\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+            c.BodyNr, forum.topics.byMariaCategoryA.body);\n+  });\n+\n+  it(\"Backlink gone\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(0);\n+  });\n+\n+  it(\"Owen goes to Michael's page\", async () => {\n+    await owensBrowser.go2(michelsTopicUrl());\n+    await owensBrowser.topic.waitUntilPostTextMatches(\n+            c.BodyNr, forum.topics.byMichaelCategoryA.body);\n+  });\n+\n+  it(\"... backlink gone here too\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+\n+\n+\n+  // ------ Deleting backlinks, by deleting category\n+\n+\n+  it(\"Memah goes to the Specifc Category\", async () => {\n+    await memahsBrowser.forumTopicList.goHere({\n+          categorySlug: forum.categories.specificCategory.slug });\n+  });\n+\n+  it(\"... posts a topic B that links to Michael's page\", async () => {\n+    await memahsBrowser.complex.createAndSaveTopic({\n+          title: topicB_title, body: topicB_body_link2MiTpc(),\n+          bodyMatchAfter: 'topicB_body_link2MiTpc' });\n+    topicBUrl = await memahsBrowser.getUrl();\n+    topicBId = await memahsBrowser.getPageId();\n+    assert.eq(topicBId, '3');\n+  });\n+\n+  it(\"... a link preview appears\", async () => {\n+    const text = await memahsBrowser.topic.getPostText(c.BodyNr);\n+    assert.eq(text, topicB_body_link2MiTpc_withPreviews())\n+  });\n+\n+  it(\"Owen refreshes Micheal's page\", async () => {\n+    assert.eq(await owensBrowser.getUrl(), michelsTopicUrl());\n+    await owensBrowser.refresh2();\n+  });\n+\n+  it(\"... there's a backlink\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(1);\n+  });\n+\n+  it(\"... from Memah's new topic\", async () => {\n+    assert.ok(await owensBrowser.topic.backlinks.isLinkedFromPageId(topicBId));\n+  });\n+\n+  it(\"Owen follows the backlink\", async () => {\n+    await owensBrowser.topic.backlinks.clickBacklinkFrom(topicBId);\n+    logBoring(\"... gets to Memah's 2nd page\")\n+    await owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, 'topicB_body_link2MiTpc');\n+  });\n+\n+  it(\"... goes to the category\", async () => {\n+    await owensBrowser.topbar.clickAncestor(forum.categories.specificCategory.name);\n+  });\n+\n+  it(\"Owen deletes the whole category!  TyTDELCATBLNS\", async () => {\n+    await owensBrowser.forumButtons.clickEditCategory();\n+    await owensBrowser.categoryDialog.deleteCategory();\n+  });\n+\n+  it(\"Memah now cannot see her topic — gone, category deleted  TyTDELCATTPC054\", async () => {\n+    await memahsBrowser.refresh2();\n+    await memahsBrowser.assertNotFoundError({ whyNot: 'CategroyDeleted' });\n+  });\n+\n+  it(\"Memah and Owen go to the linked topic, i.e. Michael's page\", async () => {\n+    await memahsBrowser.go2(michelsTopicUrl());\n+    await owensBrowser.go2(michelsTopicUrl());\n+  });\n+\n+  it(\"... the backlink is gone: Memah cannot see it\", async () => {\n+    await memahsBrowser.topic.backlinks.refreshUntilNum(0);\n+  });\n+\n+  it(\"... neither can Owen\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+\n+\n+  // ------ Deleting backlinks, by deleting a reply  TESTS_MISSING\n+  // ------ Restoring, by un-deleting the reply      TESTS_MISSING\n+\n+\n+  // ------ Deleting backlinks, by flagging and hiding a reply   TESTS_MISSING\n+  // ------ Restoring backlinks, by disagreeing with the flags    TESTS_MISSING\n+\n+\n+  // ------ Backlinks won't appear, until reply approved   TESTS_MISSING\n+\n+\n+  // ------ Backlinks won't appear, until linking topic approved   TESTS_MISSING\n+\n+\n+  // ------ Deleting backlinks, by moving to a deleted category      TESTS_MISSING   TyTBACKLNSCAT\n+  // ------ Restoring backlinks, by moving to a Not deleted category TESTS_MISSING   TyTBACKLNSCAT\n+\n+  // ------ \"Deleting\" backlinks, by moving to a staff-only category  TESTS_MISSING  TyTBACKLNSCAT\n+  // ------ \"Restoring\" backlinks, by moving to a public category     TESTS_MISSING  TyTBACKLNSCAT\n+\n+\n+\n+  // ------ Staff-only backlinks: Creating, viewing\n+\n+  // Hmm this could be a separate e2e test.\n+  const owensTopicId = '4'; // how know?\n+  const owensTopicTitle = 'owensTopicTitle';\n+  const owensTopic_link2MiTpc = () => `owensTopic_link2MiTpc ${michelsTopicUrl()}`;\n+  const owensTopic_link2MiTpc_previews = () =>\n+          `owensTopic_link2MiTpc ${michelsTopicTitle()}`;\n+  const owensReply_link2MaTpc = () => `owensReply_link2MaTpc ${mariasTopicUrl()}`;\n+  const owensReply_link2MaTpc_previews = () =>\n+          `owensReply_link2MaTpc ${mariasTopicTitle()}`;\n+\n+  it(\"Owen wants his own backlinks!  He goes to the staff cateory\", async () => {\n+    await owensBrowser.forumTopicList.goHere({\n+          categorySlug: forum.categories.staffOnlyCategory.slug });\n+  });\n+\n+  it(\"... posts a staff-only topic with a link to Michael's page\", async () => {\n+    await owensBrowser.complex.createAndSaveTopic({\n+          title: owensTopicTitle, body: owensTopic_link2MiTpc(),\n+          bodyMatchAfter: 'owensTopic_link2MiTpc' });\n+  });\n+\n+  it(\"... and a reply linking to Maria's page\", async () => {\n+    await owensBrowser.complex.replyToOrigPost(owensReply_link2MaTpc());\n+  });\n+\n+  it(\"Owen follows his link to Michael's page\", async () => {\n+    await owensBrowser.waitAndClick(`#post-${c.BodyNr} a`);\n+    logBoring(`The url is correct`);\n+    assert.eq(await owensBrowser.getUrl(), michelsTopicUrl());\n+  });\n+\n+  it(\"Owen sees a backlink\", async () => {\n+    await owensBrowser.topic.backlinks.refreshUntilNum(1);\n+  });\n+\n+  it(\"... from his satff-only topic\", async () => {\n+    await owensBrowser.topic.backlinks.isLinkedFromPageId(owensTopicId);\n+  });\n+\n+  it(\"... but Memah doesn't; she's an ordinary member, not staff\", async () => {\n+    assert.eq(await memahsBrowser.getUrl(), michelsTopicUrl());\n+    await memahsBrowser.refresh2();\n+    await memahsBrowser.waitForMyDataAdded();\n+    assert.eq(await memahsBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+\n+  it(\"Owen sees a backlink also on Maria's page\", async () => {\n+    await owensBrowser.go2(mariasTopicUrl());\n+    await owensBrowser.waitForMyDataAdded();\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 1);\n+  });\n+\n+  it(\"... but Memah doesn't\", async () => {\n+    await memahsBrowser.go2(mariasTopicUrl());\n+    await memahsBrowser.waitForMyDataAdded();\n+    assert.eq(await memahsBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+\n+\n+  // ------ Staff-only backlinks: Deleting\n+\n+  /*\n+\n+  it(\"Owen starts thinking that backlinks are Bad\", async () => {\n+    // Noop\n+  });\n+\n+  it(\"... since the words 'Backlinks' and 'Bad' both start with 'Ba'\", async () => {\n+    // Noop\n+  });\n+\n+  it(\"Owen clicks the reply backlink\", async () => {\n+  });\n+\n+  it(\"... gets back to the staff-only page with links\", async () => {\n+  });\n+\n+  it(\"Owen deletes the reply with the backlink\", async () => {\n+  });\n+\n+  it(\"... goes to Maria's topic again\", async () => {\n+    await owensBrowser.go2(mariasTopicUrl());\n+  });\n+\n+  it(\"... the backlink is gone\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+\n+  it(\"On Memah's topic though\", async () => {\n+    await owensBrowser.go2(topicAUrl);\n+  });\n+\n+  it(\"... there's still a backlink\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 1);\n+  });\n+\n+  it(\"Owen returns to his page\", async () => {\n+    await owensBrowser.back();\n+    await owensBrowser.back();\n+  });\n+\n+  it(\"Owen deletes the whole page\", async () => {\n+  });\n+\n+  it(\"... goes to Memah's topi\", async () => {\n+    await owensBrowser.go2(topicAUrl);\n+  });\n+\n+  it(\"... the backlink is gone\", async () => {\n+    assert.eq(await owensBrowser.topic.backlinks.countBacklinks(), 0);\n+  });\n+  */\n+\n+});\n+"
    },
    {
      "sha": "e2006dfd6aa8c7dba94d31777f39896420813ae0",
      "filename": "tests/e2e-wdio7/specs/create-site-admin-guide.2br.d.e2e.ts",
      "status": "added",
      "additions": 184,
      "deletions": 0,
      "changes": 184,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-admin-guide.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-admin-guide.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-admin-guide.2br.d.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,184 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import * as make from '../utils/make';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import { logMessage } from '../utils/log-and-die';\n+\n+let owen;\n+let maria;\n+\n+const forumTitle = \"Adm Guide\";\n+const editedForumTitle = \"Adm Guide Edtd\";\n+const testId = utils.generateTestId();\n+const newOrgName = \"New Org Name\";\n+const newIntroText = \"Intro text text text.\";\n+const newWelcomeTopicText = \"New welcome topic text text text\";\n+const newWelcomeTopicTitle = \"New Welcome Title Title Title\";\n+const newCategoryName = \"Wasteland\";\n+const newTopicTitle = \"Total Desert\";\n+const newTopicText = \"No water here text text text\";\n+let siteId: SiteId;\n+let siteUrl: string;\n+\n+const mariasTopicTitle = \"mariasTopicTitle\";\n+const mariasTopicText = \"mariasTopicText\";\n+\n+\n+describe(\"create site, follow the admin guide  TyT62RJHLPK4\", function() {\n+\n+  it(\"initialize people\", async () => {\n+    const brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    const brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+    owen = _.assign(brA, make.memberOwenOwner());\n+    // Use an unique address so won't run into max-sites-per-email limit.\n+    owen.emailAddress = \"e2e-test--owen-\" + testId + \"@example.com\";\n+    maria = _.assign(brB, make.memberMaria());\n+  });\n+\n+  it(\"Owen creates a site\", async () => {\n+    const localHostname = utils.getLocalHostname('create-site-' + testId);\n+    logMessage(`Generated local hostname: ${localHostname}`);\n+\n+    const newSiteData = {\n+      testId: testId,\n+      localHostname: localHostname,\n+      name: localHostname,\n+      origin: utils.makeSiteOrigin(localHostname),\n+      originRegexEscaped: utils.makeSiteOriginRegexEscaped(localHostname),\n+      orgName: \"Owen's E2E Org\",\n+      fullName: 'E2E Test ' + testId,\n+      email: owen.emailAddress,\n+    };\n+    await owen.go2(utils.makeCreateSiteWithFakeIpUrl());\n+    console.log(\"Fills in fields and submits\");\n+    await owen.createSite.fillInFieldsAndSubmit(newSiteData);\n+    console.log(\"Clicks login\");\n+    await owen.createSite.clickOwnerSignupButton();\n+    await owen.disableRateLimits();\n+    console.log(\"Creates password account\");\n+    await owen.loginDialog.createPasswordAccount(owen);\n+    siteId = await owen.getSiteId();\n+    console.log(\"Gets a verification email\");\n+    const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(siteId, owen.emailAddress);\n+    await owen.go2(link);\n+    console.log(\"Clicks continue\");\n+    await owen.waitAndClick('#e2eContinue');\n+    console.log(\"Creates a forum\");\n+    await owen.createSomething.createForum(forumTitle);\n+    siteUrl = await owen.getUrl();\n+  });\n+\n+  it(\"Maria sees it\", async () => {\n+    await maria.go2(siteUrl);\n+    await maria.assertPageTitleMatches(forumTitle);\n+    await maria.disableRateLimits();\n+  });\n+\n+  it(\"Owen edits settings: requires people to login\", async () => {\n+    await owen.topbar.clickGoToAdmin();\n+    await owen.complex.closeSidebars(); // otherwise might open later and bump setting positions\n+    await owen.adminArea.settings.legal.editOrgName(newOrgName);\n+    await owen.adminArea.settings.clickLoginNavLink();\n+    await owen.adminArea.settings.login.setLoginRequired(true);\n+    await owen.adminArea.settings.clickSaveAll();\n+  });\n+\n+  it(\"Now Maria needs to create an account\", async () => {\n+    await maria.loginDialog.refreshUntilFullScreen();\n+  });\n+\n+  it(\"... she creates an account\", async () => {\n+    await maria.loginDialog.createPasswordAccount(maria);\n+  });\n+\n+  it(\"... clicks an email confirmation link\", async () => {\n+    const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(siteId, maria.emailAddress);\n+    await maria.go2(link);\n+  });\n+\n+  it(\"... and can see the homepage again\", async () => {\n+    await maria.go2(siteUrl);\n+    await maria.assertPageTitleMatches(forumTitle);\n+  });\n+\n+  it(\"... and the new organization name, on the ToU page\", async () => {\n+  });\n+\n+  it(\"Owen leaves the admin area, goes back to the forum\", async () => {\n+    await owen.adminArea.clickLeaveAdminArea();\n+    await owen.assertPageTitleMatches(forumTitle);\n+  });\n+\n+  it(\"... he edits the forum title\", async () => {\n+    await owen.pageTitle.clickEdit();\n+    await owen.pageTitle.editTitle(editedForumTitle);\n+    await owen.pageTitle.save();\n+    await owen.assertPageTitleMatches(editedForumTitle);\n+  });\n+\n+  it(\"... and the forum intro text\", async () => {\n+    await owen.forumButtons.clickEditIntroText();\n+    await owen.editor.editText(newIntroText);\n+    await owen.editor.save();\n+    await owen.waitAndAssertVisibleTextMatches('.esForumIntro', newIntroText);\n+  });\n+\n+  it(\"... opens the Welcome topic\", async () => {\n+    await owen.forumTopicList.goToTopic(\"Welcome\");\n+  });\n+\n+  it(\"... edits title and text\", async () => {\n+    await owen.topic.clickEditOrigPost();\n+    await owen.editor.editText(newWelcomeTopicText);\n+    await owen.editor.save();\n+    await owen.pageTitle.clickEdit();\n+    await owen.pageTitle.editTitle(newWelcomeTopicTitle);\n+    await owen.pageTitle.save();\n+    await owen.assertPageTitleMatches(newWelcomeTopicTitle);\n+  });\n+\n+  it(\"... returns to the forum\", async () => {\n+    await owen.topic.clickHomeNavLink();\n+  });\n+\n+  it(\"... views categories\", async () => {\n+    await owen.forumButtons.clickViewCategories();\n+  });\n+\n+  it(\"... creates a category\", async () => {\n+    await owen.forumButtons.clickCreateCategory();\n+    await owen.categoryDialog.fillInFields({ name: newCategoryName });\n+    await owen.categoryDialog.submit();\n+  });\n+\n+  it(\"... and a topic in that category\", async () => {\n+    await owen.forumCategoryList.openCategory(newCategoryName);\n+    await owen.complex.createAndSaveTopic({ title: newTopicTitle, body: newTopicText });\n+  });\n+\n+  it(\"... returns to the topic list\", async () => {\n+    await owen.topic.clickHomeNavLink();\n+  });\n+\n+  it(\"Now both Owen and Maria see all changes Owen did\", async () => {\n+    await maria.refresh2();\n+    await maria.assertPageTitleMatches(editedForumTitle);\n+    await owen.assertPageTitleMatches(editedForumTitle);\n+    // ...\n+  });\n+\n+  it(\"Maria creates a topic\", async () => {\n+    await maria.complex.createAndSaveTopic({ title: mariasTopicTitle, body: mariasTopicText });\n+  });\n+\n+  // This is for email + password users. [7LERTA1]\n+  it(\"Owen gets a notification (site owners get notified about everything)\", async () => {\n+    await server.waitUntilLastEmailMatches(\n+        siteId, owen.emailAddress, [mariasTopicTitle, mariasTopicText], browser);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "0df5aa18ee5f71317f8e9abc7e6a0eb12f19d401",
      "filename": "tests/e2e-wdio7/specs/create-site-facebook.1br.d.extidp.e2e.ts",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-facebook.1br.d.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-facebook.1br.d.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-facebook.1br.d.extidp.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,73 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as utils from '../utils/utils';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import settings from '../utils/settings';\n+import { logMessage } from '../utils/log-and-die';\n+\n+let browser: TyE2eTestBrowser;\n+\n+\n+describe('create-site-facebook.1br.d.extidp  @createsite @login @facebook  TyT8KA9AW3', () => {\n+\n+  if (!settings.include3rdPartyDependentTests) {\n+    logMessage(\"Skipping this spec; no 3rd party login credentials specified.\");\n+    return;\n+  }\n+\n+  if (settings.skipFacebook) {\n+    logMessage(\"Skipping Facebook login tests.\");\n+    return;\n+  }\n+\n+  it('initialize', async () => {\n+    browser = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+  });\n+\n+\n+  addCreateSiteWithFacebookTestSteps({ alreadyLoggedIn: false });\n+\n+  it('Can actually use the FB admin account to create stuff', async () => {\n+    await browser.complex.createAndSaveTopic({ title: \"Facebook topic title\", body: \"Body\" });\n+  });\n+\n+  it('Logout from Talkyard after', async () => {\n+    // This logs out from the Talkyard site only, to clear Ty cookies,\n+    // so won't affect other tests.\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+\n+  // Now we're logged in over at Facebook already, so the Facebook login flow\n+  // can be slightly different.\n+  addCreateSiteWithFacebookTestSteps({ alreadyLoggedIn: true });\n+\n+  it('Logout after', async () => {\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+\n+  function addCreateSiteWithFacebookTestSteps(ps: { alreadyLoggedIn: boolean }) {\n+    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n+    let newSiteResult: NewSiteResult;\n+\n+    it(`can create site as Facebook user, when ${maybe} logged in to Facebook`, async () => {\n+      const data = utils.generateNewSiteData({\n+        newSiteOwner: NewSiteOwnerType.FacebookAccount,\n+        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n+      });\n+      logMessage(\"Create new site:\");\n+      newSiteResult = await browser.newSite.createNewSite(data);\n+    });\n+\n+    it('Sign up as owner', async () => {\n+      await browser.newSite.signUpAsOwner(newSiteResult);\n+    });\n+\n+    it('Create forum', async () => {\n+      await browser.createSomething.createForum(\"Facebook Forum Title\");\n+    });\n+  }\n+\n+});\n+"
    },
    {
      "sha": "679c901326d5b1381c80f2e3017e2bcbe5a9687d",
      "filename": "tests/e2e-wdio7/specs/create-site-github-uppercase-email.1br.d.extidp.e2e.ts",
      "status": "renamed",
      "additions": 37,
      "deletions": 40,
      "changes": 77,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-github-uppercase-email.1br.d.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-github-uppercase-email.1br.d.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-github-uppercase-email.1br.d.extidp.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1,24 +1,21 @@\n /// <reference path=\"../test-types.ts\"/>\n \n-import _ = require('lodash');\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import logAndDie = require('../utils/log-and-die');\n-import createTestData = require('./create-site-impl');\n-import c = require('../test-constants');\n-const logUnusual = logAndDie.logUnusual, die = logAndDie.die, dieIf = logAndDie.dieIf;\n-const logMessage = logAndDie.logMessage;\n+import assert from '../utils/ty-assert';\n+import * as utils from '../utils/utils';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import settings from '../utils/settings';\n+import { die } from '../utils/log-and-die';\n+import c from '../test-constants';\n+import { NewSiteOwnerType } from '../test-constants';\n \n let browser: TyE2eTestBrowser;\n \n const newMembersEmail = 'e2e-test--mia@example.com';\n const newMembersTopicTitle = 'newMembersTopicTitle';\n const newMembersTopicText = 'newMembersTopicText';\n \n-describe('create-site-github-oauth-uppercase-email  @createsite  @login @github  TyT5AKR2Z95', () => {\n+\n+describe('create-site-github-uppercase-email.1br.d.extidp  @createsite  @login @github  TyT5AKR2Z95', () => {\n \n   if (!settings.include3rdPartyDependentTests) {\n     console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n@@ -29,60 +26,60 @@ describe('create-site-github-oauth-uppercase-email  @createsite  @login @github\n     die(\"GitHub authn e2e test creds currently use http [TyE8020756SRM]\");\n   }\n \n-  it('initialize', () => {\n-    browser = new TyE2eTestBrowser(wdioBrowser);\n+  it('initialize', async () => {\n+    browser = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n   });\n \n-  it(\"The test really uses mixed case OpenAuth email and username  [TyTMXDCSEOAUTH]\", () => {\n+  it(\"The test really uses mixed case OpenAuth email and username  [TyTMXDCSEOAUTH]\", async () => {\n     const email = settings.githubEmailMixedCase;\n     const username = settings.githubUsernameMixedCase;\n-    assert(email && email !== email.toLowerCase(),\n+    assert.ok(email && email !== email.toLowerCase(),\n         \"githubEmailMixedCase is not mixed case: \" + email);\n-    assert(username && username !== username.toLowerCase(),\n+    assert.ok(username && username !== username.toLowerCase(),\n         \"githubUsernameMixedCase is not mixed case: \" + username);\n   });\n \n-  it(\"The email addr local part is too long for a username [6AKBR20Q]\", () => {\n-    assert(settings.githubUsernameMixedCase.length > c.MaxUsernameLength);\n+  it(\"The email addr local part is too long for a username [6AKBR20Q]\", async () => {\n+    assert.ok(settings.githubUsernameMixedCase.length > c.MaxUsernameLength);\n   });\n \n \n \n   addCreateSiteWithGitHubTestSteps({ alreadyLoggedIn: false });\n \n   it('gets the correct username, truncted to MaxUsernameLength = 20, ' +\n-        'although the email addr local part is longer [6AKBR20Q]', () => {\n-    assert.equal(\n-        browser.topbar.getMyUsername(),\n+        'although the email addr local part is longer [6AKBR20Q]', async () => {\n+    assert.eq(\n+        await browser.topbar.getMyUsername(),\n         settings.githubUsernameMixedCase\n             .replace(/-/g, '_')\n             .substr(0, c.MaxUsernameLength));\n   });\n \n-  it('can actually use the GitHub admin account to create stuff', () => {\n-    browser.complex.createAndSaveTopic({ title: \"GitHub topic title\", body: \"Body\" });\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n+  it('can actually use the GitHub admin account to create stuff', async () => {\n+    await browser.complex.createAndSaveTopic({ title: \"GitHub topic title\", body: \"Body\" });\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n   });\n \n \n \n   // Now we're logged in already, so the GitHub login flow can be slightly different.\n   addCreateSiteWithGitHubTestSteps({ alreadyLoggedIn: true });\n \n-  it(\"Goes to profile page, views account info\", () => {\n-    browser.topbar.clickGoToProfile();\n-    browser.userProfilePage.goToPreferences();\n-    browser.userProfilePage.preferences.switchToEmailsLogins();\n+  it(\"Goes to profile page, views account info\", async () => {\n+    await browser.topbar.clickGoToProfile();\n+    await browser.userProfilePage.goToPreferences();\n+    await browser.userProfilePage.preferences.switchToEmailsLogins();\n   });\n \n-  it(\"... signup is indeed via GitHub and a mixed case email address  [TyT4AR8GFAH]\", () => {\n-    browser.userProfilePage.preferences.emailsLogins.waitAndAssertLoginMethod({\n+  it(\"... signup is indeed via GitHub and a mixed case email address  [TyT4AR8GFAH]\", async () => {\n+    await browser.userProfilePage.preferences.emailsLogins.waitAndAssertLoginMethod({\n           providerName: 'github', username: settings.githubUsernameMixedCase,\n           emailAddr: settings.githubEmailMixedCase });\n   });\n \n-  it(\"... which was converted to lowercase\", () => {\n-    browser.userProfilePage.preferences.emailsLogins.waitUntilEmailAddressListed(\n+  it(\"... which was converted to lowercase\", async () => {\n+    await browser.userProfilePage.preferences.emailsLogins.waitUntilEmailAddressListed(\n         settings.githubEmailMixedCase.toLowerCase(), { shallBeVerified: true });\n   });\n \n@@ -91,20 +88,20 @@ describe('create-site-github-oauth-uppercase-email  @createsite  @login @github\n     const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n     let newSiteResult: NewSiteResult;\n \n-    it(`can create site as GitHub user, when ${maybe} logged in to GitHub`, () => {\n-      const data = createTestData({\n+    it(`can create site as GitHub user, when ${maybe} logged in to GitHub`, async () => {\n+      const data = utils.generateNewSiteData({\n         newSiteOwner: NewSiteOwnerType.GitHubAccount,\n         alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n       });\n-      newSiteResult = browser.newSite.createNewSite(data);\n+      newSiteResult = await browser.newSite.createNewSite(data);\n     });\n \n-    it('Sign up as owner', () => {\n-      browser.newSite.signUpAsOwner(newSiteResult);\n+    it('Sign up as owner', async () => {\n+      await browser.newSite.signUpAsOwner(newSiteResult);\n     });\n \n-    it('create forum', () => {\n-      browser.createSomething.createForum(\"GitHub Forum Title\");\n+    it('create forum', async () => {\n+      await browser.createSomething.createForum(\"GitHub Forum Title\");\n     });\n   }\n ",
      "previous_filename": "tests/e2e/specs/create-site-github-uppercase-email.1br.extidp.test.ts"
    },
    {
      "sha": "89928c69c9ca3059f396197b38a88be8b0bb0a54",
      "filename": "tests/e2e-wdio7/specs/create-site-gmail-and-email-notf.1br.d.extidp.e2e.ts",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.d.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.d.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.d.extidp.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,93 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import settings from '../utils/settings';\n+import { NewSiteOwnerType } from '../test-constants';\n+\n+let browser: TyE2eTestBrowser;\n+\n+const newMembersEmail = 'e2e-test--mia@example.com';\n+const newMembersTopicTitle = 'newMembersTopicTitle';\n+const newMembersTopicText = 'newMembersTopicText';\n+\n+\n+describe('create-site-gmail-and-email-notf.1br.d.extidp  @createsite  @login @gmail TyT7KKTEHS24', () => {\n+\n+  if (!settings.include3rdPartyDependentTests) {\n+    console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n+    return;\n+  }\n+\n+  it('initialize', async () => {\n+    browser = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+  });\n+\n+\n+  addCreateSiteWithGmailTestSteps({ alreadyLoggedIn: false });\n+\n+\n+  it('can actually use the Gmail admin account to create stuff', async () => {\n+    await browser.complex.createAndSaveTopic({ title: \"Gmail topic title\", body: \"Body\" });\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+  // This is for OpenAuth created users. [7LERTA1]\n+  //describe('owner gets notifications about new topics (because is owner)', () => {  'describe' —> ignored\n+    it('a new member signs up', async () => {\n+      await browser.disableRateLimits();\n+      await browser.complex.signUpAsMemberViaTopbar({\n+          emailAddress: newMembersEmail, username: 'Mia', password: 'public1122' });\n+    });\n+    it('verifies hens email address', async () => {\n+      const siteId = await browser.getSiteId();\n+      const link = await server.waitAndGetLastVerifyEmailAddressLinkEmailedTo(siteId, newMembersEmail, browser);\n+      await browser.go2(link);\n+    });\n+    it('posts a topic', async () => {\n+      await browser.go2('/');\n+      await browser.complex.createAndSaveTopic({ title: newMembersTopicTitle, body: newMembersTopicText });\n+    });\n+    it('the owner gets an email notification', async () => {\n+      const siteId = await browser.getSiteId();\n+      await server.waitUntilLastEmailMatches(\n+          siteId, settings.gmailEmail, [newMembersTopicTitle, newMembersTopicText], browser);\n+    });\n+    it('Logout from Talkyard', async () => {\n+      await browser.topbar.clickLogout(); // (6HRWJ3)\n+    });\n+  //});\n+\n+\n+  // Now we're logged in already, so the Gmail login flow can be slightly different.\n+  addCreateSiteWithGmailTestSteps({ alreadyLoggedIn: true });\n+\n+  it('Logout from Talkyard', async () => {\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+\n+  function addCreateSiteWithGmailTestSteps(ps: { alreadyLoggedIn: boolean }) {\n+    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n+    let newSiteResult: NewSiteResult;\n+\n+    it(`can create site as Gmail user, when ${maybe} logged in to Gmail`, async () => {\n+      const data = utils.generateNewSiteData({\n+        newSiteOwner: NewSiteOwnerType.GmailAccount,\n+        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n+      });\n+      newSiteResult = await browser.newSite.createNewSite(data);\n+    });\n+\n+    it('Sign up as owner', async () => {\n+      await browser.newSite.signUpAsOwner(newSiteResult);\n+    });\n+\n+    it('create forum', async () => {\n+      await browser.createSomething.createForum(`Gmail Forum, ${maybe} logged in`);\n+    });\n+  }\n+\n+});\n+"
    },
    {
      "sha": "a61cbb58ee5e88da0d0f7ae33eab133f440a118d",
      "filename": "tests/e2e-wdio7/specs/create-site-linkedin.1br.d.extidp.e2e.ts",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-linkedin.1br.d.extidp.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-linkedin.1br.d.extidp.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-linkedin.1br.d.extidp.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,64 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as utils from '../utils/utils';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import settings from '../utils/settings';\n+import { die } from '../utils/log-and-die';\n+import { NewSiteOwnerType } from '../test-constants';\n+\n+let browser: TyE2eTestBrowser;\n+\n+\n+describe('create-site-linkedin.1br.d.extidp  @createsite @login @linkedin  TyT402KDTT5Z', () => {\n+\n+  if (!settings.include3rdPartyDependentTests) {\n+    console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n+    return;\n+  }\n+\n+  if (settings.secure) {\n+    die(\"LinkedIn authn e2e test creds currently use http [TyE8020756PM3]\");\n+  }\n+\n+  it('initialize', async () => {\n+    browser = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+  });\n+\n+  addCreateSiteWithLinkedInTestSteps({ alreadyLoggedIn: false });\n+\n+  it('can actually use the LinkedIn admin account to create stuff', async () => {\n+    await browser.complex.createAndSaveTopic({ title: \"LinkedIn topic title\", body: \"Body\" });\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+  // Now we're logged in already, so the LinkedIn login flow can be slightly different.\n+  addCreateSiteWithLinkedInTestSteps({ alreadyLoggedIn: true });\n+\n+  it('Log out from Talkyard', async () => {\n+    await browser.topbar.clickLogout(); // (6HRWJ3)\n+  });\n+\n+\n+  function addCreateSiteWithLinkedInTestSteps(ps: { alreadyLoggedIn: boolean }) {\n+    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n+    let newSiteResult: NewSiteResult;\n+\n+    it(`can create site as LinkedIn user, when ${maybe} logged in to LinkedIn`, async () => {\n+      const data = utils.generateNewSiteData({\n+        newSiteOwner: NewSiteOwnerType.LinkedInAccount,\n+        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n+      });\n+      newSiteResult = await browser.newSite.createNewSite(data);\n+    });\n+\n+    it('Sign up as owner', async () => {\n+      await browser.newSite.signUpAsOwner(newSiteResult);\n+    });\n+\n+    it('create forum', async () => {\n+      await browser.createSomething.createForum(\"Linkedin Forum Title\");\n+    });\n+  }\n+\n+});\n+"
    },
    {
      "sha": "b47f3181024afce57ff9fb04ff9733f3b8054cd6",
      "filename": "tests/e2e-wdio7/specs/create-site-password-run-admin-intro-tours.2br.d.e2e.ts",
      "status": "added",
      "additions": 143,
      "deletions": 0,
      "changes": 143,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.2br.d.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,143 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import server from '../utils/server';\n+import * as utils from '../utils/utils';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let browser: TyE2eTestBrowser;\n+\n+const newMembersEmail = 'e2e-test--mia@example.com';\n+const newMembersTopicTitle = 'newMembersTopicTitle';\n+const newMembersTopicText = 'newMembersTopicText';\n+\n+\n+describe('create-site-password  @createsite @login @password  TyT7BAWFPK9', () => {\n+\n+  it('initialize', async () => {\n+    browser = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+  });\n+\n+  let data: NewSiteData | U;\n+\n+  it('Create site', async () => {\n+    // Something timed out in here, twice. [E2EBUG]\n+    // Break up into smaller steps then? To find out what.\n+    data = utils.generateNewSiteData();\n+    await browser.go2(utils.makeCreateSiteWithFakeIpUrl());\n+    await browser.disableRateLimits();\n+    await browser.createSite.fillInFieldsAndSubmit(data);\n+    // New site; disable rate limits here too.\n+    await browser.disableRateLimits();\n+  });\n+\n+  it('Signup as owner with a password account', async () => {\n+    await browser.createSite.clickOwnerSignupButton();\n+    await browser.loginDialog.createPasswordAccount(data, true);\n+    const siteId = await browser.getSiteId();\n+    const email = await server.getLastEmailSenTo(siteId, data.email, wdioBrowserA);\n+    const link = utils.findFirstLinkToUrlIn(\n+        data.origin + '/-/login-password-confirm-email', email.bodyHtmlText);\n+    await browser.go2(link);\n+    await browser.waitAndClick('#e2eContinue');\n+\n+    await browser.tour.runToursAlthoughE2eTest();\n+  });\n+\n+  it('create forum', async () => {\n+    await browser.createSomething.createForum(\"Password Forum Title\");\n+  });\n+\n+  it(\"the forum admin tour works\", async () => {\n+    await browser.tour.assertTourStarts(true);\n+    console.log('Step 1');\n+    await browser.waitAndClick('.s_Tour-Step-1 .s_Tour_D_Bs_NextB');\n+    console.log('Step 2');\n+    await browser.waitAndClick('.s_Tour-Step-2 .s_Tour_D_Bs_NextB');\n+    console.log('Step 3');\n+    await browser.waitAndClick('.s_Tour-Step-3 .s_Tour_D_Bs_NextB');\n+    console.log('Step 4');\n+    await browser.waitForDisplayed('.s_Tour-Step-4 .s_Tour_Highlight');\n+    await browser.waitAndClick('#e_ViewCatsB');\n+    console.log('Step 5');\n+    await browser.waitAndClick('.s_Tour-Step-5 .s_Tour_D_Bs_NextB');\n+    console.log('Step 6');\n+    await browser.waitForDisplayed('.s_Tour-Step-6 .s_Tour_Highlight');\n+    await browser.waitAndClick('.esAvtrName_name');\n+    console.log('Step 7');\n+    await browser.waitAndClick('.s_Tour-Step-7 .s_Tour_D_Bs_NextB');\n+  });\n+\n+  it(\"Closes the my-menu dropdown, goes to the topic list again\", async () => {\n+    await browser.clickBackdrop();\n+    await browser.forumButtons.viewTopics();\n+  });\n+\n+  it(\"The tour won't restart\", async () => {\n+    await browser.tour.assertTourStarts(false);\n+  });\n+\n+  it(\"Owen goes to the admin area\", async () => {\n+    await browser.topbar.clickGoToAdmin();\n+  });\n+\n+  it(\"the admin area admin tour works\", async () => {\n+    console.log('Step 1');\n+    await browser.waitAndClick('.s_Tour-Step-1 .s_Tour_D_Bs_NextB');\n+    console.log('Step 2');\n+    await browser.waitAndClick('#e2eAA_Ss_LoginL');\n+    console.log('Step 3');\n+    await browser.waitAndClick('.s_Tour-Step-3 .s_Tour_D_Bs_NextB');\n+    console.log('Step 4');\n+    await browser.waitAndClick('.e_UsrsB');\n+    console.log('Step 5');\n+    await browser.waitAndClick('.e_InvitedUsB');\n+    console.log('Step 6');\n+    await browser.waitAndClick('.s_Tour-Step-6 .s_Tour_D_Bs_NextB');\n+    console.log('Step 7');\n+    await browser.waitAndClick('.s_Tour-Step-7 .s_Tour_D_Bs_NextB');\n+  });\n+\n+  // Done with create site stuff. But let's test a little bit more, so we know the forum can\n+  // actually be used, once it's been created: Edit forum title and post a topic.\n+\n+  it(\"goes back to the topic list\", async () => {\n+    await browser.go2('/');\n+  });\n+\n+  it(\"closes the contextbar — otherwise sometimes overlaps the title\", async () => {\n+    await browser.contextbar.close();\n+  });\n+\n+  it(\"the forum works: Owen can edit forum title\", async () => {\n+    // --- Edit title\n+    await browser.pageTitle.clickEdit();\n+    await browser.pageTitle.editTitle(\"Pwd Frm Edtd\");\n+    await browser.pageTitle.save();\n+    await browser.assertPageTitleMatches(/Pwd Frm Edtd/);\n+  });\n+\n+  it(\"the forum works: can post a topic\", async () => {\n+    await browser.forumButtons.clickCreateTopic();\n+    await browser.editor.editTitle(\"New topic title\");\n+    await browser.editor.editText(\"New topic text, so many chars 303456789012345678901234568901\");\n+    await browser.rememberCurrentUrl();\n+    await browser.editor.clickSave();\n+    await browser.waitForNewUrl();\n+    await browser.topic.waitUntilPostTextMatches(c.TitleNr, /New topic title/);\n+    await browser.topic.assertPostTextMatches(c.BodyNr, /New topic text/);\n+  });\n+\n+\n+  it(\"the forum intro tour is shown just once\", async () => {\n+    await browser.go2('/');\n+    await browser.tour.assertTourStarts(false);\n+  });\n+\n+  it(\"... and the admin area tour, just once, it too\", async () => {\n+    await browser.topbar.clickGoToAdmin();\n+    await browser.tour.assertTourStarts(false);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "0b7a441678c8835810097859c583af604214f5bf",
      "filename": "tests/e2e-wdio7/specs/topic-prominent-pats-basic.2br.d.e2e.ts",
      "status": "added",
      "additions": 200,
      "deletions": 0,
      "changes": 200,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-basic.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-basic.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-basic.2br.d.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,200 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mons: Member;\n+let mons_brB: TyE2eTestBrowser;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let michael: Member;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+const mariasTopicTitle = 'mallorysTopicTitle';\n+let mariasTopicPath: St;\n+const owensOpReply = 'owensOpReply';\n+const mallorysReplyToOwen = 'mallorysReplyToOwen';\n+const monsReply = 'owensReplyToMallorysReply';\n+const monsReplyTwo = 'monsReplyTwo';\n+const memahsReply = 'memahsReply';\n+const mariasReplyVeryLast = 'mariasReplyVeryLast';\n+\n+\n+describe(`topic-prominent-pats-basic.2br.d  TyTPROMPATS_BSC`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Frequent Posters List E2E Test\",\n+      members: ['mons', 'maria', 'memah', 'michael']\n+    });\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    mons = forum.members.mons;\n+    mons_brB = brB;\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    michael = forum.members.michael;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Maria logs in`, async () => {\n+    await maria_brB.go2(site.origin);\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+  it(`... posts a new topic`, async () => {\n+    await maria_brB.complex.createAndSaveTopic({ title: mariasTopicTitle, body: 'Bla bla.' })\n+    mariasTopicPath = await maria_brB.urlPath();\n+  });\n+\n+  it(`Owen logs in`, async () => {\n+    await owen_brA.go2(site.origin);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`... sees Maria's post`, async () => {\n+    await owen_brA.forumTopicList.waitForTopicVisible(mariasTopicTitle);\n+  });\n+  it(`... Maria is listed as the topic poster`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 1 });\n+    assert.deepEq(usernames, [\n+            maria.username]);\n+  });\n+  it(`Owen goes to Maria's page`, async () => {\n+    await owen_brA.forumTopicList.navToTopic(mariasTopicTitle);\n+  });\n+  it(`... replies`, async () => {\n+    await owen_brA.complex.replyToOrigPost(owensOpReply)\n+  });\n+\n+  it(`Owen returns to the topic list`, async () => {\n+    await owen_brA.topbar.clickHome();\n+  });\n+  it(`Now Maria is listed as the original-poster, Owen as last replier`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 2 });\n+    assert.deepEq(usernames, [\n+            maria.username, owen.username]);\n+  });\n+\n+  it(`Mons goes to Maria's page`, async () => {\n+    await maria_brB.topbar.clickLogout();\n+    await mons_brB.go2(mariasTopicPath)\n+    await mons_brB.complex.loginWithPasswordViaTopbar(mons);\n+  });\n+  it(`... replies`, async () => {\n+    await mons_brB.complex.replyToPostNr(c.FirstReplyNr, monsReply);\n+  });\n+  it(`... twice! Now Mons is the most frequent replyer, and last replyer`, async () => {\n+    await mons_brB.complex.replyToPostNr(c.FirstReplyNr, monsReplyTwo);\n+  });\n+\n+  it(`Owen reloads the topic list`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... he's a Frequent Poster, and Mons is the last replyer — has\n+              precedence over being the most frequent poster`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 3 });\n+    assert.deepEq(usernames, [\n+            maria.username, owen.username, mons.username]);\n+  });\n+\n+  it(`Mons assigns the page to Michael`, async () => {\n+    await mons_brB.topic.openAssignToDiag();\n+    await mons_brB.addUsersToPageDialog.addOneUser(michael.username);\n+    await mons_brB.addUsersToPageDialog.submit();\n+  });\n+\n+  it(`Owen reloads the topic list`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... now Michael appears as Assigned  TyTSEETOPICASGS`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 4 });\n+    assert.deepEq(usernames, [\n+            maria.username, owen.username, mons.username, michael.username]);\n+  });\n+\n+  it(`Memah arrives`, async () => {\n+    await mons_brB.topbar.clickLogout();\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+  it(`... replies`, async () => {\n+    await memah_brB.complex.replyToOrigPost(memahsReply);\n+  });\n+\n+  it(`Owen reloads the topic list`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... now Mons is listed before Owen, because he has posted more.\n+              Memah appears as last replyer`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 5 });\n+    assert.deepEq(usernames, [\n+            maria.username, mons.username, owen.username, memah.username, michael.username]);\n+  });\n+\n+  it(`Maria is back`, async () => {\n+    await memah_brB.topbar.clickLogout();\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+  it(`... replies — makes her both the orig poster, and last replyer`, async () => {\n+    await maria_brB.complex.replyToOrigPost(mariasReplyVeryLast);\n+  });\n+\n+  it(`Owen reloads the topic list`, async () => {\n+    await owen_brA.refresh2();\n+  });\n+  it(`... Maria is both orig poster, and last replyer`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mariasTopicPath, howMany: 6 });\n+    assert.deepEq(usernames, [\n+            // Orig poster\n+            maria.username,\n+            // Most comments\n+            mons.username,\n+            // One comment, but posted before ...\n+            owen.username,\n+            // Memah's comment, also just one.\n+            memah.username,\n+            // Last replyer\n+            maria.username,\n+            // Assigned\n+            michael.username]);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "0c20c5477073c3614a27e955228defed75302b90",
      "filename": "tests/e2e-wdio7/specs/topic-prominent-pats-reply-approve.2br.d.e2e.ts",
      "status": "added",
      "additions": 138,
      "deletions": 0,
      "changes": 138,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-reply-approve.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-reply-approve.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Ftopic-prominent-pats-reply-approve.2br.d.e2e.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -0,0 +1,138 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mallory: Member;\n+let mallory_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+const mallorysTopicTitle = 'mallorysTopicTitle';\n+let mallorysTopicPath: St;\n+const owensOpReply = 'owensOpReply';\n+const mallorysReplyToOwen = 'mallorysReplyToOwen';\n+const owensReplyToMallorysReply = 'owensReplyToMallorysReply';\n+\n+\n+describe(`topic-prominent-pats-reply-approve.2br.d  TyTPROMPATS_REAPR`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Frequent Posters List E2E Test\",\n+      members: ['memah', 'mallory', 'maria', 'michael']\n+    });\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    mallory = forum.members.mallory;\n+    mallory_brB = brB;\n+    mallory.threatLevel = c.TestThreatLevel.ModerateThreat;\n+\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+\n+  it(`Mallory logs in. He's been teasing the others, has ThreatLevel.Moderate`, async () => {\n+    await mallory_brB.go2(site.origin);\n+    await mallory_brB.complex.loginWithPasswordViaTopbar(mallory);\n+  });\n+\n+  it(`Mallory posts a new topic, becomes hidden, pending approval  TyTAPRTHRT`, async () => {\n+    await mallory_brB.complex.createAndSaveTopic({\n+            title: mallorysTopicTitle, body: 'Bla bla.', willBePendingApproval: true })\n+    mallorysTopicPath = await mallory_brB.urlPath();\n+  });\n+\n+  it(`Owen logs in`, async () => {\n+    await owen_brA.go2(site.origin);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`... sees Mallory's post, hidden for others since not yet approved`, async () => {\n+    await owen_brA.forumTopicList.waitForTopicVisible(mallorysTopicTitle, { andHidden: true });\n+  });\n+  it(`... Mallory is shown as the topic poster`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mallorysTopicPath, howMany: 1 });\n+    assert.deepEq(usernames, [\n+            mallory.username]);\n+  });\n+  it(`Owen goes to Mallory's page`, async () => {\n+    await owen_brA.forumTopicList.navToTopic(mallorysTopicTitle);\n+  });\n+  it(`... replies to the not-yet-approved page (Owen can, because is admin)  TyTREBEFAPR`,\n+        async () => {\n+    await owen_brA.complex.replyToOrigPost(owensOpReply)\n+  });\n+  it(`... and approves the page (*after* having replied)  TyTAPRTHRPG01`, async () => {\n+    await owen_brA.topic.approvePostNr(c.BodyNr);\n+  });\n+\n+  it(`Owen returns to the topic list`, async () => {\n+    await owen_brA.topbar.clickHome();\n+  });\n+  it(`... sees Mallory's post, now approved`, async () => {\n+    await owen_brA.forumTopicList.waitForTopicVisible(mallorysTopicTitle);\n+  });\n+  it(`... Mallory is listed as the original-poster, Owen as last replier`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mallorysTopicPath, howMany: 2 });\n+    assert.deepEq(usernames, [mallory.username, owen.username]);\n+  });\n+\n+  it(`Mallory replies to Owen, becomes pending approval  TyTAPRTHRT`, async () => {\n+    await mallory_brB.complex.replyToPostNr(c.FirstReplyNr, mallorysReplyToOwen);\n+  });\n+  it(`Owen goes to Mallory's page again`, async () => {\n+    await owen_brA.forumTopicList.navToTopic(mallorysTopicTitle);\n+  });\n+  it(`... replies to Mallory's not-yet-approved reply (Owen can, he's admin)  TyTREBEFAPR`,\n+      async () => {\n+    await owen_brA.complex.replyToPostNr(c.SecondReplyNr, owensReplyToMallorysReply);\n+  });\n+  it(`... approves Mallory's reply  (after having replied already)`, async () => {\n+    await owen_brA.topic.approvePostNr(c.SecondReplyNr);\n+  });\n+\n+  it(`Owen goes to the topic list`, async () => {\n+    await owen_brA.go2('/');\n+  });\n+  it(`... sees Mallory's post`, async () => {\n+    await owen_brA.forumTopicList.assertTopicVisible(mallorysTopicTitle);\n+  });\n+  it(`... Mallory and Owen are still listed as original-poster and last-replyer`, async () => {\n+    const usernames = await owen_brA.forumTopicList.getTopicProminentUsernames({\n+            topicUrlPath: mallorysTopicPath, howMany: 2 });\n+    assert.deepEq(usernames, [mallory.username, owen.username]);\n+  });\n+});\n+"
    },
    {
      "sha": "50638f5b5a37dadd92dfa65e52bcaec9e9eef16e",
      "filename": "tests/e2e-wdio7/test-constants.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Ftest-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Ftest-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Ftest-constants.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -61,6 +61,15 @@ const TestTrustLevel = {\n   CoreMember: <TrustLevel> 6,\n };\n \n+const TestThreatLevel = {\n+  SuperSafe: 1 as ThreatLevel,\n+  SeemsSafe: 2 as ThreatLevel,\n+  HopefullySafe: 3 as ThreatLevel,\n+  MildThreat: 4 as ThreatLevel,\n+  ModerateThreat: 5 as ThreatLevel,\n+  SevereThreat: 6 as ThreatLevel,\n+}\n+\n const TestDraftStatus = {  // sync with real code [5ABXG20]\n   NothingHappened: 1,\n   EditsUndone: 2,\n@@ -139,6 +148,7 @@ export default {\n   TestPostSortOrder,\n   TestVoteType,\n   TestTrustLevel,\n+  TestThreatLevel,\n   TestDraftStatus,\n   MaxUsernameLength: 20,  // sync with Scala [6AKBR20Q]\n   TitleNr: 0,"
    },
    {
      "sha": "36881c6a9875fb086c81edb9abbc6cdfc4a32a41",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 131,
      "deletions": 17,
      "changes": 148,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -4062,13 +4062,25 @@ export class TyE2eTestBrowser {\n         }\n \n         const emailInputSelector = 'input[type=\"email\"]';\n-        const emailNext = '#identifierNext';\n+        // This if not headless:\n+        const emailNext = '#identifierNext button';\n+        // This if headless: (why does Google then show this instead? [.headless_different])\n+        const submitEmailInpSel = 'input[type=\"submit\"]';\n+\n         const passwordInputSelector = 'input[type=\"password\"]';\n-        const passwordNext = '#passwordNext';\n+        // This if not headless:\n+        const passwordNext = '#passwordNext button';\n+        // This if headless: (why different? [.headless_different])\n+        // There's also an input[type=submit] for trying to reset one's password,\n+        // but it's not in the same <form>.\n+        const submitPwdInpSel = 'form:has(input[type=\"password\"]) input[type=\"submit\"]';\n+\n+        const submitApproveAccessSel = '#submit_approve_access';\n \n         // We'll get logged in immediately via Gmail, if we're already logged in to\n         // one (and only one) Gmail account in the current this.#br. Wait for either\n         // the Gmail login widgets to load, or for us to be back in Talkyard again.\n+        let tries = 0;\n         while (true) {\n           if (ps.isInFullScreenLogin) {\n             // Dupl code [insta_login]\n@@ -4088,49 +4100,113 @@ export class TyE2eTestBrowser {\n               return;\n           }\n           else if (await this.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n-            // We're back in Talkyard.\n+            // We're back in Talkyard.  [.gmail_already_logged_in]\n             await this.switchBackToFirstTabOrWindow();\n             return;\n           }\n+\n           try {\n-            if (await this.isExisting(emailInputSelector)) {\n+            if (await this.isDisplayed(emailInputSelector)) {\n               // That's a Gmail login widget. Continue with Gmail login.\n               break;\n             }\n+            if (await this.isDisplayed('#choose-account-0')) {\n+              // We're already logged in (or was, before, in this browser)\n+              // and Gmail now asks if we want to continue as the same user.\n+              logMessage(`Gmail asks if choose & continue in account 0. Yes, click it ...`);\n+              await this.waitAndClick('#choose-account-0');\n+              // Now, if we're in a login popup, 1)  it will close, if we were\n+              // indeed already logged in. Then, we'll notice in the next loop lap,\n+              // and break & return — see [.gmail_already_logged_in] just above.\n+              // But 2)  if the session has expired, the popup would stay open?\n+              // And Gmail owuld ask for a password? Then, we'll continue below,\n+              // but won't work, because we shouldn't try to type\n+              // any email addr? [.type_gmail_adr]\n+              await this.#br.pause(PollMs);\n+            }\n+            if (await this.isDisplayed(submitApproveAccessSel)) {\n+              logMessage(`Gmail asks if Talkyard may access the Gmail account. Click Allow ...`);\n+              await this.waitAndClick(submitApproveAccessSel);\n+            }\n           }\n           catch (dummy) {\n             logMessage(`didn't find ${emailInputSelector}, ` +\n                 \"tab closed? already logged in? [EdM5PKWT0B]\");\n           }\n+\n+          tries += 1;\n+          if (tries === 20) {\n+            // Something is amiss. Let's print the HTML, so can have a look?\n+            // — Useful, if running in headless mode.\n+            const html = await this.#br.$('body').getHTML();\n+            logWarning(`Can't figure out if we got logged in directly via Google.`);\n+            logMessage(`The current html <body>:\\n\\n${html\n+                  }\\n — you can copy-paste that into a new .html file, which you\n+                  then open in a browser, and try to find out what's going on.`);\n+          }\n+\n           await this.#br.pause(PollMs);\n         }\n \n         await this.#br.pause(250);\n-        logMessage(`typing Gmail email: ${data.email}...`);\n+        logMessage(`typing Gmail email: ${data.email}...`);  // [.type_gmail_adr]\n         await this.waitAndSetValue(emailInputSelector, data.email, { checkAndRetry: true });\n \n+        // If real browser (not headless).\n         await this.waitForMaybeDisplayed(emailNext, { timeoutMs: 1000 });\n         if (await this.isExisting(emailNext)) {\n           logMessage(`clicking ${emailNext}...`);\n           await this.waitAndClick(emailNext);\n         }\n+        else {\n+          logMessage(`No ${emailNext}.`);\n+        }\n+\n+        // If headless browser. COULD_OPTIMIZE_TESTS: Wait for, at the same time.\n+        await this.waitForMaybeDisplayed(submitEmailInpSel, { timeoutMs: 1000 });\n+        if (await this.isExisting(submitEmailInpSel)) {\n+          logMessage(`clicking ${submitEmailInpSel}...`);\n+          await this.waitAndClick(submitEmailInpSel);\n+        }\n+        else logMessage(`No ${submitEmailInpSel}.`);\n \n         await this.#br.pause(250);\n         logMessage(\"typing Gmail password...\");\n         await this.waitAndSetValue(passwordInputSelector, data.password, { checkAndRetry: true });\n \n+        // If in a visible browser, then  passwordNext  appears, but if \n+        // a headles sbrowser, instead  submitPasswordInputSel  appears.\n+        // To debug what's happening:\n+        //\n+        // const bodyHtml = await this.#br.$('body').getHTML();\n+        // logMessage(`Current <body> html: ${bodyHtml}`);\n+        //\n         await this.waitForMaybeDisplayed(passwordNext, { timeoutMs: 1000 });\n         if (await this.isExisting(passwordNext)) {\n           logMessage(`clicking ${passwordNext}...`);\n           await this.waitAndClick(passwordNext);\n         }\n+        else {\n+          logMessage(`There's no ${passwordNext} to click.`);\n+        }\n \n-        /*\n-        this.waitAndClick('#signIn');\n-        this.waitForEnabled('#submit_approve_access');\n-        this.waitAndClick('#submit_approve_access'); */\n+        // COULD_OPTIMIZE_TESTS: Wait for, at the same time.\n+        if (await this.waitForMaybeDisplayed(submitPwdInpSel, { timeoutMs: 1000 })) {\n+          logMessage(`Clicking ${submitPwdInpSel} ...`);\n+          await this.waitAndClick(submitPwdInpSel);\n+        }\n+        else {\n+          logMessage(`There's no ${submitPwdInpSel} to click.`);\n+        }\n \n-        // If you need to verify you're a human:\n+        // Gmail sometimes asks:\n+        // Talkyard Dev Test wants to access your Google Account [...]\n+        // This will allow Talkyard Dev Test to: [...]\n+        // If so, click Approve Access.\n+        if (await this.waitForMaybeDisplayed(submitApproveAccessSel, { timeoutMs: 1000 })) {\n+          await this.waitAndClick(submitApproveAccessSel);\n+        }\n+        // Or click Approve manually: (if not headless)\n         // this.#br.deb ug();\n \n         if (!isInPopupAlready && (!ps || !ps.stayInPopup)) {\n@@ -4846,8 +4922,15 @@ export class TyE2eTestBrowser {\n         await this.waitForDisplayed('.e2eF_T', ps);\n       },\n \n-      waitForTopicVisible: async (title: St) => {\n-        await this.waitUntilAnyTextMatches(this.forumTopicList.titleSelector, title);\n+      waitForTopicVisible: async (title: St, ps: { andHidden?: Bo } = {}) => {\n+        if (ps.andHidden) {\n+          await this.waitUntilAnyTextMatches(\n+                      this.forumTopicList.hiddenTopicTitleSelector, title);\n+        }\n+        else {\n+          await this.waitUntilAnyTextMatches(this.forumTopicList.titleSelector, title);\n+          await this.assertNoTextMatches(this.forumTopicList.hiddenTopicTitleSelector, title);\n+        }\n       },\n \n       clickLoadMore: async (opts: WaitAndClickPs = {}): Pr<ClickResult> => {\n@@ -4923,9 +5006,14 @@ export class TyE2eTestBrowser {\n         }\n       },\n \n-      assertTopicVisible: async (title: St) => {\n-        await this.assertAnyTextMatches(this.forumTopicList.titleSelector, title);\n-        await this.assertNoTextMatches(this.forumTopicList.hiddenTopicTitleSelector, title);\n+      assertTopicVisible: async (title: St, ps: { andHidden?: Bo } = {}) => {\n+        if (ps.andHidden) {\n+          await this.assertAnyTextMatches(this.forumTopicList.hiddenTopicTitleSelector, title);\n+        }\n+        else {\n+          await this.assertAnyTextMatches(this.forumTopicList.titleSelector, title);\n+          await this.assertNoTextMatches(this.forumTopicList.hiddenTopicTitleSelector, title);\n+        }\n       },\n \n       assertTopicNrVisible: async (nr: Nr, title: St) => {\n@@ -4938,7 +5026,7 @@ export class TyE2eTestBrowser {\n       },\n \n       assertTopicVisibleAsHidden: async (title: St) => {\n-        await this.assertAnyTextMatches(this.forumTopicList.hiddenTopicTitleSelector, title);\n+        await this.forumTopicList.assertTopicVisible(title, { andHidden: true });\n       },\n \n       getTopicTags: async (ps: { topicUrlPath: St, howManyTags: Nr }): Pr<St[]> => {\n@@ -4954,6 +5042,32 @@ export class TyE2eTestBrowser {\n           return await this.widgets.tagList.getTagTitles(tagListSel, ps.howManyTags);\n         }\n       },\n+\n+      getTopicProminentUsernames: async (ps: {\n+              topicUrlPath: St, howMany: Nr }): Pr<St[]> => {\n+        const tableTopicRowSel =\n+                `.esF_TsT tbody tr:has([href=\"${ps.topicUrlPath}\"])`\n+        const listTopicItemSel =\n+                `.c_F_TsL_T:has([href=\"${ps.topicUrlPath}\"])`\n+        const tableAvatarsSel = `${tableTopicRowSel}  .s_F_Ts_T_Avs .esAvtr`;\n+        const listAvatarsSel = `${listTopicItemSel}  .c_F_TsL_T_Users .esAvtr`;\n+        const tableOrListAvatarSel = tableAvatarsSel + ',' + listAvatarsSel;\n+        return await utils.tryManyTimes(`Getting prominent topic usernames in: ${\n+                tableOrListAvatarSel}`, 3, async (): Pr<St[]> => {\n+          const usernames: St[] = [];\n+          const els = await this.$$(tableOrListAvatarSel);\n+          for (const el of els) {\n+            const url: St = await el.getAttribute('href');\n+            const username = url.replace(/.*\\//, '');\n+            usernames.push(username);\n+          }\n+          if (usernames.length !== ps.howMany)\n+            throw Error(`Waiting for ${ps.howMany} prominent users for topic ${ps.topicUrlPath\n+                    }, currently: ${j2s(usernames)}`);\n+\n+          return usernames;\n+        });\n+      },\n     }\n \n \n@@ -5216,7 +5330,7 @@ export class TyE2eTestBrowser {\n       clickSendMessage: async () => {\n         await this.aboutUserDialog.waitForLoaded();\n         await this.rememberCurrentUrl();\n-        await this.waitAndClick('#e2eUD_MessageB');\n+        await this.waitAndClick('.c_UD_MsgB');\n         await this.waitForNewUrl();\n         /*  DO_AFTER having tested this in FF with Wdio 6.0: Remove this:\n         // Wait until new-message title can be edited."
    },
    {
      "sha": "6660ed57f8744dd920ecdb0d1ecb0f06953db46a",
      "filename": "tests/e2e-wdio7/utils/utils.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Futils.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -621,6 +621,7 @@ export function checkNewPostFields(post, ps: {\n \n export async function tryManyTimes<R>(what, maxNumTimes, fn: () => Pr<R>,\n           ps: { afterErr?: () => Pr<Vo> } = {}): Pr<R> {\n+  let delayMs = 250;\n   let res: any;\n   for (let retryCount = 1; retryCount <= maxNumTimes; ++retryCount) {\n     try {\n@@ -629,7 +630,7 @@ export async function tryManyTimes<R>(what, maxNumTimes, fn: () => Pr<R>,\n     }\n     catch (ex) {\n       if (retryCount < maxNumTimes) {\n-        logUnusual(`RETRYING: ${what}  [TyME2ERETRY], because error: ${ex.toString()}`);\n+        logUnusual(`RETRYING: ${what}  [TyME2ERETRY], because: ${ex.toString()}`);\n         if (ps.afterErr) {\n           await ps.afterErr();\n         }\n@@ -639,6 +640,10 @@ export async function tryManyTimes<R>(what, maxNumTimes, fn: () => Pr<R>,\n         throw ex;\n       }\n     }\n+\n+    await oneWdioBrowser.pause(delayMs);\n+    delayMs = delayMs * 1.3\n+    delayMs = Math.min(2500, delayMs);\n   }\n \n   dieIf(res === false, `Don't use tryManyTimes() with a fn that returns false —\n@@ -676,5 +681,8 @@ export async function tryUntilTrue<R>(what: St, maxNumTimes: Nr | 'ExpBackoff',\n         delayMs = delayMs * 1.3\n         delayMs = Math.min(2500, delayMs);\n       }\n+      else {\n+        await oneWdioBrowser.pause(delayMs);\n+      }\n     }\n }"
    },
    {
      "sha": "9bfb7e61565cdba700e3a56e10ae4279c8a67a26",
      "filename": "tests/e2e/specs/create-site-admin-guide.2browsers.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 189,
      "changes": 189,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-admin-guide.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-admin-guide.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-admin-guide.2browsers.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,189 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import * as _ from 'lodash';\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import make = require('../utils/make');\n-import { logMessage } from '../utils/log-and-die';\n-\n-\n-\n-\n-\n-let everyone;\n-let owen;\n-let maria;\n-\n-const forumTitle = \"Adm Guide\";\n-const editedForumTitle = \"Adm Guide Edtd\";\n-const testId = utils.generateTestId();\n-const newOrgName = \"New Org Name\";\n-const newIntroText = \"Intro text text text.\";\n-const newWelcomeTopicText = \"New welcome topic text text text\";\n-const newWelcomeTopicTitle = \"New Welcome Title Title Title\";\n-const newCategoryName = \"Wasteland\";\n-const newTopicTitle = \"Total Desert\";\n-const newTopicText = \"No water here text text text\";\n-let siteId: SiteId;\n-let siteUrl: string;\n-\n-const mariasTopicTitle = \"mariasTopicTitle\";\n-const mariasTopicText = \"mariasTopicText\";\n-\n-describe(\"create site, follow the admin guide  TyT62RJHLPK4\", function() {\n-\n-  it(\"initialize people\", function() {\n-    everyone = new TyE2eTestBrowser(wdioBrowser);\n-    owen = _.assign(new TyE2eTestBrowser(browserA), make.memberOwenOwner());\n-    // Use an unique address so won't run into max-sites-per-email limit.\n-    owen.emailAddress = \"e2e-test--owen-\" + testId + \"@example.com\";\n-    maria = _.assign(new TyE2eTestBrowser(browserB), make.memberMaria());\n-  });\n-\n-  it(\"Owen creates a site\", function() {\n-    const localHostname = utils.getLocalHostname('create-site-' + testId);\n-    logMessage(`Generated local hostname: ${localHostname}`);\n-\n-    const newSiteData = {\n-      testId: testId,\n-      localHostname: localHostname,\n-      name: localHostname,\n-      origin: utils.makeSiteOrigin(localHostname),\n-      originRegexEscaped: utils.makeSiteOriginRegexEscaped(localHostname),\n-      orgName: \"Owen's E2E Org\",\n-      fullName: 'E2E Test ' + testId,\n-      email: owen.emailAddress,\n-    };\n-    owen.go(utils.makeCreateSiteWithFakeIpUrl());\n-    console.log(\"Fills in fields and submits\");\n-    owen.createSite.fillInFieldsAndSubmit(newSiteData);\n-    console.log(\"Clicks login\");\n-    owen.createSite.clickOwnerSignupButton();\n-    owen.disableRateLimits();\n-    console.log(\"Creates password account\");\n-    owen.loginDialog.createPasswordAccount(owen);\n-    siteId = owen.getSiteId();\n-    console.log(\"Gets a verification email\");\n-    var link = server.getLastVerifyEmailAddressLinkEmailedTo(siteId, owen.emailAddress);\n-    owen.go(link);\n-    console.log(\"Clicks continue\");\n-    owen.waitAndClick('#e2eContinue');\n-    console.log(\"Creates a forum\");\n-    owen.createSomething.createForum(forumTitle);\n-    siteUrl = owen.getUrl();\n-  });\n-\n-  it(\"Maria sees it\", function() {\n-    maria.go(siteUrl);\n-    maria.assertPageTitleMatches(forumTitle);\n-    maria.disableRateLimits();\n-  });\n-\n-  it(\"Owen edits settings: requires people to login\", function() {\n-    owen.topbar.clickGoToAdmin();\n-    owen.complex.closeSidebars(); // otherwise might open later and bump setting positions\n-    owen.adminArea.settings.legal.editOrgName(newOrgName);\n-    owen.adminArea.settings.clickLoginNavLink();\n-    owen.adminArea.settings.login.setLoginRequired(true);\n-    owen.adminArea.settings.clickSaveAll();\n-  });\n-\n-  it(\"Now Maria needs to create an account\", function() {\n-    maria.loginDialog.refreshUntilFullScreen();\n-  });\n-\n-  it(\"... she creates an account\", function() {\n-    maria.loginDialog.createPasswordAccount(maria);\n-  });\n-\n-  it(\"... clicks an email confirmation link\", function() {\n-    var link = server.getLastVerifyEmailAddressLinkEmailedTo(siteId, maria.emailAddress);\n-    maria.go(link);\n-  });\n-\n-  it(\"... and can see the homepage again\", function() {\n-    maria.go(siteUrl);\n-    maria.assertPageTitleMatches(forumTitle);\n-  });\n-\n-  it(\"... and the new organization name, on the ToU page\", function() {\n-  });\n-\n-  it(\"Owen leaves the admin area, goes back to the forum\", function() {\n-    owen.adminArea.clickLeaveAdminArea();\n-    owen.assertPageTitleMatches(forumTitle);\n-  });\n-\n-  it(\"... he edits the forum title\", function() {\n-    owen.pageTitle.clickEdit();\n-    owen.pageTitle.editTitle(editedForumTitle);\n-    owen.pageTitle.save();\n-    owen.assertPageTitleMatches(editedForumTitle);\n-  });\n-\n-  it(\"... and the forum intro text\", function() {\n-    owen.forumButtons.clickEditIntroText();\n-    owen.editor.editText(newIntroText);\n-    owen.editor.save();\n-    owen.waitAndAssertVisibleTextMatches('.esForumIntro', newIntroText);\n-  });\n-\n-  it(\"... opens the Welcome topic\", function() {\n-    owen.forumTopicList.goToTopic(\"Welcome\");\n-  });\n-\n-  it(\"... edits title and text\", function() {\n-    owen.topic.clickEditOrigPost();\n-    owen.editor.editText(newWelcomeTopicText);\n-    owen.editor.save();\n-    owen.pageTitle.clickEdit();\n-    owen.pageTitle.editTitle(newWelcomeTopicTitle);\n-    owen.pageTitle.save();\n-    owen.assertPageTitleMatches(newWelcomeTopicTitle);\n-  });\n-\n-  it(\"... returns to the forum\", function() {\n-    owen.topic.clickHomeNavLink();\n-  });\n-\n-  it(\"... views categories\", function() {\n-    owen.forumButtons.clickViewCategories();\n-  });\n-\n-  it(\"... creates a category\", function() {\n-    owen.forumButtons.clickCreateCategory();\n-    owen.categoryDialog.fillInFields({ name: newCategoryName });\n-    owen.categoryDialog.submit();\n-  });\n-\n-  it(\"... and a topic in that category\", function() {\n-    owen.forumCategoryList.openCategory(newCategoryName);\n-    owen.complex.createAndSaveTopic({ title: newTopicTitle, body: newTopicText });\n-  });\n-\n-  it(\"... returns to the topic list\", function() {\n-    owen.topic.clickHomeNavLink();\n-  });\n-\n-  it(\"Now both Owen and Maria see all changes Owen did\", function() {\n-    maria.refresh();\n-    maria.assertPageTitleMatches(editedForumTitle);\n-    owen.assertPageTitleMatches(editedForumTitle);\n-    // ...\n-  });\n-\n-  it(\"Maria creates a topic\", function() {\n-    maria.complex.createAndSaveTopic({ title: mariasTopicTitle, body: mariasTopicText });\n-  });\n-\n-  // This is for email + password users. [7LERTA1]\n-  it(\"Owen gets a notification (site owners get notified about everything)\", function() {\n-    server.waitUntilLastEmailMatches(\n-        siteId, owen.emailAddress, [mariasTopicTitle, mariasTopicText], browser);\n-  });\n-\n-});\n-"
    },
    {
      "sha": "61c88576af0882366e5afd25427845daad3f5d82",
      "filename": "tests/e2e/specs/create-site-facebook.1br.extidp.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 79,
      "changes": 79,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-facebook.1br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-facebook.1br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-facebook.1br.extidp.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,79 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import _ = require('lodash');\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import logAndDie = require('../utils/log-and-die');\n-import createTestData = require('./create-site-impl');\n-const logUnusual = logAndDie.logUnusual, die = logAndDie.die, dieIf = logAndDie.dieIf;\n-const logMessage = logAndDie.logMessage;\n-\n-let browser: TyE2eTestBrowser;\n-\n-\n-describe('create-site-facebook  @createsite @login @facebook  TyT8KA9AW3', () => {\n-\n-  if (!settings.include3rdPartyDependentTests) {\n-    console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n-    return;\n-  }\n-\n-  if (settings.skipFacebook) {\n-    console.log(\"Skipping Facebook login tests.\");\n-    return;\n-  }\n-\n-  it('initialize', () => {\n-    browser = new TyE2eTestBrowser(wdioBrowser);\n-  });\n-\n-\n-  addCreateSiteWithFacebookTestSteps({ alreadyLoggedIn: false });\n-\n-  it('Can actually use the FB admin account to create stuff', () => {\n-    browser.complex.createAndSaveTopic({ title: \"Facebook topic title\", body: \"Body\" });\n-  });\n-\n-  it('Logout from Talkyard after', () => {\n-    // This logs out from the Talkyard site only, to clear Ty cookies,\n-    // so won't affect other tests.\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-\n-  // Now we're logged in over at Facebook already, so the Facebook login flow\n-  // can be slightly different.\n-  addCreateSiteWithFacebookTestSteps({ alreadyLoggedIn: true });\n-\n-  it('Logout after', () => {\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-\n-  function addCreateSiteWithFacebookTestSteps(ps: { alreadyLoggedIn: boolean }) {\n-    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n-    let newSiteResult: NewSiteResult;\n-\n-    it(`can create site as Facebook user, when ${maybe} logged in to Facebook`, () => {\n-      const data = createTestData({\n-        newSiteOwner: NewSiteOwnerType.FacebookAccount,\n-        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n-      });\n-      console.log(\"Create new site:\");\n-      newSiteResult = browser.newSite.createNewSite(data);\n-    });\n-\n-    it('Sign up as owner', () => {\n-      browser.newSite.signUpAsOwner(newSiteResult);\n-    });\n-\n-    it('Create forum', () => {\n-      browser.createSomething.createForum(\"Facebook Forum Title\");\n-    });\n-  }\n-\n-});\n-"
    },
    {
      "sha": "d5abd8b5f3e6f037b44a3ce4e834deee94dd1d18",
      "filename": "tests/e2e/specs/create-site-gmail-and-email-notf.1br.extidp.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 98,
      "changes": 98,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-gmail-and-email-notf.1br.extidp.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,98 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import _ = require('lodash');\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import logAndDie = require('../utils/log-and-die');\n-import createTestData = require('./create-site-impl');\n-const logUnusual = logAndDie.logUnusual, die = logAndDie.die, dieIf = logAndDie.dieIf;\n-const logMessage = logAndDie.logMessage;\n-\n-let browser: TyE2eTestBrowser;\n-\n-const newMembersEmail = 'e2e-test--mia@example.com';\n-const newMembersTopicTitle = 'newMembersTopicTitle';\n-const newMembersTopicText = 'newMembersTopicText';\n-\n-\n-describe('create-site-gmail  @createsite  @login @gmail TyT7KKTEHS24', () => {\n-\n-  if (!settings.include3rdPartyDependentTests) {\n-    console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n-    return;\n-  }\n-\n-  it('initialize', () => {\n-    browser = new TyE2eTestBrowser(wdioBrowser);\n-  });\n-\n-\n-  addCreateSiteWithGmailTestSteps({ alreadyLoggedIn: false });\n-\n-\n-  it('can actually use the Gmail admin account to create stuff', () => {\n-    browser.complex.createAndSaveTopic({ title: \"Gmail topic title\", body: \"Body\" });\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-  // This is for OpenAuth created users. [7LERTA1]\n-  //describe('owner gets notifications about new topics (because is owner)', () => {  'describe' —> ignored\n-    it('a new member signs up', () => {\n-      browser.disableRateLimits();\n-      browser.complex.signUpAsMemberViaTopbar({\n-          emailAddress: newMembersEmail, username: 'Mia', password: 'public1122' });\n-    });\n-    it('verifies hens email address', () => {\n-      const siteId = browser.getSiteId();\n-      const link = server.getLastVerifyEmailAddressLinkEmailedTo(siteId, newMembersEmail, browser);\n-      browser.go2(link);\n-    });\n-    it('posts a topic', () => {\n-      browser.go2('/');\n-      browser.complex.createAndSaveTopic({ title: newMembersTopicTitle, body: newMembersTopicText });\n-    });\n-    it('the owner gets an email notification', () => {\n-      const siteId = browser.getSiteId();\n-      server.waitUntilLastEmailMatches(\n-          siteId, settings.gmailEmail, [newMembersTopicTitle, newMembersTopicText], browser);\n-    });\n-    it('Logout from Talkyard', () => {\n-      browser.topbar.clickLogout(); // (6HRWJ3)\n-    });\n-  //});\n-\n-\n-  // Now we're logged in already, so the Gmail login flow can be slightly different.\n-  addCreateSiteWithGmailTestSteps({ alreadyLoggedIn: true });\n-\n-  it('Logout from Talkyard', () => {\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-\n-  function addCreateSiteWithGmailTestSteps(ps: { alreadyLoggedIn: boolean }) {\n-    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n-    let newSiteResult: NewSiteResult;\n-\n-    it(`can create site as Gmail user, when ${maybe} logged in to Gmail`, () => {\n-      const data = createTestData({\n-        newSiteOwner: NewSiteOwnerType.GmailAccount,\n-        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n-      });\n-      newSiteResult = browser.newSite.createNewSite(data);\n-    });\n-\n-    it('Sign up as owner', () => {\n-      browser.newSite.signUpAsOwner(newSiteResult);\n-    });\n-\n-    it('create forum', () => {\n-      browser.createSomething.createForum(`Gmail Forum, ${maybe} logged in`);\n-    });\n-  }\n-\n-});\n-"
    },
    {
      "sha": "631942e00edf5556f23ef203aea2335ab6afd6e3",
      "filename": "tests/e2e/specs/create-site-impl.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 35,
      "changes": 35,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-impl.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,35 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import utils = require('../utils/utils');\n-import settings = require('../utils/settings');\n-\n-\n-\n-function createPasswordTestData(ps: {  // renamed to generateNewSiteData  in tests/e2e-wdio7/.\n-  newSiteOwner?: NewSiteOwnerType,\n-  alreadyLoggedInAtIdProvider?: boolean,\n-} = {}): NewSiteData {\n-\n-  const testId = utils.generateTestId();\n-  const localHostname = utils.getLocalHostname('create-site-' + testId);\n-\n-  return {\n-    siteType: SiteType.Forum,\n-    testId: testId,\n-    localHostname: localHostname,\n-    origin: utils.makeSiteOrigin(localHostname),\n-    //originRegexEscaped: utils.makeSiteOriginRegexEscaped(localHostname),\n-    orgName: \"E2E Org Name\",\n-    newSiteOwner: ps.newSiteOwner ||\n-        // Backw compat, old tests:\n-        NewSiteOwnerType.OwenOwner,\n-    alreadyLoggedInAtIdProvider: ps.alreadyLoggedInAtIdProvider,\n-    fullName: 'E2E Test ' + testId,\n-    email: settings.testEmailAddressPrefix + testId + '@example.com',\n-    // Prefix the number with 'z' because '..._<number>' is reserved. [7FLA3G0L]\n-    username: 'e2e_test_z' + testId,\n-    password: 'pub5KFV2FY8C',\n-  }\n-}\n-\n-export = createPasswordTestData;"
    },
    {
      "sha": "b1220c87548bb411f8f90c7e79c17a9d338df896",
      "filename": "tests/e2e/specs/create-site-linkedin.1br.extidp.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 68,
      "changes": 68,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-linkedin.1br.extidp.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-linkedin.1br.extidp.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-linkedin.1br.extidp.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,68 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import _ = require('lodash');\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import logAndDie = require('../utils/log-and-die');\n-import createTestData = require('./create-site-impl');\n-const logUnusual = logAndDie.logUnusual, die = logAndDie.die, dieIf = logAndDie.dieIf;\n-const logMessage = logAndDie.logMessage;\n-\n-let browser: TyE2eTestBrowser;\n-\n-describe('create-site-linkedin  @createsite @login @linkedin  TyT402KDTT5Z', () => {\n-\n-  if (!settings.include3rdPartyDependentTests) {\n-    console.log(\"Skipping this spec; no 3rd party login credentials specified.\");\n-    return;\n-  }\n-\n-  if (settings.secure) {\n-    die(\"LinkedIn authn e2e test creds currently use http [TyE8020756PM3]\");\n-  }\n-\n-  it('initialize', () => {\n-    browser = new TyE2eTestBrowser(wdioBrowser);\n-  });\n-\n-  addCreateSiteWithLinkedInTestSteps({ alreadyLoggedIn: false });\n-\n-  it('can actually use the LinkedIn admin account to create stuff', () => {\n-    browser.complex.createAndSaveTopic({ title: \"LinkedIn topic title\", body: \"Body\" });\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-  // Now we're logged in already, so the LinkedIn login flow can be slightly different.\n-  addCreateSiteWithLinkedInTestSteps({ alreadyLoggedIn: true });\n-\n-  it('Log out from Talkyard', () => {\n-    browser.topbar.clickLogout(); // (6HRWJ3)\n-  });\n-\n-\n-  function addCreateSiteWithLinkedInTestSteps(ps: { alreadyLoggedIn: boolean }) {\n-    const maybe = ps.alreadyLoggedIn ? \"already\" : \"not\";\n-    let newSiteResult: NewSiteResult;\n-\n-    it(`can create site as LinkedIn user, when ${maybe} logged in to LinkedIn`, () => {\n-      const data = createTestData({\n-        newSiteOwner: NewSiteOwnerType.LinkedInAccount,\n-        alreadyLoggedInAtIdProvider: ps.alreadyLoggedIn,\n-      });\n-      newSiteResult = browser.newSite.createNewSite(data);\n-    });\n-\n-    it('Sign up as owner', () => {\n-      browser.newSite.signUpAsOwner(newSiteResult);\n-    });\n-\n-    it('create forum', () => {\n-      browser.createSomething.createForum(\"Linkedin Forum Title\");\n-    });\n-  }\n-\n-});\n-"
    },
    {
      "sha": "4cdf625ee4002c6dc445acdd3e83e4b803da85c0",
      "filename": "tests/e2e/specs/create-site-password-run-admin-intro-tours.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 147,
      "changes": 147,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fcreate-site-password-run-admin-intro-tours.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,147 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import _ = require('lodash');\n-import assert = require('assert');\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { TyE2eTestBrowser } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import logAndDie = require('../utils/log-and-die');\n-import c = require('../test-constants');\n-import createTestData = require('./create-site-impl');\n-const logUnusual = logAndDie.logUnusual, die = logAndDie.die, dieIf = logAndDie.dieIf;\n-const logMessage = logAndDie.logMessage;\n-\n-let browser: TyE2eTestBrowser;\n-\n-const newMembersEmail = 'e2e-test--mia@example.com';\n-const newMembersTopicTitle = 'newMembersTopicTitle';\n-const newMembersTopicText = 'newMembersTopicText';\n-\n-describe('create-site-password  @createsite @login @password  TyT7BAWFPK9', () => {\n-\n-  it('initialize', () => {\n-    browser = new TyE2eTestBrowser(wdioBrowser);\n-  });\n-\n-  let data: NewSiteData | U;\n-\n-  it('Create site', () => {\n-    // Something timed out in here, twice. [E2EBUG]\n-    // Break up into smaller steps then? To find out what.\n-    data = createTestData();\n-    browser.go(utils.makeCreateSiteWithFakeIpUrl());\n-    browser.disableRateLimits();\n-    browser.createSite.fillInFieldsAndSubmit(data);\n-    // New site; disable rate limits here too.\n-    browser.disableRateLimits();\n-  });\n-\n-  it('Signup as owner with a password account', () => {\n-    browser.createSite.clickOwnerSignupButton();\n-    browser.loginDialog.createPasswordAccount(data, true);\n-    const siteId = browser.getSiteId();\n-    const email = server.getLastEmailSenTo(siteId, data.email, wdioBrowserA);\n-    const link = utils.findFirstLinkToUrlIn(\n-        data.origin + '/-/login-password-confirm-email', email.bodyHtmlText);\n-    browser.go(link);\n-    browser.waitAndClick('#e2eContinue');\n-\n-    browser.tour.runToursAlthoughE2eTest();\n-  });\n-\n-  it('create forum', () => {\n-    browser.createSomething.createForum(\"Password Forum Title\");\n-  });\n-\n-  it(\"the forum admin tour works\", () => {\n-    browser.tour.assertTourStarts(true);\n-    console.log('Step 1');\n-    browser.waitAndClick('.s_Tour-Step-1 .s_Tour_D_Bs_NextB');\n-    console.log('Step 2');\n-    browser.waitAndClick('.s_Tour-Step-2 .s_Tour_D_Bs_NextB');\n-    console.log('Step 3');\n-    browser.waitAndClick('.s_Tour-Step-3 .s_Tour_D_Bs_NextB');\n-    console.log('Step 4');\n-    browser.waitAndClick('#e_ViewCatsB');\n-    console.log('Step 5');\n-    browser.waitAndClick('.s_Tour-Step-5 .s_Tour_D_Bs_NextB');\n-    console.log('Step 6');\n-    browser.waitAndClick('.esAvtrName_name');\n-    console.log('Step 7');\n-    browser.waitAndClick('.s_Tour-Step-7 .s_Tour_D_Bs_NextB');\n-  });\n-\n-  it(\"Closes the my-menu dropdown, goes to the topic list again\", () => {\n-    browser.clickBackdrop();\n-    browser.forumButtons.viewTopics();\n-  });\n-\n-  it(\"The tour won't restart\", () => {\n-    browser.tour.assertTourStarts(false);\n-  });\n-\n-  it(\"Owen goes to the admin area\", () => {\n-    browser.topbar.clickGoToAdmin();\n-  });\n-\n-  it(\"the admin area admin tour works\", () => {\n-    console.log('Step 1');\n-    browser.waitAndClick('.s_Tour-Step-1 .s_Tour_D_Bs_NextB');\n-    console.log('Step 2');\n-    browser.waitAndClick('#e2eAA_Ss_LoginL');\n-    console.log('Step 3');\n-    browser.waitAndClick('.s_Tour-Step-3 .s_Tour_D_Bs_NextB');\n-    console.log('Step 4');\n-    browser.waitAndClick('.e_UsrsB');\n-    console.log('Step 5');\n-    browser.waitAndClick('.e_InvitedUsB');\n-    console.log('Step 6');\n-    browser.waitAndClick('.s_Tour-Step-6 .s_Tour_D_Bs_NextB');\n-    console.log('Step 7');\n-    browser.waitAndClick('.s_Tour-Step-7 .s_Tour_D_Bs_NextB');\n-  });\n-\n-  // Done with create site stuff. But let's test a little bit more, so we know the forum can\n-  // actually be used, once it's been created: Edit forum title and post a topic.\n-\n-  it(\"goes back to the topic list\", () => {\n-    browser.go('/');\n-  });\n-\n-  it(\"closes the contextbar — otherwise sometimes overlaps the title\", () => {\n-    browser.contextbar.close();\n-  });\n-\n-  it(\"the forum works: Owen can edit forum title\", () => {\n-    // --- Edit title\n-    browser.pageTitle.clickEdit();\n-    browser.pageTitle.editTitle(\"Pwd Frm Edtd\");\n-    browser.pageTitle.save();\n-    browser.assertPageTitleMatches(/Pwd Frm Edtd/);\n-  });\n-\n-  it(\"the forum works: can post a topic\", () => {\n-    browser.forumButtons.clickCreateTopic();\n-    browser.editor.editTitle(\"New tpc ttl\");\n-    browser.editor.editText(\"New tpc txt\");\n-    browser.rememberCurrentUrl();\n-    browser.editor.clickSave();\n-    browser.waitForNewUrl();\n-    browser.topic.waitUntilPostTextMatches(c.TitleNr, /New tpc ttl/);\n-    browser.topic.assertPostTextMatches(c.BodyNr, /New tpc txt/);\n-  });\n-\n-\n-  it(\"the forum intro tour is shown just once\", () => {\n-    browser.go('/');\n-    browser.tour.assertTourStarts(false);\n-  });\n-\n-  it(\"... and the admin area tour, just once, it too\", () => {\n-    browser.topbar.clickGoToAdmin();\n-    browser.tour.assertTourStarts(false);\n-  });\n-\n-});\n-"
    },
    {
      "sha": "3eb76e14830de2c2deeaa32a80b9ddcbec9631d7",
      "filename": "tests/e2e/specs/links-internal.2browsers.test.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 508,
      "changes": 508,
      "blob_url": "https://github.com/debiki/talkyard/blob/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Flinks-internal.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b32536195294e78bdd83c31b66f562acfa248b03/tests%2Fe2e%2Fspecs%2Flinks-internal.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Flinks-internal.2browsers.test.ts?ref=b32536195294e78bdd83c31b66f562acfa248b03",
      "patch": "@@ -1,508 +0,0 @@\n-/// <reference path=\"../test-types.ts\"/>\n-\n-import * as _ from 'lodash';\n-import assert = require('../utils/ty-assert');\n-// import fs = require('fs');  EMBCMTS\n-import server = require('../utils/server');\n-import utils = require('../utils/utils');\n-import { buildSite } from '../utils/site-builder';\n-import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/pages-for';\n-import settings = require('../utils/settings');\n-import lad = require('../utils/log-and-die');\n-import c = require('../test-constants');\n-import { logBoring } from '../utils/log-and-die';\n-\n-\n-let everyonesBrowsers: TyAllE2eTestBrowsers;\n-let richBrowserA: TyE2eTestBrowser;\n-let richBrowserB: TyE2eTestBrowser;\n-let owen: Member;\n-let owensBrowser: TyE2eTestBrowser;\n-let memah: Member;\n-let memahsBrowser: TyE2eTestBrowser;\n-let strangersBrowser: TyE2eTestBrowser;\n-\n-let site: IdAddress;\n-\n-let forum: TwoPagesTestForum;\n-\n-const apiSecret: TestApiSecret = {\n-  nr: 1,\n-  userId: c.SysbotUserId,\n-  createdAt: c.MinUnixMillis,\n-  deletedAt: undefined,\n-  isDeleted: false,\n-  secretKey: 'publicE2eTestSecretKeyAbc123',\n-};\n-\n-\n-// RENAME this file to  internal-inline-link-previews-and-backlinks.2br?\n-describe(\"internal links, backlinks   TyTINTLNS54824\", () => {\n-\n-  it(\"import a site\", () => {\n-    const builder = buildSite();\n-    forum = builder.addTwoPagesForum({\n-      title: \"Some E2E Test\",\n-      members: ['maria', 'memah', 'michael'],\n-    });\n-\n-    const newPage: PageJustAdded = builder.addPage({\n-      id: 'extraPageId',\n-      folder: '/',\n-      showId: false,\n-      slug: 'extra-page',\n-      role: c.TestPageRole.Discussion,\n-      title: \"In the middle\",\n-      body: \"In the middle of difficulty lies opportunity\",\n-      categoryId: forum.categories.categoryA.id,\n-      authorId: forum.members.maria.id,\n-    });\n-\n-    builder.addPost({\n-      page: newPage,  // or e.g.: forum.topics.byMichaelCategoryA,\n-      nr: c.FirstReplyNr,\n-      parentNr: c.BodyNr,\n-      authorId: forum.members.maria.id,\n-      approvedSource: \"The secret of getting ahead is getting started\",\n-    });\n-\n-    // Disable notifications, or notf email counts will be off (since Owen would get emails).\n-    builder.settings({ numFirstPostsToReview: 0, numFirstPostsToApprove: 0 });\n-    builder.getSite().pageNotfPrefs = [{\n-      memberId: forum.members.owen.id,\n-      notfLevel: c.TestPageNotfLevel.Muted,\n-      wholeSite: true,\n-    }];\n-\n-    // Enable API.\n-    builder.settings({ enableApi: true });\n-    builder.getSite().apiSecrets = [apiSecret];\n-\n-    // Add an ext id to a category.\n-    // forum.categories.specificCategory.extId = 'specific cat ext id';\n-\n-    assert.refEq(builder.getSite(), forum.siteData);\n-    site = server.importSiteData(forum.siteData);\n-    server.skipRateLimits(site.id);\n-  });\n-\n-  it(\"initialize people\", () => {\n-    everyonesBrowsers = new TyE2eTestBrowser(allWdioBrowsers);\n-    richBrowserA = new TyE2eTestBrowser(wdioBrowserA);\n-    richBrowserB = new TyE2eTestBrowser(wdioBrowserB);\n-\n-    owen = forum.members.owen;\n-    owensBrowser = richBrowserA;\n-\n-    memah = forum.members.memah;\n-    memahsBrowser = richBrowserB;\n-    strangersBrowser = richBrowserB;\n-  });\n-\n-  it(\"Memah logs in\", () => {\n-    memahsBrowser.go2(site.origin);\n-    memahsBrowser.complex.loginWithPasswordViaTopbar(memah);\n-  });\n-\n-\n-\n-  // ------ Simple backlinks\n-\n-  const michelsTopicUrl = () => `${site.origin}/${forum.topics.byMichaelCategoryA.slug}`;\n-  const michelsTopicTitle = () => forum.topics.byMichaelCategoryA.title;\n-  const mariasTopicUrl = () => `${site.origin}/${forum.topics.byMariaCategoryA.slug}`;\n-  const mariasTopicTitle = () => forum.topics.byMariaCategoryA.title;\n-\n-  // We'll edit and then delete topic A.\n-  let topicAUrl: string;\n-  let topicAId: string;\n-\n-  const topicA_title = 'topicA_title';\n-\n-  const topicA_body_link2MiTpc_link2MaTpc = () =>\n-      `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicUrl()} ${mariasTopicUrl()}`;\n-  const topicA_body_link2MiTpc_link2MaTpc_withPreviews = (): St =>\n-      `topicA_body_link2MiTpc_link2MaTpc ${michelsTopicTitle()} ${mariasTopicTitle()}`;\n-\n-  const topicA_body_link2MiTpc = (): St =>\n-      `topicA_body_link2MiTpc ${michelsTopicUrl()}`;\n-  const topicA_body_link2MiTpc_withPreviews = (): St =>\n-      `topicA_body_link2MiTpc ${michelsTopicTitle()}`;\n-\n-  const topicA_body_noLinks = `topicA_body_noLinks`;\n-\n-  const topicAReply_link2MaTpc = () =>\n-        `topicAReply_link2MaTpc ${mariasTopicUrl()}`;\n-  const topicAReply_link2MaTpc_withPreviews = () =>\n-        `topicAReply_link2MaTpc ${mariasTopicTitle()}`;\n-\n-\n-  // Topic B will disappear when we delete its whole category.\n-  let topicBUrl: string;\n-  let topicBId: string;\n-  const topicB_title = 'topicB_title';\n-  const topicB_body_link2MiTpc = () => `topicB_body_link2MiTpc ${michelsTopicUrl()}`;\n-  const topicB_body_link2MiTpc_withPreviews = () =>\n-          `topicB_body_link2MiTpc ${michelsTopicTitle()}`;\n-\n-\n-  it(\"Memah posts a topic A that links to Michael's and Maria's pages\", () => {\n-    memahsBrowser.complex.createAndSaveTopic({\n-          title: topicA_title,\n-          body: topicA_body_link2MiTpc_link2MaTpc(),\n-          bodyMatchAfter: 'topicA_body_link2MiTpc_link2MaTpc' });\n-    topicAUrl = memahsBrowser.getUrl();\n-    topicAId = '2';  // how know?\n-  });\n-\n-  it(\"... inline link previews appear\", () => {\n-    memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n-          topicA_body_link2MiTpc_link2MaTpc_withPreviews());\n-  });\n-\n-  it(\"Owen goes to Memah's new topic\", () => {\n-    owensBrowser.go2(topicAUrl);\n-    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n-  });\n-\n-  it(\"No backlinks to this page\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 0); // ttt\n-  });\n-\n-  it(\"Owen follows the link to Michael's page\", () => {\n-    owensBrowser.waitAndClickFirst('#post-1 a');\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMichaelCategoryA.body);\n-    assert.eq(owensBrowser.getUrl(), michelsTopicUrl());\n-  });\n-\n-  it(\"There's a backlink\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(1);\n-  });\n-\n-  it(\"... from Memah's page\", () => {\n-    assert.ok(owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n-  });\n-\n-  it(\"... with Memah's page's title\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.getLinkTitle(topicAId), topicA_title);\n-  });\n-\n-  it(\"Owen clicks the backlink\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.clickBacklinkFrom(topicAId));  // ttt — there's a real link?\n-  });\n-\n-  it(\"... gets to Memah's page again\", () => {\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, 'topicA_body_link2MiTpc_link2MaTpc');\n-  });\n-\n-  it(\"Owen now follows the link to Maria's page\", () => {\n-    owensBrowser.waitAndClickNth('#post-1 a', 2);\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMariaCategoryA.body);\n-    assert.eq(owensBrowser.getUrl(), mariasTopicUrl());\n-  });\n-\n-  it(\"There's a backlink here too\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 1);\n-  });\n-\n-  it(\"... from Memah's page\", () => {\n-    assert.ok(owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n-  });\n-\n-  it(\"... with Memah's page's title\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.getLinkTitle(topicAId), topicA_title);\n-  });\n-\n-\n-\n-  // ------ Deleting a backlink, by editing it out\n-\n-\n-  it(\"Memah deletes the link to Maria's topic\", () => {\n-    // But keeps the link to Michael's topic.\n-    memahsBrowser.complex.editPageBody(topicA_body_link2MiTpc(),\n-          { textAfterMatches: 'topicA_body_link2MiTpc' });\n-  });\n-\n-  it(\"... now there's only one inline link preview — to Michael's topic\", () => {\n-    memahsBrowser.topic.waitUntilPostTextIs(c.BodyNr,\n-          topicA_body_link2MiTpc_withPreviews());\n-  });\n-\n-  it(\"Owen refreshes Maria's page until the backlink is gone\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(0);\n-  });\n-\n-  it(\"Owen goes to Michael's page\", () => {\n-    owensBrowser.go2(michelsTopicUrl());\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMichaelCategoryA.body);\n-  });\n-\n-  it(\"... still a backlink here\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 1);\n-  });\n-\n-  it(\"... from Memah's page\", () => {\n-    assert.ok(owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n-  });\n-\n-\n-\n-  // ------ Deleting backlinks, by deleting the whole page\n-\n-\n-  it(\"Memah links to Maria's page again, via a reply\", () => {\n-    memahsBrowser.complex.replyToOrigPost(topicAReply_link2MaTpc());\n-  });\n-\n-  it(\"... a block link preview appears\", () => {\n-    const text = memahsBrowser.topic.getPostText(c.FirstReplyNr);\n-    assert.includes(text, topicAReply_link2MaTpc_withPreviews());\n-  });\n-\n-  it(\"Owen goes there\", () => {\n-    owensBrowser.go2(mariasTopicUrl());\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMariaCategoryA.body);\n-  });\n-\n-  it(\"... there's a backlink here, again\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(1);\n-  });\n-\n-  it(\"... from Memah's page\", () => {\n-    assert.ok(owensBrowser.topic.backlinks.isLinkedFromPageId(topicAId));\n-  });\n-\n-  it(\"Owen deletes Memah's whole page!\", () => {\n-    owensBrowser.go2(topicAUrl);\n-    owensBrowser.topbar.pageTools.deletePage();\n-  });\n-\n-  it(\"... returns to Maria's page\", () => {\n-    owensBrowser.go2(mariasTopicUrl());\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMariaCategoryA.body);\n-  });\n-\n-  it(\"Backlink gone\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(0);\n-  });\n-\n-  it(\"Owen goes to Michael's page\", () => {\n-    owensBrowser.go2(michelsTopicUrl());\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, forum.topics.byMichaelCategoryA.body);\n-  });\n-\n-  it(\"... backlink gone here too\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-\n-\n-\n-  // ------ Deleting backlinks, by deleting category\n-\n-\n-  it(\"Memah goes to the Specifc Category\", () => {\n-    memahsBrowser.forumTopicList.goHere({\n-          categorySlug: forum.categories.specificCategory.slug });\n-  });\n-\n-  it(\"... posts a topic B that links to Michael's page\", () => {\n-    memahsBrowser.complex.createAndSaveTopic({\n-          title: topicB_title, body: topicB_body_link2MiTpc(),\n-          bodyMatchAfter: 'topicB_body_link2MiTpc' });\n-    topicBUrl = memahsBrowser.getUrl();\n-    topicBId = memahsBrowser.getPageId();\n-    assert.eq(topicBId, '3');\n-  });\n-\n-  it(\"... a link preview appears\", () => {\n-    const text = memahsBrowser.topic.getPostText(c.BodyNr);\n-    assert.eq(text, topicB_body_link2MiTpc_withPreviews())\n-  });\n-\n-  it(\"Owen refreshes Micheal's page\", () => {\n-    assert.eq(owensBrowser.getUrl(), michelsTopicUrl());\n-    owensBrowser.refresh2();\n-  });\n-\n-  it(\"... there's a backlink\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(1);\n-  });\n-\n-  it(\"... from Memah's new topic\", () => {\n-    assert.ok(owensBrowser.topic.backlinks.isLinkedFromPageId(topicBId));\n-  });\n-\n-  it(\"Owen follows the backlink\", () => {\n-    owensBrowser.topic.backlinks.clickBacklinkFrom(topicBId);\n-    logBoring(\"... gets to Memah's 2nd page\")\n-    owensBrowser.topic.waitUntilPostTextMatches(c.BodyNr, 'topicB_body_link2MiTpc');\n-  });\n-\n-  it(\"... goes to the category\", () => {\n-    owensBrowser.topbar.clickAncestor(forum.categories.specificCategory.name);\n-  });\n-\n-  it(\"Owen deletes the whole category!  TyTDELCATBLNS\", () => {\n-    owensBrowser.forumButtons.clickEditCategory();\n-    owensBrowser.categoryDialog.deleteCategory();\n-  });\n-\n-  it(\"Memah now cannot see her topic — gone, category deleted  TyTDELCATTPC054\", () => {\n-    memahsBrowser.refresh2();\n-    memahsBrowser.assertNotFoundError({ whyNot: 'CategroyDeleted' });\n-  });\n-\n-  it(\"Memah and Owen go to the linked topic, i.e. Michael's page\", () => {\n-    memahsBrowser.go2(michelsTopicUrl());\n-    owensBrowser.go2(michelsTopicUrl());\n-  });\n-\n-  it(\"... the backlink is gone: Memah cannot see it\", () => {\n-    memahsBrowser.topic.backlinks.refreshUntilNum(0);\n-  });\n-\n-  it(\"... neither can Owen\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-\n-\n-  // ------ Deleting backlinks, by deleting a reply  TESTS_MISSING\n-  // ------ Restoring, by un-deleting the reply      TESTS_MISSING\n-\n-\n-  // ------ Deleting backlinks, by flagging and hiding a reply   TESTS_MISSING\n-  // ------ Restoring backlinks, by disagreeing with the flags    TESTS_MISSING\n-\n-\n-  // ------ Backlinks won't appear, until reply approved   TESTS_MISSING\n-\n-\n-  // ------ Backlinks won't appear, until linking topic approved   TESTS_MISSING\n-\n-\n-  // ------ Deleting backlinks, by moving to a deleted category      TESTS_MISSING   TyTBACKLNSCAT\n-  // ------ Restoring backlinks, by moving to a Not deleted category TESTS_MISSING   TyTBACKLNSCAT\n-\n-  // ------ \"Deleting\" backlinks, by moving to a staff-only category  TESTS_MISSING  TyTBACKLNSCAT\n-  // ------ \"Restoring\" backlinks, by moving to a public category     TESTS_MISSING  TyTBACKLNSCAT\n-\n-\n-\n-  // ------ Staff-only backlinks: Creating, viewing\n-\n-  // Hmm this could be a separate e2e test.\n-  const owensTopicId = '4'; // how know?\n-  const owensTopicTitle = 'owensTopicTitle';\n-  const owensTopic_link2MiTpc = () => `owensTopic_link2MiTpc ${michelsTopicUrl()}`;\n-  const owensTopic_link2MiTpc_previews = () =>\n-          `owensTopic_link2MiTpc ${michelsTopicTitle()}`;\n-  const owensReply_link2MaTpc = () => `owensReply_link2MaTpc ${mariasTopicUrl()}`;\n-  const owensReply_link2MaTpc_previews = () =>\n-          `owensReply_link2MaTpc ${mariasTopicTitle()}`;\n-\n-  it(\"Owen wants his own backlinks!  He goes to the staff cateory\", () => {\n-    owensBrowser.forumTopicList.goHere({\n-          categorySlug: forum.categories.staffOnlyCategory.slug });\n-  });\n-\n-  it(\"... posts a staff-only topic with a link to Michael's page\", () => {\n-    owensBrowser.complex.createAndSaveTopic({\n-          title: owensTopicTitle, body: owensTopic_link2MiTpc(),\n-          bodyMatchAfter: 'owensTopic_link2MiTpc' });\n-  });\n-\n-  it(\"... and a reply linking to Maria's page\", () => {\n-    owensBrowser.complex.replyToOrigPost(owensReply_link2MaTpc());\n-  });\n-\n-  it(\"Owen follows his link to Michael's page\", () => {\n-    owensBrowser.waitAndClick(`#post-${c.BodyNr} a`);\n-    logBoring(`The url is correct`);\n-    assert.eq(owensBrowser.getUrl(), michelsTopicUrl());\n-  });\n-\n-  it(\"Owen sees a backlink\", () => {\n-    owensBrowser.topic.backlinks.refreshUntilNum(1);\n-  });\n-\n-  it(\"... from his satff-only topic\", () => {\n-    owensBrowser.topic.backlinks.isLinkedFromPageId(owensTopicId);\n-  });\n-\n-  it(\"... but Memah doesn't; she's an ordinary member, not staff\", () => {\n-    assert.eq(memahsBrowser.getUrl(), michelsTopicUrl());\n-    memahsBrowser.refresh2();\n-    memahsBrowser.waitForMyDataAdded();\n-    assert.eq(memahsBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-\n-  it(\"Owen sees a backlink also on Maria's page\", () => {\n-    owensBrowser.go2(mariasTopicUrl());\n-    owensBrowser.waitForMyDataAdded();\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 1);\n-  });\n-\n-  it(\"... but Memah doesn't\", () => {\n-    memahsBrowser.go2(mariasTopicUrl());\n-    memahsBrowser.waitForMyDataAdded();\n-    assert.eq(memahsBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-\n-\n-  // ------ Staff-only backlinks: Deleting\n-\n-  /*\n-\n-  it(\"Owen starts thinking that backlinks are Bad\", () => {\n-    // Noop\n-  });\n-\n-  it(\"... since the words 'Backlinks' and 'Bad' both start with 'Ba'\", () => {\n-    // Noop\n-  });\n-\n-  it(\"Owen clicks the reply backlink\", () => {\n-  });\n-\n-  it(\"... gets back to the staff-only page with links\", () => {\n-  });\n-\n-  it(\"Owen deletes the reply with the backlink\", () => {\n-  });\n-\n-  it(\"... goes to Maria's topic again\", () => {\n-    owensBrowser.go2(mariasTopicUrl());\n-  });\n-\n-  it(\"... the backlink is gone\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-\n-  it(\"On Memah's topic though\", () => {\n-    owensBrowser.go2(topicAUrl);\n-  });\n-\n-  it(\"... there's still a backlink\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 1);\n-  });\n-\n-  it(\"Owen returns to his page\", () => {\n-    owensBrowser.back();\n-    owensBrowser.back();\n-  });\n-\n-  it(\"Owen deletes the whole page\", () => {\n-  });\n-\n-  it(\"... goes to Memah's topi\", () => {\n-    owensBrowser.go2(topicAUrl);\n-  });\n-\n-  it(\"... the backlink is gone\", () => {\n-    assert.eq(owensBrowser.topic.backlinks.countBacklinks(), 0);\n-  });\n-  */\n-\n-});\n-"
    },
    {
      "sha": "75348f171ecf06ce93979171780f505c446d997c",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Futils%2Fpages-for.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -4818,7 +4818,7 @@ export class TyE2eTestBrowser {\n       clickSendMessage: () => {\n         this.aboutUserDialog.waitForLoaded();\n         this.rememberCurrentUrl();\n-        this.waitAndClick('#e2eUD_MessageB');\n+        this.waitAndClick('.c_UD_MsgB');\n         this.waitForNewUrl();\n         /*  DO_AFTER having tested this in FF with Wdio 6.0: Remove this:\n         // Wait until new-message title can be edited."
    },
    {
      "sha": "4a3dbd148fc67972e5f71ddfe54bc238b84e2bef",
      "filename": "translations/en_US/i18n.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/translations%2Fen_US%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/translations%2Fen_US%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fen_US%2Fi18n.ts?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -695,6 +695,8 @@ var t_en_US: TalkyardTranslations = t = {\n     JoinThisChat: \"Join this chat\",\n     PostMessage: \"Post message\",\n     AdvancedEditor: \"Advanced editor\",\n+    TypeTitle: \"Type a title — what's this chat about, in a few words?\",\n+    TypePurpose: \"Type a purpose — can be longer than the title, more descriptive.\",\n     TypeHere: \"Type here. You can use Markdown and HTML.\",\n   },\n \n@@ -1175,8 +1177,8 @@ var t_en_US: TalkyardTranslations = t = {\n     AskQuestion: \"Ask a question\",\n     ReportProblem: \"Report a problem\",\n     SuggestIdea: \"Suggest an idea\",\n-    NewChat: \"New chat channel title and purpose\",\n-    NewPrivChat: \"New private chat title and purpose\",\n+    NewChat: \"Chat title and purpose\",  // MISSING, changed from \"New chat channel ...\" to just \"Chat\".\n+    NewPrivChat: \"Private chat title and purpose\",  // MISSING, changed from \"New private chat\" to just \"Private chat\".\n     AppendComment: \"Append a comment at the bottom of the page:\",\n \n     ReplyTo: \"Reply to \","
    },
    {
      "sha": "6e502e051e28a194b3075222454e0a8847857613",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors%2Fjars?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1 +1 @@\n-Subproject commit fa55bb27227ef6e980f9544eda6a9eecdb55e847\n+Subproject commit 6e502e051e28a194b3075222454e0a8847857613"
    },
    {
      "sha": "4e582a262c7d9536ce99021d487e5f6b58da9576",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/31b5021eca11d4153af935b0cc30781d4b5614c7/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/31b5021eca11d4153af935b0cc30781d4b5614c7/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=31b5021eca11d4153af935b0cc30781d4b5614c7",
      "patch": "@@ -1 +1 @@\n-v0.2023.007\n+v0.2023.008"
    }
  ]
}
