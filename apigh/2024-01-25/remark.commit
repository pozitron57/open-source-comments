{
  "sha": "81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
  "node_id": "C_kwDOBtgov9oAKDgxYzMwZTAxZjgxZmU1Yzk5MTJiOGUyMmIwZGY2MjBkM2VjOGFhNGQ",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2023-11-18T21:58:11Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2024-01-20T19:29:06Z"
    },
    "message": "cleanup images from deleted comments\n\nPreviously, images were deleted only from comments deleted\nbefore EditDuration expiration. After this change, any deletion\nof the comment deletes images if they are not used elsewhere\nin comments under the same page.",
    "tree": {
      "sha": "5ce4cc1ce40b27d9d75ba88c2ca52e97741d26e3",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/5ce4cc1ce40b27d9d75ba88c2ca52e97741d26e3"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
  "html_url": "https://github.com/umputun/remark42/commit/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "82c617806da1d7f5300f2d93c9d893b390df3f5e",
      "url": "https://api.github.com/repos/umputun/remark42/commits/82c617806da1d7f5300f2d93c9d893b390df3f5e",
      "html_url": "https://github.com/umputun/remark42/commit/82c617806da1d7f5300f2d93c9d893b390df3f5e"
    }
  ],
  "stats": {
    "total": 325,
    "additions": 318,
    "deletions": 7
  },
  "files": [
    {
      "sha": "c3ce0b216a683ab59105c6beebee59c765f0c08f",
      "filename": "backend/_example/memory_store/accessor/image.go",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -70,6 +70,17 @@ func (m *MemImage) Load(id string) ([]byte, error) {\n \treturn img, nil\n }\n \n+// Delete image by ID\n+func (m *MemImage) Delete(id string) error {\n+\tm.mu.Lock()\n+\t// delete key from permanent and staging storage\n+\tdelete(m.images, id)\n+\tdelete(m.insertTime, id)\n+\tdelete(m.imagesStaging, id)\n+\tm.mu.Unlock()\n+\treturn nil\n+}\n+\n // Commit moves image from staging to permanent\n func (m *MemImage) Commit(id string) error {\n \tm.mu.RLock()"
    },
    {
      "sha": "f0df173b002564db21aa6e0d457c8b495b372ef6",
      "filename": "backend/_example/memory_store/accessor/image_test.go",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Faccessor%2Fimage_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -18,7 +18,7 @@ import (\n )\n \n // gopher png for test, from https://golang.org/src/image/png/example_test.go\n-const gopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwUVRzHf2\" +\n+const rawGopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwUVRzHf2\" +\n \t\"+OPbo9d7tsWyiyaZti6eWGAhISoIGKECEKCAiJJkYTiUgTMYSIosYYBBIUIxoSPIINEBDi2VhwkQrVsj1ESgu9doHWdrul7ba\" +\n \t\"73WNm3vOPtsseM9MdwvvrzTs+8/t95ze/33sI5BqiabU6m9En8oNjduLnAEDLUsQXFF8tQ5oxK3vmnNmDSMtrncks9Hhtt\" +\n \t\"/qeWZapHb1ha3UqYSWVl2ZmpWgaXMXGohQAvmeop3bjTRtv6SgaK/Pb9/bFzUrYslbFAmHPp+3WhAYdr+7GN/YnpN46Opv55VDs\" +\n@@ -38,7 +38,9 @@ const gopher = \"iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAAAAAALAhhPAAAFfUlEQVRYw62XeWwU\n \t\"1y98c3D27eppUjsZ6fql3jcd5rUe7+ZIlLNQny3Rd+E5Tct3WVhTM5RBCEdiEK0b6B+/ca2gYU393nFj/n1AygRQxPIUA043M42u85+z2S\" +\n \t\"nssKrPl8Mx76NL3E6eXc3be7OD+H4WHbJkKI8AU8irbITQjZ+0hQcPEgId/Fn/pl9crKH02+5o2b9T/eMx7pKoskYgAAAABJRU5ErkJggg==\"\n \n-func gopherPNG() io.Reader { return base64.NewDecoder(base64.StdEncoding, strings.NewReader(gopher)) }\n+func gopherPNG() io.Reader {\n+\treturn base64.NewDecoder(base64.StdEncoding, strings.NewReader(rawGopher))\n+}\n \n func TestMemImage_LoadAfterSave(t *testing.T) {\n \tsvc := NewMemImageStore()\n@@ -57,7 +59,8 @@ func TestMemImage_LoadAfterSave(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.Equal(t, gopher, img)\n \n-\tsvc.ResetCleanupTimer(id)\n+\terr = svc.ResetCleanupTimer(id)\n+\tassert.NoError(t, err)\n \n \terr = svc.Commit(id)\n \tassert.NoError(t, err)\n@@ -70,6 +73,26 @@ func TestMemImage_LoadAfterSave(t *testing.T) {\n \tassert.Equal(t, gopher, img)\n }\n \n+func TestMemImage_LoadAfterDelete(t *testing.T) {\n+\tsvc := NewMemImageStore()\n+\tgopher, err := io.ReadAll(gopherPNG())\n+\tassert.NoError(t, err)\n+\n+\tid := \"test_img\"\n+\terr = svc.Save(id, gopher)\n+\tassert.NoError(t, err)\n+\n+\terr = svc.Delete(id)\n+\tassert.NoError(t, err)\n+\n+\timg, err := svc.Load(id)\n+\tassert.EqualError(t, err, \"image test_img not found\")\n+\tassert.Empty(t, img)\n+\n+\terr = svc.ResetCleanupTimer(id)\n+\tassert.EqualError(t, err, \"image test_img not found\")\n+}\n+\n func TestMemImage_CommitFail(t *testing.T) {\n \tsvc := NewMemImageStore()\n \terr := svc.Commit(\"test_id\")"
    },
    {
      "sha": "793deadab2e30b1b5ab4acdf8330add2393b9ee1",
      "filename": "backend/_example/memory_store/server/image.go",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Fimage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Fimage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fserver%2Fimage.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -35,7 +35,6 @@ func (s *RPC) imgResetClnTimerHndl(id uint64, params json.RawMessage) (rr jrpc.R\n \t}\n \terr := s.img.ResetCleanupTimer(fileID)\n \treturn jrpc.EncodeResponse(id, nil, err)\n-\n }\n \n func (s *RPC) imgLoadHndl(id uint64, params json.RawMessage) (rr jrpc.Response) {\n@@ -47,6 +46,16 @@ func (s *RPC) imgLoadHndl(id uint64, params json.RawMessage) (rr jrpc.Response)\n \treturn jrpc.EncodeResponse(id, value, err)\n }\n \n+func (s *RPC) imgDeleteHndl(id uint64, params json.RawMessage) (rr jrpc.Response) {\n+\tvar fileID string\n+\tif err := json.Unmarshal(params, &fileID); err != nil {\n+\t\treturn jrpc.Response{Error: err.Error()}\n+\t}\n+\terr := s.img.Delete(fileID)\n+\treturn jrpc.EncodeResponse(id, nil, err)\n+\n+}\n+\n func (s *RPC) imgCommitHndl(id uint64, params json.RawMessage) (rr jrpc.Response) {\n \tvar fileID string\n \tif err := json.Unmarshal(params, &fileID); err != nil {"
    },
    {
      "sha": "79f133ea1315ca027fe6f1135f91b45dc0113fcd",
      "filename": "backend/_example/memory_store/server/image_test.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Fimage_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Fimage_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fserver%2Fimage_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -158,4 +158,9 @@ func TestRPC_imgInfoHndl(t *testing.T) {\n \tinfo, err = ri.Info()\n \tassert.NoError(t, err)\n \tassert.False(t, info.FirstStagingImageTS.IsZero())\n+\n+\terr = ri.Delete(\"test_img\")\n+\tassert.NoError(t, err)\n+\t_, err = ri.Load(\"test_img\")\n+\tassert.EqualError(t, err, \"image test_img not found\")\n }"
    },
    {
      "sha": "97e6eca4241d43a5be88ee931b126f233fb74045",
      "filename": "backend/_example/memory_store/server/rpc.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Frpc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2F_example%2Fmemory_store%2Fserver%2Frpc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fserver%2Frpc.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -60,6 +60,7 @@ func (s *RPC) addHandlers() {\n \t\t\"save_with_id\":        s.imgSaveWithIDHndl,\n \t\t\"reset_cleanup_timer\": s.imgResetClnTimerHndl,\n \t\t\"load\":                s.imgLoadHndl,\n+\t\t\"delete\":              s.imgDeleteHndl,\n \t\t\"commit\":              s.imgCommitHndl,\n \t\t\"cleanup\":             s.imgCleanupHndl,\n \t\t\"info\":                s.imgInfoHndl,"
    },
    {
      "sha": "7b0014de627cbbd39baf4b565e77e462cba20d60",
      "filename": "backend/app/store/image/bolt_store.go",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -4,6 +4,7 @@ import (\n \t\"bytes\"\n \t\"context\"\n \t\"encoding/binary\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"time\"\n \n@@ -118,6 +119,18 @@ func (b *Bolt) Load(id string) ([]byte, error) {\n \treturn data, nil\n }\n \n+// Delete image from storage\n+func (b *Bolt) Delete(id string) error {\n+\treturn b.db.Update(func(tx *bolt.Tx) error {\n+\t\t// deleting a non-existing key doesn't return an error, so joining errors from deleting an image\n+\t\t// from both buckets is safe and will return nil if there are no errors on the real delete\n+\t\t// or image is absent in both buckets\n+\t\terr := tx.Bucket([]byte(imagesBktName)).Delete([]byte(id))\n+\t\terr = errors.Join(err, tx.Bucket([]byte(imagesStagedBktName)).Delete([]byte(id)))\n+\t\treturn err\n+\t})\n+}\n+\n // Cleanup runs scan of staging and removes old data based on ttl\n func (b *Bolt) Cleanup(_ context.Context, ttl time.Duration) error {\n \treturn b.db.Update(func(tx *bolt.Tx) error {"
    },
    {
      "sha": "232db45deceab668b92bacd196708b49132aedbd",
      "filename": "backend/app/store/image/bolt_store_test.go",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fbolt_store_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -58,6 +58,36 @@ func TestBoltStore_LoadAfterSave(t *testing.T) {\n \tassert.Error(t, err)\n }\n \n+func TestBoltStore_LoadAfterDelete(t *testing.T) {\n+\tsvc, teardown := prepareBoltImageStorageTest(t)\n+\tdefer teardown()\n+\n+\t// delete image from permanent storage\n+\tid := \"test_img\"\n+\terr := svc.Save(id, gopherPNGBytes())\n+\tassert.NoError(t, err)\n+\n+\terr = svc.Commit(id)\n+\trequire.NoError(t, err)\n+\n+\terr = svc.Delete(id)\n+\tassert.NoError(t, err)\n+\n+\t_, err = svc.Load(id)\n+\tassert.Error(t, err)\n+\n+\t// delete staging image\n+\tid = \"staging_img\"\n+\terr = svc.Save(id, gopherPNGBytes())\n+\tassert.NoError(t, err)\n+\n+\terr = svc.Delete(id)\n+\tassert.NoError(t, err)\n+\n+\t_, err = svc.Load(id)\n+\tassert.Error(t, err)\n+}\n+\n func TestBoltStore_Cleanup(t *testing.T) {\n \tsvc, teardown := prepareBoltImageStorageTest(t)\n \tdefer teardown()"
    },
    {
      "sha": "cf9a39070cc904ea3899d5d735b8eb17c5c5e04f",
      "filename": "backend/app/store/image/fs_store.go",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Ffs_store.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -23,7 +23,8 @@ type FileSystem struct {\n \tStaging    string\n \tPartitions int\n \n-\tcrc struct {\n+\tmoveLock sync.Mutex // needed only for deleting images or moving them from staging to permanent storage\n+\tcrc      struct {\n \t\t*crc64.Table\n \t\tsync.Once\n \t\tmask    string\n@@ -50,6 +51,8 @@ func (f *FileSystem) Save(id string, img []byte) error {\n \n // Commit file stored in staging location by moving it to permanent location\n func (f *FileSystem) Commit(id string) error {\n+\tf.moveLock.Lock()\n+\tdefer f.moveLock.Unlock()\n \tlog.Printf(\"[DEBUG] Commit image %s\", id)\n \tstagingImage, permImage := f.location(f.Staging, id), f.location(f.Location, id)\n \n@@ -107,11 +110,31 @@ func (f *FileSystem) Load(id string) ([]byte, error) {\n \treturn io.ReadAll(fh)\n }\n \n+// Delete image from storage\n+func (f *FileSystem) Delete(id string) error {\n+\tf.moveLock.Lock()\n+\tdefer f.moveLock.Unlock()\n+\tstaging := f.location(f.Staging, id)\n+\t// file doesn't exist on staging, delete from permanent location\n+\tif _, err := os.Stat(staging); os.IsNotExist(err) {\n+\t\tfile := f.location(f.Location, id)\n+\t\te := os.Remove(file)\n+\t\t_ = os.Remove(path.Dir(file)) // try to remove directory\n+\t\treturn e\n+\t}\n+\t// delete file from staging\n+\terr := os.Remove(staging)\n+\t_ = os.Remove(path.Dir(staging)) // try to remove directory\n+\treturn err\n+}\n+\n // Cleanup runs scan of staging and removes old files based on ttl\n func (f *FileSystem) Cleanup(_ context.Context, ttl time.Duration) error {\n \tif _, err := os.Stat(f.Staging); os.IsNotExist(err) {\n \t\treturn nil\n \t}\n+\tf.moveLock.Lock()\n+\tdefer f.moveLock.Unlock()\n \n \t// we can ignore context as on local FS remove is relatively fast operation\n \terr := filepath.Walk(f.Staging, func(fpath string, info os.FileInfo, err error) error {"
    },
    {
      "sha": "1c5e564aca7d28f7ee79b41cd239a7d625ada243",
      "filename": "backend/app/store/image/fs_store_test.go",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Ffs_store_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -131,6 +131,31 @@ func TestFsStore_LoadAfterCommit(t *testing.T) {\n \tassert.Error(t, err)\n }\n \n+func TestFsStore_LoadAfterDelete(t *testing.T) {\n+\tsvc, teardown := prepareImageTest(t)\n+\tdefer teardown()\n+\n+\tid := \"test_img\"\n+\terr := svc.Save(id, gopherPNGBytes())\n+\tassert.NoError(t, err)\n+\terr = svc.Commit(id)\n+\trequire.NoError(t, err)\n+\terr = svc.Delete(id)\n+\trequire.NoError(t, err)\n+\n+\t_, err = svc.Load(id)\n+\tassert.Error(t, err)\n+\n+\t// create file on staging\n+\terr = svc.Save(id, gopherPNGBytes())\n+\tassert.NoError(t, err)\n+\terr = svc.Delete(id)\n+\trequire.NoError(t, err)\n+\n+\t_, err = svc.Load(id)\n+\tassert.Error(t, err)\n+}\n+\n func TestFsStore_location(t *testing.T) {\n \ttbl := []struct {\n \t\tpartitions int"
    },
    {
      "sha": "647594c5f69e1519c5eaf4172cf76f9ed52b9e5a",
      "filename": "backend/app/store/image/image.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fimage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -70,6 +70,7 @@ type Store interface {\n \tInfo() (StoreInfo, error)         // get meta information about storage\n \tSave(id string, img []byte) error // store image with passed id to staging\n \tLoad(id string) ([]byte, error)   // load image by ID\n+\tDelete(id string) error           // delete image by ID\n \n \tResetCleanupTimer(id string) error                    // resets cleanup timer for the image, called on comment preview\n \tCommit(id string) error                               // move image from staging to permanent\n@@ -212,6 +213,11 @@ func (s *Service) Load(id string) ([]byte, error) {\n \treturn s.store.Load(id)\n }\n \n+// Delete wraps storage Delete function.\n+func (s *Service) Delete(id string) error {\n+\treturn s.store.Delete(id)\n+}\n+\n // Save wraps storage Save function, validating and resizing the image before calling it.\n func (s *Service) Save(userID string, r io.Reader) (id string, err error) {\n \tid = path.Join(userID, guid())"
    },
    {
      "sha": "106eeb776c1f99e928f03964ee558a72ad7fe296",
      "filename": "backend/app/store/image/image_mock.go",
      "status": "modified",
      "additions": 46,
      "deletions": 2,
      "changes": 48,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fimage_mock.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -4,9 +4,9 @@\n package image\n \n import (\n-\tcontext \"context\"\n+\t\"context\"\n \t\"sync\"\n-\ttime \"time\"\n+\t\"time\"\n )\n \n // Ensure, that StoreMock does implement Store.\n@@ -25,6 +25,9 @@ var _ Store = &StoreMock{}\n //\t\t\tCommitFunc: func(id string) error {\n //\t\t\t\tpanic(\"mock out the Commit method\")\n //\t\t\t},\n+//\t\t\tDeleteFunc: func(id string) error {\n+//\t\t\t\tpanic(\"mock out the Delete method\")\n+//\t\t\t},\n //\t\t\tInfoFunc: func() (StoreInfo, error) {\n //\t\t\t\tpanic(\"mock out the Info method\")\n //\t\t\t},\n@@ -50,6 +53,9 @@ type StoreMock struct {\n \t// CommitFunc mocks the Commit method.\n \tCommitFunc func(id string) error\n \n+\t// DeleteFunc mocks the Delete method.\n+\tDeleteFunc func(id string) error\n+\n \t// InfoFunc mocks the Info method.\n \tInfoFunc func() (StoreInfo, error)\n \n@@ -76,6 +82,11 @@ type StoreMock struct {\n \t\t\t// ID is the id argument value.\n \t\t\tID string\n \t\t}\n+\t\t// Delete holds details about calls to the Delete method.\n+\t\tDelete []struct {\n+\t\t\t// ID is the id argument value.\n+\t\t\tID string\n+\t\t}\n \t\t// Info holds details about calls to the Info method.\n \t\tInfo []struct {\n \t\t}\n@@ -99,6 +110,7 @@ type StoreMock struct {\n \t}\n \tlockCleanup           sync.RWMutex\n \tlockCommit            sync.RWMutex\n+\tlockDelete            sync.RWMutex\n \tlockInfo              sync.RWMutex\n \tlockLoad              sync.RWMutex\n \tlockResetCleanupTimer sync.RWMutex\n@@ -173,6 +185,38 @@ func (mock *StoreMock) CommitCalls() []struct {\n \treturn calls\n }\n \n+// Delete calls DeleteFunc.\n+func (mock *StoreMock) Delete(id string) error {\n+\tif mock.DeleteFunc == nil {\n+\t\tpanic(\"StoreMock.DeleteFunc: method is nil but Store.Delete was just called\")\n+\t}\n+\tcallInfo := struct {\n+\t\tID string\n+\t}{\n+\t\tID: id,\n+\t}\n+\tmock.lockDelete.Lock()\n+\tmock.calls.Delete = append(mock.calls.Delete, callInfo)\n+\tmock.lockDelete.Unlock()\n+\treturn mock.DeleteFunc(id)\n+}\n+\n+// DeleteCalls gets all the calls that were made to Delete.\n+// Check the length with:\n+//\n+//\tlen(mockedStore.DeleteCalls())\n+func (mock *StoreMock) DeleteCalls() []struct {\n+\tID string\n+} {\n+\tvar calls []struct {\n+\t\tID string\n+\t}\n+\tmock.lockDelete.RLock()\n+\tcalls = mock.calls.Delete\n+\tmock.lockDelete.RUnlock()\n+\treturn calls\n+}\n+\n // Info calls InfoFunc.\n func (mock *StoreMock) Info() (StoreInfo, error) {\n \tif mock.InfoFunc == nil {"
    },
    {
      "sha": "bdb096ca242f014ce48a0cc9e78e7a0fa26067d6",
      "filename": "backend/app/store/image/remote_store.go",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fremote_store.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fremote_store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fremote_store.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -41,6 +41,12 @@ func (r *RPC) Load(id string) ([]byte, error) {\n \treturn io.ReadAll(base64.NewDecoder(base64.StdEncoding, strings.NewReader(rawImg)))\n }\n \n+// Delete image from storage\n+func (r *RPC) Delete(id string) error {\n+\t_, err := r.Call(\"image.delete\", id)\n+\treturn err\n+}\n+\n // Commit file stored in staging location by moving it to permanent location\n func (r *RPC) Commit(id string) error {\n \t_, err := r.Call(\"image.commit\", id)"
    },
    {
      "sha": "cd5d3de087a6bb451c27c015c7a28a671c2cea1b",
      "filename": "backend/app/store/image/remote_store_test.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fremote_store_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fimage%2Fremote_store_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fimage%2Fremote_store_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -41,6 +41,18 @@ func TestRemote_Load(t *testing.T) {\n \tassert.Equal(t, gopherPNGBytes(), res)\n }\n \n+func TestRemote_Delete(t *testing.T) {\n+\tts := testServer(t, `{\"method\":\"image.delete\",\"params\":\"54321\",\"id\":1}`, `{}`)\n+\tdefer ts.Close()\n+\tc := RPC{Client: jrpc.Client{API: ts.URL, Client: http.Client{}}}\n+\n+\tvar a Store = &c\n+\t_ = a\n+\n+\terr := c.Delete(\"54321\")\n+\tassert.NoError(t, err)\n+}\n+\n func TestRemote_Commit(t *testing.T) {\n \tts := testServer(t, `{\"method\":\"image.commit\",\"params\":\"gopher_id\",\"id\":1}`, `{\"id\":1}`)\n \tdefer ts.Close()"
    },
    {
      "sha": "48e722c9debca015a68fdd852dd9d5bf035b7eb3",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fservice%2Fservice.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -5,6 +5,7 @@ package service\n import (\n \t\"fmt\"\n \t\"math\"\n+\t\"slices\"\n \t\"sort\"\n \t\"strings\"\n \t\"sync\"\n@@ -796,6 +797,34 @@ func (s *DataStore) Delete(locator store.Locator, commentID string, mode store.D\n \t\ts.repliesCache.Delete(commentID)\n \t\ts.repliesCache.Delete(comment.ParentID)\n \t}\n+\n+\t// delete images from the comment if they are not reused elsewhere in comments to the same page\n+\tidsFn := func() []string { // get IDs of all images from the same URL to verify if image from deleted comment was reused\n+\t\tcomments, e := s.Engine.Find(engine.FindRequest{Locator: locator})\n+\t\tif e != nil {\n+\t\t\tlog.Printf(\"[WARN] can't get comments %s text for deleted comment image check, %v\", comment.ID, err)\n+\t\t\treturn nil\n+\t\t}\n+\t\tvar imgIDs = []string{}\n+\t\tfor _, cc := range comments {\n+\t\t\t// exclude the comment we are deleting\n+\t\t\tif cc.ID != commentID {\n+\t\t\t\timgIDs = append(imgIDs, s.ImageService.ExtractPictures(cc.Text)...)\n+\t\t\t}\n+\t\t}\n+\t\treturn imgIDs\n+\t}\n+\tcommentImgIDs := s.ImageService.ExtractPictures(comment.Text)\n+\tpageImgIDs := idsFn()\n+\tfor _, id := range commentImgIDs {\n+\t\tif !slices.Contains(pageImgIDs, id) {\n+\t\t\tif err := s.ImageService.Delete(id); err != nil {\n+\t\t\t\tlog.Printf(\"[WARN] failed to delete image %s on comment %s deletion, %v\", id, commentID, err)\n+\t\t\t}\n+\t\t}\n+\t}\n+\tlog.Printf(\"[ERROR] commentImgIDs: %v, pageImgIDs: %v\", commentImgIDs, pageImgIDs)\n+\n \treq := engine.DeleteRequest{Locator: locator, CommentID: commentID, DeleteMode: mode}\n \treturn s.Engine.Delete(req)\n }"
    },
    {
      "sha": "258953b8aec00414973268a69aaa57d41ff77a62",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/umputun/remark42/blob/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Fservice_test.go?ref=81c30e01f81fe5c9912b8e22b0df620d3ec8aa4d",
      "patch": "@@ -1406,6 +1406,80 @@ func TestService_Delete(t *testing.T) {\n \tassert.NoError(t, err)\n }\n \n+func TestService_deleteImagesOnCommentDelete(t *testing.T) {\n+\tlgr.Setup(lgr.Debug, lgr.CallerFile, lgr.CallerFunc)\n+\n+\tmockStore := image.StoreMock{\n+\t\tDeleteFunc:            func(id string) error { return nil },\n+\t\tCommitFunc:            func(id string) error { return nil },\n+\t\tResetCleanupTimerFunc: func(id string) error { return nil },\n+\t}\n+\timgSvc := image.NewService(&mockStore,\n+\t\timage.ServiceParams{\n+\t\t\tEditDuration: 50 * time.Millisecond,\n+\t\t\tImageAPI:     \"/images/dev/\",\n+\t\t\tProxyAPI:     \"/non_existent\",\n+\t\t})\n+\tdefer imgSvc.Close(context.TODO())\n+\n+\t// two comments for https://radio-t.com\n+\teng, teardown := prepStoreEngine(t)\n+\tdefer teardown()\n+\tb := DataStore{Engine: eng, EditDuration: 50 * time.Millisecond,\n+\t\tAdminStore: admin.NewStaticKeyStore(\"secret 123\"), ImageService: imgSvc}\n+\n+\tc := store.Comment{\n+\t\tID:        \"id-22\",\n+\t\tText:      `some text <img src=\"/images/dev/pic1.png\"/> xx <img src=\"/images/dev/pic2.png\"/>`,\n+\t\tTimestamp: time.Date(2017, 12, 20, 15, 18, 22, 0, time.Local),\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tUser:      store.User{ID: \"user1\", Name: \"user name\"},\n+\t}\n+\t_, err := b.Engine.Create(c) // create directly with engine, doesn't call submitImages\n+\tassert.NoError(t, err)\n+\tb.submitImages(c)\n+\t// reply to the first comment with one new image and one existing one\n+\tc = store.Comment{\n+\t\tID:       \"id-23\",\n+\t\tParentID: \"id-22\",\n+\t\tText:     `some text <img src=\"/images/dev/pic2.png\"/> xx <img src=\"/images/dev/pic3.png\"/>`,\n+\t\tLocator:  store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tUser:     store.User{ID: \"user1\", Name: \"user name\"},\n+\t}\n+\t_, err = b.Engine.Create(c) // create directly with engine, doesn't call submitImages\n+\tassert.NoError(t, err)\n+\tb.submitImages(c)\n+\n+\t// verify that images are in staging store\n+\tassert.Equal(t, 4, len(mockStore.ResetCleanupTimerCalls()))\n+\tassert.Equal(t, \"dev/pic1.png\", mockStore.ResetCleanupTimerCalls()[0].ID)\n+\tassert.Equal(t, \"dev/pic2.png\", mockStore.ResetCleanupTimerCalls()[1].ID)\n+\tassert.Equal(t, \"dev/pic2.png\", mockStore.ResetCleanupTimerCalls()[2].ID)\n+\tassert.Equal(t, \"dev/pic3.png\", mockStore.ResetCleanupTimerCalls()[3].ID)\n+\ttime.Sleep(b.EditDuration + 100*time.Millisecond)\n+\t// verify that they got into the main store\n+\tassert.Equal(t, 4, len(mockStore.CommitCalls()))\n+\tassert.Equal(t, \"dev/pic1.png\", mockStore.CommitCalls()[0].ID)\n+\tassert.Equal(t, \"dev/pic2.png\", mockStore.CommitCalls()[1].ID)\n+\tassert.Equal(t, \"dev/pic2.png\", mockStore.CommitCalls()[2].ID)\n+\tassert.Equal(t, \"dev/pic3.png\", mockStore.CommitCalls()[3].ID)\n+\n+\t// delete the first comment\n+\terr = b.Delete(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-22\", store.SoftDelete)\n+\tassert.NoError(t, err)\n+\t// verify that images are deleted from the main store\n+\tassert.Equal(t, 1, len(mockStore.DeleteCalls()))\n+\tassert.Equal(t, \"dev/pic1.png\", mockStore.DeleteCalls()[0].ID)\n+\n+\t// delete the second comment\n+\terr = b.Delete(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-23\", store.SoftDelete)\n+\tassert.NoError(t, err)\n+\t// verify that images are deleted from the main store\n+\tassert.Equal(t, 3, len(mockStore.DeleteCalls()))\n+\tassert.Equal(t, \"dev/pic2.png\", mockStore.DeleteCalls()[1].ID)\n+\tassert.Equal(t, \"dev/pic3.png\", mockStore.DeleteCalls()[2].ID)\n+}\n+\n // DeleteUser removes all comments from user\n func TestService_DeleteUser(t *testing.T) {\n \t// two comments for https://radio-t.com, no reply"
    }
  ]
}
