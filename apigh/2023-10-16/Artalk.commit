{
  "sha": "d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
  "node_id": "C_kwDOCQOkhNoAKGQyMWU0N2Y4ODFkNzIyYjA4YjJiNmE1YjQxYjZhMThiYTFjMmI4YWQ",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2023-10-15T15:08:31Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2023-10-15T15:08:31Z"
    },
    "message": "refactor(ui/event): refactor core event manager (#611)",
    "tree": {
      "sha": "91248f2c247de4b3f874b537d2f0b7234798b7d7",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/91248f2c247de4b3f874b537d2f0b7234798b7d7"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlLABvCRBK7hj4Ov3rIwAAagcIAEOiRXmTR4bTFz1ArzU8O1Hx\nYVmzud9bwY5xoZM9lc2gN3yadCIBzWemLrEvd8+9ru1CFOkwvoBmtmmN51QeE90o\noEBZZUvNloQKquVTPypKjcDKl53GxuuQMgqW9pG57muCrC3/CvR/Wu5x5n+QS0Lk\n5LlykODYpYUFFbLKQ6lPhfEd4hsQGoXQ3hd4tsCjXnGuVQ54To/s3E6N4ocP/nze\nbAcPcuT3raljh+s3/78/PKNeKOb57wQJqpl4O4IH7ohxdxZSeKVCUzD8rnMmQYfE\nUnWyHHTkjfh8e2+kMLo67xJFWGE06R4idSI2JOMqmyTjcsE55p+p17Kri/Mdwqo=\n=1zdj\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 91248f2c247de4b3f874b537d2f0b7234798b7d7\nparent 8d11a239fa04ebc993b23a148ec0a7e37950d800\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1697382511 +0800\ncommitter GitHub <noreply@github.com> 1697382511 +0800\n\nrefactor(ui/event): refactor core event manager (#611)\n\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8d11a239fa04ebc993b23a148ec0a7e37950d800",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/8d11a239fa04ebc993b23a148ec0a7e37950d800",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/8d11a239fa04ebc993b23a148ec0a7e37950d800"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 66,
    "deletions": 48
  },
  "files": [
    {
      "sha": "e6a31abfb7e0dcf537bf3bc542b7971d0e61e29e",
      "filename": "ui/packages/artalk/src/artalk.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fartalk.ts?ref=d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "patch": "@@ -1,9 +1,10 @@\n import './style/main.scss'\n \n import type ArtalkConfig from '~/types/artalk-config'\n-import type { EventPayloadMap, Handler } from '~/types/event'\n+import type { EventPayloadMap } from '~/types/event'\n import type ArtalkPlug from '~/types/plug'\n import type Context from '~/types/context'\n+import type { EventHandler } from './lib/event-manager'\n import ConcreteContext from './context'\n import defaults from './defaults'\n import { handelBaseConf } from './config'\n@@ -90,18 +91,18 @@ export default class Artalk {\n   }\n \n   /** Add an event listener */\n-  public on<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>) {\n-    this.ctx.on(name, handler, 'external')\n+  public on<K extends keyof EventPayloadMap>(name: K, handler: EventHandler<EventPayloadMap[K]>) {\n+    this.ctx.on(name, handler)\n   }\n \n   /** Remove an event listener */\n-  public off<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>) {\n-    this.ctx.off(name, handler, 'external')\n+  public off<K extends keyof EventPayloadMap>(name: K, handler: EventHandler<EventPayloadMap[K]>) {\n+    this.ctx.off(name, handler)\n   }\n \n   /** Trigger an event */\n   public trigger<K extends keyof EventPayloadMap>(name: K, payload?: EventPayloadMap[K]) {\n-    this.ctx.trigger(name, payload, 'external')\n+    this.ctx.trigger(name, payload)\n   }\n \n   /** Set dark mode */\n@@ -135,12 +136,12 @@ export default class Artalk {\n   }\n \n   /** Add an event listener */\n-  public static on<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>) {\n+  public static on<K extends keyof EventPayloadMap>(name: K, handler: EventHandler<EventPayloadMap[K]>) {\n     this.instance?.on(name, handler)\n   }\n \n   /** Remove an event listener */\n-  public static off<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>) {\n+  public static off<K extends keyof EventPayloadMap>(name: K, handler: EventHandler<EventPayloadMap[K]>) {\n     this.instance?.off(name, handler)\n   }\n "
    },
    {
      "sha": "e466b126334b59d1353ed7675a8491f75be88863",
      "filename": "ui/packages/artalk/src/context.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 16,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcontext.ts?ref=d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "patch": "@@ -1,6 +1,6 @@\n import type ArtalkConfig from '~/types/artalk-config'\n import type { CommentData, NotifyData } from '~/types/artalk-data'\n-import type { Event } from '~/types/event'\n+import type { EventPayloadMap } from '~/types/event'\n import type ContextApi from '~/types/context'\n import type { TInjectedServices } from './service'\n \n@@ -15,6 +15,7 @@ import { SidebarShowPayload } from './layer/sidebar-layer'\n import Comment from './comment'\n import Api from './api'\n import List from './list'\n+import EventManager from './lib/event-manager'\n \n // Auto dependency injection\n interface Context extends TInjectedServices { }\n@@ -30,8 +31,8 @@ class Context implements ContextApi {\n \n   private commentList: Comment[] = [] // Note: 无层级结构 + 无须排列\n \n-  /* 订阅者模式 */\n-  private eventList: Event[] = []\n+  /* Event Manager */\n+  private events = new EventManager<EventPayloadMap>()\n \n   public constructor(conf: ArtalkConfig, $root?: HTMLElement) {\n     this.conf = conf\n@@ -206,23 +207,17 @@ class Context implements ContextApi {\n     })\n   }\n \n-  /* 订阅模式 */\n-  public on(name: any, handler: any, scope: any = 'internal') {\n-    this.eventList.push({ name, handler, scope })\n+  /* Events */\n+  public on(name: any, handler: any) {\n+    this.events.on(name, handler)\n   }\n \n-  public off(name: any, handler: any, scope: any = 'internal') {\n-    this.eventList = this.eventList.filter((evt) => {\n-      if (handler) return !(evt.name === name && evt.handler === handler && evt.scope === scope)\n-      return !(evt.name === name && evt.scope === scope) // 删除全部相同 name event\n-    })\n+  public off(name: any, handler: any) {\n+    this.events.off(name, handler)\n   }\n \n-  public trigger(name: any, payload?: any, scope?: any) {\n-    this.eventList\n-      .filter((evt) => evt.name === name && (scope ? (evt.scope === scope) : true))\n-      .map((evt) => evt.handler)\n-      .forEach((handler) => handler(payload))\n+  public trigger(name: any, payload?: any) {\n+    this.events.trigger(name, payload)\n   }\n \n   /* i18n */"
    },
    {
      "sha": "ccb3aff51d76d999c57e7c421973635df9559b79",
      "filename": "ui/packages/artalk/src/lib/event-manager.ts",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts?ref=d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "patch": "@@ -0,0 +1,43 @@\n+export interface EventHandler<P> {\n+  (payload: P): void\n+}\n+\n+export interface Event<PayloadMap, K extends keyof PayloadMap = keyof PayloadMap> {\n+  name: K\n+  handler: EventHandler<PayloadMap[K]>\n+}\n+\n+export interface EventManagerFuncs<PayloadMap> {\n+  on<K extends keyof PayloadMap>(name: K, handler: EventHandler<PayloadMap[K]>): void\n+  off<K extends keyof PayloadMap>(name: K, handler: EventHandler<PayloadMap[K]>): void\n+  trigger<K extends keyof PayloadMap>(name: K, payload?: PayloadMap[K]): void\n+}\n+\n+export default class EventManager<PayloadMap> implements EventManagerFuncs<PayloadMap> {\n+  private events: Event<PayloadMap>[] = []\n+\n+  /**\n+   * Add an event listener for a specific event name\n+   */\n+  public on<K extends keyof PayloadMap>(name: K, handler: EventHandler<PayloadMap[K]>) {\n+    this.events.push({ name, handler: handler as EventHandler<PayloadMap[keyof PayloadMap]> })\n+  }\n+\n+  /**\n+   * Remove an event listener for a specific event name and handler\n+   */\n+  public off<K extends keyof PayloadMap>(name: K, handler: EventHandler<PayloadMap[K]>) {\n+    if (!handler) return // not allow remove all events with same name\n+    this.events = this.events.filter((evt) =>\n+      !(evt.name === name && evt.handler === handler))\n+  }\n+\n+  /**\n+   * Trigger an event with an optional payload\n+   */\n+  public trigger<K extends keyof PayloadMap>(name: K, payload: PayloadMap[K]) {\n+    this.events\n+      .filter((evt) => evt.name === name && typeof evt.handler === 'function')\n+      .forEach((evt) => evt.handler(payload))\n+  }\n+}"
    },
    {
      "sha": "a8335945e7f4e5433666461dc6547f94895b5537",
      "filename": "ui/packages/artalk/types/context.d.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fcontext.d.ts?ref=d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "patch": "@@ -1,6 +1,7 @@\n import ArtalkConfig from './artalk-config'\n import { CommentData, NotifyData } from './artalk-data'\n-import { EventPayloadMap, Event, EventScopeType, Handler } from './event'\n+import type { EventPayloadMap } from './event'\n+import type { EventManagerFuncs } from '../src/lib/event-manager'\n import { internal as internalLocales, I18n } from '../src/i18n'\n import Api from '../src/api'\n import User from '../src/lib/user'\n@@ -15,7 +16,7 @@ import type { TInjectedServices } from '../src/service'\n  *\n  * (面向接口的编程)\n  */\n-export default interface ContextApi {\n+export default interface ContextApi extends EventManagerFuncs<EventPayloadMap> {\n   /** Artalk 根元素对象 */\n   $root: HTMLElement\n \n@@ -119,15 +120,6 @@ export default interface ContextApi {\n   /** 管理员显示元素可见性更新 */\n   checkAdminShowEl(): void\n \n-  /** 订阅注册 */\n-  on<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>, scope?: EventScopeType): void\n-\n-  /** 订阅取消 */\n-  off<K extends keyof EventPayloadMap>(name: K, handler?: Handler<EventPayloadMap[K]>, scope?: EventScopeType): void\n-\n-  /** 订阅发布 */\n-  trigger<K extends keyof EventPayloadMap>(name: K, payload?: EventPayloadMap[K], scope?: EventScopeType): void\n-\n   /** i18n 翻译 */\n   $t(key: keyof I18n, args?: {[key: string]: string}): string\n "
    },
    {
      "sha": "1c4dd8dd37200c3daa416d6cde5956dcb04c0f1c",
      "filename": "ui/packages/artalk/types/event.d.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Fevent.d.ts?ref=d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "patch": "@@ -13,16 +13,3 @@ export interface EventPayloadMap {\n   'sidebar-show': undefined        // 侧边栏显示\n   'sidebar-hide': undefined        // 侧边栏隐藏\n }\n-\n-// ============================================\n-export interface Handler<P> {\n-  (payload: P): void\n-}\n-\n-export type EventScopeType = 'internal'|'external'\n-\n-export interface Event<K extends keyof EventPayloadMap = keyof EventPayloadMap> {\n-  name: keyof EventPayloadMap\n-  handler: Handler<EventPayloadMap[K]>\n-  scope: EventScopeType\n-}"
    }
  ]
}
