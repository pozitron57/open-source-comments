{
  "sha": "c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
  "node_id": "C_kwDOBtgov9oAKGMzYmE1NWJhNDNiMzRmOTkwNTJjZTM5ODU1ZjFmY2Q5ZTY0YmFmOGY",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2024-12-12T02:17:23Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2024-12-12T02:17:23Z"
    },
    "message": "Merge pull request #1699 from umputun/paskal/comments_pagination\n\nadd pagination to GET /api/v1/find endpoint",
    "tree": {
      "sha": "d3a2c97c1fe00042389c0523302326cf6df45ad8",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/d3a2c97c1fe00042389c0523302326cf6df45ad8"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnWkezCRC1aQ7uu5UhlAAAavQQAGrsumaUd6Sk0yxrCiW3zJB6\npLqZqoDxJ7K+4SK9JlseXp0xBWdrXoHW0iRrQUFtNbZOoMtwAdK5ChY5Qz5INAeR\n6prrsrrATamOB+Tb2Ze/4zeKgSCE1hunNYCHxh+u/XuQ6CcXaQy9iGChpRNqPQLl\nDVvrGtSeMYsCYus82NG86CHBB2dft6zKo3oKu06m6meT52Zz4z75T+7jQiSpvSVq\niJvyDJlldMh8rpWMPgeoVrPyPbqkR1m6tRY63XWtG3/FC9WTOzqiGKXcZdmgkTI6\nhwowmP05zyBLmzstCpQkmzUh4+W7Thpdd2LKRd+tJ+OAacSSayqA/D37En4gJf4i\n3oFGzDqUQHZ0rb7+X/DRaVtrAmOrtj9xtBrtj6RoXw5PR0FFBEf9DPNbUGQAvzfs\n/b0w0YQyKddOszVe+lKkFO9B2wxaheZGnn2Q6NTfPBE4tMWAGGSOA0aPzQAO2Vhb\nZlIQZLMSZfjoLgranKxbMuVOxkFNNjDGWvBBDXenqI48VdjLqACKSxP/VBgI/ais\nVLzAVVZ1ww+IFxnq/DFTCPncZCjgadKX4TlDifqZkRKc90hB2VxVwGx6guzhE6WO\nGgHF0of+oJCzJ+tMnLO/O1sFwAkZ+47/LXlCx/qfNsa3I6bk/wXZfXdXD5UK0wgT\n7x8omiafMbtfUovCdYuh\n=9kiY\n-----END PGP SIGNATURE-----\n",
      "payload": "tree d3a2c97c1fe00042389c0523302326cf6df45ad8\nparent d5162d3fe6ba9c656db0b2066d3e377c9e144d95\nparent 82a0888c42570c353742e7e7f78e8ee30bd91dda\nauthor Umputun <umputun@gmail.com> 1733969843 -0600\ncommitter GitHub <noreply@github.com> 1733969843 -0600\n\nMerge pull request #1699 from umputun/paskal/comments_pagination\n\nadd pagination to GET /api/v1/find endpoint",
      "verified_at": "2024-12-12T02:17:27Z"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
  "html_url": "https://github.com/umputun/remark42/commit/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d5162d3fe6ba9c656db0b2066d3e377c9e144d95",
      "url": "https://api.github.com/repos/umputun/remark42/commits/d5162d3fe6ba9c656db0b2066d3e377c9e144d95",
      "html_url": "https://github.com/umputun/remark42/commit/d5162d3fe6ba9c656db0b2066d3e377c9e144d95"
    },
    {
      "sha": "82a0888c42570c353742e7e7f78e8ee30bd91dda",
      "url": "https://api.github.com/repos/umputun/remark42/commits/82a0888c42570c353742e7e7f78e8ee30bd91dda",
      "html_url": "https://github.com/umputun/remark42/commit/82a0888c42570c353742e7e7f78e8ee30bd91dda"
    }
  ],
  "stats": {
    "total": 326,
    "additions": 284,
    "deletions": 42
  },
  "files": [
    {
      "sha": "ebecff7ab058073b66beb37755eabc6b3159f472",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 60,
      "deletions": 4,
      "changes": 64,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public.go?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -16,6 +16,7 @@ import (\n \tcache \"github.com/go-pkgz/lcw/v2\"\n \tlog \"github.com/go-pkgz/lgr\"\n \tR \"github.com/go-pkgz/rest\"\n+\t\"github.com/google/uuid\"\n \t\"github.com/skip2/go-qrcode\"\n \n \t\"github.com/umputun/remark42/backend/app/rest\"\n@@ -48,10 +49,18 @@ type pubStore interface {\n \tCounts(siteID string, postIDs []string) ([]store.PostInfo, error)\n }\n \n-// GET /find?site=siteID&url=post-url&format=[tree|plain]&sort=[+/-time|+/-score|+/-controversy]&view=[user|all]&since=unix_ts_msec\n-// find comments for given post. Returns in tree or plain formats, sorted\n+// GET /find?site=siteID&url=post-url&format=[tree|plain]&sort=[+/-time|+/-score|+/-controversy]&view=[user|all]&since=unix_ts_msec&limit=100&offset_id={id}\n+// find comments for given post. Returns in tree or plain formats, sorted.\n //\n // When `url` parameter is not set (e.g. request is for site-wide comments), does not return deleted comments.\n+//\n+// When `limit` is set, first {limit} comments are returned. When `offset_id` is set, comments are returned starting\n+// after the comment with the given id.\n+// format=\"tree\" limits comments by top-level comments and all their replies,\n+// and never returns parent comment with only part of replies.\n+//\n+// `count` in the response refers to total number of non-deleted comments,\n+// `count_left` to amount of comments left to be returned _including deleted_.\n func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n \tsort := r.URL.Query().Get(\"sort\")\n@@ -70,7 +79,24 @@ func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tsince = time.Time{} // since doesn't make sense for tree\n \t}\n \n-\tlog.Printf(\"[DEBUG] get comments for %+v, sort %s, format %s, since %v\", locator, sort, format, since)\n+\tlimitParam := r.URL.Query().Get(\"limit\")\n+\tvar limit int\n+\tif limitParam != \"\" {\n+\t\tif limit, err = strconv.Atoi(limitParam); err != nil {\n+\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"bad limit value\", rest.ErrCommentNotFound)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\toffsetID := r.URL.Query().Get(\"offset_id\")\n+\tif offsetID != \"\" {\n+\t\tif _, err = uuid.Parse(offsetID); err != nil {\n+\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"bad offset_id value\", rest.ErrCommentNotFound)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\tlog.Printf(\"[DEBUG] get comments for %+v, sort %s, format %s, since %v, limit %d, offset %s\", locator, sort, format, since, limit, offsetID)\n \n \tkey := cache.NewKey(locator.SiteID).ID(URLKeyWithUser(r)).Scopes(locator.SiteID, locator.URL)\n \tdata, err := s.cache.Get(key, func() ([]byte, error) {\n@@ -102,12 +128,20 @@ func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tvar b []byte\n \t\tswitch format {\n \t\tcase \"tree\":\n-\t\t\twithInfo := treeWithInfo{Tree: service.MakeTree(comments, sort), Info: commentsInfo}\n+\t\t\twithInfo := treeWithInfo{Tree: service.MakeTree(comments, sort, limit, offsetID), Info: commentsInfo}\n+\t\t\twithInfo.Info.CountLeft = withInfo.Tree.CountLeft()\n+\t\t\twithInfo.Info.LastComment = withInfo.Tree.LastComment()\n \t\t\tif withInfo.Nodes == nil { // eliminate json nil serialization\n \t\t\t\twithInfo.Nodes = []*service.Node{}\n \t\t\t}\n \t\t\tb, e = encodeJSONWithHTML(withInfo)\n \t\tdefault:\n+\t\t\tif limit > 0 || offsetID != \"\" {\n+\t\t\t\tcomments, commentsInfo.CountLeft = limitComments(comments, limit, offsetID)\n+\t\t\t}\n+\t\t\tif limit > 0 && len(comments) > 0 {\n+\t\t\t\tcommentsInfo.LastComment = comments[len(comments)-1].ID\n+\t\t\t}\n \t\t\twithInfo := commentsWithInfo{Comments: comments, Info: commentsInfo}\n \t\t\tb, e = encodeJSONWithHTML(withInfo)\n \t\t}\n@@ -432,3 +466,25 @@ func (s *public) parseSince(r *http.Request) (time.Time, error) {\n \t}\n \treturn sinceTS, nil\n }\n+\n+// limitComments returns limited list of comments and count of comments left after limit.\n+// If offsetID is provided, the list will be sliced starting from the comment with this ID.\n+// If offsetID is not found, the full list will be returned.\n+// It's used for only \"\n+func limitComments(c []store.Comment, limit int, offsetID string) (comments []store.Comment, countLeft int) {\n+\tif offsetID != \"\" {\n+\t\tfor i, comment := range c {\n+\t\t\tif comment.ID == offsetID {\n+\t\t\t\tc = c[i+1:]\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif limit > 0 && len(c) > limit {\n+\t\tcountLeft = len(c) - limit\n+\t\tc = c[:limit]\n+\t}\n+\n+\treturn c, countLeft\n+}"
    },
    {
      "sha": "deddd96a591ea8dec0e6c371d929e4f6407b9d20",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 104,
      "deletions": 18,
      "changes": 122,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -14,6 +14,7 @@ import (\n \n \tcache \"github.com/go-pkgz/lcw/v2\"\n \tR \"github.com/go-pkgz/rest\"\n+\t\"github.com/google/uuid\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n@@ -598,7 +599,7 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \tsetScore(commentLocator, ids[4], -3)\n \ttime.Sleep(time.Millisecond * 5)\n \n-\tc6 := store.Comment{Text: \"third-level comment 2\", ParentID: ids[4], Locator: commentLocator}\n+\tc6 := store.Comment{Text: \"deleted third-level comment 2\", ParentID: ids[4], Locator: commentLocator}\n \tids[5], timestamps[5] = addCommentGetCreatedTime(t, c6, ts)\n \t// deleted later so not visible in site-wide requests\n \tsetScore(commentLocator, ids[5], 10)\n@@ -612,7 +613,7 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \tsetScore(commentLocator, ids[6], 1)\n \ttime.Sleep(time.Millisecond * 5)\n \n-\tc8 := store.Comment{Text: \"second-level comment 3\", ParentID: ids[6], Locator: commentLocator}\n+\tc8 := store.Comment{Text: \"deleted second-level comment 3\", ParentID: ids[6], Locator: commentLocator}\n \tids[7], timestamps[7] = addCommentGetCreatedTime(t, c8, ts)\n \t// deleted later so not visible in site-wide requests\n \tsetScore(commentLocator, ids[7], -20)\n@@ -646,18 +647,19 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \t\tparams       string\n \t\texpectedBody string\n \t}{\n-\t\t{\"\", fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url\", fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"format=plain\", fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"format=plain&url=test-url\", fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTenSecondsAgo, fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTenSecondsAgo, fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":5,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"count\":3,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":2,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t// test parameters url, format, since, sort\n+\t\t{\"\", fmt.Sprintf(`\"info\":{\"count\":7,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url\", fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"format=plain\", fmt.Sprintf(`\"info\":{\"count\":7,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"format=plain&url=test-url\", fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTenSecondsAgo, fmt.Sprintf(`\"info\":{\"count\":7,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTenSecondsAgo, fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"count\":7,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"count\":6,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":5,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"count\":3,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":2,\"count_left\":0,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n \t\t{\"format=tree\", `\"info\":{\"count\":7`},\n \t\t{\"format=tree&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6`},\n \t\t{\"format=tree&sort=+time\", `\"info\":{\"count\":7`},\n@@ -677,19 +679,103 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \t\t// three comments of which last one deleted and doesn't have controversy so returned last\n \t\t{\"sort=-controversy&url=test-url&since=\" + sinceTS[5], fmt.Sprintf(`\"score\":0,\"vote\":0,\"time\":%q,\"delete\":true}],\"info\":{\"url\":\"test-url\",\"count\":1`, formattedTS[7])},\n \t\t// test readonly status for the post without comments\n-\t\t{\"url=readonly-test\", `\"info\":{\"count\":0,\"read_only\":true`},\n-\t\t{\"format=tree&url=readonly-test\", `\"info\":{\"count\":0,\"read_only\":true`},\n+\t\t{\"url=readonly-test\", `\"info\":{\"count\":0,\"count_left\":0,\"read_only\":true`},\n+\t\t{\"format=tree&url=readonly-test\", `\"info\":{\"count\":0,\"count_left\":0,\"read_only\":true`},\n+\n+\t\t// test parameters limit, offset_id for format=plain\n+\t\t{\"limit=bad\", `{\"code\":1,\"details\":\"bad limit value\",\"error\":\"strconv.Atoi: parsing \\\"bad\\\": invalid syntax\"}`},\n+\t\t{\"offset_id=bad\", `{\"code\":1,\"details\":\"bad offset_id value\",\"error\":\"invalid UUID length: 3\"}`},\n+\t\t{\"limit=2\", `\"info\":{\"count\":7,\"count_left\":5,\"last_comment\":\"` + ids[1]},\n+\t\t{\"limit=6\", `\"info\":{\"count\":7,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{\"limit=7\", `\"info\":{\"count\":7,\"count_left\":0,\"last_comment\":\"` + ids[8]},\n+\t\t{\"limit=2&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":6,\"last_comment\":\"` + ids[1]},\n+\t\t{\"limit=6&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":2,\"last_comment\":\"` + ids[5]},\n+\t\t{\"limit=7&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{fmt.Sprintf(\"limit=2&offset_id=%s\", ids[2]), `\"info\":{\"count\":7,\"count_left\":2,\"last_comment\":\"` + ids[4]},\n+\t\t{fmt.Sprintf(\"limit=2&offset_id=%s\", ids[3]), `\"info\":{\"count\":7,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{fmt.Sprintf(\"limit=2&offset_id=%s\", ids[4]), `\"info\":{\"count\":7,\"count_left\":0`},\n+\t\t{fmt.Sprintf(\"limit=1&offset_id=%s\", ids[6]), `\"info\":{\"count\":7,\"count_left\":0`},\n+\t\t{fmt.Sprintf(\"limit=2&offset_id=%s\", ids[8]), `\"info\":{\"count\":7,\"count_left\":0`},\n+\t\t{fmt.Sprintf(\"limit=2&url=test-url&offset_id=%s\", ids[2]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[4]},\n+\t\t{fmt.Sprintf(\"limit=2&url=test-url&offset_id=%s\", ids[3]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":2,\"last_comment\":\"` + ids[5]},\n+\t\t{fmt.Sprintf(\"limit=2&url=test-url&offset_id=%s\", ids[4]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{fmt.Sprintf(\"limit=1&url=test-url&offset_id=%s\", ids[6]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"last_comment\":\"` + ids[7]},\n+\t\t{fmt.Sprintf(\"limit=2&url=test-url&offset_id=%s\", ids[8]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":6,`},\n+\t\t// deleted comment, offset is ignored in site-wide request but not for particular URL\n+\t\t{fmt.Sprintf(\"limit=2&offset_id=%s\", ids[5]), `\"info\":{\"count\":7,\"count_left\":5,\"last_comment\":\"` + ids[1]},\n+\t\t{fmt.Sprintf(\"limit=2&url=test-url&offset_id=%s\", ids[5]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"last_comment\":\"` + ids[7]},\n+\t\t// non-existing comment, offset is ignored, deleted comments included into request with \"url\"\n+\t\t{fmt.Sprintf(\"limit=1&offset_id=%s\", uuid.New().String()), `\"info\":{\"count\":7,\"count_left\":6,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"limit=1&url=test-url&offset_id=%s\", uuid.New().String()), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[0]},\n+\t\t// since is ignored for tree format, so we test it only for plain\n+\t\t{\"limit=6&since=\" + sinceTenSecondsAgo, `\"info\":{\"count\":7,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{\"limit=1&since=\" + sinceTS[4], `\"info\":{\"count\":3,\"count_left\":2,\"last_comment\":\"` + ids[4]},\n+\t\t{\"limit=6&url=test-url&since=\" + sinceTenSecondsAgo, `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":2,\"last_comment\":\"` + ids[5]},\n+\t\t{\"limit=1&url=test-url&since=\" + sinceTS[4], `\"info\":{\"url\":\"test-url\",\"count\":2,\"count_left\":3,\"last_comment\":\"` + ids[4]},\n+\t\t// start with deleted comment timestamp\n+\t\t{\"limit=1&since=\" + sinceTS[5], `\"info\":{\"count\":2,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{\"limit=1&since=\" + sinceTS[6], `\"info\":{\"count\":2,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{\"limit=1&url=test-url&since=\" + sinceTS[5], `\"info\":{\"url\":\"test-url\",\"count\":1,\"count_left\":2,\"last_comment\":\"` + ids[5]},\n+\t\t{\"limit=1&url=test-url&since=\" + sinceTS[6], `\"info\":{\"url\":\"test-url\",\"count\":1,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t// test sort\n+\t\t{\"limit=1&sort=+time&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[0]},\n+\t\t{\"limit=1&sort=-time&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[7]},\n+\t\t{\"limit=1&sort=+score&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[6]},\n+\t\t{\"limit=1&sort=-score&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[2]},\n+\t\t{\"limit=1&sort=+controversy&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[0]},\n+\t\t{\"limit=1&sort=-controversy&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":7,\"last_comment\":\"` + ids[3]},\n+\n+\t\t// test parameters limit, offset_id for format=tree\n+\t\t{\"format=tree&limit=bad\", `{\"code\":1,\"details\":\"bad limit value\",\"error\":\"strconv.Atoi: parsing \\\"bad\\\": invalid syntax\"}`},\n+\t\t{\"format=tree&offset_id=bad\", `{\"code\":1,\"details\":\"bad offset_id value\",\"error\":\"invalid UUID length: 3\"}`},\n+\t\t{\"format=tree&limit=2\", `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{\"format=tree&limit=6\", `\"info\":{\"count\":7,\"count_left\":2,\"last_comment\":\"` + ids[1]},\n+\t\t{\"format=tree&limit=7\", `\"info\":{\"count\":7,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{\"format=tree&url=test-url&limit=2\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{\"format=tree&url=test-url&limit=6\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":1,\"last_comment\":\"` + ids[1]},\n+\t\t{\"format=tree&url=test-url&limit=7\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"last_comment\":\"` + ids[6]},\n+\t\t// start after first top-level comment\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[0]), `\"info\":{\"count\":7,\"count_left\":2,\"last_comment\":\"` + ids[1]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[0]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":1,\"last_comment\":\"` + ids[1]},\n+\t\t// start after second top-level comment\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[1]), `\"info\":{\"count\":7,\"count_left\":1,\"last_comment\":\"` + ids[6]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[1]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0,\"last_comment\":\"` + ids[6]},\n+\t\t// start after third top-level comment, so expect comment to post 2, or no comments on post 1 if \"url\" is set\n+\t\t{fmt.Sprintf(\"format=tree&limit=1&offset_id=%s\", ids[6]), `\"info\":{\"count\":7,\"count_left\":0,\"last_comment\":\"` + ids[8]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=1&offset_id=%s\", ids[6]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":0`},\n+\t\t// non-root comment IDs or non-existing IDs are ignored\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[2]), `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[3]), `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[4]), `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&limit=2&offset_id=%s\", ids[7]), `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&limit=1&offset_id=%s\", uuid.New().String()), `\"info\":{\"count\":7,\"count_left\":4,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[2]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[3]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[4]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=2&offset_id=%s\", ids[7]), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{fmt.Sprintf(\"format=tree&url=test-url&limit=1&offset_id=%s\", uuid.New().String()), `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t// test sort\n+\t\t{\"format=tree&limit=1&sort=+time&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{\"format=tree&limit=1&sort=-time&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":5,\"last_comment\":\"` + ids[6]},\n+\t\t{\"format=tree&limit=1&sort=+score&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":5,\"last_comment\":\"` + ids[6]},\n+\t\t{\"format=tree&limit=1&sort=-score&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":4,\"last_comment\":\"` + ids[1]},\n+\t\t{\"format=tree&limit=1&sort=+controversy&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":3,\"last_comment\":\"` + ids[0]},\n+\t\t{\"format=tree&limit=1&sort=-controversy&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6,\"count_left\":5,\"last_comment\":\"` + ids[6]},\n \t}\n \n \tfor _, tc := range testCases {\n \t\tt.Run(tc.params, func(t *testing.T) {\n \t\t\turl := fmt.Sprintf(ts.URL+\"/api/v1/find?site=remark42&%s\", tc.params)\n \t\t\tbody, code := get(t, url)\n-\t\t\tassert.Equal(t, http.StatusOK, code)\n+\t\t\texpectedStatus := http.StatusOK\n+\t\t\tif strings.Contains(tc.params, \"=bad\") {\n+\t\t\t\texpectedStatus = http.StatusBadRequest\n+\t\t\t}\n+\t\t\tassert.Equal(t, expectedStatus, code)\n \t\t\tassert.Contains(t, body, tc.expectedBody)\n \t\t\tt.Log(body)\n \t\t\t// prevent hit limiter from engaging\n-\t\t\ttime.Sleep(50 * time.Millisecond)\n+\t\t\ttime.Sleep(80 * time.Millisecond)\n \t\t})\n \t}\n }"
    },
    {
      "sha": "b23eb580376388fc7f0dd27d0159c5ca2691485b",
      "filename": "backend/app/store/comment.go",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fcomment.go",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fcomment.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fcomment.go?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -45,11 +45,13 @@ type Edit struct {\n \n // PostInfo holds summary for given post url\n type PostInfo struct {\n-\tURL      string    `json:\"url,omitempty\"` // can be attached to site-wide comments but won't be set then\n-\tCount    int       `json:\"count\"`\n-\tReadOnly bool      `json:\"read_only,omitempty\" bson:\"read_only,omitempty\"` // can be attached to site-wide comments but won't be set then\n-\tFirstTS  time.Time `json:\"first_time,omitempty\" bson:\"first_time,omitempty\"`\n-\tLastTS   time.Time `json:\"last_time,omitempty\" bson:\"last_time,omitempty\"`\n+\tURL         string    `json:\"url,omitempty\"` // can be attached to site-wide comments but won't be set then\n+\tCount       int       `json:\"count\"`\n+\tCountLeft   int       `json:\"count_left\"`                                     // used only with returning search results limited by number, otherwise zero\n+\tLastComment string    `json:\"last_comment,omitempty\"`                         // used only with returning search results limited by number\n+\tReadOnly    bool      `json:\"read_only,omitempty\" bson:\"read_only,omitempty\"` // can be attached to site-wide comments but won't be set then\n+\tFirstTS     time.Time `json:\"first_time,omitempty\" bson:\"first_time,omitempty\"`\n+\tLastTS      time.Time `json:\"last_time,omitempty\" bson:\"last_time,omitempty\"`\n }\n \n // BlockedUser holds id and ts for blocked user"
    },
    {
      "sha": "276392ac36e358706f1fa30889f2e7dc7bc655df",
      "filename": "backend/app/store/service/tree.go",
      "status": "modified",
      "additions": 93,
      "deletions": 1,
      "changes": 94,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fservice%2Ftree.go",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fservice%2Ftree.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftree.go?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -11,6 +11,9 @@ import (\n // Tree is formatter making tree from the list of comments\n type Tree struct {\n \tNodes []*Node `json:\"comments\"`\n+\n+\tcountLeft          int\n+\tlastLimitedComment string\n }\n \n // Node is a comment with optional replies\n@@ -29,7 +32,7 @@ type recurData struct {\n }\n \n // MakeTree gets unsorted list of comments and produces Tree\n-func MakeTree(comments []store.Comment, sortType string) *Tree {\n+func MakeTree(comments []store.Comment, sortType string, limit int, offsetID string) *Tree {\n \tif len(comments) == 0 {\n \t\treturn &Tree{}\n \t}\n@@ -53,9 +56,20 @@ func MakeTree(comments []store.Comment, sortType string) *Tree {\n \t}\n \n \tres.sortNodes(sortType)\n+\tres.limit(limit, offsetID)\n \treturn &res\n }\n \n+// CountLeft returns number of comments left after limit, 0 if no limit was set\n+func (t *Tree) CountLeft() int {\n+\treturn t.countLeft\n+}\n+\n+// LastComment returns ID of the last comment in the tree after limit, empty string if no limit was set\n+func (t *Tree) LastComment() string {\n+\treturn t.lastLimitedComment\n+}\n+\n // proc makes tree for one top-level comment recursively\n func (t *Tree) proc(comments []store.Comment, node *Node, rd *recurData, parentID string) (result *Node) {\n \tif rd.tsModified.IsZero() || rd.tsCreated.IsZero() {\n@@ -145,3 +159,81 @@ func (t *Tree) sortNodes(sortType string) {\n \t\t}\n \t})\n }\n+\n+// limit limits number of comments in tree and sets countLeft and lastLimitedComment,\n+// starting with comment next after offsetID.\n+//\n+// If offsetID is empty or invalid, it starts from the beginning. If limit is 0, it doesn't limit anything.\n+//\n+// Limit is applied to top-level comments only, so top-level comments only returned with all replies,\n+// and lastLimitedComment is set to the last top-level comment and not last reply in it.\n+//\n+// In case limit is less than the number of replies to first comment after given offset, that first comment is\n+// returned completely with all replies.\n+func (t *Tree) limit(limit int, offsetID string) {\n+\tif offsetID == \"\" && limit <= 0 {\n+\t\treturn\n+\t}\n+\n+\tstart := 0\n+\tif offsetID != \"\" {\n+\t\tfor i, n := range t.Nodes {\n+\t\t\tif n.Comment.ID == offsetID {\n+\t\t\t\tstart = i + 1\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif start == len(t.Nodes) { // If the start index is beyond the available nodes, clear the nodes\n+\t\tt.Nodes = []*Node{}\n+\t\treturn\n+\t}\n+\n+\tt.Nodes = t.Nodes[start:]\n+\n+\t// if there is only offset and no limit, there are no comments left and no point in returning\n+\t// the last comment ID as there are no comments beyond it.\n+\tif limit <= 0 {\n+\t\treturn\n+\t}\n+\n+\t// Traverse and limit the number of top-level nodes, including their replies\n+\tlimitedNodes := []*Node{}\n+\tcommentsCount := 0\n+\n+\tfor _, node := range t.Nodes {\n+\t\trepliesCount := countReplies(node) + 1 // Count this node and its replies\n+\n+\t\t// If the limit is already reached or exceeded, calculate countLeft and move to the next node\n+\t\tif commentsCount >= limit {\n+\t\t\tt.countLeft += repliesCount\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Check if we just exceeded the limit and there are already some nodes in the list,\n+\t\t// as otherwise we would have to return the first node with all its replies even if it exceeds the limit.\n+\t\tif commentsCount+repliesCount >= limit && len(limitedNodes) > 0 {\n+\t\t\tt.countLeft += repliesCount\n+\t\t\tcommentsCount = limit // Adjust commentsCount to stop checking limit for the next nodes\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Add the node and its replies to the list\n+\t\tlimitedNodes = append(limitedNodes, node)\n+\t\tcommentsCount += repliesCount\n+\t}\n+\n+\tt.lastLimitedComment = limitedNodes[len(limitedNodes)-1].Comment.ID\n+\tt.Nodes = limitedNodes\n+}\n+\n+// countReplies counts the total number of replies recursively for a given node.\n+func countReplies(node *Node) int {\n+\tcount := 0\n+\tfor _, reply := range node.Replies {\n+\t\tcount++                      // Count the reply itself\n+\t\tcount += countReplies(reply) // Recursively count its replies\n+\t}\n+\treturn count\n+}"
    },
    {
      "sha": "260d269390d6917fda706fd6fb8aeedb484cc195",
      "filename": "backend/app/store/service/tree_test.go",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fstore%2Fservice%2Ftree_test.go?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -37,14 +37,14 @@ func TestMakeTree(t *testing.T) {\n \t\t{Locator: loc, ID: \"611\", ParentID: \"61\", Deleted: true},\n \t}\n \n-\tres := MakeTree(comments, \"time\")\n+\tres := MakeTree(comments, \"time\", 0, \"\")\n \tresJSON, err := json.Marshal(&res)\n \trequire.NoError(t, err)\n \n \texpJSON := mustLoadJSONFile(t, \"testdata/tree.json\")\n \tassert.Equal(t, expJSON, resJSON)\n \n-\tres = MakeTree([]store.Comment{}, \"time\")\n+\tres = MakeTree([]store.Comment{}, \"time\", 0, \"\")\n \tassert.Equal(t, &Tree{}, res)\n }\n \n@@ -75,7 +75,7 @@ func TestMakeEmptySubtree(t *testing.T) {\n \t\t{Locator: loc, ID: \"3\", Timestamp: ts(48, 1), Deleted: true}, // deleted top level\n \t}\n \n-\tres := MakeTree(comments, \"time\")\n+\tres := MakeTree(comments, \"time\", 0, \"\")\n \tresJSON, err := json.Marshal(&res)\n \trequire.NoError(t, err)\n \tt.Log(string(resJSON))\n@@ -104,50 +104,50 @@ func TestTreeSortNodes(t *testing.T) {\n \t\t{ID: \"5\", Deleted: true, Timestamp: time.Date(2017, 12, 25, 19, 47, 22, 150, time.UTC)},\n \t}\n \n-\tres := MakeTree(comments, \"+active\")\n+\tres := MakeTree(comments, \"+active\", 0, \"\")\n \tassert.Equal(t, \"2\", res.Nodes[0].Comment.ID)\n \tt.Log(res.Nodes[0].Comment.ID, res.Nodes[0].tsModified)\n \n-\tres = MakeTree(comments, \"-active\")\n+\tres = MakeTree(comments, \"-active\", 0, \"\")\n \tt.Log(res.Nodes[0].Comment.ID, res.Nodes[0].tsModified)\n \tassert.Equal(t, \"1\", res.Nodes[0].Comment.ID)\n \n-\tres = MakeTree(comments, \"+time\")\n+\tres = MakeTree(comments, \"+time\", 0, \"\")\n \tt.Log(res.Nodes[0].Comment.ID, res.Nodes[0].tsModified)\n \tassert.Equal(t, \"1\", res.Nodes[0].Comment.ID)\n \n-\tres = MakeTree(comments, \"-time\")\n+\tres = MakeTree(comments, \"-time\", 0, \"\")\n \tassert.Equal(t, \"6\", res.Nodes[0].Comment.ID)\n \n-\tres = MakeTree(comments, \"score\")\n+\tres = MakeTree(comments, \"score\", 0, \"\")\n \tassert.Equal(t, \"4\", res.Nodes[0].Comment.ID)\n \tassert.Equal(t, \"3\", res.Nodes[1].Comment.ID)\n \tassert.Equal(t, \"6\", res.Nodes[2].Comment.ID)\n \tassert.Equal(t, \"1\", res.Nodes[3].Comment.ID)\n \n-\tres = MakeTree(comments, \"+score\")\n+\tres = MakeTree(comments, \"+score\", 0, \"\")\n \tassert.Equal(t, \"4\", res.Nodes[0].Comment.ID)\n \n-\tres = MakeTree(comments, \"-score\")\n+\tres = MakeTree(comments, \"-score\", 0, \"\")\n \tassert.Equal(t, \"2\", res.Nodes[0].Comment.ID)\n \tassert.Equal(t, \"1\", res.Nodes[1].Comment.ID)\n \tassert.Equal(t, \"3\", res.Nodes[2].Comment.ID)\n \tassert.Equal(t, \"6\", res.Nodes[3].Comment.ID)\n \n-\tres = MakeTree(comments, \"+controversy\")\n+\tres = MakeTree(comments, \"+controversy\", 0, \"\")\n \tassert.Equal(t, \"3\", res.Nodes[0].Comment.ID)\n \tassert.Equal(t, \"6\", res.Nodes[1].Comment.ID)\n \tassert.Equal(t, \"2\", res.Nodes[2].Comment.ID)\n \tassert.Equal(t, \"4\", res.Nodes[3].Comment.ID)\n \tassert.Equal(t, \"1\", res.Nodes[4].Comment.ID)\n \n-\tres = MakeTree(comments, \"-controversy\")\n+\tres = MakeTree(comments, \"-controversy\", 0, \"\")\n \tassert.Equal(t, \"1\", res.Nodes[0].Comment.ID)\n \tassert.Equal(t, \"4\", res.Nodes[1].Comment.ID)\n \tassert.Equal(t, \"2\", res.Nodes[2].Comment.ID)\n \tassert.Equal(t, \"3\", res.Nodes[3].Comment.ID)\n \n-\tres = MakeTree(comments, \"undefined\")\n+\tres = MakeTree(comments, \"undefined\", 0, \"\")\n \tt.Log(res.Nodes[0].Comment.ID, res.Nodes[0].tsModified)\n \tassert.Equal(t, \"1\", res.Nodes[0].Comment.ID)\n }\n@@ -160,7 +160,7 @@ func BenchmarkTree(b *testing.B) {\n \tassert.NoError(b, err)\n \n \tfor i := 0; i < b.N; i++ {\n-\t\tres := MakeTree(comments, \"time\")\n+\t\tres := MakeTree(comments, \"time\", 0, \"\")\n \t\tassert.NotNil(b, res)\n \t}\n }"
    },
    {
      "sha": "33bb3c8ef969eae50501e1e79d3ebd22e28cfb65",
      "filename": "backend/remark.rest",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fremark.rest",
      "raw_url": "https://github.com/umputun/remark42/raw/c3ba55ba43b34f99052ce39855f1fcd9e64baf8f/backend%2Fremark.rest",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fremark.rest?ref=c3ba55ba43b34f99052ce39855f1fcd9e64baf8f",
      "patch": "@@ -5,6 +5,12 @@ GET {{host}}/api/v1/find?site={{site}}&sort=-time&format=tree&url={{url}}\n ### find request with plain\n GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}\n \n+### find 10 first comments for given URL\n+GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}&limit=10\n+\n+### find 10 comments after given comment ID (3665976683 in this example) for given URL\n+GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}&limit=10&after=3665976683\n+\n ### find request with plain. dev token for secret=12345, not admin\n GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}\n X-JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcmsiLCJleHAiOjE5NzYwNTY3NTYsImp0aSI6IjJlOGJmMTE5OTI0MjQxMDRjYjFhZGRlODllMWYwNGFiMTg4YWZjMzQiLCJpYXQiOjE1NzYwNTY0NTYsImlzcyI6InJlbWFyazQyIiwidXNlciI6eyJuYW1lIjoiZGV2X3VzZXIiLCJpZCI6ImRldl91c2VyIiwicGljdHVyZSI6Imh0dHA6Ly8xMjcuMC4wLjE6ODA4MC9hcGkvdjEvYXZhdGFyL2NjZmEyYWJkMDE2Njc2MDViNGUxZmM0ZmNiOTFiMWUxYWYzMjMyNDAuaW1hZ2UiLCJhdHRycyI6eyJhZG1pbiI6dHJ1ZSwiYmxvY2tlZCI6ZmFsc2V9fX0.6Qt5s2enBMRC-Jmsua01yViVYI95Dx6BPBMaNjj36d4"
    }
  ]
}
