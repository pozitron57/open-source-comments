{
  "sha": "01837b69e56d6b78e1fb6393d689b5fde0c0296f",
  "node_id": "C_kwDOBtgov9oAKDAxODM3YjY5ZTU2ZDZiNzhlMWZiNjM5M2Q2ODliNWZkZTBjMDI5NmY",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2024-02-21T19:17:12Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2024-03-04T21:44:19Z"
    },
    "message": "fix readonly status, deleted count for plain /find request",
    "tree": {
      "sha": "c072c0a5558a5c05606c85b166bdec71ee26cf6b",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/c072c0a5558a5c05606c85b166bdec71ee26cf6b"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/01837b69e56d6b78e1fb6393d689b5fde0c0296f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/01837b69e56d6b78e1fb6393d689b5fde0c0296f",
  "html_url": "https://github.com/umputun/remark42/commit/01837b69e56d6b78e1fb6393d689b5fde0c0296f",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/01837b69e56d6b78e1fb6393d689b5fde0c0296f/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d02099844eb81ef78011293b50329d9ac53dab87",
      "url": "https://api.github.com/repos/umputun/remark42/commits/d02099844eb81ef78011293b50329d9ac53dab87",
      "html_url": "https://github.com/umputun/remark42/commit/d02099844eb81ef78011293b50329d9ac53dab87"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 31,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d913f76e3fccbb1d96573419eb9e080c0920cc7c",
      "filename": "backend/app/rest/api/admin_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go?ref=01837b69e56d6b78e1fb6393d689b5fde0c0296f",
      "patch": "@@ -530,7 +530,7 @@ func TestAdmin_ReadOnlyNoComments(t *testing.T) {\n \terr = json.Unmarshal([]byte(res), &comments)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 0, len(comments.Comments), \"should have 0 comments\")\n-\tassert.False(t, comments.Info.ReadOnly, \"different from the plain format, should be fixed\")\n+\tassert.True(t, comments.Info.ReadOnly)\n \tt.Logf(\"%+v\", comments)\n }\n "
    },
    {
      "sha": "41d9992b395cffe3231b6315b2dd49543916513f",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "raw_url": "https://github.com/umputun/remark42/raw/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Frest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public.go?ref=01837b69e56d6b78e1fb6393d689b5fde0c0296f",
      "patch": "@@ -50,6 +50,8 @@ type pubStore interface {\n \n // GET /find?site=siteID&url=post-url&format=[tree|plain]&sort=[+/-time|+/-score|+/-controversy]&view=[user|all]&since=unix_ts_msec\n // find comments for given post. Returns in tree or plain formats, sorted\n+//\n+// When `url` parameter is not set (e.g. request is for site-wide comments), does not return deleted comments.\n func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n \tsort := r.URL.Query().Get(\"sort\")\n@@ -93,6 +95,18 @@ func (s *public) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\t\tif info, ee := s.dataService.Info(locator, s.readOnlyAge); ee == nil {\n \t\t\t\twithInfo.Info = info\n \t\t\t}\n+\t\t\tif !since.IsZero() { // if since is set, number of comments can be different from total in the DB\n+\t\t\t\twithInfo.Info.Count = 0\n+\t\t\t\tfor _, c := range comments {\n+\t\t\t\t\tif !c.Deleted {\n+\t\t\t\t\t\twithInfo.Info.Count++\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// post might be readonly without any comments, Info call will fail then and ReadOnly flag should be checked separately\n+\t\t\tif !withInfo.Info.ReadOnly && locator.URL != \"\" && s.dataService.IsReadOnly(locator) {\n+\t\t\t\twithInfo.Info.ReadOnly = true\n+\t\t\t}\n \t\t\tb, e = encodeJSONWithHTML(withInfo)\n \t\t}\n \t\treturn b, e"
    },
    {
      "sha": "3553d8d6a266c75dca041b56fe0842f98009bfab",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/01837b69e56d6b78e1fb6393d689b5fde0c0296f/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_public_test.go?ref=01837b69e56d6b78e1fb6393d689b5fde0c0296f",
      "patch": "@@ -629,6 +629,10 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \tassert.NoError(t, err)\n \tsrv.Cache.Flush(cache.FlusherRequest{})\n \n+\tcommentLocator.URL = \"readonly-test\"\n+\t// set post without comments to read-only\n+\tassert.NoError(t, srv.DataService.SetReadOnly(commentLocator, true))\n+\n \tsinceTenSecondsAgo := strconv.FormatInt(time.Now().Add(-time.Second*10).UnixNano()/1000000, 10)\n \tsinceTS := make([]string, 9)\n \tformattedTS := make([]string, 9)\n@@ -650,10 +654,10 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \t\t{\"url=test-url&since=\" + sinceTenSecondsAgo, fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n \t\t{\"since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n \t\t{\"url=test-url&since=\" + sinceTS[0], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n-\t\t{\"since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"count\":7,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n-\t\t{\"url=test-url&since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"count\":6,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTS[1], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":5,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n+\t\t{\"since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"count\":3,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[8])},\n+\t\t{\"url=test-url&since=\" + sinceTS[4], fmt.Sprintf(`\"info\":{\"url\":\"test-url\",\"count\":2,\"first_time\":%q,\"last_time\":%q}`, formattedTS[0], formattedTS[7])},\n \t\t{\"format=tree\", `\"info\":{\"url\":\"test-url\",\"count\":7`},\n \t\t{\"format=tree&url=test-url\", `\"info\":{\"url\":\"test-url\",\"count\":6`},\n \t\t{\"format=tree&sort=+time\", `\"info\":{\"url\":\"test-url\",\"count\":7`},\n@@ -666,12 +670,15 @@ func TestPublic_FindCommentsCtrl_ConsistentCount(t *testing.T) {\n \t\t{\"sort=+score&url=test-url\", fmt.Sprintf(`\"score\":10,\"vote\":0,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":6`, formattedTS[2])},\n \t\t{\"sort=-score\", fmt.Sprintf(`\"score\":-25,\"vote\":0,\"time\":%q}],\"info\":{\"count\":7`, formattedTS[8])},\n \t\t{\"sort=-score&url=test-url\", fmt.Sprintf(`\"score\":-2,\"vote\":0,\"controversy\":1.5874010519681994,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":6`, formattedTS[6])},\n-\t\t{\"sort=-time&since=\" + sinceTS[4], fmt.Sprintf(`\"score\":-1,\"vote\":0,\"controversy\":2.924017738212866,\"time\":%q}],\"info\":{\"count\":7`, formattedTS[4])},\n-\t\t{\"sort=-score&since=\" + sinceTS[3], fmt.Sprintf(`\"score\":-25,\"vote\":0,\"time\":%q}],\"info\":{\"count\":7`, formattedTS[8])},\n-\t\t{\"sort=-score&url=test-url&since=\" + sinceTS[3], fmt.Sprintf(`\"score\":-2,\"vote\":0,\"controversy\":1.5874010519681994,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":6`, formattedTS[6])},\n-\t\t{\"sort=+controversy&url=test-url&since=\" + sinceTS[5], fmt.Sprintf(`\"score\":-2,\"vote\":0,\"controversy\":1.5874010519681994,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":6`, formattedTS[6])},\n+\t\t{\"sort=-time&since=\" + sinceTS[4], fmt.Sprintf(`\"score\":-1,\"vote\":0,\"controversy\":2.924017738212866,\"time\":%q}],\"info\":{\"count\":3`, formattedTS[4])},\n+\t\t{\"sort=-score&since=\" + sinceTS[3], fmt.Sprintf(`\"score\":-25,\"vote\":0,\"time\":%q}],\"info\":{\"count\":4`, formattedTS[8])},\n+\t\t{\"sort=-score&url=test-url&since=\" + sinceTS[3], fmt.Sprintf(`\"score\":-2,\"vote\":0,\"controversy\":1.5874010519681994,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":3`, formattedTS[6])},\n+\t\t{\"sort=+controversy&url=test-url&since=\" + sinceTS[5], fmt.Sprintf(`\"score\":-2,\"vote\":0,\"controversy\":1.5874010519681994,\"time\":%q}],\"info\":{\"url\":\"test-url\",\"count\":1`, formattedTS[6])},\n \t\t// three comments of which last one deleted and doesn't have controversy so returned last\n-\t\t{\"sort=-controversy&url=test-url&since=\" + sinceTS[5], fmt.Sprintf(`\"score\":0,\"vote\":0,\"time\":%q,\"delete\":true}],\"info\":{\"url\":\"test-url\",\"count\":6`, formattedTS[7])},\n+\t\t{\"sort=-controversy&url=test-url&since=\" + sinceTS[5], fmt.Sprintf(`\"score\":0,\"vote\":0,\"time\":%q,\"delete\":true}],\"info\":{\"url\":\"test-url\",\"count\":1`, formattedTS[7])},\n+\t\t// test readonly status for the post without comments\n+\t\t{\"url=readonly-test\", `\"info\":{\"count\":0,\"read_only\":true`},\n+\t\t{\"format=tree&url=readonly-test\", `\"info\":{\"count\":0,\"read_only\":true`},\n \t}\n \n \tfor _, tc := range testCases {"
    }
  ]
}
