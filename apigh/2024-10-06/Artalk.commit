{
  "sha": "206a26d0c18aba535bdb2c94d8077f41794aad0e",
  "node_id": "C_kwDOCQOkhNoAKDIwNmEyNmQwYzE4YWJhNTM1YmRiMmM5NGQ4MDc3ZjQxNzk0YWFkMGU",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-10-05T13:10:23Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2024-10-05T13:13:02Z"
    },
    "message": "feat(ui): add npm published version check script\n\n- Introduce check:publish script to verify npm versions\n- Ensure all projects have the latest versions on npm\n- Skip private packages during version checks\n- Allow filtering by specific project name with -F option",
    "tree": {
      "sha": "8c3532c7a8814cb187e3d4162c29c16195788753",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/8c3532c7a8814cb187e3d4162c29c16195788753"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/206a26d0c18aba535bdb2c94d8077f41794aad0e",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZwE7XwAKCRDUbg8O6nwT\nakchAP9Bc6TeGO+9+2t1ODJj5X6ZK8ucHnlHHXYODkXYVzVOcQD7B+osS0aI1V5m\nCr441wpUADOjeFFJtDWVbrRQoMs3qwc=\n=v1W1\n-----END PGP SIGNATURE-----",
      "payload": "tree 8c3532c7a8814cb187e3d4162c29c16195788753\nparent f1ae5661341a2537101e5fc5f71c0827c7d6c61c\nauthor qwqcode <qwqcode@gmail.com> 1728133823 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1728133982 +0800\n\nfeat(ui): add npm published version check script\n\n- Introduce check:publish script to verify npm versions\n- Ensure all projects have the latest versions on npm\n- Skip private packages during version checks\n- Allow filtering by specific project name with -F option\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/206a26d0c18aba535bdb2c94d8077f41794aad0e",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/206a26d0c18aba535bdb2c94d8077f41794aad0e",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/206a26d0c18aba535bdb2c94d8077f41794aad0e/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1ae5661341a2537101e5fc5f71c0827c7d6c61c",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/f1ae5661341a2537101e5fc5f71c0827c7d6c61c",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/f1ae5661341a2537101e5fc5f71c0827c7d6c61c"
    }
  ],
  "stats": {
    "total": 201,
    "additions": 189,
    "deletions": 12
  },
  "files": [
    {
      "sha": "9d099415e9b5373de75f80f51fc49014c90825ed",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/206a26d0c18aba535bdb2c94d8077f41794aad0e/CONTRIBUTING.md",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/206a26d0c18aba535bdb2c94d8077f41794aad0e/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/CONTRIBUTING.md?ref=206a26d0c18aba535bdb2c94d8077f41794aad0e",
      "patch": "@@ -161,6 +161,28 @@ The compiled JavaScript and CSS files will be located in the `/public` directory\n \n For more details, refer to the `scripts/build-frontend.sh` script.\n \n+### Publish Frontend\n+\n+The core artalk client code is automatically deployed to NPM by GitHub Actions. The deployment process is defined in the `.github/workflows/build-ui.yml` file.\n+\n+If you are writing a artalk plugin in monorepo, it would not be automatically deployed. You should publish it manually. To publish the plugin, first ensure your version number is updated in the `package.json` file. Then, run the following command:\n+\n+```sh\n+pnpm publish --access public\n+```\n+\n+#### Check Published Versions\n+\n+The `pnpm check:publish` script is designed to verify that all packages in the project have the latest versions published on npm. It skips private packages automatically and allows filtering to check specific packages using the `-F` option.\n+\n+Check all packages:\n+\n+```sh\n+pnpm check:publish\n+```\n+\n+This will initiate the process of checking all public packages in the repository to ensure they are up to date on npm.\n+\n ## Docker Development\n \n ### Build Docker Image"
    },
    {
      "sha": "4cb027148babb8b9665f2fcd9fd977830a4e807b",
      "filename": "docs/docs/zh/develop/contributing.md",
      "status": "modified",
      "additions": 34,
      "deletions": 12,
      "changes": 46,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/206a26d0c18aba535bdb2c94d8077f41794aad0e/docs%2Fdocs%2Fzh%2Fdevelop%2Fcontributing.md",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/206a26d0c18aba535bdb2c94d8077f41794aad0e/docs%2Fdocs%2Fzh%2Fdevelop%2Fcontributing.md",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/docs%2Fdocs%2Fzh%2Fdevelop%2Fcontributing.md?ref=206a26d0c18aba535bdb2c94d8077f41794aad0e",
      "patch": "@@ -12,7 +12,7 @@\n git clone https://github.com/ArtalkJS/Artalk.git\n ```\n \n-建议您先 fork 仓库，然后克隆 fork 后的仓库。\n+建议你先 fork 仓库，然后克隆 fork 后的仓库。\n \n 导航到目录：\n \n@@ -53,13 +53,13 @@ cd Artalk\n \n 4. **构建前端代码**：\n \n-   - 当您对前端代码进行更改后，使用 `pnpm build:all` 构建完整的前端程序。\n+   - 当你对前端代码进行更改后，使用 `pnpm build:all` 构建完整的前端程序。\n    - JavaScript 和 CSS 代码将在 `ui/artalk/dist` 目录中找到。\n    - 前端代码由 GitHub Actions 自动部署到 NPM。\n \n 5. **构建后端代码**：\n \n-   - 当您对后端代码进行更改后，注意后端程序会嵌入前端代码。\n+   - 当你对后端代码进行更改后，注意后端程序会嵌入前端代码。\n    - 在构建后端之前，运行 `make build-frontend`（它运行 `scripts/build-frontend.sh`）。这将把嵌入的前端主程序和侧边栏前端程序放入 `/public` 目录。\n    - 然后，使用 `make build` 构建后端程序。\n \n@@ -69,7 +69,7 @@ cd Artalk\n   请参考 [Artalk 插件开发指南](https://artalk.js.org/develop/plugin.html)。\n \n - **Makefile**：\n-  您可以探索 `Makefile` 中的过程和命令。\n+  你可以探索 `Makefile` 中的过程和命令。\n \n - **GitHub 上的自动化 CI**：\n   GitHub 上的自动化 CI 流水线位于 `.github/workflows` 目录中，负责构建前端、后端和 Docker 镜像，发布 Docker 镜像到 Docker Hub，处理 npm 包发布，并创建 GitHub Releases，同时测试前端和后端。\n@@ -116,7 +116,7 @@ Artalk 是一个 monorepo 项目，这意味着所有源代码都在一个仓库\n \n `make dev` 命令会带有调试符号构建后端，这方便使用 GDB 进行调试。\n \n-如果您使用 VSCode，可以使用 `F5` 键（或运行按钮）直接启动调试后端程序。\n+如果你使用 VSCode，可以使用 `F5` 键（或运行按钮）直接启动调试后端程序。\n \n ### 构建后端\n \n@@ -161,6 +161,28 @@ make build-frontend\n \n 更多详细信息，请参考 `scripts/build-frontend.sh` 脚本。\n \n+### 发布前端\n+\n+核心的 Artalk 客户端代码通过 GitHub Actions 自动部署到 NPM。部署过程在 `.github/workflows/build-ui.yml` 文件中定义。\n+\n+如果你在 monorepo 中编写 Artalk 插件，它不会被自动部署。你需要手动发布插件。要发布插件，请首先确保在 `package.json` 文件中更新版本号。然后，运行以下命令：\n+\n+```sh\n+pnpm publish --access public\n+```\n+\n+#### 检查已发布版本\n+\n+`pnpm check:publish` 脚本旨在验证项目中的所有包是否在 npm 上发布了最新版本。它会自动跳过私有包，并允许使用 `-F` 选项进行筛选以检查特定包。\n+\n+检查所有包：\n+\n+```sh\n+pnpm check:publish\n+```\n+\n+这将启动检查存储库中所有公共包的过程，以确保它们在 npm 上是最新的。\n+\n ## Docker 开发\n \n ### 构建 Docker 镜像\n@@ -175,7 +197,7 @@ docker build -t artalk:TAG .\n \n ### 跳过前端构建\n \n-如果您已经在 Docker 容器外部构建了前端，可以跳过容器内的前端构建过程以加快构建速度。使用以下命令：\n+如果你已经在 Docker 容器外部构建了前端，可以跳过容器内的前端构建过程以加快构建速度。使用以下命令：\n \n ```sh\n docker build --build-arg SKIP_FRONTEND_BUILD=true -t artalk:latest .\n@@ -227,7 +249,7 @@ docker build --build-arg SKIP_FRONTEND_BUILD=true -t artalk:latest .\n \n 在 `internal/config/config.go` 文件中，有一个名为 `Config` 的结构体定义，该结构体用于将 yml 文件解析为 Go 结构体。该结构体包含更精确的类型定义。如果需要添加、修改或删除配置项，必须同时修改 `/conf` 目录中的配置文件模板和 `Config` 结构体。\n \n-当您修改配置文件后，请运行以下命令以更新配置数据缓存：\n+当你修改配置文件后，请运行以下命令以更新配置数据缓存：\n \n ```sh\n make update-conf\n@@ -281,18 +303,18 @@ Swagger 定义位于后端代码的 `/server` 目录中。修改 Swagger 定义\n \n ## 翻译 (i18n)\n \n-如果您编写了新功能或进行了修复/重构，请使用以下命令通过解析源代码中的 `i18n.T` 函数调用来增量生成翻译文件：\n+如果你编写了新功能或进行了修复/重构，请使用以下命令通过解析源代码中的 `i18n.T` 函数调用来增量生成翻译文件：\n \n ```sh\n make update-i18n\n ```\n \n-如果您不是程序员，但希望帮助改进翻译，可以直接编辑 `/i18n` 目录中的翻译文件，然后提交 pull 请求。\n+如果你不是程序员，但希望帮助改进翻译，可以直接编辑 `/i18n` 目录中的翻译文件，然后提交 pull 请求。\n \n ## 结尾\n \n-感谢您耐心阅读本指南，并感谢您对 Artalk 的兴趣和支持。我们深知，一个开源项目的成功依赖于每一位开发者的贡献。无论是通过代码、文档、测试还是反馈，您的参与是推动项目持续进步的动力。我们诚挚邀请您加入我们，共同改进和增强 Artalk。\n+感谢你耐心阅读本指南，并感谢你对 Artalk 的兴趣和支持。我们深知，一个开源项目的成功依赖于每一位开发者的贡献。无论是通过代码、文档、测试还是反馈，你的参与是推动项目持续进步的动力。我们诚挚邀请你加入我们，共同改进和增强 Artalk。\n \n-通过合作，我们可以创建一个更加健壮和多功能的平台，造福整个社区。您的独特见解和专业知识是无价的，只有共同努力，我们才能实现显著的进步。无论您是经验丰富的开发者，还是刚刚起步的新手，我们的项目中总有您可以贡献的一席之地。\n+通过合作，我们可以创建一个更加健壮和多功能的平台，造福整个社区。你的独特见解和专业知识是无价的，只有共同努力，我们才能实现显著的进步。无论你是经验丰富的开发者，还是刚刚起步的新手，我们的项目中总有你可以贡献的一席之地。\n \n-如果您有任何问题或需要帮助，请随时在我们的 GitHub 页面上的 issue 部分提问：<https://github.com/ArtalkJS/Artalk/issues>。再次感谢您的支持，我们期待与您合作。\n+如果你有任何问题或需要帮助，请随时在我们的 GitHub 页面上的 issue 部分提问：<https://github.com/ArtalkJS/Artalk/issues>。再次感谢你的支持，我们期待与你合作。"
    },
    {
      "sha": "a7089589da46a29ce11a94ba9c63f02d9a74062d",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/206a26d0c18aba535bdb2c94d8077f41794aad0e/package.json",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/206a26d0c18aba535bdb2c94d8077f41794aad0e/package.json",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/package.json?ref=206a26d0c18aba535bdb2c94d8077f41794aad0e",
      "patch": "@@ -21,6 +21,7 @@\n     \"lint:prettier\": \"prettier --check .\",\n     \"lint\": \"pnpm lint:eslint && pnpm lint:prettier\",\n     \"lint:fix\": \"pnpm lint:eslint --fix && pnpm lint:prettier --write\",\n+    \"check:publish\": \"node scripts/check-npm-publish.mjs\",\n     \"test\": \"pnpm -F artalk test\"\n   },\n   \"devDependencies\": {"
    },
    {
      "sha": "abd018a0e2505299321c91556e5afed109af93da",
      "filename": "scripts/check-npm-publish.mjs",
      "status": "added",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/206a26d0c18aba535bdb2c94d8077f41794aad0e/scripts%2Fcheck-npm-publish.mjs",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/206a26d0c18aba535bdb2c94d8077f41794aad0e/scripts%2Fcheck-npm-publish.mjs",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/scripts%2Fcheck-npm-publish.mjs?ref=206a26d0c18aba535bdb2c94d8077f41794aad0e",
      "patch": "@@ -0,0 +1,132 @@\n+#!/usr/bin/env node\n+\n+import { promises as fs } from 'fs'\n+import path from 'path'\n+import { execSync } from 'child_process'\n+import process from 'process'\n+\n+const __dirname = path.dirname(new URL(import.meta.url).pathname)\n+\n+// Helper to run shell commands\n+const runCommand = (command) => {\n+  try {\n+    return execSync(command, { encoding: 'utf-8' }).trim()\n+  } catch (error) {\n+    return null\n+  }\n+}\n+\n+// Recursively find all directories containing package.json\n+const findNodeProjects = async (dir) => {\n+  const subdirs = await fs.readdir(dir, { withFileTypes: true })\n+  const projects = []\n+\n+  for (const subdir of subdirs) {\n+    const res = path.resolve(dir, subdir.name)\n+    if (subdir.isDirectory()) {\n+      const packageJsonPath = path.join(res, 'package.json')\n+      try {\n+        await fs.access(packageJsonPath)\n+        const packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8')\n+        const packageJson = JSON.parse(packageJsonContent)\n+        if (packageJson.private) continue // ignore private packages\n+        projects.push(res)\n+      } catch (err) {\n+        const nestedProjects = await findNodeProjects(res)\n+        projects.push(...nestedProjects)\n+      }\n+    }\n+  }\n+\n+  return projects\n+}\n+\n+// Compare local version with the latest npm version\n+const checkVersionMismatch = async (projectPath) => {\n+  const packageJsonPath = path.join(projectPath, 'package.json')\n+\n+  try {\n+    const packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8')\n+    const packageJson = JSON.parse(packageJsonContent)\n+    const localVersion = packageJson.version\n+    const packageName = packageJson.name\n+\n+    // Get the latest version from npm using pnpm info\n+    const npmVersion = runCommand(`pnpm info ${packageName} version`)\n+\n+    if (localVersion === npmVersion) {\n+      console.log(`✅ ${packageName} is up to date (${npmVersion})`)\n+    } else {\n+      console.log(`❌ ${packageName} is outdated (local: ${localVersion}, npm: ${npmVersion})`)\n+    }\n+\n+    if (npmVersion && localVersion !== npmVersion) {\n+      return { packageName, localVersion, latestVersion: npmVersion }\n+    }\n+  } catch (error) {\n+    console.error(`Failed to read package.json in ${projectPath}:`, error)\n+  }\n+\n+  return null\n+}\n+\n+// Parse command-line arguments to get the project name if provided\n+const getArgs = () => {\n+  const args = process.argv.slice(2)\n+  let specifiedProject = null\n+\n+  for (let i = 0; i < args.length; i++) {\n+    if (args[i] === '-F' && i + 1 < args.length) {\n+      specifiedProject = args[i + 1]\n+    }\n+  }\n+\n+  return specifiedProject\n+}\n+\n+// Main function to find outdated packages\n+const findOutdatedProjects = async () => {\n+  const specifiedProject = getArgs()\n+  let projects = await findNodeProjects(path.join(__dirname, '../ui'))\n+  console.log(`Found ${projects.length} projects under 'ui' directory.\\n`)\n+  console.log('Checking npm publishes...\\n')\n+\n+  // Filter projects by the specified one, if provided\n+  if (specifiedProject) {\n+    projects = projects.filter((projectPath) => {\n+      const packageJsonPath = path.join(projectPath, 'package.json')\n+      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))\n+      return packageJson.name === specifiedProject\n+    })\n+\n+    if (projects.length === 0) {\n+      console.log(`Project '${specifiedProject}' not found.`)\n+      return\n+    }\n+  }\n+\n+  const outdatedProjects = []\n+\n+  for (const project of projects) {\n+    const result = await checkVersionMismatch(project)\n+    if (result) {\n+      outdatedProjects.push(result)\n+    }\n+  }\n+\n+  console.log('\\n==================================================\\n')\n+\n+  if (outdatedProjects.length === 0) {\n+    console.log('✅ All projects have the latest versions pushed to npm.')\n+  } else {\n+    console.log('Projects with outdated versions:\\n')\n+    outdatedProjects.forEach(({ packageName, localVersion, latestVersion }) => {\n+      console.log(\n+        `❌ ${packageName}: Local version ${localVersion}, NPM version ${latestVersion}`,\n+      )\n+    })\n+    process.exit(1)\n+  }\n+}\n+\n+findOutdatedProjects()"
    }
  ]
}
