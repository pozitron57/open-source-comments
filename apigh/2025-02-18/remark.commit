{
  "sha": "2e00002413c4f3311e5e77e902939823ab2c1bd6",
  "node_id": "C_kwDOBtgov9oAKDJlMDAwMDI0MTNjNGYzMzExZTVlNzdlOTAyOTM5ODIzYWIyYzFiZDY",
  "commit": {
    "author": {
      "name": "dependabot[bot]",
      "email": "49699333+dependabot[bot]@users.noreply.github.com",
      "date": "2025-01-01T11:18:06Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2025-01-02T20:02:42Z"
    },
    "message": "Bump the go-modules-updates group in /backend with 5 updates\n\nBumps the go-modules-updates group in /backend with 5 updates:\n\n| Package | From | To |\n| --- | --- | --- |\n| [github.com/PuerkitoBio/goquery](https://github.com/PuerkitoBio/goquery) | `1.10.0` | `1.10.1` |\n| [github.com/go-chi/chi/v5](https://github.com/go-chi/chi) | `5.1.0` | `5.2.0` |\n| [github.com/go-pkgz/rest](https://github.com/go-pkgz/rest) | `1.19.0` | `1.20.2` |\n| [golang.org/x/image](https://github.com/golang/image) | `0.22.0` | `0.23.0` |\n| [golang.org/x/net](https://github.com/golang/net) | `0.31.0` | `0.33.0` |\n\nUpdates `github.com/PuerkitoBio/goquery` from 1.10.0 to 1.10.1\n- [Release notes](https://github.com/PuerkitoBio/goquery/releases)\n- [Commits](https://github.com/PuerkitoBio/goquery/compare/v1.10.0...v1.10.1)\n\nUpdates `github.com/go-chi/chi/v5` from 5.1.0 to 5.2.0\n- [Release notes](https://github.com/go-chi/chi/releases)\n- [Changelog](https://github.com/go-chi/chi/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/go-chi/chi/compare/v5.1.0...v5.2.0)\n\nUpdates `github.com/go-pkgz/rest` from 1.19.0 to 1.20.2\n- [Release notes](https://github.com/go-pkgz/rest/releases)\n- [Commits](https://github.com/go-pkgz/rest/compare/v1.19.0...v1.20.2)\n\nUpdates `golang.org/x/image` from 0.22.0 to 0.23.0\n- [Commits](https://github.com/golang/image/compare/v0.22.0...v0.23.0)\n\nUpdates `golang.org/x/net` from 0.31.0 to 0.33.0\n- [Commits](https://github.com/golang/net/compare/v0.31.0...v0.33.0)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/PuerkitoBio/goquery\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n  dependency-group: go-modules-updates\n- dependency-name: github.com/go-chi/chi/v5\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n  dependency-group: go-modules-updates\n- dependency-name: github.com/go-pkgz/rest\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n  dependency-group: go-modules-updates\n- dependency-name: golang.org/x/image\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n  dependency-group: go-modules-updates\n- dependency-name: golang.org/x/net\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n  dependency-group: go-modules-updates\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
    "tree": {
      "sha": "bfd8f3502678f41ec28b2e791e4166d3b5cfe909",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/bfd8f3502678f41ec28b2e791e4166d3b5cfe909"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/2e00002413c4f3311e5e77e902939823ab2c1bd6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null,
      "verified_at": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/2e00002413c4f3311e5e77e902939823ab2c1bd6",
  "html_url": "https://github.com/umputun/remark42/commit/2e00002413c4f3311e5e77e902939823ab2c1bd6",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/2e00002413c4f3311e5e77e902939823ab2c1bd6/comments",
  "author": {
    "login": "dependabot[bot]",
    "id": 49699333,
    "node_id": "MDM6Qm90NDk2OTkzMzM=",
    "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dependabot%5Bbot%5D",
    "html_url": "https://github.com/apps/dependabot",
    "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
    "type": "Bot",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "81f70aa287c8e9b80793677069d8f313bfbfb58a",
      "url": "https://api.github.com/repos/umputun/remark42/commits/81f70aa287c8e9b80793677069d8f313bfbfb58a",
      "html_url": "https://github.com/umputun/remark42/commit/81f70aa287c8e9b80793677069d8f313bfbfb58a"
    }
  ],
  "stats": {
    "total": 20852,
    "additions": 19921,
    "deletions": 931
  },
  "files": [
    {
      "sha": "b722c395069022605375d1a85ccb9ed653d4fe47",
      "filename": "backend/_example/memory_store/go.mod",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2F_example%2Fmemory_store%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.mod?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -12,19 +12,19 @@ require (\n \n require (\n \tgithub.com/Depado/bfchroma/v2 v2.0.0 // indirect\n-\tgithub.com/PuerkitoBio/goquery v1.10.0 // indirect\n+\tgithub.com/PuerkitoBio/goquery v1.10.1 // indirect\n \tgithub.com/ajg/form v1.5.1 // indirect\n \tgithub.com/alecthomas/chroma/v2 v2.14.0 // indirect\n-\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n+\tgithub.com/andybalholm/cascadia v1.3.3 // indirect\n \tgithub.com/aymerick/douceur v0.2.0 // indirect\n \tgithub.com/davecgh/go-spew v1.1.1 // indirect\n \tgithub.com/didip/tollbooth/v7 v7.0.2 // indirect\n \tgithub.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f // indirect\n-\tgithub.com/dlclark/regexp2 v1.11.0 // indirect\n-\tgithub.com/go-chi/chi/v5 v5.1.0 // indirect\n+\tgithub.com/dlclark/regexp2 v1.11.4 // indirect\n+\tgithub.com/go-chi/chi/v5 v5.2.0 // indirect\n \tgithub.com/go-chi/render v1.0.3 // indirect\n \tgithub.com/go-pkgz/expirable-cache/v3 v3.0.0 // indirect\n-\tgithub.com/go-pkgz/rest v1.19.0 // indirect\n+\tgithub.com/go-pkgz/rest v1.20.2 // indirect\n \tgithub.com/gorilla/css v1.0.1 // indirect\n \tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n \tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n@@ -33,8 +33,9 @@ require (\n \tgithub.com/rs/xid v1.6.0 // indirect\n \tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n \tgo.etcd.io/bbolt v1.3.11 // indirect\n-\tgolang.org/x/image v0.22.0 // indirect\n-\tgolang.org/x/net v0.31.0 // indirect\n+\tgolang.org/x/crypto v0.31.0 // indirect\n+\tgolang.org/x/image v0.23.0 // indirect\n+\tgolang.org/x/net v0.33.0 // indirect\n \tgolang.org/x/sys v0.28.0 // indirect\n \tgopkg.in/yaml.v3 v3.0.1 // indirect\n )"
    },
    {
      "sha": "39fca3799bf1dfd72b30f001f05bff0abe290b4e",
      "filename": "backend/_example/memory_store/go.sum",
      "status": "modified",
      "additions": 46,
      "deletions": 17,
      "changes": 63,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2F_example%2Fmemory_store%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2F_example%2Fmemory_store%2Fgo.sum?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,7 +1,7 @@\n github.com/Depado/bfchroma/v2 v2.0.0 h1:IRpN9BPkNwEpR6w1ectIcNWOuhDSLx+8f1pn83fzxx8=\n github.com/Depado/bfchroma/v2 v2.0.0/go.mod h1:wFwW/Pw8Tnd0irzgO9Zxtxgzp3aPS8qBWlyadxujxmw=\n-github.com/PuerkitoBio/goquery v1.10.0 h1:6fiXdLuUvYs2OJSvNRqlNPoBm6YABE226xrbavY5Wv4=\n-github.com/PuerkitoBio/goquery v1.10.0/go.mod h1:TjZZl68Q3eGHNBA8CWaxAN7rOU1EbDz3CWuolcO5Yu4=\n+github.com/PuerkitoBio/goquery v1.10.1 h1:Y8JGYUkXWTGRB6Ars3+j3kN0xg1YqqlwvdTV8WTFQcU=\n+github.com/PuerkitoBio/goquery v1.10.1/go.mod h1:IYiHrOMps66ag56LEH7QYDDupKXyo5A8qrjIx3ZtujY=\n github.com/ajg/form v1.5.1 h1:t9c7v8JUKu/XxOGBU0yjNpaMloxGEJhUkqFRq0ibGeU=\n github.com/ajg/form v1.5.1/go.mod h1:uL1WgH+h2mgNtvBq0339dVnzXdBETtL2LeUXaIv25UY=\n github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=\n@@ -10,8 +10,8 @@ github.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46\n github.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=\n github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\n github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\n-github.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=\n-github.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=\n+github.com/andybalholm/cascadia v1.3.3 h1:AG2YHrzJIm4BZ19iwJ/DAua6Btl3IwJX+VI4kktS1LM=\n+github.com/andybalholm/cascadia v1.3.3/go.mod h1:xNd9bqTn98Ln4DwST8/nG+H0yuB8Hmgu1YHNnWw0GeA=\n github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\n github.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n@@ -22,11 +22,11 @@ github.com/didip/tollbooth/v7 v7.0.2 h1:WYEfusYI6g64cN0qbZgekDrYfuYBZjUZd5+RlWi6\n github.com/didip/tollbooth/v7 v7.0.2/go.mod h1:RtRYfEmFGX70+ike5kSndSvLtQ3+F2EAmTI4Un/VXNc=\n github.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f h1:jtKwihcLmUC9BAhoJ9adCUqdSSZcOdH2KL7mPTUm2aw=\n github.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f/go.mod h1:q9C80dnsuVRP2dAskjnXRNWdUJqtGgwG9wNrzt0019s=\n-github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=\n-github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\n+github.com/dlclark/regexp2 v1.11.4 h1:rPYF9/LECdNymJufQKmri9gV604RvvABwgOA8un7yAo=\n+github.com/dlclark/regexp2 v1.11.4/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\n github.com/go-chi/chi/v5 v5.0.7/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n-github.com/go-chi/chi/v5 v5.1.0 h1:acVI1TYaD+hhedDJ3r54HyA6sExp3HfXq7QWEEY/xMw=\n-github.com/go-chi/chi/v5 v5.1.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n+github.com/go-chi/chi/v5 v5.2.0 h1:Aj1EtB0qR2Rdo2dG4O94RIU35w2lvQSj6BRA4+qwFL0=\n+github.com/go-chi/chi/v5 v5.2.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n github.com/go-chi/render v1.0.3 h1:AsXqd2a1/INaIfUSKq3G5uA8weYx20FOsM7uSoCyyt4=\n github.com/go-chi/render v1.0.3/go.mod h1:/gr3hVkmYR0YlEy3LxCuVRFzEu9Ruok+gFqbIofjao0=\n@@ -38,8 +38,9 @@ github.com/go-pkgz/jrpc v0.3.0/go.mod h1:MFtKs75JESiSqVicsQkgN2iDFFuCd3gVT1/vKiw\n github.com/go-pkgz/lgr v0.11.1 h1:hXFhZcznehI6imLhEa379oMOKFz7TQUmisAqb3oLOSM=\n github.com/go-pkgz/lgr v0.11.1/go.mod h1:tgDF4RXQnBfIgJqjgkv0yOeTQ3F1yewWIZkpUhHnAkU=\n github.com/go-pkgz/rest v1.15.6/go.mod h1:KUWAqbDteYGS/CiXftomQsKjtEOifXsJ36Ka0skYbmk=\n-github.com/go-pkgz/rest v1.19.0 h1:FNMi5QX5dDIkuC+/e0r+CWsTuOTwUiWMRSA16Ou+9+A=\n-github.com/go-pkgz/rest v1.19.0/go.mod h1:Po+W6zQzpMPP6XDGLdAN2aW7UKk1IyrLSb48Lp1N3oQ=\n+github.com/go-pkgz/rest v1.20.2 h1:6wYWo85H7xFU09FadVKKc5LKIfIpCStBXJj9F/P4COc=\n+github.com/go-pkgz/rest v1.20.2/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n+github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\n github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\n github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\n github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\n@@ -79,20 +80,34 @@ go.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\n go.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\n-golang.org/x/image v0.22.0 h1:UtK5yLUzilVrkjMAZAZ34DXGpASN8i8pj8g+O+yd10g=\n-golang.org/x/image v0.22.0/go.mod h1:9hPFhljd4zZ1GNSIZJ49sqbp45GKK9t6w+iXvGqZUz4=\n+golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\n+golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\n+golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\n+golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\n+golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\n+golang.org/x/image v0.23.0 h1:HseQ7c2OpPKTPVzNjG5fwJsOTCiiwS4QdsYi5XU6H68=\n+golang.org/x/image v0.23.0/go.mod h1:wJJBTdLfCCf3tiHa1fNxpZmUI4mmoZvwMCPP0ddoNKY=\n golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\n golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n+golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n+golang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\n+golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\n golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\n golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\n golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\n-golang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\n-golang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=\n-golang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=\n+golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\n+golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\n+golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\n+golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\n+golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\n+golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\n+golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n+golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\n golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n@@ -101,22 +116,36 @@ golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBc\n golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n-golang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n+golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\n golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n+golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\n golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\n golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\n-golang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\n+golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\n+golang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\n+golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\n+golang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\n+golang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\n golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\n golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\n+golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\n+golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n+golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n+golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\n golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\n golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\n golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\n+golang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\n+golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\n golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY="
    },
    {
      "sha": "2363259654e01fa7e61dd9ebac5618559bebd8d0",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fgo.mod",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fgo.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.mod?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,20 +6,20 @@ toolchain go1.23.3\n \n require (\n \tgithub.com/Depado/bfchroma/v2 v2.0.0\n-\tgithub.com/PuerkitoBio/goquery v1.10.0\n+\tgithub.com/PuerkitoBio/goquery v1.10.1\n \tgithub.com/alecthomas/chroma/v2 v2.14.0\n \tgithub.com/didip/tollbooth/v7 v7.0.2\n \tgithub.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f\n-\tgithub.com/go-chi/chi/v5 v5.1.0\n+\tgithub.com/go-chi/chi/v5 v5.2.0\n \tgithub.com/go-chi/cors v1.2.1\n \tgithub.com/go-chi/render v1.0.3\n-\tgithub.com/go-pkgz/auth/v2 v2.0.0-20241208183119-88b3a842be9f\n+\tgithub.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba\n \tgithub.com/go-pkgz/jrpc v0.3.0\n \tgithub.com/go-pkgz/lcw/v2 v2.0.0\n \tgithub.com/go-pkgz/lgr v0.11.1\n \tgithub.com/go-pkgz/notify v1.2.0\n \tgithub.com/go-pkgz/repeater v1.2.0\n-\tgithub.com/go-pkgz/rest v1.19.0\n+\tgithub.com/go-pkgz/rest v1.20.2\n \tgithub.com/go-pkgz/syncs v1.3.2\n \tgithub.com/golang-jwt/jwt/v5 v5.2.1\n \tgithub.com/google/uuid v1.6.0\n@@ -35,20 +35,20 @@ require (\n \tgo.etcd.io/bbolt v1.3.11\n \tgo.uber.org/goleak v1.3.0\n \tgolang.org/x/crypto v0.31.0\n-\tgolang.org/x/image v0.22.0\n-\tgolang.org/x/net v0.31.0\n+\tgolang.org/x/image v0.23.0\n+\tgolang.org/x/net v0.33.0\n )\n \n require (\n-\tcloud.google.com/go/compute/metadata v0.5.0 // indirect\n+\tcloud.google.com/go/compute/metadata v0.6.0 // indirect\n \tgithub.com/ajg/form v1.5.1 // indirect\n-\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n+\tgithub.com/andybalholm/cascadia v1.3.3 // indirect\n \tgithub.com/aymerick/douceur v0.2.0 // indirect\n-\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n+\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n \tgithub.com/davecgh/go-spew v1.1.1 // indirect\n \tgithub.com/dghubble/oauth1 v0.7.3 // indirect\n \tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n-\tgithub.com/dlclark/regexp2 v1.11.0 // indirect\n+\tgithub.com/dlclark/regexp2 v1.11.4 // indirect\n \tgithub.com/go-oauth2/oauth2/v4 v4.5.2 // indirect\n \tgithub.com/go-pkgz/email v0.5.0 // indirect\n \tgithub.com/go-pkgz/expirable-cache/v3 v3.0.0 // indirect\n@@ -57,18 +57,18 @@ require (\n \tgithub.com/gorilla/websocket v1.5.3 // indirect\n \tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n \tgithub.com/hashicorp/golang-lru/v2 v2.0.7 // indirect\n-\tgithub.com/klauspost/compress v1.17.9 // indirect\n+\tgithub.com/klauspost/compress v1.17.11 // indirect\n \tgithub.com/montanaflynn/stats v0.7.1 // indirect\n \tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n-\tgithub.com/redis/go-redis/v9 v9.4.0 // indirect\n+\tgithub.com/redis/go-redis/v9 v9.7.0 // indirect\n \tgithub.com/rrivera/identicon v0.0.0-20240116195454-d5ba35832c0d // indirect\n-\tgithub.com/slack-go/slack v0.14.0 // indirect\n+\tgithub.com/slack-go/slack v0.15.0 // indirect\n \tgithub.com/xdg-go/pbkdf2 v1.0.0 // indirect\n \tgithub.com/xdg-go/scram v1.1.2 // indirect\n \tgithub.com/xdg-go/stringprep v1.0.4 // indirect\n \tgithub.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78 // indirect\n-\tgo.mongodb.org/mongo-driver v1.16.0 // indirect\n-\tgolang.org/x/oauth2 v0.21.0 // indirect\n+\tgo.mongodb.org/mongo-driver v1.17.1 // indirect\n+\tgolang.org/x/oauth2 v0.24.0 // indirect\n \tgolang.org/x/sync v0.10.0 // indirect\n \tgolang.org/x/sys v0.28.0 // indirect\n \tgolang.org/x/text v0.21.0 // indirect"
    },
    {
      "sha": "801825598b708290f08a361481ee246de332752b",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 62,
      "deletions": 37,
      "changes": 99,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fgo.sum",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fgo.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fgo.sum?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,10 +1,10 @@\n cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\n-cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=\n-cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=\n+cloud.google.com/go/compute/metadata v0.6.0 h1:A6hENjEsCDtC1k8byVsgwvVcioamEHvZ4j01OwKxG9I=\n+cloud.google.com/go/compute/metadata v0.6.0/go.mod h1:FjyFAW1MW0C203CEOMDTu3Dk1FlqW3Rga40jzHL4hfg=\n github.com/Depado/bfchroma/v2 v2.0.0 h1:IRpN9BPkNwEpR6w1ectIcNWOuhDSLx+8f1pn83fzxx8=\n github.com/Depado/bfchroma/v2 v2.0.0/go.mod h1:wFwW/Pw8Tnd0irzgO9Zxtxgzp3aPS8qBWlyadxujxmw=\n-github.com/PuerkitoBio/goquery v1.10.0 h1:6fiXdLuUvYs2OJSvNRqlNPoBm6YABE226xrbavY5Wv4=\n-github.com/PuerkitoBio/goquery v1.10.0/go.mod h1:TjZZl68Q3eGHNBA8CWaxAN7rOU1EbDz3CWuolcO5Yu4=\n+github.com/PuerkitoBio/goquery v1.10.1 h1:Y8JGYUkXWTGRB6Ars3+j3kN0xg1YqqlwvdTV8WTFQcU=\n+github.com/PuerkitoBio/goquery v1.10.1/go.mod h1:IYiHrOMps66ag56LEH7QYDDupKXyo5A8qrjIx3ZtujY=\n github.com/ajg/form v1.5.1 h1:t9c7v8JUKu/XxOGBU0yjNpaMloxGEJhUkqFRq0ibGeU=\n github.com/ajg/form v1.5.1/go.mod h1:uL1WgH+h2mgNtvBq0339dVnzXdBETtL2LeUXaIv25UY=\n github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=\n@@ -19,16 +19,16 @@ github.com/alicebob/miniredis/v2 v2.31.1 h1:7XAt0uUg3DtwEKW5ZAGa+K7FZV2DdKQo5K/6\n github.com/alicebob/miniredis/v2 v2.31.1/go.mod h1:UB/T2Uztp7MlFSDakaX1sTXUv5CASoprx0wulRT6HBg=\n github.com/andybalholm/brotli v1.0.4 h1:V7DdXeJtZscaqfNuAdSRuRFzuiKlHSC/Zh3zl9qY3JY=\n github.com/andybalholm/brotli v1.0.4/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\n-github.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=\n-github.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=\n+github.com/andybalholm/cascadia v1.3.3 h1:AG2YHrzJIm4BZ19iwJ/DAua6Btl3IwJX+VI4kktS1LM=\n+github.com/andybalholm/cascadia v1.3.3/go.mod h1:xNd9bqTn98Ln4DwST8/nG+H0yuB8Hmgu1YHNnWw0GeA=\n github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\n github.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\n github.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\n github.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\n github.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\n github.com/bsm/gomega v1.27.10/go.mod h1:JyEr/xRbxbtgWNi8tIEVPUYZ5Dzef52k01W3YH0H+O0=\n-github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\n-github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\n+github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\n+github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\n github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\n github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n@@ -41,8 +41,8 @@ github.com/didip/tollbooth/v7 v7.0.2 h1:WYEfusYI6g64cN0qbZgekDrYfuYBZjUZd5+RlWi6\n github.com/didip/tollbooth/v7 v7.0.2/go.mod h1:RtRYfEmFGX70+ike5kSndSvLtQ3+F2EAmTI4Un/VXNc=\n github.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f h1:jtKwihcLmUC9BAhoJ9adCUqdSSZcOdH2KL7mPTUm2aw=\n github.com/didip/tollbooth_chi v0.0.0-20220719025231-d662a7f6928f/go.mod h1:q9C80dnsuVRP2dAskjnXRNWdUJqtGgwG9wNrzt0019s=\n-github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=\n-github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\n+github.com/dlclark/regexp2 v1.11.4 h1:rPYF9/LECdNymJufQKmri9gV604RvvABwgOA8un7yAo=\n+github.com/dlclark/regexp2 v1.11.4/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\n github.com/fasthttp-contrib/websocket v0.0.0-20160511215533-1f3b11f56072/go.mod h1:duJ4Jxv5lDcvg4QuQr0oowTf7dz4/CR8NtyCooz9HL8=\n github.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\n github.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\n@@ -51,17 +51,17 @@ github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4\n github.com/gavv/httpexpect v2.0.0+incompatible h1:1X9kcRshkSKEjNJJxX9Y9mQ5BRfbxU5kORdjhlA1yX8=\n github.com/gavv/httpexpect v2.0.0+incompatible/go.mod h1:x+9tiU1YnrOvnB725RkpoLv1M62hOWzwo5OXotisrKc=\n github.com/go-chi/chi/v5 v5.0.7/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n-github.com/go-chi/chi/v5 v5.1.0 h1:acVI1TYaD+hhedDJ3r54HyA6sExp3HfXq7QWEEY/xMw=\n-github.com/go-chi/chi/v5 v5.1.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n+github.com/go-chi/chi/v5 v5.2.0 h1:Aj1EtB0qR2Rdo2dG4O94RIU35w2lvQSj6BRA4+qwFL0=\n+github.com/go-chi/chi/v5 v5.2.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\n github.com/go-chi/cors v1.2.1 h1:xEC8UT3Rlp2QuWNEr4Fs/c2EAGVKBwy/1vHx3bppil4=\n github.com/go-chi/cors v1.2.1/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=\n github.com/go-chi/render v1.0.1/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n github.com/go-chi/render v1.0.3 h1:AsXqd2a1/INaIfUSKq3G5uA8weYx20FOsM7uSoCyyt4=\n github.com/go-chi/render v1.0.3/go.mod h1:/gr3hVkmYR0YlEy3LxCuVRFzEu9Ruok+gFqbIofjao0=\n github.com/go-oauth2/oauth2/v4 v4.5.2 h1:CuZhD3lhGuI6aNLyUbRHXsgG2RwGRBOuCBfd4WQKqBQ=\n github.com/go-oauth2/oauth2/v4 v4.5.2/go.mod h1:wk/2uLImWIa9VVQDgxz99H2GDbhmfi/9/Xr+GvkSUSQ=\n-github.com/go-pkgz/auth/v2 v2.0.0-20241208183119-88b3a842be9f h1:CDG4Xwk8oq5jFzBtm81vAoB38PgXeUndiSQN/G2vnPA=\n-github.com/go-pkgz/auth/v2 v2.0.0-20241208183119-88b3a842be9f/go.mod h1:aepr8uqw5PKidS+h2sJDvTWbqzyveHDyKNEAznDb3L8=\n+github.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba h1:TqoOfThmmcoiSAs/J+y0/3hwS/YRhzR2XepO147jR+I=\n+github.com/go-pkgz/auth/v2 v2.0.0-20241221172452-ba01339372ba/go.mod h1:VkvKMNbRJz36sdTL1F75khRqpl4yux4u2CujFzCZOeY=\n github.com/go-pkgz/email v0.5.0 h1:fdtMDGJ8NwyBACLR0LYHaCIK/OeUwZHMhH7Q0+oty9U=\n github.com/go-pkgz/email v0.5.0/go.mod h1:BdxglsQnymzhfdbnncEE72a6DrucZHy6I+42LK2jLEc=\n github.com/go-pkgz/expirable-cache v0.1.0/go.mod h1:GTrEl0X+q0mPNqN6dtcQXksACnzCBQ5k/k1SwXJsZKs=\n@@ -78,8 +78,8 @@ github.com/go-pkgz/notify v1.2.0/go.mod h1:BTHj9ly7xZpaxg91lBdxCxSmkpVQ9R6q5QviX\n github.com/go-pkgz/repeater v1.2.0 h1:oJFvjyKdTDd5RCzpzxlzYIZFFj6Zfl17rE1aUfu6UjQ=\n github.com/go-pkgz/repeater v1.2.0/go.mod h1:vypP6xamA53MFmafnGUucqOmALKk36xgKu2hSG73LHM=\n github.com/go-pkgz/rest v1.15.6/go.mod h1:KUWAqbDteYGS/CiXftomQsKjtEOifXsJ36Ka0skYbmk=\n-github.com/go-pkgz/rest v1.19.0 h1:FNMi5QX5dDIkuC+/e0r+CWsTuOTwUiWMRSA16Ou+9+A=\n-github.com/go-pkgz/rest v1.19.0/go.mod h1:Po+W6zQzpMPP6XDGLdAN2aW7UKk1IyrLSb48Lp1N3oQ=\n+github.com/go-pkgz/rest v1.20.2 h1:6wYWo85H7xFU09FadVKKc5LKIfIpCStBXJj9F/P4COc=\n+github.com/go-pkgz/rest v1.20.2/go.mod h1:NC2xNN/y1rIs0PY13FowKoH8rk9RhJNJ0tTbkBg8Yks=\n github.com/go-pkgz/syncs v1.3.2 h1:gmioASlJNy3gNosPlgvWOM2QP0Hdjzn2u+/sUShgd8E=\n github.com/go-pkgz/syncs v1.3.2/go.mod h1:qjgzpp7OpuhDf7BWsW/FHCu9DLjE32NPy6/vXAXT/Cw=\n github.com/go-session/session v3.1.2+incompatible/go.mod h1:8B3iivBQjrz/JtC68Np2T1yBBLxTan3mn/3OM0CyRt0=\n@@ -136,8 +136,8 @@ github.com/jessevdk/go-flags v1.6.1/go.mod h1:Mk8T1hIAWpOiJiHa9rJASDK2UGWji0EuPG\n github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\n github.com/k0kubun/colorstring v0.0.0-20150214042306-9440f1994b88/go.mod h1:3w7q1U84EfirKl04SVQ/s7nPm1ZPhiXd34z40TNz36k=\n github.com/klauspost/compress v1.15.0/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\n-github.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\n-github.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\n+github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\n+github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\n github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\n github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\n github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\n@@ -164,8 +164,8 @@ github.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1y\n github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n-github.com/redis/go-redis/v9 v9.4.0 h1:Yzoz33UZw9I/mFhx4MNrB6Fk+XHO1VukNcCa1+lwyKk=\n-github.com/redis/go-redis/v9 v9.4.0/go.mod h1:hdY0cQFCN4fnSYT6TkisLufl/4W5UIXyv0b/CLO2V2M=\n+github.com/redis/go-redis/v9 v9.7.0 h1:HhLSs+B6O021gwzl+locl0zEDnyNkxMtf/Z3NNBMa9E=\n+github.com/redis/go-redis/v9 v9.7.0/go.mod h1:f6zhXITC7JUJIlPEiBOTXxJgPLdZcA93GewI7inzyWw=\n github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\n github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\n github.com/rrivera/identicon v0.0.0-20240116195454-d5ba35832c0d h1:l3+2LWCbVxn5itfvXAfH9n4YL9jh8l1g5zcncbIc1cs=\n@@ -179,8 +179,8 @@ github.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\n github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\n github.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e h1:MRM5ITcdelLK2j1vwZ3Je0FKVCfqOLp5zO6trqMLYs0=\n github.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e/go.mod h1:XV66xRDqSt+GTGFMVlhk3ULuV0y9ZmzeVGR4mloJI3M=\n-github.com/slack-go/slack v0.14.0 h1:6c0UTfbRnvRssZUsZ2qe0Iu07VAMPjRqOa6oX8ewF4k=\n-github.com/slack-go/slack v0.14.0/go.mod h1:hlGi5oXA+Gt+yWTPP0plCdRKmjsDxecdHxYQdlMQKOw=\n+github.com/slack-go/slack v0.15.0 h1:LE2lj2y9vqqiOf+qIIy0GvEoxgF1N5yLGZffmEZykt0=\n+github.com/slack-go/slack v0.15.0/go.mod h1:hlGi5oXA+Gt+yWTPP0plCdRKmjsDxecdHxYQdlMQKOw=\n github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\n github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\n github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n@@ -198,12 +198,12 @@ github.com/tidwall/btree v0.0.0-20191029221954-400434d76274/go.mod h1:huei1BkDWJ\n github.com/tidwall/btree v1.7.0 h1:L1fkJH/AuEh5zBnnBbmTwQ5Lt+bRJ5A8EWecslvo9iI=\n github.com/tidwall/btree v1.7.0/go.mod h1:twD9XRA5jj9VUQGELzDO4HPQTNJsoWWfYEL+EUQ2cKY=\n github.com/tidwall/buntdb v1.1.2/go.mod h1:xAzi36Hir4FarpSHyfuZ6JzPJdjRZ8QlLZSntE2mqlI=\n-github.com/tidwall/buntdb v1.3.1 h1:HKoDF01/aBhl9RjYtbaLnvX9/OuenwvQiC3OP1CcL4o=\n-github.com/tidwall/buntdb v1.3.1/go.mod h1:lZZrZUWzlyDJKlLQ6DKAy53LnG7m5kHyrEHvvcDmBpU=\n+github.com/tidwall/buntdb v1.3.2 h1:qd+IpdEGs0pZci37G4jF51+fSKlkuUTMXuHhXL1AkKg=\n+github.com/tidwall/buntdb v1.3.2/go.mod h1:lZZrZUWzlyDJKlLQ6DKAy53LnG7m5kHyrEHvvcDmBpU=\n github.com/tidwall/gjson v1.3.4/go.mod h1:P256ACg0Mn+j1RXIDXoss50DeIABTYK1PULOJHhxOls=\n github.com/tidwall/gjson v1.12.1/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\n-github.com/tidwall/gjson v1.17.1 h1:wlYEnwqAHgzmhNUFfw7Xalt2JzQvsMx2Se4PcoFCT/U=\n-github.com/tidwall/gjson v1.17.1/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\n+github.com/tidwall/gjson v1.18.0 h1:FIDeeyB800efLX89e5a8Y0BNH+LOngJyGrIWxG2FKQY=\n+github.com/tidwall/gjson v1.18.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\n github.com/tidwall/grect v0.0.0-20161006141115-ba9a043346eb/go.mod h1:lKYYLFIr9OIgdgrtgkZ9zgRxRdvPYsExnYBsEAd8W5M=\n github.com/tidwall/grect v0.1.4 h1:dA3oIgNgWdSspFzn1kS4S/RDpZFLrIxAZOdJKjYapOg=\n github.com/tidwall/grect v0.1.4/go.mod h1:9FBsaYRaR0Tcy4UwefBX/UDcDcDy9V5jUcxHzv2jd5Q=\n@@ -251,19 +251,25 @@ github.com/yuin/gopher-lua v1.1.1 h1:kYKnWBjvbNP4XLT3+bPEwAXJx262OhaHDWDVOPjL46M\n github.com/yuin/gopher-lua v1.1.1/go.mod h1:GBR0iDaNXjAgGg9zfCvksxSRnQx76gclCIb7kdAd1Pw=\n go.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\n go.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\n-go.mongodb.org/mongo-driver v1.16.0 h1:tpRsfBJMROVHKpdGyc1BBEzzjDUWjItxbVSZ8Ls4BQ4=\n-go.mongodb.org/mongo-driver v1.16.0/go.mod h1:oB6AhJQvFQL4LEHyXi6aJzQJtBiTQHiAd83l0GdFaiw=\n+go.mongodb.org/mongo-driver v1.17.1 h1:Wic5cJIwJgSpBhe3lx3+/RybR5PiYRMpVFgO7cOHyIM=\n+go.mongodb.org/mongo-driver v1.17.1/go.mod h1:wwWm/+BuOddhcq3n68LKRmgk2wXzmF6s0SFOa0GINL4=\n go.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\n go.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\n golang.org/x/crypto v0.0.0-20220214200702-86341886e292/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\n+golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\n+golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\n+golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\n golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\n golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\n-golang.org/x/image v0.22.0 h1:UtK5yLUzilVrkjMAZAZ34DXGpASN8i8pj8g+O+yd10g=\n-golang.org/x/image v0.22.0/go.mod h1:9hPFhljd4zZ1GNSIZJ49sqbp45GKK9t6w+iXvGqZUz4=\n+golang.org/x/image v0.23.0 h1:HseQ7c2OpPKTPVzNjG5fwJsOTCiiwS4QdsYi5XU6H68=\n+golang.org/x/image v0.23.0/go.mod h1:wJJBTdLfCCf3tiHa1fNxpZmUI4mmoZvwMCPP0ddoNKY=\n golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\n golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n+golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\n+golang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\n+golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\n golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n@@ -276,17 +282,23 @@ golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qx\n golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\n golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\n golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\n-golang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\n-golang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=\n-golang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=\n+golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\n+golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\n+golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\n+golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\n+golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\n+golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\n golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n-golang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=\n-golang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\n+golang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\n+golang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\n+golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n+golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\n golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\n golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n@@ -306,13 +318,21 @@ golang.org/x/sys v0.0.0-20220227234510-4e6760a101f9/go.mod h1:oPkhp1MJrh7nUepCBc\n golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n-golang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n+golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\n golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n+golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\n golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\n golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\n golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\n-golang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\n+golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\n+golang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\n+golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\n+golang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\n+golang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\n golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\n@@ -321,13 +341,18 @@ golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\n golang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\n golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\n golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\n+golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\n+golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n+golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\n golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\n golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\n golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\n golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\n golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\n golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\n golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\n+golang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\n+golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\n golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4="
    },
    {
      "sha": "bcfb5d81659140e89081670e4e7fde833e4fff55",
      "filename": "backend/vendor/cloud.google.com/go/compute/metadata/CHANGES.md",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2FCHANGES.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2FCHANGES.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2FCHANGES.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,5 +1,26 @@\n # Changes\n \n+## [0.6.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.2...compute/metadata/v0.6.0) (2024-12-13)\n+\n+\n+### Features\n+\n+* **compute/metadata:** Add debug logging ([#11078](https://github.com/googleapis/google-cloud-go/issues/11078)) ([a816814](https://github.com/googleapis/google-cloud-go/commit/a81681463906e4473570a2f426eb0dc2de64e53f))\n+\n+## [0.5.2](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.1...compute/metadata/v0.5.2) (2024-09-20)\n+\n+\n+### Bug Fixes\n+\n+* **compute/metadata:** Close Response Body for failed request ([#10891](https://github.com/googleapis/google-cloud-go/issues/10891)) ([e91d45e](https://github.com/googleapis/google-cloud-go/commit/e91d45e4757a9e354114509ba9800085d9e0ff1f))\n+\n+## [0.5.1](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.0...compute/metadata/v0.5.1) (2024-09-12)\n+\n+\n+### Bug Fixes\n+\n+* **compute/metadata:** Check error chain for retryable error ([#10840](https://github.com/googleapis/google-cloud-go/issues/10840)) ([2bdedef](https://github.com/googleapis/google-cloud-go/commit/2bdedeff621b223d63cebc4355fcf83bc68412cd))\n+\n ## [0.5.0](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.4.0...compute/metadata/v0.5.0) (2024-07-10)\n \n "
    },
    {
      "sha": "8ec673b88230c01377c5f579494b15e9d0ca63cf",
      "filename": "backend/vendor/cloud.google.com/go/compute/metadata/log.go",
      "status": "added",
      "additions": 149,
      "deletions": 0,
      "changes": 149,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Flog.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Flog.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Flog.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2024 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package metadata\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"log/slog\"\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// Code below this point is copied from github.com/googleapis/gax-go/v2/internallog\n+// to avoid the dependency. The compute/metadata module is used by too many\n+// non-client library modules that can't justify the dependency.\n+\n+// The handler returned if logging is not enabled.\n+type noOpHandler struct{}\n+\n+func (h noOpHandler) Enabled(_ context.Context, _ slog.Level) bool {\n+\treturn false\n+}\n+\n+func (h noOpHandler) Handle(_ context.Context, _ slog.Record) error {\n+\treturn nil\n+}\n+\n+func (h noOpHandler) WithAttrs(_ []slog.Attr) slog.Handler {\n+\treturn h\n+}\n+\n+func (h noOpHandler) WithGroup(_ string) slog.Handler {\n+\treturn h\n+}\n+\n+// httpRequest returns a lazily evaluated [slog.LogValuer] for a\n+// [http.Request] and the associated body.\n+func httpRequest(req *http.Request, body []byte) slog.LogValuer {\n+\treturn &request{\n+\t\treq:     req,\n+\t\tpayload: body,\n+\t}\n+}\n+\n+type request struct {\n+\treq     *http.Request\n+\tpayload []byte\n+}\n+\n+func (r *request) LogValue() slog.Value {\n+\tif r == nil || r.req == nil {\n+\t\treturn slog.Value{}\n+\t}\n+\tvar groupValueAttrs []slog.Attr\n+\tgroupValueAttrs = append(groupValueAttrs, slog.String(\"method\", r.req.Method))\n+\tgroupValueAttrs = append(groupValueAttrs, slog.String(\"url\", r.req.URL.String()))\n+\n+\tvar headerAttr []slog.Attr\n+\tfor k, val := range r.req.Header {\n+\t\theaderAttr = append(headerAttr, slog.String(k, strings.Join(val, \",\")))\n+\t}\n+\tif len(headerAttr) > 0 {\n+\t\tgroupValueAttrs = append(groupValueAttrs, slog.Any(\"headers\", headerAttr))\n+\t}\n+\n+\tif len(r.payload) > 0 {\n+\t\tif attr, ok := processPayload(r.payload); ok {\n+\t\t\tgroupValueAttrs = append(groupValueAttrs, attr)\n+\t\t}\n+\t}\n+\treturn slog.GroupValue(groupValueAttrs...)\n+}\n+\n+// httpResponse returns a lazily evaluated [slog.LogValuer] for a\n+// [http.Response] and the associated body.\n+func httpResponse(resp *http.Response, body []byte) slog.LogValuer {\n+\treturn &response{\n+\t\tresp:    resp,\n+\t\tpayload: body,\n+\t}\n+}\n+\n+type response struct {\n+\tresp    *http.Response\n+\tpayload []byte\n+}\n+\n+func (r *response) LogValue() slog.Value {\n+\tif r == nil {\n+\t\treturn slog.Value{}\n+\t}\n+\tvar groupValueAttrs []slog.Attr\n+\tgroupValueAttrs = append(groupValueAttrs, slog.String(\"status\", fmt.Sprint(r.resp.StatusCode)))\n+\n+\tvar headerAttr []slog.Attr\n+\tfor k, val := range r.resp.Header {\n+\t\theaderAttr = append(headerAttr, slog.String(k, strings.Join(val, \",\")))\n+\t}\n+\tif len(headerAttr) > 0 {\n+\t\tgroupValueAttrs = append(groupValueAttrs, slog.Any(\"headers\", headerAttr))\n+\t}\n+\n+\tif len(r.payload) > 0 {\n+\t\tif attr, ok := processPayload(r.payload); ok {\n+\t\t\tgroupValueAttrs = append(groupValueAttrs, attr)\n+\t\t}\n+\t}\n+\treturn slog.GroupValue(groupValueAttrs...)\n+}\n+\n+func processPayload(payload []byte) (slog.Attr, bool) {\n+\tpeekChar := payload[0]\n+\tif peekChar == '{' {\n+\t\t// JSON object\n+\t\tvar m map[string]any\n+\t\tif err := json.Unmarshal(payload, &m); err == nil {\n+\t\t\treturn slog.Any(\"payload\", m), true\n+\t\t}\n+\t} else if peekChar == '[' {\n+\t\t// JSON array\n+\t\tvar m []any\n+\t\tif err := json.Unmarshal(payload, &m); err == nil {\n+\t\t\treturn slog.Any(\"payload\", m), true\n+\t\t}\n+\t} else {\n+\t\t// Everything else\n+\t\tbuf := &bytes.Buffer{}\n+\t\tif err := json.Compact(buf, payload); err != nil {\n+\t\t\t// Write raw payload incase of error\n+\t\t\tbuf.Write(payload)\n+\t\t}\n+\t\treturn slog.String(\"payload\", buf.String()), true\n+\t}\n+\treturn slog.Attr{}, false\n+}"
    },
    {
      "sha": "4c18a383a439c433c64b7c621cbbbfbd5f6a353c",
      "filename": "backend/vendor/cloud.google.com/go/compute/metadata/metadata.go",
      "status": "modified",
      "additions": 47,
      "deletions": 11,
      "changes": 58,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fmetadata.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fmetadata.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fmetadata.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,6 +24,7 @@ import (\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n+\t\"log/slog\"\n \t\"net\"\n \t\"net/http\"\n \t\"net/url\"\n@@ -60,7 +61,10 @@ var (\n \tinstID  = &cachedValue{k: \"instance/id\", trim: true}\n )\n \n-var defaultClient = &Client{hc: newDefaultHTTPClient()}\n+var defaultClient = &Client{\n+\thc:     newDefaultHTTPClient(),\n+\tlogger: slog.New(noOpHandler{}),\n+}\n \n func newDefaultHTTPClient() *http.Client {\n \treturn &http.Client{\n@@ -408,17 +412,42 @@ func strsContains(ss []string, s string) bool {\n \n // A Client provides metadata.\n type Client struct {\n-\thc *http.Client\n+\thc     *http.Client\n+\tlogger *slog.Logger\n+}\n+\n+// Options for configuring a [Client].\n+type Options struct {\n+\t// Client is the HTTP client used to make requests. Optional.\n+\tClient *http.Client\n+\t// Logger is used to log information about HTTP request and responses.\n+\t// If not provided, nothing will be logged. Optional.\n+\tLogger *slog.Logger\n }\n \n // NewClient returns a Client that can be used to fetch metadata.\n // Returns the client that uses the specified http.Client for HTTP requests.\n // If nil is specified, returns the default client.\n func NewClient(c *http.Client) *Client {\n-\tif c == nil {\n+\treturn NewWithOptions(&Options{\n+\t\tClient: c,\n+\t})\n+}\n+\n+// NewWithOptions returns a Client that is configured with the provided Options.\n+func NewWithOptions(opts *Options) *Client {\n+\tif opts == nil {\n \t\treturn defaultClient\n \t}\n-\treturn &Client{hc: c}\n+\tclient := opts.Client\n+\tif client == nil {\n+\t\tclient = newDefaultHTTPClient()\n+\t}\n+\tlogger := opts.Logger\n+\tif logger == nil {\n+\t\tlogger = slog.New(noOpHandler{})\n+\t}\n+\treturn &Client{hc: client, logger: logger}\n }\n \n // getETag returns a value from the metadata service as well as the associated ETag.\n@@ -448,14 +477,26 @@ func (c *Client) getETag(ctx context.Context, suffix string) (value, etag string\n \treq.Header.Set(\"User-Agent\", userAgent)\n \tvar res *http.Response\n \tvar reqErr error\n+\tvar body []byte\n \tretryer := newRetryer()\n \tfor {\n+\t\tc.logger.DebugContext(ctx, \"metadata request\", \"request\", httpRequest(req, nil))\n \t\tres, reqErr = c.hc.Do(req)\n \t\tvar code int\n \t\tif res != nil {\n \t\t\tcode = res.StatusCode\n+\t\t\tbody, err = io.ReadAll(res.Body)\n+\t\t\tif err != nil {\n+\t\t\t\tres.Body.Close()\n+\t\t\t\treturn \"\", \"\", err\n+\t\t\t}\n+\t\t\tc.logger.DebugContext(ctx, \"metadata response\", \"response\", httpResponse(res, body))\n+\t\t\tres.Body.Close()\n \t\t}\n \t\tif delay, shouldRetry := retryer.Retry(code, reqErr); shouldRetry {\n+\t\t\tif res != nil && res.Body != nil {\n+\t\t\t\tres.Body.Close()\n+\t\t\t}\n \t\t\tif err := sleep(ctx, delay); err != nil {\n \t\t\t\treturn \"\", \"\", err\n \t\t\t}\n@@ -466,18 +507,13 @@ func (c *Client) getETag(ctx context.Context, suffix string) (value, etag string\n \tif reqErr != nil {\n \t\treturn \"\", \"\", reqErr\n \t}\n-\tdefer res.Body.Close()\n \tif res.StatusCode == http.StatusNotFound {\n \t\treturn \"\", \"\", NotDefinedError(suffix)\n \t}\n-\tall, err := io.ReadAll(res.Body)\n-\tif err != nil {\n-\t\treturn \"\", \"\", err\n-\t}\n \tif res.StatusCode != 200 {\n-\t\treturn \"\", \"\", &Error{Code: res.StatusCode, Message: string(all)}\n+\t\treturn \"\", \"\", &Error{Code: res.StatusCode, Message: string(body)}\n \t}\n-\treturn string(all), res.Header.Get(\"Etag\"), nil\n+\treturn string(body), res.Header.Get(\"Etag\"), nil\n }\n \n // Get returns a value from the metadata service."
    },
    {
      "sha": "2e53f012300903731129e808c36a45b086fef642",
      "filename": "backend/vendor/cloud.google.com/go/compute/metadata/retry_linux.go",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fretry_linux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fretry_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fcloud.google.com%2Fgo%2Fcompute%2Fmetadata%2Fretry_linux.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -17,10 +17,15 @@\n \n package metadata\n \n-import \"syscall\"\n+import (\n+\t\"errors\"\n+\t\"syscall\"\n+)\n \n func init() {\n \t// Initialize syscallRetryable to return true on transient socket-level\n \t// errors. These errors are specific to Linux.\n-\tsyscallRetryable = func(err error) bool { return err == syscall.ECONNRESET || err == syscall.ECONNREFUSED }\n+\tsyscallRetryable = func(err error) bool {\n+\t\treturn errors.Is(err, syscall.ECONNRESET) || errors.Is(err, syscall.ECONNREFUSED)\n+\t}\n }"
    },
    {
      "sha": "29beb2875db2725ca82d48cc9d1d6ff119572379",
      "filename": "backend/vendor/github.com/PuerkitoBio/goquery/README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2FPuerkitoBio%2Fgoquery%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2FPuerkitoBio%2Fgoquery%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2FPuerkitoBio%2Fgoquery%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -46,6 +46,7 @@ Ongoing goquery development is tested on the latest 2 versions of Go.\n \n **Note that goquery's API is now stable, and will not break.**\n \n+*    **2024-12-26 (v1.10.1)** : Update `go.mod` dependencies.\n *    **2024-09-06 (v1.10.0)** : Add `EachIter` which provides an iterator that can be used in `for..range` loops on the `*Selection` object. **goquery now requires Go version 1.23+** (thanks [@amikai](https://github.com/amikai)).\n *    **2024-09-06 (v1.9.3)** : Update `go.mod` dependencies.\n *    **2024-04-29 (v1.9.2)** : Update `go.mod` dependencies."
    },
    {
      "sha": "33c88305c46ed4b60ee491f133d7876f52fe08c7",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -70,3 +70,5 @@ benchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n - [VictoriaMetrics](https://github.com/VictoriaMetrics/VictoriaMetrics)\n - [FreeCache](https://github.com/coocood/freecache)\n - [FastCache](https://github.com/VictoriaMetrics/fastcache)\n+- [Ristretto](https://github.com/dgraph-io/ristretto)\n+- [Badger](https://github.com/dgraph-io/badger)"
    },
    {
      "sha": "78bddf1ceed747148b3b9ef8113fcf3296fedb60",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/xxhash.go",
      "status": "modified",
      "additions": 22,
      "deletions": 7,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -19,10 +19,13 @@ const (\n // Store the primes in an array as well.\n //\n // The consts are used when possible in Go code to avoid MOVs but we need a\n-// contiguous array of the assembly code.\n+// contiguous array for the assembly code.\n var primes = [...]uint64{prime1, prime2, prime3, prime4, prime5}\n \n // Digest implements hash.Hash64.\n+//\n+// Note that a zero-valued Digest is not ready to receive writes.\n+// Call Reset or create a Digest using New before calling other methods.\n type Digest struct {\n \tv1    uint64\n \tv2    uint64\n@@ -33,19 +36,31 @@ type Digest struct {\n \tn     int // how much of mem is used\n }\n \n-// New creates a new Digest that computes the 64-bit xxHash algorithm.\n+// New creates a new Digest with a zero seed.\n func New() *Digest {\n+\treturn NewWithSeed(0)\n+}\n+\n+// NewWithSeed creates a new Digest with the given seed.\n+func NewWithSeed(seed uint64) *Digest {\n \tvar d Digest\n-\td.Reset()\n+\td.ResetWithSeed(seed)\n \treturn &d\n }\n \n // Reset clears the Digest's state so that it can be reused.\n+// It uses a seed value of zero.\n func (d *Digest) Reset() {\n-\td.v1 = primes[0] + prime2\n-\td.v2 = prime2\n-\td.v3 = 0\n-\td.v4 = -primes[0]\n+\td.ResetWithSeed(0)\n+}\n+\n+// ResetWithSeed clears the Digest's state so that it can be reused.\n+// It uses the given seed to initialize the state.\n+func (d *Digest) ResetWithSeed(seed uint64) {\n+\td.v1 = seed + prime1 + prime2\n+\td.v2 = seed + prime2\n+\td.v3 = seed\n+\td.v4 = seed - prime1\n \td.total = 0\n \td.n = 0\n }"
    },
    {
      "sha": "78f95f2561037eacabadb2590525338b5bf0498c",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/xxhash_asm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_asm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_asm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_asm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,7 +6,7 @@\n \n package xxhash\n \n-// Sum64 computes the 64-bit xxHash digest of b.\n+// Sum64 computes the 64-bit xxHash digest of b with a zero seed.\n //\n //go:noescape\n func Sum64(b []byte) uint64"
    },
    {
      "sha": "118e49e819e00ab3279057bb958df003ddce2380",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/xxhash_other.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_other.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_other.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_other.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -3,7 +3,7 @@\n \n package xxhash\n \n-// Sum64 computes the 64-bit xxHash digest of b.\n+// Sum64 computes the 64-bit xxHash digest of b with a zero seed.\n func Sum64(b []byte) uint64 {\n \t// A simpler version would be\n \t//   d := New()"
    },
    {
      "sha": "05f5e7dfe7b72bbb0edb82b03151e58cddcc3f1b",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/xxhash_safe.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_safe.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_safe.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_safe.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -5,7 +5,7 @@\n \n package xxhash\n \n-// Sum64String computes the 64-bit xxHash digest of s.\n+// Sum64String computes the 64-bit xxHash digest of s with a zero seed.\n func Sum64String(s string) uint64 {\n \treturn Sum64([]byte(s))\n }"
    },
    {
      "sha": "cf9d42aed536922c3a113a5b1fa475acb98d592f",
      "filename": "backend/vendor/github.com/cespare/xxhash/v2/xxhash_unsafe.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_unsafe.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_unsafe.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fcespare%2Fxxhash%2Fv2%2Fxxhash_unsafe.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -33,7 +33,7 @@ import (\n //\n // See https://github.com/golang/go/issues/42739 for discussion.\n \n-// Sum64String computes the 64-bit xxHash digest of s.\n+// Sum64String computes the 64-bit xxHash digest of s with a zero seed.\n // It may be faster than Sum64([]byte(s)) by avoiding a copy.\n func Sum64String(s string) uint64 {\n \tb := *(*[]byte)(unsafe.Pointer(&sliceHeader{s, len(s)}))"
    },
    {
      "sha": "9cbc1d8d0aa66ebbb9d89f36bd052c59708bdda8",
      "filename": "backend/vendor/github.com/dlclark/regexp2/README.md",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -4,10 +4,17 @@ Regexp2 is a feature-rich RegExp engine for Go.  It doesn't have constant time g\n ## Basis of the engine\n The engine is ported from the .NET framework's System.Text.RegularExpressions.Regex engine.  That engine was open sourced in 2015 under the MIT license.  There are some fundamental differences between .NET strings and Go strings that required a bit of borrowing from the Go framework regex engine as well.  I cleaned up a couple of the dirtier bits during the port (regexcharclass.cs was terrible), but the parse tree, code emmitted, and therefore patterns matched should be identical.\n \n+## New Code Generation\n+For extra performance use `regexp2` with [`regexp2cg`](https://github.com/dlclark/regexp2cg). It is a code generation utility for `regexp2` and you can likely improve your regexp runtime performance by 3-10x in hot code paths. As always you should benchmark your specifics to confirm the results. Give it a try!\n+\n ## Installing\n This is a go-gettable library, so install is easy:\n \n-    go get github.com/dlclark/regexp2/...\n+    go get github.com/dlclark/regexp2\n+\n+To use the new Code Generation (while it's in beta) you'll need to use the `code_gen` branch:\n+\n+    go get github.com/dlclark/regexp2@code_gen\n \n ## Usage\n Usage is similar to the Go `regexp` package.  Just like in `regexp`, you start by converting a regex into a state machine via the `Compile` or `MustCompile` methods.  They ultimately do the same thing, but `MustCompile` will panic if the regex is invalid.  You can then use the provided `Regexp` struct to find matches repeatedly.  A `Regexp` struct is safe to use across goroutines."
    },
    {
      "sha": "759cf8ccf48bf7ebcdabe655b0ae3def7c403421",
      "filename": "backend/vendor/github.com/dlclark/regexp2/match.go",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fmatch.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fmatch.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fmatch.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,8 +6,9 @@ import (\n )\n \n // Match is a single regex result match that contains groups and repeated captures\n-// \t-Groups\n-//    -Capture\n+//\n+//\t\t-Groups\n+//\t   -Capture\n type Match struct {\n \tGroup //embeded group 0\n \n@@ -43,10 +44,10 @@ type Group struct {\n type Capture struct {\n \t// the original string\n \ttext []rune\n-\t// the position in the original string where the first character of\n-\t// captured substring was found.\n+\t// Index is the position in the underlying rune slice where the first character of\n+\t// captured substring was found. Even if you pass in a string this will be in Runes.\n \tIndex int\n-\t// the length of the captured substring.\n+\t// Length is the number of runes in the captured substring.\n \tLength int\n }\n \n@@ -187,7 +188,8 @@ func (m *Match) addMatch(c, start, l int) {\n }\n \n // Nonpublic builder: Add a capture to balance the specified group.  This is used by the\n-//                     balanced match construct. (?<foo-foo2>...)\n+//\n+//\tbalanced match construct. (?<foo-foo2>...)\n //\n // If there were no such thing as backtracking, this would be as simple as calling RemoveMatch(c).\n // However, since we have backtracking, we need to keep track of everything."
    },
    {
      "sha": "56759f1474e6d4b22f9d4bfd6e28f590acf3e47c",
      "filename": "backend/vendor/github.com/dlclark/regexp2/runner.go",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Frunner.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Frunner.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Frunner.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1604,6 +1604,10 @@ func (re *Regexp) getRunner() *runner {\n // run using re.  (The cache empties when re gets garbage collected.)\n func (re *Regexp) putRunner(r *runner) {\n \tre.muRun.Lock()\n+\tr.runtext = nil\n+\tif r.runmatch != nil {\n+\t\tr.runmatch.text = nil\n+\t}\n \tre.runner = append(re.runner, r)\n \tre.muRun.Unlock()\n }"
    },
    {
      "sha": "4ff0aaa8363cebbb8d46f30dce6bec0d85b0980a",
      "filename": "backend/vendor/github.com/dlclark/regexp2/syntax/parser.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fsyntax%2Fparser.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fsyntax%2Fparser.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fdlclark%2Fregexp2%2Fsyntax%2Fparser.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -553,10 +553,10 @@ func (p *parser) scanRegex() (*regexNode, error) {\n \t\t\t}\n \n \t\tcase '.':\n-\t\t\tif p.useOptionE() {\n-\t\t\t\tp.addUnitSet(ECMAAnyClass())\n-\t\t\t} else if p.useOptionS() {\n+\t\t\tif p.useOptionS() {\n \t\t\t\tp.addUnitSet(AnyClass())\n+\t\t\t} else if p.useOptionE() {\n+\t\t\t\tp.addUnitSet(ECMAAnyClass())\n \t\t\t} else {\n \t\t\t\tp.addUnitNotone('\\n')\n \t\t\t}"
    },
    {
      "sha": "7f662ab45f1002612f463da7f5935c95fc11b6ad",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/README.md",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -65,7 +65,7 @@ func main() {\n \n **REST Preview:**\n \n-Here is a little preview of how routing looks like with chi. Also take a look at the generated routing docs\n+Here is a little preview of what routing looks like with chi. Also take a look at the generated routing docs\n in JSON ([routes.json](https://github.com/go-chi/chi/blob/master/_examples/rest/routes.json)) and in\n Markdown ([routes.md](https://github.com/go-chi/chi/blob/master/_examples/rest/routes.md)).\n \n@@ -469,7 +469,8 @@ how setting context on a request in Go works.\n \n * Carl Jackson for https://github.com/zenazn/goji\n   * Parts of chi's thinking comes from goji, and chi's middleware package\n-    sources from goji.\n+    sources from [goji](https://github.com/zenazn/goji/tree/master/web/middleware).\n+  * Please see goji's [LICENSE](https://github.com/zenazn/goji/blob/master/LICENSE) (MIT)\n * Armon Dadgar for https://github.com/armon/go-radix\n * Contributions: [@VojtechVitek](https://github.com/VojtechVitek)\n "
    },
    {
      "sha": "fc32c4efe98361d6075cac3550e3f51091b2e688",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/chi.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fchi.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fchi.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fchi.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -51,7 +51,7 @@\n //\t\"/user/{name}\" matches \"/user/jsmith\" but not \"/user/jsmith/info\" or \"/user/jsmith/\"\n //\t\"/user/{name}/info\" matches \"/user/jsmith/info\"\n //\t\"/page/*\" matches \"/page/intro/latest\"\n-//\t\"/page/{other}/index\" also matches \"/page/intro/latest\"\n+//\t\"/page/{other}/latest\" also matches \"/page/intro/latest\"\n //\t\"/date/{yyyy:\\\\d\\\\d\\\\d\\\\d}/{mm:\\\\d\\\\d}/{dd:\\\\d\\\\d}\" matches \"/date/2017/04/01\"\n package chi\n \n@@ -127,6 +127,10 @@ type Routes interface {\n \t// the method/path - similar to routing a http request, but without\n \t// executing the handler thereafter.\n \tMatch(rctx *Context, method, path string) bool\n+\n+\t// Find searches the routing tree for the pattern that matches\n+\t// the method/path.\n+\tFind(rctx *Context, method, path string) string\n }\n \n // Middlewares type is a slice of standard middleware handlers with methods"
    },
    {
      "sha": "aacf6eff727b205508165bf0eb646ad2df357576",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/context.go",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fcontext.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fcontext.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fcontext.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -109,7 +109,7 @@ func (x *Context) URLParam(key string) string {\n // RoutePattern builds the routing pattern string for the particular\n // request, at the particular point during routing. This means, the value\n // will change throughout the execution of a request in a router. That is\n-// why its advised to only use this value after calling the next handler.\n+// why it's advised to only use this value after calling the next handler.\n //\n // For example,\n //\n@@ -121,6 +121,9 @@ func (x *Context) URLParam(key string) string {\n //\t\t})\n //\t}\n func (x *Context) RoutePattern() string {\n+\tif x == nil {\n+\t\treturn \"\"\n+\t}\n \troutePattern := strings.Join(x.RoutePatterns, \"\")\n \troutePattern = replaceWildcards(routePattern)\n \tif routePattern != \"/\" {"
    },
    {
      "sha": "e61ff264035c3848b600ef70a3747c9e1a57dc9b",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/content_type.go",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fcontent_type.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fcontent_type.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fcontent_type.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,44 +6,40 @@ import (\n )\n \n // SetHeader is a convenience handler to set a response header key/value\n-func SetHeader(key, value string) func(next http.Handler) http.Handler {\n+func SetHeader(key, value string) func(http.Handler) http.Handler {\n \treturn func(next http.Handler) http.Handler {\n-\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\tw.Header().Set(key, value)\n \t\t\tnext.ServeHTTP(w, r)\n-\t\t}\n-\t\treturn http.HandlerFunc(fn)\n+\t\t})\n \t}\n }\n \n // AllowContentType enforces a whitelist of request Content-Types otherwise responds\n // with a 415 Unsupported Media Type status.\n-func AllowContentType(contentTypes ...string) func(next http.Handler) http.Handler {\n+func AllowContentType(contentTypes ...string) func(http.Handler) http.Handler {\n \tallowedContentTypes := make(map[string]struct{}, len(contentTypes))\n \tfor _, ctype := range contentTypes {\n \t\tallowedContentTypes[strings.TrimSpace(strings.ToLower(ctype))] = struct{}{}\n \t}\n \n \treturn func(next http.Handler) http.Handler {\n-\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\tif r.ContentLength == 0 {\n-\t\t\t\t// skip check for empty content body\n+\t\t\t\t// Skip check for empty content body\n \t\t\t\tnext.ServeHTTP(w, r)\n \t\t\t\treturn\n \t\t\t}\n \n-\t\t\ts := strings.ToLower(strings.TrimSpace(r.Header.Get(\"Content-Type\")))\n-\t\t\tif i := strings.Index(s, \";\"); i > -1 {\n-\t\t\t\ts = s[0:i]\n-\t\t\t}\n+\t\t\ts := strings.ToLower(strings.TrimSpace(strings.Split(r.Header.Get(\"Content-Type\"), \";\")[0]))\n \n \t\t\tif _, ok := allowedContentTypes[s]; ok {\n \t\t\t\tnext.ServeHTTP(w, r)\n \t\t\t\treturn\n \t\t\t}\n \n \t\t\tw.WriteHeader(http.StatusUnsupportedMediaType)\n-\t\t}\n-\t\treturn http.HandlerFunc(fn)\n+\t\t})\n \t}\n }\n+"
    },
    {
      "sha": "1368fa7ab7e01af33fc824e1c67cf1bc73b99fe2",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/strip.go",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fstrip.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fstrip.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fstrip.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -60,3 +60,11 @@ func RedirectSlashes(next http.Handler) http.Handler {\n \t}\n \treturn http.HandlerFunc(fn)\n }\n+\n+// StripPrefix is a middleware that will strip the provided prefix from the\n+// request path before handing the request over to the next handler.\n+func StripPrefix(prefix string) func(http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\treturn http.StripPrefix(prefix, next)\n+\t}\n+}"
    },
    {
      "sha": "9a870d88b665fb01636f0937f038730b3877604f",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/throttle.go",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fthrottle.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fthrottle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fthrottle.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,11 +22,12 @@ type ThrottleOpts struct {\n \tLimit          int\n \tBacklogLimit   int\n \tBacklogTimeout time.Duration\n+\tStatusCode     int\n }\n \n // Throttle is a middleware that limits number of currently processed requests\n // at a time across all users. Note: Throttle is not a rate-limiter per user,\n-// instead it just puts a ceiling on the number of currently in-flight requests\n+// instead it just puts a ceiling on the number of current in-flight requests\n // being processed from the point from where the Throttle middleware is mounted.\n func Throttle(limit int) func(http.Handler) http.Handler {\n \treturn ThrottleWithOpts(ThrottleOpts{Limit: limit, BacklogTimeout: defaultBacklogTimeout})\n@@ -49,10 +50,16 @@ func ThrottleWithOpts(opts ThrottleOpts) func(http.Handler) http.Handler {\n \t\tpanic(\"chi/middleware: Throttle expects backlogLimit to be positive\")\n \t}\n \n+\tstatusCode := opts.StatusCode\n+\tif statusCode == 0 {\n+\t\tstatusCode = http.StatusTooManyRequests\n+\t}\n+\n \tt := throttler{\n \t\ttokens:         make(chan token, opts.Limit),\n \t\tbacklogTokens:  make(chan token, opts.Limit+opts.BacklogLimit),\n \t\tbacklogTimeout: opts.BacklogTimeout,\n+\t\tstatusCode:     statusCode,\n \t\tretryAfterFn:   opts.RetryAfterFn,\n \t}\n \n@@ -72,7 +79,7 @@ func ThrottleWithOpts(opts ThrottleOpts) func(http.Handler) http.Handler {\n \n \t\t\tcase <-ctx.Done():\n \t\t\t\tt.setRetryAfterHeaderIfNeeded(w, true)\n-\t\t\t\thttp.Error(w, errContextCanceled, http.StatusTooManyRequests)\n+\t\t\t\thttp.Error(w, errContextCanceled, t.statusCode)\n \t\t\t\treturn\n \n \t\t\tcase btok := <-t.backlogTokens:\n@@ -85,12 +92,12 @@ func ThrottleWithOpts(opts ThrottleOpts) func(http.Handler) http.Handler {\n \t\t\t\tselect {\n \t\t\t\tcase <-timer.C:\n \t\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, false)\n-\t\t\t\t\thttp.Error(w, errTimedOut, http.StatusTooManyRequests)\n+\t\t\t\t\thttp.Error(w, errTimedOut, t.statusCode)\n \t\t\t\t\treturn\n \t\t\t\tcase <-ctx.Done():\n \t\t\t\t\ttimer.Stop()\n \t\t\t\t\tt.setRetryAfterHeaderIfNeeded(w, true)\n-\t\t\t\t\thttp.Error(w, errContextCanceled, http.StatusTooManyRequests)\n+\t\t\t\t\thttp.Error(w, errContextCanceled, t.statusCode)\n \t\t\t\t\treturn\n \t\t\t\tcase tok := <-t.tokens:\n \t\t\t\t\tdefer func() {\n@@ -103,7 +110,7 @@ func ThrottleWithOpts(opts ThrottleOpts) func(http.Handler) http.Handler {\n \n \t\t\tdefault:\n \t\t\t\tt.setRetryAfterHeaderIfNeeded(w, false)\n-\t\t\t\thttp.Error(w, errCapacityExceeded, http.StatusTooManyRequests)\n+\t\t\t\thttp.Error(w, errCapacityExceeded, t.statusCode)\n \t\t\t\treturn\n \t\t\t}\n \t\t}\n@@ -119,8 +126,9 @@ type token struct{}\n type throttler struct {\n \ttokens         chan token\n \tbacklogTokens  chan token\n-\tretryAfterFn   func(ctxDone bool) time.Duration\n \tbacklogTimeout time.Duration\n+\tstatusCode     int\n+\tretryAfterFn   func(ctxDone bool) time.Duration\n }\n \n // setRetryAfterHeaderIfNeeded sets Retry-After HTTP header if corresponding retryAfterFn option of throttler is initialized."
    },
    {
      "sha": "12d4faf017962fdd9ce8cdc528b33b06448aa82a",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/middleware/wrap_writer.go",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fwrap_writer.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fwrap_writer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmiddleware%2Fwrap_writer.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -81,7 +81,11 @@ type basicWriter struct {\n }\n \n func (b *basicWriter) WriteHeader(code int) {\n-\tif !b.wroteHeader {\n+\tif code >= 100 && code <= 199 && code != http.StatusSwitchingProtocols {\n+\t\tif !b.discard {\n+\t\t\tb.ResponseWriter.WriteHeader(code)\n+\t\t}\n+\t} else if !b.wroteHeader {\n \t\tb.code = code\n \t\tb.wroteHeader = true\n \t\tif !b.discard {"
    },
    {
      "sha": "91daf691e95732b79c9ea7000e6687fc90b2c1bf",
      "filename": "backend/vendor/github.com/go-chi/chi/v5/mux.go",
      "status": "modified",
      "additions": 26,
      "deletions": 5,
      "changes": 31,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-chi%2Fchi%2Fv5%2Fmux.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -363,19 +363,40 @@ func (mx *Mux) Middlewares() Middlewares {\n // Note: the *Context state is updated during execution, so manage\n // the state carefully or make a NewRouteContext().\n func (mx *Mux) Match(rctx *Context, method, path string) bool {\n+\treturn mx.Find(rctx, method, path) != \"\"\n+}\n+\n+// Find searches the routing tree for the pattern that matches\n+// the method/path.\n+//\n+// Note: the *Context state is updated during execution, so manage\n+// the state carefully or make a NewRouteContext().\n+func (mx *Mux) Find(rctx *Context, method, path string) string {\n \tm, ok := methodMap[method]\n \tif !ok {\n-\t\treturn false\n+\t\treturn \"\"\n \t}\n \n-\tnode, _, h := mx.tree.FindRoute(rctx, m, path)\n+\tnode, _, _ := mx.tree.FindRoute(rctx, m, path)\n+\tpattern := rctx.routePattern\n+\n+\tif node != nil {\n+\t\tif node.subroutes == nil {\n+\t\t\te := node.endpoints[m]\n+\t\t\treturn e.pattern\n+\t\t}\n \n-\tif node != nil && node.subroutes != nil {\n \t\trctx.RoutePath = mx.nextRoutePath(rctx)\n-\t\treturn node.subroutes.Match(rctx, method, rctx.RoutePath)\n+\t\tsubPattern := node.subroutes.Find(rctx, method, rctx.RoutePath)\n+\t\tif subPattern == \"\" {\n+\t\t\treturn \"\"\n+\t\t}\n+\n+\t\tpattern = strings.TrimSuffix(pattern, \"/*\")\n+\t\tpattern += subPattern\n \t}\n \n-\treturn h != nil\n+\treturn pattern\n }\n \n // NotFoundHandler returns the default Mux 404 responder whenever a route"
    },
    {
      "sha": "ec36f9d33da6bac7050b154de3130bfb37b9fb25",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.golangci.yml",
      "status": "modified",
      "additions": 22,
      "deletions": 25,
      "changes": 47,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2F.golangci.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2F.golangci.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2F.golangci.yml?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,14 +1,11 @@\n+run:\n+  timeout: 5m\n+  tests: false\n+\n linters-settings:\n   govet:\n-    check-shadowing: true\n-  golint:\n-    min-confidence: 0\n-  gocyclo:\n-    min-complexity: 15\n-  maligned:\n-    suggest-new: true\n-  dupl:\n-    threshold: 100\n+    enable:\n+      - shadow\n   goconst:\n     min-len: 2\n     min-occurrences: 2\n@@ -23,47 +20,47 @@ linters-settings:\n       - experimental\n     disabled-checks:\n       - wrapperFunc\n+      - hugeParam\n+      - rangeValCopy\n+      - singleCaseSwitch\n+      - ifElseChain\n \n linters:\n   enable:\n-    - megacheck\n     - revive\n     - govet\n     - unconvert\n-    - megacheck\n-    - gas\n-    - gocyclo\n+    - staticcheck\n+    - unused\n+    - gosec\n     - dupl\n     - misspell\n     - unparam\n-    - unused\n     - typecheck\n     - ineffassign\n     - stylecheck\n     - gochecknoinits\n-    - exportloopref\n+    - copyloopvar\n     - gocritic\n     - nakedret\n     - gosimple\n     - prealloc\n   fast: false\n   disable-all: true\n \n-run:\n-  output:\n-    format: tab\n-  skip-dirs:\n-    - vendor\n-\n issues:\n+  exclude-dirs:\n+    - vendor\n   exclude-rules:\n-    - text: 'Deferring unsafe method \"Close\" on type \"io.ReadCloser\"'\n+    - text: \"at least one file in a package should have a package comment\"\n       linters:\n-        - gosec\n-    - text: \"should have a package comment, unless it's in another file for this package\"\n+        - stylecheck\n+    - text: \"should have a package comment\"\n       linters:\n-        - golint\n+        - revive\n     - path: _test\\.go\n       linters:\n+        - gosec\n         - dupl\n   exclude-use-default: false\n+"
    },
    {
      "sha": "d72d4781811843438b10e743755c2f717c851f58",
      "filename": "backend/vendor/github.com/go-pkgz/rest/README.md",
      "status": "modified",
      "additions": 55,
      "deletions": 2,
      "changes": 57,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -130,8 +130,7 @@ and added to the request's context.\n \n ### Deprecation middleware\n \n-Adds the HTTP Deprecation response header, see [draft-dalal-deprecation-header-00](https://tools.ietf.org/id/draft-dalal-deprecation-header-00.html\n-) \n+Adds the HTTP Deprecation response header, see [draft-ietf-httpapi-deprecation-header-02](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-deprecation-header-02) \n \n ### BasicAuth middleware\n \n@@ -183,6 +182,58 @@ example with chi router:\n \trouter.Use(rest.Reject(http.StatusBadRequest, \"X-Request-Id header is required\", rejectFn))\n ```\n \n+### BasicAuth middleware family\n+\n+The package provides several BasicAuth middleware implementations for different authentication needs:\n+\n+#### BasicAuth\n+The base middleware that requires basic auth and matches user & passwd with a client-provided checker function.\n+```go\n+checkFn := func(user, passwd string) bool {\n+    return user == \"admin\" && passwd == \"secret\"\n+}\n+router.Use(rest.BasicAuth(checkFn))\n+```\n+\n+#### BasicAuthWithUserPasswd\n+A simpler version comparing user & password with provided values directly.\n+```go\n+router.Use(rest.BasicAuthWithUserPasswd(\"admin\", \"secret\"))\n+```\n+\n+#### BasicAuthWithBcryptHash\n+Matches username and bcrypt-hashed password. Useful when storing hashed passwords.\n+```go\n+hash, err := rest.GenerateBcryptHash(\"secret\")\n+if err != nil {\n+    // handle error\n+}\n+router.Use(rest.BasicAuthWithBcryptHash(\"admin\", hash))\n+```\n+\n+#### BasicAuthWithArgon2Hash\n+Similar to bcrypt version but uses Argon2id hash with a separate salt. Both hash and salt are base64 encoded.\n+```go\n+hash, salt, err := rest.GenerateArgon2Hash(\"secret\")\n+if err != nil {\n+    // handle error\n+}\n+router.Use(rest.BasicAuthWithArgon2Hash(\"admin\", hash, salt))\n+```\n+\n+#### BasicAuthWithPrompt\n+Similar to BasicAuthWithUserPasswd but adds browser's authentication prompt by setting the WWW-Authenticate header.\n+```go\n+router.Use(rest.BasicAuthWithPrompt(\"admin\", \"secret\"))\n+```\n+\n+All BasicAuth middlewares:\n+- Return `StatusUnauthorized` (401) if no auth header provided\n+- Return `StatusForbidden` (403) if credentials check failed\n+- Add IsAuthorized flag to the request context, retrievable with `rest.IsAuthorized(r.Context())`\n+- Use constant-time comparison to prevent timing attacks\n+- Support secure password hashing with bcrypt and Argon2id\n+\n ### Benchmarks middleware\n \n Benchmarks middleware allows measuring the time of request handling, number of requests per second and report aggregated metrics. \n@@ -225,6 +276,8 @@ example with chi router:\n - `rest.FileServer` - creates a file server for static assets with directory listing disabled\n - `realip.Get` - returns client's IP address\n - `rest.ParseFromTo` - parses \"from\" and \"to\" request's query params with various formats\n+- `rest.DecodeJSON` - decodes request body to the provided struct\n+- `rest.EncodeJSON` - encodes response body from the provided struct, sets `Content-Type` to `application/json` and sends the status code\n \n ## Profiler\n "
    },
    {
      "sha": "6e7b6cd311d531f42081152a6be2b7d27d95bae9",
      "filename": "backend/vendor/github.com/go-pkgz/rest/basic_auth.go",
      "status": "modified",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbasic_auth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbasic_auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbasic_auth.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -2,8 +2,13 @@ package rest\n \n import (\n \t\"context\"\n+\t\"crypto/rand\"\n \t\"crypto/subtle\"\n+\t\"encoding/base64\"\n \t\"net/http\"\n+\n+\t\"golang.org/x/crypto/argon2\"\n+\t\"golang.org/x/crypto/bcrypt\"\n )\n \n const baContextKey = \"authorizedWithBasicAuth\"\n@@ -39,6 +44,42 @@ func BasicAuthWithUserPasswd(user, passwd string) func(http.Handler) http.Handle\n \treturn BasicAuth(checkFn)\n }\n \n+// BasicAuthWithBcryptHash middleware requires basic auth and matches user & bcrypt hashed password\n+func BasicAuthWithBcryptHash(user, hashedPassword string) func(http.Handler) http.Handler {\n+\tcheckFn := func(reqUser, reqPasswd string) bool {\n+\t\tif reqUser != user {\n+\t\t\treturn false\n+\t\t}\n+\t\terr := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(reqPasswd))\n+\t\treturn err == nil\n+\t}\n+\treturn BasicAuth(checkFn)\n+}\n+\n+// BasicAuthWithArgon2Hash middleware requires basic auth and matches user & argon2 hashed password\n+// both hashedPassword and salt must be base64 encoded strings\n+// Uses Argon2id with parameters: t=1, m=64*1024 KB, p=4 threads\n+func BasicAuthWithArgon2Hash(user, hashedPassword, salt string) func(http.Handler) http.Handler {\n+\tcheckFn := func(reqUser, reqPasswd string) bool {\n+\t\tif reqUser != user {\n+\t\t\treturn false\n+\t\t}\n+\n+\t\tsaltBytes, err := base64.StdEncoding.DecodeString(salt)\n+\t\tif err != nil {\n+\t\t\treturn false\n+\t\t}\n+\t\tstoredHashBytes, err := base64.StdEncoding.DecodeString(hashedPassword)\n+\t\tif err != nil {\n+\t\t\treturn false\n+\t\t}\n+\n+\t\thash := argon2.IDKey([]byte(reqPasswd), saltBytes, 1, 64*1024, 4, 32)\n+\t\treturn subtle.ConstantTimeCompare(hash, storedHashBytes) == 1\n+\t}\n+\treturn BasicAuth(checkFn)\n+}\n+\n // IsAuthorized returns true is user authorized.\n // it can be used in handlers to check if BasicAuth middleware was applied\n func IsAuthorized(ctx context.Context) bool {\n@@ -71,3 +112,52 @@ func BasicAuthWithPrompt(user, passwd string) func(http.Handler) http.Handler {\n \t\treturn http.HandlerFunc(fn)\n \t}\n }\n+\n+// BasicAuthWithBcryptHashAndPrompt middleware requires basic auth and matches user & bcrypt hashed password\n+// If the user is not authorized, it will prompt for basic auth\n+func BasicAuthWithBcryptHashAndPrompt(user, hashedPassword string) func(http.Handler) http.Handler {\n+\tcheckFn := func(reqUser, reqPasswd string) bool {\n+\t\tif reqUser != user {\n+\t\t\treturn false\n+\t\t}\n+\t\terr := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(reqPasswd))\n+\t\treturn err == nil\n+\t}\n+\n+\treturn func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\t// extract basic auth from request\n+\t\t\tu, p, ok := r.BasicAuth()\n+\t\t\tif ok && checkFn(u, p) {\n+\t\t\t\th.ServeHTTP(w, r.WithContext(context.WithValue(r.Context(), contextKey(baContextKey), true)))\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\t// not authorized, prompt for basic auth\n+\t\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"restricted\", charset=\"UTF-8\"`)\n+\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}\n+\n+// GenerateBcryptHash generates a bcrypt hash from a password\n+func GenerateBcryptHash(password string) (string, error) {\n+\thash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\treturn string(hash), nil\n+}\n+\n+// GenerateArgon2Hash generates an argon2 hash and salt from a password\n+func GenerateArgon2Hash(password string) (hash, salt string, err error) {\n+\tsaltBytes := make([]byte, 16)\n+\tif _, err := rand.Read(saltBytes); err != nil {\n+\t\treturn \"\", \"\", err\n+\t}\n+\n+\t// using recommended parameters: time=1, memory=64*1024, threads=4, keyLen=32\n+\thashBytes := argon2.IDKey([]byte(password), saltBytes, 1, 64*1024, 4, 32)\n+\n+\treturn base64.StdEncoding.EncodeToString(hashBytes), base64.StdEncoding.EncodeToString(saltBytes), nil\n+}"
    },
    {
      "sha": "24e1dea9f5b08cdd3ce20ead9e469ef94bd75df9",
      "filename": "backend/vendor/github.com/go-pkgz/rest/benchmarks.go",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbenchmarks.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbenchmarks.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fbenchmarks.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -55,10 +55,10 @@ func NewBenchmarks() *Benchmarks {\n // Default is 15 minutes. The increase of this range will change memory utilization as each second of the range\n // kept as benchData aggregate. The default means 15*60 = 900 seconds of data aggregate.\n // Larger range allows for longer time periods to be benchmarked.\n-func (b *Benchmarks) WithTimeRange(max time.Duration) *Benchmarks {\n+func (b *Benchmarks) WithTimeRange(maximum time.Duration) *Benchmarks {\n \tb.lock.Lock()\n \tdefer b.lock.Unlock()\n-\tb.maxTimeRange = max\n+\tb.maxTimeRange = maximum\n \treturn b\n }\n \n@@ -124,13 +124,18 @@ func (b *Benchmarks) Stats(interval time.Duration) BenchmarkStats {\n \t\trespTime time.Duration\n \t)\n \n+\tnow := b.nowFn().Truncate(time.Second)\n+\tcutoff := now.Add(-interval)\n \tstInterval, fnInterval := time.Time{}, time.Time{}\n \tvar minRespTime, maxRespTime time.Duration\n-\tfor e := b.data.Back(); e != nil; e = e.Prev() { // reverse order\n+\tcount := 0\n+\n+\tfor e := b.data.Back(); e != nil && count < int(interval.Seconds()); e = e.Prev() { // reverse order\n \t\tbd := e.Value.(benchData)\n-\t\tif bd.ts.Before(b.nowFn().Add(-interval)) {\n+\t\tif bd.ts.Before(cutoff) {\n \t\t\tbreak\n \t\t}\n+\n \t\tif minRespTime == 0 || bd.minRespTime < minRespTime {\n \t\t\tminRespTime = bd.minRespTime\n \t\t}\n@@ -143,15 +148,22 @@ func (b *Benchmarks) Stats(interval time.Duration) BenchmarkStats {\n \t\t\tfnInterval = bd.ts.Add(time.Second)\n \t\t}\n \t\tstInterval = bd.ts\n+\t\tcount++\n \t}\n \n \tif requests == 0 {\n \t\treturn BenchmarkStats{}\n \t}\n \n+\t// ensure we calculate rate based on actual interval\n+\tactualInterval := fnInterval.Sub(stInterval)\n+\tif actualInterval < time.Second {\n+\t\tactualInterval = time.Second\n+\t}\n+\n \treturn BenchmarkStats{\n \t\tRequests:        requests,\n-\t\tRequestsSec:     float64(requests) / (fnInterval.Sub(stInterval).Seconds()),\n+\t\tRequestsSec:     float64(requests) / actualInterval.Seconds(),\n \t\tAverageRespTime: respTime.Microseconds() / int64(requests),\n \t\tMinRespTime:     minRespTime.Microseconds(),\n \t\tMaxRespTime:     maxRespTime.Microseconds(),"
    },
    {
      "sha": "b0e41994b91e970522afbaa48ef60fb57a1e2882",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Flogger%2Foptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Flogger%2Foptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Flogger%2Foptions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -13,10 +13,10 @@ func WithBody(l *Middleware) {\n }\n \n // MaxBodySize sets size of the logged part of the request body.\n-func MaxBodySize(max int) Option {\n+func MaxBodySize(maximum int) Option {\n \treturn func(l *Middleware) {\n-\t\tif max >= 0 {\n-\t\t\tl.maxBodySize = max\n+\t\tif maximum >= 0 {\n+\t\t\tl.maxBodySize = maximum\n \t\t}\n \t}\n }"
    },
    {
      "sha": "86b3cc1340d38f12f6ce0ef7aa6ab5464675f97f",
      "filename": "backend/vendor/github.com/go-pkgz/rest/middleware.go",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fmiddleware.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fmiddleware.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Fmiddleware.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -13,16 +13,13 @@ import (\n \n // Wrap converts a list of middlewares to nested calls (in reverse order)\n func Wrap(handler http.Handler, mws ...func(http.Handler) http.Handler) http.Handler {\n-\tif len(mws) == 0 {\n-\t\treturn handler\n-\t}\n-\tres := handler\n \tfor i := len(mws) - 1; i >= 0; i-- {\n-\t\tres = mws[i](res)\n+\t\thandler = mws[i](handler)\n \t}\n-\treturn res\n+\treturn handler\n }\n \n+\n // AppInfo adds custom app-info to the response header\n func AppInfo(app, author, version string) func(http.Handler) http.Handler {\n \tf := func(h http.Handler) http.Handler {"
    },
    {
      "sha": "1356dbaf03b6702d85347f05b9e12e94d4dc3294",
      "filename": "backend/vendor/github.com/go-pkgz/rest/realip/real.go",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fgo-pkgz%2Frest%2Frealip%2Freal.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -14,15 +14,22 @@ type ipRange struct {\n \tend   net.IP\n }\n \n+// privateRanges contains the list of private and special-use IP ranges.\n+// reference: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n var privateRanges = []ipRange{\n+\t// IPv4 Private Ranges\n \t{start: net.ParseIP(\"10.0.0.0\"), end: net.ParseIP(\"10.255.255.255\")},\n-\t{start: net.ParseIP(\"100.64.0.0\"), end: net.ParseIP(\"100.127.255.255\")},\n \t{start: net.ParseIP(\"172.16.0.0\"), end: net.ParseIP(\"172.31.255.255\")},\n-\t{start: net.ParseIP(\"192.0.0.0\"), end: net.ParseIP(\"192.0.0.255\")},\n \t{start: net.ParseIP(\"192.168.0.0\"), end: net.ParseIP(\"192.168.255.255\")},\n+\t// IPv4 Link-Local\n+\t{start: net.ParseIP(\"169.254.0.0\"), end: net.ParseIP(\"169.254.255.255\")},\n+\t// IPv4 Shared Address Space (RFC 6598)\n+\t{start: net.ParseIP(\"100.64.0.0\"), end: net.ParseIP(\"100.127.255.255\")},\n+\t// IPv4 Benchmarking (RFC 2544)\n \t{start: net.ParseIP(\"198.18.0.0\"), end: net.ParseIP(\"198.19.255.255\")},\n-\t{start: net.ParseIP(\"::1\"), end: net.ParseIP(\"::1\")},\n+\t// IPv6 Unique Local Addresses (ULA)\n \t{start: net.ParseIP(\"fc00::\"), end: net.ParseIP(\"fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\")},\n+\t// IPv6 Link-local Addresses\n \t{start: net.ParseIP(\"fe80::\"), end: net.ParseIP(\"febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff\")},\n }\n "
    },
    {
      "sha": "4528059ca681510194cfc966a7ca7925e4412bb1",
      "filename": "backend/vendor/github.com/klauspost/compress/.goreleaser.yml",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2F.goreleaser.yml",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2F.goreleaser.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2F.goreleaser.yml?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,5 +1,5 @@\n-# This is an example goreleaser.yaml file with some sane defaults.\n-# Make sure to check the documentation at http://goreleaser.com\n+version: 2\n+\n before:\n   hooks:\n     - ./gen.sh\n@@ -99,7 +99,7 @@ archives:\n checksum:\n   name_template: 'checksums.txt'\n snapshot:\n-  name_template: \"{{ .Tag }}-next\"\n+  version_template: \"{{ .Tag }}-next\"\n changelog:\n   sort: asc\n   filters:"
    },
    {
      "sha": "de264c85a5ad4c8332f8d4982c3db52262507009",
      "filename": "backend/vendor/github.com/klauspost/compress/README.md",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -16,6 +16,27 @@ This package provides various compression algorithms.\n \r\n # changelog\r\n \r\n+* Sep 23rd, 2024 - [1.17.10](https://github.com/klauspost/compress/releases/tag/v1.17.10)\r\n+\t* gzhttp: Add TransportAlwaysDecompress option. https://github.com/klauspost/compress/pull/978\r\n+\t* gzhttp: Add supported decompress request body by @mirecl in https://github.com/klauspost/compress/pull/1002\r\n+\t* s2: Add EncodeBuffer buffer recycling callback https://github.com/klauspost/compress/pull/982\r\n+\t* zstd: Improve memory usage on small streaming encodes https://github.com/klauspost/compress/pull/1007\r\n+\t* flate: read data written with partial flush by @vajexal in https://github.com/klauspost/compress/pull/996\r\n+\r\n+* Jun 12th, 2024 - [1.17.9](https://github.com/klauspost/compress/releases/tag/v1.17.9)\r\n+\t* s2: Reduce ReadFrom temporary allocations https://github.com/klauspost/compress/pull/949\r\n+\t* flate, zstd: Shave some bytes off amd64 matchLen by @greatroar in https://github.com/klauspost/compress/pull/963\r\n+\t* Upgrade zip/zlib to 1.22.4 upstream https://github.com/klauspost/compress/pull/970 https://github.com/klauspost/compress/pull/971\r\n+\t* zstd: BuildDict fails with RLE table https://github.com/klauspost/compress/pull/951\r\n+\r\n+* Apr 9th, 2024 - [1.17.8](https://github.com/klauspost/compress/releases/tag/v1.17.8)\r\n+\t* zstd: Reject blocks where reserved values are not 0 https://github.com/klauspost/compress/pull/885\r\n+\t* zstd: Add RLE detection+encoding https://github.com/klauspost/compress/pull/938\r\n+\r\n+* Feb 21st, 2024 - [1.17.7](https://github.com/klauspost/compress/releases/tag/v1.17.7)\r\n+\t* s2: Add AsyncFlush method: Complete the block without flushing by @Jille in https://github.com/klauspost/compress/pull/927\r\n+\t* s2: Fix literal+repeat exceeds dst crash https://github.com/klauspost/compress/pull/930\r\n+  \r\n * Feb 5th, 2024 - [1.17.6](https://github.com/klauspost/compress/releases/tag/v1.17.6)\r\n \t* zstd: Fix incorrect repeat coding in best mode https://github.com/klauspost/compress/pull/923\r\n \t* s2: Fix DecodeConcurrent deadlock on errors https://github.com/klauspost/compress/pull/925\r\n@@ -81,7 +102,7 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t* zstd: Various minor improvements by @greatroar in https://github.com/klauspost/compress/pull/788 https://github.com/klauspost/compress/pull/794 https://github.com/klauspost/compress/pull/795\r\n \t* s2: Fix huge block overflow https://github.com/klauspost/compress/pull/779\r\n \t* s2: Allow CustomEncoder fallback https://github.com/klauspost/compress/pull/780\r\n-\t* gzhttp: Suppport ResponseWriter Unwrap() in gzhttp handler by @jgimenez in https://github.com/klauspost/compress/pull/799\r\n+\t* gzhttp: Support ResponseWriter Unwrap() in gzhttp handler by @jgimenez in https://github.com/klauspost/compress/pull/799\r\n \r\n * Mar 13, 2023 - [v1.16.1](https://github.com/klauspost/compress/releases/tag/v1.16.1)\r\n \t* zstd: Speed up + improve best encoder by @greatroar in https://github.com/klauspost/compress/pull/776\r\n@@ -136,7 +157,7 @@ https://github.com/klauspost/compress/pull/919 https://github.com/klauspost/comp\n \t* zstd: Add [WithDecodeAllCapLimit](https://pkg.go.dev/github.com/klauspost/compress@v1.15.10/zstd#WithDecodeAllCapLimit) https://github.com/klauspost/compress/pull/649\r\n \t* Add Go 1.19 - deprecate Go 1.16  https://github.com/klauspost/compress/pull/651\r\n \t* flate: Improve level 5+6 compression https://github.com/klauspost/compress/pull/656\r\n-\t* zstd: Improve \"better\" compresssion  https://github.com/klauspost/compress/pull/657\r\n+\t* zstd: Improve \"better\" compression  https://github.com/klauspost/compress/pull/657\r\n \t* s2: Improve \"best\" compression https://github.com/klauspost/compress/pull/658\r\n \t* s2: Improve \"better\" compression. https://github.com/klauspost/compress/pull/635\r\n \t* s2: Slightly faster non-assembly decompression https://github.com/klauspost/compress/pull/646\r\n@@ -339,7 +360,7 @@ While the release has been extensively tested, it is recommended to testing when\n \t* s2: Fix binaries.\r\n \r\n * Feb 25, 2021 (v1.11.8)\r\n-\t* s2: Fixed occational out-of-bounds write on amd64. Upgrade recommended.\r\n+\t* s2: Fixed occasional out-of-bounds write on amd64. Upgrade recommended.\r\n \t* s2: Add AMD64 assembly for better mode. 25-50% faster. [#315](https://github.com/klauspost/compress/pull/315)\r\n \t* s2: Less upfront decoder allocation. [#322](https://github.com/klauspost/compress/pull/322)\r\n \t* zstd: Faster \"compression\" of incompressible data. [#314](https://github.com/klauspost/compress/pull/314)\r\n@@ -518,7 +539,7 @@ While the release has been extensively tested, it is recommended to testing when\n * Feb 19, 2016: Faster bit writer, level -2 is 15% faster, level 1 is 4% faster.\r\n * Feb 19, 2016: Handle small payloads faster in level 1-3.\r\n * Feb 19, 2016: Added faster level 2 + 3 compression modes.\r\n-* Feb 19, 2016: [Rebalanced compression levels](https://blog.klauspost.com/rebalancing-deflate-compression-levels/), so there is a more even progresssion in terms of compression. New default level is 5.\r\n+* Feb 19, 2016: [Rebalanced compression levels](https://blog.klauspost.com/rebalancing-deflate-compression-levels/), so there is a more even progression in terms of compression. New default level is 5.\r\n * Feb 14, 2016: Snappy: Merge upstream changes. \r\n * Feb 14, 2016: Snappy: Fix aggressive skipping.\r\n * Feb 14, 2016: Snappy: Update benchmark.\r"
    },
    {
      "sha": "0c7dd4ffef9fb0189cd8924094aa6a7911ed931d",
      "filename": "backend/vendor/github.com/klauspost/compress/fse/decompress.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Ffse%2Fdecompress.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Ffse%2Fdecompress.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Ffse%2Fdecompress.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -15,7 +15,7 @@ const (\n // It is possible, but by no way guaranteed that corrupt data will\n // return an error.\n // It is up to the caller to verify integrity of the returned data.\n-// Use a predefined Scrach to set maximum acceptable output size.\n+// Use a predefined Scratch to set maximum acceptable output size.\n func Decompress(b []byte, s *Scratch) ([]byte, error) {\n \ts, err := s.prepare(b)\n \tif err != nil {"
    },
    {
      "sha": "0f56b02d7474a7d48394170c6a4f543083c4d813",
      "filename": "backend/vendor/github.com/klauspost/compress/huff0/decompress.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fdecompress.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fdecompress.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fhuff0%2Fdecompress.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1136,7 +1136,7 @@ func (s *Scratch) matches(ct cTable, w io.Writer) {\n \t\t\terrs++\n \t\t}\n \t\tif errs > 0 {\n-\t\t\tfmt.Fprintf(w, \"%d errros in base, stopping\\n\", errs)\n+\t\t\tfmt.Fprintf(w, \"%d errors in base, stopping\\n\", errs)\n \t\t\tcontinue\n \t\t}\n \t\t// Ensure that all combinations are covered.\n@@ -1152,7 +1152,7 @@ func (s *Scratch) matches(ct cTable, w io.Writer) {\n \t\t\t\terrs++\n \t\t\t}\n \t\t\tif errs > 20 {\n-\t\t\t\tfmt.Fprintf(w, \"%d errros, stopping\\n\", errs)\n+\t\t\t\tfmt.Fprintf(w, \"%d errors, stopping\\n\", errs)\n \t\t\t\tbreak\n \t\t\t}\n \t\t}"
    },
    {
      "sha": "9c28840c3bd77aa5cf5593d15162c1f239adc114",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/blockdec.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fblockdec.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -598,7 +598,9 @@ func (b *blockDec) prepareSequences(in []byte, hist *history) (err error) {\n \t\t\t\t\tprintf(\"RLE set to 0x%x, code: %v\", symb, v)\n \t\t\t\t}\n \t\t\tcase compModeFSE:\n-\t\t\t\tprintln(\"Reading table for\", tableIndex(i))\n+\t\t\t\tif debugDecoder {\n+\t\t\t\t\tprintln(\"Reading table for\", tableIndex(i))\n+\t\t\t\t}\n \t\t\t\tif seq.fse == nil || seq.fse.preDefined {\n \t\t\t\t\tseq.fse = fseDecoderPool.Get().(*fseDecoder)\n \t\t\t\t}"
    },
    {
      "sha": "84a79fde76775b95adc9e83e629736e853990470",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/enc_better.go",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_better.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_better.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_better.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -179,9 +179,9 @@ encodeLoop:\n \t\t\t\tif repIndex >= 0 && load3232(src, repIndex) == uint32(cv>>(repOff*8)) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n+\t\t\t\t\tlength := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -210,12 +210,12 @@ encodeLoop:\n \n \t\t\t\t\t// Index match start+1 (long) -> s - 1\n \t\t\t\t\tindex0 := s + repOff\n-\t\t\t\t\ts += lenght + repOff\n+\t\t\t\t\ts += length + repOff\n \n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop\n@@ -241,9 +241,9 @@ encodeLoop:\n \t\t\t\tif false && repIndex >= 0 && load6432(src, repIndex) == load6432(src, s+repOff) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 8 + e.matchlen(s+8+repOff2, repIndex+8, src)\n+\t\t\t\t\tlength := 8 + e.matchlen(s+8+repOff2, repIndex+8, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -270,11 +270,11 @@ encodeLoop:\n \t\t\t\t\t}\n \t\t\t\t\tblk.sequences = append(blk.sequences, seq)\n \n-\t\t\t\t\ts += lenght + repOff2\n+\t\t\t\t\ts += length + repOff2\n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop\n@@ -708,9 +708,9 @@ encodeLoop:\n \t\t\t\tif repIndex >= 0 && load3232(src, repIndex) == uint32(cv>>(repOff*8)) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n+\t\t\t\t\tlength := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -738,12 +738,12 @@ encodeLoop:\n \t\t\t\t\tblk.sequences = append(blk.sequences, seq)\n \n \t\t\t\t\t// Index match start+1 (long) -> s - 1\n-\t\t\t\t\ts += lenght + repOff\n+\t\t\t\t\ts += length + repOff\n \n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop\n@@ -772,9 +772,9 @@ encodeLoop:\n \t\t\t\tif false && repIndex >= 0 && load6432(src, repIndex) == load6432(src, s+repOff) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 8 + e.matchlen(s+8+repOff2, repIndex+8, src)\n+\t\t\t\t\tlength := 8 + e.matchlen(s+8+repOff2, repIndex+8, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -801,11 +801,11 @@ encodeLoop:\n \t\t\t\t\t}\n \t\t\t\t\tblk.sequences = append(blk.sequences, seq)\n \n-\t\t\t\t\ts += lenght + repOff2\n+\t\t\t\t\ts += length + repOff2\n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop"
    },
    {
      "sha": "d36be7bd8c248ef140e683adf56d2256e87111c2",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/enc_dfast.go",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_dfast.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_dfast.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fenc_dfast.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -138,9 +138,9 @@ encodeLoop:\n \t\t\t\tif repIndex >= 0 && load3232(src, repIndex) == uint32(cv>>(repOff*8)) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n+\t\t\t\t\tlength := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -166,11 +166,11 @@ encodeLoop:\n \t\t\t\t\t\tprintln(\"repeat sequence\", seq, \"next s:\", s)\n \t\t\t\t\t}\n \t\t\t\t\tblk.sequences = append(blk.sequences, seq)\n-\t\t\t\t\ts += lenght + repOff\n+\t\t\t\t\ts += length + repOff\n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop\n@@ -798,9 +798,9 @@ encodeLoop:\n \t\t\t\tif repIndex >= 0 && load3232(src, repIndex) == uint32(cv>>(repOff*8)) {\n \t\t\t\t\t// Consider history as well.\n \t\t\t\t\tvar seq seq\n-\t\t\t\t\tlenght := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n+\t\t\t\t\tlength := 4 + e.matchlen(s+4+repOff, repIndex+4, src)\n \n-\t\t\t\t\tseq.matchLen = uint32(lenght - zstdMinMatch)\n+\t\t\t\t\tseq.matchLen = uint32(length - zstdMinMatch)\n \n \t\t\t\t\t// We might be able to match backwards.\n \t\t\t\t\t// Extend as long as we can.\n@@ -826,11 +826,11 @@ encodeLoop:\n \t\t\t\t\t\tprintln(\"repeat sequence\", seq, \"next s:\", s)\n \t\t\t\t\t}\n \t\t\t\t\tblk.sequences = append(blk.sequences, seq)\n-\t\t\t\t\ts += lenght + repOff\n+\t\t\t\t\ts += length + repOff\n \t\t\t\t\tnextEmit = s\n \t\t\t\t\tif s >= sLimit {\n \t\t\t\t\t\tif debugEncoder {\n-\t\t\t\t\t\t\tprintln(\"repeat ended\", s, lenght)\n+\t\t\t\t\t\t\tprintln(\"repeat ended\", s, length)\n \n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak encodeLoop"
    },
    {
      "sha": "8f8223cd3a67891da857d1bf2b6d1655debd6ba9",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/encoder.go",
      "status": "modified",
      "additions": 34,
      "deletions": 11,
      "changes": 45,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fencoder.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fencoder.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fencoder.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,6 +6,7 @@ package zstd\n \n import (\n \t\"crypto/rand\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"math\"\n@@ -149,6 +150,9 @@ func (e *Encoder) ResetContentSize(w io.Writer, size int64) {\n // and write CRC if requested.\n func (e *Encoder) Write(p []byte) (n int, err error) {\n \ts := &e.state\n+\tif s.eofWritten {\n+\t\treturn 0, ErrEncoderClosed\n+\t}\n \tfor len(p) > 0 {\n \t\tif len(p)+len(s.filling) < e.o.blockSize {\n \t\t\tif e.o.crc {\n@@ -202,7 +206,7 @@ func (e *Encoder) nextBlock(final bool) error {\n \t\t\treturn nil\n \t\t}\n \t\tif final && len(s.filling) > 0 {\n-\t\t\ts.current = e.EncodeAll(s.filling, s.current[:0])\n+\t\t\ts.current = e.encodeAll(s.encoder, s.filling, s.current[:0])\n \t\t\tvar n2 int\n \t\t\tn2, s.err = s.w.Write(s.current)\n \t\t\tif s.err != nil {\n@@ -288,6 +292,9 @@ func (e *Encoder) nextBlock(final bool) error {\n \ts.filling, s.current, s.previous = s.previous[:0], s.filling, s.current\n \ts.nInput += int64(len(s.current))\n \ts.wg.Add(1)\n+\tif final {\n+\t\ts.eofWritten = true\n+\t}\n \tgo func(src []byte) {\n \t\tif debugEncoder {\n \t\t\tprintln(\"Adding block,\", len(src), \"bytes, final:\", final)\n@@ -303,9 +310,6 @@ func (e *Encoder) nextBlock(final bool) error {\n \t\tblk := enc.Block()\n \t\tenc.Encode(blk, src)\n \t\tblk.last = final\n-\t\tif final {\n-\t\t\ts.eofWritten = true\n-\t\t}\n \t\t// Wait for pending writes.\n \t\ts.wWg.Wait()\n \t\tif s.writeErr != nil {\n@@ -401,12 +405,20 @@ func (e *Encoder) Flush() error {\n \tif len(s.filling) > 0 {\n \t\terr := e.nextBlock(false)\n \t\tif err != nil {\n+\t\t\t// Ignore Flush after Close.\n+\t\t\tif errors.Is(s.err, ErrEncoderClosed) {\n+\t\t\t\treturn nil\n+\t\t\t}\n \t\t\treturn err\n \t\t}\n \t}\n \ts.wg.Wait()\n \ts.wWg.Wait()\n \tif s.err != nil {\n+\t\t// Ignore Flush after Close.\n+\t\tif errors.Is(s.err, ErrEncoderClosed) {\n+\t\t\treturn nil\n+\t\t}\n \t\treturn s.err\n \t}\n \treturn s.writeErr\n@@ -422,6 +434,9 @@ func (e *Encoder) Close() error {\n \t}\n \terr := e.nextBlock(true)\n \tif err != nil {\n+\t\tif errors.Is(s.err, ErrEncoderClosed) {\n+\t\t\treturn nil\n+\t\t}\n \t\treturn err\n \t}\n \tif s.frameContentSize > 0 {\n@@ -459,6 +474,11 @@ func (e *Encoder) Close() error {\n \t\t}\n \t\t_, s.err = s.w.Write(frame)\n \t}\n+\tif s.err == nil {\n+\t\ts.err = ErrEncoderClosed\n+\t\treturn nil\n+\t}\n+\n \treturn s.err\n }\n \n@@ -469,6 +489,15 @@ func (e *Encoder) Close() error {\n // Data compressed with EncodeAll can be decoded with the Decoder,\n // using either a stream or DecodeAll.\n func (e *Encoder) EncodeAll(src, dst []byte) []byte {\n+\te.init.Do(e.initialize)\n+\tenc := <-e.encoders\n+\tdefer func() {\n+\t\te.encoders <- enc\n+\t}()\n+\treturn e.encodeAll(enc, src, dst)\n+}\n+\n+func (e *Encoder) encodeAll(enc encoder, src, dst []byte) []byte {\n \tif len(src) == 0 {\n \t\tif e.o.fullZero {\n \t\t\t// Add frame header.\n@@ -491,13 +520,7 @@ func (e *Encoder) EncodeAll(src, dst []byte) []byte {\n \t\t}\n \t\treturn dst\n \t}\n-\te.init.Do(e.initialize)\n-\tenc := <-e.encoders\n-\tdefer func() {\n-\t\t// Release encoder reference to last block.\n-\t\t// If a non-single block is needed the encoder will reset again.\n-\t\te.encoders <- enc\n-\t}()\n+\n \t// Use single segments when above minimum window and below window size.\n \tsingle := len(src) <= e.o.windowSize && len(src) > MinWindowSize\n \tif e.o.single != nil {"
    },
    {
      "sha": "e47af66e7c903a8f771495fd465beef021f45b61",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/framedec.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fframedec.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fframedec.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fframedec.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -146,7 +146,9 @@ func (d *frameDec) reset(br byteBuffer) error {\n \t\t\t}\n \t\t\treturn err\n \t\t}\n-\t\tprintf(\"raw: %x, mantissa: %d, exponent: %d\\n\", wd, wd&7, wd>>3)\n+\t\tif debugDecoder {\n+\t\t\tprintf(\"raw: %x, mantissa: %d, exponent: %d\\n\", wd, wd&7, wd>>3)\n+\t\t}\n \t\twindowLog := 10 + (wd >> 3)\n \t\twindowBase := uint64(1) << windowLog\n \t\twindowAdd := (windowBase / 8) * uint64(wd&0x7)"
    },
    {
      "sha": "c59f17e07ad1dd66834f449e943c48295167154e",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqdec_amd64.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -146,7 +146,7 @@ func (s *sequenceDecs) decodeSyncSimple(hist []byte) (bool, error) {\n \t\treturn true, fmt.Errorf(\"output bigger than max block size (%d)\", maxBlockSize)\n \n \tdefault:\n-\t\treturn true, fmt.Errorf(\"sequenceDecs_decode returned erronous code %d\", errCode)\n+\t\treturn true, fmt.Errorf(\"sequenceDecs_decode returned erroneous code %d\", errCode)\n \t}\n \n \ts.seqSize += ctx.litRemain\n@@ -292,7 +292,7 @@ func (s *sequenceDecs) decode(seqs []seqVals) error {\n \t\t\treturn io.ErrUnexpectedEOF\n \t\t}\n \n-\t\treturn fmt.Errorf(\"sequenceDecs_decode_amd64 returned erronous code %d\", errCode)\n+\t\treturn fmt.Errorf(\"sequenceDecs_decode_amd64 returned erroneous code %d\", errCode)\n \t}\n \n \tif ctx.litRemain < 0 {"
    },
    {
      "sha": "f5591fa1e8669ce6f789c9ad3eeb6978bdef2f85",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/seqdec_amd64.s",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fseqdec_amd64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1814,7 +1814,7 @@ TEXT ·sequenceDecs_decodeSync_amd64(SB), $64-32\n \tMOVQ    40(SP), AX\n \tADDQ    AX, 48(SP)\n \n-\t// Calculate poiter to s.out[cap(s.out)] (a past-end pointer)\n+\t// Calculate pointer to s.out[cap(s.out)] (a past-end pointer)\n \tADDQ R10, 32(SP)\n \n \t// outBase += outPosition\n@@ -2376,7 +2376,7 @@ TEXT ·sequenceDecs_decodeSync_bmi2(SB), $64-32\n \tMOVQ    40(SP), CX\n \tADDQ    CX, 48(SP)\n \n-\t// Calculate poiter to s.out[cap(s.out)] (a past-end pointer)\n+\t// Calculate pointer to s.out[cap(s.out)] (a past-end pointer)\n \tADDQ R9, 32(SP)\n \n \t// outBase += outPosition\n@@ -2896,7 +2896,7 @@ TEXT ·sequenceDecs_decodeSync_safe_amd64(SB), $64-32\n \tMOVQ    40(SP), AX\n \tADDQ    AX, 48(SP)\n \n-\t// Calculate poiter to s.out[cap(s.out)] (a past-end pointer)\n+\t// Calculate pointer to s.out[cap(s.out)] (a past-end pointer)\n \tADDQ R10, 32(SP)\n \n \t// outBase += outPosition\n@@ -3560,7 +3560,7 @@ TEXT ·sequenceDecs_decodeSync_safe_bmi2(SB), $64-32\n \tMOVQ    40(SP), CX\n \tADDQ    CX, 48(SP)\n \n-\t// Calculate poiter to s.out[cap(s.out)] (a past-end pointer)\n+\t// Calculate pointer to s.out[cap(s.out)] (a past-end pointer)\n \tADDQ R9, 32(SP)\n \n \t// outBase += outPosition"
    },
    {
      "sha": "066bef2a4f0e9e47a05f9f08abe6e74a1a42624a",
      "filename": "backend/vendor/github.com/klauspost/compress/zstd/zstd.go",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fklauspost%2Fcompress%2Fzstd%2Fzstd.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -88,6 +88,10 @@ var (\n \t// Close has been called.\n \tErrDecoderClosed = errors.New(\"decoder used after Close\")\n \n+\t// ErrEncoderClosed will be returned if the Encoder was used after\n+\t// Close has been called.\n+\tErrEncoderClosed = errors.New(\"encoder used after Close\")\n+\n \t// ErrDecoderNilInput is returned when a nil Reader was provided\n \t// and an operation other than Reset/DecodeAll/Close was attempted.\n \tErrDecoderNilInput = errors.New(\"nil input provided as reader\")"
    },
    {
      "sha": "e1652b179ad3c121e1fd1e5e367e178e09851055",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/CHANGELOG.md",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FCHANGELOG.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FCHANGELOG.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FCHANGELOG.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,3 +1,12 @@\n+## Unreleased\n+\n+### Changed\n+\n+* `go-redis` won't skip span creation if the parent spans is not recording. ([#2980](https://github.com/redis/go-redis/issues/2980))\n+  Users can use the OpenTelemetry sampler to control the sampling behavior.\n+  For instance, you can use the `ParentBased(NeverSample())` sampler from `go.opentelemetry.io/otel/sdk/trace` to keep\n+  a similar behavior (drop orphan spans) of `go-redis` as before.\n+\n ## [9.0.5](https://github.com/redis/go-redis/compare/v9.0.4...v9.0.5) (2023-05-29)\n \n "
    },
    {
      "sha": "1a6bd178627394c9cfd1fd59f0ef74e75606fe46",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/Makefile",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FMakefile",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FMakefile",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FMakefile?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,14 +1,20 @@\n GO_MOD_DIRS := $(shell find . -type f -name 'go.mod' -exec dirname {} \\; | sort)\n \n test: testdeps\n+\t$(eval GO_VERSION := $(shell go version | cut -d \" \" -f 3 | cut -d. -f2))\n \tset -e; for dir in $(GO_MOD_DIRS); do \\\n+\t  if echo \"$${dir}\" | grep -q \"./example\" && [ \"$(GO_VERSION)\" = \"19\" ]; then \\\n+\t    echo \"Skipping go test in $${dir} due to Go version 1.19 and dir contains ./example\"; \\\n+\t    continue; \\\n+\t  fi; \\\n \t  echo \"go test in $${dir}\"; \\\n \t  (cd \"$${dir}\" && \\\n \t    go mod tidy -compat=1.18 && \\\n \t    go test && \\\n \t    go test ./... -short -race && \\\n \t    go test ./... -run=NONE -bench=. -benchmem && \\\n \t    env GOOS=linux GOARCH=386 go test && \\\n+\t    go test -coverprofile=coverage.txt -covermode=atomic ./... && \\\n \t    go vet); \\\n \tdone\n \tcd internal/customvet && go build .\n@@ -26,7 +32,7 @@ build:\n \n testdata/redis:\n \tmkdir -p $@\n-\twget -qO- https://download.redis.io/releases/redis-7.2.1.tar.gz | tar xvz --strip-components=1 -C $@\n+\twget -qO- https://download.redis.io/releases/redis-7.4-rc2.tar.gz  | tar xvz --strip-components=1 -C $@\n \n testdata/redis/src/redis-server: testdata/redis\n \tcd $< && make all"
    },
    {
      "sha": "37714a979614c9ccfb541a32d85cdc62d8151b16",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/README.md",
      "status": "modified",
      "additions": 30,
      "deletions": 5,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -3,6 +3,7 @@\n [![build workflow](https://github.com/redis/go-redis/actions/workflows/build.yml/badge.svg)](https://github.com/redis/go-redis/actions)\n [![PkgGoDev](https://pkg.go.dev/badge/github.com/redis/go-redis/v9)](https://pkg.go.dev/github.com/redis/go-redis/v9?tab=doc)\n [![Documentation](https://img.shields.io/badge/redis-documentation-informational)](https://redis.uptrace.dev/)\n+[![codecov](https://codecov.io/github/redis/go-redis/graph/badge.svg?token=tsrCZKuSSw)](https://codecov.io/github/redis/go-redis)\n [![Chat](https://discordapp.com/api/guilds/752070105847955518/widget.png)](https://discord.gg/rWtp5Aj)\n \n > go-redis is brought to you by :star: [**uptrace/uptrace**](https://github.com/uptrace/uptrace).\n@@ -51,8 +52,8 @@ key value NoSQL database that uses RocksDB as storage engine and is compatible w\n \n ## Features\n \n-- Redis 3 commands except QUIT, MONITOR, and SYNC.\n-- Automatic connection pooling with\n+- Redis commands except QUIT and SYNC.\n+- Automatic connection pooling.\n - [Pub/Sub](https://redis.uptrace.dev/guide/go-redis-pubsub.html).\n - [Pipelines and transactions](https://redis.uptrace.dev/guide/go-redis-pipelines.html).\n - [Scripting](https://redis.uptrace.dev/guide/lua-scripting.html).\n@@ -143,9 +144,6 @@ to this specification.\n \n ```go\n import (\n-    \"context\"\n-    \"fmt\"\n-\n     \"github.com/redis/go-redis/v9\"\n )\n \n@@ -161,6 +159,33 @@ func ExampleClient() *redis.Client {\n \n ```\n \n+\n+### Advanced Configuration\n+\n+go-redis supports extending the client identification phase to allow projects to send their own custom client identification.\n+\n+#### Default Client Identification\n+\n+By default, go-redis automatically sends the client library name and version during the connection process. This feature is available in redis-server as of version 7.2. As a result, the command is \"fire and forget\", meaning it should fail silently, in the case that the redis server does not support this feature.\n+\n+#### Disabling Identity Verification\n+\n+When connection identity verification is not required or needs to be explicitly disabled, a `DisableIndentity` configuration option exists. In V10 of this library, `DisableIndentity` will become `DisableIdentity` in order to fix the associated typo.\n+\n+To disable verification, set the `DisableIndentity` option to `true` in the Redis client options:\n+\n+```go\n+rdb := redis.NewClient(&redis.Options{\n+    Addr:            \"localhost:6379\",\n+    Password:        \"\",\n+    DB:              0,\n+    DisableIndentity: true, // Disable set-info on connect\n+})\n+```\n+\n+#### Unstable RESP3 Structures for RediSearch Commands\n+When integrating Redis with application functionalities using RESP3, it's important to note that some response structures aren't final yet. This is especially true for more complex structures like search and query results. We recommend using RESP2 when using the search and query capabilities, but we plan to stabilize the RESP3-based API-s in the coming versions. You can find more guidance in the upcoming release notes.\n+\n ## Contributing\n \n Please see [out contributing guidelines](CONTRIBUTING.md) to help us improve this library!"
    },
    {
      "sha": "a215582890eabb7521682b936802a1eb08a08cdc",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/bitmap_commands.go",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fbitmap_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fbitmap_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fbitmap_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -2,6 +2,7 @@ package redis\n \n import (\n \t\"context\"\n+\t\"errors\"\n )\n \n type BitMapCmdable interface {\n@@ -15,6 +16,7 @@ type BitMapCmdable interface {\n \tBitPos(ctx context.Context, key string, bit int64, pos ...int64) *IntCmd\n \tBitPosSpan(ctx context.Context, key string, bit int8, start, end int64, span string) *IntCmd\n \tBitField(ctx context.Context, key string, values ...interface{}) *IntSliceCmd\n+\tBitFieldRO(ctx context.Context, key string, values ...interface{}) *IntSliceCmd\n }\n \n func (c cmdable) GetBit(ctx context.Context, key string, offset int64) *IntCmd {\n@@ -37,16 +39,26 @@ func (c cmdable) SetBit(ctx context.Context, key string, offset int64, value int\n \n type BitCount struct {\n \tStart, End int64\n+\tUnit       string // BYTE(default) | BIT\n }\n \n+const BitCountIndexByte string = \"BYTE\"\n+const BitCountIndexBit string = \"BIT\"\n+\n func (c cmdable) BitCount(ctx context.Context, key string, bitCount *BitCount) *IntCmd {\n-\targs := []interface{}{\"bitcount\", key}\n+\targs := make([]any, 2, 5)\n+\targs[0] = \"bitcount\"\n+\targs[1] = key\n \tif bitCount != nil {\n-\t\targs = append(\n-\t\t\targs,\n-\t\t\tbitCount.Start,\n-\t\t\tbitCount.End,\n-\t\t)\n+\t\targs = append(args, bitCount.Start, bitCount.End)\n+\t\tif bitCount.Unit != \"\" {\n+\t\t\tif bitCount.Unit != BitCountIndexByte && bitCount.Unit != BitCountIndexBit {\n+\t\t\t\tcmd := NewIntCmd(ctx)\n+\t\t\t\tcmd.SetErr(errors.New(\"redis: invalid bitcount index\"))\n+\t\t\t\treturn cmd\n+\t\t\t}\n+\t\t\targs = append(args, bitCount.Unit)\n+\t\t}\n \t}\n \tcmd := NewIntCmd(ctx, args...)\n \t_ = c(ctx, cmd)"
    },
    {
      "sha": "4ced2979dcbb16719c1108d8ff5203ef005291d8",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/command.go",
      "status": "modified",
      "additions": 91,
      "deletions": 7,
      "changes": 98,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommand.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommand.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommand.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -40,7 +40,7 @@ type Cmder interface {\n \n \treadTimeout() *time.Duration\n \treadReply(rd *proto.Reader) error\n-\n+\treadRawReply(rd *proto.Reader) error\n \tSetErr(error)\n \tErr() error\n }\n@@ -122,11 +122,11 @@ func cmdString(cmd Cmder, val interface{}) string {\n //------------------------------------------------------------------------------\n \n type baseCmd struct {\n-\tctx    context.Context\n-\targs   []interface{}\n-\terr    error\n-\tkeyPos int8\n-\n+\tctx          context.Context\n+\targs         []interface{}\n+\terr          error\n+\tkeyPos       int8\n+\trawVal       interface{}\n \t_readTimeout *time.Duration\n }\n \n@@ -197,6 +197,11 @@ func (cmd *baseCmd) setReadTimeout(d time.Duration) {\n \tcmd._readTimeout = &d\n }\n \n+func (cmd *baseCmd) readRawReply(rd *proto.Reader) (err error) {\n+\tcmd.rawVal, err = rd.ReadReply()\n+\treturn err\n+}\n+\n //------------------------------------------------------------------------------\n \n type Cmd struct {\n@@ -573,6 +578,10 @@ func (cmd *StatusCmd) Result() (string, error) {\n \treturn cmd.val, cmd.err\n }\n \n+func (cmd *StatusCmd) Bytes() ([]byte, error) {\n+\treturn util.StringToBytes(cmd.val), cmd.err\n+}\n+\n func (cmd *StatusCmd) String() string {\n \treturn cmdString(cmd, cmd.val)\n }\n@@ -3783,6 +3792,65 @@ func (cmd *MapStringStringSliceCmd) readReply(rd *proto.Reader) error {\n \treturn nil\n }\n \n+// -----------------------------------------------------------------------\n+// MapStringInterfaceCmd represents a command that returns a map of strings to interface{}.\n+type MapMapStringInterfaceCmd struct {\n+\tbaseCmd\n+\tval map[string]interface{}\n+}\n+\n+func NewMapMapStringInterfaceCmd(ctx context.Context, args ...interface{}) *MapMapStringInterfaceCmd {\n+\treturn &MapMapStringInterfaceCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t}\n+}\n+\n+func (cmd *MapMapStringInterfaceCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *MapMapStringInterfaceCmd) SetVal(val map[string]interface{}) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *MapMapStringInterfaceCmd) Result() (map[string]interface{}, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *MapMapStringInterfaceCmd) Val() map[string]interface{} {\n+\treturn cmd.val\n+}\n+\n+func (cmd *MapMapStringInterfaceCmd) readReply(rd *proto.Reader) (err error) {\n+\tn, err := rd.ReadArrayLen()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tdata := make(map[string]interface{}, n/2)\n+\tfor i := 0; i < n; i += 2 {\n+\t\t_, err := rd.ReadArrayLen()\n+\t\tif err != nil {\n+\t\t\tcmd.err = err\n+\t\t}\n+\t\tkey, err := rd.ReadString()\n+\t\tif err != nil {\n+\t\t\tcmd.err = err\n+\t\t}\n+\t\tvalue, err := rd.ReadString()\n+\t\tif err != nil {\n+\t\t\tcmd.err = err\n+\t\t}\n+\t\tdata[key] = value\n+\t}\n+\n+\tcmd.val = data\n+\treturn nil\n+}\n+\n //-----------------------------------------------------------------------\n \n type MapStringInterfaceSliceCmd struct {\n@@ -4997,6 +5065,7 @@ type ClientInfo struct {\n \tPSub               int           // number of pattern matching subscriptions\n \tSSub               int           // redis version 7.0.3, number of shard channel subscriptions\n \tMulti              int           // number of commands in a MULTI/EXEC context\n+\tWatch              int           // redis version 7.4 RC1, number of keys this client is currently watching.\n \tQueryBuf           int           // qbuf, query buffer length (0 means no query pending)\n \tQueryBufFree       int           // qbuf-free, free space of the query buffer (0 means the buffer is full)\n \tArgvMem            int           // incomplete arguments for the next command (already extracted from query buffer)\n@@ -5149,6 +5218,8 @@ func parseClientInfo(txt string) (info *ClientInfo, err error) {\n \t\t\tinfo.SSub, err = strconv.Atoi(val)\n \t\tcase \"multi\":\n \t\t\tinfo.Multi, err = strconv.Atoi(val)\n+\t\tcase \"watch\":\n+\t\t\tinfo.Watch, err = strconv.Atoi(val)\n \t\tcase \"qbuf\":\n \t\t\tinfo.QueryBuf, err = strconv.Atoi(val)\n \t\tcase \"qbuf-free\":\n@@ -5310,6 +5381,16 @@ type LibraryInfo struct {\n \tLibVer  *string\n }\n \n+// WithLibraryName returns a valid LibraryInfo with library name only.\n+func WithLibraryName(libName string) LibraryInfo {\n+\treturn LibraryInfo{LibName: &libName}\n+}\n+\n+// WithLibraryVersion returns a valid LibraryInfo with library version only.\n+func WithLibraryVersion(libVer string) LibraryInfo {\n+\treturn LibraryInfo{LibVer: &libVer}\n+}\n+\n // -------------------------------------------\n \n type InfoCmd struct {\n@@ -5444,9 +5525,12 @@ func (cmd *MonitorCmd) readMonitor(rd *proto.Reader, cancel context.CancelFunc)\n \tfor {\n \t\tcmd.mu.Lock()\n \t\tst := cmd.status\n+\t\tpk, _ := rd.Peek(1)\n \t\tcmd.mu.Unlock()\n-\t\tif pk, _ := rd.Peek(1); len(pk) != 0 && st == monitorStatusStart {\n+\t\tif len(pk) != 0 && st == monitorStatusStart {\n+\t\t\tcmd.mu.Lock()\n \t\t\tline, err := rd.ReadString()\n+\t\t\tcmd.mu.Unlock()\n \t\t\tif err != nil {\n \t\t\t\treturn err\n \t\t\t}"
    },
    {
      "sha": "034daa2350fe9432208cfcba6a455d792e78ea57",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/commands.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fcommands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -220,6 +220,7 @@ type Cmdable interface {\n \tProbabilisticCmdable\n \tPubSubCmdable\n \tScriptingFunctionsCmdable\n+\tSearchCmdable\n \tSetCmdable\n \tSortedSetCmdable\n \tStringCmdable\n@@ -309,7 +310,7 @@ func (c statefulCmdable) ClientSetInfo(ctx context.Context, info LibraryInfo) *S\n \n \tvar cmd *StatusCmd\n \tif info.LibName != nil {\n-\t\tlibName := fmt.Sprintf(\"go-redis(%s,%s)\", *info.LibName, runtime.Version())\n+\t\tlibName := fmt.Sprintf(\"go-redis(%s,%s)\", *info.LibName, internal.ReplaceSpaces(runtime.Version()))\n \t\tcmd = NewStatusCmd(ctx, \"client\", \"setinfo\", \"LIB-NAME\", libName)\n \t} else {\n \t\tcmd = NewStatusCmd(ctx, \"client\", \"setinfo\", \"LIB-VER\", *info.LibVer)"
    },
    {
      "sha": "9b348193a4b5e88c42d58a80cfb6b207a6f448f5",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/error.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ferror.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ferror.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ferror.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -7,6 +7,7 @@ import (\n \t\"net\"\n \t\"strings\"\n \n+\t\"github.com/redis/go-redis/v9/internal\"\n \t\"github.com/redis/go-redis/v9/internal/pool\"\n \t\"github.com/redis/go-redis/v9/internal/proto\"\n )\n@@ -129,7 +130,9 @@ func isMovedError(err error) (moved bool, ask bool, addr string) {\n \tif ind == -1 {\n \t\treturn false, false, \"\"\n \t}\n+\n \taddr = s[ind+1:]\n+\taddr = internal.GetAddr(addr)\n \treturn\n }\n "
    },
    {
      "sha": "dc6c3fe014674cf1e23afedf5a7669a0851d2512",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/generic_commands.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fgeneric_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fgeneric_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fgeneric_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -19,6 +19,7 @@ type GenericCmdable interface {\n \tKeys(ctx context.Context, pattern string) *StringSliceCmd\n \tMigrate(ctx context.Context, host, port, key string, db int, timeout time.Duration) *StatusCmd\n \tMove(ctx context.Context, key string, db int) *BoolCmd\n+\tObjectFreq(ctx context.Context, key string) *IntCmd\n \tObjectRefCount(ctx context.Context, key string) *IntCmd\n \tObjectEncoding(ctx context.Context, key string) *StringCmd\n \tObjectIdleTime(ctx context.Context, key string) *DurationCmd\n@@ -159,6 +160,12 @@ func (c cmdable) Move(ctx context.Context, key string, db int) *BoolCmd {\n \treturn cmd\n }\n \n+func (c cmdable) ObjectFreq(ctx context.Context, key string) *IntCmd {\n+\tcmd := NewIntCmd(ctx, \"object\", \"freq\", key)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n func (c cmdable) ObjectRefCount(ctx context.Context, key string) *IntCmd {\n \tcmd := NewIntCmd(ctx, \"object\", \"refcount\", key)\n \t_ = c(ctx, cmd)"
    },
    {
      "sha": "dcffdcdd98e4d4d7dcb6aadea821b3db60ed3c08",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/hash_commands.go",
      "status": "modified",
      "additions": 277,
      "deletions": 1,
      "changes": 278,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fhash_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fhash_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fhash_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,6 +1,9 @@\n package redis\n \n-import \"context\"\n+import (\n+\t\"context\"\n+\t\"time\"\n+)\n \n type HashCmdable interface {\n \tHDel(ctx context.Context, key string, fields ...string) *IntCmd\n@@ -16,9 +19,23 @@ type HashCmdable interface {\n \tHMSet(ctx context.Context, key string, values ...interface{}) *BoolCmd\n \tHSetNX(ctx context.Context, key, field string, value interface{}) *BoolCmd\n \tHScan(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd\n+\tHScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd\n \tHVals(ctx context.Context, key string) *StringSliceCmd\n \tHRandField(ctx context.Context, key string, count int) *StringSliceCmd\n \tHRandFieldWithValues(ctx context.Context, key string, count int) *KeyValueSliceCmd\n+\tHExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd\n+\tHExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd\n+\tHPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd\n+\tHPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd\n+\tHExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd\n+\tHExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd\n+\tHPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd\n+\tHPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd\n+\tHPersist(ctx context.Context, key string, fields ...string) *IntSliceCmd\n+\tHExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd\n+\tHPExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd\n+\tHTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd\n+\tHPTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd\n }\n \n func (c cmdable) HDel(ctx context.Context, key string, fields ...string) *IntCmd {\n@@ -172,3 +189,262 @@ func (c cmdable) HScan(ctx context.Context, key string, cursor uint64, match str\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n+\n+func (c cmdable) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *ScanCmd {\n+\targs := []interface{}{\"hscan\", key, cursor}\n+\tif match != \"\" {\n+\t\targs = append(args, \"match\", match)\n+\t}\n+\tif count > 0 {\n+\t\targs = append(args, \"count\", count)\n+\t}\n+\targs = append(args, \"novalues\")\n+\tcmd := NewScanCmd(ctx, c, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+type HExpireArgs struct {\n+\tNX bool\n+\tXX bool\n+\tGT bool\n+\tLT bool\n+}\n+\n+// HExpire - Sets the expiration time for specified fields in a hash in seconds.\n+// The command constructs an argument list starting with \"HEXPIRE\", followed by the key, duration, any conditional flags, and the specified fields.\n+// For more information - https://redis.io/commands/hexpire/\n+func (c cmdable) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HEXPIRE\", key, formatSec(ctx, expiration), \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HExpire - Sets the expiration time for specified fields in a hash in seconds.\n+// It requires a key, an expiration duration, a struct with boolean flags for conditional expiration settings (NX, XX, GT, LT), and a list of fields.\n+// The command constructs an argument list starting with \"HEXPIRE\", followed by the key, duration, any conditional flags, and the specified fields.\n+// For more information - https://redis.io/commands/hexpire/\n+func (c cmdable) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HEXPIRE\", key, formatSec(ctx, expiration)}\n+\n+\t// only if one argument is true, we can add it to the args\n+\t// if more than one argument is true, it will cause an error\n+\tif expirationArgs.NX {\n+\t\targs = append(args, \"NX\")\n+\t} else if expirationArgs.XX {\n+\t\targs = append(args, \"XX\")\n+\t} else if expirationArgs.GT {\n+\t\targs = append(args, \"GT\")\n+\t} else if expirationArgs.LT {\n+\t\targs = append(args, \"LT\")\n+\t}\n+\n+\targs = append(args, \"FIELDS\", len(fields))\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HPExpire - Sets the expiration time for specified fields in a hash in milliseconds.\n+// Similar to HExpire, it accepts a key, an expiration duration in milliseconds, a struct with expiration condition flags, and a list of fields.\n+// The command modifies the standard time.Duration to milliseconds for the Redis command.\n+// For more information - https://redis.io/commands/hpexpire/\n+func (c cmdable) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPEXPIRE\", key, formatMs(ctx, expiration), \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+func (c cmdable) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPEXPIRE\", key, formatMs(ctx, expiration)}\n+\n+\t// only if one argument is true, we can add it to the args\n+\t// if more than one argument is true, it will cause an error\n+\tif expirationArgs.NX {\n+\t\targs = append(args, \"NX\")\n+\t} else if expirationArgs.XX {\n+\t\targs = append(args, \"XX\")\n+\t} else if expirationArgs.GT {\n+\t\targs = append(args, \"GT\")\n+\t} else if expirationArgs.LT {\n+\t\targs = append(args, \"LT\")\n+\t}\n+\n+\targs = append(args, \"FIELDS\", len(fields))\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HExpireAt - Sets the expiration time for specified fields in a hash to a UNIX timestamp in seconds.\n+// Takes a key, a UNIX timestamp, a struct of conditional flags, and a list of fields.\n+// The command sets absolute expiration times based on the UNIX timestamp provided.\n+// For more information - https://redis.io/commands/hexpireat/\n+func (c cmdable) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd {\n+\n+\targs := []interface{}{\"HEXPIREAT\", key, tm.Unix(), \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+func (c cmdable) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HEXPIREAT\", key, tm.Unix()}\n+\n+\t// only if one argument is true, we can add it to the args\n+\t// if more than one argument is true, it will cause an error\n+\tif expirationArgs.NX {\n+\t\targs = append(args, \"NX\")\n+\t} else if expirationArgs.XX {\n+\t\targs = append(args, \"XX\")\n+\t} else if expirationArgs.GT {\n+\t\targs = append(args, \"GT\")\n+\t} else if expirationArgs.LT {\n+\t\targs = append(args, \"LT\")\n+\t}\n+\n+\targs = append(args, \"FIELDS\", len(fields))\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HPExpireAt - Sets the expiration time for specified fields in a hash to a UNIX timestamp in milliseconds.\n+// Similar to HExpireAt but for timestamps in milliseconds. It accepts the same parameters and adjusts the UNIX time to milliseconds.\n+// For more information - https://redis.io/commands/hpexpireat/\n+func (c cmdable) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPEXPIREAT\", key, tm.UnixNano() / int64(time.Millisecond), \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+func (c cmdable) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs HExpireArgs, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPEXPIREAT\", key, tm.UnixNano() / int64(time.Millisecond)}\n+\n+\t// only if one argument is true, we can add it to the args\n+\t// if more than one argument is true, it will cause an error\n+\tif expirationArgs.NX {\n+\t\targs = append(args, \"NX\")\n+\t} else if expirationArgs.XX {\n+\t\targs = append(args, \"XX\")\n+\t} else if expirationArgs.GT {\n+\t\targs = append(args, \"GT\")\n+\t} else if expirationArgs.LT {\n+\t\targs = append(args, \"LT\")\n+\t}\n+\n+\targs = append(args, \"FIELDS\", len(fields))\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HPersist - Removes the expiration time from specified fields in a hash.\n+// Accepts a key and the fields themselves.\n+// This command ensures that each field specified will have its expiration removed if present.\n+// For more information - https://redis.io/commands/hpersist/\n+func (c cmdable) HPersist(ctx context.Context, key string, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPERSIST\", key, \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HExpireTime - Retrieves the expiration time for specified fields in a hash as a UNIX timestamp in seconds.\n+// Requires a key and the fields themselves to fetch their expiration timestamps.\n+// This command returns the expiration times for each field or error/status codes for each field as specified.\n+// For more information - https://redis.io/commands/hexpiretime/\n+func (c cmdable) HExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HEXPIRETIME\", key, \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HPExpireTime - Retrieves the expiration time for specified fields in a hash as a UNIX timestamp in milliseconds.\n+// Similar to HExpireTime, adjusted for timestamps in milliseconds. It requires the same parameters.\n+// Provides the expiration timestamp for each field in milliseconds.\n+// For more information - https://redis.io/commands/hexpiretime/\n+func (c cmdable) HPExpireTime(ctx context.Context, key string, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPEXPIRETIME\", key, \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HTTL - Retrieves the remaining time to live for specified fields in a hash in seconds.\n+// Requires a key and the fields themselves. It returns the TTL for each specified field.\n+// This command fetches the TTL in seconds for each field or returns error/status codes as appropriate.\n+// For more information - https://redis.io/commands/httl/\n+func (c cmdable) HTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HTTL\", key, \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// HPTTL - Retrieves the remaining time to live for specified fields in a hash in milliseconds.\n+// Similar to HTTL, but returns the TTL in milliseconds. It requires a key and the specified fields.\n+// This command provides the TTL in milliseconds for each field or returns error/status codes as needed.\n+// For more information - https://redis.io/commands/hpttl/\n+func (c cmdable) HPTTL(ctx context.Context, key string, fields ...string) *IntSliceCmd {\n+\targs := []interface{}{\"HPTTL\", key, \"FIELDS\", len(fields)}\n+\n+\tfor _, field := range fields {\n+\t\targs = append(args, field)\n+\t}\n+\tcmd := NewIntSliceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}"
    },
    {
      "sha": "2125f3e133b8ad5485d7a33752f25bb4a8f4b7a6",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/internal/pool/pool.go",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Fpool%2Fpool.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Fpool%2Fpool.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Fpool%2Fpool.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -168,9 +168,12 @@ func (p *ConnPool) newConn(ctx context.Context, pooled bool) (*Conn, error) {\n \t\treturn nil, ErrClosed\n \t}\n \n+\tp.connsMu.Lock()\n \tif p.cfg.MaxActiveConns > 0 && p.poolSize >= p.cfg.MaxActiveConns {\n+\t\tp.connsMu.Unlock()\n \t\treturn nil, ErrPoolExhausted\n \t}\n+\tp.connsMu.Unlock()\n \n \tcn, err := p.dialConn(ctx, pooled)\n \tif err != nil {\n@@ -180,6 +183,11 @@ func (p *ConnPool) newConn(ctx context.Context, pooled bool) (*Conn, error) {\n \tp.connsMu.Lock()\n \tdefer p.connsMu.Unlock()\n \n+\tif p.cfg.MaxActiveConns > 0 && p.poolSize >= p.cfg.MaxActiveConns {\n+\t\t_ = cn.Close()\n+\t\treturn nil, ErrPoolExhausted\n+\t}\n+\n \tp.conns = append(p.conns, cn)\n \tif pooled {\n \t\t// If pool is full remove the cn on next Put."
    },
    {
      "sha": "cc1bff24e686e201df7c9dbbb11833a0fabf6643",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/internal/util.go",
      "status": "modified",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Futil.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Futil.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Finternal%2Futil.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -2,6 +2,9 @@ package internal\n \n import (\n \t\"context\"\n+\t\"net\"\n+\t\"strconv\"\n+\t\"strings\"\n \t\"time\"\n \n \t\"github.com/redis/go-redis/v9/internal/util\"\n@@ -44,3 +47,82 @@ func isLower(s string) bool {\n \t}\n \treturn true\n }\n+\n+func ReplaceSpaces(s string) string {\n+\t// Pre-allocate a builder with the same length as s to minimize allocations.\n+\t// This is a basic optimization; adjust the initial size based on your use case.\n+\tvar builder strings.Builder\n+\tbuilder.Grow(len(s))\n+\n+\tfor _, char := range s {\n+\t\tif char == ' ' {\n+\t\t\t// Replace space with a hyphen.\n+\t\t\tbuilder.WriteRune('-')\n+\t\t} else {\n+\t\t\t// Copy the character as-is.\n+\t\t\tbuilder.WriteRune(char)\n+\t\t}\n+\t}\n+\n+\treturn builder.String()\n+}\n+\n+func GetAddr(addr string) string {\n+\tind := strings.LastIndexByte(addr, ':')\n+\tif ind == -1 {\n+\t\treturn \"\"\n+\t}\n+\n+\tif strings.IndexByte(addr, '.') != -1 {\n+\t\treturn addr\n+\t}\n+\n+\tif addr[0] == '[' {\n+\t\treturn addr\n+\t}\n+\treturn net.JoinHostPort(addr[:ind], addr[ind+1:])\n+}\n+\n+func ToInteger(val interface{}) int {\n+\tswitch v := val.(type) {\n+\tcase int:\n+\t\treturn v\n+\tcase int64:\n+\t\treturn int(v)\n+\tcase string:\n+\t\ti, _ := strconv.Atoi(v)\n+\t\treturn i\n+\tdefault:\n+\t\treturn 0\n+\t}\n+}\n+\n+func ToFloat(val interface{}) float64 {\n+\tswitch v := val.(type) {\n+\tcase float64:\n+\t\treturn v\n+\tcase string:\n+\t\tf, _ := strconv.ParseFloat(v, 64)\n+\t\treturn f\n+\tdefault:\n+\t\treturn 0.0\n+\t}\n+}\n+\n+func ToString(val interface{}) string {\n+\tif str, ok := val.(string); ok {\n+\t\treturn str\n+\t}\n+\treturn \"\"\n+}\n+\n+func ToStringSlice(val interface{}) []string {\n+\tif arr, ok := val.([]interface{}); ok {\n+\t\tresult := make([]string, len(arr))\n+\t\tfor i, v := range arr {\n+\t\t\tresult[i] = ToString(v)\n+\t\t}\n+\t\treturn result\n+\t}\n+\treturn nil\n+}"
    },
    {
      "sha": "b3cadf4b7951a4c92c91f6c66f39ba2faa2cec32",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/json.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fjson.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fjson.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fjson.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -60,7 +60,7 @@ type JSONArrTrimArgs struct {\n type JSONCmd struct {\n \tbaseCmd\n \tval      string\n-\texpanded []interface{}\n+\texpanded interface{}\n }\n \n var _ Cmder = (*JSONCmd)(nil)\n@@ -100,11 +100,11 @@ func (cmd *JSONCmd) Result() (string, error) {\n \treturn cmd.Val(), cmd.Err()\n }\n \n-func (cmd JSONCmd) Expanded() (interface{}, error) {\n+func (cmd *JSONCmd) Expanded() (interface{}, error) {\n \tif len(cmd.val) != 0 && cmd.expanded == nil {\n \t\terr := json.Unmarshal([]byte(cmd.val), &cmd.expanded)\n \t\tif err != nil {\n-\t\t\treturn \"\", err\n+\t\t\treturn nil, err\n \t\t}\n \t}\n \n@@ -494,7 +494,7 @@ func (c cmdable) JSONMSet(ctx context.Context, params ...interface{}) *StatusCmd\n }\n \n // JSONNumIncrBy increments the number value stored at the specified path by the provided number.\n-// For more information, see https://redis.io/commands/json.numincreby\n+// For more information, see https://redis.io/docs/latest/commands/json.numincrby/\n func (c cmdable) JSONNumIncrBy(ctx context.Context, key, path string, value float64) *JSONCmd {\n \targs := []interface{}{\"JSON.NUMINCRBY\", key, path, value}\n \tcmd := newJSONCmd(ctx, args...)"
    },
    {
      "sha": "8ba74ccd1a5b4843d53c11c44ac23a22812c503f",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/options.go",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Foptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Foptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Foptions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -61,6 +61,12 @@ type Options struct {\n \t// before reconnecting. It should return the current username and password.\n \tCredentialsProvider func() (username string, password string)\n \n+\t// CredentialsProviderContext is an enhanced parameter of CredentialsProvider,\n+\t// done to maintain API compatibility. In the future,\n+\t// there might be a merge between CredentialsProviderContext and CredentialsProvider.\n+\t// There will be a conflict between them; if CredentialsProviderContext exists, we will ignore CredentialsProvider.\n+\tCredentialsProviderContext func(ctx context.Context) (username string, password string, err error)\n+\n \t// Database to be selected after connecting to the server.\n \tDB int\n \n@@ -147,6 +153,9 @@ type Options struct {\n \n \t// Add suffix to client name. Default is empty.\n \tIdentitySuffix string\n+\n+\t// Enable Unstable mode for Redis Search module with RESP3.\n+\tUnstableResp3 bool\n }\n \n func (opt *Options) init() {\n@@ -235,7 +244,7 @@ func NewDialer(opt *Options) func(context.Context, string, string) (net.Conn, er\n \t}\n }\n \n-// ParseURL parses an URL into Options that can be used to connect to Redis.\n+// ParseURL parses a URL into Options that can be used to connect to Redis.\n // Scheme is required.\n // There are two connection types: by tcp socket and by unix socket.\n // Tcp connection:\n@@ -250,12 +259,12 @@ func NewDialer(opt *Options) func(context.Context, string, string) (net.Conn, er\n //   - field names are mapped using snake-case conversion: to set MaxRetries, use max_retries\n //   - only scalar type fields are supported (bool, int, time.Duration)\n //   - for time.Duration fields, values must be a valid input for time.ParseDuration();\n-//     additionally a plain integer as value (i.e. without unit) is intepreted as seconds\n+//     additionally a plain integer as value (i.e. without unit) is interpreted as seconds\n //   - to disable a duration field, use value less than or equal to 0; to use the default\n //     value, leave the value blank or remove the parameter\n //   - only the last value is interpreted if a parameter is given multiple times\n //   - fields \"network\", \"addr\", \"username\" and \"password\" can only be set using other\n-//     URL attributes (scheme, host, userinfo, resp.), query paremeters using these\n+//     URL attributes (scheme, host, userinfo, resp.), query parameters using these\n //     names will be treated as unknown parameters\n //   - unknown parameter names will result in an error\n //"
    },
    {
      "sha": "ce258ff36349e7f440c61d14c680abc9a1de39b5",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/osscluster.go",
      "status": "modified",
      "additions": 53,
      "deletions": 21,
      "changes": 74,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fosscluster.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fosscluster.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fosscluster.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -62,9 +62,11 @@ type ClusterOptions struct {\n \n \tOnConnect func(ctx context.Context, cn *Conn) error\n \n-\tProtocol int\n-\tUsername string\n-\tPassword string\n+\tProtocol                   int\n+\tUsername                   string\n+\tPassword                   string\n+\tCredentialsProvider        func() (username string, password string)\n+\tCredentialsProviderContext func(ctx context.Context) (username string, password string, err error)\n \n \tMaxRetries      int\n \tMinRetryBackoff time.Duration\n@@ -156,12 +158,12 @@ func (opt *ClusterOptions) init() {\n //   - field names are mapped using snake-case conversion: to set MaxRetries, use max_retries\n //   - only scalar type fields are supported (bool, int, time.Duration)\n //   - for time.Duration fields, values must be a valid input for time.ParseDuration();\n-//     additionally a plain integer as value (i.e. without unit) is intepreted as seconds\n+//     additionally a plain integer as value (i.e. without unit) is interpreted as seconds\n //   - to disable a duration field, use value less than or equal to 0; to use the default\n //     value, leave the value blank or remove the parameter\n //   - only the last value is interpreted if a parameter is given multiple times\n //   - fields \"network\", \"addr\", \"username\" and \"password\" can only be set using other\n-//     URL attributes (scheme, host, userinfo, resp.), query paremeters using these\n+//     URL attributes (scheme, host, userinfo, resp.), query parameters using these\n //     names will be treated as unknown parameters\n //   - unknown parameter names will result in an error\n //\n@@ -271,9 +273,11 @@ func (opt *ClusterOptions) clientOptions() *Options {\n \t\tDialer:     opt.Dialer,\n \t\tOnConnect:  opt.OnConnect,\n \n-\t\tProtocol: opt.Protocol,\n-\t\tUsername: opt.Username,\n-\t\tPassword: opt.Password,\n+\t\tProtocol:                   opt.Protocol,\n+\t\tUsername:                   opt.Username,\n+\t\tPassword:                   opt.Password,\n+\t\tCredentialsProvider:        opt.CredentialsProvider,\n+\t\tCredentialsProviderContext: opt.CredentialsProviderContext,\n \n \t\tMaxRetries:      opt.MaxRetries,\n \t\tMinRetryBackoff: opt.MinRetryBackoff,\n@@ -337,6 +341,8 @@ func (n *clusterNode) Close() error {\n \treturn n.Client.Close()\n }\n \n+const maximumNodeLatency = 1 * time.Minute\n+\n func (n *clusterNode) updateLatency() {\n \tconst numProbe = 10\n \tvar dur uint64\n@@ -357,7 +363,7 @@ func (n *clusterNode) updateLatency() {\n \tif successes == 0 {\n \t\t// If none of the pings worked, set latency to some arbitrarily high value so this node gets\n \t\t// least priority.\n-\t\tlatency = float64((1 * time.Minute) / time.Microsecond)\n+\t\tlatency = float64((maximumNodeLatency) / time.Microsecond)\n \t} else {\n \t\tlatency = float64(dur) / float64(successes)\n \t}\n@@ -731,20 +737,40 @@ func (c *clusterState) slotClosestNode(slot int) (*clusterNode, error) {\n \t\treturn c.nodes.Random()\n \t}\n \n-\tvar node *clusterNode\n+\tvar allNodesFailing = true\n+\tvar (\n+\t\tclosestNonFailingNode *clusterNode\n+\t\tclosestNode           *clusterNode\n+\t\tminLatency            time.Duration\n+\t)\n+\n+\t// setting the max possible duration as zerovalue for minlatency\n+\tminLatency = time.Duration(math.MaxInt64)\n+\n \tfor _, n := range nodes {\n-\t\tif n.Failing() {\n-\t\t\tcontinue\n-\t\t}\n-\t\tif node == nil || n.Latency() < node.Latency() {\n-\t\t\tnode = n\n+\t\tif closestNode == nil || n.Latency() < minLatency {\n+\t\t\tclosestNode = n\n+\t\t\tminLatency = n.Latency()\n+\t\t\tif !n.Failing() {\n+\t\t\t\tclosestNonFailingNode = n\n+\t\t\t\tallNodesFailing = false\n+\t\t\t}\n \t\t}\n \t}\n-\tif node != nil {\n-\t\treturn node, nil\n+\n+\t// pick the healthly node with the lowest latency\n+\tif !allNodesFailing && closestNonFailingNode != nil {\n+\t\treturn closestNonFailingNode, nil\n+\t}\n+\n+\t// if all nodes are failing, we will pick the temporarily failing node with lowest latency\n+\tif minLatency < maximumNodeLatency && closestNode != nil {\n+\t\tinternal.Logger.Printf(context.TODO(), \"redis: all nodes are marked as failed, picking the temporarily failing node with lowest latency\")\n+\t\treturn closestNode, nil\n \t}\n \n-\t// If all nodes are failing - return random node\n+\t// If all nodes are having the maximum latency(all pings are failing) - return a random node across the cluster\n+\tinternal.Logger.Printf(context.TODO(), \"redis: pings to all nodes are failing, picking a random node across the cluster\")\n \treturn c.nodes.Random()\n }\n \n@@ -912,10 +938,13 @@ func (c *ClusterClient) Process(ctx context.Context, cmd Cmder) error {\n func (c *ClusterClient) process(ctx context.Context, cmd Cmder) error {\n \tslot := c.cmdSlot(ctx, cmd)\n \tvar node *clusterNode\n+\tvar moved bool\n \tvar ask bool\n \tvar lastErr error\n \tfor attempt := 0; attempt <= c.opt.MaxRedirects; attempt++ {\n-\t\tif attempt > 0 {\n+\t\t// MOVED and ASK responses are not transient errors that require retry delay; they\n+\t\t// should be attempted immediately.\n+\t\tif attempt > 0 && !moved && !ask {\n \t\t\tif err := internal.Sleep(ctx, c.retryBackoff(attempt)); err != nil {\n \t\t\t\treturn err\n \t\t\t}\n@@ -959,7 +988,6 @@ func (c *ClusterClient) process(ctx context.Context, cmd Cmder) error {\n \t\t\tcontinue\n \t\t}\n \n-\t\tvar moved bool\n \t\tvar addr string\n \t\tmoved, ask, addr = isMovedError(lastErr)\n \t\tif moved || ask {\n@@ -1293,6 +1321,7 @@ func (c *ClusterClient) processPipelineNode(\n \t_ = node.Client.withProcessPipelineHook(ctx, cmds, func(ctx context.Context, cmds []Cmder) error {\n \t\tcn, err := node.Client.getConn(ctx)\n \t\tif err != nil {\n+\t\t\tnode.MarkAsFailing()\n \t\t\t_ = c.mapCmdsByNode(ctx, failedCmds, cmds)\n \t\t\tsetCmdsErr(cmds, err)\n \t\t\treturn err\n@@ -1314,6 +1343,9 @@ func (c *ClusterClient) processPipelineNodeConn(\n \tif err := cn.WithWriter(c.context(ctx), c.opt.WriteTimeout, func(wr *proto.Writer) error {\n \t\treturn writeCmds(wr, cmds)\n \t}); err != nil {\n+\t\tif isBadConn(err, false, node.Client.getAddr()) {\n+\t\t\tnode.MarkAsFailing()\n+\t\t}\n \t\tif shouldRetry(err, true) {\n \t\t\t_ = c.mapCmdsByNode(ctx, failedCmds, cmds)\n \t\t}\n@@ -1345,7 +1377,7 @@ func (c *ClusterClient) pipelineReadCmds(\n \t\t\tcontinue\n \t\t}\n \n-\t\tif c.opt.ReadOnly {\n+\t\tif c.opt.ReadOnly && isBadConn(err, false, node.Client.getAddr()) {\n \t\t\tnode.MarkAsFailing()\n \t\t}\n "
    },
    {
      "sha": "1a690047de4fbe06538d4d175ea4a3ed2ec59199",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/package.json",
      "status": "removed",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/81f70aa287c8e9b80793677069d8f313bfbfb58a/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpackage.json",
      "raw_url": "https://github.com/umputun/remark42/raw/81f70aa287c8e9b80793677069d8f313bfbfb58a/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpackage.json?ref=81f70aa287c8e9b80793677069d8f313bfbfb58a",
      "patch": "@@ -1,8 +0,0 @@\n-{\n-  \"name\": \"redis\",\n-  \"version\": \"9.4.0\",\n-  \"main\": \"index.js\",\n-  \"repository\": \"git@github.com:redis/go-redis.git\",\n-  \"author\": \"Vladimir Mihailenco <vladimir.webdev@gmail.com>\",\n-  \"license\": \"BSD-2-clause\"\n-}"
    },
    {
      "sha": "72b18f49a736219751975bf47daa0c870de1b41c",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/pubsub.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpubsub.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpubsub.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fpubsub.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -84,7 +84,7 @@ func (c *PubSub) conn(ctx context.Context, newChannels []string) (*pool.Conn, er\n }\n \n func (c *PubSub) writeCmd(ctx context.Context, cn *pool.Conn, cmd Cmder) error {\n-\treturn cn.WithWriter(context.Background(), c.opt.WriteTimeout, func(wr *proto.Writer) error {\n+\treturn cn.WithWriter(ctx, c.opt.WriteTimeout, func(wr *proto.Writer) error {\n \t\treturn writeCmd(wr, cmd)\n \t})\n }\n@@ -491,7 +491,7 @@ func (c *PubSub) getContext() context.Context {\n // Receive* APIs can not be used after channel is created.\n //\n // go-redis periodically sends ping messages to test connection health\n-// and re-subscribes if ping can not not received for 1 minute.\n+// and re-subscribes if ping can not received for 1 minute.\n func (c *PubSub) Channel(opts ...ChannelOption) <-chan *Message {\n \tc.chOnce.Do(func() {\n \t\tc.msgCh = newChannel(c, opts...)"
    },
    {
      "sha": "c8b50080908a3cf5dcfaa04160212580e67001be",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/redis.go",
      "status": "modified",
      "additions": 40,
      "deletions": 16,
      "changes": 56,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fredis.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fredis.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fredis.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -283,8 +283,13 @@ func (c *baseClient) initConn(ctx context.Context, cn *pool.Conn) error {\n \t}\n \tcn.Inited = true\n \n+\tvar err error\n \tusername, password := c.opt.Username, c.opt.Password\n-\tif c.opt.CredentialsProvider != nil {\n+\tif c.opt.CredentialsProviderContext != nil {\n+\t\tif username, password, err = c.opt.CredentialsProviderContext(ctx); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t} else if c.opt.CredentialsProvider != nil {\n \t\tusername, password = c.opt.CredentialsProvider()\n \t}\n \n@@ -300,7 +305,7 @@ func (c *baseClient) initConn(ctx context.Context, cn *pool.Conn) error {\n \n \t// for redis-server versions that do not support the HELLO command,\n \t// RESP2 will continue to be used.\n-\tif err := conn.Hello(ctx, protocol, username, password, \"\").Err(); err == nil {\n+\tif err = conn.Hello(ctx, protocol, username, password, \"\").Err(); err == nil {\n \t\tauth = true\n \t} else if !isRedisError(err) {\n \t\t// When the server responds with the RESP protocol and the result is not a normal\n@@ -312,18 +317,8 @@ func (c *baseClient) initConn(ctx context.Context, cn *pool.Conn) error {\n \t\t// difficult to rely on error strings to determine all results.\n \t\treturn err\n \t}\n-\tif !c.opt.DisableIndentity {\n-\t\tlibName := \"\"\n-\t\tlibVer := Version()\n-\t\tif c.opt.IdentitySuffix != \"\" {\n-\t\t\tlibName = c.opt.IdentitySuffix\n-\t\t}\n-\t\tlibInfo := LibraryInfo{LibName: &libName}\n-\t\tconn.ClientSetInfo(ctx, libInfo)\n-\t\tlibInfo = LibraryInfo{LibVer: &libVer}\n-\t\tconn.ClientSetInfo(ctx, libInfo)\n-\t}\n-\t_, err := conn.Pipelined(ctx, func(pipe Pipeliner) error {\n+\n+\t_, err = conn.Pipelined(ctx, func(pipe Pipeliner) error {\n \t\tif !auth && password != \"\" {\n \t\t\tif username != \"\" {\n \t\t\t\tpipe.AuthACL(ctx, username, password)\n@@ -350,6 +345,18 @@ func (c *baseClient) initConn(ctx context.Context, cn *pool.Conn) error {\n \t\treturn err\n \t}\n \n+\tif !c.opt.DisableIndentity {\n+\t\tlibName := \"\"\n+\t\tlibVer := Version()\n+\t\tif c.opt.IdentitySuffix != \"\" {\n+\t\t\tlibName = c.opt.IdentitySuffix\n+\t\t}\n+\t\tp := conn.Pipeline()\n+\t\tp.ClientSetInfo(ctx, WithLibraryName(libName))\n+\t\tp.ClientSetInfo(ctx, WithLibraryVersion(libVer))\n+\t\t_, _ = p.Exec(ctx)\n+\t}\n+\n \tif c.opt.OnConnect != nil {\n \t\treturn c.opt.OnConnect(ctx, conn)\n \t}\n@@ -405,6 +412,19 @@ func (c *baseClient) process(ctx context.Context, cmd Cmder) error {\n \treturn lastErr\n }\n \n+func (c *baseClient) assertUnstableCommand(cmd Cmder) bool {\n+\tswitch cmd.(type) {\n+\tcase *AggregateCmd, *FTInfoCmd, *FTSpellCheckCmd, *FTSearchCmd, *FTSynDumpCmd:\n+\t\tif c.opt.UnstableResp3 {\n+\t\t\treturn true\n+\t\t} else {\n+\t\t\tpanic(\"RESP3 responses for this command are disabled because they may still change. Please set the flag UnstableResp3 .  See the [README](https://github.com/redis/go-redis/blob/master/README.md) and the release notes for guidance.\")\n+\t\t}\n+\tdefault:\n+\t\treturn false\n+\t}\n+}\n+\n func (c *baseClient) _process(ctx context.Context, cmd Cmder, attempt int) (bool, error) {\n \tif attempt > 0 {\n \t\tif err := internal.Sleep(ctx, c.retryBackoff(attempt)); err != nil {\n@@ -420,8 +440,12 @@ func (c *baseClient) _process(ctx context.Context, cmd Cmder, attempt int) (bool\n \t\t\tatomic.StoreUint32(&retryTimeout, 1)\n \t\t\treturn err\n \t\t}\n-\n-\t\tif err := cn.WithReader(c.context(ctx), c.cmdTimeout(cmd), cmd.readReply); err != nil {\n+\t\treadReplyFunc := cmd.readReply\n+\t\t// Apply unstable RESP3 search module.\n+\t\tif c.opt.Protocol != 2 && c.assertUnstableCommand(cmd) {\n+\t\t\treadReplyFunc = cmd.readRawReply\n+\t\t}\n+\t\tif err := cn.WithReader(c.context(ctx), c.cmdTimeout(cmd), readReplyFunc); err != nil {\n \t\t\tif cmd.readTimeout() == nil {\n \t\t\t\tatomic.StoreUint32(&retryTimeout, 1)\n \t\t\t} else {"
    },
    {
      "sha": "b4022173440b3247b25636c60ce73ddcc8dcfd6a",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/ring.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fring.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fring.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fring.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -100,6 +100,7 @@ type RingOptions struct {\n \n \tDisableIndentity bool\n \tIdentitySuffix   string\n+\tUnstableResp3    bool\n }\n \n func (opt *RingOptions) init() {\n@@ -168,6 +169,7 @@ func (opt *RingOptions) clientOptions() *Options {\n \n \t\tDisableIndentity: opt.DisableIndentity,\n \t\tIdentitySuffix:   opt.IdentitySuffix,\n+\t\tUnstableResp3:    opt.UnstableResp3,\n \t}\n }\n "
    },
    {
      "sha": "e4df0b6fc523417a84d9c66be9bb4ad928f89533",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/search_commands.go",
      "status": "added",
      "additions": 2240,
      "deletions": 0,
      "changes": 2240,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsearch_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsearch_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsearch_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,2240 @@\n+package redis\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strconv\"\n+\n+\t\"github.com/redis/go-redis/v9/internal\"\n+\t\"github.com/redis/go-redis/v9/internal/proto\"\n+)\n+\n+type SearchCmdable interface {\n+\tFT_List(ctx context.Context) *StringSliceCmd\n+\tFTAggregate(ctx context.Context, index string, query string) *MapStringInterfaceCmd\n+\tFTAggregateWithArgs(ctx context.Context, index string, query string, options *FTAggregateOptions) *AggregateCmd\n+\tFTAliasAdd(ctx context.Context, index string, alias string) *StatusCmd\n+\tFTAliasDel(ctx context.Context, alias string) *StatusCmd\n+\tFTAliasUpdate(ctx context.Context, index string, alias string) *StatusCmd\n+\tFTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *StatusCmd\n+\tFTConfigGet(ctx context.Context, option string) *MapMapStringInterfaceCmd\n+\tFTConfigSet(ctx context.Context, option string, value interface{}) *StatusCmd\n+\tFTCreate(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema) *StatusCmd\n+\tFTCursorDel(ctx context.Context, index string, cursorId int) *StatusCmd\n+\tFTCursorRead(ctx context.Context, index string, cursorId int, count int) *MapStringInterfaceCmd\n+\tFTDictAdd(ctx context.Context, dict string, term ...interface{}) *IntCmd\n+\tFTDictDel(ctx context.Context, dict string, term ...interface{}) *IntCmd\n+\tFTDictDump(ctx context.Context, dict string) *StringSliceCmd\n+\tFTDropIndex(ctx context.Context, index string) *StatusCmd\n+\tFTDropIndexWithArgs(ctx context.Context, index string, options *FTDropIndexOptions) *StatusCmd\n+\tFTExplain(ctx context.Context, index string, query string) *StringCmd\n+\tFTExplainWithArgs(ctx context.Context, index string, query string, options *FTExplainOptions) *StringCmd\n+\tFTInfo(ctx context.Context, index string) *FTInfoCmd\n+\tFTSpellCheck(ctx context.Context, index string, query string) *FTSpellCheckCmd\n+\tFTSpellCheckWithArgs(ctx context.Context, index string, query string, options *FTSpellCheckOptions) *FTSpellCheckCmd\n+\tFTSearch(ctx context.Context, index string, query string) *FTSearchCmd\n+\tFTSearchWithArgs(ctx context.Context, index string, query string, options *FTSearchOptions) *FTSearchCmd\n+\tFTSynDump(ctx context.Context, index string) *FTSynDumpCmd\n+\tFTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *StatusCmd\n+\tFTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{}) *StatusCmd\n+\tFTTagVals(ctx context.Context, index string, field string) *StringSliceCmd\n+}\n+\n+type FTCreateOptions struct {\n+\tOnHash          bool\n+\tOnJSON          bool\n+\tPrefix          []interface{}\n+\tFilter          string\n+\tDefaultLanguage string\n+\tLanguageField   string\n+\tScore           float64\n+\tScoreField      string\n+\tPayloadField    string\n+\tMaxTextFields   int\n+\tNoOffsets       bool\n+\tTemporary       int\n+\tNoHL            bool\n+\tNoFields        bool\n+\tNoFreqs         bool\n+\tStopWords       []interface{}\n+\tSkipInitialScan bool\n+}\n+\n+type FieldSchema struct {\n+\tFieldName         string\n+\tAs                string\n+\tFieldType         SearchFieldType\n+\tSortable          bool\n+\tUNF               bool\n+\tNoStem            bool\n+\tNoIndex           bool\n+\tPhoneticMatcher   string\n+\tWeight            float64\n+\tSeparator         string\n+\tCaseSensitive     bool\n+\tWithSuffixtrie    bool\n+\tVectorArgs        *FTVectorArgs\n+\tGeoShapeFieldType string\n+\tIndexEmpty        bool\n+\tIndexMissing      bool\n+}\n+\n+type FTVectorArgs struct {\n+\tFlatOptions *FTFlatOptions\n+\tHNSWOptions *FTHNSWOptions\n+}\n+\n+type FTFlatOptions struct {\n+\tType            string\n+\tDim             int\n+\tDistanceMetric  string\n+\tInitialCapacity int\n+\tBlockSize       int\n+}\n+\n+type FTHNSWOptions struct {\n+\tType                   string\n+\tDim                    int\n+\tDistanceMetric         string\n+\tInitialCapacity        int\n+\tMaxEdgesPerNode        int\n+\tMaxAllowedEdgesPerNode int\n+\tEFRunTime              int\n+\tEpsilon                float64\n+}\n+\n+type FTDropIndexOptions struct {\n+\tDeleteDocs bool\n+}\n+\n+type SpellCheckTerms struct {\n+\tInclude    bool\n+\tExclude    bool\n+\tDictionary string\n+}\n+\n+type FTExplainOptions struct {\n+\tDialect string\n+}\n+\n+type FTSynUpdateOptions struct {\n+\tSkipInitialScan bool\n+}\n+\n+type SearchAggregator int\n+\n+const (\n+\tSearchInvalid = SearchAggregator(iota)\n+\tSearchAvg\n+\tSearchSum\n+\tSearchMin\n+\tSearchMax\n+\tSearchCount\n+\tSearchCountDistinct\n+\tSearchCountDistinctish\n+\tSearchStdDev\n+\tSearchQuantile\n+\tSearchToList\n+\tSearchFirstValue\n+\tSearchRandomSample\n+)\n+\n+func (a SearchAggregator) String() string {\n+\tswitch a {\n+\tcase SearchInvalid:\n+\t\treturn \"\"\n+\tcase SearchAvg:\n+\t\treturn \"AVG\"\n+\tcase SearchSum:\n+\t\treturn \"SUM\"\n+\tcase SearchMin:\n+\t\treturn \"MIN\"\n+\tcase SearchMax:\n+\t\treturn \"MAX\"\n+\tcase SearchCount:\n+\t\treturn \"COUNT\"\n+\tcase SearchCountDistinct:\n+\t\treturn \"COUNT_DISTINCT\"\n+\tcase SearchCountDistinctish:\n+\t\treturn \"COUNT_DISTINCTISH\"\n+\tcase SearchStdDev:\n+\t\treturn \"STDDEV\"\n+\tcase SearchQuantile:\n+\t\treturn \"QUANTILE\"\n+\tcase SearchToList:\n+\t\treturn \"TOLIST\"\n+\tcase SearchFirstValue:\n+\t\treturn \"FIRST_VALUE\"\n+\tcase SearchRandomSample:\n+\t\treturn \"RANDOM_SAMPLE\"\n+\tdefault:\n+\t\treturn \"\"\n+\t}\n+}\n+\n+type SearchFieldType int\n+\n+const (\n+\tSearchFieldTypeInvalid = SearchFieldType(iota)\n+\tSearchFieldTypeNumeric\n+\tSearchFieldTypeTag\n+\tSearchFieldTypeText\n+\tSearchFieldTypeGeo\n+\tSearchFieldTypeVector\n+\tSearchFieldTypeGeoShape\n+)\n+\n+func (t SearchFieldType) String() string {\n+\tswitch t {\n+\tcase SearchFieldTypeInvalid:\n+\t\treturn \"\"\n+\tcase SearchFieldTypeNumeric:\n+\t\treturn \"NUMERIC\"\n+\tcase SearchFieldTypeTag:\n+\t\treturn \"TAG\"\n+\tcase SearchFieldTypeText:\n+\t\treturn \"TEXT\"\n+\tcase SearchFieldTypeGeo:\n+\t\treturn \"GEO\"\n+\tcase SearchFieldTypeVector:\n+\t\treturn \"VECTOR\"\n+\tcase SearchFieldTypeGeoShape:\n+\t\treturn \"GEOSHAPE\"\n+\tdefault:\n+\t\treturn \"TEXT\"\n+\t}\n+}\n+\n+// Each AggregateReducer have different args.\n+// Please follow https://redis.io/docs/interact/search-and-query/search/aggregations/#supported-groupby-reducers for more information.\n+type FTAggregateReducer struct {\n+\tReducer SearchAggregator\n+\tArgs    []interface{}\n+\tAs      string\n+}\n+\n+type FTAggregateGroupBy struct {\n+\tFields []interface{}\n+\tReduce []FTAggregateReducer\n+}\n+\n+type FTAggregateSortBy struct {\n+\tFieldName string\n+\tAsc       bool\n+\tDesc      bool\n+}\n+\n+type FTAggregateApply struct {\n+\tField string\n+\tAs    string\n+}\n+\n+type FTAggregateLoad struct {\n+\tField string\n+\tAs    string\n+}\n+\n+type FTAggregateWithCursor struct {\n+\tCount   int\n+\tMaxIdle int\n+}\n+\n+type FTAggregateOptions struct {\n+\tVerbatim          bool\n+\tLoadAll           bool\n+\tLoad              []FTAggregateLoad\n+\tTimeout           int\n+\tGroupBy           []FTAggregateGroupBy\n+\tSortBy            []FTAggregateSortBy\n+\tSortByMax         int\n+\tApply             []FTAggregateApply\n+\tLimitOffset       int\n+\tLimit             int\n+\tFilter            string\n+\tWithCursor        bool\n+\tWithCursorOptions *FTAggregateWithCursor\n+\tParams            map[string]interface{}\n+\tDialectVersion    int\n+}\n+\n+type FTSearchFilter struct {\n+\tFieldName interface{}\n+\tMin       interface{}\n+\tMax       interface{}\n+}\n+\n+type FTSearchGeoFilter struct {\n+\tFieldName string\n+\tLongitude float64\n+\tLatitude  float64\n+\tRadius    float64\n+\tUnit      string\n+}\n+\n+type FTSearchReturn struct {\n+\tFieldName string\n+\tAs        string\n+}\n+\n+type FTSearchSortBy struct {\n+\tFieldName string\n+\tAsc       bool\n+\tDesc      bool\n+}\n+\n+type FTSearchOptions struct {\n+\tNoContent       bool\n+\tVerbatim        bool\n+\tNoStopWords     bool\n+\tWithScores      bool\n+\tWithPayloads    bool\n+\tWithSortKeys    bool\n+\tFilters         []FTSearchFilter\n+\tGeoFilter       []FTSearchGeoFilter\n+\tInKeys          []interface{}\n+\tInFields        []interface{}\n+\tReturn          []FTSearchReturn\n+\tSlop            int\n+\tTimeout         int\n+\tInOrder         bool\n+\tLanguage        string\n+\tExpander        string\n+\tScorer          string\n+\tExplainScore    bool\n+\tPayload         string\n+\tSortBy          []FTSearchSortBy\n+\tSortByWithCount bool\n+\tLimitOffset     int\n+\tLimit           int\n+\tParams          map[string]interface{}\n+\tDialectVersion  int\n+}\n+\n+type FTSynDumpResult struct {\n+\tTerm     string\n+\tSynonyms []string\n+}\n+\n+type FTSynDumpCmd struct {\n+\tbaseCmd\n+\tval []FTSynDumpResult\n+}\n+\n+type FTAggregateResult struct {\n+\tTotal int\n+\tRows  []AggregateRow\n+}\n+\n+type AggregateRow struct {\n+\tFields map[string]interface{}\n+}\n+\n+type AggregateCmd struct {\n+\tbaseCmd\n+\tval *FTAggregateResult\n+}\n+\n+type FTInfoResult struct {\n+\tIndexErrors              IndexErrors\n+\tAttributes               []FTAttribute\n+\tBytesPerRecordAvg        string\n+\tCleaning                 int\n+\tCursorStats              CursorStats\n+\tDialectStats             map[string]int\n+\tDocTableSizeMB           float64\n+\tFieldStatistics          []FieldStatistic\n+\tGCStats                  GCStats\n+\tGeoshapesSzMB            float64\n+\tHashIndexingFailures     int\n+\tIndexDefinition          IndexDefinition\n+\tIndexName                string\n+\tIndexOptions             []string\n+\tIndexing                 int\n+\tInvertedSzMB             float64\n+\tKeyTableSizeMB           float64\n+\tMaxDocID                 int\n+\tNumDocs                  int\n+\tNumRecords               int\n+\tNumTerms                 int\n+\tNumberOfUses             int\n+\tOffsetBitsPerRecordAvg   string\n+\tOffsetVectorsSzMB        float64\n+\tOffsetsPerTermAvg        string\n+\tPercentIndexed           float64\n+\tRecordsPerDocAvg         string\n+\tSortableValuesSizeMB     float64\n+\tTagOverheadSzMB          float64\n+\tTextOverheadSzMB         float64\n+\tTotalIndexMemorySzMB     float64\n+\tTotalIndexingTime        int\n+\tTotalInvertedIndexBlocks int\n+\tVectorIndexSzMB          float64\n+}\n+\n+type IndexErrors struct {\n+\tIndexingFailures     int\n+\tLastIndexingError    string\n+\tLastIndexingErrorKey string\n+}\n+\n+type FTAttribute struct {\n+\tIdentifier      string\n+\tAttribute       string\n+\tType            string\n+\tWeight          float64\n+\tSortable        bool\n+\tNoStem          bool\n+\tNoIndex         bool\n+\tUNF             bool\n+\tPhoneticMatcher string\n+\tCaseSensitive   bool\n+\tWithSuffixtrie  bool\n+}\n+\n+type CursorStats struct {\n+\tGlobalIdle    int\n+\tGlobalTotal   int\n+\tIndexCapacity int\n+\tIndexTotal    int\n+}\n+\n+type FieldStatistic struct {\n+\tIdentifier  string\n+\tAttribute   string\n+\tIndexErrors IndexErrors\n+}\n+\n+type GCStats struct {\n+\tBytesCollected       int\n+\tTotalMsRun           int\n+\tTotalCycles          int\n+\tAverageCycleTimeMs   string\n+\tLastRunTimeMs        int\n+\tGCNumericTreesMissed int\n+\tGCBlocksDenied       int\n+}\n+\n+type IndexDefinition struct {\n+\tKeyType      string\n+\tPrefixes     []string\n+\tDefaultScore float64\n+}\n+\n+type FTSpellCheckOptions struct {\n+\tDistance int\n+\tTerms    *FTSpellCheckTerms\n+\tDialect  int\n+}\n+\n+type FTSpellCheckTerms struct {\n+\tInclusion  string // Either \"INCLUDE\" or \"EXCLUDE\"\n+\tDictionary string\n+\tTerms      []interface{}\n+}\n+\n+type SpellCheckResult struct {\n+\tTerm        string\n+\tSuggestions []SpellCheckSuggestion\n+}\n+\n+type SpellCheckSuggestion struct {\n+\tScore      float64\n+\tSuggestion string\n+}\n+\n+type FTSearchResult struct {\n+\tTotal int\n+\tDocs  []Document\n+}\n+\n+type Document struct {\n+\tID      string\n+\tScore   *float64\n+\tPayload *string\n+\tSortKey *string\n+\tFields  map[string]string\n+}\n+\n+type AggregateQuery []interface{}\n+\n+// FT_List - Lists all the existing indexes in the database.\n+// For more information, please refer to the Redis documentation:\n+// [FT._LIST]: (https://redis.io/commands/ft._list/)\n+func (c cmdable) FT_List(ctx context.Context) *StringSliceCmd {\n+\tcmd := NewStringSliceCmd(ctx, \"FT._LIST\")\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTAggregate - Performs a search query on an index and applies a series of aggregate transformations to the result.\n+// The 'index' parameter specifies the index to search, and the 'query' parameter specifies the search query.\n+// For more information, please refer to the Redis documentation:\n+// [FT.AGGREGATE]: (https://redis.io/commands/ft.aggregate/)\n+func (c cmdable) FTAggregate(ctx context.Context, index string, query string) *MapStringInterfaceCmd {\n+\targs := []interface{}{\"FT.AGGREGATE\", index, query}\n+\tcmd := NewMapStringInterfaceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+func FTAggregateQuery(query string, options *FTAggregateOptions) AggregateQuery {\n+\tqueryArgs := []interface{}{query}\n+\tif options != nil {\n+\t\tif options.Verbatim {\n+\t\t\tqueryArgs = append(queryArgs, \"VERBATIM\")\n+\t\t}\n+\t\tif options.LoadAll && options.Load != nil {\n+\t\t\tpanic(\"FT.AGGREGATE: LOADALL and LOAD are mutually exclusive\")\n+\t\t}\n+\t\tif options.LoadAll {\n+\t\t\tqueryArgs = append(queryArgs, \"LOAD\", \"*\")\n+\t\t}\n+\t\tif options.Load != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"LOAD\", len(options.Load))\n+\t\t\tfor _, load := range options.Load {\n+\t\t\t\tqueryArgs = append(queryArgs, load.Field)\n+\t\t\t\tif load.As != \"\" {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"AS\", load.As)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.Timeout > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"TIMEOUT\", options.Timeout)\n+\t\t}\n+\t\tif options.GroupBy != nil {\n+\t\t\tfor _, groupBy := range options.GroupBy {\n+\t\t\t\tqueryArgs = append(queryArgs, \"GROUPBY\", len(groupBy.Fields))\n+\t\t\t\tqueryArgs = append(queryArgs, groupBy.Fields...)\n+\n+\t\t\t\tfor _, reducer := range groupBy.Reduce {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"REDUCE\")\n+\t\t\t\t\tqueryArgs = append(queryArgs, reducer.Reducer.String())\n+\t\t\t\t\tif reducer.Args != nil {\n+\t\t\t\t\t\tqueryArgs = append(queryArgs, len(reducer.Args))\n+\t\t\t\t\t\tqueryArgs = append(queryArgs, reducer.Args...)\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tqueryArgs = append(queryArgs, 0)\n+\t\t\t\t\t}\n+\t\t\t\t\tif reducer.As != \"\" {\n+\t\t\t\t\t\tqueryArgs = append(queryArgs, \"AS\", reducer.As)\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.SortBy != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"SORTBY\")\n+\t\t\tsortByOptions := []interface{}{}\n+\t\t\tfor _, sortBy := range options.SortBy {\n+\t\t\t\tsortByOptions = append(sortByOptions, sortBy.FieldName)\n+\t\t\t\tif sortBy.Asc && sortBy.Desc {\n+\t\t\t\t\tpanic(\"FT.AGGREGATE: ASC and DESC are mutually exclusive\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Asc {\n+\t\t\t\t\tsortByOptions = append(sortByOptions, \"ASC\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Desc {\n+\t\t\t\t\tsortByOptions = append(sortByOptions, \"DESC\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tqueryArgs = append(queryArgs, len(sortByOptions))\n+\t\t\tqueryArgs = append(queryArgs, sortByOptions...)\n+\t\t}\n+\t\tif options.SortByMax > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"MAX\", options.SortByMax)\n+\t\t}\n+\t\tfor _, apply := range options.Apply {\n+\t\t\tqueryArgs = append(queryArgs, \"APPLY\", apply.Field)\n+\t\t\tif apply.As != \"\" {\n+\t\t\t\tqueryArgs = append(queryArgs, \"AS\", apply.As)\n+\t\t\t}\n+\t\t}\n+\t\tif options.LimitOffset > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"LIMIT\", options.LimitOffset)\n+\t\t}\n+\t\tif options.Limit > 0 {\n+\t\t\tqueryArgs = append(queryArgs, options.Limit)\n+\t\t}\n+\t\tif options.Filter != \"\" {\n+\t\t\tqueryArgs = append(queryArgs, \"FILTER\", options.Filter)\n+\t\t}\n+\t\tif options.WithCursor {\n+\t\t\tqueryArgs = append(queryArgs, \"WITHCURSOR\")\n+\t\t\tif options.WithCursorOptions != nil {\n+\t\t\t\tif options.WithCursorOptions.Count > 0 {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"COUNT\", options.WithCursorOptions.Count)\n+\t\t\t\t}\n+\t\t\t\tif options.WithCursorOptions.MaxIdle > 0 {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"MAXIDLE\", options.WithCursorOptions.MaxIdle)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.Params != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"PARAMS\", len(options.Params)*2)\n+\t\t\tfor key, value := range options.Params {\n+\t\t\t\tqueryArgs = append(queryArgs, key, value)\n+\t\t\t}\n+\t\t}\n+\t\tif options.DialectVersion > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"DIALECT\", options.DialectVersion)\n+\t\t}\n+\t}\n+\treturn queryArgs\n+}\n+\n+func ProcessAggregateResult(data []interface{}) (*FTAggregateResult, error) {\n+\tif len(data) == 0 {\n+\t\treturn nil, fmt.Errorf(\"no data returned\")\n+\t}\n+\n+\ttotal, ok := data[0].(int64)\n+\tif !ok {\n+\t\treturn nil, fmt.Errorf(\"invalid total format\")\n+\t}\n+\n+\trows := make([]AggregateRow, 0, len(data)-1)\n+\tfor _, row := range data[1:] {\n+\t\tfields, ok := row.([]interface{})\n+\t\tif !ok {\n+\t\t\treturn nil, fmt.Errorf(\"invalid row format\")\n+\t\t}\n+\n+\t\trowMap := make(map[string]interface{})\n+\t\tfor i := 0; i < len(fields); i += 2 {\n+\t\t\tkey, ok := fields[i].(string)\n+\t\t\tif !ok {\n+\t\t\t\treturn nil, fmt.Errorf(\"invalid field key format\")\n+\t\t\t}\n+\t\t\tvalue := fields[i+1]\n+\t\t\trowMap[key] = value\n+\t\t}\n+\t\trows = append(rows, AggregateRow{Fields: rowMap})\n+\t}\n+\n+\tresult := &FTAggregateResult{\n+\t\tTotal: int(total),\n+\t\tRows:  rows,\n+\t}\n+\treturn result, nil\n+}\n+\n+func NewAggregateCmd(ctx context.Context, args ...interface{}) *AggregateCmd {\n+\treturn &AggregateCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t}\n+}\n+\n+func (cmd *AggregateCmd) SetVal(val *FTAggregateResult) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *AggregateCmd) Val() *FTAggregateResult {\n+\treturn cmd.val\n+}\n+\n+func (cmd *AggregateCmd) Result() (*FTAggregateResult, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *AggregateCmd) RawVal() interface{} {\n+\treturn cmd.rawVal\n+}\n+\n+func (cmd *AggregateCmd) RawResult() (interface{}, error) {\n+\treturn cmd.rawVal, cmd.err\n+}\n+\n+func (cmd *AggregateCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *AggregateCmd) readReply(rd *proto.Reader) (err error) {\n+\tdata, err := rd.ReadSlice()\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t\treturn nil\n+\t}\n+\tcmd.val, err = ProcessAggregateResult(data)\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t}\n+\treturn nil\n+}\n+\n+// FTAggregateWithArgs - Performs a search query on an index and applies a series of aggregate transformations to the result.\n+// The 'index' parameter specifies the index to search, and the 'query' parameter specifies the search query.\n+// This function also allows for specifying additional options such as: Verbatim, LoadAll, Load, Timeout, GroupBy, SortBy, SortByMax, Apply, LimitOffset, Limit, Filter, WithCursor, Params, and DialectVersion.\n+// For more information, please refer to the Redis documentation:\n+// [FT.AGGREGATE]: (https://redis.io/commands/ft.aggregate/)\n+func (c cmdable) FTAggregateWithArgs(ctx context.Context, index string, query string, options *FTAggregateOptions) *AggregateCmd {\n+\targs := []interface{}{\"FT.AGGREGATE\", index, query}\n+\tif options != nil {\n+\t\tif options.Verbatim {\n+\t\t\targs = append(args, \"VERBATIM\")\n+\t\t}\n+\t\tif options.LoadAll && options.Load != nil {\n+\t\t\tpanic(\"FT.AGGREGATE: LOADALL and LOAD are mutually exclusive\")\n+\t\t}\n+\t\tif options.LoadAll {\n+\t\t\targs = append(args, \"LOAD\", \"*\")\n+\t\t}\n+\t\tif options.Load != nil {\n+\t\t\targs = append(args, \"LOAD\", len(options.Load))\n+\t\t\tfor _, load := range options.Load {\n+\t\t\t\targs = append(args, load.Field)\n+\t\t\t\tif load.As != \"\" {\n+\t\t\t\t\targs = append(args, \"AS\", load.As)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.Timeout > 0 {\n+\t\t\targs = append(args, \"TIMEOUT\", options.Timeout)\n+\t\t}\n+\t\tif options.GroupBy != nil {\n+\t\t\tfor _, groupBy := range options.GroupBy {\n+\t\t\t\targs = append(args, \"GROUPBY\", len(groupBy.Fields))\n+\t\t\t\targs = append(args, groupBy.Fields...)\n+\n+\t\t\t\tfor _, reducer := range groupBy.Reduce {\n+\t\t\t\t\targs = append(args, \"REDUCE\")\n+\t\t\t\t\targs = append(args, reducer.Reducer.String())\n+\t\t\t\t\tif reducer.Args != nil {\n+\t\t\t\t\t\targs = append(args, len(reducer.Args))\n+\t\t\t\t\t\targs = append(args, reducer.Args...)\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\targs = append(args, 0)\n+\t\t\t\t\t}\n+\t\t\t\t\tif reducer.As != \"\" {\n+\t\t\t\t\t\targs = append(args, \"AS\", reducer.As)\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.SortBy != nil {\n+\t\t\targs = append(args, \"SORTBY\")\n+\t\t\tsortByOptions := []interface{}{}\n+\t\t\tfor _, sortBy := range options.SortBy {\n+\t\t\t\tsortByOptions = append(sortByOptions, sortBy.FieldName)\n+\t\t\t\tif sortBy.Asc && sortBy.Desc {\n+\t\t\t\t\tpanic(\"FT.AGGREGATE: ASC and DESC are mutually exclusive\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Asc {\n+\t\t\t\t\tsortByOptions = append(sortByOptions, \"ASC\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Desc {\n+\t\t\t\t\tsortByOptions = append(sortByOptions, \"DESC\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\targs = append(args, len(sortByOptions))\n+\t\t\targs = append(args, sortByOptions...)\n+\t\t}\n+\t\tif options.SortByMax > 0 {\n+\t\t\targs = append(args, \"MAX\", options.SortByMax)\n+\t\t}\n+\t\tfor _, apply := range options.Apply {\n+\t\t\targs = append(args, \"APPLY\", apply.Field)\n+\t\t\tif apply.As != \"\" {\n+\t\t\t\targs = append(args, \"AS\", apply.As)\n+\t\t\t}\n+\t\t}\n+\t\tif options.LimitOffset > 0 {\n+\t\t\targs = append(args, \"LIMIT\", options.LimitOffset)\n+\t\t}\n+\t\tif options.Limit > 0 {\n+\t\t\targs = append(args, options.Limit)\n+\t\t}\n+\t\tif options.Filter != \"\" {\n+\t\t\targs = append(args, \"FILTER\", options.Filter)\n+\t\t}\n+\t\tif options.WithCursor {\n+\t\t\targs = append(args, \"WITHCURSOR\")\n+\t\t\tif options.WithCursorOptions != nil {\n+\t\t\t\tif options.WithCursorOptions.Count > 0 {\n+\t\t\t\t\targs = append(args, \"COUNT\", options.WithCursorOptions.Count)\n+\t\t\t\t}\n+\t\t\t\tif options.WithCursorOptions.MaxIdle > 0 {\n+\t\t\t\t\targs = append(args, \"MAXIDLE\", options.WithCursorOptions.MaxIdle)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif options.Params != nil {\n+\t\t\targs = append(args, \"PARAMS\", len(options.Params)*2)\n+\t\t\tfor key, value := range options.Params {\n+\t\t\t\targs = append(args, key, value)\n+\t\t\t}\n+\t\t}\n+\t\tif options.DialectVersion > 0 {\n+\t\t\targs = append(args, \"DIALECT\", options.DialectVersion)\n+\t\t}\n+\t}\n+\n+\tcmd := NewAggregateCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTAliasAdd - Adds an alias to an index.\n+// The 'index' parameter specifies the index to which the alias is added, and the 'alias' parameter specifies the alias.\n+// For more information, please refer to the Redis documentation:\n+// [FT.ALIASADD]: (https://redis.io/commands/ft.aliasadd/)\n+func (c cmdable) FTAliasAdd(ctx context.Context, index string, alias string) *StatusCmd {\n+\targs := []interface{}{\"FT.ALIASADD\", alias, index}\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTAliasDel - Removes an alias from an index.\n+// The 'alias' parameter specifies the alias to be removed.\n+// For more information, please refer to the Redis documentation:\n+// [FT.ALIASDEL]: (https://redis.io/commands/ft.aliasdel/)\n+func (c cmdable) FTAliasDel(ctx context.Context, alias string) *StatusCmd {\n+\tcmd := NewStatusCmd(ctx, \"FT.ALIASDEL\", alias)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTAliasUpdate - Updates an alias to an index.\n+// The 'index' parameter specifies the index to which the alias is updated, and the 'alias' parameter specifies the alias.\n+// If the alias already exists for a different index, it updates the alias to point to the specified index instead.\n+// For more information, please refer to the Redis documentation:\n+// [FT.ALIASUPDATE]: (https://redis.io/commands/ft.aliasupdate/)\n+func (c cmdable) FTAliasUpdate(ctx context.Context, index string, alias string) *StatusCmd {\n+\tcmd := NewStatusCmd(ctx, \"FT.ALIASUPDATE\", alias, index)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTAlter - Alters the definition of an existing index.\n+// The 'index' parameter specifies the index to alter, and the 'skipInitialScan' parameter specifies whether to skip the initial scan.\n+// The 'definition' parameter specifies the new definition for the index.\n+// For more information, please refer to the Redis documentation:\n+// [FT.ALTER]: (https://redis.io/commands/ft.alter/)\n+func (c cmdable) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []interface{}) *StatusCmd {\n+\targs := []interface{}{\"FT.ALTER\", index}\n+\tif skipInitialScan {\n+\t\targs = append(args, \"SKIPINITIALSCAN\")\n+\t}\n+\targs = append(args, \"SCHEMA\", \"ADD\")\n+\targs = append(args, definition...)\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTConfigGet - Retrieves the value of a RediSearch configuration parameter.\n+// The 'option' parameter specifies the configuration parameter to retrieve.\n+// For more information, please refer to the Redis documentation:\n+// [FT.CONFIG GET]: (https://redis.io/commands/ft.config-get/)\n+func (c cmdable) FTConfigGet(ctx context.Context, option string) *MapMapStringInterfaceCmd {\n+\tcmd := NewMapMapStringInterfaceCmd(ctx, \"FT.CONFIG\", \"GET\", option)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTConfigSet - Sets the value of a RediSearch configuration parameter.\n+// The 'option' parameter specifies the configuration parameter to set, and the 'value' parameter specifies the new value.\n+// For more information, please refer to the Redis documentation:\n+// [FT.CONFIG SET]: (https://redis.io/commands/ft.config-set/)\n+func (c cmdable) FTConfigSet(ctx context.Context, option string, value interface{}) *StatusCmd {\n+\tcmd := NewStatusCmd(ctx, \"FT.CONFIG\", \"SET\", option, value)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTCreate - Creates a new index with the given options and schema.\n+// The 'index' parameter specifies the name of the index to create.\n+// The 'options' parameter specifies various options for the index, such as:\n+// whether to index hashes or JSONs, prefixes, filters, default language, score, score field, payload field, etc.\n+// The 'schema' parameter specifies the schema for the index, which includes the field name, field type, etc.\n+// For more information, please refer to the Redis documentation:\n+// [FT.CREATE]: (https://redis.io/commands/ft.create/)\n+func (c cmdable) FTCreate(ctx context.Context, index string, options *FTCreateOptions, schema ...*FieldSchema) *StatusCmd {\n+\targs := []interface{}{\"FT.CREATE\", index}\n+\tif options != nil {\n+\t\tif options.OnHash && !options.OnJSON {\n+\t\t\targs = append(args, \"ON\", \"HASH\")\n+\t\t}\n+\t\tif options.OnJSON && !options.OnHash {\n+\t\t\targs = append(args, \"ON\", \"JSON\")\n+\t\t}\n+\t\tif options.OnHash && options.OnJSON {\n+\t\t\tpanic(\"FT.CREATE: ON HASH and ON JSON are mutually exclusive\")\n+\t\t}\n+\t\tif options.Prefix != nil {\n+\t\t\targs = append(args, \"PREFIX\", len(options.Prefix))\n+\t\t\targs = append(args, options.Prefix...)\n+\t\t}\n+\t\tif options.Filter != \"\" {\n+\t\t\targs = append(args, \"FILTER\", options.Filter)\n+\t\t}\n+\t\tif options.DefaultLanguage != \"\" {\n+\t\t\targs = append(args, \"LANGUAGE\", options.DefaultLanguage)\n+\t\t}\n+\t\tif options.LanguageField != \"\" {\n+\t\t\targs = append(args, \"LANGUAGE_FIELD\", options.LanguageField)\n+\t\t}\n+\t\tif options.Score > 0 {\n+\t\t\targs = append(args, \"SCORE\", options.Score)\n+\t\t}\n+\t\tif options.ScoreField != \"\" {\n+\t\t\targs = append(args, \"SCORE_FIELD\", options.ScoreField)\n+\t\t}\n+\t\tif options.PayloadField != \"\" {\n+\t\t\targs = append(args, \"PAYLOAD_FIELD\", options.PayloadField)\n+\t\t}\n+\t\tif options.MaxTextFields > 0 {\n+\t\t\targs = append(args, \"MAXTEXTFIELDS\", options.MaxTextFields)\n+\t\t}\n+\t\tif options.NoOffsets {\n+\t\t\targs = append(args, \"NOOFFSETS\")\n+\t\t}\n+\t\tif options.Temporary > 0 {\n+\t\t\targs = append(args, \"TEMPORARY\", options.Temporary)\n+\t\t}\n+\t\tif options.NoHL {\n+\t\t\targs = append(args, \"NOHL\")\n+\t\t}\n+\t\tif options.NoFields {\n+\t\t\targs = append(args, \"NOFIELDS\")\n+\t\t}\n+\t\tif options.NoFreqs {\n+\t\t\targs = append(args, \"NOFREQS\")\n+\t\t}\n+\t\tif options.StopWords != nil {\n+\t\t\targs = append(args, \"STOPWORDS\", len(options.StopWords))\n+\t\t\targs = append(args, options.StopWords...)\n+\t\t}\n+\t\tif options.SkipInitialScan {\n+\t\t\targs = append(args, \"SKIPINITIALSCAN\")\n+\t\t}\n+\t}\n+\tif schema == nil {\n+\t\tpanic(\"FT.CREATE: SCHEMA is required\")\n+\t}\n+\targs = append(args, \"SCHEMA\")\n+\tfor _, schema := range schema {\n+\t\tif schema.FieldName == \"\" || schema.FieldType == SearchFieldTypeInvalid {\n+\t\t\tpanic(\"FT.CREATE: SCHEMA FieldName and FieldType are required\")\n+\t\t}\n+\t\targs = append(args, schema.FieldName)\n+\t\tif schema.As != \"\" {\n+\t\t\targs = append(args, \"AS\", schema.As)\n+\t\t}\n+\t\targs = append(args, schema.FieldType.String())\n+\t\tif schema.VectorArgs != nil {\n+\t\t\tif schema.FieldType != SearchFieldTypeVector {\n+\t\t\t\tpanic(\"FT.CREATE: SCHEMA FieldType VECTOR is required for VectorArgs\")\n+\t\t\t}\n+\t\t\tif schema.VectorArgs.FlatOptions != nil && schema.VectorArgs.HNSWOptions != nil {\n+\t\t\t\tpanic(\"FT.CREATE: SCHEMA VectorArgs FlatOptions and HNSWOptions are mutually exclusive\")\n+\t\t\t}\n+\t\t\tif schema.VectorArgs.FlatOptions != nil {\n+\t\t\t\targs = append(args, \"FLAT\")\n+\t\t\t\tif schema.VectorArgs.FlatOptions.Type == \"\" || schema.VectorArgs.FlatOptions.Dim == 0 || schema.VectorArgs.FlatOptions.DistanceMetric == \"\" {\n+\t\t\t\t\tpanic(\"FT.CREATE: Type, Dim and DistanceMetric are required for VECTOR FLAT\")\n+\t\t\t\t}\n+\t\t\t\tflatArgs := []interface{}{\n+\t\t\t\t\t\"TYPE\", schema.VectorArgs.FlatOptions.Type,\n+\t\t\t\t\t\"DIM\", schema.VectorArgs.FlatOptions.Dim,\n+\t\t\t\t\t\"DISTANCE_METRIC\", schema.VectorArgs.FlatOptions.DistanceMetric,\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.FlatOptions.InitialCapacity > 0 {\n+\t\t\t\t\tflatArgs = append(flatArgs, \"INITIAL_CAP\", schema.VectorArgs.FlatOptions.InitialCapacity)\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.FlatOptions.BlockSize > 0 {\n+\t\t\t\t\tflatArgs = append(flatArgs, \"BLOCK_SIZE\", schema.VectorArgs.FlatOptions.BlockSize)\n+\t\t\t\t}\n+\t\t\t\targs = append(args, len(flatArgs))\n+\t\t\t\targs = append(args, flatArgs...)\n+\t\t\t}\n+\t\t\tif schema.VectorArgs.HNSWOptions != nil {\n+\t\t\t\targs = append(args, \"HNSW\")\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.Type == \"\" || schema.VectorArgs.HNSWOptions.Dim == 0 || schema.VectorArgs.HNSWOptions.DistanceMetric == \"\" {\n+\t\t\t\t\tpanic(\"FT.CREATE: Type, Dim and DistanceMetric are required for VECTOR HNSW\")\n+\t\t\t\t}\n+\t\t\t\thnswArgs := []interface{}{\n+\t\t\t\t\t\"TYPE\", schema.VectorArgs.HNSWOptions.Type,\n+\t\t\t\t\t\"DIM\", schema.VectorArgs.HNSWOptions.Dim,\n+\t\t\t\t\t\"DISTANCE_METRIC\", schema.VectorArgs.HNSWOptions.DistanceMetric,\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.InitialCapacity > 0 {\n+\t\t\t\t\thnswArgs = append(hnswArgs, \"INITIAL_CAP\", schema.VectorArgs.HNSWOptions.InitialCapacity)\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.MaxEdgesPerNode > 0 {\n+\t\t\t\t\thnswArgs = append(hnswArgs, \"M\", schema.VectorArgs.HNSWOptions.MaxEdgesPerNode)\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.MaxAllowedEdgesPerNode > 0 {\n+\t\t\t\t\thnswArgs = append(hnswArgs, \"EF_CONSTRUCTION\", schema.VectorArgs.HNSWOptions.MaxAllowedEdgesPerNode)\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.EFRunTime > 0 {\n+\t\t\t\t\thnswArgs = append(hnswArgs, \"EF_RUNTIME\", schema.VectorArgs.HNSWOptions.EFRunTime)\n+\t\t\t\t}\n+\t\t\t\tif schema.VectorArgs.HNSWOptions.Epsilon > 0 {\n+\t\t\t\t\thnswArgs = append(hnswArgs, \"EPSILON\", schema.VectorArgs.HNSWOptions.Epsilon)\n+\t\t\t\t}\n+\t\t\t\targs = append(args, len(hnswArgs))\n+\t\t\t\targs = append(args, hnswArgs...)\n+\t\t\t}\n+\t\t}\n+\t\tif schema.GeoShapeFieldType != \"\" {\n+\t\t\tif schema.FieldType != SearchFieldTypeGeoShape {\n+\t\t\t\tpanic(\"FT.CREATE: SCHEMA FieldType GEOSHAPE is required for GeoShapeFieldType\")\n+\t\t\t}\n+\t\t\targs = append(args, schema.GeoShapeFieldType)\n+\t\t}\n+\t\tif schema.NoStem {\n+\t\t\targs = append(args, \"NOSTEM\")\n+\t\t}\n+\t\tif schema.Sortable {\n+\t\t\targs = append(args, \"SORTABLE\")\n+\t\t}\n+\t\tif schema.UNF {\n+\t\t\targs = append(args, \"UNF\")\n+\t\t}\n+\t\tif schema.NoIndex {\n+\t\t\targs = append(args, \"NOINDEX\")\n+\t\t}\n+\t\tif schema.PhoneticMatcher != \"\" {\n+\t\t\targs = append(args, \"PHONETIC\", schema.PhoneticMatcher)\n+\t\t}\n+\t\tif schema.Weight > 0 {\n+\t\t\targs = append(args, \"WEIGHT\", schema.Weight)\n+\t\t}\n+\t\tif schema.Separator != \"\" {\n+\t\t\targs = append(args, \"SEPARATOR\", schema.Separator)\n+\t\t}\n+\t\tif schema.CaseSensitive {\n+\t\t\targs = append(args, \"CASESENSITIVE\")\n+\t\t}\n+\t\tif schema.WithSuffixtrie {\n+\t\t\targs = append(args, \"WITHSUFFIXTRIE\")\n+\t\t}\n+\t\tif schema.IndexEmpty {\n+\t\t\targs = append(args, \"INDEXEMPTY\")\n+\t\t}\n+\t\tif schema.IndexMissing {\n+\t\t\targs = append(args, \"INDEXMISSING\")\n+\n+\t\t}\n+\t}\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTCursorDel - Deletes a cursor from an existing index.\n+// The 'index' parameter specifies the index from which to delete the cursor, and the 'cursorId' parameter specifies the ID of the cursor to delete.\n+// For more information, please refer to the Redis documentation:\n+// [FT.CURSOR DEL]: (https://redis.io/commands/ft.cursor-del/)\n+func (c cmdable) FTCursorDel(ctx context.Context, index string, cursorId int) *StatusCmd {\n+\tcmd := NewStatusCmd(ctx, \"FT.CURSOR\", \"DEL\", index, cursorId)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTCursorRead - Reads the next results from an existing cursor.\n+// The 'index' parameter specifies the index from which to read the cursor, the 'cursorId' parameter specifies the ID of the cursor to read, and the 'count' parameter specifies the number of results to read.\n+// For more information, please refer to the Redis documentation:\n+// [FT.CURSOR READ]: (https://redis.io/commands/ft.cursor-read/)\n+func (c cmdable) FTCursorRead(ctx context.Context, index string, cursorId int, count int) *MapStringInterfaceCmd {\n+\targs := []interface{}{\"FT.CURSOR\", \"READ\", index, cursorId}\n+\tif count > 0 {\n+\t\targs = append(args, \"COUNT\", count)\n+\t}\n+\tcmd := NewMapStringInterfaceCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTDictAdd - Adds terms to a dictionary.\n+// The 'dict' parameter specifies the dictionary to which to add the terms, and the 'term' parameter specifies the terms to add.\n+// For more information, please refer to the Redis documentation:\n+// [FT.DICTADD]: (https://redis.io/commands/ft.dictadd/)\n+func (c cmdable) FTDictAdd(ctx context.Context, dict string, term ...interface{}) *IntCmd {\n+\targs := []interface{}{\"FT.DICTADD\", dict}\n+\targs = append(args, term...)\n+\tcmd := NewIntCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTDictDel - Deletes terms from a dictionary.\n+// The 'dict' parameter specifies the dictionary from which to delete the terms, and the 'term' parameter specifies the terms to delete.\n+// For more information, please refer to the Redis documentation:\n+// [FT.DICTDEL]: (https://redis.io/commands/ft.dictdel/)\n+func (c cmdable) FTDictDel(ctx context.Context, dict string, term ...interface{}) *IntCmd {\n+\targs := []interface{}{\"FT.DICTDEL\", dict}\n+\targs = append(args, term...)\n+\tcmd := NewIntCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTDictDump - Returns all terms in the specified dictionary.\n+// The 'dict' parameter specifies the dictionary from which to return the terms.\n+// For more information, please refer to the Redis documentation:\n+// [FT.DICTDUMP]: (https://redis.io/commands/ft.dictdump/)\n+func (c cmdable) FTDictDump(ctx context.Context, dict string) *StringSliceCmd {\n+\tcmd := NewStringSliceCmd(ctx, \"FT.DICTDUMP\", dict)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTDropIndex - Deletes an index.\n+// The 'index' parameter specifies the index to delete.\n+// For more information, please refer to the Redis documentation:\n+// [FT.DROPINDEX]: (https://redis.io/commands/ft.dropindex/)\n+func (c cmdable) FTDropIndex(ctx context.Context, index string) *StatusCmd {\n+\targs := []interface{}{\"FT.DROPINDEX\", index}\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTDropIndexWithArgs - Deletes an index with options.\n+// The 'index' parameter specifies the index to delete, and the 'options' parameter specifies the DeleteDocs option for docs deletion.\n+// For more information, please refer to the Redis documentation:\n+// [FT.DROPINDEX]: (https://redis.io/commands/ft.dropindex/)\n+func (c cmdable) FTDropIndexWithArgs(ctx context.Context, index string, options *FTDropIndexOptions) *StatusCmd {\n+\targs := []interface{}{\"FT.DROPINDEX\", index}\n+\tif options != nil {\n+\t\tif options.DeleteDocs {\n+\t\t\targs = append(args, \"DD\")\n+\t\t}\n+\t}\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTExplain - Returns the execution plan for a complex query.\n+// The 'index' parameter specifies the index to query, and the 'query' parameter specifies the query string.\n+// For more information, please refer to the Redis documentation:\n+// [FT.EXPLAIN]: (https://redis.io/commands/ft.explain/)\n+func (c cmdable) FTExplain(ctx context.Context, index string, query string) *StringCmd {\n+\tcmd := NewStringCmd(ctx, \"FT.EXPLAIN\", index, query)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTExplainWithArgs - Returns the execution plan for a complex query with options.\n+// The 'index' parameter specifies the index to query, the 'query' parameter specifies the query string, and the 'options' parameter specifies the Dialect for the query.\n+// For more information, please refer to the Redis documentation:\n+// [FT.EXPLAIN]: (https://redis.io/commands/ft.explain/)\n+func (c cmdable) FTExplainWithArgs(ctx context.Context, index string, query string, options *FTExplainOptions) *StringCmd {\n+\targs := []interface{}{\"FT.EXPLAIN\", index, query}\n+\tif options.Dialect != \"\" {\n+\t\targs = append(args, \"DIALECT\", options.Dialect)\n+\t}\n+\tcmd := NewStringCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTExplainCli - Returns the execution plan for a complex query. [Not Implemented]\n+// For more information, see https://redis.io/commands/ft.explaincli/\n+func (c cmdable) FTExplainCli(ctx context.Context, key, path string) error {\n+\tpanic(\"not implemented\")\n+}\n+\n+func parseFTInfo(data map[string]interface{}) (FTInfoResult, error) {\n+\tvar ftInfo FTInfoResult\n+\t// Manually parse each field from the map\n+\tif indexErrors, ok := data[\"Index Errors\"].([]interface{}); ok {\n+\t\tftInfo.IndexErrors = IndexErrors{\n+\t\t\tIndexingFailures:     internal.ToInteger(indexErrors[1]),\n+\t\t\tLastIndexingError:    internal.ToString(indexErrors[3]),\n+\t\t\tLastIndexingErrorKey: internal.ToString(indexErrors[5]),\n+\t\t}\n+\t}\n+\n+\tif attributes, ok := data[\"attributes\"].([]interface{}); ok {\n+\t\tfor _, attr := range attributes {\n+\t\t\tif attrMap, ok := attr.([]interface{}); ok {\n+\t\t\t\tatt := FTAttribute{}\n+\t\t\t\tfor i := 0; i < len(attrMap); i++ {\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"attribute\" {\n+\t\t\t\t\t\tatt.Attribute = internal.ToString(attrMap[i+1])\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"identifier\" {\n+\t\t\t\t\t\tatt.Identifier = internal.ToString(attrMap[i+1])\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"type\" {\n+\t\t\t\t\t\tatt.Type = internal.ToString(attrMap[i+1])\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"weight\" {\n+\t\t\t\t\t\tatt.Weight = internal.ToFloat(attrMap[i+1])\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"nostem\" {\n+\t\t\t\t\t\tatt.NoStem = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"sortable\" {\n+\t\t\t\t\t\tatt.Sortable = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"noindex\" {\n+\t\t\t\t\t\tatt.NoIndex = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"unf\" {\n+\t\t\t\t\t\tatt.UNF = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"phonetic\" {\n+\t\t\t\t\t\tatt.PhoneticMatcher = internal.ToString(attrMap[i+1])\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"case_sensitive\" {\n+\t\t\t\t\t\tatt.CaseSensitive = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tif internal.ToLower(internal.ToString(attrMap[i])) == \"withsuffixtrie\" {\n+\t\t\t\t\t\tatt.WithSuffixtrie = true\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t\tftInfo.Attributes = append(ftInfo.Attributes, att)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tftInfo.BytesPerRecordAvg = internal.ToString(data[\"bytes_per_record_avg\"])\n+\tftInfo.Cleaning = internal.ToInteger(data[\"cleaning\"])\n+\n+\tif cursorStats, ok := data[\"cursor_stats\"].([]interface{}); ok {\n+\t\tftInfo.CursorStats = CursorStats{\n+\t\t\tGlobalIdle:    internal.ToInteger(cursorStats[1]),\n+\t\t\tGlobalTotal:   internal.ToInteger(cursorStats[3]),\n+\t\t\tIndexCapacity: internal.ToInteger(cursorStats[5]),\n+\t\t\tIndexTotal:    internal.ToInteger(cursorStats[7]),\n+\t\t}\n+\t}\n+\n+\tif dialectStats, ok := data[\"dialect_stats\"].([]interface{}); ok {\n+\t\tftInfo.DialectStats = make(map[string]int)\n+\t\tfor i := 0; i < len(dialectStats); i += 2 {\n+\t\t\tftInfo.DialectStats[internal.ToString(dialectStats[i])] = internal.ToInteger(dialectStats[i+1])\n+\t\t}\n+\t}\n+\n+\tftInfo.DocTableSizeMB = internal.ToFloat(data[\"doc_table_size_mb\"])\n+\n+\tif fieldStats, ok := data[\"field statistics\"].([]interface{}); ok {\n+\t\tfor _, stat := range fieldStats {\n+\t\t\tif statMap, ok := stat.([]interface{}); ok {\n+\t\t\t\tftInfo.FieldStatistics = append(ftInfo.FieldStatistics, FieldStatistic{\n+\t\t\t\t\tIdentifier: internal.ToString(statMap[1]),\n+\t\t\t\t\tAttribute:  internal.ToString(statMap[3]),\n+\t\t\t\t\tIndexErrors: IndexErrors{\n+\t\t\t\t\t\tIndexingFailures:     internal.ToInteger(statMap[5].([]interface{})[1]),\n+\t\t\t\t\t\tLastIndexingError:    internal.ToString(statMap[5].([]interface{})[3]),\n+\t\t\t\t\t\tLastIndexingErrorKey: internal.ToString(statMap[5].([]interface{})[5]),\n+\t\t\t\t\t},\n+\t\t\t\t})\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif gcStats, ok := data[\"gc_stats\"].([]interface{}); ok {\n+\t\tftInfo.GCStats = GCStats{}\n+\t\tfor i := 0; i < len(gcStats); i += 2 {\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"bytes_collected\" {\n+\t\t\t\tftInfo.GCStats.BytesCollected = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"total_ms_run\" {\n+\t\t\t\tftInfo.GCStats.TotalMsRun = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"total_cycles\" {\n+\t\t\t\tftInfo.GCStats.TotalCycles = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"average_cycle_time_ms\" {\n+\t\t\t\tftInfo.GCStats.AverageCycleTimeMs = internal.ToString(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"last_run_time_ms\" {\n+\t\t\t\tftInfo.GCStats.LastRunTimeMs = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"gc_numeric_trees_missed\" {\n+\t\t\t\tftInfo.GCStats.GCNumericTreesMissed = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif internal.ToLower(internal.ToString(gcStats[i])) == \"gc_blocks_denied\" {\n+\t\t\t\tftInfo.GCStats.GCBlocksDenied = internal.ToInteger(gcStats[i+1])\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tftInfo.GeoshapesSzMB = internal.ToFloat(data[\"geoshapes_sz_mb\"])\n+\tftInfo.HashIndexingFailures = internal.ToInteger(data[\"hash_indexing_failures\"])\n+\n+\tif indexDef, ok := data[\"index_definition\"].([]interface{}); ok {\n+\t\tftInfo.IndexDefinition = IndexDefinition{\n+\t\t\tKeyType:      internal.ToString(indexDef[1]),\n+\t\t\tPrefixes:     internal.ToStringSlice(indexDef[3]),\n+\t\t\tDefaultScore: internal.ToFloat(indexDef[5]),\n+\t\t}\n+\t}\n+\n+\tftInfo.IndexName = internal.ToString(data[\"index_name\"])\n+\tftInfo.IndexOptions = internal.ToStringSlice(data[\"index_options\"].([]interface{}))\n+\tftInfo.Indexing = internal.ToInteger(data[\"indexing\"])\n+\tftInfo.InvertedSzMB = internal.ToFloat(data[\"inverted_sz_mb\"])\n+\tftInfo.KeyTableSizeMB = internal.ToFloat(data[\"key_table_size_mb\"])\n+\tftInfo.MaxDocID = internal.ToInteger(data[\"max_doc_id\"])\n+\tftInfo.NumDocs = internal.ToInteger(data[\"num_docs\"])\n+\tftInfo.NumRecords = internal.ToInteger(data[\"num_records\"])\n+\tftInfo.NumTerms = internal.ToInteger(data[\"num_terms\"])\n+\tftInfo.NumberOfUses = internal.ToInteger(data[\"number_of_uses\"])\n+\tftInfo.OffsetBitsPerRecordAvg = internal.ToString(data[\"offset_bits_per_record_avg\"])\n+\tftInfo.OffsetVectorsSzMB = internal.ToFloat(data[\"offset_vectors_sz_mb\"])\n+\tftInfo.OffsetsPerTermAvg = internal.ToString(data[\"offsets_per_term_avg\"])\n+\tftInfo.PercentIndexed = internal.ToFloat(data[\"percent_indexed\"])\n+\tftInfo.RecordsPerDocAvg = internal.ToString(data[\"records_per_doc_avg\"])\n+\tftInfo.SortableValuesSizeMB = internal.ToFloat(data[\"sortable_values_size_mb\"])\n+\tftInfo.TagOverheadSzMB = internal.ToFloat(data[\"tag_overhead_sz_mb\"])\n+\tftInfo.TextOverheadSzMB = internal.ToFloat(data[\"text_overhead_sz_mb\"])\n+\tftInfo.TotalIndexMemorySzMB = internal.ToFloat(data[\"total_index_memory_sz_mb\"])\n+\tftInfo.TotalIndexingTime = internal.ToInteger(data[\"total_indexing_time\"])\n+\tftInfo.TotalInvertedIndexBlocks = internal.ToInteger(data[\"total_inverted_index_blocks\"])\n+\tftInfo.VectorIndexSzMB = internal.ToFloat(data[\"vector_index_sz_mb\"])\n+\n+\treturn ftInfo, nil\n+}\n+\n+type FTInfoCmd struct {\n+\tbaseCmd\n+\tval FTInfoResult\n+}\n+\n+func newFTInfoCmd(ctx context.Context, args ...interface{}) *FTInfoCmd {\n+\treturn &FTInfoCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t}\n+}\n+\n+func (cmd *FTInfoCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *FTInfoCmd) SetVal(val FTInfoResult) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *FTInfoCmd) Result() (FTInfoResult, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *FTInfoCmd) Val() FTInfoResult {\n+\treturn cmd.val\n+}\n+\n+func (cmd *FTInfoCmd) RawVal() interface{} {\n+\treturn cmd.rawVal\n+}\n+\n+func (cmd *FTInfoCmd) RawResult() (interface{}, error) {\n+\treturn cmd.rawVal, cmd.err\n+}\n+func (cmd *FTInfoCmd) readReply(rd *proto.Reader) (err error) {\n+\tn, err := rd.ReadMapLen()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tdata := make(map[string]interface{}, n)\n+\tfor i := 0; i < n; i++ {\n+\t\tk, err := rd.ReadString()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tv, err := rd.ReadReply()\n+\t\tif err != nil {\n+\t\t\tif err == Nil {\n+\t\t\t\tdata[k] = Nil\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif err, ok := err.(proto.RedisError); ok {\n+\t\t\t\tdata[k] = err\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\treturn err\n+\t\t}\n+\t\tdata[k] = v\n+\t}\n+\tcmd.val, err = parseFTInfo(data)\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t}\n+\n+\treturn nil\n+}\n+\n+// FTInfo - Retrieves information about an index.\n+// The 'index' parameter specifies the index to retrieve information about.\n+// For more information, please refer to the Redis documentation:\n+// [FT.INFO]: (https://redis.io/commands/ft.info/)\n+func (c cmdable) FTInfo(ctx context.Context, index string) *FTInfoCmd {\n+\tcmd := newFTInfoCmd(ctx, \"FT.INFO\", index)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTSpellCheck - Checks a query string for spelling errors.\n+// For more details about spellcheck query please follow:\n+// https://redis.io/docs/interact/search-and-query/advanced-concepts/spellcheck/\n+// For more information, please refer to the Redis documentation:\n+// [FT.SPELLCHECK]: (https://redis.io/commands/ft.spellcheck/)\n+func (c cmdable) FTSpellCheck(ctx context.Context, index string, query string) *FTSpellCheckCmd {\n+\targs := []interface{}{\"FT.SPELLCHECK\", index, query}\n+\tcmd := newFTSpellCheckCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTSpellCheckWithArgs - Checks a query string for spelling errors with additional options.\n+// For more details about spellcheck query please follow:\n+// https://redis.io/docs/interact/search-and-query/advanced-concepts/spellcheck/\n+// For more information, please refer to the Redis documentation:\n+// [FT.SPELLCHECK]: (https://redis.io/commands/ft.spellcheck/)\n+func (c cmdable) FTSpellCheckWithArgs(ctx context.Context, index string, query string, options *FTSpellCheckOptions) *FTSpellCheckCmd {\n+\targs := []interface{}{\"FT.SPELLCHECK\", index, query}\n+\tif options != nil {\n+\t\tif options.Distance > 0 {\n+\t\t\targs = append(args, \"DISTANCE\", options.Distance)\n+\t\t}\n+\t\tif options.Terms != nil {\n+\t\t\targs = append(args, \"TERMS\", options.Terms.Inclusion, options.Terms.Dictionary)\n+\t\t\targs = append(args, options.Terms.Terms...)\n+\t\t}\n+\t\tif options.Dialect > 0 {\n+\t\t\targs = append(args, \"DIALECT\", options.Dialect)\n+\t\t}\n+\t}\n+\tcmd := newFTSpellCheckCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+type FTSpellCheckCmd struct {\n+\tbaseCmd\n+\tval []SpellCheckResult\n+}\n+\n+func newFTSpellCheckCmd(ctx context.Context, args ...interface{}) *FTSpellCheckCmd {\n+\treturn &FTSpellCheckCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t}\n+}\n+\n+func (cmd *FTSpellCheckCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *FTSpellCheckCmd) SetVal(val []SpellCheckResult) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *FTSpellCheckCmd) Result() ([]SpellCheckResult, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *FTSpellCheckCmd) Val() []SpellCheckResult {\n+\treturn cmd.val\n+}\n+\n+func (cmd *FTSpellCheckCmd) RawVal() interface{} {\n+\treturn cmd.rawVal\n+}\n+\n+func (cmd *FTSpellCheckCmd) RawResult() (interface{}, error) {\n+\treturn cmd.rawVal, cmd.err\n+}\n+\n+func (cmd *FTSpellCheckCmd) readReply(rd *proto.Reader) (err error) {\n+\tdata, err := rd.ReadSlice()\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t\treturn nil\n+\t}\n+\tcmd.val, err = parseFTSpellCheck(data)\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t}\n+\treturn nil\n+}\n+\n+func parseFTSpellCheck(data []interface{}) ([]SpellCheckResult, error) {\n+\tresults := make([]SpellCheckResult, 0, len(data))\n+\n+\tfor _, termData := range data {\n+\t\ttermInfo, ok := termData.([]interface{})\n+\t\tif !ok || len(termInfo) != 3 {\n+\t\t\treturn nil, fmt.Errorf(\"invalid term format\")\n+\t\t}\n+\n+\t\tterm, ok := termInfo[1].(string)\n+\t\tif !ok {\n+\t\t\treturn nil, fmt.Errorf(\"invalid term format\")\n+\t\t}\n+\n+\t\tsuggestionsData, ok := termInfo[2].([]interface{})\n+\t\tif !ok {\n+\t\t\treturn nil, fmt.Errorf(\"invalid suggestions format\")\n+\t\t}\n+\n+\t\tsuggestions := make([]SpellCheckSuggestion, 0, len(suggestionsData))\n+\t\tfor _, suggestionData := range suggestionsData {\n+\t\t\tsuggestionInfo, ok := suggestionData.([]interface{})\n+\t\t\tif !ok || len(suggestionInfo) != 2 {\n+\t\t\t\treturn nil, fmt.Errorf(\"invalid suggestion format\")\n+\t\t\t}\n+\n+\t\t\tscoreStr, ok := suggestionInfo[0].(string)\n+\t\t\tif !ok {\n+\t\t\t\treturn nil, fmt.Errorf(\"invalid suggestion score format\")\n+\t\t\t}\n+\t\t\tscore, err := strconv.ParseFloat(scoreStr, 64)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, fmt.Errorf(\"invalid suggestion score value\")\n+\t\t\t}\n+\n+\t\t\tsuggestion, ok := suggestionInfo[1].(string)\n+\t\t\tif !ok {\n+\t\t\t\treturn nil, fmt.Errorf(\"invalid suggestion format\")\n+\t\t\t}\n+\n+\t\t\tsuggestions = append(suggestions, SpellCheckSuggestion{\n+\t\t\t\tScore:      score,\n+\t\t\t\tSuggestion: suggestion,\n+\t\t\t})\n+\t\t}\n+\n+\t\tresults = append(results, SpellCheckResult{\n+\t\t\tTerm:        term,\n+\t\t\tSuggestions: suggestions,\n+\t\t})\n+\t}\n+\n+\treturn results, nil\n+}\n+\n+func parseFTSearch(data []interface{}, noContent, withScores, withPayloads, withSortKeys bool) (FTSearchResult, error) {\n+\tif len(data) < 1 {\n+\t\treturn FTSearchResult{}, fmt.Errorf(\"unexpected search result format\")\n+\t}\n+\n+\ttotal, ok := data[0].(int64)\n+\tif !ok {\n+\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid total results format\")\n+\t}\n+\n+\tvar results []Document\n+\tfor i := 1; i < len(data); {\n+\t\tdocID, ok := data[i].(string)\n+\t\tif !ok {\n+\t\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid document ID format\")\n+\t\t}\n+\n+\t\tdoc := Document{\n+\t\t\tID:     docID,\n+\t\t\tFields: make(map[string]string),\n+\t\t}\n+\t\ti++\n+\n+\t\tif noContent {\n+\t\t\tresults = append(results, doc)\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif withScores && i < len(data) {\n+\t\t\tif scoreStr, ok := data[i].(string); ok {\n+\t\t\t\tscore, err := strconv.ParseFloat(scoreStr, 64)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid score format\")\n+\t\t\t\t}\n+\t\t\t\tdoc.Score = &score\n+\t\t\t\ti++\n+\t\t\t}\n+\t\t}\n+\n+\t\tif withPayloads && i < len(data) {\n+\t\t\tif payload, ok := data[i].(string); ok {\n+\t\t\t\tdoc.Payload = &payload\n+\t\t\t\ti++\n+\t\t\t}\n+\t\t}\n+\n+\t\tif withSortKeys && i < len(data) {\n+\t\t\tif sortKey, ok := data[i].(string); ok {\n+\t\t\t\tdoc.SortKey = &sortKey\n+\t\t\t\ti++\n+\t\t\t}\n+\t\t}\n+\n+\t\tif i < len(data) {\n+\t\t\tfields, ok := data[i].([]interface{})\n+\t\t\tif !ok {\n+\t\t\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid document fields format\")\n+\t\t\t}\n+\n+\t\t\tfor j := 0; j < len(fields); j += 2 {\n+\t\t\t\tkey, ok := fields[j].(string)\n+\t\t\t\tif !ok {\n+\t\t\t\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid field key format\")\n+\t\t\t\t}\n+\t\t\t\tvalue, ok := fields[j+1].(string)\n+\t\t\t\tif !ok {\n+\t\t\t\t\treturn FTSearchResult{}, fmt.Errorf(\"invalid field value format\")\n+\t\t\t\t}\n+\t\t\t\tdoc.Fields[key] = value\n+\t\t\t}\n+\t\t\ti++\n+\t\t}\n+\n+\t\tresults = append(results, doc)\n+\t}\n+\treturn FTSearchResult{\n+\t\tTotal: int(total),\n+\t\tDocs:  results,\n+\t}, nil\n+}\n+\n+type FTSearchCmd struct {\n+\tbaseCmd\n+\tval     FTSearchResult\n+\toptions *FTSearchOptions\n+}\n+\n+func newFTSearchCmd(ctx context.Context, options *FTSearchOptions, args ...interface{}) *FTSearchCmd {\n+\treturn &FTSearchCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t\toptions: options,\n+\t}\n+}\n+\n+func (cmd *FTSearchCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *FTSearchCmd) SetVal(val FTSearchResult) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *FTSearchCmd) Result() (FTSearchResult, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *FTSearchCmd) Val() FTSearchResult {\n+\treturn cmd.val\n+}\n+\n+func (cmd *FTSearchCmd) RawVal() interface{} {\n+\treturn cmd.rawVal\n+}\n+\n+func (cmd *FTSearchCmd) RawResult() (interface{}, error) {\n+\treturn cmd.rawVal, cmd.err\n+}\n+\n+func (cmd *FTSearchCmd) readReply(rd *proto.Reader) (err error) {\n+\tdata, err := rd.ReadSlice()\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t\treturn nil\n+\t}\n+\tcmd.val, err = parseFTSearch(data, cmd.options.NoContent, cmd.options.WithScores, cmd.options.WithPayloads, cmd.options.WithSortKeys)\n+\tif err != nil {\n+\t\tcmd.err = err\n+\t}\n+\treturn nil\n+}\n+\n+// FTSearch - Executes a search query on an index.\n+// The 'index' parameter specifies the index to search, and the 'query' parameter specifies the search query.\n+// For more information, please refer to the Redis documentation:\n+// [FT.SEARCH]: (https://redis.io/commands/ft.search/)\n+func (c cmdable) FTSearch(ctx context.Context, index string, query string) *FTSearchCmd {\n+\targs := []interface{}{\"FT.SEARCH\", index, query}\n+\tcmd := newFTSearchCmd(ctx, &FTSearchOptions{}, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+type SearchQuery []interface{}\n+\n+func FTSearchQuery(query string, options *FTSearchOptions) SearchQuery {\n+\tqueryArgs := []interface{}{query}\n+\tif options != nil {\n+\t\tif options.NoContent {\n+\t\t\tqueryArgs = append(queryArgs, \"NOCONTENT\")\n+\t\t}\n+\t\tif options.Verbatim {\n+\t\t\tqueryArgs = append(queryArgs, \"VERBATIM\")\n+\t\t}\n+\t\tif options.NoStopWords {\n+\t\t\tqueryArgs = append(queryArgs, \"NOSTOPWORDS\")\n+\t\t}\n+\t\tif options.WithScores {\n+\t\t\tqueryArgs = append(queryArgs, \"WITHSCORES\")\n+\t\t}\n+\t\tif options.WithPayloads {\n+\t\t\tqueryArgs = append(queryArgs, \"WITHPAYLOADS\")\n+\t\t}\n+\t\tif options.WithSortKeys {\n+\t\t\tqueryArgs = append(queryArgs, \"WITHSORTKEYS\")\n+\t\t}\n+\t\tif options.Filters != nil {\n+\t\t\tfor _, filter := range options.Filters {\n+\t\t\t\tqueryArgs = append(queryArgs, \"FILTER\", filter.FieldName, filter.Min, filter.Max)\n+\t\t\t}\n+\t\t}\n+\t\tif options.GeoFilter != nil {\n+\t\t\tfor _, geoFilter := range options.GeoFilter {\n+\t\t\t\tqueryArgs = append(queryArgs, \"GEOFILTER\", geoFilter.FieldName, geoFilter.Longitude, geoFilter.Latitude, geoFilter.Radius, geoFilter.Unit)\n+\t\t\t}\n+\t\t}\n+\t\tif options.InKeys != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"INKEYS\", len(options.InKeys))\n+\t\t\tqueryArgs = append(queryArgs, options.InKeys...)\n+\t\t}\n+\t\tif options.InFields != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"INFIELDS\", len(options.InFields))\n+\t\t\tqueryArgs = append(queryArgs, options.InFields...)\n+\t\t}\n+\t\tif options.Return != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"RETURN\")\n+\t\t\tqueryArgsReturn := []interface{}{}\n+\t\t\tfor _, ret := range options.Return {\n+\t\t\t\tqueryArgsReturn = append(queryArgsReturn, ret.FieldName)\n+\t\t\t\tif ret.As != \"\" {\n+\t\t\t\t\tqueryArgsReturn = append(queryArgsReturn, \"AS\", ret.As)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tqueryArgs = append(queryArgs, len(queryArgsReturn))\n+\t\t\tqueryArgs = append(queryArgs, queryArgsReturn...)\n+\t\t}\n+\t\tif options.Slop > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"SLOP\", options.Slop)\n+\t\t}\n+\t\tif options.Timeout > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"TIMEOUT\", options.Timeout)\n+\t\t}\n+\t\tif options.InOrder {\n+\t\t\tqueryArgs = append(queryArgs, \"INORDER\")\n+\t\t}\n+\t\tif options.Language != \"\" {\n+\t\t\tqueryArgs = append(queryArgs, \"LANGUAGE\", options.Language)\n+\t\t}\n+\t\tif options.Expander != \"\" {\n+\t\t\tqueryArgs = append(queryArgs, \"EXPANDER\", options.Expander)\n+\t\t}\n+\t\tif options.Scorer != \"\" {\n+\t\t\tqueryArgs = append(queryArgs, \"SCORER\", options.Scorer)\n+\t\t}\n+\t\tif options.ExplainScore {\n+\t\t\tqueryArgs = append(queryArgs, \"EXPLAINSCORE\")\n+\t\t}\n+\t\tif options.Payload != \"\" {\n+\t\t\tqueryArgs = append(queryArgs, \"PAYLOAD\", options.Payload)\n+\t\t}\n+\t\tif options.SortBy != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"SORTBY\")\n+\t\t\tfor _, sortBy := range options.SortBy {\n+\t\t\t\tqueryArgs = append(queryArgs, sortBy.FieldName)\n+\t\t\t\tif sortBy.Asc && sortBy.Desc {\n+\t\t\t\t\tpanic(\"FT.SEARCH: ASC and DESC are mutually exclusive\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Asc {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"ASC\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Desc {\n+\t\t\t\t\tqueryArgs = append(queryArgs, \"DESC\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif options.SortByWithCount {\n+\t\t\t\tqueryArgs = append(queryArgs, \"WITHCOUT\")\n+\t\t\t}\n+\t\t}\n+\t\tif options.LimitOffset >= 0 && options.Limit > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"LIMIT\", options.LimitOffset, options.Limit)\n+\t\t}\n+\t\tif options.Params != nil {\n+\t\t\tqueryArgs = append(queryArgs, \"PARAMS\", len(options.Params)*2)\n+\t\t\tfor key, value := range options.Params {\n+\t\t\t\tqueryArgs = append(queryArgs, key, value)\n+\t\t\t}\n+\t\t}\n+\t\tif options.DialectVersion > 0 {\n+\t\t\tqueryArgs = append(queryArgs, \"DIALECT\", options.DialectVersion)\n+\t\t}\n+\t}\n+\treturn queryArgs\n+}\n+\n+// FTSearchWithArgs - Executes a search query on an index with additional options.\n+// The 'index' parameter specifies the index to search, the 'query' parameter specifies the search query,\n+// and the 'options' parameter specifies additional options for the search.\n+// For more information, please refer to the Redis documentation:\n+// [FT.SEARCH]: (https://redis.io/commands/ft.search/)\n+func (c cmdable) FTSearchWithArgs(ctx context.Context, index string, query string, options *FTSearchOptions) *FTSearchCmd {\n+\targs := []interface{}{\"FT.SEARCH\", index, query}\n+\tif options != nil {\n+\t\tif options.NoContent {\n+\t\t\targs = append(args, \"NOCONTENT\")\n+\t\t}\n+\t\tif options.Verbatim {\n+\t\t\targs = append(args, \"VERBATIM\")\n+\t\t}\n+\t\tif options.NoStopWords {\n+\t\t\targs = append(args, \"NOSTOPWORDS\")\n+\t\t}\n+\t\tif options.WithScores {\n+\t\t\targs = append(args, \"WITHSCORES\")\n+\t\t}\n+\t\tif options.WithPayloads {\n+\t\t\targs = append(args, \"WITHPAYLOADS\")\n+\t\t}\n+\t\tif options.WithSortKeys {\n+\t\t\targs = append(args, \"WITHSORTKEYS\")\n+\t\t}\n+\t\tif options.Filters != nil {\n+\t\t\tfor _, filter := range options.Filters {\n+\t\t\t\targs = append(args, \"FILTER\", filter.FieldName, filter.Min, filter.Max)\n+\t\t\t}\n+\t\t}\n+\t\tif options.GeoFilter != nil {\n+\t\t\tfor _, geoFilter := range options.GeoFilter {\n+\t\t\t\targs = append(args, \"GEOFILTER\", geoFilter.FieldName, geoFilter.Longitude, geoFilter.Latitude, geoFilter.Radius, geoFilter.Unit)\n+\t\t\t}\n+\t\t}\n+\t\tif options.InKeys != nil {\n+\t\t\targs = append(args, \"INKEYS\", len(options.InKeys))\n+\t\t\targs = append(args, options.InKeys...)\n+\t\t}\n+\t\tif options.InFields != nil {\n+\t\t\targs = append(args, \"INFIELDS\", len(options.InFields))\n+\t\t\targs = append(args, options.InFields...)\n+\t\t}\n+\t\tif options.Return != nil {\n+\t\t\targs = append(args, \"RETURN\")\n+\t\t\targsReturn := []interface{}{}\n+\t\t\tfor _, ret := range options.Return {\n+\t\t\t\targsReturn = append(argsReturn, ret.FieldName)\n+\t\t\t\tif ret.As != \"\" {\n+\t\t\t\t\targsReturn = append(argsReturn, \"AS\", ret.As)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\targs = append(args, len(argsReturn))\n+\t\t\targs = append(args, argsReturn...)\n+\t\t}\n+\t\tif options.Slop > 0 {\n+\t\t\targs = append(args, \"SLOP\", options.Slop)\n+\t\t}\n+\t\tif options.Timeout > 0 {\n+\t\t\targs = append(args, \"TIMEOUT\", options.Timeout)\n+\t\t}\n+\t\tif options.InOrder {\n+\t\t\targs = append(args, \"INORDER\")\n+\t\t}\n+\t\tif options.Language != \"\" {\n+\t\t\targs = append(args, \"LANGUAGE\", options.Language)\n+\t\t}\n+\t\tif options.Expander != \"\" {\n+\t\t\targs = append(args, \"EXPANDER\", options.Expander)\n+\t\t}\n+\t\tif options.Scorer != \"\" {\n+\t\t\targs = append(args, \"SCORER\", options.Scorer)\n+\t\t}\n+\t\tif options.ExplainScore {\n+\t\t\targs = append(args, \"EXPLAINSCORE\")\n+\t\t}\n+\t\tif options.Payload != \"\" {\n+\t\t\targs = append(args, \"PAYLOAD\", options.Payload)\n+\t\t}\n+\t\tif options.SortBy != nil {\n+\t\t\targs = append(args, \"SORTBY\")\n+\t\t\tfor _, sortBy := range options.SortBy {\n+\t\t\t\targs = append(args, sortBy.FieldName)\n+\t\t\t\tif sortBy.Asc && sortBy.Desc {\n+\t\t\t\t\tpanic(\"FT.SEARCH: ASC and DESC are mutually exclusive\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Asc {\n+\t\t\t\t\targs = append(args, \"ASC\")\n+\t\t\t\t}\n+\t\t\t\tif sortBy.Desc {\n+\t\t\t\t\targs = append(args, \"DESC\")\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif options.SortByWithCount {\n+\t\t\t\targs = append(args, \"WITHCOUT\")\n+\t\t\t}\n+\t\t}\n+\t\tif options.LimitOffset >= 0 && options.Limit > 0 {\n+\t\t\targs = append(args, \"LIMIT\", options.LimitOffset, options.Limit)\n+\t\t}\n+\t\tif options.Params != nil {\n+\t\t\targs = append(args, \"PARAMS\", len(options.Params)*2)\n+\t\t\tfor key, value := range options.Params {\n+\t\t\t\targs = append(args, key, value)\n+\t\t\t}\n+\t\t}\n+\t\tif options.DialectVersion > 0 {\n+\t\t\targs = append(args, \"DIALECT\", options.DialectVersion)\n+\t\t}\n+\t}\n+\tcmd := newFTSearchCmd(ctx, options, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+func NewFTSynDumpCmd(ctx context.Context, args ...interface{}) *FTSynDumpCmd {\n+\treturn &FTSynDumpCmd{\n+\t\tbaseCmd: baseCmd{\n+\t\t\tctx:  ctx,\n+\t\t\targs: args,\n+\t\t},\n+\t}\n+}\n+\n+func (cmd *FTSynDumpCmd) String() string {\n+\treturn cmdString(cmd, cmd.val)\n+}\n+\n+func (cmd *FTSynDumpCmd) SetVal(val []FTSynDumpResult) {\n+\tcmd.val = val\n+}\n+\n+func (cmd *FTSynDumpCmd) Val() []FTSynDumpResult {\n+\treturn cmd.val\n+}\n+\n+func (cmd *FTSynDumpCmd) Result() ([]FTSynDumpResult, error) {\n+\treturn cmd.val, cmd.err\n+}\n+\n+func (cmd *FTSynDumpCmd) RawVal() interface{} {\n+\treturn cmd.rawVal\n+}\n+\n+func (cmd *FTSynDumpCmd) RawResult() (interface{}, error) {\n+\treturn cmd.rawVal, cmd.err\n+}\n+\n+func (cmd *FTSynDumpCmd) readReply(rd *proto.Reader) error {\n+\ttermSynonymPairs, err := rd.ReadSlice()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tvar results []FTSynDumpResult\n+\tfor i := 0; i < len(termSynonymPairs); i += 2 {\n+\t\tterm, ok := termSynonymPairs[i].(string)\n+\t\tif !ok {\n+\t\t\treturn fmt.Errorf(\"invalid term format\")\n+\t\t}\n+\n+\t\tsynonyms, ok := termSynonymPairs[i+1].([]interface{})\n+\t\tif !ok {\n+\t\t\treturn fmt.Errorf(\"invalid synonyms format\")\n+\t\t}\n+\n+\t\tsynonymList := make([]string, len(synonyms))\n+\t\tfor j, syn := range synonyms {\n+\t\t\tsynonym, ok := syn.(string)\n+\t\t\tif !ok {\n+\t\t\t\treturn fmt.Errorf(\"invalid synonym format\")\n+\t\t\t}\n+\t\t\tsynonymList[j] = synonym\n+\t\t}\n+\n+\t\tresults = append(results, FTSynDumpResult{\n+\t\t\tTerm:     term,\n+\t\t\tSynonyms: synonymList,\n+\t\t})\n+\t}\n+\n+\tcmd.val = results\n+\treturn nil\n+}\n+\n+// FTSynDump - Dumps the contents of a synonym group.\n+// The 'index' parameter specifies the index to dump.\n+// For more information, please refer to the Redis documentation:\n+// [FT.SYNDUMP]: (https://redis.io/commands/ft.syndump/)\n+func (c cmdable) FTSynDump(ctx context.Context, index string) *FTSynDumpCmd {\n+\tcmd := NewFTSynDumpCmd(ctx, \"FT.SYNDUMP\", index)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTSynUpdate - Creates or updates a synonym group with additional terms.\n+// The 'index' parameter specifies the index to update, the 'synGroupId' parameter specifies the synonym group id, and the 'terms' parameter specifies the additional terms.\n+// For more information, please refer to the Redis documentation:\n+// [FT.SYNUPDATE]: (https://redis.io/commands/ft.synupdate/)\n+func (c cmdable) FTSynUpdate(ctx context.Context, index string, synGroupId interface{}, terms []interface{}) *StatusCmd {\n+\targs := []interface{}{\"FT.SYNUPDATE\", index, synGroupId}\n+\targs = append(args, terms...)\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTSynUpdateWithArgs - Creates or updates a synonym group with additional terms and options.\n+// The 'index' parameter specifies the index to update, the 'synGroupId' parameter specifies the synonym group id, the 'options' parameter specifies additional options for the update, and the 'terms' parameter specifies the additional terms.\n+// For more information, please refer to the Redis documentation:\n+// [FT.SYNUPDATE]: (https://redis.io/commands/ft.synupdate/)\n+func (c cmdable) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId interface{}, options *FTSynUpdateOptions, terms []interface{}) *StatusCmd {\n+\targs := []interface{}{\"FT.SYNUPDATE\", index, synGroupId}\n+\tif options.SkipInitialScan {\n+\t\targs = append(args, \"SKIPINITIALSCAN\")\n+\t}\n+\targs = append(args, terms...)\n+\tcmd := NewStatusCmd(ctx, args...)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// FTTagVals - Returns all distinct values indexed in a tag field.\n+// The 'index' parameter specifies the index to check, and the 'field' parameter specifies the tag field to retrieve values from.\n+// For more information, please refer to the Redis documentation:\n+// [FT.TAGVALS]: (https://redis.io/commands/ft.tagvals/)\n+func (c cmdable) FTTagVals(ctx context.Context, index string, field string) *StringSliceCmd {\n+\tcmd := NewStringSliceCmd(ctx, \"FT.TAGVALS\", index, field)\n+\t_ = c(ctx, cmd)\n+\treturn cmd\n+}\n+\n+// type FTProfileResult struct {\n+// \tResults []interface{}\n+// \tProfile ProfileDetails\n+// }\n+\n+// type ProfileDetails struct {\n+// \tTotalProfileTime        string\n+// \tParsingTime             string\n+// \tPipelineCreationTime    string\n+// \tWarning                 string\n+// \tIteratorsProfile        []IteratorProfile\n+// \tResultProcessorsProfile []ResultProcessorProfile\n+// }\n+\n+// type IteratorProfile struct {\n+// \tType           string\n+// \tQueryType      string\n+// \tTime           interface{}\n+// \tCounter        int\n+// \tTerm           string\n+// \tSize           int\n+// \tChildIterators []IteratorProfile\n+// }\n+\n+// type ResultProcessorProfile struct {\n+// \tType    string\n+// \tTime    interface{}\n+// \tCounter int\n+// }\n+\n+// func parseFTProfileResult(data []interface{}) (FTProfileResult, error) {\n+// \tvar result FTProfileResult\n+// \tif len(data) < 2 {\n+// \t\treturn result, fmt.Errorf(\"unexpected data length\")\n+// \t}\n+\n+// \t// Parse results\n+// \tresult.Results = data[0].([]interface{})\n+\n+// \t// Parse profile details\n+// \tprofileData := data[1].([]interface{})\n+// \tprofileDetails := ProfileDetails{}\n+// \tfor i := 0; i < len(profileData); i += 2 {\n+// \t\tswitch profileData[i].(string) {\n+// \t\tcase \"Total profile time\":\n+// \t\t\tprofileDetails.TotalProfileTime = profileData[i+1].(string)\n+// \t\tcase \"Parsing time\":\n+// \t\t\tprofileDetails.ParsingTime = profileData[i+1].(string)\n+// \t\tcase \"Pipeline creation time\":\n+// \t\t\tprofileDetails.PipelineCreationTime = profileData[i+1].(string)\n+// \t\tcase \"Warning\":\n+// \t\t\tprofileDetails.Warning = profileData[i+1].(string)\n+// \t\tcase \"Iterators profile\":\n+// \t\t\tprofileDetails.IteratorsProfile = parseIteratorsProfile(profileData[i+1].([]interface{}))\n+// \t\tcase \"Result processors profile\":\n+// \t\t\tprofileDetails.ResultProcessorsProfile = parseResultProcessorsProfile(profileData[i+1].([]interface{}))\n+// \t\t}\n+// \t}\n+\n+// \tresult.Profile = profileDetails\n+// \treturn result, nil\n+// }\n+\n+// func parseIteratorsProfile(data []interface{}) []IteratorProfile {\n+// \tvar iterators []IteratorProfile\n+// \tfor _, item := range data {\n+// \t\tprofile := item.([]interface{})\n+// \t\titerator := IteratorProfile{}\n+// \t\tfor i := 0; i < len(profile); i += 2 {\n+// \t\t\tswitch profile[i].(string) {\n+// \t\t\tcase \"Type\":\n+// \t\t\t\titerator.Type = profile[i+1].(string)\n+// \t\t\tcase \"Query type\":\n+// \t\t\t\titerator.QueryType = profile[i+1].(string)\n+// \t\t\tcase \"Time\":\n+// \t\t\t\titerator.Time = profile[i+1]\n+// \t\t\tcase \"Counter\":\n+// \t\t\t\titerator.Counter = int(profile[i+1].(int64))\n+// \t\t\tcase \"Term\":\n+// \t\t\t\titerator.Term = profile[i+1].(string)\n+// \t\t\tcase \"Size\":\n+// \t\t\t\titerator.Size = int(profile[i+1].(int64))\n+// \t\t\tcase \"Child iterators\":\n+// \t\t\t\titerator.ChildIterators = parseChildIteratorsProfile(profile[i+1].([]interface{}))\n+// \t\t\t}\n+// \t\t}\n+// \t\titerators = append(iterators, iterator)\n+// \t}\n+// \treturn iterators\n+// }\n+\n+// func parseChildIteratorsProfile(data []interface{}) []IteratorProfile {\n+// \tvar iterators []IteratorProfile\n+// \tfor _, item := range data {\n+// \t\tprofile := item.([]interface{})\n+// \t\titerator := IteratorProfile{}\n+// \t\tfor i := 0; i < len(profile); i += 2 {\n+// \t\t\tswitch profile[i].(string) {\n+// \t\t\tcase \"Type\":\n+// \t\t\t\titerator.Type = profile[i+1].(string)\n+// \t\t\tcase \"Query type\":\n+// \t\t\t\titerator.QueryType = profile[i+1].(string)\n+// \t\t\tcase \"Time\":\n+// \t\t\t\titerator.Time = profile[i+1]\n+// \t\t\tcase \"Counter\":\n+// \t\t\t\titerator.Counter = int(profile[i+1].(int64))\n+// \t\t\tcase \"Term\":\n+// \t\t\t\titerator.Term = profile[i+1].(string)\n+// \t\t\tcase \"Size\":\n+// \t\t\t\titerator.Size = int(profile[i+1].(int64))\n+// \t\t\t}\n+// \t\t}\n+// \t\titerators = append(iterators, iterator)\n+// \t}\n+// \treturn iterators\n+// }\n+\n+// func parseResultProcessorsProfile(data []interface{}) []ResultProcessorProfile {\n+// \tvar processors []ResultProcessorProfile\n+// \tfor _, item := range data {\n+// \t\tprofile := item.([]interface{})\n+// \t\tprocessor := ResultProcessorProfile{}\n+// \t\tfor i := 0; i < len(profile); i += 2 {\n+// \t\t\tswitch profile[i].(string) {\n+// \t\t\tcase \"Type\":\n+// \t\t\t\tprocessor.Type = profile[i+1].(string)\n+// \t\t\tcase \"Time\":\n+// \t\t\t\tprocessor.Time = profile[i+1]\n+// \t\t\tcase \"Counter\":\n+// \t\t\t\tprocessor.Counter = int(profile[i+1].(int64))\n+// \t\t\t}\n+// \t\t}\n+// \t\tprocessors = append(processors, processor)\n+// \t}\n+// \treturn processors\n+// }\n+\n+// func NewFTProfileCmd(ctx context.Context, args ...interface{}) *FTProfileCmd {\n+// \treturn &FTProfileCmd{\n+// \t\tbaseCmd: baseCmd{\n+// \t\t\tctx:  ctx,\n+// \t\t\targs: args,\n+// \t\t},\n+// \t}\n+// }\n+\n+// type FTProfileCmd struct {\n+// \tbaseCmd\n+// \tval FTProfileResult\n+// }\n+\n+// func (cmd *FTProfileCmd) String() string {\n+// \treturn cmdString(cmd, cmd.val)\n+// }\n+\n+// func (cmd *FTProfileCmd) SetVal(val FTProfileResult) {\n+// \tcmd.val = val\n+// }\n+\n+// func (cmd *FTProfileCmd) Result() (FTProfileResult, error) {\n+// \treturn cmd.val, cmd.err\n+// }\n+\n+// func (cmd *FTProfileCmd) Val() FTProfileResult {\n+// \treturn cmd.val\n+// }\n+\n+// func (cmd *FTProfileCmd) readReply(rd *proto.Reader) (err error) {\n+// \tdata, err := rd.ReadSlice()\n+// \tif err != nil {\n+// \t\treturn err\n+// \t}\n+// \tcmd.val, err = parseFTProfileResult(data)\n+// \tif err != nil {\n+// \t\tcmd.err = err\n+// \t}\n+// \treturn nil\n+// }\n+\n+// // FTProfile - Executes a search query and returns a profile of how the query was processed.\n+// // The 'index' parameter specifies the index to search, the 'limited' parameter specifies whether to limit the results,\n+// // and the 'query' parameter specifies the search / aggreagte query. Please notice that you must either pass a SearchQuery or an AggregateQuery.\n+// // For more information, please refer to the Redis documentation:\n+// // [FT.PROFILE]: (https://redis.io/commands/ft.profile/)\n+// func (c cmdable) FTProfile(ctx context.Context, index string, limited bool, query interface{}) *FTProfileCmd {\n+// \tqueryType := \"\"\n+// \tvar argsQuery []interface{}\n+\n+// \tswitch v := query.(type) {\n+// \tcase AggregateQuery:\n+// \t\tqueryType = \"AGGREGATE\"\n+// \t\targsQuery = v\n+// \tcase SearchQuery:\n+// \t\tqueryType = \"SEARCH\"\n+// \t\targsQuery = v\n+// \tdefault:\n+// \t\tpanic(\"FT.PROFILE: query must be either AggregateQuery or SearchQuery\")\n+// \t}\n+\n+// \targs := []interface{}{\"FT.PROFILE\", index, queryType}\n+\n+// \tif limited {\n+// \t\targs = append(args, \"LIMITED\")\n+// \t}\n+// \targs = append(args, \"QUERY\")\n+// \targs = append(args, argsQuery...)\n+\n+// \tcmd := NewFTProfileCmd(ctx, args...)\n+// \t_ = c(ctx, cmd)\n+// \treturn cmd\n+// }"
    },
    {
      "sha": "3156955445e194496b089eec490dd1caea775db0",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/sentinel.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsentinel.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsentinel.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fsentinel.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -82,6 +82,7 @@ type FailoverOptions struct {\n \n \tDisableIndentity bool\n \tIdentitySuffix   string\n+\tUnstableResp3    bool\n }\n \n func (opt *FailoverOptions) clientOptions() *Options {\n@@ -119,6 +120,7 @@ func (opt *FailoverOptions) clientOptions() *Options {\n \n \t\tDisableIndentity: opt.DisableIndentity,\n \t\tIdentitySuffix:   opt.IdentitySuffix,\n+\t\tUnstableResp3:    opt.UnstableResp3,\n \t}\n }\n \n@@ -153,6 +155,10 @@ func (opt *FailoverOptions) sentinelOptions(addr string) *Options {\n \t\tConnMaxLifetime: opt.ConnMaxLifetime,\n \n \t\tTLSConfig: opt.TLSConfig,\n+\n+\t\tDisableIndentity: opt.DisableIndentity,\n+\t\tIdentitySuffix:   opt.IdentitySuffix,\n+\t\tUnstableResp3:    opt.UnstableResp3,\n \t}\n }\n \n@@ -190,6 +196,9 @@ func (opt *FailoverOptions) clusterOptions() *ClusterOptions {\n \t\tConnMaxLifetime: opt.ConnMaxLifetime,\n \n \t\tTLSConfig: opt.TLSConfig,\n+\n+\t\tDisableIndentity: opt.DisableIndentity,\n+\t\tIdentitySuffix:   opt.IdentitySuffix,\n \t}\n }\n "
    },
    {
      "sha": "6d7b22922498d741aa3b12d6232386a734818a32",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/stream_commands.go",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fstream_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fstream_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fstream_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -137,10 +137,11 @@ type XReadArgs struct {\n \tStreams []string // list of streams and ids, e.g. stream1 stream2 id1 id2\n \tCount   int64\n \tBlock   time.Duration\n+\tID      string\n }\n \n func (c cmdable) XRead(ctx context.Context, a *XReadArgs) *XStreamSliceCmd {\n-\targs := make([]interface{}, 0, 6+len(a.Streams))\n+\targs := make([]interface{}, 0, 2*len(a.Streams)+6)\n \targs = append(args, \"xread\")\n \n \tkeyPos := int8(1)\n@@ -159,6 +160,11 @@ func (c cmdable) XRead(ctx context.Context, a *XReadArgs) *XStreamSliceCmd {\n \tfor _, s := range a.Streams {\n \t\targs = append(args, s)\n \t}\n+\tif a.ID != \"\" {\n+\t\tfor range a.Streams {\n+\t\t\targs = append(args, a.ID)\n+\t\t}\n+\t}\n \n \tcmd := NewXStreamSliceCmd(ctx, args...)\n \tif a.Block >= 0 {\n@@ -178,36 +184,42 @@ func (c cmdable) XReadStreams(ctx context.Context, streams ...string) *XStreamSl\n \n func (c cmdable) XGroupCreate(ctx context.Context, stream, group, start string) *StatusCmd {\n \tcmd := NewStatusCmd(ctx, \"xgroup\", \"create\", stream, group, start)\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n \n func (c cmdable) XGroupCreateMkStream(ctx context.Context, stream, group, start string) *StatusCmd {\n \tcmd := NewStatusCmd(ctx, \"xgroup\", \"create\", stream, group, start, \"mkstream\")\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n \n func (c cmdable) XGroupSetID(ctx context.Context, stream, group, start string) *StatusCmd {\n \tcmd := NewStatusCmd(ctx, \"xgroup\", \"setid\", stream, group, start)\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n \n func (c cmdable) XGroupDestroy(ctx context.Context, stream, group string) *IntCmd {\n \tcmd := NewIntCmd(ctx, \"xgroup\", \"destroy\", stream, group)\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n \n func (c cmdable) XGroupCreateConsumer(ctx context.Context, stream, group, consumer string) *IntCmd {\n \tcmd := NewIntCmd(ctx, \"xgroup\", \"createconsumer\", stream, group, consumer)\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }\n \n func (c cmdable) XGroupDelConsumer(ctx context.Context, stream, group, consumer string) *IntCmd {\n \tcmd := NewIntCmd(ctx, \"xgroup\", \"delconsumer\", stream, group, consumer)\n+\tcmd.SetFirstKeyPos(2)\n \t_ = c(ctx, cmd)\n \treturn cmd\n }"
    },
    {
      "sha": "82d8cdfcf576304c8fd96025ab8b8bdb1fb34618",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/timeseries_commands.go",
      "status": "modified",
      "additions": 42,
      "deletions": 14,
      "changes": 56,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ftimeseries_commands.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ftimeseries_commands.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Ftimeseries_commands.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -40,25 +40,32 @@ type TimeseriesCmdable interface {\n }\n \n type TSOptions struct {\n-\tRetention       int\n-\tChunkSize       int\n-\tEncoding        string\n-\tDuplicatePolicy string\n-\tLabels          map[string]string\n+\tRetention         int\n+\tChunkSize         int\n+\tEncoding          string\n+\tDuplicatePolicy   string\n+\tLabels            map[string]string\n+\tIgnoreMaxTimeDiff int64\n+\tIgnoreMaxValDiff  float64\n }\n type TSIncrDecrOptions struct {\n-\tTimestamp    int64\n-\tRetention    int\n-\tChunkSize    int\n-\tUncompressed bool\n-\tLabels       map[string]string\n+\tTimestamp         int64\n+\tRetention         int\n+\tChunkSize         int\n+\tUncompressed      bool\n+\tDuplicatePolicy   string\n+\tLabels            map[string]string\n+\tIgnoreMaxTimeDiff int64\n+\tIgnoreMaxValDiff  float64\n }\n \n type TSAlterOptions struct {\n-\tRetention       int\n-\tChunkSize       int\n-\tDuplicatePolicy string\n-\tLabels          map[string]string\n+\tRetention         int\n+\tChunkSize         int\n+\tDuplicatePolicy   string\n+\tLabels            map[string]string\n+\tIgnoreMaxTimeDiff int64\n+\tIgnoreMaxValDiff  float64\n }\n \n type TSCreateRuleOptions struct {\n@@ -223,6 +230,9 @@ func (c cmdable) TSAddWithArgs(ctx context.Context, key string, timestamp interf\n \t\t\t\targs = append(args, label, value)\n \t\t\t}\n \t\t}\n+\t\tif options.IgnoreMaxTimeDiff != 0 || options.IgnoreMaxValDiff != 0 {\n+\t\t\targs = append(args, \"IGNORE\", options.IgnoreMaxTimeDiff, options.IgnoreMaxValDiff)\n+\t\t}\n \t}\n \tcmd := NewIntCmd(ctx, args...)\n \t_ = c(ctx, cmd)\n@@ -264,6 +274,9 @@ func (c cmdable) TSCreateWithArgs(ctx context.Context, key string, options *TSOp\n \t\t\t\targs = append(args, label, value)\n \t\t\t}\n \t\t}\n+\t\tif options.IgnoreMaxTimeDiff != 0 || options.IgnoreMaxValDiff != 0 {\n+\t\t\targs = append(args, \"IGNORE\", options.IgnoreMaxTimeDiff, options.IgnoreMaxValDiff)\n+\t\t}\n \t}\n \tcmd := NewStatusCmd(ctx, args...)\n \t_ = c(ctx, cmd)\n@@ -292,6 +305,9 @@ func (c cmdable) TSAlter(ctx context.Context, key string, options *TSAlterOption\n \t\t\t\targs = append(args, label, value)\n \t\t\t}\n \t\t}\n+\t\tif options.IgnoreMaxTimeDiff != 0 || options.IgnoreMaxValDiff != 0 {\n+\t\t\targs = append(args, \"IGNORE\", options.IgnoreMaxTimeDiff, options.IgnoreMaxValDiff)\n+\t\t}\n \t}\n \tcmd := NewStatusCmd(ctx, args...)\n \t_ = c(ctx, cmd)\n@@ -351,12 +367,18 @@ func (c cmdable) TSIncrByWithArgs(ctx context.Context, key string, timestamp flo\n \t\tif options.Uncompressed {\n \t\t\targs = append(args, \"UNCOMPRESSED\")\n \t\t}\n+\t\tif options.DuplicatePolicy != \"\" {\n+\t\t\targs = append(args, \"DUPLICATE_POLICY\", options.DuplicatePolicy)\n+\t\t}\n \t\tif options.Labels != nil {\n \t\t\targs = append(args, \"LABELS\")\n \t\t\tfor label, value := range options.Labels {\n \t\t\t\targs = append(args, label, value)\n \t\t\t}\n \t\t}\n+\t\tif options.IgnoreMaxTimeDiff != 0 || options.IgnoreMaxValDiff != 0 {\n+\t\t\targs = append(args, \"IGNORE\", options.IgnoreMaxTimeDiff, options.IgnoreMaxValDiff)\n+\t\t}\n \t}\n \tcmd := NewIntCmd(ctx, args...)\n \t_ = c(ctx, cmd)\n@@ -391,12 +413,18 @@ func (c cmdable) TSDecrByWithArgs(ctx context.Context, key string, timestamp flo\n \t\tif options.Uncompressed {\n \t\t\targs = append(args, \"UNCOMPRESSED\")\n \t\t}\n+\t\tif options.DuplicatePolicy != \"\" {\n+\t\t\targs = append(args, \"DUPLICATE_POLICY\", options.DuplicatePolicy)\n+\t\t}\n \t\tif options.Labels != nil {\n \t\t\targs = append(args, \"LABELS\")\n \t\t\tfor label, value := range options.Labels {\n \t\t\t\targs = append(args, label, value)\n \t\t\t}\n \t\t}\n+\t\tif options.IgnoreMaxTimeDiff != 0 || options.IgnoreMaxValDiff != 0 {\n+\t\t\targs = append(args, \"IGNORE\", options.IgnoreMaxTimeDiff, options.IgnoreMaxValDiff)\n+\t\t}\n \t}\n \tcmd := NewIntCmd(ctx, args...)\n \t_ = c(ctx, cmd)"
    },
    {
      "sha": "f4d2d75980fd27ef48e45a3baa95f5744a709c4a",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/universal.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Funiversal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Funiversal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Funiversal.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -68,6 +68,7 @@ type UniversalOptions struct {\n \n \tDisableIndentity bool\n \tIdentitySuffix   string\n+\tUnstableResp3    bool\n }\n \n // Cluster returns cluster options created from the universal options.\n@@ -160,6 +161,7 @@ func (o *UniversalOptions) Failover() *FailoverOptions {\n \n \t\tDisableIndentity: o.DisableIndentity,\n \t\tIdentitySuffix:   o.IdentitySuffix,\n+\t\tUnstableResp3:    o.UnstableResp3,\n \t}\n }\n \n@@ -203,6 +205,7 @@ func (o *UniversalOptions) Simple() *Options {\n \n \t\tDisableIndentity: o.DisableIndentity,\n \t\tIdentitySuffix:   o.IdentitySuffix,\n+\t\tUnstableResp3:    o.UnstableResp3,\n \t}\n }\n "
    },
    {
      "sha": "2b9926ea4a083f313d9361f4f8e122e8332e86a2",
      "filename": "backend/vendor/github.com/redis/go-redis/v9/version.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fversion.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fversion.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fredis%2Fgo-redis%2Fv9%2Fversion.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -2,5 +2,5 @@ package redis\n \n // Version is the current release version.\n func Version() string {\n-\treturn \"9.4.0\"\n+\treturn \"9.7.0\"\n }"
    },
    {
      "sha": "a3fb1a0a7f6ef2caaa71294a1a487ee6774557e9",
      "filename": "backend/vendor/github.com/slack-go/slack/block.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -18,6 +18,7 @@ const (\n \tMBTInput    MessageBlockType = \"input\"\n \tMBTHeader   MessageBlockType = \"header\"\n \tMBTRichText MessageBlockType = \"rich_text\"\n+\tMBTCall     MessageBlockType = \"call\"\n \tMBTVideo    MessageBlockType = \"video\"\n )\n "
    },
    {
      "sha": "98f2c02552d7c95ee9a6f9910b7c9ceba18085f6",
      "filename": "backend/vendor/github.com/slack-go/slack/block_call.go",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_call.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_call.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_call.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,23 @@\n+package slack\n+\n+// CallBlock defines data that is used to display a call in slack.\n+//\n+// More Information: https://api.slack.com/apis/calls#post_to_channel\n+type CallBlock struct {\n+\tType    MessageBlockType `json:\"type\"`\n+\tBlockID string           `json:\"block_id,omitempty\"`\n+\tCallID  string           `json:\"call_id\"`\n+}\n+\n+// BlockType returns the type of the block\n+func (s CallBlock) BlockType() MessageBlockType {\n+\treturn s.Type\n+}\n+\n+// NewFileBlock returns a new instance of a file block\n+func NewCallBlock(callID string) *CallBlock {\n+\treturn &CallBlock{\n+\t\tType:   MBTCall,\n+\t\tCallID: callID,\n+\t}\n+}"
    },
    {
      "sha": "26c57bbbb49c93a21ce27d3ffe4fe42cbbd41f54",
      "filename": "backend/vendor/github.com/slack-go/slack/block_conv.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_conv.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_conv.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_conv.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -69,6 +69,8 @@ func (b *Blocks) UnmarshalJSON(data []byte) error {\n \t\t\tblock = &RichTextBlock{}\n \t\tcase \"section\":\n \t\t\tblock = &SectionBlock{}\n+\t\tcase \"call\":\n+\t\t\tblock = &CallBlock{}\n \t\tcase \"video\":\n \t\t\tblock = &VideoBlock{}\n \t\tdefault:"
    },
    {
      "sha": "ad3b67006e38f5f0dfdbe02e100c2b6d896648d9",
      "filename": "backend/vendor/github.com/slack-go/slack/block_element.go",
      "status": "modified",
      "additions": 133,
      "deletions": 1,
      "changes": 134,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_element.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_element.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_element.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -258,6 +258,36 @@ func NewOptionsSelectBlockElement(optType string, placeholder *TextBlockObject,\n \t}\n }\n \n+// WithInitialOption sets the initial option for the select element\n+func (s *SelectBlockElement) WithInitialOption(option *OptionBlockObject) *SelectBlockElement {\n+\ts.InitialOption = option\n+\treturn s\n+}\n+\n+// WithInitialUser sets the initial user for the select element\n+func (s *SelectBlockElement) WithInitialUser(user string) *SelectBlockElement {\n+\ts.InitialUser = user\n+\treturn s\n+}\n+\n+// WithInitialConversation sets the initial conversation for the select element\n+func (s *SelectBlockElement) WithInitialConversation(conversation string) *SelectBlockElement {\n+\ts.InitialConversation = conversation\n+\treturn s\n+}\n+\n+// WithInitialChannel sets the initial channel for the select element\n+func (s *SelectBlockElement) WithInitialChannel(channel string) *SelectBlockElement {\n+\ts.InitialChannel = channel\n+\treturn s\n+}\n+\n+// WithConfirm adds a confirmation dialogue to the select element\n+func (s *SelectBlockElement) WithConfirm(confirm *ConfirmationBlockObject) *SelectBlockElement {\n+\ts.Confirm = confirm\n+\treturn s\n+}\n+\n // NewOptionsGroupSelectBlockElement returns a new instance of SelectBlockElement for use with\n // the Options object only.\n func NewOptionsGroupSelectBlockElement(\n@@ -309,6 +339,48 @@ func NewOptionsMultiSelectBlockElement(optType string, placeholder *TextBlockObj\n \t}\n }\n \n+// WithInitialOptions sets the initial options for the multi-select element\n+func (s *MultiSelectBlockElement) WithInitialOptions(options ...*OptionBlockObject) *MultiSelectBlockElement {\n+\ts.InitialOptions = options\n+\treturn s\n+}\n+\n+// WithInitialUsers sets the initial users for the multi-select element\n+func (s *MultiSelectBlockElement) WithInitialUsers(users ...string) *MultiSelectBlockElement {\n+\ts.InitialUsers = users\n+\treturn s\n+}\n+\n+// WithInitialConversations sets the initial conversations for the multi-select element\n+func (s *MultiSelectBlockElement) WithInitialConversations(conversations ...string) *MultiSelectBlockElement {\n+\ts.InitialConversations = conversations\n+\treturn s\n+}\n+\n+// WithInitialChannels sets the initial channels for the multi-select element\n+func (s *MultiSelectBlockElement) WithInitialChannels(channels ...string) *MultiSelectBlockElement {\n+\ts.InitialChannels = channels\n+\treturn s\n+}\n+\n+// WithConfirm adds a confirmation dialogue to the multi-select element\n+func (s *MultiSelectBlockElement) WithConfirm(confirm *ConfirmationBlockObject) *MultiSelectBlockElement {\n+\ts.Confirm = confirm\n+\treturn s\n+}\n+\n+// WithMaxSelectedItems sets the maximum number of items that can be selected\n+func (s *MultiSelectBlockElement) WithMaxSelectedItems(maxSelectedItems int) *MultiSelectBlockElement {\n+\ts.MaxSelectedItems = &maxSelectedItems\n+\treturn s\n+}\n+\n+// WithMinQueryLength sets the minimum query length for the multi-select element\n+func (s *MultiSelectBlockElement) WithMinQueryLength(minQueryLength int) *MultiSelectBlockElement {\n+\ts.MinQueryLength = &minQueryLength\n+\treturn s\n+}\n+\n // NewOptionsGroupMultiSelectBlockElement returns a new instance of MultiSelectBlockElement for use with\n // the Options object only.\n func NewOptionsGroupMultiSelectBlockElement(\n@@ -352,6 +424,12 @@ func NewOverflowBlockElement(actionID string, options ...*OptionBlockObject) *Ov\n \t}\n }\n \n+// WithConfirm adds a confirmation dialogue to the overflow element\n+func (s *OverflowBlockElement) WithConfirm(confirm *ConfirmationBlockObject) *OverflowBlockElement {\n+\ts.Confirm = confirm\n+\treturn s\n+}\n+\n // DatePickerBlockElement defines an element which lets users easily select a\n // date from a calendar style UI. Date picker elements can be used inside of\n // section and actions blocks.\n@@ -520,14 +598,44 @@ func NewPlainTextInputBlockElement(placeholder *TextBlockObject, actionID string\n \t}\n }\n \n+// WithInitialValue sets the initial value for the plain-text input element\n+func (s *PlainTextInputBlockElement) WithInitialValue(initialValue string) *PlainTextInputBlockElement {\n+\ts.InitialValue = initialValue\n+\treturn s\n+}\n+\n+// WithMinLength sets the minimum length for the plain-text input element\n+func (s *PlainTextInputBlockElement) WithMinLength(minLength int) *PlainTextInputBlockElement {\n+\ts.MinLength = minLength\n+\treturn s\n+}\n+\n+// WithMaxLength sets the maximum length for the plain-text input element\n+func (s *PlainTextInputBlockElement) WithMaxLength(maxLength int) *PlainTextInputBlockElement {\n+\ts.MaxLength = maxLength\n+\treturn s\n+}\n+\n+// WithMultiline sets the multiline property for the plain-text input element\n+func (s *PlainTextInputBlockElement) WithMultiline(multiline bool) *PlainTextInputBlockElement {\n+\ts.Multiline = multiline\n+\treturn s\n+}\n+\n+// WithDispatchActionConfig sets the dispatch action config for the plain-text input element\n+func (s *PlainTextInputBlockElement) WithDispatchActionConfig(config *DispatchActionConfig) *PlainTextInputBlockElement {\n+\ts.DispatchActionConfig = config\n+\treturn s\n+}\n+\n // RichTextInputBlockElement creates a field where allows users to enter formatted text\n // in a WYSIWYG composer, offering the same messaging writing experience as in Slack\n // More Information: https://api.slack.com/reference/block-kit/block-elements#rich_text_input\n type RichTextInputBlockElement struct {\n \tType                 MessageElementType    `json:\"type\"`\n \tActionID             string                `json:\"action_id,omitempty\"`\n \tPlaceholder          *TextBlockObject      `json:\"placeholder,omitempty\"`\n-\tInitialValue         string                `json:\"initial_value,omitempty\"`\n+\tInitialValue         *RichTextBlock        `json:\"initial_value,omitempty\"`\n \tDispatchActionConfig *DispatchActionConfig `json:\"dispatch_action_config,omitempty\"`\n \tFocusOnLoad          bool                  `json:\"focus_on_load,omitempty\"`\n }\n@@ -629,6 +737,30 @@ func NewNumberInputBlockElement(placeholder *TextBlockObject, actionID string, i\n \t}\n }\n \n+// WithInitialValue sets the initial value for the number input element\n+func (s *NumberInputBlockElement) WithInitialValue(initialValue string) *NumberInputBlockElement {\n+\ts.InitialValue = initialValue\n+\treturn s\n+}\n+\n+// WithMinValue sets the minimum value for the number input element\n+func (s *NumberInputBlockElement) WithMinValue(minValue string) *NumberInputBlockElement {\n+\ts.MinValue = minValue\n+\treturn s\n+}\n+\n+// WithMaxValue sets the maximum value for the number input element\n+func (s *NumberInputBlockElement) WithMaxValue(maxValue string) *NumberInputBlockElement {\n+\ts.MaxValue = maxValue\n+\treturn s\n+}\n+\n+// WithDispatchActionConfig sets the dispatch action config for the number input element\n+func (s *NumberInputBlockElement) WithDispatchActionConfig(config *DispatchActionConfig) *NumberInputBlockElement {\n+\ts.DispatchActionConfig = config\n+\treturn s\n+}\n+\n // FileInputBlockElement creates a field where a user can upload a file.\n //\n // File input elements are currently only available in modals."
    },
    {
      "sha": "7c1272a64d1ae1fe1cb8925863317a88426f5af6",
      "filename": "backend/vendor/github.com/slack-go/slack/block_input.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_input.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_input.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_input.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -28,3 +28,15 @@ func NewInputBlock(blockID string, label, hint *TextBlockObject, element BlockEl\n \t\tHint:    hint,\n \t}\n }\n+\n+// WithOptional sets the optional flag on the input block\n+func (s *InputBlock) WithOptional(optional bool) *InputBlock {\n+\ts.Optional = optional\n+\treturn s\n+}\n+\n+// WithDispatchAction sets the dispatch action flag on the input block\n+func (s *InputBlock) WithDispatchAction(dispatchAction bool) *InputBlock {\n+\ts.DispatchAction = dispatchAction\n+\treturn s\n+}"
    },
    {
      "sha": "c6eb0b1ba94dc6df4ec3a8eaed20974370ded979",
      "filename": "backend/vendor/github.com/slack-go/slack/block_rich_text.go",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_rich_text.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_rich_text.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fblock_rich_text.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -341,6 +341,7 @@ type RichTextSectionEmojiElement struct {\n \tType     RichTextSectionElementType `json:\"type\"`\n \tName     string                     `json:\"name\"`\n \tSkinTone int                        `json:\"skin_tone\"`\n+\tUnicode  string                     `json:\"unicode,omitempty\"`\n \tStyle    *RichTextSectionTextStyle  `json:\"style,omitempty\"`\n }\n \n@@ -414,16 +415,22 @@ func NewRichTextSectionUserGroupElement(usergroupID string) *RichTextSectionUser\n type RichTextSectionDateElement struct {\n \tType      RichTextSectionElementType `json:\"type\"`\n \tTimestamp JSONTime                   `json:\"timestamp\"`\n+\tFormat    string                     `json:\"format\"`\n+\tURL       *string                    `json:\"url,omitempty\"`\n+\tFallback  *string                    `json:\"fallback,omitempty\"`\n }\n \n func (r RichTextSectionDateElement) RichTextSectionElementType() RichTextSectionElementType {\n \treturn r.Type\n }\n \n-func NewRichTextSectionDateElement(timestamp int64) *RichTextSectionDateElement {\n+func NewRichTextSectionDateElement(timestamp int64, format string, url *string, fallback *string) *RichTextSectionDateElement {\n \treturn &RichTextSectionDateElement{\n \t\tType:      RTSEDate,\n \t\tTimestamp: JSONTime(timestamp),\n+\t\tFormat:    format,\n+\t\tURL:       url,\n+\t\tFallback:  fallback,\n \t}\n }\n "
    },
    {
      "sha": "2d6e91f16c9edca84c1c1083d1c3e2f4e63c91e7",
      "filename": "backend/vendor/github.com/slack-go/slack/calls.go",
      "status": "added",
      "additions": 216,
      "deletions": 0,
      "changes": 216,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcalls.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcalls.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcalls.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,216 @@\n+package slack\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"net/url\"\n+\t\"strconv\"\n+\t\"time\"\n+)\n+\n+type Call struct {\n+\tID                string            `json:\"id\"`\n+\tTitle             string            `json:\"title\"`\n+\tDateStart         JSONTime          `json:\"date_start\"`\n+\tDateEnd           JSONTime          `json:\"date_end\"`\n+\tExternalUniqueID  string            `json:\"external_unique_id\"`\n+\tJoinURL           string            `json:\"join_url\"`\n+\tDesktopAppJoinURL string            `json:\"desktop_app_join_url\"`\n+\tExternalDisplayID string            `json:\"external_display_id\"`\n+\tParticipants      []CallParticipant `json:\"users\"`\n+\tChannels          []string          `json:\"channels\"`\n+}\n+\n+// CallParticipant is a thin user representation which has a SlackID, ExternalID, or both.\n+//\n+// See: https://api.slack.com/apis/calls#users\n+type CallParticipant struct {\n+\tSlackID     string `json:\"slack_id,omitempty\"`\n+\tExternalID  string `json:\"external_id,omitempty\"`\n+\tDisplayName string `json:\"display_name,omitempty\"`\n+\tAvatarURL   string `json:\"avatar_url,omitempty\"`\n+}\n+\n+// Valid checks if the CallUser has a is valid with a SlackID or ExternalID or both.\n+func (u CallParticipant) Valid() bool {\n+\treturn u.SlackID != \"\" || u.ExternalID != \"\"\n+}\n+\n+type AddCallParameters struct {\n+\tJoinURL           string // Required\n+\tExternalUniqueID  string // Required\n+\tCreatedBy         string // Required if using a bot token\n+\tTitle             string\n+\tDesktopAppJoinURL string\n+\tExternalDisplayID string\n+\tDateStart         JSONTime\n+\tParticipants      []CallParticipant\n+}\n+\n+type UpdateCallParameters struct {\n+\tTitle             string\n+\tDesktopAppJoinURL string\n+\tJoinURL           string\n+}\n+\n+type EndCallParameters struct {\n+\t// Duration is the duration of the call in seconds. Omitted if 0.\n+\tDuration time.Duration\n+}\n+\n+type callResponse struct {\n+\tCall Call `json:\"call\"`\n+\tSlackResponse\n+}\n+\n+// AddCall adds a new Call to the Slack API.\n+func (api *Client) AddCall(params AddCallParameters) (Call, error) {\n+\treturn api.AddCallContext(context.Background(), params)\n+}\n+\n+// AddCallContext adds a new Call to the Slack API.\n+func (api *Client) AddCallContext(ctx context.Context, params AddCallParameters) (Call, error) {\n+\tvalues := url.Values{\n+\t\t\"token\":              {api.token},\n+\t\t\"join_url\":           {params.JoinURL},\n+\t\t\"external_unique_id\": {params.ExternalUniqueID},\n+\t}\n+\tif params.CreatedBy != \"\" {\n+\t\tvalues.Set(\"created_by\", params.CreatedBy)\n+\t}\n+\tif params.DateStart != 0 {\n+\t\tvalues.Set(\"date_start\", strconv.FormatInt(int64(params.DateStart), 10))\n+\t}\n+\tif params.DesktopAppJoinURL != \"\" {\n+\t\tvalues.Set(\"desktop_app_join_url\", params.DesktopAppJoinURL)\n+\t}\n+\tif params.ExternalDisplayID != \"\" {\n+\t\tvalues.Set(\"external_display_id\", params.ExternalDisplayID)\n+\t}\n+\tif params.Title != \"\" {\n+\t\tvalues.Set(\"title\", params.Title)\n+\t}\n+\tif len(params.Participants) > 0 {\n+\t\tdata, err := json.Marshal(params.Participants)\n+\t\tif err != nil {\n+\t\t\treturn Call{}, err\n+\t\t}\n+\t\tvalues.Set(\"users\", string(data))\n+\t}\n+\n+\tresponse := &callResponse{}\n+\tif err := api.postMethod(ctx, \"calls.add\", values, response); err != nil {\n+\t\treturn Call{}, err\n+\t}\n+\n+\treturn response.Call, response.Err()\n+}\n+\n+// GetCallInfo returns information about a Call.\n+func (api *Client) GetCall(callID string) (Call, error) {\n+\treturn api.GetCallContext(context.Background(), callID)\n+}\n+\n+// GetCallInfoContext returns information about a Call.\n+func (api *Client) GetCallContext(ctx context.Context, callID string) (Call, error) {\n+\tvalues := url.Values{\n+\t\t\"token\": {api.token},\n+\t\t\"id\":    {callID},\n+\t}\n+\n+\tresponse := &callResponse{}\n+\tif err := api.postMethod(ctx, \"calls.info\", values, response); err != nil {\n+\t\treturn Call{}, err\n+\t}\n+\treturn response.Call, response.Err()\n+}\n+\n+func (api *Client) UpdateCall(callID string, params UpdateCallParameters) (Call, error) {\n+\treturn api.UpdateCallContext(context.Background(), callID, params)\n+}\n+\n+// UpdateCallContext updates a Call with the given parameters.\n+func (api *Client) UpdateCallContext(ctx context.Context, callID string, params UpdateCallParameters) (Call, error) {\n+\tvalues := url.Values{\n+\t\t\"token\": {api.token},\n+\t\t\"id\":    {callID},\n+\t}\n+\n+\tif params.DesktopAppJoinURL != \"\" {\n+\t\tvalues.Set(\"desktop_app_join_url\", params.DesktopAppJoinURL)\n+\t}\n+\tif params.JoinURL != \"\" {\n+\t\tvalues.Set(\"join_url\", params.JoinURL)\n+\t}\n+\tif params.Title != \"\" {\n+\t\tvalues.Set(\"title\", params.Title)\n+\t}\n+\n+\tresponse := &callResponse{}\n+\tif err := api.postMethod(ctx, \"calls.update\", values, response); err != nil {\n+\t\treturn Call{}, err\n+\t}\n+\treturn response.Call, response.Err()\n+}\n+\n+// EndCall ends a Call.\n+func (api *Client) EndCall(callID string, params EndCallParameters) error {\n+\treturn api.EndCallContext(context.Background(), callID, params)\n+}\n+\n+// EndCallContext ends a Call.\n+func (api *Client) EndCallContext(ctx context.Context, callID string, params EndCallParameters) error {\n+\tvalues := url.Values{\n+\t\t\"token\": {api.token},\n+\t\t\"id\":    {callID},\n+\t}\n+\n+\tif params.Duration != 0 {\n+\t\tvalues.Set(\"duration\", strconv.FormatInt(int64(params.Duration.Seconds()), 10))\n+\t}\n+\n+\tresponse := &SlackResponse{}\n+\tif err := api.postMethod(ctx, \"calls.end\", values, response); err != nil {\n+\t\treturn err\n+\t}\n+\treturn response.Err()\n+}\n+\n+// CallAddParticipants adds users to a Call.\n+func (api *Client) CallAddParticipants(callID string, participants []CallParticipant) error {\n+\treturn api.CallAddParticipantsContext(context.Background(), callID, participants)\n+}\n+\n+// CallAddParticipantsContext adds users to a Call.\n+func (api *Client) CallAddParticipantsContext(ctx context.Context, callID string, participants []CallParticipant) error {\n+\treturn api.setCallParticipants(ctx, \"calls.participants.add\", callID, participants)\n+}\n+\n+// CallRemoveParticipants removes users from a Call.\n+func (api *Client) CallRemoveParticipants(callID string, participants []CallParticipant) error {\n+\treturn api.CallRemoveParticipantsContext(context.Background(), callID, participants)\n+}\n+\n+// CallRemoveParticipantsContext removes users from a Call.\n+func (api *Client) CallRemoveParticipantsContext(ctx context.Context, callID string, participants []CallParticipant) error {\n+\treturn api.setCallParticipants(ctx, \"calls.participants.remove\", callID, participants)\n+}\n+\n+func (api *Client) setCallParticipants(ctx context.Context, method, callID string, participants []CallParticipant) error {\n+\tvalues := url.Values{\n+\t\t\"token\": {api.token},\n+\t\t\"id\":    {callID},\n+\t}\n+\n+\tdata, err := json.Marshal(participants)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tvalues.Set(\"users\", string(data))\n+\n+\tresponse := &SlackResponse{}\n+\tif err := api.postMethod(ctx, method, values, response); err != nil {\n+\t\treturn err\n+\t}\n+\treturn response.Err()\n+}"
    },
    {
      "sha": "5225afa35cba4cefedadd9e072016b46307e9368",
      "filename": "backend/vendor/github.com/slack-go/slack/canvas.go",
      "status": "added",
      "additions": 264,
      "deletions": 0,
      "changes": 264,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcanvas.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcanvas.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fcanvas.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,264 @@\n+package slack\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"net/url\"\n+)\n+\n+type CanvasDetails struct {\n+\tCanvasID string `json:\"canvas_id\"`\n+}\n+\n+type DocumentContent struct {\n+\tType     string `json:\"type\"`\n+\tMarkdown string `json:\"markdown,omitempty\"`\n+}\n+\n+type CanvasChange struct {\n+\tOperation       string          `json:\"operation\"`\n+\tSectionID       string          `json:\"section_id,omitempty\"`\n+\tDocumentContent DocumentContent `json:\"document_content\"`\n+}\n+\n+type EditCanvasParams struct {\n+\tCanvasID string         `json:\"canvas_id\"`\n+\tChanges  []CanvasChange `json:\"changes\"`\n+}\n+\n+type SetCanvasAccessParams struct {\n+\tCanvasID    string   `json:\"canvas_id\"`\n+\tAccessLevel string   `json:\"access_level\"`\n+\tChannelIDs  []string `json:\"channel_ids,omitempty\"`\n+\tUserIDs     []string `json:\"user_ids,omitempty\"`\n+}\n+\n+type DeleteCanvasAccessParams struct {\n+\tCanvasID   string   `json:\"canvas_id\"`\n+\tChannelIDs []string `json:\"channel_ids,omitempty\"`\n+\tUserIDs    []string `json:\"user_ids,omitempty\"`\n+}\n+\n+type LookupCanvasSectionsCriteria struct {\n+\tSectionTypes []string `json:\"section_types,omitempty\"`\n+\tContainsText string   `json:\"contains_text,omitempty\"`\n+}\n+\n+type LookupCanvasSectionsParams struct {\n+\tCanvasID string                       `json:\"canvas_id\"`\n+\tCriteria LookupCanvasSectionsCriteria `json:\"criteria\"`\n+}\n+\n+type CanvasSection struct {\n+\tID string `json:\"id\"`\n+}\n+\n+type LookupCanvasSectionsResponse struct {\n+\tSlackResponse\n+\tSections []CanvasSection `json:\"sections\"`\n+}\n+\n+// CreateCanvas creates a new canvas.\n+// For more details, see CreateCanvasContext documentation.\n+func (api *Client) CreateCanvas(title string, documentContent DocumentContent) (string, error) {\n+\treturn api.CreateCanvasContext(context.Background(), title, documentContent)\n+}\n+\n+// CreateCanvasContext creates a new canvas with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.create\n+func (api *Client) CreateCanvasContext(ctx context.Context, title string, documentContent DocumentContent) (string, error) {\n+\tvalues := url.Values{\n+\t\t\"token\": {api.token},\n+\t}\n+\tif title != \"\" {\n+\t\tvalues.Add(\"title\", title)\n+\t}\n+\tif documentContent.Type != \"\" {\n+\t\tdocumentContentJSON, err := json.Marshal(documentContent)\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\tvalues.Add(\"document_content\", string(documentContentJSON))\n+\t}\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t\tCanvasID string `json:\"canvas_id\"`\n+\t}{}\n+\n+\terr := api.postMethod(ctx, \"canvases.create\", values, &response)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\n+\treturn response.CanvasID, response.Err()\n+}\n+\n+// DeleteCanvas deletes an existing canvas.\n+// For more details, see DeleteCanvasContext documentation.\n+func (api *Client) DeleteCanvas(canvasID string) error {\n+\treturn api.DeleteCanvasContext(context.Background(), canvasID)\n+}\n+\n+// DeleteCanvasContext deletes an existing canvas with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.delete\n+func (api *Client) DeleteCanvasContext(ctx context.Context, canvasID string) error {\n+\tvalues := url.Values{\n+\t\t\"token\":     {api.token},\n+\t\t\"canvas_id\": {canvasID},\n+\t}\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t}{}\n+\n+\terr := api.postMethod(ctx, \"canvases.delete\", values, &response)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn response.Err()\n+}\n+\n+// EditCanvas edits an existing canvas.\n+// For more details, see EditCanvasContext documentation.\n+func (api *Client) EditCanvas(params EditCanvasParams) error {\n+\treturn api.EditCanvasContext(context.Background(), params)\n+}\n+\n+// EditCanvasContext edits an existing canvas with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.edit\n+func (api *Client) EditCanvasContext(ctx context.Context, params EditCanvasParams) error {\n+\tvalues := url.Values{\n+\t\t\"token\":     {api.token},\n+\t\t\"canvas_id\": {params.CanvasID},\n+\t}\n+\n+\tchangesJSON, err := json.Marshal(params.Changes)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tvalues.Add(\"changes\", string(changesJSON))\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t}{}\n+\n+\terr = api.postMethod(ctx, \"canvases.edit\", values, &response)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn response.Err()\n+}\n+\n+// SetCanvasAccess sets the access level to a canvas for specified entities.\n+// For more details, see SetCanvasAccessContext documentation.\n+func (api *Client) SetCanvasAccess(params SetCanvasAccessParams) error {\n+\treturn api.SetCanvasAccessContext(context.Background(), params)\n+}\n+\n+// SetCanvasAccessContext sets the access level to a canvas for specified entities with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.access.set\n+func (api *Client) SetCanvasAccessContext(ctx context.Context, params SetCanvasAccessParams) error {\n+\tvalues := url.Values{\n+\t\t\"token\":        {api.token},\n+\t\t\"canvas_id\":    {params.CanvasID},\n+\t\t\"access_level\": {params.AccessLevel},\n+\t}\n+\tif len(params.ChannelIDs) > 0 {\n+\t\tchannelIDsJSON, err := json.Marshal(params.ChannelIDs)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tvalues.Add(\"channel_ids\", string(channelIDsJSON))\n+\t}\n+\tif len(params.UserIDs) > 0 {\n+\t\tuserIDsJSON, err := json.Marshal(params.UserIDs)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tvalues.Add(\"user_ids\", string(userIDsJSON))\n+\t}\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t}{}\n+\n+\terr := api.postMethod(ctx, \"canvases.access.set\", values, &response)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn response.Err()\n+}\n+\n+// DeleteCanvasAccess removes access to a canvas for specified entities.\n+// For more details, see DeleteCanvasAccessContext documentation.\n+func (api *Client) DeleteCanvasAccess(params DeleteCanvasAccessParams) error {\n+\treturn api.DeleteCanvasAccessContext(context.Background(), params)\n+}\n+\n+// DeleteCanvasAccessContext removes access to a canvas for specified entities with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.access.delete\n+func (api *Client) DeleteCanvasAccessContext(ctx context.Context, params DeleteCanvasAccessParams) error {\n+\tvalues := url.Values{\n+\t\t\"token\":     {api.token},\n+\t\t\"canvas_id\": {params.CanvasID},\n+\t}\n+\tif len(params.ChannelIDs) > 0 {\n+\t\tchannelIDsJSON, err := json.Marshal(params.ChannelIDs)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tvalues.Add(\"channel_ids\", string(channelIDsJSON))\n+\t}\n+\tif len(params.UserIDs) > 0 {\n+\t\tuserIDsJSON, err := json.Marshal(params.UserIDs)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tvalues.Add(\"user_ids\", string(userIDsJSON))\n+\t}\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t}{}\n+\n+\terr := api.postMethod(ctx, \"canvases.access.delete\", values, &response)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn response.Err()\n+}\n+\n+// LookupCanvasSections finds sections matching the provided criteria.\n+// For more details, see LookupCanvasSectionsContext documentation.\n+func (api *Client) LookupCanvasSections(params LookupCanvasSectionsParams) ([]CanvasSection, error) {\n+\treturn api.LookupCanvasSectionsContext(context.Background(), params)\n+}\n+\n+// LookupCanvasSectionsContext finds sections matching the provided criteria with a custom context.\n+// Slack API docs: https://api.slack.com/methods/canvases.sections.lookup\n+func (api *Client) LookupCanvasSectionsContext(ctx context.Context, params LookupCanvasSectionsParams) ([]CanvasSection, error) {\n+\tvalues := url.Values{\n+\t\t\"token\":     {api.token},\n+\t\t\"canvas_id\": {params.CanvasID},\n+\t}\n+\n+\tcriteriaJSON, err := json.Marshal(params.Criteria)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tvalues.Add(\"criteria\", string(criteriaJSON))\n+\n+\tresponse := LookupCanvasSectionsResponse{}\n+\n+\terr = api.postMethod(ctx, \"canvases.sections.lookup\", values, &response)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn response.Sections, response.Err()\n+}"
    },
    {
      "sha": "96843d68d9d1e89ac4faedfeeefe79070a860ef1",
      "filename": "backend/vendor/github.com/slack-go/slack/chat.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fchat.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fchat.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fchat.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -377,6 +377,7 @@ func (t responseURLSender) BuildRequestContext(ctx context.Context) (*http.Reque\n \treq, err := jsonReq(ctx, t.endpoint, Msg{\n \t\tText:            t.values.Get(\"text\"),\n \t\tTimestamp:       t.values.Get(\"ts\"),\n+\t\tThreadTimestamp: t.values.Get(\"thread_ts\"),\n \t\tAttachments:     t.attachments,\n \t\tBlocks:          t.blocks,\n \t\tMetadata:        t.metadata,"
    },
    {
      "sha": "67d28be3b54c2a03b8654c1f94ada1bba6a4bbde",
      "filename": "backend/vendor/github.com/slack-go/slack/conversation.go",
      "status": "modified",
      "additions": 78,
      "deletions": 15,
      "changes": 93,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fconversation.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fconversation.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Fconversation.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -2,6 +2,7 @@ package slack\n \n import (\n \t\"context\"\n+\t\"encoding/json\"\n \t\"errors\"\n \t\"net/url\"\n \t\"strconv\"\n@@ -329,42 +330,71 @@ func (api *Client) InviteUsersToConversationContext(ctx context.Context, channel\n }\n \n // InviteSharedEmailsToConversation invites users to a shared channels by email.\n-// For more details, see InviteSharedEmailsToConversationContext documentation.\n+// For more details, see InviteSharedToConversationContext documentation.\n func (api *Client) InviteSharedEmailsToConversation(channelID string, emails ...string) (string, bool, error) {\n-\treturn api.inviteSharedToConversationHelper(context.Background(), channelID, emails, nil)\n+\treturn api.InviteSharedToConversationContext(context.Background(), InviteSharedToConversationParams{\n+\t\tChannelID: channelID,\n+\t\tEmails:    emails,\n+\t})\n }\n \n // InviteSharedEmailsToConversationContext invites users to a shared channels by email using context.\n-// For more details, see inviteSharedToConversationHelper documentation.\n+// For more details, see InviteSharedToConversationContext documentation.\n func (api *Client) InviteSharedEmailsToConversationContext(ctx context.Context, channelID string, emails ...string) (string, bool, error) {\n-\treturn api.inviteSharedToConversationHelper(ctx, channelID, emails, nil)\n+\treturn api.InviteSharedToConversationContext(ctx, InviteSharedToConversationParams{\n+\t\tChannelID: channelID,\n+\t\tEmails:    emails,\n+\t})\n }\n \n // InviteSharedUserIDsToConversation invites users to a shared channels by user id.\n-// For more details, see InviteSharedUserIDsToConversationContext documentation.\n+// For more details, see InviteSharedToConversationContext documentation.\n func (api *Client) InviteSharedUserIDsToConversation(channelID string, userIDs ...string) (string, bool, error) {\n-\treturn api.inviteSharedToConversationHelper(context.Background(), channelID, nil, userIDs)\n+\treturn api.InviteSharedToConversationContext(context.Background(), InviteSharedToConversationParams{\n+\t\tChannelID: channelID,\n+\t\tUserIDs:   userIDs,\n+\t})\n }\n \n // InviteSharedUserIDsToConversationContext invites users to a shared channels by user id with context.\n-// For more details, see inviteSharedToConversationHelper documentation.\n+// For more details, see InviteSharedToConversationContext documentation.\n func (api *Client) InviteSharedUserIDsToConversationContext(ctx context.Context, channelID string, userIDs ...string) (string, bool, error) {\n-\treturn api.inviteSharedToConversationHelper(ctx, channelID, nil, userIDs)\n+\treturn api.InviteSharedToConversationContext(ctx, InviteSharedToConversationParams{\n+\t\tChannelID: channelID,\n+\t\tUserIDs:   userIDs,\n+\t})\n }\n \n-// inviteSharedToConversationHelper invites emails or userIDs to a channel with a custom context.\n+// InviteSharedToConversationParams defines the parameters for the InviteSharedToConversation and InviteSharedToConversationContext functions.\n+type InviteSharedToConversationParams struct {\n+\tChannelID       string\n+\tEmails          []string\n+\tUserIDs         []string\n+\tExternalLimited *bool\n+}\n+\n+// InviteSharedToConversation invites emails or userIDs to a channel.\n+// For more details, see InviteSharedToConversationContext documentation.\n+func (api *Client) InviteSharedToConversation(params InviteSharedToConversationParams) (string, bool, error) {\n+\treturn api.InviteSharedToConversationContext(context.Background(), params)\n+}\n+\n+// InviteSharedToConversationContext invites emails or userIDs to a channel with a custom context.\n // This is a helper function for InviteSharedEmailsToConversation and InviteSharedUserIDsToConversation.\n // It accepts either emails or userIDs, but not both.\n // Slack API docs: https://api.slack.com/methods/conversations.inviteShared\n-func (api *Client) inviteSharedToConversationHelper(ctx context.Context, channelID string, emails []string, userIDs []string) (string, bool, error) {\n+func (api *Client) InviteSharedToConversationContext(ctx context.Context, params InviteSharedToConversationParams) (string, bool, error) {\n \tvalues := url.Values{\n \t\t\"token\":   {api.token},\n-\t\t\"channel\": {channelID},\n+\t\t\"channel\": {params.ChannelID},\n \t}\n-\tif len(emails) > 0 {\n-\t\tvalues.Add(\"emails\", strings.Join(emails, \",\"))\n-\t} else if len(userIDs) > 0 {\n-\t\tvalues.Add(\"user_ids\", strings.Join(userIDs, \",\"))\n+\tif len(params.Emails) > 0 {\n+\t\tvalues.Add(\"emails\", strings.Join(params.Emails, \",\"))\n+\t} else if len(params.UserIDs) > 0 {\n+\t\tvalues.Add(\"user_ids\", strings.Join(params.UserIDs, \",\"))\n+\t}\n+\tif params.ExternalLimited != nil {\n+\t\tvalues.Add(\"external_limited\", strconv.FormatBool(*params.ExternalLimited))\n \t}\n \tresponse := struct {\n \t\tSlackResponse\n@@ -796,3 +826,36 @@ func (api *Client) MarkConversationContext(ctx context.Context, channel, ts stri\n \t}\n \treturn response.Err()\n }\n+\n+// CreateChannelCanvas creates a new canvas in a channel.\n+// For more details, see CreateChannelCanvasContext documentation.\n+func (api *Client) CreateChannelCanvas(channel string, documentContent DocumentContent) (string, error) {\n+\treturn api.CreateChannelCanvasContext(context.Background(), channel, documentContent)\n+}\n+\n+// CreateChannelCanvasContext creates a new canvas in a channel with a custom context.\n+// Slack API docs: https://api.slack.com/methods/conversations.canvases.create\n+func (api *Client) CreateChannelCanvasContext(ctx context.Context, channel string, documentContent DocumentContent) (string, error) {\n+\tvalues := url.Values{\n+\t\t\"token\":      {api.token},\n+\t\t\"channel_id\": {channel},\n+\t}\n+\tif documentContent.Type != \"\" {\n+\t\tdocumentContentJSON, err := json.Marshal(documentContent)\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\tvalues.Add(\"document_content\", string(documentContentJSON))\n+\t}\n+\n+\tresponse := struct {\n+\t\tSlackResponse\n+\t\tCanvasID string `json:\"canvas_id\"`\n+\t}{}\n+\terr := api.postMethod(ctx, \"conversations.canvases.create\", values, &response)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\n+\treturn response.CanvasID, response.Err()\n+}"
    },
    {
      "sha": "b26317145e2f43523e0db7eb3a7e23f305d8d17e",
      "filename": "backend/vendor/github.com/slack-go/slack/files.go",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffiles.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffiles.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffiles.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -355,14 +355,16 @@ func (api *Client) ListFilesContext(ctx context.Context, params ListFilesParamet\n }\n \n // UploadFile uploads a file.\n-// DEPRECATED: Use UploadFileV2 instead. This will stop functioning on March 11, 2025.\n+//\n+// Deprecated: Use [Client.UploadFileV2] instead. This will stop functioning on March 11, 2025.\n // For more details, see: https://api.slack.com/methods/files.upload#markdown\n func (api *Client) UploadFile(params FileUploadParameters) (file *File, err error) {\n \treturn api.UploadFileContext(context.Background(), params)\n }\n \n // UploadFileContext uploads a file and setting a custom context.\n-// DEPRECATED: Use UploadFileV2Context instead. This will stop functioning on March 11, 2025.\n+//\n+// Deprecated: Use [Client.UploadFileV2Context] instead. This will stop functioning on March 11, 2025.\n // For more details, see: https://api.slack.com/methods/files.upload#markdown\n func (api *Client) UploadFileContext(ctx context.Context, params FileUploadParameters) (file *File, err error) {\n \t// Test if user token is valid. This helps because client.Do doesn't like this for some reason. XXX: More"
    },
    {
      "sha": "4ec8f9f4c4df5e4c87b286d9c49e97b8212e83d2",
      "filename": "backend/vendor/github.com/slack-go/slack/function_execute.go",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffunction_execute.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffunction_execute.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgithub.com%2Fslack-go%2Fslack%2Ffunction_execute.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,93 @@\n+package slack\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+)\n+\n+type (\n+\tFunctionCompleteSuccessRequest struct {\n+\t\tFunctionExecutionID string            `json:\"function_execution_id\"`\n+\t\tOutputs             map[string]string `json:\"outputs\"`\n+\t}\n+\n+\tFunctionCompleteErrorRequest struct {\n+\t\tFunctionExecutionID string `json:\"function_execution_id\"`\n+\t\tError               string `json:\"error\"`\n+\t}\n+)\n+\n+type FunctionCompleteSuccessRequestOption func(opt *FunctionCompleteSuccessRequest) error\n+\n+func FunctionCompleteSuccessRequestOptionOutput(outputs map[string]string) FunctionCompleteSuccessRequestOption {\n+\treturn func(opt *FunctionCompleteSuccessRequest) error {\n+\t\tif len(outputs) > 0 {\n+\t\t\topt.Outputs = outputs\n+\t\t}\n+\t\treturn nil\n+\t}\n+}\n+\n+// FunctionCompleteSuccess indicates function is completed\n+func (api *Client) FunctionCompleteSuccess(functionExecutionId string, options ...FunctionCompleteSuccessRequestOption) error {\n+\treturn api.FunctionCompleteSuccessContext(context.Background(), functionExecutionId, options...)\n+}\n+\n+// FunctionCompleteSuccess indicates function is completed\n+func (api *Client) FunctionCompleteSuccessContext(ctx context.Context, functionExecutionId string, options ...FunctionCompleteSuccessRequestOption) error {\n+\t// More information: https://api.slack.com/methods/functions.completeSuccess\n+\tr := &FunctionCompleteSuccessRequest{\n+\t\tFunctionExecutionID: functionExecutionId,\n+\t}\n+\tfor _, option := range options {\n+\t\toption(r)\n+\t}\n+\n+\tendpoint := api.endpoint + \"functions.completeSuccess\"\n+\tjsonData, err := json.Marshal(r)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tresponse := &SlackResponse{}\n+\tif err := postJSON(ctx, api.httpclient, endpoint, api.token, jsonData, response, api); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tif !response.Ok {\n+\t\treturn response.Err()\n+\t}\n+\n+\treturn nil\n+}\n+\n+// FunctionCompleteError indicates function is completed with error\n+func (api *Client) FunctionCompleteError(functionExecutionID string, errorMessage string) error {\n+\treturn api.FunctionCompleteErrorContext(context.Background(), functionExecutionID, errorMessage)\n+}\n+\n+// FunctionCompleteErrorContext indicates function is completed with error\n+func (api *Client) FunctionCompleteErrorContext(ctx context.Context, functionExecutionID string, errorMessage string) error {\n+\t// More information: https://api.slack.com/methods/functions.completeError\n+\tr := FunctionCompleteErrorRequest{\n+\t\tFunctionExecutionID: functionExecutionID,\n+\t}\n+\tr.Error = errorMessage\n+\n+\tendpoint := api.endpoint + \"functions.completeError\"\n+\tjsonData, err := json.Marshal(r)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tresponse := &SlackResponse{}\n+\tif err := postJSON(ctx, api.httpclient, endpoint, api.token, jsonData, response, api); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tif !response.Ok {\n+\t\treturn response.Err()\n+\t}\n+\n+\treturn nil\n+}"
    },
    {
      "sha": "f0702d9d3025fad6c35224a1f6745e74d61e3a6c",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/bsonrw/extjson_parser.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_parser.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_parser.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_parser.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -305,7 +305,7 @@ func (ejp *extJSONParser) readValue(t bsontype.Type) (*extJSONValue, error) {\n \t\t\t\t}\n \n \t\t\t\t// remove hyphens\n-\t\t\t\tuuidNoHyphens := strings.Replace(uuid, \"-\", \"\", -1)\n+\t\t\t\tuuidNoHyphens := strings.ReplaceAll(uuid, \"-\", \"\")\n \t\t\t\tif len(uuidNoHyphens) != 32 {\n \t\t\t\t\treturn nil, fmt.Errorf(\"$uuid value does not follow RFC 4122 format regarding length and hyphens\")\n \t\t\t\t}"
    },
    {
      "sha": "57781ff9f317e470cb549adbe461280162086f3d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/bsonrw/extjson_writer.go",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_writer.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_writer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fextjson_writer.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -628,13 +628,14 @@ func (ejvw *extJSONValueWriter) WriteArrayEnd() error {\n \n func formatDouble(f float64) string {\n \tvar s string\n-\tif math.IsInf(f, 1) {\n+\tswitch {\n+\tcase math.IsInf(f, 1):\n \t\ts = \"Infinity\"\n-\t} else if math.IsInf(f, -1) {\n+\tcase math.IsInf(f, -1):\n \t\ts = \"-Infinity\"\n-\t} else if math.IsNaN(f) {\n+\tcase math.IsNaN(f):\n \t\ts = \"NaN\"\n-\t} else {\n+\tdefault:\n \t\t// Print exactly one decimalType place for integers; otherwise, print as many are necessary to\n \t\t// perfectly represent it.\n \t\ts = strconv.FormatFloat(f, 'G', -1, 64)\n@@ -739,9 +740,7 @@ func (ss sortableString) Less(i, j int) bool {\n }\n \n func (ss sortableString) Swap(i, j int) {\n-\toldI := ss[i]\n-\tss[i] = ss[j]\n-\tss[j] = oldI\n+\tss[i], ss[j] = ss[j], ss[i]\n }\n \n func sortStringAlphebeticAscending(s string) string {"
    },
    {
      "sha": "97828919164822474409cf513e6ad0f2fc3df25d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/bsonrw/json_scanner.go",
      "status": "modified",
      "additions": 21,
      "deletions": 16,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fjson_scanner.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fjson_scanner.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fjson_scanner.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -82,12 +82,13 @@ func (js *jsonScanner) nextToken() (*jsonToken, error) {\n \t\treturn js.scanString()\n \tdefault:\n \t\t// check if it's a number\n-\t\tif c == '-' || isDigit(c) {\n+\t\tswitch {\n+\t\tcase c == '-' || isDigit(c):\n \t\t\treturn js.scanNumber(c)\n-\t\t} else if c == 't' || c == 'f' || c == 'n' {\n+\t\tcase c == 't' || c == 'f' || c == 'n':\n \t\t\t// maybe a literal\n \t\t\treturn js.scanLiteral(c)\n-\t\t} else {\n+\t\tdefault:\n \t\t\treturn nil, fmt.Errorf(\"invalid JSON input. Position: %d. Character: %c\", js.pos-1, c)\n \t\t}\n \t}\n@@ -174,7 +175,7 @@ func getu4(s []byte) rune {\n \tfor _, c := range s[:4] {\n \t\tswitch {\n \t\tcase '0' <= c && c <= '9':\n-\t\t\tc = c - '0'\n+\t\t\tc -= '0'\n \t\tcase 'a' <= c && c <= 'f':\n \t\t\tc = c - 'a' + 10\n \t\tcase 'A' <= c && c <= 'F':\n@@ -325,13 +326,14 @@ func (js *jsonScanner) scanLiteral(first byte) (*jsonToken, error) {\n \n \tc5, err := js.readNextByte()\n \n-\tif bytes.Equal([]byte(\"true\"), lit) && (isValueTerminator(c5) || errors.Is(err, io.EOF)) {\n+\tswitch {\n+\tcase bytes.Equal([]byte(\"true\"), lit) && (isValueTerminator(c5) || errors.Is(err, io.EOF)):\n \t\tjs.pos = int(math.Max(0, float64(js.pos-1)))\n \t\treturn &jsonToken{t: jttBool, v: true, p: p}, nil\n-\t} else if bytes.Equal([]byte(\"null\"), lit) && (isValueTerminator(c5) || errors.Is(err, io.EOF)) {\n+\tcase bytes.Equal([]byte(\"null\"), lit) && (isValueTerminator(c5) || errors.Is(err, io.EOF)):\n \t\tjs.pos = int(math.Max(0, float64(js.pos-1)))\n \t\treturn &jsonToken{t: jttNull, v: nil, p: p}, nil\n-\t} else if bytes.Equal([]byte(\"fals\"), lit) {\n+\tcase bytes.Equal([]byte(\"fals\"), lit):\n \t\tif c5 == 'e' {\n \t\t\tc5, err = js.readNextByte()\n \n@@ -430,12 +432,13 @@ func (js *jsonScanner) scanNumber(first byte) (*jsonToken, error) {\n \t\t\tcase '}', ']', ',':\n \t\t\t\ts = nssDone\n \t\t\tdefault:\n-\t\t\t\tif isWhiteSpace(c) || errors.Is(err, io.EOF) {\n+\t\t\t\tswitch {\n+\t\t\t\tcase isWhiteSpace(c) || errors.Is(err, io.EOF):\n \t\t\t\t\ts = nssDone\n-\t\t\t\t} else if isDigit(c) {\n+\t\t\t\tcase isDigit(c):\n \t\t\t\t\ts = nssSawIntegerDigits\n \t\t\t\t\tb.WriteByte(c)\n-\t\t\t\t} else {\n+\t\t\t\tdefault:\n \t\t\t\t\ts = nssInvalid\n \t\t\t\t}\n \t\t\t}\n@@ -455,12 +458,13 @@ func (js *jsonScanner) scanNumber(first byte) (*jsonToken, error) {\n \t\t\tcase '}', ']', ',':\n \t\t\t\ts = nssDone\n \t\t\tdefault:\n-\t\t\t\tif isWhiteSpace(c) || errors.Is(err, io.EOF) {\n+\t\t\t\tswitch {\n+\t\t\t\tcase isWhiteSpace(c) || errors.Is(err, io.EOF):\n \t\t\t\t\ts = nssDone\n-\t\t\t\t} else if isDigit(c) {\n+\t\t\t\tcase isDigit(c):\n \t\t\t\t\ts = nssSawFractionDigits\n \t\t\t\t\tb.WriteByte(c)\n-\t\t\t\t} else {\n+\t\t\t\tdefault:\n \t\t\t\t\ts = nssInvalid\n \t\t\t\t}\n \t\t\t}\n@@ -490,12 +494,13 @@ func (js *jsonScanner) scanNumber(first byte) (*jsonToken, error) {\n \t\t\tcase '}', ']', ',':\n \t\t\t\ts = nssDone\n \t\t\tdefault:\n-\t\t\t\tif isWhiteSpace(c) || errors.Is(err, io.EOF) {\n+\t\t\t\tswitch {\n+\t\t\t\tcase isWhiteSpace(c) || errors.Is(err, io.EOF):\n \t\t\t\t\ts = nssDone\n-\t\t\t\t} else if isDigit(c) {\n+\t\t\t\tcase isDigit(c):\n \t\t\t\t\ts = nssSawExponentDigits\n \t\t\t\t\tb.WriteByte(c)\n-\t\t\t\t} else {\n+\t\t\t\tdefault:\n \t\t\t\t\ts = nssInvalid\n \t\t\t\t}\n \t\t\t}"
    },
    {
      "sha": "501c6d7f979443db3d2e0baf7eca78dc45004bee",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/bsonrw/value_writer.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fvalue_writer.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fvalue_writer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fbsonrw%2Fvalue_writer.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -598,7 +598,7 @@ func (vw *valueWriter) writeLength() error {\n \t\treturn errMaxDocumentSizeExceeded{size: int64(len(vw.buf))}\n \t}\n \tframe := &vw.stack[vw.frame]\n-\tlength = length - int(frame.start)\n+\tlength -= int(frame.start)\n \tstart := frame.start\n \n \t_ = vw.buf[start+3] // BCE"
    },
    {
      "sha": "fb075b47892ff4374cc3fb584c61c732a12807c3",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/doc.go",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fdoc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fdoc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fdoc.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -107,10 +107,13 @@\n // The name may be empty in order to specify options without overriding the default field name. The following options can\n // be used to configure behavior:\n //\n-//  1. omitempty: If the omitempty struct tag is specified on a field, the field will be omitted from the marshaling if\n-//     the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array,\n-//     slice, map, or string.\n-//     NOTE: It is recommended that this tag be used for all slice and map fields.\n+//  1. omitempty: If the \"omitempty\" struct tag is specified on a field, the field will not be marshaled if it is set to\n+//     an \"empty\" value. Numbers, booleans, and strings are considered empty if their value is equal to the zero value for\n+//     the type (i.e. 0 for numbers, false for booleans, and \"\" for strings). Slices, maps, and arrays are considered\n+//     empty if they are of length zero. Interfaces and pointers are considered empty if their value is nil. By default,\n+//     structs are only considered empty if the struct type implements [bsoncodec.Zeroer] and the IsZero\n+//     method returns true. Struct types that do not implement [bsoncodec.Zeroer] are never considered empty and will be\n+//     marshaled as embedded documents. NOTE: It is recommended that this tag be used for all slice and map fields.\n //\n //  2. minsize: If the minsize struct tag is specified on a field of type int64, uint, uint32, or uint64 and the value of\n //     the field can fit in a signed int32, the field will be serialized as a BSON int32 rather than a BSON int64. For"
    },
    {
      "sha": "db8be74d8498eb96685ca7441b2ac33e390a9898",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/bson/primitive/decimal.go",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fprimitive%2Fdecimal.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fprimitive%2Fdecimal.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fbson%2Fprimitive%2Fdecimal.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -70,7 +70,6 @@ func (d Decimal128) String() string {\n \t\t// Bits: 1*sign 2*ignored 14*exponent 111*significand.\n \t\t// Implicit 0b100 prefix in significand.\n \t\texp = int(d.h >> 47 & (1<<14 - 1))\n-\t\t//high = 4<<47 | d.h&(1<<47-1)\n \t\t// Spec says all of these values are out of range.\n \t\thigh, low = 0, 0\n \t} else {\n@@ -152,13 +151,12 @@ func (d Decimal128) BigInt() (*big.Int, int, error) {\n \t\t// Bits: 1*sign 2*ignored 14*exponent 111*significand.\n \t\t// Implicit 0b100 prefix in significand.\n \t\texp = int(high >> 47 & (1<<14 - 1))\n-\t\t//high = 4<<47 | d.h&(1<<47-1)\n \t\t// Spec says all of these values are out of range.\n \t\thigh, low = 0, 0\n \t} else {\n \t\t// Bits: 1*sign 14*exponent 113*significand\n \t\texp = int(high >> 49 & (1<<14 - 1))\n-\t\thigh = high & (1<<49 - 1)\n+\t\thigh &= (1<<49 - 1)\n \t}\n \texp += MinDecimal128Exp\n \n@@ -352,7 +350,7 @@ var (\n \n // ParseDecimal128FromBigInt attempts to parse the given significand and exponent into a valid Decimal128 value.\n func ParseDecimal128FromBigInt(bi *big.Int, exp int) (Decimal128, bool) {\n-\t//copy\n+\t// copy\n \tbi = new(big.Int).Set(bi)\n \n \tq := new(big.Int)"
    },
    {
      "sha": "40f1181e0e4d9a8560f7cad84dabf66eb45cf8af",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/bulk_write.go",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fbulk_write.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -186,7 +186,7 @@ func (bw *bulkWrite) runInsert(ctx context.Context, batch bulkWriteBatch) (opera\n \t\tDatabase(bw.collection.db.name).Collection(bw.collection.name).\n \t\tDeployment(bw.collection.client.deployment).Crypt(bw.collection.client.cryptFLE).\n \t\tServerAPI(bw.collection.client.serverAPI).Timeout(bw.collection.client.timeout).\n-\t\tLogger(bw.collection.client.logger)\n+\t\tLogger(bw.collection.client.logger).Authenticator(bw.collection.client.authenticator)\n \tif bw.comment != nil {\n \t\tcomment, err := marshalValue(bw.comment, bw.collection.bsonOpts, bw.collection.registry)\n \t\tif err != nil {\n@@ -256,7 +256,7 @@ func (bw *bulkWrite) runDelete(ctx context.Context, batch bulkWriteBatch) (opera\n \t\tDatabase(bw.collection.db.name).Collection(bw.collection.name).\n \t\tDeployment(bw.collection.client.deployment).Crypt(bw.collection.client.cryptFLE).Hint(hasHint).\n \t\tServerAPI(bw.collection.client.serverAPI).Timeout(bw.collection.client.timeout).\n-\t\tLogger(bw.collection.client.logger)\n+\t\tLogger(bw.collection.client.logger).Authenticator(bw.collection.client.authenticator)\n \tif bw.comment != nil {\n \t\tcomment, err := marshalValue(bw.comment, bw.collection.bsonOpts, bw.collection.registry)\n \t\tif err != nil {\n@@ -387,7 +387,8 @@ func (bw *bulkWrite) runUpdate(ctx context.Context, batch bulkWriteBatch) (opera\n \t\tDatabase(bw.collection.db.name).Collection(bw.collection.name).\n \t\tDeployment(bw.collection.client.deployment).Crypt(bw.collection.client.cryptFLE).Hint(hasHint).\n \t\tArrayFilters(hasArrayFilters).ServerAPI(bw.collection.client.serverAPI).\n-\t\tTimeout(bw.collection.client.timeout).Logger(bw.collection.client.logger)\n+\t\tTimeout(bw.collection.client.timeout).Logger(bw.collection.client.logger).\n+\t\tAuthenticator(bw.collection.client.authenticator)\n \tif bw.comment != nil {\n \t\tcomment, err := marshalValue(bw.comment, bw.collection.bsonOpts, bw.collection.registry)\n \t\tif err != nil {"
    },
    {
      "sha": "3ea8baf1f2100a85a829b5f58a32b80277969590",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/change_stream.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fchange_stream.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fchange_stream.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fchange_stream.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -137,7 +137,8 @@ func newChangeStream(ctx context.Context, config changeStreamConfig, pipeline in\n \t\tReadPreference(config.readPreference).ReadConcern(config.readConcern).\n \t\tDeployment(cs.client.deployment).ClusterClock(cs.client.clock).\n \t\tCommandMonitor(cs.client.monitor).Session(cs.sess).ServerSelector(cs.selector).Retry(driver.RetryNone).\n-\t\tServerAPI(cs.client.serverAPI).Crypt(config.crypt).Timeout(cs.client.timeout)\n+\t\tServerAPI(cs.client.serverAPI).Crypt(config.crypt).Timeout(cs.client.timeout).\n+\t\tAuthenticator(cs.client.authenticator)\n \n \tif cs.options.Collation != nil {\n \t\tcs.aggregate.Collation(bsoncore.Document(cs.options.Collation.ToDocument()))"
    },
    {
      "sha": "0ce6d2e24b3d3ae245293530fc56458a3ebd868c",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/client.go",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -26,6 +26,7 @@ import (\n \t\"go.mongodb.org/mongo-driver/mongo/writeconcern\"\n \t\"go.mongodb.org/mongo-driver/x/bsonx/bsoncore\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver/auth\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/mongocrypt\"\n \tmcopts \"go.mongodb.org/mongo-driver/x/mongo/driver/mongocrypt/options\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/operation\"\n@@ -79,6 +80,7 @@ type Client struct {\n \tmetadataClientFLE  *Client\n \tinternalClientFLE  *Client\n \tencryptedFieldsMap map[string]interface{}\n+\tauthenticator      driver.Authenticator\n }\n \n // Connect creates a new Client and then initializes it using the Connect method. This is equivalent to calling\n@@ -209,10 +211,22 @@ func NewClient(opts ...*options.ClientOptions) (*Client, error) {\n \t\tclientOpt.SetMaxPoolSize(defaultMaxPoolSize)\n \t}\n \n-\tcfg, err := topology.NewConfig(clientOpt, client.clock)\n+\tif clientOpt.Auth != nil {\n+\t\tclient.authenticator, err = auth.CreateAuthenticator(\n+\t\t\tclientOpt.Auth.AuthMechanism,\n+\t\t\ttopology.ConvertCreds(clientOpt.Auth),\n+\t\t\tclientOpt.HTTPClient,\n+\t\t)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"error creating authenticator: %w\", err)\n+\t\t}\n+\t}\n+\n+\tcfg, err := topology.NewConfigWithAuthenticator(clientOpt, client.clock, client.authenticator)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n+\n \tclient.serverAPI = topology.ServerAPIFromServerOptions(cfg.ServerOpts)\n \n \tif client.deployment == nil {\n@@ -690,7 +704,7 @@ func (c *Client) ListDatabases(ctx context.Context, filter interface{}, opts ...\n \top := operation.NewListDatabases(filterDoc).\n \t\tSession(sess).ReadPreference(c.readPreference).CommandMonitor(c.monitor).\n \t\tServerSelector(selector).ClusterClock(c.clock).Database(\"admin\").Deployment(c.deployment).Crypt(c.cryptFLE).\n-\t\tServerAPI(c.serverAPI).Timeout(c.timeout)\n+\t\tServerAPI(c.serverAPI).Timeout(c.timeout).Authenticator(c.authenticator)\n \n \tif ldo.NameOnly != nil {\n \t\top = op.NameOnly(*ldo.NameOnly)"
    },
    {
      "sha": "352dac1f058da2e0b87028f7db72e3c8c24c67c3",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/client_encryption.go",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient_encryption.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient_encryption.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fclient_encryption.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -204,7 +204,12 @@ func transformExplicitEncryptionOptions(opts ...*options.EncryptOptions) *mcopts\n \t\tif eo.RangeOptions.Precision != nil {\n \t\t\ttransformedRange.Precision = eo.RangeOptions.Precision\n \t\t}\n-\t\ttransformedRange.Sparsity = eo.RangeOptions.Sparsity\n+\t\tif eo.RangeOptions.Sparsity != nil {\n+\t\t\ttransformedRange.Sparsity = eo.RangeOptions.Sparsity\n+\t\t}\n+\t\tif eo.RangeOptions.TrimFactor != nil {\n+\t\t\ttransformedRange.TrimFactor = eo.RangeOptions.TrimFactor\n+\t\t}\n \t\ttransformed.SetRangeOptions(transformedRange)\n \t}\n \treturn transformed\n@@ -230,8 +235,7 @@ func (ce *ClientEncryption) Encrypt(ctx context.Context, val bson.RawValue,\n // 2. An Aggregate Expression of this form:\n // {$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]\n // $gt may also be $gte. $lt may also be $lte.\n-// Only supported for queryType \"rangePreview\"\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n+// Only supported for queryType \"range\"\n func (ce *ClientEncryption) EncryptExpression(ctx context.Context, expr interface{}, result interface{}, opts ...*options.EncryptOptions) error {\n \ttransformed := transformExplicitEncryptionOptions(opts...)\n "
    },
    {
      "sha": "dbe238a9e393de03d2d2096ed2d1dfa8785b636a",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/collection.go",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcollection.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -291,7 +291,8 @@ func (coll *Collection) insert(ctx context.Context, documents []interface{},\n \t\tServerSelector(selector).ClusterClock(coll.client.clock).\n \t\tDatabase(coll.db.name).Collection(coll.name).\n \t\tDeployment(coll.client.deployment).Crypt(coll.client.cryptFLE).Ordered(true).\n-\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).Logger(coll.client.logger)\n+\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).Logger(coll.client.logger).\n+\t\tAuthenticator(coll.client.authenticator)\n \timo := options.MergeInsertManyOptions(opts...)\n \tif imo.BypassDocumentValidation != nil && *imo.BypassDocumentValidation {\n \t\top = op.BypassDocumentValidation(*imo.BypassDocumentValidation)\n@@ -471,7 +472,8 @@ func (coll *Collection) delete(ctx context.Context, filter interface{}, deleteOn\n \t\tServerSelector(selector).ClusterClock(coll.client.clock).\n \t\tDatabase(coll.db.name).Collection(coll.name).\n \t\tDeployment(coll.client.deployment).Crypt(coll.client.cryptFLE).Ordered(true).\n-\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).Logger(coll.client.logger)\n+\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).Logger(coll.client.logger).\n+\t\tAuthenticator(coll.client.authenticator)\n \tif do.Comment != nil {\n \t\tcomment, err := marshalValue(do.Comment, coll.bsonOpts, coll.registry)\n \t\tif err != nil {\n@@ -588,7 +590,7 @@ func (coll *Collection) updateOrReplace(ctx context.Context, filter bsoncore.Doc\n \t\tDatabase(coll.db.name).Collection(coll.name).\n \t\tDeployment(coll.client.deployment).Crypt(coll.client.cryptFLE).Hint(uo.Hint != nil).\n \t\tArrayFilters(uo.ArrayFilters != nil).Ordered(true).ServerAPI(coll.client.serverAPI).\n-\t\tTimeout(coll.client.timeout).Logger(coll.client.logger)\n+\t\tTimeout(coll.client.timeout).Logger(coll.client.logger).Authenticator(coll.client.authenticator)\n \tif uo.Let != nil {\n \t\tlet, err := marshal(uo.Let, coll.bsonOpts, coll.registry)\n \t\tif err != nil {\n@@ -861,7 +863,8 @@ func aggregate(a aggregateParams) (cur *Cursor, err error) {\n \t\tServerAPI(a.client.serverAPI).\n \t\tHasOutputStage(hasOutputStage).\n \t\tTimeout(a.client.timeout).\n-\t\tMaxTime(ao.MaxTime)\n+\t\tMaxTime(ao.MaxTime).\n+\t\tAuthenticator(a.client.authenticator)\n \n \t// Omit \"maxTimeMS\" from operations that return a user-managed cursor to\n \t// prevent confusing \"cursor not found\" errors. To maintain existing\n@@ -992,7 +995,7 @@ func (coll *Collection) CountDocuments(ctx context.Context, filter interface{},\n \top := operation.NewAggregate(pipelineArr).Session(sess).ReadConcern(rc).ReadPreference(coll.readPreference).\n \t\tCommandMonitor(coll.client.monitor).ServerSelector(selector).ClusterClock(coll.client.clock).Database(coll.db.name).\n \t\tCollection(coll.name).Deployment(coll.client.deployment).Crypt(coll.client.cryptFLE).ServerAPI(coll.client.serverAPI).\n-\t\tTimeout(coll.client.timeout).MaxTime(countOpts.MaxTime)\n+\t\tTimeout(coll.client.timeout).MaxTime(countOpts.MaxTime).Authenticator(coll.client.authenticator)\n \tif countOpts.Collation != nil {\n \t\top.Collation(bsoncore.Document(countOpts.Collation.ToDocument()))\n \t}\n@@ -1077,7 +1080,7 @@ func (coll *Collection) EstimatedDocumentCount(ctx context.Context,\n \t\tDatabase(coll.db.name).Collection(coll.name).CommandMonitor(coll.client.monitor).\n \t\tDeployment(coll.client.deployment).ReadConcern(rc).ReadPreference(coll.readPreference).\n \t\tServerSelector(selector).Crypt(coll.client.cryptFLE).ServerAPI(coll.client.serverAPI).\n-\t\tTimeout(coll.client.timeout).MaxTime(co.MaxTime)\n+\t\tTimeout(coll.client.timeout).MaxTime(co.MaxTime).Authenticator(coll.client.authenticator)\n \n \tif co.Comment != nil {\n \t\tcomment, err := marshalValue(co.Comment, coll.bsonOpts, coll.registry)\n@@ -1144,7 +1147,7 @@ func (coll *Collection) Distinct(ctx context.Context, fieldName string, filter i\n \t\tDatabase(coll.db.name).Collection(coll.name).CommandMonitor(coll.client.monitor).\n \t\tDeployment(coll.client.deployment).ReadConcern(rc).ReadPreference(coll.readPreference).\n \t\tServerSelector(selector).Crypt(coll.client.cryptFLE).ServerAPI(coll.client.serverAPI).\n-\t\tTimeout(coll.client.timeout).MaxTime(option.MaxTime)\n+\t\tTimeout(coll.client.timeout).MaxTime(option.MaxTime).Authenticator(coll.client.authenticator)\n \n \tif option.Collation != nil {\n \t\top.Collation(bsoncore.Document(option.Collation.ToDocument()))\n@@ -1257,7 +1260,7 @@ func (coll *Collection) find(\n \t\tClusterClock(coll.client.clock).Database(coll.db.name).Collection(coll.name).\n \t\tDeployment(coll.client.deployment).Crypt(coll.client.cryptFLE).ServerAPI(coll.client.serverAPI).\n \t\tTimeout(coll.client.timeout).MaxTime(fo.MaxTime).Logger(coll.client.logger).\n-\t\tOmitCSOTMaxTimeMS(omitCSOTMaxTimeMS)\n+\t\tOmitCSOTMaxTimeMS(omitCSOTMaxTimeMS).Authenticator(coll.client.authenticator)\n \n \tcursorOpts := coll.client.createBaseCursorOptions()\n \n@@ -1521,7 +1524,7 @@ func (coll *Collection) FindOneAndDelete(ctx context.Context, filter interface{}\n \t}\n \tfod := options.MergeFindOneAndDeleteOptions(opts...)\n \top := operation.NewFindAndModify(f).Remove(true).ServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).\n-\t\tMaxTime(fod.MaxTime)\n+\t\tMaxTime(fod.MaxTime).Authenticator(coll.client.authenticator)\n \tif fod.Collation != nil {\n \t\top = op.Collation(bsoncore.Document(fod.Collation.ToDocument()))\n \t}\n@@ -1601,7 +1604,8 @@ func (coll *Collection) FindOneAndReplace(ctx context.Context, filter interface{\n \n \tfo := options.MergeFindOneAndReplaceOptions(opts...)\n \top := operation.NewFindAndModify(f).Update(bsoncore.Value{Type: bsontype.EmbeddedDocument, Data: r}).\n-\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).MaxTime(fo.MaxTime)\n+\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).MaxTime(fo.MaxTime).Authenticator(coll.client.authenticator)\n+\n \tif fo.BypassDocumentValidation != nil && *fo.BypassDocumentValidation {\n \t\top = op.BypassDocumentValidation(*fo.BypassDocumentValidation)\n \t}\n@@ -1688,7 +1692,7 @@ func (coll *Collection) FindOneAndUpdate(ctx context.Context, filter interface{}\n \n \tfo := options.MergeFindOneAndUpdateOptions(opts...)\n \top := operation.NewFindAndModify(f).ServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).\n-\t\tMaxTime(fo.MaxTime)\n+\t\tMaxTime(fo.MaxTime).Authenticator(coll.client.authenticator)\n \n \tu, err := marshalUpdateValue(update, coll.bsonOpts, coll.registry, true)\n \tif err != nil {\n@@ -1894,7 +1898,8 @@ func (coll *Collection) drop(ctx context.Context) error {\n \t\tServerSelector(selector).ClusterClock(coll.client.clock).\n \t\tDatabase(coll.db.name).Collection(coll.name).\n \t\tDeployment(coll.client.deployment).Crypt(coll.client.cryptFLE).\n-\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout)\n+\t\tServerAPI(coll.client.serverAPI).Timeout(coll.client.timeout).\n+\t\tAuthenticator(coll.client.authenticator)\n \terr = op.Execute(ctx)\n \n \t// ignore namespace not found errors"
    },
    {
      "sha": "1e01e398da3abb9d3906f0536f3158428ff5567b",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/cursor.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcursor.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcursor.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fcursor.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -286,8 +286,9 @@ func (c *Cursor) Close(ctx context.Context) error {\n }\n \n // All iterates the cursor and decodes each document into results. The results parameter must be a pointer to a slice.\n-// The slice pointed to by results will be completely overwritten. This method will close the cursor after retrieving\n-// all documents. If the cursor has been iterated, any previously iterated documents will not be included in results.\n+// The slice pointed to by results will be completely overwritten. A nil slice pointer will not be modified if the cursor\n+// has been closed, exhausted, or is empty. This method will close the cursor after retrieving all documents. If the\n+// cursor has been iterated, any previously iterated documents will not be included in results.\n //\n // This method requires driver version >= 1.1.0.\n func (c *Cursor) All(ctx context.Context, results interface{}) error {"
    },
    {
      "sha": "5344c9641e1411e722cff8fbae431f03baa9e189",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/database.go",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdatabase.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdatabase.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdatabase.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -189,7 +189,7 @@ func (db *Database) processRunCommand(ctx context.Context, cmd interface{},\n \t\tServerSelector(readSelect).ClusterClock(db.client.clock).\n \t\tDatabase(db.name).Deployment(db.client.deployment).\n \t\tCrypt(db.client.cryptFLE).ReadPreference(ro.ReadPreference).ServerAPI(db.client.serverAPI).\n-\t\tTimeout(db.client.timeout).Logger(db.client.logger), sess, nil\n+\t\tTimeout(db.client.timeout).Logger(db.client.logger).Authenticator(db.client.authenticator), sess, nil\n }\n \n // RunCommand executes the given command against the database.\n@@ -308,7 +308,7 @@ func (db *Database) Drop(ctx context.Context) error {\n \t\tSession(sess).WriteConcern(wc).CommandMonitor(db.client.monitor).\n \t\tServerSelector(selector).ClusterClock(db.client.clock).\n \t\tDatabase(db.name).Deployment(db.client.deployment).Crypt(db.client.cryptFLE).\n-\t\tServerAPI(db.client.serverAPI)\n+\t\tServerAPI(db.client.serverAPI).Authenticator(db.client.authenticator)\n \n \terr = op.Execute(ctx)\n \n@@ -402,7 +402,7 @@ func (db *Database) ListCollections(ctx context.Context, filter interface{}, opt\n \t\tSession(sess).ReadPreference(db.readPreference).CommandMonitor(db.client.monitor).\n \t\tServerSelector(selector).ClusterClock(db.client.clock).\n \t\tDatabase(db.name).Deployment(db.client.deployment).Crypt(db.client.cryptFLE).\n-\t\tServerAPI(db.client.serverAPI).Timeout(db.client.timeout)\n+\t\tServerAPI(db.client.serverAPI).Timeout(db.client.timeout).Authenticator(db.client.authenticator)\n \n \tcursorOpts := db.client.createBaseCursorOptions()\n \n@@ -679,7 +679,7 @@ func (db *Database) createCollection(ctx context.Context, name string, opts ...*\n \n func (db *Database) createCollectionOperation(name string, opts ...*options.CreateCollectionOptions) (*operation.Create, error) {\n \tcco := options.MergeCreateCollectionOptions(opts...)\n-\top := operation.NewCreate(name).ServerAPI(db.client.serverAPI)\n+\top := operation.NewCreate(name).ServerAPI(db.client.serverAPI).Authenticator(db.client.authenticator)\n \n \tif cco.Capped != nil {\n \t\top.Capped(*cco.Capped)\n@@ -805,7 +805,8 @@ func (db *Database) CreateView(ctx context.Context, viewName, viewOn string, pip\n \top := operation.NewCreate(viewName).\n \t\tViewOn(viewOn).\n \t\tPipeline(pipelineArray).\n-\t\tServerAPI(db.client.serverAPI)\n+\t\tServerAPI(db.client.serverAPI).\n+\t\tAuthenticator(db.client.authenticator)\n \tcvo := options.MergeCreateViewOptions(opts...)\n \tif cvo.Collation != nil {\n \t\top.Collation(bsoncore.Document(cvo.Collation.ToDocument()))"
    },
    {
      "sha": "19f2760e2f46a3f56d25b206bcdcc55a7089bd88",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/description/server.go",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdescription%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdescription%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fdescription%2Fserver.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -316,21 +316,23 @@ func NewServer(addr address.Address, response bson.Raw) Server {\n \n \tdesc.Kind = Standalone\n \n-\tif isReplicaSet {\n+\tswitch {\n+\tcase isReplicaSet:\n \t\tdesc.Kind = RSGhost\n-\t} else if desc.SetName != \"\" {\n-\t\tif isWritablePrimary {\n+\tcase desc.SetName != \"\":\n+\t\tswitch {\n+\t\tcase isWritablePrimary:\n \t\t\tdesc.Kind = RSPrimary\n-\t\t} else if hidden {\n+\t\tcase hidden:\n \t\t\tdesc.Kind = RSMember\n-\t\t} else if secondary {\n+\t\tcase secondary:\n \t\t\tdesc.Kind = RSSecondary\n-\t\t} else if arbiterOnly {\n+\t\tcase arbiterOnly:\n \t\t\tdesc.Kind = RSArbiter\n-\t\t} else {\n+\t\tdefault:\n \t\t\tdesc.Kind = RSMember\n \t\t}\n-\t} else if msg == \"isdbgrid\" {\n+\tcase msg == \"isdbgrid\":\n \t\tdesc.Kind = Mongos\n \t}\n "
    },
    {
      "sha": "866e90a48e87a8679f27b36dbee775ab44579a14",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/gridfs/bucket.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fgridfs%2Fbucket.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fgridfs%2Fbucket.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fgridfs%2Fbucket.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -534,7 +534,7 @@ func numericalIndexDocsEqual(expected, actual bsoncore.Document) (bool, error) {\n \t\tactualInt, actualOK := actualVal.AsInt64OK()\n \t\texpectedInt, expectedOK := expectedVal.AsInt64OK()\n \n-\t\t//GridFS indexes always have numeric values\n+\t\t// GridFS indexes always have numeric values\n \t\tif !actualOK || !expectedOK {\n \t\t\treturn false, nil\n \t\t}"
    },
    {
      "sha": "db65f75072ac5e513fe0c760b09c203aa5fe0abd",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/index_view.go",
      "status": "modified",
      "additions": 20,
      "deletions": 6,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Findex_view.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Findex_view.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Findex_view.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -94,7 +94,7 @@ func (iv IndexView) List(ctx context.Context, opts ...*options.ListIndexesOption\n \t\tServerSelector(selector).ClusterClock(iv.coll.client.clock).\n \t\tDatabase(iv.coll.db.name).Collection(iv.coll.name).\n \t\tDeployment(iv.coll.client.deployment).ServerAPI(iv.coll.client.serverAPI).\n-\t\tTimeout(iv.coll.client.timeout)\n+\t\tTimeout(iv.coll.client.timeout).Authenticator(iv.coll.client.authenticator)\n \n \tcursorOpts := iv.coll.client.createBaseCursorOptions()\n \n@@ -262,7 +262,7 @@ func (iv IndexView) CreateMany(ctx context.Context, models []IndexModel, opts ..\n \t\tSession(sess).WriteConcern(wc).ClusterClock(iv.coll.client.clock).\n \t\tDatabase(iv.coll.db.name).Collection(iv.coll.name).CommandMonitor(iv.coll.client.monitor).\n \t\tDeployment(iv.coll.client.deployment).ServerSelector(selector).ServerAPI(iv.coll.client.serverAPI).\n-\t\tTimeout(iv.coll.client.timeout).MaxTime(option.MaxTime)\n+\t\tTimeout(iv.coll.client.timeout).MaxTime(option.MaxTime).Authenticator(iv.coll.client.authenticator)\n \tif option.CommitQuorum != nil {\n \t\tcommitQuorum, err := marshalValue(option.CommitQuorum, iv.coll.bsonOpts, iv.coll.registry)\n \t\tif err != nil {\n@@ -367,7 +367,7 @@ func (iv IndexView) createOptionsDoc(opts *options.IndexOptions) (bsoncore.Docum\n \treturn optsDoc, nil\n }\n \n-func (iv IndexView) drop(ctx context.Context, name string, opts ...*options.DropIndexesOptions) (bson.Raw, error) {\n+func (iv IndexView) drop(ctx context.Context, index any, opts ...*options.DropIndexesOptions) (bson.Raw, error) {\n \tif ctx == nil {\n \t\tctx = context.Background()\n \t}\n@@ -397,12 +397,12 @@ func (iv IndexView) drop(ctx context.Context, name string, opts ...*options.Drop\n \n \t// TODO(GODRIVER-3038): This operation should pass CSE to the DropIndexes\n \t// Crypt setter to be applied to the operation.\n-\top := operation.NewDropIndexes(name).\n-\t\tSession(sess).WriteConcern(wc).CommandMonitor(iv.coll.client.monitor).\n+\top := operation.NewDropIndexes(index).Session(sess).WriteConcern(wc).CommandMonitor(iv.coll.client.monitor).\n \t\tServerSelector(selector).ClusterClock(iv.coll.client.clock).\n \t\tDatabase(iv.coll.db.name).Collection(iv.coll.name).\n \t\tDeployment(iv.coll.client.deployment).ServerAPI(iv.coll.client.serverAPI).\n-\t\tTimeout(iv.coll.client.timeout).MaxTime(dio.MaxTime)\n+\t\tTimeout(iv.coll.client.timeout).MaxTime(dio.MaxTime).\n+\t\tAuthenticator(iv.coll.client.authenticator)\n \n \terr = op.Execute(ctx)\n \tif err != nil {\n@@ -435,6 +435,20 @@ func (iv IndexView) DropOne(ctx context.Context, name string, opts ...*options.D\n \treturn iv.drop(ctx, name, opts...)\n }\n \n+// DropOneWithKey drops a collection index by key using the dropIndexes operation. If the operation succeeds, this returns\n+// a BSON document in the form {nIndexesWas: <int32>}. The \"nIndexesWas\" field in the response contains the number of\n+// indexes that existed prior to the drop.\n+//\n+// This function is useful to drop an index using its key specification instead of its name.\n+func (iv IndexView) DropOneWithKey(ctx context.Context, keySpecDocument interface{}, opts ...*options.DropIndexesOptions) (bson.Raw, error) {\n+\tdoc, err := marshal(keySpecDocument, iv.coll.bsonOpts, iv.coll.registry)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn iv.drop(ctx, doc, opts...)\n+}\n+\n // DropAll executes a dropIndexes operation to drop all indexes on the collection. If the operation succeeds, this\n // returns a BSON document in the form {nIndexesWas: <int32>}. The \"nIndexesWas\" field in the response contains the\n // number of indexes that existed prior to the drop."
    },
    {
      "sha": "c3a9d439e97778c38fb5de93c15dec4f47799ff7",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/clientoptions.go",
      "status": "modified",
      "additions": 67,
      "deletions": 4,
      "changes": 71,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fclientoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fclientoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fclientoptions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -30,6 +30,7 @@ import (\n \t\"go.mongodb.org/mongo-driver/mongo/writeconcern\"\n \t\"go.mongodb.org/mongo-driver/tag\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver/auth\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/connstring\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage\"\n )\n@@ -89,9 +90,9 @@ type ContextDialer interface {\n // The SERVICE_HOST and CANONICALIZE_HOST_NAME properties must not be used at the same time on Linux and Darwin\n // systems.\n //\n-// AuthSource: the name of the database to use for authentication. This defaults to \"$external\" for MONGODB-X509,\n-// GSSAPI, and PLAIN and \"admin\" for all other mechanisms. This can also be set through the \"authSource\" URI option\n-// (e.g. \"authSource=otherDb\").\n+// AuthSource: the name of the database to use for authentication. This defaults to \"$external\" for MONGODB-AWS,\n+// MONGODB-OIDC, MONGODB-X509, GSSAPI, and PLAIN. It defaults to  \"admin\" for all other auth mechanisms. This can\n+// also be set through the \"authSource\" URI option (e.g. \"authSource=otherDb\").\n //\n // Username: the username for authentication. This can also be set through the URI as a username:password pair before\n // the first @ character. For example, a URI for user \"user\", password \"pwd\", and host \"localhost:27017\" would be\n@@ -111,6 +112,34 @@ type Credential struct {\n \tUsername                string\n \tPassword                string\n \tPasswordSet             bool\n+\tOIDCMachineCallback     OIDCCallback\n+\tOIDCHumanCallback       OIDCCallback\n+}\n+\n+// OIDCCallback is the type for both Human and Machine Callback flows.\n+// RefreshToken will always be nil in the OIDCArgs for the Machine flow.\n+type OIDCCallback func(context.Context, *OIDCArgs) (*OIDCCredential, error)\n+\n+// OIDCArgs contains the arguments for the OIDC callback.\n+type OIDCArgs struct {\n+\tVersion      int\n+\tIDPInfo      *IDPInfo\n+\tRefreshToken *string\n+}\n+\n+// OIDCCredential contains the access token and refresh token.\n+type OIDCCredential struct {\n+\tAccessToken  string\n+\tExpiresAt    *time.Time\n+\tRefreshToken *string\n+}\n+\n+// IDPInfo contains the information needed to perform OIDC authentication with\n+// an Identity Provider.\n+type IDPInfo struct {\n+\tIssuer        string\n+\tClientID      string\n+\tRequestScopes []string\n }\n \n // BSONOptions are optional BSON marshaling and unmarshaling behaviors.\n@@ -332,6 +361,37 @@ func (c *ClientOptions) validate() error {\n \t\treturn fmt.Errorf(\"invalid server monitoring mode: %q\", *mode)\n \t}\n \n+\t// OIDC Validation\n+\tif c.Auth != nil && c.Auth.AuthMechanism == auth.MongoDBOIDC {\n+\t\tif c.Auth.Password != \"\" {\n+\t\t\treturn fmt.Errorf(\"password must not be set for the %s auth mechanism\", auth.MongoDBOIDC)\n+\t\t}\n+\t\tif c.Auth.OIDCMachineCallback != nil && c.Auth.OIDCHumanCallback != nil {\n+\t\t\treturn fmt.Errorf(\"cannot set both OIDCMachineCallback and OIDCHumanCallback, only one may be specified\")\n+\t\t}\n+\t\tif c.Auth.OIDCHumanCallback == nil && c.Auth.AuthMechanismProperties[auth.AllowedHostsProp] != \"\" {\n+\t\t\treturn fmt.Errorf(\"Cannot specify ALLOWED_HOSTS without an OIDCHumanCallback\")\n+\t\t}\n+\t\tif env, ok := c.Auth.AuthMechanismProperties[auth.EnvironmentProp]; ok {\n+\t\t\tswitch env {\n+\t\t\tcase auth.GCPEnvironmentValue, auth.AzureEnvironmentValue:\n+\t\t\t\tif c.Auth.OIDCMachineCallback != nil {\n+\t\t\t\t\treturn fmt.Errorf(\"OIDCMachineCallback cannot be specified with the %s %q\", env, auth.EnvironmentProp)\n+\t\t\t\t}\n+\t\t\t\tif c.Auth.OIDCHumanCallback != nil {\n+\t\t\t\t\treturn fmt.Errorf(\"OIDCHumanCallback cannot be specified with the %s %q\", env, auth.EnvironmentProp)\n+\t\t\t\t}\n+\t\t\t\tif c.Auth.AuthMechanismProperties[auth.ResourceProp] == \"\" {\n+\t\t\t\t\treturn fmt.Errorf(\"%q must be set for the %s %q\", auth.ResourceProp, env, auth.EnvironmentProp)\n+\t\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\tif c.Auth.AuthMechanismProperties[auth.ResourceProp] != \"\" {\n+\t\t\t\t\treturn fmt.Errorf(\"%q must not be set for the %s %q\", auth.ResourceProp, env, auth.EnvironmentProp)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \treturn nil\n }\n \n@@ -1258,7 +1318,10 @@ func addClientCertFromBytes(cfg *tls.Config, data []byte, keyPasswd string) (str\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvar encoded bytes.Buffer\n-\t\t\t\tpem.Encode(&encoded, &pem.Block{Type: currentBlock.Type, Bytes: keyBytes})\n+\t\t\t\terr = pem.Encode(&encoded, &pem.Block{Type: currentBlock.Type, Bytes: keyBytes})\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn \"\", fmt.Errorf(\"error encoding private key as PEM: %w\", err)\n+\t\t\t\t}\n \t\t\t\tkeyBlock := encoded.Bytes()\n \t\t\t\tkeyBlocks = append(keyBlocks, keyBlock)\n \t\t\t\tstart = len(data) - len(remaining)"
    },
    {
      "sha": "68278ba45e6cdfbdda37fa3d16859a26052a131c",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/encryptoptions.go",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fencryptoptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fencryptoptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fencryptoptions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -17,13 +17,13 @@ const (\n \tQueryTypeEquality string = \"equality\"\n )\n \n-// RangeOptions specifies index options for a Queryable Encryption field supporting \"rangePreview\" queries.\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n+// RangeOptions specifies index options for a Queryable Encryption field supporting \"range\" queries.\n type RangeOptions struct {\n-\tMin       *bson.RawValue\n-\tMax       *bson.RawValue\n-\tSparsity  int64\n-\tPrecision *int32\n+\tMin        *bson.RawValue\n+\tMax        *bson.RawValue\n+\tSparsity   *int64\n+\tTrimFactor *int32\n+\tPrecision  *int32\n }\n \n // EncryptOptions represents options to explicitly encrypt a value.\n@@ -58,6 +58,7 @@ func (e *EncryptOptions) SetKeyAltName(keyAltName string) *EncryptOptions {\n // - AEAD_AES_256_CBC_HMAC_SHA_512-Random\n // - Indexed\n // - Unindexed\n+// - Range\n // This is required.\n // Indexed and Unindexed are used for Queryable Encryption.\n func (e *EncryptOptions) SetAlgorithm(algorithm string) *EncryptOptions {\n@@ -81,36 +82,37 @@ func (e *EncryptOptions) SetContentionFactor(contentionFactor int64) *EncryptOpt\n \treturn e\n }\n \n-// SetRangeOptions specifies the options to use for explicit encryption with range. It is only valid to set if algorithm is \"rangePreview\".\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n+// SetRangeOptions specifies the options to use for explicit encryption with range. It is only valid to set if algorithm is \"Range\".\n func (e *EncryptOptions) SetRangeOptions(ro RangeOptions) *EncryptOptions {\n \te.RangeOptions = &ro\n \treturn e\n }\n \n // SetMin sets the range index minimum value.\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n func (ro *RangeOptions) SetMin(min bson.RawValue) *RangeOptions {\n \tro.Min = &min\n \treturn ro\n }\n \n // SetMax sets the range index maximum value.\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n func (ro *RangeOptions) SetMax(max bson.RawValue) *RangeOptions {\n \tro.Max = &max\n \treturn ro\n }\n \n // SetSparsity sets the range index sparsity.\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n func (ro *RangeOptions) SetSparsity(sparsity int64) *RangeOptions {\n-\tro.Sparsity = sparsity\n+\tro.Sparsity = &sparsity\n+\treturn ro\n+}\n+\n+// SetTrimFactor sets the range index trim factor.\n+func (ro *RangeOptions) SetTrimFactor(trimFactor int32) *RangeOptions {\n+\tro.TrimFactor = &trimFactor\n \treturn ro\n }\n \n // SetPrecision sets the range index precision.\n-// Beta: The Range algorithm is experimental only. It is not intended for public use. It is subject to breaking changes.\n func (ro *RangeOptions) SetPrecision(precision int32) *RangeOptions {\n \tro.Precision = &precision\n \treturn ro"
    },
    {
      "sha": "4eef2e19935e9fcc5627ae6297d281d851f1ebd7",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/options/serverapioptions.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fserverapioptions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fserverapioptions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Foptions%2Fserverapioptions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -52,8 +52,7 @@ const (\n \n // Validate determines if the provided ServerAPIVersion is currently supported by the driver.\n func (sav ServerAPIVersion) Validate() error {\n-\tswitch sav {\n-\tcase ServerAPIVersion1:\n+\tif sav == ServerAPIVersion1 {\n \t\treturn nil\n \t}\n \treturn fmt.Errorf(\"api version %q not supported; this driver version only supports API version \\\"1\\\"\", sav)"
    },
    {
      "sha": "3253a73a2b33e19f01d4ce4afc7eb594231e04d6",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/search_index_view.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsearch_index_view.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsearch_index_view.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsearch_index_view.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -143,7 +143,7 @@ func (siv SearchIndexView) CreateMany(\n \t\tServerSelector(selector).ClusterClock(siv.coll.client.clock).\n \t\tCollection(siv.coll.name).Database(siv.coll.db.name).\n \t\tDeployment(siv.coll.client.deployment).ServerAPI(siv.coll.client.serverAPI).\n-\t\tTimeout(siv.coll.client.timeout)\n+\t\tTimeout(siv.coll.client.timeout).Authenticator(siv.coll.client.authenticator)\n \n \terr = op.Execute(ctx)\n \tif err != nil {\n@@ -198,7 +198,7 @@ func (siv SearchIndexView) DropOne(\n \t\tServerSelector(selector).ClusterClock(siv.coll.client.clock).\n \t\tCollection(siv.coll.name).Database(siv.coll.db.name).\n \t\tDeployment(siv.coll.client.deployment).ServerAPI(siv.coll.client.serverAPI).\n-\t\tTimeout(siv.coll.client.timeout)\n+\t\tTimeout(siv.coll.client.timeout).Authenticator(siv.coll.client.authenticator)\n \n \terr = op.Execute(ctx)\n \tif de, ok := err.(driver.Error); ok && de.NamespaceNotFound() {\n@@ -252,7 +252,7 @@ func (siv SearchIndexView) UpdateOne(\n \t\tServerSelector(selector).ClusterClock(siv.coll.client.clock).\n \t\tCollection(siv.coll.name).Database(siv.coll.db.name).\n \t\tDeployment(siv.coll.client.deployment).ServerAPI(siv.coll.client.serverAPI).\n-\t\tTimeout(siv.coll.client.timeout)\n+\t\tTimeout(siv.coll.client.timeout).Authenticator(siv.coll.client.authenticator)\n \n \treturn op.Execute(ctx)\n }"
    },
    {
      "sha": "77be4ab6dbb4f1d49088c45d6f04d78d80c44467",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/mongo/session.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsession.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsession.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fmongo%2Fsession.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -296,7 +296,8 @@ func (s *sessionImpl) AbortTransaction(ctx context.Context) error {\n \t_ = operation.NewAbortTransaction().Session(s.clientSession).ClusterClock(s.client.clock).Database(\"admin\").\n \t\tDeployment(s.deployment).WriteConcern(s.clientSession.CurrentWc).ServerSelector(selector).\n \t\tRetry(driver.RetryOncePerCommand).CommandMonitor(s.client.monitor).\n-\t\tRecoveryToken(bsoncore.Document(s.clientSession.RecoveryToken)).ServerAPI(s.client.serverAPI).Execute(ctx)\n+\t\tRecoveryToken(bsoncore.Document(s.clientSession.RecoveryToken)).ServerAPI(s.client.serverAPI).\n+\t\tAuthenticator(s.client.authenticator).Execute(ctx)\n \n \ts.clientSession.Aborting = false\n \t_ = s.clientSession.AbortTransaction()\n@@ -328,7 +329,7 @@ func (s *sessionImpl) CommitTransaction(ctx context.Context) error {\n \t\tSession(s.clientSession).ClusterClock(s.client.clock).Database(\"admin\").Deployment(s.deployment).\n \t\tWriteConcern(s.clientSession.CurrentWc).ServerSelector(selector).Retry(driver.RetryOncePerCommand).\n \t\tCommandMonitor(s.client.monitor).RecoveryToken(bsoncore.Document(s.clientSession.RecoveryToken)).\n-\t\tServerAPI(s.client.serverAPI).MaxTime(s.clientSession.CurrentMct)\n+\t\tServerAPI(s.client.serverAPI).MaxTime(s.clientSession.CurrentMct).Authenticator(s.client.authenticator)\n \n \terr = op.Execute(ctx)\n \t// Return error without updating transaction state if it is a timeout, as the transaction has not"
    },
    {
      "sha": "3dc006afde7a069e79799d8fcc1a3104cf9e8f6a",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/version/version.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fversion%2Fversion.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -8,4 +8,4 @@\n package version // import \"go.mongodb.org/mongo-driver/version\"\n \n // Driver is the current version of the driver.\n-var Driver = \"1.16.0\"\n+var Driver = \"1.17.1\""
    },
    {
      "sha": "9c1ab2ae964c7a030cff38c82e797791aca14f83",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/bsonx/bsoncore/element.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Felement.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Felement.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Felement.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -51,7 +51,7 @@ func (e Element) KeyErr() (string, error) {\n // KeyBytesErr returns the key for this element as a []byte, returning an error if the element is\n // not valid.\n func (e Element) KeyBytesErr() ([]byte, error) {\n-\tif len(e) <= 0 {\n+\tif len(e) == 0 {\n \t\treturn nil, ErrElementMissingType\n \t}\n \tidx := bytes.IndexByte(e[1:], 0x00)\n@@ -99,7 +99,7 @@ func (e Element) Value() Value {\n \n // ValueErr returns the value for this element, returning an error if the element is not valid.\n func (e Element) ValueErr() (Value, error) {\n-\tif len(e) <= 0 {\n+\tif len(e) == 0 {\n \t\treturn Value{}, ErrElementMissingType\n \t}\n \tidx := bytes.IndexByte(e[1:], 0x00)\n@@ -116,7 +116,7 @@ func (e Element) ValueErr() (Value, error) {\n \n // String implements the fmt.String interface. The output will be in extended JSON format.\n func (e Element) String() string {\n-\tif len(e) <= 0 {\n+\tif len(e) == 0 {\n \t\treturn \"\"\n \t}\n \tt := bsontype.Type(e[0])\n@@ -135,7 +135,7 @@ func (e Element) String() string {\n // DebugString outputs a human readable version of RawElement. It will attempt to stringify the\n // valid components of the element even if the entire element is not valid.\n func (e Element) DebugString() string {\n-\tif len(e) <= 0 {\n+\tif len(e) == 0 {\n \t\treturn \"<malformed>\"\n \t}\n \tt := bsontype.Type(e[0])"
    },
    {
      "sha": "fcb0428bbd30a3fd14f0d72b2712f9b3db041925",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/bsonx/bsoncore/value.go",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Fvalue.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Fvalue.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fbsonx%2Fbsoncore%2Fvalue.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -924,13 +924,14 @@ func escapeString(s string) string {\n \n func formatDouble(f float64) string {\n \tvar s string\n-\tif math.IsInf(f, 1) {\n+\tswitch {\n+\tcase math.IsInf(f, 1):\n \t\ts = \"Infinity\"\n-\t} else if math.IsInf(f, -1) {\n+\tcase math.IsInf(f, -1):\n \t\ts = \"-Infinity\"\n-\t} else if math.IsNaN(f) {\n+\tcase math.IsNaN(f):\n \t\ts = \"NaN\"\n-\t} else {\n+\tdefault:\n \t\t// Print exactly one decimalType place for integers; otherwise, print as many are necessary to\n \t\t// perfectly represent it.\n \t\ts = strconv.FormatFloat(f, 'G', -1, 64)\n@@ -953,9 +954,7 @@ func (ss sortableString) Less(i, j int) bool {\n }\n \n func (ss sortableString) Swap(i, j int) {\n-\toldI := ss[i]\n-\tss[i] = ss[j]\n-\tss[j] = oldI\n+\tss[i], ss[j] = ss[j], ss[i]\n }\n \n func sortStringAlphebeticAscending(s string) string {"
    },
    {
      "sha": "34a4a68f597c4294c55e5707e35904d97b2d7b79",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/auth.go",
      "status": "modified",
      "additions": 20,
      "deletions": 24,
      "changes": 44,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fauth.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fauth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fauth.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -19,8 +19,13 @@ import (\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/session\"\n )\n \n+const sourceExternal = \"$external\"\n+\n+// Config contains the configuration for an Authenticator.\n+type Config = driver.AuthConfig\n+\n // AuthenticatorFactory constructs an authenticator.\n-type AuthenticatorFactory func(cred *Cred) (Authenticator, error)\n+type AuthenticatorFactory func(*Cred, *http.Client) (Authenticator, error)\n \n var authFactories = make(map[string]AuthenticatorFactory)\n \n@@ -33,12 +38,13 @@ func init() {\n \tRegisterAuthenticatorFactory(GSSAPI, newGSSAPIAuthenticator)\n \tRegisterAuthenticatorFactory(MongoDBX509, newMongoDBX509Authenticator)\n \tRegisterAuthenticatorFactory(MongoDBAWS, newMongoDBAWSAuthenticator)\n+\tRegisterAuthenticatorFactory(MongoDBOIDC, newOIDCAuthenticator)\n }\n \n // CreateAuthenticator creates an authenticator.\n-func CreateAuthenticator(name string, cred *Cred) (Authenticator, error) {\n+func CreateAuthenticator(name string, cred *Cred, httpClient *http.Client) (Authenticator, error) {\n \tif f, ok := authFactories[name]; ok {\n-\t\treturn f(cred)\n+\t\treturn f(cred, httpClient)\n \t}\n \n \treturn nil, newAuthError(fmt.Sprintf(\"unknown authenticator: %s\", name), nil)\n@@ -61,7 +67,6 @@ type HandshakeOptions struct {\n \tClusterClock          *session.ClusterClock\n \tServerAPI             *driver.ServerAPIOptions\n \tLoadBalanced          bool\n-\tHTTPClient            *http.Client\n }\n \n type authHandshaker struct {\n@@ -97,12 +102,17 @@ func (ah *authHandshaker) GetHandshakeInformation(ctx context.Context, addr addr\n \t\t\t\treturn driver.HandshakeInformation{}, newAuthError(\"failed to create conversation\", err)\n \t\t\t}\n \n-\t\t\tfirstMsg, err := ah.conversation.FirstMessage()\n-\t\t\tif err != nil {\n-\t\t\t\treturn driver.HandshakeInformation{}, newAuthError(\"failed to create speculative authentication message\", err)\n-\t\t\t}\n+\t\t\t// It is possible for the speculative conversation to be nil even without error if the authenticator\n+\t\t\t// cannot perform speculative authentication. An example of this is MONGODB-OIDC when there is\n+\t\t\t// no AccessToken in the cache.\n+\t\t\tif ah.conversation != nil {\n+\t\t\t\tfirstMsg, err := ah.conversation.FirstMessage()\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn driver.HandshakeInformation{}, newAuthError(\"failed to create speculative authentication message\", err)\n+\t\t\t\t}\n \n-\t\t\top = op.SpeculativeAuthenticate(firstMsg)\n+\t\t\t\top = op.SpeculativeAuthenticate(firstMsg)\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -132,7 +142,6 @@ func (ah *authHandshaker) FinishHandshake(ctx context.Context, conn driver.Conne\n \t\t\tClusterClock:  ah.options.ClusterClock,\n \t\t\tHandshakeInfo: ah.handshakeInfo,\n \t\t\tServerAPI:     ah.options.ServerAPI,\n-\t\t\tHTTPClient:    ah.options.HTTPClient,\n \t\t}\n \n \t\tif err := ah.authenticate(ctx, cfg); err != nil {\n@@ -170,21 +179,8 @@ func Handshaker(h driver.Handshaker, options *HandshakeOptions) driver.Handshake\n \t}\n }\n \n-// Config holds the information necessary to perform an authentication attempt.\n-type Config struct {\n-\tDescription   description.Server\n-\tConnection    driver.Connection\n-\tClusterClock  *session.ClusterClock\n-\tHandshakeInfo driver.HandshakeInformation\n-\tServerAPI     *driver.ServerAPIOptions\n-\tHTTPClient    *http.Client\n-}\n-\n // Authenticator handles authenticating a connection.\n-type Authenticator interface {\n-\t// Auth authenticates the connection.\n-\tAuth(context.Context, *Config) error\n-}\n+type Authenticator = driver.Authenticator\n \n func newAuthError(msg string, inner error) error {\n \treturn &Error{"
    },
    {
      "sha": "a9685f6ed89854f517501bdb4a8599c1e34e8442",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/cred.go",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fcred.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fcred.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fcred.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -6,11 +6,9 @@\n \n package auth\n \n-// Cred is a user's credential.\n-type Cred struct {\n-\tSource      string\n-\tUsername    string\n-\tPassword    string\n-\tPasswordSet bool\n-\tProps       map[string]string\n-}\n+import (\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n+)\n+\n+// Cred is the type of user credential\n+type Cred = driver.Cred"
    },
    {
      "sha": "785a41951d5b393871fd9fd96e49b36fc289cd91",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/default.go",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fdefault.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fdefault.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fdefault.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -9,10 +9,13 @@ package auth\n import (\n \t\"context\"\n \t\"fmt\"\n+\t\"net/http\"\n+\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n )\n \n-func newDefaultAuthenticator(cred *Cred) (Authenticator, error) {\n-\tscram, err := newScramSHA256Authenticator(cred)\n+func newDefaultAuthenticator(cred *Cred, httpClient *http.Client) (Authenticator, error) {\n+\tscram, err := newScramSHA256Authenticator(cred, httpClient)\n \tif err != nil {\n \t\treturn nil, newAuthError(\"failed to create internal authenticator\", err)\n \t}\n@@ -25,6 +28,7 @@ func newDefaultAuthenticator(cred *Cred) (Authenticator, error) {\n \treturn &DefaultAuthenticator{\n \t\tCred:                     cred,\n \t\tspeculativeAuthenticator: speculative,\n+\t\thttpClient:               httpClient,\n \t}, nil\n }\n \n@@ -36,6 +40,8 @@ type DefaultAuthenticator struct {\n \t// The authenticator to use for speculative authentication. Because the correct auth mechanism is unknown when doing\n \t// the initial hello, SCRAM-SHA-256 is used for the speculative attempt.\n \tspeculativeAuthenticator SpeculativeAuthenticator\n+\n+\thttpClient *http.Client\n }\n \n var _ SpeculativeAuthenticator = (*DefaultAuthenticator)(nil)\n@@ -52,11 +58,11 @@ func (a *DefaultAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n \n \tswitch chooseAuthMechanism(cfg) {\n \tcase SCRAMSHA256:\n-\t\tactual, err = newScramSHA256Authenticator(a.Cred)\n+\t\tactual, err = newScramSHA256Authenticator(a.Cred, a.httpClient)\n \tcase SCRAMSHA1:\n-\t\tactual, err = newScramSHA1Authenticator(a.Cred)\n+\t\tactual, err = newScramSHA1Authenticator(a.Cred, a.httpClient)\n \tdefault:\n-\t\tactual, err = newMongoDBCRAuthenticator(a.Cred)\n+\t\tactual, err = newMongoDBCRAuthenticator(a.Cred, a.httpClient)\n \t}\n \n \tif err != nil {\n@@ -66,6 +72,11 @@ func (a *DefaultAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n \treturn actual.Auth(ctx, cfg)\n }\n \n+// Reauth reauthenticates the connection.\n+func (a *DefaultAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"DefaultAuthenticator does not support reauthentication\", nil)\n+}\n+\n // If a server provides a list of supported mechanisms, we choose\n // SCRAM-SHA-256 if it exists or else MUST use SCRAM-SHA-1.\n // Otherwise, we decide based on what is supported."
    },
    {
      "sha": "b342e9a7de45ea105486af5cf27c7d7908c6abf6",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/gssapi.go",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -14,15 +14,17 @@ import (\n \t\"context\"\n \t\"fmt\"\n \t\"net\"\n+\t\"net/http\"\n \n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/auth/internal/gssapi\"\n )\n \n // GSSAPI is the mechanism name for GSSAPI.\n const GSSAPI = \"GSSAPI\"\n \n-func newGSSAPIAuthenticator(cred *Cred) (Authenticator, error) {\n-\tif cred.Source != \"\" && cred.Source != \"$external\" {\n+func newGSSAPIAuthenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\tif cred.Source != \"\" && cred.Source != sourceExternal {\n \t\treturn nil, newAuthError(\"GSSAPI source must be empty or $external\", nil)\n \t}\n \n@@ -55,5 +57,10 @@ func (a *GSSAPIAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n \tif err != nil {\n \t\treturn newAuthError(\"error creating gssapi\", err)\n \t}\n-\treturn ConductSaslConversation(ctx, cfg, \"$external\", client)\n+\treturn ConductSaslConversation(ctx, cfg, sourceExternal, client)\n+}\n+\n+// Reauth reauthenticates the connection.\n+func (a *GSSAPIAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"GSSAPI does not support reauthentication\", nil)\n }"
    },
    {
      "sha": "e50553c7a1bde9e98e98ad4daea19100d5f0d386",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/gssapi_not_enabled.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_enabled.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_enabled.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_enabled.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -9,9 +9,11 @@\n \n package auth\n \n+import \"net/http\"\n+\n // GSSAPI is the mechanism name for GSSAPI.\n const GSSAPI = \"GSSAPI\"\n \n-func newGSSAPIAuthenticator(*Cred) (Authenticator, error) {\n+func newGSSAPIAuthenticator(*Cred, *http.Client) (Authenticator, error) {\n \treturn nil, newAuthError(\"GSSAPI support not enabled during build (-tags gssapi)\", nil)\n }"
    },
    {
      "sha": "12046ff67c2001ccc180d64d55d58c63881c592f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/gssapi_not_supported.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_supported.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_supported.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fgssapi_not_supported.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -11,12 +11,13 @@ package auth\n \n import (\n \t\"fmt\"\n+\t\"net/http\"\n \t\"runtime\"\n )\n \n // GSSAPI is the mechanism name for GSSAPI.\n const GSSAPI = \"GSSAPI\"\n \n-func newGSSAPIAuthenticator(cred *Cred) (Authenticator, error) {\n+func newGSSAPIAuthenticator(*Cred, *http.Client) (Authenticator, error) {\n \treturn nil, newAuthError(fmt.Sprintf(\"GSSAPI is not supported on %s\", runtime.GOOS), nil)\n }"
    },
    {
      "sha": "496057882da77cb6a090c48df3dcf04d3bc2b963",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/internal/gssapi/gss.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fgss.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fgss.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fgss.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -19,6 +19,7 @@ package gssapi\n */\n import \"C\"\n import (\n+\t\"context\"\n \t\"fmt\"\n \t\"runtime\"\n \t\"strings\"\n@@ -91,12 +92,12 @@ func (sc *SaslClient) Start() (string, []byte, error) {\n \t\treturn mechName, nil, sc.getError(\"unable to initialize client\")\n \t}\n \n-\tpayload, err := sc.Next(nil)\n+\tpayload, err := sc.Next(nil, nil)\n \n \treturn mechName, payload, err\n }\n \n-func (sc *SaslClient) Next(challenge []byte) ([]byte, error) {\n+func (sc *SaslClient) Next(_ context.Context, challenge []byte) ([]byte, error) {\n \n \tvar buf unsafe.Pointer\n \tvar bufLen C.size_t"
    },
    {
      "sha": "f1da5a85215fe84d4400eff6c36bfc1485e83bc4",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/internal/gssapi/sspi.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fsspi.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fsspi.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Finternal%2Fgssapi%2Fsspi.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -12,6 +12,7 @@ package gssapi\n // #include \"sspi_wrapper.h\"\n import \"C\"\n import (\n+\t\"context\"\n \t\"fmt\"\n \t\"net\"\n \t\"strconv\"\n@@ -115,12 +116,12 @@ func (sc *SaslClient) Start() (string, []byte, error) {\n \t\treturn mechName, nil, sc.getError(\"unable to initialize client\")\n \t}\n \n-\tpayload, err := sc.Next(nil)\n+\tpayload, err := sc.Next(nil, nil)\n \n \treturn mechName, payload, err\n }\n \n-func (sc *SaslClient) Next(challenge []byte) ([]byte, error) {\n+func (sc *SaslClient) Next(_ context.Context, challenge []byte) ([]byte, error) {\n \n \tvar outBuf C.PVOID\n \tvar outBufLen C.ULONG"
    },
    {
      "sha": "679c54e9feb45d3da5b006f36a5b204e28eb5e91",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/mongodbaws.go",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbaws.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbaws.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbaws.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -9,57 +9,62 @@ package auth\n import (\n \t\"context\"\n \t\"errors\"\n+\t\"net/http\"\n \n \t\"go.mongodb.org/mongo-driver/internal/aws/credentials\"\n \t\"go.mongodb.org/mongo-driver/internal/credproviders\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/auth/creds\"\n )\n \n // MongoDBAWS is the mechanism name for MongoDBAWS.\n const MongoDBAWS = \"MONGODB-AWS\"\n \n-func newMongoDBAWSAuthenticator(cred *Cred) (Authenticator, error) {\n-\tif cred.Source != \"\" && cred.Source != \"$external\" {\n+func newMongoDBAWSAuthenticator(cred *Cred, httpClient *http.Client) (Authenticator, error) {\n+\tif cred.Source != \"\" && cred.Source != sourceExternal {\n \t\treturn nil, newAuthError(\"MONGODB-AWS source must be empty or $external\", nil)\n \t}\n+\tif httpClient == nil {\n+\t\treturn nil, errors.New(\"httpClient must not be nil\")\n+\t}\n \treturn &MongoDBAWSAuthenticator{\n-\t\tsource: cred.Source,\n \t\tcredentials: &credproviders.StaticProvider{\n \t\t\tValue: credentials.Value{\n-\t\t\t\tProviderName:    cred.Source,\n \t\t\t\tAccessKeyID:     cred.Username,\n \t\t\t\tSecretAccessKey: cred.Password,\n \t\t\t\tSessionToken:    cred.Props[\"AWS_SESSION_TOKEN\"],\n \t\t\t},\n \t\t},\n+\t\thttpClient: httpClient,\n \t}, nil\n }\n \n // MongoDBAWSAuthenticator uses AWS-IAM credentials over SASL to authenticate a connection.\n type MongoDBAWSAuthenticator struct {\n-\tsource      string\n \tcredentials *credproviders.StaticProvider\n+\thttpClient  *http.Client\n }\n \n // Auth authenticates the connection.\n func (a *MongoDBAWSAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n-\thttpClient := cfg.HTTPClient\n-\tif httpClient == nil {\n-\t\treturn errors.New(\"cfg.HTTPClient must not be nil\")\n-\t}\n-\tproviders := creds.NewAWSCredentialProvider(httpClient, a.credentials)\n+\tproviders := creds.NewAWSCredentialProvider(a.httpClient, a.credentials)\n \tadapter := &awsSaslAdapter{\n \t\tconversation: &awsConversation{\n \t\t\tcredentials: providers.Cred,\n \t\t},\n \t}\n-\terr := ConductSaslConversation(ctx, cfg, a.source, adapter)\n+\terr := ConductSaslConversation(ctx, cfg, sourceExternal, adapter)\n \tif err != nil {\n \t\treturn newAuthError(\"sasl conversation error\", err)\n \t}\n \treturn nil\n }\n \n+// Reauth reauthenticates the connection.\n+func (a *MongoDBAWSAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"AWS authentication does not support reauthentication\", nil)\n+}\n+\n type awsSaslAdapter struct {\n \tconversation *awsConversation\n }\n@@ -74,7 +79,7 @@ func (a *awsSaslAdapter) Start() (string, []byte, error) {\n \treturn MongoDBAWS, step, nil\n }\n \n-func (a *awsSaslAdapter) Next(challenge []byte) ([]byte, error) {\n+func (a *awsSaslAdapter) Next(_ context.Context, challenge []byte) ([]byte, error) {\n \tstep, err := a.conversation.Step(challenge)\n \tif err != nil {\n \t\treturn nil, err"
    },
    {
      "sha": "1861956b74970d4cc38764b4112949caecd70713",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/mongodbcr.go",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbcr.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbcr.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fmongodbcr.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -10,6 +10,7 @@ import (\n \t\"context\"\n \t\"fmt\"\n \t\"io\"\n+\t\"net/http\"\n \n \t// Ignore gosec warning \"Blocklisted import crypto/md5: weak cryptographic primitive\". We need\n \t// to use MD5 here to implement the MONGODB-CR specification.\n@@ -28,9 +29,13 @@ import (\n // MongoDB 4.0.\n const MONGODBCR = \"MONGODB-CR\"\n \n-func newMongoDBCRAuthenticator(cred *Cred) (Authenticator, error) {\n+func newMongoDBCRAuthenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\tsource := cred.Source\n+\tif source == \"\" {\n+\t\tsource = \"admin\"\n+\t}\n \treturn &MongoDBCRAuthenticator{\n-\t\tDB:       cred.Source,\n+\t\tDB:       source,\n \t\tUsername: cred.Username,\n \t\tPassword: cred.Password,\n \t}, nil\n@@ -97,6 +102,11 @@ func (a *MongoDBCRAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n \treturn nil\n }\n \n+// Reauth reauthenticates the connection.\n+func (a *MongoDBCRAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"MONGODB-CR does not support reauthentication\", nil)\n+}\n+\n func (a *MongoDBCRAuthenticator) createKey(nonce string) string {\n \t// Ignore gosec warning \"Use of weak cryptographic primitive\". We need to use MD5 here to\n \t// implement the MONGODB-CR specification."
    },
    {
      "sha": "13fd10ec3d382f4ef51f22e8a58656e5ab62e76d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/oidc.go",
      "status": "added",
      "additions": 556,
      "deletions": 0,
      "changes": 556,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Foidc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Foidc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Foidc.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,556 @@\n+// Copyright (C) MongoDB, Inc. 2024-present.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+// not use this file except in compliance with the License. You may obtain\n+// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n+\n+package auth\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"regexp\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"go.mongodb.org/mongo-driver/bson\"\n+\t\"go.mongodb.org/mongo-driver/x/bsonx/bsoncore\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n+)\n+\n+// MongoDBOIDC is the string constant for the MONGODB-OIDC authentication mechanism.\n+const MongoDBOIDC = \"MONGODB-OIDC\"\n+\n+// EnvironmentProp is the property key name that specifies the environment for the OIDC authenticator.\n+const EnvironmentProp = \"ENVIRONMENT\"\n+\n+// ResourceProp is the property key name that specifies the token resource for GCP and AZURE OIDC auth.\n+const ResourceProp = \"TOKEN_RESOURCE\"\n+\n+// AllowedHostsProp is the property key name that specifies the allowed hosts for the OIDC authenticator.\n+const AllowedHostsProp = \"ALLOWED_HOSTS\"\n+\n+// AzureEnvironmentValue is the value for the Azure environment.\n+const AzureEnvironmentValue = \"azure\"\n+\n+// GCPEnvironmentValue is the value for the GCP environment.\n+const GCPEnvironmentValue = \"gcp\"\n+\n+// TestEnvironmentValue is the value for the test environment.\n+const TestEnvironmentValue = \"test\"\n+\n+const apiVersion = 1\n+const invalidateSleepTimeout = 100 * time.Millisecond\n+\n+// The CSOT specification says to apply a 1-minute timeout if \"CSOT is not applied\". That's\n+// ambiguous for the v1.x Go Driver because it could mean either \"no timeout provided\" or \"CSOT not\n+// enabled\". Always use a maximum timeout duration of 1 minute, allowing us to ignore the ambiguity.\n+// Contexts with a shorter timeout are unaffected.\n+const machineCallbackTimeout = time.Minute\n+const humanCallbackTimeout = 5 * time.Minute\n+\n+var defaultAllowedHosts = []*regexp.Regexp{\n+\tregexp.MustCompile(`^.*[.]mongodb[.]net(:\\d+)?$`),\n+\tregexp.MustCompile(`^.*[.]mongodb-qa[.]net(:\\d+)?$`),\n+\tregexp.MustCompile(`^.*[.]mongodb-dev[.]net(:\\d+)?$`),\n+\tregexp.MustCompile(`^.*[.]mongodbgov[.]net(:\\d+)?$`),\n+\tregexp.MustCompile(`^localhost(:\\d+)?$`),\n+\tregexp.MustCompile(`^127[.]0[.]0[.]1(:\\d+)?$`),\n+\tregexp.MustCompile(`^::1(:\\d+)?$`),\n+}\n+\n+// OIDCCallback is a function that takes a context and OIDCArgs and returns an OIDCCredential.\n+type OIDCCallback = driver.OIDCCallback\n+\n+// OIDCArgs contains the arguments for the OIDC callback.\n+type OIDCArgs = driver.OIDCArgs\n+\n+// OIDCCredential contains the access token and refresh token.\n+type OIDCCredential = driver.OIDCCredential\n+\n+// IDPInfo contains the information needed to perform OIDC authentication with an Identity Provider.\n+type IDPInfo = driver.IDPInfo\n+\n+var _ driver.Authenticator = (*OIDCAuthenticator)(nil)\n+var _ SpeculativeAuthenticator = (*OIDCAuthenticator)(nil)\n+var _ SaslClient = (*oidcOneStep)(nil)\n+var _ SaslClient = (*oidcTwoStep)(nil)\n+\n+// OIDCAuthenticator is synchronized and handles caching of the access token, refreshToken,\n+// and IDPInfo. It also provides a mechanism to refresh the access token, but this functionality\n+// is only for the OIDC Human flow.\n+type OIDCAuthenticator struct {\n+\tmu sync.Mutex // Guards all of the info in the OIDCAuthenticator struct.\n+\n+\tAuthMechanismProperties map[string]string\n+\tOIDCMachineCallback     OIDCCallback\n+\tOIDCHumanCallback       OIDCCallback\n+\n+\tallowedHosts *[]*regexp.Regexp\n+\tuserName     string\n+\thttpClient   *http.Client\n+\taccessToken  string\n+\trefreshToken *string\n+\tidpInfo      *IDPInfo\n+\ttokenGenID   uint64\n+}\n+\n+// SetAccessToken allows for manually setting the access token for the OIDCAuthenticator, this is\n+// only for testing purposes.\n+func (oa *OIDCAuthenticator) SetAccessToken(accessToken string) {\n+\toa.mu.Lock()\n+\tdefer oa.mu.Unlock()\n+\toa.accessToken = accessToken\n+}\n+\n+func newOIDCAuthenticator(cred *Cred, httpClient *http.Client) (Authenticator, error) {\n+\tif cred.Source != \"\" && cred.Source != sourceExternal {\n+\t\treturn nil, newAuthError(\"MONGODB-OIDC source must be empty or $external\", nil)\n+\t}\n+\tif cred.Password != \"\" {\n+\t\treturn nil, fmt.Errorf(\"password cannot be specified for %q\", MongoDBOIDC)\n+\t}\n+\tif cred.Props != nil {\n+\t\tif env, ok := cred.Props[EnvironmentProp]; ok {\n+\t\t\tswitch strings.ToLower(env) {\n+\t\t\tcase AzureEnvironmentValue:\n+\t\t\t\tfallthrough\n+\t\t\tcase GCPEnvironmentValue:\n+\t\t\t\tif _, ok := cred.Props[ResourceProp]; !ok {\n+\t\t\t\t\treturn nil, fmt.Errorf(\"%q must be specified for %q %q\", ResourceProp, env, EnvironmentProp)\n+\t\t\t\t}\n+\t\t\t\tfallthrough\n+\t\t\tcase TestEnvironmentValue:\n+\t\t\t\tif cred.OIDCMachineCallback != nil || cred.OIDCHumanCallback != nil {\n+\t\t\t\t\treturn nil, fmt.Errorf(\"OIDC callbacks are not allowed for %q %q\", env, EnvironmentProp)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\toa := &OIDCAuthenticator{\n+\t\tuserName:                cred.Username,\n+\t\thttpClient:              httpClient,\n+\t\tAuthMechanismProperties: cred.Props,\n+\t\tOIDCMachineCallback:     cred.OIDCMachineCallback,\n+\t\tOIDCHumanCallback:       cred.OIDCHumanCallback,\n+\t}\n+\terr := oa.setAllowedHosts()\n+\treturn oa, err\n+}\n+\n+func createPatternsForGlobs(hosts []string) ([]*regexp.Regexp, error) {\n+\tvar err error\n+\tret := make([]*regexp.Regexp, len(hosts))\n+\tfor i := range hosts {\n+\t\thosts[i] = strings.ReplaceAll(hosts[i], \".\", \"[.]\")\n+\t\thosts[i] = strings.ReplaceAll(hosts[i], \"*\", \".*\")\n+\t\thosts[i] = \"^\" + hosts[i] + \"(:\\\\d+)?$\"\n+\t\tret[i], err = regexp.Compile(hosts[i])\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\treturn ret, nil\n+}\n+\n+func (oa *OIDCAuthenticator) setAllowedHosts() error {\n+\tif oa.AuthMechanismProperties == nil {\n+\t\toa.allowedHosts = &defaultAllowedHosts\n+\t\treturn nil\n+\t}\n+\n+\tallowedHosts, ok := oa.AuthMechanismProperties[AllowedHostsProp]\n+\tif !ok {\n+\t\toa.allowedHosts = &defaultAllowedHosts\n+\t\treturn nil\n+\t}\n+\tglobs := strings.Split(allowedHosts, \",\")\n+\tret, err := createPatternsForGlobs(globs)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\toa.allowedHosts = &ret\n+\treturn nil\n+}\n+\n+func (oa *OIDCAuthenticator) validateConnectionAddressWithAllowedHosts(conn driver.Connection) error {\n+\tif oa.allowedHosts == nil {\n+\t\t// should be unreachable, but this is a safety check.\n+\t\treturn newAuthError(fmt.Sprintf(\"%q missing\", AllowedHostsProp), nil)\n+\t}\n+\tallowedHosts := *oa.allowedHosts\n+\tif len(allowedHosts) == 0 {\n+\t\treturn newAuthError(fmt.Sprintf(\"empty %q specified\", AllowedHostsProp), nil)\n+\t}\n+\tfor _, pattern := range allowedHosts {\n+\t\tif pattern.MatchString(string(conn.Address())) {\n+\t\t\treturn nil\n+\t\t}\n+\t}\n+\treturn newAuthError(fmt.Sprintf(\"address %q not allowed by %q: %v\", conn.Address(), AllowedHostsProp, allowedHosts), nil)\n+}\n+\n+type oidcOneStep struct {\n+\tuserName    string\n+\taccessToken string\n+}\n+\n+type oidcTwoStep struct {\n+\tconn driver.Connection\n+\toa   *OIDCAuthenticator\n+}\n+\n+func jwtStepRequest(accessToken string) []byte {\n+\treturn bsoncore.NewDocumentBuilder().\n+\t\tAppendString(\"jwt\", accessToken).\n+\t\tBuild()\n+}\n+\n+func principalStepRequest(principal string) []byte {\n+\tdoc := bsoncore.NewDocumentBuilder()\n+\tif principal != \"\" {\n+\t\tdoc.AppendString(\"n\", principal)\n+\t}\n+\treturn doc.Build()\n+}\n+\n+func (oos *oidcOneStep) Start() (string, []byte, error) {\n+\treturn MongoDBOIDC, jwtStepRequest(oos.accessToken), nil\n+}\n+\n+func (oos *oidcOneStep) Next(context.Context, []byte) ([]byte, error) {\n+\treturn nil, newAuthError(\"unexpected step in OIDC authentication\", nil)\n+}\n+\n+func (*oidcOneStep) Completed() bool {\n+\treturn true\n+}\n+\n+func (ots *oidcTwoStep) Start() (string, []byte, error) {\n+\treturn MongoDBOIDC, principalStepRequest(ots.oa.userName), nil\n+}\n+\n+func (ots *oidcTwoStep) Next(ctx context.Context, msg []byte) ([]byte, error) {\n+\tvar idpInfo IDPInfo\n+\terr := bson.Unmarshal(msg, &idpInfo)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"error unmarshaling BSON document: %w\", err)\n+\t}\n+\n+\taccessToken, err := ots.oa.getAccessToken(ctx,\n+\t\tots.conn,\n+\t\t&OIDCArgs{\n+\t\t\tVersion: apiVersion,\n+\t\t\t// idpInfo is nil for machine callbacks in the current spec.\n+\t\t\tIDPInfo: &idpInfo,\n+\t\t\t// there is no way there could be a refresh token when there is no IDPInfo.\n+\t\t\tRefreshToken: nil,\n+\t\t},\n+\t\t// two-step callbacks are always human callbacks.\n+\t\tots.oa.OIDCHumanCallback)\n+\n+\treturn jwtStepRequest(accessToken), err\n+}\n+\n+func (*oidcTwoStep) Completed() bool {\n+\treturn true\n+}\n+\n+func (oa *OIDCAuthenticator) providerCallback() (OIDCCallback, error) {\n+\tenv, ok := oa.AuthMechanismProperties[EnvironmentProp]\n+\tif !ok {\n+\t\treturn nil, nil\n+\t}\n+\n+\tswitch env {\n+\tcase AzureEnvironmentValue:\n+\t\tresource, ok := oa.AuthMechanismProperties[ResourceProp]\n+\t\tif !ok {\n+\t\t\treturn nil, newAuthError(fmt.Sprintf(\"%q must be specified for Azure OIDC\", ResourceProp), nil)\n+\t\t}\n+\t\treturn getAzureOIDCCallback(oa.userName, resource, oa.httpClient), nil\n+\tcase GCPEnvironmentValue:\n+\t\tresource, ok := oa.AuthMechanismProperties[ResourceProp]\n+\t\tif !ok {\n+\t\t\treturn nil, newAuthError(fmt.Sprintf(\"%q must be specified for GCP OIDC\", ResourceProp), nil)\n+\t\t}\n+\t\treturn getGCPOIDCCallback(resource, oa.httpClient), nil\n+\t}\n+\n+\treturn nil, fmt.Errorf(\"%q %q not supported for MONGODB-OIDC\", EnvironmentProp, env)\n+}\n+\n+// getAzureOIDCCallback returns the callback for the Azure Identity Provider.\n+func getAzureOIDCCallback(clientID string, resource string, httpClient *http.Client) OIDCCallback {\n+\t// return the callback parameterized by the clientID and resource, also passing in the user\n+\t// configured httpClient.\n+\treturn func(ctx context.Context, _ *OIDCArgs) (*OIDCCredential, error) {\n+\t\tresource = url.QueryEscape(resource)\n+\t\tvar uri string\n+\t\tif clientID != \"\" {\n+\t\t\turi = fmt.Sprintf(\"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=%s&client_id=%s\", resource, clientID)\n+\t\t} else {\n+\t\t\turi = fmt.Sprintf(\"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=%s\", resource)\n+\t\t}\n+\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, uri, nil)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"error creating http request to Azure Identity Provider\", err)\n+\t\t}\n+\t\treq.Header.Add(\"Metadata\", \"true\")\n+\t\treq.Header.Add(\"Accept\", \"application/json\")\n+\t\tresp, err := httpClient.Do(req)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"error getting access token from Azure Identity Provider\", err)\n+\t\t}\n+\t\tdefer resp.Body.Close()\n+\t\tvar azureResp struct {\n+\t\t\tAccessToken string `json:\"access_token\"`\n+\t\t\tExpiresOn   int64  `json:\"expires_on,string\"`\n+\t\t}\n+\n+\t\tif resp.StatusCode != http.StatusOK {\n+\t\t\treturn nil, newAuthError(fmt.Sprintf(\"failed to get a valid response from Azure Identity Provider, http code: %d\", resp.StatusCode), nil)\n+\t\t}\n+\t\terr = json.NewDecoder(resp.Body).Decode(&azureResp)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"failed parsing result from Azure Identity Provider\", err)\n+\t\t}\n+\t\texpireTime := time.Unix(azureResp.ExpiresOn, 0)\n+\t\treturn &OIDCCredential{\n+\t\t\tAccessToken: azureResp.AccessToken,\n+\t\t\tExpiresAt:   &expireTime,\n+\t\t}, nil\n+\t}\n+}\n+\n+// getGCPOIDCCallback returns the callback for the GCP Identity Provider.\n+func getGCPOIDCCallback(resource string, httpClient *http.Client) OIDCCallback {\n+\t// return the callback parameterized by the clientID and resource, also passing in the user\n+\t// configured httpClient.\n+\treturn func(ctx context.Context, _ *OIDCArgs) (*OIDCCredential, error) {\n+\t\tresource = url.QueryEscape(resource)\n+\t\turi := fmt.Sprintf(\"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=%s\", resource)\n+\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, uri, nil)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"error creating http request to GCP Identity Provider\", err)\n+\t\t}\n+\t\treq.Header.Add(\"Metadata-Flavor\", \"Google\")\n+\t\tresp, err := httpClient.Do(req)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"error getting access token from GCP Identity Provider\", err)\n+\t\t}\n+\t\tdefer resp.Body.Close()\n+\t\tif resp.StatusCode != http.StatusOK {\n+\t\t\treturn nil, newAuthError(fmt.Sprintf(\"failed to get a valid response from GCP Identity Provider, http code: %d\", resp.StatusCode), nil)\n+\t\t}\n+\t\taccessToken, err := io.ReadAll(resp.Body)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAuthError(\"failed parsing reading response from GCP Identity Provider\", err)\n+\t\t}\n+\t\treturn &OIDCCredential{\n+\t\t\tAccessToken: string(accessToken),\n+\t\t\tExpiresAt:   nil,\n+\t\t}, nil\n+\t}\n+}\n+\n+func (oa *OIDCAuthenticator) getAccessToken(\n+\tctx context.Context,\n+\tconn driver.Connection,\n+\targs *OIDCArgs,\n+\tcallback OIDCCallback,\n+) (string, error) {\n+\toa.mu.Lock()\n+\tdefer oa.mu.Unlock()\n+\n+\tif oa.accessToken != \"\" {\n+\t\treturn oa.accessToken, nil\n+\t}\n+\n+\t// Attempt to refresh the access token if a refresh token is available.\n+\tif args.RefreshToken != nil {\n+\t\tcred, err := callback(ctx, args)\n+\t\tif err == nil && cred != nil {\n+\t\t\toa.accessToken = cred.AccessToken\n+\t\t\toa.tokenGenID++\n+\t\t\tconn.SetOIDCTokenGenID(oa.tokenGenID)\n+\t\t\toa.refreshToken = cred.RefreshToken\n+\t\t\treturn cred.AccessToken, nil\n+\t\t}\n+\t\toa.refreshToken = nil\n+\t\targs.RefreshToken = nil\n+\t}\n+\t// If we get here this means there either was no refresh token or the refresh token failed.\n+\tcred, err := callback(ctx, args)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\t// This line should never occur, if go conventions are followed, but it is a safety check such\n+\t// that we do not throw nil pointer errors to our users if they abuse the API.\n+\tif cred == nil {\n+\t\treturn \"\", newAuthError(\"OIDC callback returned nil credential with no specified error\", nil)\n+\t}\n+\n+\toa.accessToken = cred.AccessToken\n+\toa.tokenGenID++\n+\tconn.SetOIDCTokenGenID(oa.tokenGenID)\n+\toa.refreshToken = cred.RefreshToken\n+\t// always set the IdPInfo, in most cases, this should just be recopying the same pointer, or nil\n+\t// in the machine flow.\n+\toa.idpInfo = args.IDPInfo\n+\n+\treturn cred.AccessToken, nil\n+}\n+\n+// invalidateAccessToken invalidates the access token, if the force flag is set to true (which is\n+// only on a Reauth call) or if the tokenGenID of the connection is greater than or equal to the\n+// tokenGenID of the OIDCAuthenticator. It should never actually be greater than, but only equal,\n+// but this is a safety check, since extra invalidation is only a performance impact, not a\n+// correctness impact.\n+func (oa *OIDCAuthenticator) invalidateAccessToken(conn driver.Connection) {\n+\toa.mu.Lock()\n+\tdefer oa.mu.Unlock()\n+\ttokenGenID := conn.OIDCTokenGenID()\n+\t// If the connection used in a Reauth is a new connection it will not have a correct tokenGenID,\n+\t// it will instead be set to 0. In the absence of information, the only safe thing to do is to\n+\t// invalidate the cached accessToken.\n+\tif tokenGenID == 0 || tokenGenID >= oa.tokenGenID {\n+\t\toa.accessToken = \"\"\n+\t\tconn.SetOIDCTokenGenID(0)\n+\t}\n+}\n+\n+// Reauth reauthenticates the connection when the server returns a 391 code. Reauth is part of the\n+// driver.Authenticator interface.\n+func (oa *OIDCAuthenticator) Reauth(ctx context.Context, cfg *Config) error {\n+\toa.invalidateAccessToken(cfg.Connection)\n+\treturn oa.Auth(ctx, cfg)\n+}\n+\n+// Auth authenticates the connection.\n+func (oa *OIDCAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n+\tvar err error\n+\n+\tif cfg == nil {\n+\t\treturn newAuthError(fmt.Sprintf(\"config must be set for %q authentication\", MongoDBOIDC), nil)\n+\t}\n+\tconn := cfg.Connection\n+\n+\toa.mu.Lock()\n+\tcachedAccessToken := oa.accessToken\n+\tcachedRefreshToken := oa.refreshToken\n+\tcachedIDPInfo := oa.idpInfo\n+\toa.mu.Unlock()\n+\n+\tif cachedAccessToken != \"\" {\n+\t\terr = ConductSaslConversation(ctx, cfg, sourceExternal, &oidcOneStep{\n+\t\t\tuserName:    oa.userName,\n+\t\t\taccessToken: cachedAccessToken,\n+\t\t})\n+\t\tif err == nil {\n+\t\t\treturn nil\n+\t\t}\n+\t\t// this seems like it could be incorrect since we could be inavlidating an access token that\n+\t\t// has already been replaced by a different auth attempt, but the TokenGenID will prevernt\n+\t\t// that from happening.\n+\t\toa.invalidateAccessToken(conn)\n+\t\ttime.Sleep(invalidateSleepTimeout)\n+\t}\n+\n+\tif oa.OIDCHumanCallback != nil {\n+\t\treturn oa.doAuthHuman(ctx, cfg, oa.OIDCHumanCallback, cachedIDPInfo, cachedRefreshToken)\n+\t}\n+\n+\t// Handle user provided or automatic provider machine callback.\n+\tvar machineCallback OIDCCallback\n+\tif oa.OIDCMachineCallback != nil {\n+\t\tmachineCallback = oa.OIDCMachineCallback\n+\t} else {\n+\t\tmachineCallback, err = oa.providerCallback()\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error getting built-in OIDC provider: %w\", err)\n+\t\t}\n+\t}\n+\n+\tif machineCallback != nil {\n+\t\treturn oa.doAuthMachine(ctx, cfg, machineCallback)\n+\t}\n+\treturn newAuthError(\"no OIDC callback provided\", nil)\n+}\n+\n+func (oa *OIDCAuthenticator) doAuthHuman(ctx context.Context, cfg *Config, humanCallback OIDCCallback, idpInfo *IDPInfo, refreshToken *string) error {\n+\t// Ensure that the connection address is allowed by the allowed hosts.\n+\terr := oa.validateConnectionAddressWithAllowedHosts(cfg.Connection)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tsubCtx, cancel := context.WithTimeout(ctx, humanCallbackTimeout)\n+\tdefer cancel()\n+\t// If the idpInfo exists, we can just do one step\n+\tif idpInfo != nil {\n+\t\taccessToken, err := oa.getAccessToken(subCtx,\n+\t\t\tcfg.Connection,\n+\t\t\t&OIDCArgs{\n+\t\t\t\tVersion: apiVersion,\n+\t\t\t\t// idpInfo is nil for machine callbacks in the current spec.\n+\t\t\t\tIDPInfo:      idpInfo,\n+\t\t\t\tRefreshToken: refreshToken,\n+\t\t\t},\n+\t\t\thumanCallback)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\treturn ConductSaslConversation(\n+\t\t\tsubCtx,\n+\t\t\tcfg,\n+\t\t\tsourceExternal,\n+\t\t\t&oidcOneStep{accessToken: accessToken},\n+\t\t)\n+\t}\n+\t// otherwise, we need the two step where we ask the server for the IdPInfo first.\n+\tots := &oidcTwoStep{\n+\t\tconn: cfg.Connection,\n+\t\toa:   oa,\n+\t}\n+\treturn ConductSaslConversation(subCtx, cfg, sourceExternal, ots)\n+}\n+\n+func (oa *OIDCAuthenticator) doAuthMachine(ctx context.Context, cfg *Config, machineCallback OIDCCallback) error {\n+\tsubCtx, cancel := context.WithTimeout(ctx, machineCallbackTimeout)\n+\taccessToken, err := oa.getAccessToken(subCtx,\n+\t\tcfg.Connection,\n+\t\t&OIDCArgs{\n+\t\t\tVersion: apiVersion,\n+\t\t\t// idpInfo is nil for machine callbacks in the current spec.\n+\t\t\tIDPInfo:      nil,\n+\t\t\tRefreshToken: nil,\n+\t\t},\n+\t\tmachineCallback)\n+\tcancel()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn ConductSaslConversation(\n+\t\tctx,\n+\t\tcfg,\n+\t\tsourceExternal,\n+\t\t&oidcOneStep{accessToken: accessToken},\n+\t)\n+}\n+\n+// CreateSpeculativeConversation creates a speculative conversation for OIDC authentication.\n+func (oa *OIDCAuthenticator) CreateSpeculativeConversation() (SpeculativeConversation, error) {\n+\toa.mu.Lock()\n+\tdefer oa.mu.Unlock()\n+\taccessToken := oa.accessToken\n+\tif accessToken == \"\" {\n+\t\treturn nil, nil // Skip speculative auth.\n+\t}\n+\n+\treturn newSaslConversation(&oidcOneStep{accessToken: accessToken}, sourceExternal, true), nil\n+}"
    },
    {
      "sha": "fb0645aaac13ff416b1259605934059949b07711",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/plain.go",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fplain.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fplain.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fplain.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -8,12 +8,30 @@ package auth\n \n import (\n \t\"context\"\n+\t\"net/http\"\n+\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n )\n \n // PLAIN is the mechanism name for PLAIN.\n const PLAIN = \"PLAIN\"\n \n-func newPlainAuthenticator(cred *Cred) (Authenticator, error) {\n+func newPlainAuthenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\t// TODO(GODRIVER-3317): The PLAIN specification says about auth source:\n+\t//\n+\t// \"MUST be specified. Defaults to the database name if supplied on the\n+\t// connection string or $external.\"\n+\t//\n+\t// We should actually pass through the auth source, not always pass\n+\t// $external. If it's empty, we should default to $external.\n+\t//\n+\t// For example:\n+\t//\n+\t//  source := cred.Source\n+\t//  if source == \"\" {\n+\t//      source = \"$external\"\n+\t//  }\n+\t//\n \treturn &PlainAuthenticator{\n \t\tUsername: cred.Username,\n \t\tPassword: cred.Password,\n@@ -28,12 +46,17 @@ type PlainAuthenticator struct {\n \n // Auth authenticates the connection.\n func (a *PlainAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n-\treturn ConductSaslConversation(ctx, cfg, \"$external\", &plainSaslClient{\n+\treturn ConductSaslConversation(ctx, cfg, sourceExternal, &plainSaslClient{\n \t\tusername: a.Username,\n \t\tpassword: a.Password,\n \t})\n }\n \n+// Reauth reauthenticates the connection.\n+func (a *PlainAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"Plain authentication does not support reauthentication\", nil)\n+}\n+\n type plainSaslClient struct {\n \tusername string\n \tpassword string\n@@ -46,7 +69,7 @@ func (c *plainSaslClient) Start() (string, []byte, error) {\n \treturn PLAIN, b, nil\n }\n \n-func (c *plainSaslClient) Next([]byte) ([]byte, error) {\n+func (c *plainSaslClient) Next(context.Context, []byte) ([]byte, error) {\n \treturn nil, newAuthError(\"unexpected server challenge\", nil)\n }\n "
    },
    {
      "sha": "1ef67f02b0b3bda1ae627771d78ef4a507891288",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/sasl.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fsasl.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fsasl.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fsasl.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -19,7 +19,7 @@ import (\n // SaslClient is the client piece of a sasl conversation.\n type SaslClient interface {\n \tStart() (string, []byte, error)\n-\tNext(challenge []byte) ([]byte, error)\n+\tNext(ctx context.Context, challenge []byte) ([]byte, error)\n \tCompleted() bool\n }\n \n@@ -118,7 +118,7 @@ func (sc *saslConversation) Finish(ctx context.Context, cfg *Config, firstRespon\n \t\t\treturn nil\n \t\t}\n \n-\t\tpayload, err = sc.client.Next(saslResp.Payload)\n+\t\tpayload, err = sc.client.Next(ctx, saslResp.Payload)\n \t\tif err != nil {\n \t\t\treturn newError(err, sc.mechanism)\n \t\t}\n@@ -156,7 +156,6 @@ func (sc *saslConversation) Finish(ctx context.Context, cfg *Config, firstRespon\n func ConductSaslConversation(ctx context.Context, cfg *Config, authSource string, client SaslClient) error {\n \t// Create a non-speculative SASL conversation.\n \tconversation := newSaslConversation(client, authSource, false)\n-\n \tsaslStartDoc, err := conversation.FirstMessage()\n \tif err != nil {\n \t\treturn newError(err, conversation.mechanism)"
    },
    {
      "sha": "0d7deaee0e15f4bcfc5a7dcbb402a4c0f45df4de",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/scram.go",
      "status": "modified",
      "additions": 20,
      "deletions": 5,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fscram.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fscram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fscram.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -14,10 +14,12 @@ package auth\n \n import (\n \t\"context\"\n+\t\"net/http\"\n \n \t\"github.com/xdg-go/scram\"\n \t\"github.com/xdg-go/stringprep\"\n \t\"go.mongodb.org/mongo-driver/x/bsonx/bsoncore\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n )\n \n const (\n@@ -35,7 +37,11 @@ var (\n \t)\n )\n \n-func newScramSHA1Authenticator(cred *Cred) (Authenticator, error) {\n+func newScramSHA1Authenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\tsource := cred.Source\n+\tif source == \"\" {\n+\t\tsource = \"admin\"\n+\t}\n \tpassdigest := mongoPasswordDigest(cred.Username, cred.Password)\n \tclient, err := scram.SHA1.NewClientUnprepped(cred.Username, passdigest, \"\")\n \tif err != nil {\n@@ -44,12 +50,16 @@ func newScramSHA1Authenticator(cred *Cred) (Authenticator, error) {\n \tclient.WithMinIterations(4096)\n \treturn &ScramAuthenticator{\n \t\tmechanism: SCRAMSHA1,\n-\t\tsource:    cred.Source,\n+\t\tsource:    source,\n \t\tclient:    client,\n \t}, nil\n }\n \n-func newScramSHA256Authenticator(cred *Cred) (Authenticator, error) {\n+func newScramSHA256Authenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\tsource := cred.Source\n+\tif source == \"\" {\n+\t\tsource = \"admin\"\n+\t}\n \tpassprep, err := stringprep.SASLprep.Prepare(cred.Password)\n \tif err != nil {\n \t\treturn nil, newAuthError(\"error SASLprepping password\", err)\n@@ -61,7 +71,7 @@ func newScramSHA256Authenticator(cred *Cred) (Authenticator, error) {\n \tclient.WithMinIterations(4096)\n \treturn &ScramAuthenticator{\n \t\tmechanism: SCRAMSHA256,\n-\t\tsource:    cred.Source,\n+\t\tsource:    source,\n \t\tclient:    client,\n \t}, nil\n }\n@@ -84,6 +94,11 @@ func (a *ScramAuthenticator) Auth(ctx context.Context, cfg *Config) error {\n \treturn nil\n }\n \n+// Reauth reauthenticates the connection.\n+func (a *ScramAuthenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"SCRAM does not support reauthentication\", nil)\n+}\n+\n // CreateSpeculativeConversation creates a speculative conversation for SCRAM authentication.\n func (a *ScramAuthenticator) CreateSpeculativeConversation() (SpeculativeConversation, error) {\n \treturn newSaslConversation(a.createSaslClient(), a.source, true), nil\n@@ -112,7 +127,7 @@ func (a *scramSaslAdapter) Start() (string, []byte, error) {\n \treturn a.mechanism, []byte(step), nil\n }\n \n-func (a *scramSaslAdapter) Next(challenge []byte) ([]byte, error) {\n+func (a *scramSaslAdapter) Next(_ context.Context, challenge []byte) ([]byte, error) {\n \tstep, err := a.conversation.Step(string(challenge))\n \tif err != nil {\n \t\treturn nil, err"
    },
    {
      "sha": "1b84e00b48ee952870ded7cf5c550e8ebc886d31",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/auth/x509.go",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fx509.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fx509.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fauth%2Fx509.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -8,6 +8,7 @@ package auth\n \n import (\n \t\"context\"\n+\t\"net/http\"\n \n \t\"go.mongodb.org/mongo-driver/x/bsonx/bsoncore\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver\"\n@@ -17,7 +18,10 @@ import (\n // MongoDBX509 is the mechanism name for MongoDBX509.\n const MongoDBX509 = \"MONGODB-X509\"\n \n-func newMongoDBX509Authenticator(cred *Cred) (Authenticator, error) {\n+func newMongoDBX509Authenticator(cred *Cred, _ *http.Client) (Authenticator, error) {\n+\t// TODO(GODRIVER-3309): Validate that cred.Source is either empty or\n+\t// \"$external\" to make validation uniform with other auth mechanisms that\n+\t// require Source to be \"$external\" (e.g. MONGODB-AWS, MONGODB-OIDC, etc).\n \treturn &MongoDBX509Authenticator{User: cred.Username}, nil\n }\n \n@@ -65,7 +69,7 @@ func (a *MongoDBX509Authenticator) Auth(ctx context.Context, cfg *Config) error\n \trequestDoc := createFirstX509Message()\n \tauthCmd := operation.\n \t\tNewCommand(requestDoc).\n-\t\tDatabase(\"$external\").\n+\t\tDatabase(sourceExternal).\n \t\tDeployment(driver.SingleConnectionDeployment{cfg.Connection}).\n \t\tClusterClock(cfg.ClusterClock).\n \t\tServerAPI(cfg.ServerAPI)\n@@ -76,3 +80,8 @@ func (a *MongoDBX509Authenticator) Auth(ctx context.Context, cfg *Config) error\n \n \treturn nil\n }\n+\n+// Reauth reauthenticates the connection.\n+func (a *MongoDBX509Authenticator) Reauth(_ context.Context, _ *driver.AuthConfig) error {\n+\treturn newAuthError(\"X509 does not support reauthentication\", nil)\n+}"
    },
    {
      "sha": "2aa0aca69475dcb05780cfef33d1160fe0f4c3e0",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/batch_cursor.go",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fbatch_cursor.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fbatch_cursor.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fbatch_cursor.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -108,12 +108,12 @@ func NewCursorResponse(info ResponseInfo) (CursorResponse, error) {\n \t\t\tif !ok {\n \t\t\t\treturn CursorResponse{}, fmt.Errorf(\"ns should be a string but is a BSON %s\", elem.Value().Type)\n \t\t\t}\n-\t\t\tindex := strings.Index(ns, \".\")\n-\t\t\tif index == -1 {\n+\t\t\tdatabase, collection, ok := strings.Cut(ns, \".\")\n+\t\t\tif !ok {\n \t\t\t\treturn CursorResponse{}, errors.New(\"ns field must contain a valid namespace, but is missing '.'\")\n \t\t\t}\n-\t\t\tcurresp.Database = ns[:index]\n-\t\t\tcurresp.Collection = ns[index+1:]\n+\t\t\tcurresp.Database = database\n+\t\t\tcurresp.Collection = collection\n \t\tcase \"id\":\n \t\t\tcurresp.ID, ok = elem.Value().Int64OK()\n \t\t\tif !ok {\n@@ -314,7 +314,7 @@ func (bc *BatchCursor) KillCursor(ctx context.Context) error {\n \t}\n \n \treturn Operation{\n-\t\tCommandFn: func(dst []byte, desc description.SelectedServer) ([]byte, error) {\n+\t\tCommandFn: func(dst []byte, _ description.SelectedServer) ([]byte, error) {\n \t\t\tdst = bsoncore.AppendStringElement(dst, \"killCursors\", bc.collection)\n \t\t\tdst = bsoncore.BuildArrayElement(dst, \"cursors\", bsoncore.Value{Type: bsontype.Int64, Data: bsoncore.AppendInt64(nil, bc.id)})\n \t\t\treturn dst, nil\n@@ -369,7 +369,7 @@ func (bc *BatchCursor) getMore(ctx context.Context) {\n \t}\n \n \tbc.err = Operation{\n-\t\tCommandFn: func(dst []byte, desc description.SelectedServer) ([]byte, error) {\n+\t\tCommandFn: func(dst []byte, _ description.SelectedServer) ([]byte, error) {\n \t\t\tdst = bsoncore.AppendInt64Element(dst, \"getMore\", bc.id)\n \t\t\tdst = bsoncore.AppendStringElement(dst, \"collection\", bc.collection)\n \t\t\tif numToReturn > 0 {"
    },
    {
      "sha": "fd69eb4904efc2fae4294bb2889521f5780405d0",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/connstring/connstring.go",
      "status": "modified",
      "additions": 23,
      "deletions": 7,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fconnstring%2Fconnstring.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fconnstring%2Fconnstring.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fconnstring%2Fconnstring.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,6 +24,7 @@ import (\n \n \t\"go.mongodb.org/mongo-driver/internal/randutil\"\n \t\"go.mongodb.org/mongo-driver/mongo/writeconcern\"\n+\t\"go.mongodb.org/mongo-driver/x/mongo/driver/auth\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/dns\"\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage\"\n )\n@@ -258,6 +259,16 @@ func (u *ConnString) Validate() error {\n \t\t}\n \t}\n \n+\t// Check for OIDC auth mechanism properties that cannot be set in the ConnString.\n+\tif u.AuthMechanism == auth.MongoDBOIDC {\n+\t\tif _, ok := u.AuthMechanismProperties[auth.AllowedHostsProp]; ok {\n+\t\t\treturn fmt.Errorf(\n+\t\t\t\t\"ALLOWED_HOSTS cannot be specified in the URI connection string for the %q auth mechanism, it must be specified through the ClientOptions directly\",\n+\t\t\t\tauth.MongoDBOIDC,\n+\t\t\t)\n+\t\t}\n+\t}\n+\n \treturn nil\n }\n \n@@ -285,7 +296,7 @@ func (u *ConnString) setDefaultAuthParams(dbName string) error {\n \t\t\tu.AuthMechanismProperties[\"SERVICE_NAME\"] = \"mongodb\"\n \t\t}\n \t\tfallthrough\n-\tcase \"mongodb-aws\", \"mongodb-x509\":\n+\tcase \"mongodb-aws\", \"mongodb-x509\", \"mongodb-oidc\":\n \t\tif u.AuthSource == \"\" {\n \t\t\tu.AuthSource = \"$external\"\n \t\t} else if u.AuthSource != \"$external\" {\n@@ -781,6 +792,10 @@ func (u *ConnString) validateAuth() error {\n \t\tif u.AuthMechanismProperties != nil {\n \t\t\treturn fmt.Errorf(\"SCRAM-SHA-256 cannot have mechanism properties\")\n \t\t}\n+\tcase \"mongodb-oidc\":\n+\t\tif u.Password != \"\" {\n+\t\t\treturn fmt.Errorf(\"password cannot be specified for MONGODB-OIDC\")\n+\t\t}\n \tcase \"\":\n \t\tif u.UsernameSet && u.Username == \"\" {\n \t\t\treturn fmt.Errorf(\"username required if URI contains user info\")\n@@ -887,15 +902,16 @@ func (p *parser) parse(original string) (*ConnString, error) {\n \turi := original\n \n \tvar err error\n-\tif strings.HasPrefix(uri, SchemeMongoDBSRV+\"://\") {\n+\tswitch {\n+\tcase strings.HasPrefix(uri, SchemeMongoDBSRV+\"://\"):\n \t\tconnStr.Scheme = SchemeMongoDBSRV\n \t\t// remove the scheme\n \t\turi = uri[len(SchemeMongoDBSRV)+3:]\n-\t} else if strings.HasPrefix(uri, SchemeMongoDB+\"://\") {\n+\tcase strings.HasPrefix(uri, SchemeMongoDB+\"://\"):\n \t\tconnStr.Scheme = SchemeMongoDB\n \t\t// remove the scheme\n \t\turi = uri[len(SchemeMongoDB)+3:]\n-\t} else {\n+\tdefault:\n \t\treturn nil, errors.New(`scheme must be \"mongodb\" or \"mongodb+srv\"`)\n \t}\n \n@@ -906,9 +922,9 @@ func (p *parser) parse(original string) (*ConnString, error) {\n \t\tusername := userInfo\n \t\tvar password string\n \n-\t\tif idx := strings.Index(userInfo, \":\"); idx != -1 {\n-\t\t\tusername = userInfo[:idx]\n-\t\t\tpassword = userInfo[idx+1:]\n+\t\tif u, p, ok := strings.Cut(userInfo, \":\"); ok {\n+\t\t\tusername = u\n+\t\t\tpassword = p\n \t\t\tconnStr.PasswordSet = true\n \t\t}\n "
    },
    {
      "sha": "363f4d6be3e867b386a83efa79b0ab852dca8d8f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/driver.go",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fdriver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fdriver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fdriver.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,6 +24,63 @@ import (\n \t\"go.mongodb.org/mongo-driver/x/mongo/driver/session\"\n )\n \n+// AuthConfig holds the information necessary to perform an authentication attempt.\n+// this was moved from the auth package to avoid a circular dependency. The auth package\n+// reexports this under the old name to avoid breaking the public api.\n+type AuthConfig struct {\n+\tDescription   description.Server\n+\tConnection    Connection\n+\tClusterClock  *session.ClusterClock\n+\tHandshakeInfo HandshakeInformation\n+\tServerAPI     *ServerAPIOptions\n+}\n+\n+// OIDCCallback is the type for both Human and Machine Callback flows. RefreshToken will always be\n+// nil in the OIDCArgs for the Machine flow.\n+type OIDCCallback func(context.Context, *OIDCArgs) (*OIDCCredential, error)\n+\n+// OIDCArgs contains the arguments for the OIDC callback.\n+type OIDCArgs struct {\n+\tVersion      int\n+\tIDPInfo      *IDPInfo\n+\tRefreshToken *string\n+}\n+\n+// OIDCCredential contains the access token and refresh token.\n+type OIDCCredential struct {\n+\tAccessToken  string\n+\tExpiresAt    *time.Time\n+\tRefreshToken *string\n+}\n+\n+// IDPInfo contains the information needed to perform OIDC authentication with an Identity Provider.\n+type IDPInfo struct {\n+\tIssuer        string   `bson:\"issuer\"`\n+\tClientID      string   `bson:\"clientId\"`\n+\tRequestScopes []string `bson:\"requestScopes\"`\n+}\n+\n+// Authenticator handles authenticating a connection. The implementers of this interface\n+// are all in the auth package. Most authentication mechanisms do not allow for Reauth,\n+// but this is included in the interface so that whenever a new mechanism is added, it\n+// must be explicitly considered.\n+type Authenticator interface {\n+\t// Auth authenticates the connection.\n+\tAuth(context.Context, *AuthConfig) error\n+\tReauth(context.Context, *AuthConfig) error\n+}\n+\n+// Cred is a user's credential.\n+type Cred struct {\n+\tSource              string\n+\tUsername            string\n+\tPassword            string\n+\tPasswordSet         bool\n+\tProps               map[string]string\n+\tOIDCMachineCallback OIDCCallback\n+\tOIDCHumanCallback   OIDCCallback\n+}\n+\n // Deployment is implemented by types that can select a server from a deployment.\n type Deployment interface {\n \tSelectServer(context.Context, description.ServerSelector) (Server, error)\n@@ -79,6 +136,8 @@ type Connection interface {\n \tDriverConnectionID() uint64 // TODO(GODRIVER-2824): change type to int64.\n \tAddress() address.Address\n \tStale() bool\n+\tOIDCTokenGenID() uint64\n+\tSetOIDCTokenGenID(uint64)\n }\n \n // RTTMonitor represents a round-trip-time monitor."
    },
    {
      "sha": "59c3992e9aa0f17566616992575ce35f0477d00a",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/errors.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ferrors.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ferrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ferrors.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -140,7 +140,7 @@ func (wce WriteCommandError) Retryable(wireVersion *description.VersionRange) bo\n \tif wce.WriteConcernError == nil {\n \t\treturn false\n \t}\n-\treturn (*wce.WriteConcernError).Retryable()\n+\treturn wce.WriteConcernError.Retryable()\n }\n \n // HasErrorLabel returns true if the error contains the specified label."
    },
    {
      "sha": "c5044f8f5fd5b2bd1b3afe4e00e0d2f45dd4ce7b",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/mongocrypt/mongocrypt.go",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Fmongocrypt.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Fmongocrypt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Fmongocrypt.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -278,7 +278,12 @@ func (m *MongoCrypt) createExplicitEncryptionContext(opts *options.ExplicitEncry\n \t\tif opts.RangeOptions.Precision != nil {\n \t\t\tmongocryptDoc = bsoncore.AppendInt32Element(mongocryptDoc, \"precision\", *opts.RangeOptions.Precision)\n \t\t}\n-\t\tmongocryptDoc = bsoncore.AppendInt64Element(mongocryptDoc, \"sparsity\", opts.RangeOptions.Sparsity)\n+\t\tif opts.RangeOptions.Sparsity != nil {\n+\t\t\tmongocryptDoc = bsoncore.AppendInt64Element(mongocryptDoc, \"sparsity\", *opts.RangeOptions.Sparsity)\n+\t\t}\n+\t\tif opts.RangeOptions.TrimFactor != nil {\n+\t\t\tmongocryptDoc = bsoncore.AppendInt32Element(mongocryptDoc, \"trimFactor\", *opts.RangeOptions.TrimFactor)\n+\t\t}\n \n \t\tmongocryptDoc, err := bsoncore.AppendDocumentEnd(mongocryptDoc, idx)\n \t\tif err != nil {"
    },
    {
      "sha": "81805e7147ba3a67776c28d4f3c222037be8587f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/mongocrypt/options/mongocrypt_context_options.go",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Foptions%2Fmongocrypt_context_options.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Foptions%2Fmongocrypt_context_options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fmongocrypt%2Foptions%2Fmongocrypt_context_options.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -61,10 +61,11 @@ type ExplicitEncryptionOptions struct {\n \n // ExplicitRangeOptions specifies options for the range index.\n type ExplicitRangeOptions struct {\n-\tMin       *bsoncore.Value\n-\tMax       *bsoncore.Value\n-\tSparsity  int64\n-\tPrecision *int32\n+\tMin        *bsoncore.Value\n+\tMax        *bsoncore.Value\n+\tSparsity   *int64\n+\tTrimFactor *int32\n+\tPrecision  *int32\n }\n \n // ExplicitEncryption creates a new ExplicitEncryptionOptions instance."
    },
    {
      "sha": "ec6f69eca01a120133ad08942c3440c43ed29a29",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation.go",
      "status": "modified",
      "additions": 28,
      "deletions": 9,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -315,6 +315,10 @@ type Operation struct {\n \t// [Operation.MaxTime].\n \tOmitCSOTMaxTimeMS bool\n \n+\t// Authenticator is the authenticator to use for this operation when a reauthentication is\n+\t// required.\n+\tAuthenticator Authenticator\n+\n \t// omitReadPreference is a boolean that indicates whether to omit the\n \t// read preference from the command. This omition includes the case\n \t// where a default read preference is used when the operation\n@@ -573,8 +577,7 @@ func (op Operation) Execute(ctx context.Context) error {\n \n \t\t// Set the previous indefinite error to be returned in any case where a retryable write error does not have a\n \t\t// NoWritesPerfomed label (the definite case).\n-\t\tswitch err := err.(type) {\n-\t\tcase labeledError:\n+\t\tif err, ok := err.(labeledError); ok {\n \t\t\t// If the \"prevIndefiniteErr\" is nil, then the current error is the first error encountered\n \t\t\t// during the retry attempt cycle. We must persist the first error in the case where all\n \t\t\t// following errors are labeled \"NoWritesPerformed\", which would otherwise raise nil as the\n@@ -912,6 +915,28 @@ func (op Operation) Execute(ctx context.Context) error {\n \t\t\toperationErr.Labels = tt.Labels\n \t\t\toperationErr.Raw = tt.Raw\n \t\tcase Error:\n+\t\t\t// 391 is the reauthentication required error code, so we will attempt a reauth and\n+\t\t\t// retry the operation, if it is successful.\n+\t\t\tif tt.Code == 391 {\n+\t\t\t\tif op.Authenticator != nil {\n+\t\t\t\t\tcfg := AuthConfig{\n+\t\t\t\t\t\tDescription:  conn.Description(),\n+\t\t\t\t\t\tConnection:   conn,\n+\t\t\t\t\t\tClusterClock: op.Clock,\n+\t\t\t\t\t\tServerAPI:    op.ServerAPI,\n+\t\t\t\t\t}\n+\t\t\t\t\tif err := op.Authenticator.Reauth(ctx, &cfg); err != nil {\n+\t\t\t\t\t\treturn fmt.Errorf(\"error reauthenticating: %w\", err)\n+\t\t\t\t\t}\n+\t\t\t\t\tif op.Client != nil && op.Client.Committing {\n+\t\t\t\t\t\t// Apply majority write concern for retries\n+\t\t\t\t\t\top.Client.UpdateCommitTransactionWriteConcern()\n+\t\t\t\t\t\top.WriteConcern = op.Client.CurrentWc\n+\t\t\t\t\t}\n+\t\t\t\t\tresetForRetry(tt)\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tif tt.HasErrorLabel(TransientTransactionError) || tt.HasErrorLabel(UnknownTransactionCommitResult) {\n \t\t\t\tif err := op.Client.ClearPinnedResources(); err != nil {\n \t\t\t\t\treturn err\n@@ -1173,18 +1198,12 @@ func (Operation) decompressWireMessage(wm []byte) (wiremessage.OpCode, []byte, e\n \tif !ok {\n \t\treturn 0, nil, errors.New(\"malformed OP_COMPRESSED: missing compressor ID\")\n \t}\n-\tcompressedSize := len(wm) - 9 // original opcode (4) + uncompressed size (4) + compressor ID (1)\n-\t// return the original wiremessage\n-\tmsg, _, ok := wiremessage.ReadCompressedCompressedMessage(rem, int32(compressedSize))\n-\tif !ok {\n-\t\treturn 0, nil, errors.New(\"malformed OP_COMPRESSED: insufficient bytes for compressed wiremessage\")\n-\t}\n \n \topts := CompressionOpts{\n \t\tCompressor:       compressorID,\n \t\tUncompressedSize: uncompressedSize,\n \t}\n-\tuncompressed, err := DecompressPayload(msg, opts)\n+\tuncompressed, err := DecompressPayload(rem, opts)\n \tif err != nil {\n \t\treturn 0, nil, err\n \t}"
    },
    {
      "sha": "aeee533533b74778d3ee2d80b81f813aa7818397",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/abort_transaction.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fabort_transaction.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fabort_transaction.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fabort_transaction.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -21,6 +21,7 @@ import (\n \n // AbortTransaction performs an abortTransaction operation.\n type AbortTransaction struct {\n+\tauthenticator driver.Authenticator\n \trecoveryToken bsoncore.Document\n \tsession       *session.Client\n \tclock         *session.ClusterClock\n@@ -66,6 +67,7 @@ func (at *AbortTransaction) Execute(ctx context.Context) error {\n \t\tWriteConcern:      at.writeConcern,\n \t\tServerAPI:         at.serverAPI,\n \t\tName:              driverutil.AbortTransactionOp,\n+\t\tAuthenticator:     at.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -199,3 +201,13 @@ func (at *AbortTransaction) ServerAPI(serverAPI *driver.ServerAPIOptions) *Abort\n \tat.serverAPI = serverAPI\n \treturn at\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (at *AbortTransaction) Authenticator(authenticator driver.Authenticator) *AbortTransaction {\n+\tif at == nil {\n+\t\tat = new(AbortTransaction)\n+\t}\n+\n+\tat.authenticator = authenticator\n+\treturn at\n+}"
    },
    {
      "sha": "df6b8fa9dd7d1dacf34b368cad2f16cb93b944e2",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/aggregate.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Faggregate.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Faggregate.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Faggregate.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,6 +25,7 @@ import (\n \n // Aggregate represents an aggregate operation.\n type Aggregate struct {\n+\tauthenticator            driver.Authenticator\n \tallowDiskUse             *bool\n \tbatchSize                *int32\n \tbypassDocumentValidation *bool\n@@ -115,6 +116,7 @@ func (a *Aggregate) Execute(ctx context.Context) error {\n \t\tTimeout:                        a.timeout,\n \t\tName:                           driverutil.AggregateOp,\n \t\tOmitCSOTMaxTimeMS:              a.omitCSOTMaxTimeMS,\n+\t\tAuthenticator:                  a.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -433,3 +435,13 @@ func (a *Aggregate) OmitCSOTMaxTimeMS(omit bool) *Aggregate {\n \ta.omitCSOTMaxTimeMS = omit\n \treturn a\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (a *Aggregate) Authenticator(authenticator driver.Authenticator) *Aggregate {\n+\tif a == nil {\n+\t\ta = new(Aggregate)\n+\t}\n+\n+\ta.authenticator = authenticator\n+\treturn a\n+}"
    },
    {
      "sha": "64c98ba19a79da20a2fc62a61c29e93c68f616a7",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/command.go",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommand.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommand.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommand.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,6 +22,7 @@ import (\n \n // Command is used to run a generic operation.\n type Command struct {\n+\tauthenticator  driver.Authenticator\n \tcommand        bsoncore.Document\n \tdatabase       string\n \tdeployment     driver.Deployment\n@@ -78,7 +79,7 @@ func (c *Command) Execute(ctx context.Context) error {\n \t}\n \n \treturn driver.Operation{\n-\t\tCommandFn: func(dst []byte, desc description.SelectedServer) ([]byte, error) {\n+\t\tCommandFn: func(dst []byte, _ description.SelectedServer) ([]byte, error) {\n \t\t\treturn append(dst, c.command[4:len(c.command)-1]...), nil\n \t\t},\n \t\tProcessResponseFn: func(info driver.ResponseInfo) error {\n@@ -107,6 +108,7 @@ func (c *Command) Execute(ctx context.Context) error {\n \t\tServerAPI:      c.serverAPI,\n \t\tTimeout:        c.timeout,\n \t\tLogger:         c.logger,\n+\t\tAuthenticator:  c.authenticator,\n \t}.Execute(ctx)\n }\n \n@@ -219,3 +221,13 @@ func (c *Command) Logger(logger *logger.Logger) *Command {\n \tc.logger = logger\n \treturn c\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (c *Command) Authenticator(authenticator driver.Authenticator) *Command {\n+\tif c == nil {\n+\t\tc = new(Command)\n+\t}\n+\n+\tc.authenticator = authenticator\n+\treturn c\n+}"
    },
    {
      "sha": "6b402bdf638e319dae46536bc8f7ef6226808ab2",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/commit_transaction.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommit_transaction.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommit_transaction.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcommit_transaction.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,6 +22,7 @@ import (\n \n // CommitTransaction attempts to commit a transaction.\n type CommitTransaction struct {\n+\tauthenticator driver.Authenticator\n \tmaxTime       *time.Duration\n \trecoveryToken bsoncore.Document\n \tsession       *session.Client\n@@ -68,6 +69,7 @@ func (ct *CommitTransaction) Execute(ctx context.Context) error {\n \t\tWriteConcern:      ct.writeConcern,\n \t\tServerAPI:         ct.serverAPI,\n \t\tName:              driverutil.CommitTransactionOp,\n+\t\tAuthenticator:     ct.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -201,3 +203,13 @@ func (ct *CommitTransaction) ServerAPI(serverAPI *driver.ServerAPIOptions) *Comm\n \tct.serverAPI = serverAPI\n \treturn ct\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (ct *CommitTransaction) Authenticator(authenticator driver.Authenticator) *CommitTransaction {\n+\tif ct == nil {\n+\t\tct = new(CommitTransaction)\n+\t}\n+\n+\tct.authenticator = authenticator\n+\treturn ct\n+}"
    },
    {
      "sha": "eaafc9a24444c85becdcf83a1b30024081b0f24f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/count.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcount.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcount.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcount.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,6 +25,7 @@ import (\n \n // Count represents a count operation.\n type Count struct {\n+\tauthenticator  driver.Authenticator\n \tmaxTime        *time.Duration\n \tquery          bsoncore.Document\n \tsession        *session.Client\n@@ -128,6 +129,7 @@ func (c *Count) Execute(ctx context.Context) error {\n \t\tServerAPI:         c.serverAPI,\n \t\tTimeout:           c.timeout,\n \t\tName:              driverutil.CountOp,\n+\t\tAuthenticator:     c.authenticator,\n \t}.Execute(ctx)\n \n \t// Swallow error if NamespaceNotFound(26) is returned from aggregate on non-existent namespace\n@@ -311,3 +313,13 @@ func (c *Count) Timeout(timeout *time.Duration) *Count {\n \tc.timeout = timeout\n \treturn c\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (c *Count) Authenticator(authenticator driver.Authenticator) *Count {\n+\tif c == nil {\n+\t\tc = new(Count)\n+\t}\n+\n+\tc.authenticator = authenticator\n+\treturn c\n+}"
    },
    {
      "sha": "4878e2c7771defa30720d38eb48ecf71e3cdd59d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/create.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -20,6 +20,7 @@ import (\n \n // Create represents a create operation.\n type Create struct {\n+\tauthenticator                driver.Authenticator\n \tcapped                       *bool\n \tcollation                    bsoncore.Document\n \tchangeStreamPreAndPostImages bsoncore.Document\n@@ -77,6 +78,7 @@ func (c *Create) Execute(ctx context.Context) error {\n \t\tSelector:          c.selector,\n \t\tWriteConcern:      c.writeConcern,\n \t\tServerAPI:         c.serverAPI,\n+\t\tAuthenticator:     c.authenticator,\n \t}.Execute(ctx)\n }\n \n@@ -399,3 +401,13 @@ func (c *Create) ClusteredIndex(ci bsoncore.Document) *Create {\n \tc.clusteredIndex = ci\n \treturn c\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (c *Create) Authenticator(authenticator driver.Authenticator) *Create {\n+\tif c == nil {\n+\t\tc = new(Create)\n+\t}\n+\n+\tc.authenticator = authenticator\n+\treturn c\n+}"
    },
    {
      "sha": "464c1762de543c4bb60d5539ad77751864615363",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/create_indexes.go",
      "status": "modified",
      "additions": 27,
      "deletions": 15,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_indexes.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_indexes.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_indexes.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,21 +24,22 @@ import (\n \n // CreateIndexes performs a createIndexes operation.\n type CreateIndexes struct {\n-\tcommitQuorum bsoncore.Value\n-\tindexes      bsoncore.Document\n-\tmaxTime      *time.Duration\n-\tsession      *session.Client\n-\tclock        *session.ClusterClock\n-\tcollection   string\n-\tmonitor      *event.CommandMonitor\n-\tcrypt        driver.Crypt\n-\tdatabase     string\n-\tdeployment   driver.Deployment\n-\tselector     description.ServerSelector\n-\twriteConcern *writeconcern.WriteConcern\n-\tresult       CreateIndexesResult\n-\tserverAPI    *driver.ServerAPIOptions\n-\ttimeout      *time.Duration\n+\tauthenticator driver.Authenticator\n+\tcommitQuorum  bsoncore.Value\n+\tindexes       bsoncore.Document\n+\tmaxTime       *time.Duration\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\twriteConcern  *writeconcern.WriteConcern\n+\tresult        CreateIndexesResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // CreateIndexesResult represents a createIndexes result returned by the server.\n@@ -119,6 +120,7 @@ func (ci *CreateIndexes) Execute(ctx context.Context) error {\n \t\tServerAPI:         ci.serverAPI,\n \t\tTimeout:           ci.timeout,\n \t\tName:              driverutil.CreateIndexesOp,\n+\t\tAuthenticator:     ci.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -278,3 +280,13 @@ func (ci *CreateIndexes) Timeout(timeout *time.Duration) *CreateIndexes {\n \tci.timeout = timeout\n \treturn ci\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (ci *CreateIndexes) Authenticator(authenticator driver.Authenticator) *CreateIndexes {\n+\tif ci == nil {\n+\t\tci = new(CreateIndexes)\n+\t}\n+\n+\tci.authenticator = authenticator\n+\treturn ci\n+}"
    },
    {
      "sha": "8185d27fe1df509ac734d8632d5ddfd2510ce0ae",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/create_search_indexes.go",
      "status": "modified",
      "additions": 24,
      "deletions": 12,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_search_indexes.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_search_indexes.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fcreate_search_indexes.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,18 +22,19 @@ import (\n \n // CreateSearchIndexes performs a createSearchIndexes operation.\n type CreateSearchIndexes struct {\n-\tindexes    bsoncore.Document\n-\tsession    *session.Client\n-\tclock      *session.ClusterClock\n-\tcollection string\n-\tmonitor    *event.CommandMonitor\n-\tcrypt      driver.Crypt\n-\tdatabase   string\n-\tdeployment driver.Deployment\n-\tselector   description.ServerSelector\n-\tresult     CreateSearchIndexesResult\n-\tserverAPI  *driver.ServerAPIOptions\n-\ttimeout    *time.Duration\n+\tauthenticator driver.Authenticator\n+\tindexes       bsoncore.Document\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\tresult        CreateSearchIndexesResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // CreateSearchIndexResult represents a single search index result in CreateSearchIndexesResult.\n@@ -116,6 +117,7 @@ func (csi *CreateSearchIndexes) Execute(ctx context.Context) error {\n \t\tSelector:          csi.selector,\n \t\tServerAPI:         csi.serverAPI,\n \t\tTimeout:           csi.timeout,\n+\t\tAuthenticator:     csi.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -237,3 +239,13 @@ func (csi *CreateSearchIndexes) Timeout(timeout *time.Duration) *CreateSearchInd\n \tcsi.timeout = timeout\n \treturn csi\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (csi *CreateSearchIndexes) Authenticator(authenticator driver.Authenticator) *CreateSearchIndexes {\n+\tif csi == nil {\n+\t\tcsi = new(CreateSearchIndexes)\n+\t}\n+\n+\tcsi.authenticator = authenticator\n+\treturn csi\n+}"
    },
    {
      "sha": "4b520a54804d96a5bfd3d2f181e6fc48b89fe12b",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/delete.go",
      "status": "modified",
      "additions": 32,
      "deletions": 21,
      "changes": 53,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdelete.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdelete.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdelete.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,25 +25,26 @@ import (\n \n // Delete performs a delete operation\n type Delete struct {\n-\tcomment      bsoncore.Value\n-\tdeletes      []bsoncore.Document\n-\tordered      *bool\n-\tsession      *session.Client\n-\tclock        *session.ClusterClock\n-\tcollection   string\n-\tmonitor      *event.CommandMonitor\n-\tcrypt        driver.Crypt\n-\tdatabase     string\n-\tdeployment   driver.Deployment\n-\tselector     description.ServerSelector\n-\twriteConcern *writeconcern.WriteConcern\n-\tretry        *driver.RetryMode\n-\thint         *bool\n-\tresult       DeleteResult\n-\tserverAPI    *driver.ServerAPIOptions\n-\tlet          bsoncore.Document\n-\ttimeout      *time.Duration\n-\tlogger       *logger.Logger\n+\tauthenticator driver.Authenticator\n+\tcomment       bsoncore.Value\n+\tdeletes       []bsoncore.Document\n+\tordered       *bool\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\twriteConcern  *writeconcern.WriteConcern\n+\tretry         *driver.RetryMode\n+\thint          *bool\n+\tresult        DeleteResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\tlet           bsoncore.Document\n+\ttimeout       *time.Duration\n+\tlogger        *logger.Logger\n }\n \n // DeleteResult represents a delete result returned by the server.\n@@ -59,8 +60,7 @@ func buildDeleteResult(response bsoncore.Document) (DeleteResult, error) {\n \t}\n \tdr := DeleteResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"n\":\n+\t\tif element.Key() == \"n\" {\n \t\t\tvar ok bool\n \t\t\tdr.N, ok = element.Value().AsInt64OK()\n \t\t\tif !ok {\n@@ -116,6 +116,7 @@ func (d *Delete) Execute(ctx context.Context) error {\n \t\tTimeout:           d.timeout,\n \t\tLogger:            d.logger,\n \t\tName:              driverutil.DeleteOp,\n+\t\tAuthenticator:     d.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -328,3 +329,13 @@ func (d *Delete) Logger(logger *logger.Logger) *Delete {\n \n \treturn d\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (d *Delete) Authenticator(authenticator driver.Authenticator) *Delete {\n+\tif d == nil {\n+\t\td = new(Delete)\n+\t}\n+\n+\td.authenticator = authenticator\n+\treturn d\n+}"
    },
    {
      "sha": "0c39027e76956c6e918cf1d5773e37285d068496",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/distinct.go",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdistinct.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdistinct.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdistinct.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,6 +24,7 @@ import (\n \n // Distinct performs a distinct operation.\n type Distinct struct {\n+\tauthenticator  driver.Authenticator\n \tcollation      bsoncore.Document\n \tkey            *string\n \tmaxTime        *time.Duration\n@@ -58,8 +59,7 @@ func buildDistinctResult(response bsoncore.Document) (DistinctResult, error) {\n \t}\n \tdr := DistinctResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"values\":\n+\t\tif element.Key() == \"values\" {\n \t\t\tdr.Values = element.Value()\n \t\t}\n \t}\n@@ -107,6 +107,7 @@ func (d *Distinct) Execute(ctx context.Context) error {\n \t\tServerAPI:         d.serverAPI,\n \t\tTimeout:           d.timeout,\n \t\tName:              driverutil.DistinctOp,\n+\t\tAuthenticator:     d.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -311,3 +312,13 @@ func (d *Distinct) Timeout(timeout *time.Duration) *Distinct {\n \td.timeout = timeout\n \treturn d\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (d *Distinct) Authenticator(authenticator driver.Authenticator) *Distinct {\n+\tif d == nil {\n+\t\td = new(Distinct)\n+\t}\n+\n+\td.authenticator = authenticator\n+\treturn d\n+}"
    },
    {
      "sha": "5a32c2f8d4799128ba5d2b7aa76cc164fcad7e82",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/drop_collection.go",
      "status": "modified",
      "additions": 24,
      "deletions": 12,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_collection.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_collection.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_collection.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -23,18 +23,19 @@ import (\n \n // DropCollection performs a drop operation.\n type DropCollection struct {\n-\tsession      *session.Client\n-\tclock        *session.ClusterClock\n-\tcollection   string\n-\tmonitor      *event.CommandMonitor\n-\tcrypt        driver.Crypt\n-\tdatabase     string\n-\tdeployment   driver.Deployment\n-\tselector     description.ServerSelector\n-\twriteConcern *writeconcern.WriteConcern\n-\tresult       DropCollectionResult\n-\tserverAPI    *driver.ServerAPIOptions\n-\ttimeout      *time.Duration\n+\tauthenticator driver.Authenticator\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\twriteConcern  *writeconcern.WriteConcern\n+\tresult        DropCollectionResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // DropCollectionResult represents a dropCollection result returned by the server.\n@@ -104,6 +105,7 @@ func (dc *DropCollection) Execute(ctx context.Context) error {\n \t\tServerAPI:         dc.serverAPI,\n \t\tTimeout:           dc.timeout,\n \t\tName:              driverutil.DropOp,\n+\t\tAuthenticator:     dc.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -222,3 +224,13 @@ func (dc *DropCollection) Timeout(timeout *time.Duration) *DropCollection {\n \tdc.timeout = timeout\n \treturn dc\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (dc *DropCollection) Authenticator(authenticator driver.Authenticator) *DropCollection {\n+\tif dc == nil {\n+\t\tdc = new(DropCollection)\n+\t}\n+\n+\tdc.authenticator = authenticator\n+\treturn dc\n+}"
    },
    {
      "sha": "19956210d1b1ebf2f8a37f1563a7cac55f31661f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/drop_database.go",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_database.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_database.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_database.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -21,15 +21,16 @@ import (\n \n // DropDatabase performs a dropDatabase operation\n type DropDatabase struct {\n-\tsession      *session.Client\n-\tclock        *session.ClusterClock\n-\tmonitor      *event.CommandMonitor\n-\tcrypt        driver.Crypt\n-\tdatabase     string\n-\tdeployment   driver.Deployment\n-\tselector     description.ServerSelector\n-\twriteConcern *writeconcern.WriteConcern\n-\tserverAPI    *driver.ServerAPIOptions\n+\tauthenticator driver.Authenticator\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\twriteConcern  *writeconcern.WriteConcern\n+\tserverAPI     *driver.ServerAPIOptions\n }\n \n // NewDropDatabase constructs and returns a new DropDatabase.\n@@ -55,6 +56,7 @@ func (dd *DropDatabase) Execute(ctx context.Context) error {\n \t\tWriteConcern:   dd.writeConcern,\n \t\tServerAPI:      dd.serverAPI,\n \t\tName:           driverutil.DropDatabaseOp,\n+\t\tAuthenticator:  dd.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -154,3 +156,13 @@ func (dd *DropDatabase) ServerAPI(serverAPI *driver.ServerAPIOptions) *DropDatab\n \tdd.serverAPI = serverAPI\n \treturn dd\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (dd *DropDatabase) Authenticator(authenticator driver.Authenticator) *DropDatabase {\n+\tif dd == nil {\n+\t\tdd = new(DropDatabase)\n+\t}\n+\n+\tdd.authenticator = authenticator\n+\treturn dd\n+}"
    },
    {
      "sha": "a22496b1e889a4717ad14937029b8735415f7e7d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/drop_indexes.go",
      "status": "modified",
      "additions": 40,
      "deletions": 22,
      "changes": 62,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_indexes.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_indexes.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_indexes.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -23,20 +23,21 @@ import (\n \n // DropIndexes performs an dropIndexes operation.\n type DropIndexes struct {\n-\tindex        *string\n-\tmaxTime      *time.Duration\n-\tsession      *session.Client\n-\tclock        *session.ClusterClock\n-\tcollection   string\n-\tmonitor      *event.CommandMonitor\n-\tcrypt        driver.Crypt\n-\tdatabase     string\n-\tdeployment   driver.Deployment\n-\tselector     description.ServerSelector\n-\twriteConcern *writeconcern.WriteConcern\n-\tresult       DropIndexesResult\n-\tserverAPI    *driver.ServerAPIOptions\n-\ttimeout      *time.Duration\n+\tauthenticator driver.Authenticator\n+\tindex         any\n+\tmaxTime       *time.Duration\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\twriteConcern  *writeconcern.WriteConcern\n+\tresult        DropIndexesResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // DropIndexesResult represents a dropIndexes result returned by the server.\n@@ -52,8 +53,7 @@ func buildDropIndexesResult(response bsoncore.Document) (DropIndexesResult, erro\n \t}\n \tdir := DropIndexesResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"nIndexesWas\":\n+\t\tif element.Key() == \"nIndexesWas\" {\n \t\t\tvar ok bool\n \t\t\tdir.NIndexesWas, ok = element.Value().AsInt32OK()\n \t\t\tif !ok {\n@@ -65,9 +65,9 @@ func buildDropIndexesResult(response bsoncore.Document) (DropIndexesResult, erro\n }\n \n // NewDropIndexes constructs and returns a new DropIndexes.\n-func NewDropIndexes(index string) *DropIndexes {\n+func NewDropIndexes(index any) *DropIndexes {\n \treturn &DropIndexes{\n-\t\tindex: &index,\n+\t\tindex: index,\n \t}\n }\n \n@@ -101,25 +101,33 @@ func (di *DropIndexes) Execute(ctx context.Context) error {\n \t\tServerAPI:         di.serverAPI,\n \t\tTimeout:           di.timeout,\n \t\tName:              driverutil.DropIndexesOp,\n+\t\tAuthenticator:     di.authenticator,\n \t}.Execute(ctx)\n \n }\n \n func (di *DropIndexes) command(dst []byte, _ description.SelectedServer) ([]byte, error) {\n \tdst = bsoncore.AppendStringElement(dst, \"dropIndexes\", di.collection)\n-\tif di.index != nil {\n-\t\tdst = bsoncore.AppendStringElement(dst, \"index\", *di.index)\n+\n+\tswitch t := di.index.(type) {\n+\tcase string:\n+\t\tdst = bsoncore.AppendStringElement(dst, \"index\", t)\n+\tcase bsoncore.Document:\n+\t\tif di.index != nil {\n+\t\t\tdst = bsoncore.AppendDocumentElement(dst, \"index\", t)\n+\t\t}\n \t}\n+\n \treturn dst, nil\n }\n \n // Index specifies the name of the index to drop. If '*' is specified, all indexes will be dropped.\n-func (di *DropIndexes) Index(index string) *DropIndexes {\n+func (di *DropIndexes) Index(index any) *DropIndexes {\n \tif di == nil {\n \t\tdi = new(DropIndexes)\n \t}\n \n-\tdi.index = &index\n+\tdi.index = index\n \treturn di\n }\n \n@@ -242,3 +250,13 @@ func (di *DropIndexes) Timeout(timeout *time.Duration) *DropIndexes {\n \tdi.timeout = timeout\n \treturn di\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (di *DropIndexes) Authenticator(authenticator driver.Authenticator) *DropIndexes {\n+\tif di == nil {\n+\t\tdi = new(DropIndexes)\n+\t}\n+\n+\tdi.authenticator = authenticator\n+\treturn di\n+}"
    },
    {
      "sha": "94e4ddfb0de5f889f9d3ba8f490777212b8d6a68",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/drop_search_index.go",
      "status": "modified",
      "additions": 25,
      "deletions": 14,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_search_index.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_search_index.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fdrop_search_index.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -21,18 +21,19 @@ import (\n \n // DropSearchIndex performs an dropSearchIndex operation.\n type DropSearchIndex struct {\n-\tindex      string\n-\tsession    *session.Client\n-\tclock      *session.ClusterClock\n-\tcollection string\n-\tmonitor    *event.CommandMonitor\n-\tcrypt      driver.Crypt\n-\tdatabase   string\n-\tdeployment driver.Deployment\n-\tselector   description.ServerSelector\n-\tresult     DropSearchIndexResult\n-\tserverAPI  *driver.ServerAPIOptions\n-\ttimeout    *time.Duration\n+\tauthenticator driver.Authenticator\n+\tindex         string\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\tresult        DropSearchIndexResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // DropSearchIndexResult represents a dropSearchIndex result returned by the server.\n@@ -47,8 +48,7 @@ func buildDropSearchIndexResult(response bsoncore.Document) (DropSearchIndexResu\n \t}\n \tdsir := DropSearchIndexResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"ok\":\n+\t\tif element.Key() == \"ok\" {\n \t\t\tvar ok bool\n \t\t\tdsir.Ok, ok = element.Value().AsInt32OK()\n \t\t\tif !ok {\n@@ -93,6 +93,7 @@ func (dsi *DropSearchIndex) Execute(ctx context.Context) error {\n \t\tSelector:          dsi.selector,\n \t\tServerAPI:         dsi.serverAPI,\n \t\tTimeout:           dsi.timeout,\n+\t\tAuthenticator:     dsi.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -212,3 +213,13 @@ func (dsi *DropSearchIndex) Timeout(timeout *time.Duration) *DropSearchIndex {\n \tdsi.timeout = timeout\n \treturn dsi\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (dsi *DropSearchIndex) Authenticator(authenticator driver.Authenticator) *DropSearchIndex {\n+\tif dsi == nil {\n+\t\tdsi = new(DropSearchIndex)\n+\t}\n+\n+\tdsi.authenticator = authenticator\n+\treturn dsi\n+}"
    },
    {
      "sha": "8b24b3d8c25e354be16f1d5da1e0c9050b9354e3",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/end_sessions.go",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fend_sessions.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fend_sessions.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fend_sessions.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -20,15 +20,16 @@ import (\n \n // EndSessions performs an endSessions operation.\n type EndSessions struct {\n-\tsessionIDs bsoncore.Document\n-\tsession    *session.Client\n-\tclock      *session.ClusterClock\n-\tmonitor    *event.CommandMonitor\n-\tcrypt      driver.Crypt\n-\tdatabase   string\n-\tdeployment driver.Deployment\n-\tselector   description.ServerSelector\n-\tserverAPI  *driver.ServerAPIOptions\n+\tauthenticator driver.Authenticator\n+\tsessionIDs    bsoncore.Document\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\tserverAPI     *driver.ServerAPIOptions\n }\n \n // NewEndSessions constructs and returns a new EndSessions.\n@@ -61,6 +62,7 @@ func (es *EndSessions) Execute(ctx context.Context) error {\n \t\tSelector:          es.selector,\n \t\tServerAPI:         es.serverAPI,\n \t\tName:              driverutil.EndSessionsOp,\n+\t\tAuthenticator:     es.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -161,3 +163,13 @@ func (es *EndSessions) ServerAPI(serverAPI *driver.ServerAPIOptions) *EndSession\n \tes.serverAPI = serverAPI\n \treturn es\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (es *EndSessions) Authenticator(authenticator driver.Authenticator) *EndSessions {\n+\tif es == nil {\n+\t\tes = new(EndSessions)\n+\t}\n+\n+\tes.authenticator = authenticator\n+\treturn es\n+}"
    },
    {
      "sha": "c71b7d755e8302c161470b808aa019992f4d4976",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/find.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,6 +25,7 @@ import (\n \n // Find performs a find operation.\n type Find struct {\n+\tauthenticator       driver.Authenticator\n \tallowDiskUse        *bool\n \tallowPartialResults *bool\n \tawaitData           *bool\n@@ -112,6 +113,7 @@ func (f *Find) Execute(ctx context.Context) error {\n \t\tLogger:            f.logger,\n \t\tName:              driverutil.FindOp,\n \t\tOmitCSOTMaxTimeMS: f.omitCSOTMaxTimeMS,\n+\t\tAuthenticator:     f.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -575,3 +577,13 @@ func (f *Find) Logger(logger *logger.Logger) *Find {\n \tf.logger = logger\n \treturn f\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (f *Find) Authenticator(authenticator driver.Authenticator) *Find {\n+\tif f == nil {\n+\t\tf = new(Find)\n+\t}\n+\n+\tf.authenticator = authenticator\n+\treturn f\n+}"
    },
    {
      "sha": "ea365ccb237d42faa078fe07af9f73ea14b8f941",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/find_and_modify.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Ffind_and_modify.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,6 +25,7 @@ import (\n \n // FindAndModify performs a findAndModify operation.\n type FindAndModify struct {\n+\tauthenticator            driver.Authenticator\n \tarrayFilters             bsoncore.Array\n \tbypassDocumentValidation *bool\n \tcollation                bsoncore.Document\n@@ -145,6 +146,7 @@ func (fam *FindAndModify) Execute(ctx context.Context) error {\n \t\tServerAPI:      fam.serverAPI,\n \t\tTimeout:        fam.timeout,\n \t\tName:           driverutil.FindAndModifyOp,\n+\t\tAuthenticator:  fam.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -477,3 +479,13 @@ func (fam *FindAndModify) Timeout(timeout *time.Duration) *FindAndModify {\n \tfam.timeout = timeout\n \treturn fam\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (fam *FindAndModify) Authenticator(authenticator driver.Authenticator) *FindAndModify {\n+\tif fam == nil {\n+\t\tfam = new(FindAndModify)\n+\t}\n+\n+\tfam.authenticator = authenticator\n+\treturn fam\n+}"
    },
    {
      "sha": "60c99f063d1491f370fdeb6f95e067cee47cb14f",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/hello.go",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fhello.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fhello.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fhello.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -36,6 +36,7 @@ const driverName = \"mongo-go-driver\"\n \n // Hello is used to run the handshake operation.\n type Hello struct {\n+\tauthenticator      driver.Authenticator\n \tappname            string\n \tcompressors        []string\n \tsaslSupportedMechs string\n@@ -649,3 +650,13 @@ func (h *Hello) GetHandshakeInformation(ctx context.Context, _ address.Address,\n func (h *Hello) FinishHandshake(context.Context, driver.Connection) error {\n \treturn nil\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (h *Hello) Authenticator(authenticator driver.Authenticator) *Hello {\n+\tif h == nil {\n+\t\th = new(Hello)\n+\t}\n+\n+\th.authenticator = authenticator\n+\treturn h\n+}"
    },
    {
      "sha": "a65a4895f0634a1450db4981ce7b38308dcc2199",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/insert.go",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Finsert.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -25,6 +25,7 @@ import (\n \n // Insert performs an insert operation.\n type Insert struct {\n+\tauthenticator            driver.Authenticator\n \tbypassDocumentValidation *bool\n \tcomment                  bsoncore.Value\n \tdocuments                []bsoncore.Document\n@@ -58,8 +59,7 @@ func buildInsertResult(response bsoncore.Document) (InsertResult, error) {\n \t}\n \tir := InsertResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"n\":\n+\t\tif element.Key() == \"n\" {\n \t\t\tvar ok bool\n \t\t\tir.N, ok = element.Value().AsInt64OK()\n \t\t\tif !ok {\n@@ -115,6 +115,7 @@ func (i *Insert) Execute(ctx context.Context) error {\n \t\tTimeout:           i.timeout,\n \t\tLogger:            i.logger,\n \t\tName:              driverutil.InsertOp,\n+\t\tAuthenticator:     i.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -306,3 +307,13 @@ func (i *Insert) Logger(logger *logger.Logger) *Insert {\n \ti.logger = logger\n \treturn i\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (i *Insert) Authenticator(authenticator driver.Authenticator) *Insert {\n+\tif i == nil {\n+\t\ti = new(Insert)\n+\t}\n+\n+\ti.authenticator = authenticator\n+\treturn i\n+}"
    },
    {
      "sha": "3df171e37a2da9be2a3aacac1e0811fcb06e0b9e",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/listDatabases.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2FlistDatabases.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2FlistDatabases.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2FlistDatabases.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -24,6 +24,7 @@ import (\n \n // ListDatabases performs a listDatabases operation.\n type ListDatabases struct {\n+\tauthenticator       driver.Authenticator\n \tfilter              bsoncore.Document\n \tauthorizedDatabases *bool\n \tnameOnly            *bool\n@@ -165,6 +166,7 @@ func (ld *ListDatabases) Execute(ctx context.Context) error {\n \t\tServerAPI:      ld.serverAPI,\n \t\tTimeout:        ld.timeout,\n \t\tName:           driverutil.ListDatabasesOp,\n+\t\tAuthenticator:  ld.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -327,3 +329,13 @@ func (ld *ListDatabases) Timeout(timeout *time.Duration) *ListDatabases {\n \tld.timeout = timeout\n \treturn ld\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (ld *ListDatabases) Authenticator(authenticator driver.Authenticator) *ListDatabases {\n+\tif ld == nil {\n+\t\tld = new(ListDatabases)\n+\t}\n+\n+\tld.authenticator = authenticator\n+\treturn ld\n+}"
    },
    {
      "sha": "1e39f5bfbe401b58cae7d20a4a3d60e71cf239f4",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/list_collections.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_collections.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_collections.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_collections.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,6 +22,7 @@ import (\n \n // ListCollections performs a listCollections operation.\n type ListCollections struct {\n+\tauthenticator         driver.Authenticator\n \tfilter                bsoncore.Document\n \tnameOnly              *bool\n \tauthorizedCollections *bool\n@@ -83,6 +84,7 @@ func (lc *ListCollections) Execute(ctx context.Context) error {\n \t\tServerAPI:         lc.serverAPI,\n \t\tTimeout:           lc.timeout,\n \t\tName:              driverutil.ListCollectionsOp,\n+\t\tAuthenticator:     lc.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -259,3 +261,13 @@ func (lc *ListCollections) Timeout(timeout *time.Duration) *ListCollections {\n \tlc.timeout = timeout\n \treturn lc\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (lc *ListCollections) Authenticator(authenticator driver.Authenticator) *ListCollections {\n+\tif lc == nil {\n+\t\tlc = new(ListCollections)\n+\t}\n+\n+\tlc.authenticator = authenticator\n+\treturn lc\n+}"
    },
    {
      "sha": "433344f307c7a9ff8377ae300fd6f27966ea2dd0",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/list_indexes.go",
      "status": "modified",
      "additions": 25,
      "deletions": 13,
      "changes": 38,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_indexes.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_indexes.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Flist_indexes.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -21,19 +21,20 @@ import (\n \n // ListIndexes performs a listIndexes operation.\n type ListIndexes struct {\n-\tbatchSize  *int32\n-\tmaxTime    *time.Duration\n-\tsession    *session.Client\n-\tclock      *session.ClusterClock\n-\tcollection string\n-\tmonitor    *event.CommandMonitor\n-\tdatabase   string\n-\tdeployment driver.Deployment\n-\tselector   description.ServerSelector\n-\tretry      *driver.RetryMode\n-\tcrypt      driver.Crypt\n-\tserverAPI  *driver.ServerAPIOptions\n-\ttimeout    *time.Duration\n+\tauthenticator driver.Authenticator\n+\tbatchSize     *int32\n+\tmaxTime       *time.Duration\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\tretry         *driver.RetryMode\n+\tcrypt         driver.Crypt\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n \n \tresult driver.CursorResponse\n }\n@@ -85,6 +86,7 @@ func (li *ListIndexes) Execute(ctx context.Context) error {\n \t\tServerAPI:      li.serverAPI,\n \t\tTimeout:        li.timeout,\n \t\tName:           driverutil.ListIndexesOp,\n+\t\tAuthenticator:  li.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -233,3 +235,13 @@ func (li *ListIndexes) Timeout(timeout *time.Duration) *ListIndexes {\n \tli.timeout = timeout\n \treturn li\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (li *ListIndexes) Authenticator(authenticator driver.Authenticator) *ListIndexes {\n+\tif li == nil {\n+\t\tli = new(ListIndexes)\n+\t}\n+\n+\tli.authenticator = authenticator\n+\treturn li\n+}"
    },
    {
      "sha": "1070e7ca703e2ecc55f24586207f89668918a813",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/update.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -26,6 +26,7 @@ import (\n \n // Update performs an update operation.\n type Update struct {\n+\tauthenticator            driver.Authenticator\n \tbypassDocumentValidation *bool\n \tcomment                  bsoncore.Value\n \tordered                  *bool\n@@ -167,6 +168,7 @@ func (u *Update) Execute(ctx context.Context) error {\n \t\tTimeout:           u.timeout,\n \t\tLogger:            u.logger,\n \t\tName:              driverutil.UpdateOp,\n+\t\tAuthenticator:     u.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -414,3 +416,13 @@ func (u *Update) Logger(logger *logger.Logger) *Update {\n \tu.logger = logger\n \treturn u\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (u *Update) Authenticator(authenticator driver.Authenticator) *Update {\n+\tif u == nil {\n+\t\tu = new(Update)\n+\t}\n+\n+\tu.authenticator = authenticator\n+\treturn u\n+}"
    },
    {
      "sha": "c63e048f2103156022b43dd4d849d563f42f296d",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/operation/update_search_index.go",
      "status": "modified",
      "additions": 26,
      "deletions": 15,
      "changes": 41,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate_search_index.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate_search_index.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Foperation%2Fupdate_search_index.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -21,19 +21,20 @@ import (\n \n // UpdateSearchIndex performs a updateSearchIndex operation.\n type UpdateSearchIndex struct {\n-\tindex      string\n-\tdefinition bsoncore.Document\n-\tsession    *session.Client\n-\tclock      *session.ClusterClock\n-\tcollection string\n-\tmonitor    *event.CommandMonitor\n-\tcrypt      driver.Crypt\n-\tdatabase   string\n-\tdeployment driver.Deployment\n-\tselector   description.ServerSelector\n-\tresult     UpdateSearchIndexResult\n-\tserverAPI  *driver.ServerAPIOptions\n-\ttimeout    *time.Duration\n+\tauthenticator driver.Authenticator\n+\tindex         string\n+\tdefinition    bsoncore.Document\n+\tsession       *session.Client\n+\tclock         *session.ClusterClock\n+\tcollection    string\n+\tmonitor       *event.CommandMonitor\n+\tcrypt         driver.Crypt\n+\tdatabase      string\n+\tdeployment    driver.Deployment\n+\tselector      description.ServerSelector\n+\tresult        UpdateSearchIndexResult\n+\tserverAPI     *driver.ServerAPIOptions\n+\ttimeout       *time.Duration\n }\n \n // UpdateSearchIndexResult represents a single index in the updateSearchIndexResult result.\n@@ -48,8 +49,7 @@ func buildUpdateSearchIndexResult(response bsoncore.Document) (UpdateSearchIndex\n \t}\n \tusir := UpdateSearchIndexResult{}\n \tfor _, element := range elements {\n-\t\tswitch element.Key() {\n-\t\tcase \"ok\":\n+\t\tif element.Key() == \"ok\" {\n \t\t\tvar ok bool\n \t\t\tusir.Ok, ok = element.Value().AsInt32OK()\n \t\t\tif !ok {\n@@ -95,6 +95,7 @@ func (usi *UpdateSearchIndex) Execute(ctx context.Context) error {\n \t\tSelector:          usi.selector,\n \t\tServerAPI:         usi.serverAPI,\n \t\tTimeout:           usi.timeout,\n+\t\tAuthenticator:     usi.authenticator,\n \t}.Execute(ctx)\n \n }\n@@ -225,3 +226,13 @@ func (usi *UpdateSearchIndex) Timeout(timeout *time.Duration) *UpdateSearchIndex\n \tusi.timeout = timeout\n \treturn usi\n }\n+\n+// Authenticator sets the authenticator to use for this operation.\n+func (usi *UpdateSearchIndex) Authenticator(authenticator driver.Authenticator) *UpdateSearchIndex {\n+\tif usi == nil {\n+\t\tusi = new(UpdateSearchIndex)\n+\t}\n+\n+\tusi.authenticator = authenticator\n+\treturn usi\n+}"
    },
    {
      "sha": "eff27bfe33d9e47ace33d7a7c3f7bc7762859dc5",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/session/client_session.go",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fsession%2Fclient_session.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fsession%2Fclient_session.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fsession%2Fclient_session.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -90,6 +90,8 @@ type LoadBalancedTransactionConnection interface {\n \tDriverConnectionID() uint64 // TODO(GODRIVER-2824): change type to int64.\n \tAddress() address.Address\n \tStale() bool\n+\tOIDCTokenGenID() uint64\n+\tSetOIDCTokenGenID(uint64)\n \n \t// Functions copied over from driver.PinnedConnection that are not part of Connection or Expirable.\n \tPinToCursor() error\n@@ -158,13 +160,14 @@ func MaxClusterTime(ct1, ct2 bson.Raw) bson.Raw {\n \tepoch1, ord1 := getClusterTime(ct1)\n \tepoch2, ord2 := getClusterTime(ct2)\n \n-\tif epoch1 > epoch2 {\n+\tswitch {\n+\tcase epoch1 > epoch2:\n \t\treturn ct1\n-\t} else if epoch1 < epoch2 {\n+\tcase epoch1 < epoch2:\n \t\treturn ct2\n-\t} else if ord1 > ord2 {\n+\tcase ord1 > ord2:\n \t\treturn ct1\n-\t} else if ord1 < ord2 {\n+\tcase ord1 < ord2:\n \t\treturn ct2\n \t}\n \n@@ -476,11 +479,12 @@ func (c *Client) UpdateCommitTransactionWriteConcern() {\n // CheckAbortTransaction checks to see if allowed to abort transaction and returns\n // an error if not allowed.\n func (c *Client) CheckAbortTransaction() error {\n-\tif c.TransactionState == None {\n+\tswitch {\n+\tcase c.TransactionState == None:\n \t\treturn ErrNoTransactStarted\n-\t} else if c.TransactionState == Committed {\n+\tcase c.TransactionState == Committed:\n \t\treturn ErrAbortAfterCommit\n-\t} else if c.TransactionState == Aborted {\n+\tcase c.TransactionState == Aborted:\n \t\treturn ErrAbortTwice\n \t}\n \treturn nil"
    },
    {
      "sha": "e00363a5485bf7baa66084f47453542672226621",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/connection.go",
      "status": "modified",
      "additions": 164,
      "deletions": 80,
      "changes": 244,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fconnection.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fconnection.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fconnection.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -9,10 +9,12 @@ package topology\n import (\n \t\"context\"\n \t\"crypto/tls\"\n+\t\"encoding/binary\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"net\"\n+\t\"os\"\n \t\"strings\"\n \t\"sync\"\n \t\"sync/atomic\"\n@@ -54,7 +56,7 @@ type connection struct {\n \tnc                   net.Conn // When nil, the connection is closed.\n \taddr                 address.Address\n \tidleTimeout          time.Duration\n-\tidleDeadline         atomic.Value // Stores a time.Time\n+\tidleStart            atomic.Value // Stores a time.Time\n \treadTimeout          time.Duration\n \twriteTimeout         time.Duration\n \tdesc                 description.Server\n@@ -79,9 +81,13 @@ type connection struct {\n \tdriverConnectionID uint64\n \tgeneration         uint64\n \n-\t// awaitingResponse indicates that the server response was not completely\n+\t// awaitRemainingBytes indicates the size of server response that was not completely\n \t// read before returning the connection to the pool.\n-\tawaitingResponse bool\n+\tawaitRemainingBytes *int32\n+\n+\t// oidcTokenGenID is the monotonic generation ID for OIDC tokens, used to invalidate\n+\t// accessTokens in the OIDC authenticator cache.\n+\toidcTokenGenID uint64\n }\n \n // newConnection handles the creation of a connection. It does not connect the connection.\n@@ -111,12 +117,6 @@ func newConnection(addr address.Address, opts ...ConnectionOption) *connection {\n \treturn c\n }\n \n-// DriverConnectionID returns the driver connection ID.\n-// TODO(GODRIVER-2824): change return type to int64.\n-func (c *connection) DriverConnectionID() uint64 {\n-\treturn c.driverConnectionID\n-}\n-\n // setGenerationNumber sets the connection's generation number if a callback has been provided to do so in connection\n // configuration.\n func (c *connection) setGenerationNumber() {\n@@ -138,6 +138,39 @@ func (c *connection) hasGenerationNumber() bool {\n \treturn c.desc.LoadBalanced()\n }\n \n+func configureTLS(ctx context.Context,\n+\ttlsConnSource tlsConnectionSource,\n+\tnc net.Conn,\n+\taddr address.Address,\n+\tconfig *tls.Config,\n+\tocspOpts *ocsp.VerifyOptions,\n+) (net.Conn, error) {\n+\t// Ensure config.ServerName is always set for SNI.\n+\tif config.ServerName == \"\" {\n+\t\thostname := addr.String()\n+\t\tcolonPos := strings.LastIndex(hostname, \":\")\n+\t\tif colonPos == -1 {\n+\t\t\tcolonPos = len(hostname)\n+\t\t}\n+\n+\t\thostname = hostname[:colonPos]\n+\t\tconfig.ServerName = hostname\n+\t}\n+\n+\tclient := tlsConnSource.Client(nc, config)\n+\tif err := clientHandshake(ctx, client); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// Only do OCSP verification if TLS verification is requested.\n+\tif !config.InsecureSkipVerify {\n+\t\tif ocspErr := ocsp.Verify(ctx, client.ConnectionState(), ocspOpts); ocspErr != nil {\n+\t\t\treturn nil, ocspErr\n+\t\t}\n+\t}\n+\treturn client, nil\n+}\n+\n // connect handles the I/O for a connection. It will dial, configure TLS, and perform initialization\n // handshakes. All errors returned by connect are considered \"before the handshake completes\" and\n // must be handled by calling the appropriate SDAM handshake error handler.\n@@ -313,6 +346,10 @@ func (c *connection) closeConnectContext() {\n \t}\n }\n \n+func (c *connection) cancellationListenerCallback() {\n+\t_ = c.close()\n+}\n+\n func transformNetworkError(ctx context.Context, originalError error, contextDeadlineUsed bool) error {\n \tif originalError == nil {\n \t\treturn nil\n@@ -335,10 +372,6 @@ func transformNetworkError(ctx context.Context, originalError error, contextDead\n \treturn originalError\n }\n \n-func (c *connection) cancellationListenerCallback() {\n-\t_ = c.close()\n-}\n-\n func (c *connection) writeWireMessage(ctx context.Context, wm []byte) error {\n \tvar err error\n \tif atomic.LoadInt64(&c.state) != connConnected {\n@@ -419,15 +452,10 @@ func (c *connection) readWireMessage(ctx context.Context) ([]byte, error) {\n \n \tdst, errMsg, err := c.read(ctx)\n \tif err != nil {\n-\t\tif nerr := net.Error(nil); errors.As(err, &nerr) && nerr.Timeout() && csot.IsTimeoutContext(ctx) {\n-\t\t\t// If the error was a timeout error and CSOT is enabled, instead of\n-\t\t\t// closing the connection mark it as awaiting response so the pool\n-\t\t\t// can read the response before making it available to other\n-\t\t\t// operations.\n-\t\t\tc.awaitingResponse = true\n-\t\t} else {\n-\t\t\t// Otherwise, use the pre-CSOT behavior and close the connection\n-\t\t\t// because we don't know if there are other bytes left to read.\n+\t\tif c.awaitRemainingBytes == nil {\n+\t\t\t// If the connection was not marked as awaiting response, use the\n+\t\t\t// pre-CSOT behavior and close the connection because we don't know\n+\t\t\t// if there are other bytes left to read.\n \t\t\tc.close()\n \t\t}\n \t\tmessage := errMsg\n@@ -444,6 +472,26 @@ func (c *connection) readWireMessage(ctx context.Context) ([]byte, error) {\n \treturn dst, nil\n }\n \n+func (c *connection) parseWmSizeBytes(wmSizeBytes [4]byte) (int32, error) {\n+\t// read the length as an int32\n+\tsize := int32(binary.LittleEndian.Uint32(wmSizeBytes[:]))\n+\n+\tif size < 4 {\n+\t\treturn 0, fmt.Errorf(\"malformed message length: %d\", size)\n+\t}\n+\t// In the case of a hello response where MaxMessageSize has not yet been set, use the hard-coded\n+\t// defaultMaxMessageSize instead.\n+\tmaxMessageSize := c.desc.MaxMessageSize\n+\tif maxMessageSize == 0 {\n+\t\tmaxMessageSize = defaultMaxMessageSize\n+\t}\n+\tif uint32(size) > maxMessageSize {\n+\t\treturn 0, errResponseTooLarge\n+\t}\n+\n+\treturn size, nil\n+}\n+\n func (c *connection) read(ctx context.Context) (bytesRead []byte, errMsg string, err error) {\n \tgo c.cancellationListener.Listen(ctx, c.cancellationListenerCallback)\n \tdefer func() {\n@@ -457,36 +505,43 @@ func (c *connection) read(ctx context.Context) (bytesRead []byte, errMsg string,\n \t\t}\n \t}()\n \n+\tisCSOTTimeout := func(err error) bool {\n+\t\t// If the error was a timeout error and CSOT is enabled, instead of\n+\t\t// closing the connection mark it as awaiting response so the pool\n+\t\t// can read the response before making it available to other\n+\t\t// operations.\n+\t\tnerr := net.Error(nil)\n+\t\treturn errors.As(err, &nerr) && nerr.Timeout() && csot.IsTimeoutContext(ctx)\n+\t}\n+\n \t// We use an array here because it only costs 4 bytes on the stack and means we'll only need to\n \t// reslice dst once instead of twice.\n \tvar sizeBuf [4]byte\n \n \t// We do a ReadFull into an array here instead of doing an opportunistic ReadAtLeast into dst\n \t// because there might be more than one wire message waiting to be read, for example when\n \t// reading messages from an exhaust cursor.\n-\t_, err = io.ReadFull(c.nc, sizeBuf[:])\n+\tn, err := io.ReadFull(c.nc, sizeBuf[:])\n \tif err != nil {\n+\t\tif l := int32(n); l == 0 && isCSOTTimeout(err) {\n+\t\t\tc.awaitRemainingBytes = &l\n+\t\t}\n \t\treturn nil, \"incomplete read of message header\", err\n \t}\n-\n-\t// read the length as an int32\n-\tsize := (int32(sizeBuf[0])) | (int32(sizeBuf[1]) << 8) | (int32(sizeBuf[2]) << 16) | (int32(sizeBuf[3]) << 24)\n-\n-\t// In the case of a hello response where MaxMessageSize has not yet been set, use the hard-coded\n-\t// defaultMaxMessageSize instead.\n-\tmaxMessageSize := c.desc.MaxMessageSize\n-\tif maxMessageSize == 0 {\n-\t\tmaxMessageSize = defaultMaxMessageSize\n-\t}\n-\tif uint32(size) > maxMessageSize {\n-\t\treturn nil, errResponseTooLarge.Error(), errResponseTooLarge\n+\tsize, err := c.parseWmSizeBytes(sizeBuf)\n+\tif err != nil {\n+\t\treturn nil, err.Error(), err\n \t}\n \n \tdst := make([]byte, size)\n \tcopy(dst, sizeBuf[:])\n \n-\t_, err = io.ReadFull(c.nc, dst[4:])\n+\tn, err = io.ReadFull(c.nc, dst[4:])\n \tif err != nil {\n+\t\tremainingBytes := size - 4 - int32(n)\n+\t\tif remainingBytes > 0 && isCSOTTimeout(err) {\n+\t\t\tc.awaitRemainingBytes = &remainingBytes\n+\t\t}\n \t\treturn dst, \"incomplete read of full message\", err\n \t}\n \n@@ -507,36 +562,72 @@ func (c *connection) close() error {\n \treturn err\n }\n \n+// closed returns true if the connection has been closed by the driver.\n func (c *connection) closed() bool {\n \treturn atomic.LoadInt64(&c.state) == connDisconnected\n }\n \n+// isAlive returns true if the connection is alive and ready to be used for an\n+// operation.\n+//\n+// Note that the liveness check can be slow (at least 1ms), so isAlive only\n+// checks the liveness of the connection if it's been idle for at least 10\n+// seconds. For frequently in-use connections, a network error during an\n+// operation will be the first indication of a dead connection.\n+func (c *connection) isAlive() bool {\n+\tif c.nc == nil {\n+\t\treturn false\n+\t}\n+\n+\t// If the connection has been idle for less than 10 seconds, skip the\n+\t// liveness check.\n+\t//\n+\t// The 10-seconds idle bypass is based on the liveness check implementation\n+\t// in the Python Driver. That implementation uses 1 second as the idle\n+\t// threshold, but we chose to be more conservative in the Go Driver because\n+\t// this is new behavior with unknown side-effects. See\n+\t// https://github.com/mongodb/mongo-python-driver/blob/e6b95f65953e01e435004af069a6976473eaf841/pymongo/synchronous/pool.py#L983-L985\n+\tidleStart, ok := c.idleStart.Load().(time.Time)\n+\tif !ok || idleStart.Add(10*time.Second).After(time.Now()) {\n+\t\treturn true\n+\t}\n+\n+\t// Set a 1ms read deadline and attempt to read 1 byte from the connection.\n+\t// Expect it to block for 1ms then return a deadline exceeded error. If it\n+\t// returns any other error, the connection is not usable, so return false.\n+\t// If it doesn't return an error and actually reads data, the connection is\n+\t// also not usable, so return false.\n+\t//\n+\t// Note that we don't need to un-set the read deadline because the \"read\"\n+\t// and \"write\" methods always reset the deadlines.\n+\terr := c.nc.SetReadDeadline(time.Now().Add(1 * time.Millisecond))\n+\tif err != nil {\n+\t\treturn false\n+\t}\n+\tvar b [1]byte\n+\t_, err = c.nc.Read(b[:])\n+\treturn errors.Is(err, os.ErrDeadlineExceeded)\n+}\n+\n func (c *connection) idleTimeoutExpired() bool {\n-\tnow := time.Now()\n-\tif c.idleTimeout > 0 {\n-\t\tidleDeadline, ok := c.idleDeadline.Load().(time.Time)\n-\t\tif ok && now.After(idleDeadline) {\n-\t\t\treturn true\n-\t\t}\n+\tif c.idleTimeout == 0 {\n+\t\treturn false\n \t}\n \n-\treturn false\n+\tidleStart, ok := c.idleStart.Load().(time.Time)\n+\treturn ok && idleStart.Add(c.idleTimeout).Before(time.Now())\n }\n \n-func (c *connection) bumpIdleDeadline() {\n+func (c *connection) bumpIdleStart() {\n \tif c.idleTimeout > 0 {\n-\t\tc.idleDeadline.Store(time.Now().Add(c.idleTimeout))\n+\t\tc.idleStart.Store(time.Now())\n \t}\n }\n \n func (c *connection) setCanStream(canStream bool) {\n \tc.canStream = canStream\n }\n \n-func (c initConnection) supportsStreaming() bool {\n-\treturn c.canStream\n-}\n-\n func (c *connection) setStreaming(streaming bool) {\n \tc.currentlyStreaming = streaming\n }\n@@ -550,6 +641,12 @@ func (c *connection) setSocketTimeout(timeout time.Duration) {\n \tc.writeTimeout = timeout\n }\n \n+// DriverConnectionID returns the driver connection ID.\n+// TODO(GODRIVER-2824): change return type to int64.\n+func (c *connection) DriverConnectionID() uint64 {\n+\treturn c.driverConnectionID\n+}\n+\n func (c *connection) ID() string {\n \treturn c.id\n }\n@@ -558,6 +655,14 @@ func (c *connection) ServerConnectionID() *int64 {\n \treturn c.serverConnectionID\n }\n \n+func (c *connection) OIDCTokenGenID() uint64 {\n+\treturn c.oidcTokenGenID\n+}\n+\n+func (c *connection) SetOIDCTokenGenID(genID uint64) {\n+\tc.oidcTokenGenID = genID\n+}\n+\n // initConnection is an adapter used during connection initialization. It has the minimum\n // functionality necessary to implement the driver.Connection interface, which is required to pass a\n // *connection to a Handshaker.\n@@ -595,7 +700,7 @@ func (c initConnection) CurrentlyStreaming() bool {\n \treturn c.getCurrentlyStreaming()\n }\n func (c initConnection) SupportsStreaming() bool {\n-\treturn c.supportsStreaming()\n+\treturn c.canStream\n }\n \n // Connection implements the driver.Connection interface to allow reading and writing wire\n@@ -606,6 +711,8 @@ type Connection struct {\n \trefCount      int\n \tcleanupPoolFn func()\n \n+\toidcTokenGenID uint64\n+\n \t// cleanupServerFn resets the server state when a connection is returned to the connection pool\n \t// via Close() or expired via Expire().\n \tcleanupServerFn func()\n@@ -827,37 +934,14 @@ func (c *Connection) DriverConnectionID() uint64 {\n \treturn c.connection.DriverConnectionID()\n }\n \n-func configureTLS(ctx context.Context,\n-\ttlsConnSource tlsConnectionSource,\n-\tnc net.Conn,\n-\taddr address.Address,\n-\tconfig *tls.Config,\n-\tocspOpts *ocsp.VerifyOptions,\n-) (net.Conn, error) {\n-\t// Ensure config.ServerName is always set for SNI.\n-\tif config.ServerName == \"\" {\n-\t\thostname := addr.String()\n-\t\tcolonPos := strings.LastIndex(hostname, \":\")\n-\t\tif colonPos == -1 {\n-\t\t\tcolonPos = len(hostname)\n-\t\t}\n-\n-\t\thostname = hostname[:colonPos]\n-\t\tconfig.ServerName = hostname\n-\t}\n-\n-\tclient := tlsConnSource.Client(nc, config)\n-\tif err := clientHandshake(ctx, client); err != nil {\n-\t\treturn nil, err\n-\t}\n+// OIDCTokenGenID returns the OIDC token generation ID.\n+func (c *Connection) OIDCTokenGenID() uint64 {\n+\treturn c.oidcTokenGenID\n+}\n \n-\t// Only do OCSP verification if TLS verification is requested.\n-\tif !config.InsecureSkipVerify {\n-\t\tif ocspErr := ocsp.Verify(ctx, client.ConnectionState(), ocspOpts); ocspErr != nil {\n-\t\t\treturn nil, ocspErr\n-\t\t}\n-\t}\n-\treturn client, nil\n+// SetOIDCTokenGenID sets the OIDC token generation ID.\n+func (c *Connection) SetOIDCTokenGenID(genID uint64) {\n+\tc.oidcTokenGenID = genID\n }\n \n // TODO: Naming?"
    },
    {
      "sha": "1d097b65c772fd1e8883d257c819f699d6bb968c",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/fsm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ffsm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ffsm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ffsm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -22,7 +22,7 @@ var (\n \tMinSupportedMongoDBVersion = \"3.6\"\n \n \t// SupportedWireVersions is the range of wire versions supported by the driver.\n-\tSupportedWireVersions = description.NewVersionRange(6, 21)\n+\tSupportedWireVersions = description.NewVersionRange(6, 25)\n )\n \n type fsm struct {"
    },
    {
      "sha": "e9565425d99a7b62616dcc7e8fba901957b8f116",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/pool.go",
      "status": "modified",
      "additions": 51,
      "deletions": 40,
      "changes": 91,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fpool.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fpool.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fpool.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -9,6 +9,7 @@ package topology\n import (\n \t\"context\"\n \t\"fmt\"\n+\t\"io\"\n \t\"net\"\n \t\"sync\"\n \t\"sync/atomic\"\n@@ -166,8 +167,11 @@ type reason struct {\n // connectionPerished checks if a given connection is perished and should be removed from the pool.\n func connectionPerished(conn *connection) (reason, bool) {\n \tswitch {\n-\tcase conn.closed():\n-\t\t// A connection would only be closed if it encountered a network error during an operation and closed itself.\n+\tcase conn.closed() || !conn.isAlive():\n+\t\t// A connection would only be closed if it encountered a network error\n+\t\t// during an operation and closed itself. If a connection is not alive\n+\t\t// (e.g. the connection was closed by the server-side), it's also\n+\t\t// considered a network error.\n \t\treturn reason{\n \t\t\tloggerConn: logger.ReasonConnClosedError,\n \t\t\tevent:      event.ReasonError,\n@@ -788,17 +792,27 @@ var (\n //\n // It calls the package-global BGReadCallback function, if set, with the\n // address, timings, and any errors that occurred.\n-func bgRead(pool *pool, conn *connection) {\n-\tvar start, read time.Time\n-\tstart = time.Now()\n-\terrs := make([]error, 0)\n-\tconnClosed := false\n+func bgRead(pool *pool, conn *connection, size int32) {\n+\tvar err error\n+\tstart := time.Now()\n \n \tdefer func() {\n+\t\tread := time.Now()\n+\t\terrs := make([]error, 0)\n+\t\tconnClosed := false\n+\t\tif err != nil {\n+\t\t\terrs = append(errs, err)\n+\t\t\tconnClosed = true\n+\t\t\terr = conn.close()\n+\t\t\tif err != nil {\n+\t\t\t\terrs = append(errs, fmt.Errorf(\"error closing conn after reading: %w\", err))\n+\t\t\t}\n+\t\t}\n+\n \t\t// No matter what happens, always check the connection back into the\n \t\t// pool, which will either make it available for other operations or\n \t\t// remove it from the pool if it was closed.\n-\t\terr := pool.checkInNoEvent(conn)\n+\t\terr = pool.checkInNoEvent(conn)\n \t\tif err != nil {\n \t\t\terrs = append(errs, fmt.Errorf(\"error checking in: %w\", err))\n \t\t}\n@@ -808,34 +822,28 @@ func bgRead(pool *pool, conn *connection) {\n \t\t}\n \t}()\n \n-\terr := conn.nc.SetReadDeadline(time.Now().Add(BGReadTimeout))\n+\terr = conn.nc.SetReadDeadline(time.Now().Add(BGReadTimeout))\n \tif err != nil {\n-\t\terrs = append(errs, fmt.Errorf(\"error setting a read deadline: %w\", err))\n-\n-\t\tconnClosed = true\n-\t\terr := conn.close()\n-\t\tif err != nil {\n-\t\t\terrs = append(errs, fmt.Errorf(\"error closing conn after setting read deadline: %w\", err))\n-\t\t}\n-\n+\t\terr = fmt.Errorf(\"error setting a read deadline: %w\", err)\n \t\treturn\n \t}\n \n-\t// The context here is only used for cancellation, not deadline timeout, so\n-\t// use context.Background(). The read timeout is set by calling\n-\t// SetReadDeadline above.\n-\t_, _, err = conn.read(context.Background())\n-\tread = time.Now()\n-\tif err != nil {\n-\t\terrs = append(errs, fmt.Errorf(\"error reading: %w\", err))\n-\n-\t\tconnClosed = true\n-\t\terr := conn.close()\n+\tif size == 0 {\n+\t\tvar sizeBuf [4]byte\n+\t\t_, err = io.ReadFull(conn.nc, sizeBuf[:])\n \t\tif err != nil {\n-\t\t\terrs = append(errs, fmt.Errorf(\"error closing conn after reading: %w\", err))\n+\t\t\terr = fmt.Errorf(\"error reading the message size: %w\", err)\n+\t\t\treturn\n \t\t}\n-\n-\t\treturn\n+\t\tsize, err = conn.parseWmSizeBytes(sizeBuf)\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t\tsize -= 4\n+\t}\n+\t_, err = io.CopyN(io.Discard, conn.nc, int64(size))\n+\tif err != nil {\n+\t\terr = fmt.Errorf(\"error discarding %d byte message: %w\", size, err)\n \t}\n }\n \n@@ -886,19 +894,22 @@ func (p *pool) checkInNoEvent(conn *connection) error {\n \t// means that connections in \"awaiting response\" state are checked in but\n \t// not usable, which is not covered by the current pool events. We may need\n \t// to add pool event information in the future to communicate that.\n-\tif conn.awaitingResponse {\n-\t\tconn.awaitingResponse = false\n-\t\tgo bgRead(p, conn)\n+\tif conn.awaitRemainingBytes != nil {\n+\t\tsize := *conn.awaitRemainingBytes\n+\t\tconn.awaitRemainingBytes = nil\n+\t\tgo bgRead(p, conn, size)\n \t\treturn nil\n \t}\n \n-\t// Bump the connection idle deadline here because we're about to make the connection \"available\".\n-\t// The idle deadline is used to determine when a connection has reached its max idle time and\n-\t// should be closed. A connection reaches its max idle time when it has been \"available\" in the\n-\t// idle connections stack for more than the configured duration (maxIdleTimeMS). Set it before\n-\t// we call connectionPerished(), which checks the idle deadline, because a newly \"available\"\n-\t// connection should never be perished due to max idle time.\n-\tconn.bumpIdleDeadline()\n+\t// Bump the connection idle start time here because we're about to make the\n+\t// connection \"available\". The idle start time is used to determine how long\n+\t// a connection has been idle and when it has reached its max idle time and\n+\t// should be closed. A connection reaches its max idle time when it has been\n+\t// \"available\" in the idle connections stack for more than the configured\n+\t// duration (maxIdleTimeMS). Set it before we call connectionPerished(),\n+\t// which checks the idle deadline, because a newly \"available\" connection\n+\t// should never be perished due to max idle time.\n+\tconn.bumpIdleStart()\n \n \tr, perished := connectionPerished(conn)\n \tif !perished && conn.pool.getState() == poolClosed {"
    },
    {
      "sha": "0623632672a8bbe10f089569d20d7038b472a264",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/server.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Fserver.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -666,7 +666,7 @@ func (s *Server) update() {\n \t\t\ts.monitorOnce.Do(s.rttMonitor.connect)\n \t\t}\n \n-\t\tif isStreamable(s) || connectionIsStreaming || transitionedFromNetworkError {\n+\t\tif isStreamingEnabled(s) && (isStreamable(s) || connectionIsStreaming) || transitionedFromNetworkError {\n \t\t\tcontinue\n \t\t}\n \n@@ -730,7 +730,7 @@ func (s *Server) createConnection() *connection {\n \t\tWithWriteTimeout(func(time.Duration) time.Duration { return s.cfg.heartbeatTimeout }),\n \t\t// We override whatever handshaker is currently attached to the options with a basic\n \t\t// one because need to make sure we don't do auth.\n-\t\tWithHandshaker(func(h Handshaker) Handshaker {\n+\t\tWithHandshaker(func(Handshaker) Handshaker {\n \t\t\treturn operation.NewHello().AppName(s.cfg.appname).Compressors(s.cfg.compressionOpts).\n \t\t\t\tServerAPI(s.cfg.serverAPI)\n \t\t}),"
    },
    {
      "sha": "2c0518a54ee3532378acaaf2d08b42b02dcc0853",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/topology/topology_options.go",
      "status": "modified",
      "additions": 91,
      "deletions": 38,
      "changes": 129,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ftopology_options.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ftopology_options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Ftopology%2Ftopology_options.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -7,10 +7,10 @@\n package topology\n \n import (\n+\t\"context\"\n \t\"crypto/tls\"\n \t\"fmt\"\n \t\"net/http\"\n-\t\"strings\"\n \t\"time\"\n \n \t\"go.mongodb.org/mongo-driver/event\"\n@@ -71,9 +71,80 @@ func newLogger(opts *options.LoggerOptions) (*logger.Logger, error) {\n \treturn log, nil\n }\n \n-// NewConfig will translate data from client options into a topology config for building non-default deployments.\n-// Server and topology options are not honored if a custom deployment is used.\n+// convertOIDCArgs converts the internal *driver.OIDCArgs into the equivalent\n+// public type *options.OIDCArgs.\n+func convertOIDCArgs(args *driver.OIDCArgs) *options.OIDCArgs {\n+\tif args == nil {\n+\t\treturn nil\n+\t}\n+\treturn &options.OIDCArgs{\n+\t\tVersion:      args.Version,\n+\t\tIDPInfo:      (*options.IDPInfo)(args.IDPInfo),\n+\t\tRefreshToken: args.RefreshToken,\n+\t}\n+}\n+\n+// ConvertCreds takes an [options.Credential] and returns the equivalent\n+// [driver.Cred].\n+func ConvertCreds(cred *options.Credential) *driver.Cred {\n+\tif cred == nil {\n+\t\treturn nil\n+\t}\n+\n+\tvar oidcMachineCallback auth.OIDCCallback\n+\tif cred.OIDCMachineCallback != nil {\n+\t\toidcMachineCallback = func(ctx context.Context, args *driver.OIDCArgs) (*driver.OIDCCredential, error) {\n+\t\t\tcred, err := cred.OIDCMachineCallback(ctx, convertOIDCArgs(args))\n+\t\t\treturn (*driver.OIDCCredential)(cred), err\n+\t\t}\n+\t}\n+\n+\tvar oidcHumanCallback auth.OIDCCallback\n+\tif cred.OIDCHumanCallback != nil {\n+\t\toidcHumanCallback = func(ctx context.Context, args *driver.OIDCArgs) (*driver.OIDCCredential, error) {\n+\t\t\tcred, err := cred.OIDCHumanCallback(ctx, convertOIDCArgs(args))\n+\t\t\treturn (*driver.OIDCCredential)(cred), err\n+\t\t}\n+\t}\n+\n+\treturn &auth.Cred{\n+\t\tSource:              cred.AuthSource,\n+\t\tUsername:            cred.Username,\n+\t\tPassword:            cred.Password,\n+\t\tPasswordSet:         cred.PasswordSet,\n+\t\tProps:               cred.AuthMechanismProperties,\n+\t\tOIDCMachineCallback: oidcMachineCallback,\n+\t\tOIDCHumanCallback:   oidcHumanCallback,\n+\t}\n+}\n+\n+// NewConfig will translate data from client options into a topology config for\n+// building non-default deployments.\n func NewConfig(co *options.ClientOptions, clock *session.ClusterClock) (*Config, error) {\n+\tvar authenticator driver.Authenticator\n+\tvar err error\n+\tif co.Auth != nil {\n+\t\tauthenticator, err = auth.CreateAuthenticator(\n+\t\t\tco.Auth.AuthMechanism,\n+\t\t\tConvertCreds(co.Auth),\n+\t\t\tco.HTTPClient,\n+\t\t)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"error creating authenticator: %w\", err)\n+\t\t}\n+\t}\n+\treturn NewConfigWithAuthenticator(co, clock, authenticator)\n+}\n+\n+// NewConfigWithAuthenticator will translate data from client options into a\n+// topology config for building non-default deployments. Server and topology\n+// options are not honored if a custom deployment is used. It uses a passed in\n+// authenticator to authenticate the connection.\n+func NewConfigWithAuthenticator(\n+\tco *options.ClientOptions,\n+\tclock *session.ClusterClock,\n+\tauthenticator driver.Authenticator,\n+) (*Config, error) {\n \tvar serverAPI *driver.ServerAPIOptions\n \n \tif err := co.Validate(); err != nil {\n@@ -135,11 +206,11 @@ func NewConfig(co *options.ClientOptions, clock *session.ClusterClock) (*Config,\n \t\tfor _, comp := range comps {\n \t\t\tswitch comp {\n \t\t\tcase \"zlib\":\n-\t\t\t\tconnOpts = append(connOpts, WithZlibLevel(func(level *int) *int {\n+\t\t\t\tconnOpts = append(connOpts, WithZlibLevel(func(*int) *int {\n \t\t\t\t\treturn co.ZlibLevel\n \t\t\t\t}))\n \t\t\tcase \"zstd\":\n-\t\t\t\tconnOpts = append(connOpts, WithZstdLevel(func(level *int) *int {\n+\t\t\t\tconnOpts = append(connOpts, WithZstdLevel(func(*int) *int {\n \t\t\t\t\treturn co.ZstdLevel\n \t\t\t\t}))\n \t\t\t}\n@@ -156,60 +227,42 @@ func NewConfig(co *options.ClientOptions, clock *session.ClusterClock) (*Config,\n \t}\n \n \t// Handshaker\n-\tvar handshaker = func(driver.Handshaker) driver.Handshaker {\n-\t\treturn operation.NewHello().AppName(appName).Compressors(comps).ClusterClock(clock).\n-\t\t\tServerAPI(serverAPI).LoadBalanced(loadBalanced)\n-\t}\n-\t// Auth & Database & Password & Username\n-\tif co.Auth != nil {\n-\t\tcred := &auth.Cred{\n-\t\t\tUsername:    co.Auth.Username,\n-\t\t\tPassword:    co.Auth.Password,\n-\t\t\tPasswordSet: co.Auth.PasswordSet,\n-\t\t\tProps:       co.Auth.AuthMechanismProperties,\n-\t\t\tSource:      co.Auth.AuthSource,\n-\t\t}\n-\t\tmechanism := co.Auth.AuthMechanism\n-\n-\t\tif len(cred.Source) == 0 {\n-\t\t\tswitch strings.ToUpper(mechanism) {\n-\t\t\tcase auth.MongoDBX509, auth.GSSAPI, auth.PLAIN:\n-\t\t\t\tcred.Source = \"$external\"\n-\t\t\tdefault:\n-\t\t\t\tcred.Source = \"admin\"\n-\t\t\t}\n-\t\t}\n-\n-\t\tauthenticator, err := auth.CreateAuthenticator(mechanism, cred)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\n+\tvar handshaker func(driver.Handshaker) driver.Handshaker\n+\tif authenticator != nil {\n \t\thandshakeOpts := &auth.HandshakeOptions{\n \t\t\tAppName:       appName,\n \t\t\tAuthenticator: authenticator,\n \t\t\tCompressors:   comps,\n \t\t\tServerAPI:     serverAPI,\n \t\t\tLoadBalanced:  loadBalanced,\n \t\t\tClusterClock:  clock,\n-\t\t\tHTTPClient:    co.HTTPClient,\n \t\t}\n \n-\t\tif mechanism == \"\" {\n+\t\tif co.Auth.AuthMechanism == \"\" {\n \t\t\t// Required for SASL mechanism negotiation during handshake\n-\t\t\thandshakeOpts.DBUser = cred.Source + \".\" + cred.Username\n+\t\t\thandshakeOpts.DBUser = co.Auth.AuthSource + \".\" + co.Auth.Username\n \t\t}\n \t\tif co.AuthenticateToAnything != nil && *co.AuthenticateToAnything {\n \t\t\t// Authenticate arbiters\n-\t\t\thandshakeOpts.PerformAuthentication = func(serv description.Server) bool {\n+\t\t\thandshakeOpts.PerformAuthentication = func(description.Server) bool {\n \t\t\t\treturn true\n \t\t\t}\n \t\t}\n \n \t\thandshaker = func(driver.Handshaker) driver.Handshaker {\n \t\t\treturn auth.Handshaker(nil, handshakeOpts)\n \t\t}\n+\t} else {\n+\t\thandshaker = func(driver.Handshaker) driver.Handshaker {\n+\t\t\treturn operation.NewHello().\n+\t\t\t\tAppName(appName).\n+\t\t\t\tCompressors(comps).\n+\t\t\t\tClusterClock(clock).\n+\t\t\t\tServerAPI(serverAPI).\n+\t\t\t\tLoadBalanced(loadBalanced)\n+\t\t}\n \t}\n+\n \tconnOpts = append(connOpts, WithHandshaker(handshaker))\n \t// ConnectTimeout\n \tif co.ConnectTimeout != nil {"
    },
    {
      "sha": "987ae16c08e76cb11bc8c0810aeea815dc247e21",
      "filename": "backend/vendor/go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage/wiremessage.go",
      "status": "modified",
      "additions": 6,
      "deletions": 21,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgo.mongodb.org%2Fmongo-driver%2Fx%2Fmongo%2Fdriver%2Fwiremessage%2Fwiremessage.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -381,16 +381,9 @@ func ReadMsgSectionSingleDocument(src []byte) (doc bsoncore.Document, rem []byte\n // ReadMsgSectionDocumentSequence reads an identifier and document sequence from src and returns the document sequence\n // data parsed into a slice of BSON documents.\n func ReadMsgSectionDocumentSequence(src []byte) (identifier string, docs []bsoncore.Document, rem []byte, ok bool) {\n-\tlength, rem, ok := readi32(src)\n-\tif !ok || int(length) > len(src) {\n-\t\treturn \"\", nil, rem, false\n-\t}\n-\n-\trem, ret := rem[:length-4], rem[length-4:] // reslice so we can just iterate a loop later\n-\n-\tidentifier, rem, ok = readcstring(rem)\n+\tidentifier, rem, ret, ok := ReadMsgSectionRawDocumentSequence(src)\n \tif !ok {\n-\t\treturn \"\", nil, rem, false\n+\t\treturn \"\", nil, src, false\n \t}\n \n \tdocs = make([]bsoncore.Document, 0)\n@@ -403,7 +396,7 @@ func ReadMsgSectionDocumentSequence(src []byte) (identifier string, docs []bsonc\n \t\tdocs = append(docs, doc)\n \t}\n \tif len(rem) > 0 {\n-\t\treturn \"\", nil, append(rem, ret...), false\n+\t\treturn \"\", nil, src, false\n \t}\n \n \treturn identifier, docs, ret, true\n@@ -413,8 +406,8 @@ func ReadMsgSectionDocumentSequence(src []byte) (identifier string, docs []bsonc\n // sequence data.\n func ReadMsgSectionRawDocumentSequence(src []byte) (identifier string, data []byte, rem []byte, ok bool) {\n \tlength, rem, ok := readi32(src)\n-\tif !ok || int(length) > len(src) {\n-\t\treturn \"\", nil, rem, false\n+\tif !ok || int(length) > len(src) || length-4 < 0 {\n+\t\treturn \"\", nil, src, false\n \t}\n \n \t// After these assignments, rem will be the data containing the identifier string + the document sequence bytes and\n@@ -423,7 +416,7 @@ func ReadMsgSectionRawDocumentSequence(src []byte) (identifier string, data []by\n \n \tidentifier, rem, ok = readcstring(rem)\n \tif !ok {\n-\t\treturn \"\", nil, rem, false\n+\t\treturn \"\", nil, src, false\n \t}\n \n \treturn identifier, rem, rest, true\n@@ -546,14 +539,6 @@ func ReadCompressedCompressorID(src []byte) (id CompressorID, rem []byte, ok boo\n \treturn CompressorID(src[0]), src[1:], true\n }\n \n-// ReadCompressedCompressedMessage reads the compressed wiremessage to dst.\n-func ReadCompressedCompressedMessage(src []byte, length int32) (msg []byte, rem []byte, ok bool) {\n-\tif len(src) < int(length) {\n-\t\treturn nil, src, false\n-\t}\n-\treturn src[:length], src[length:], true\n-}\n-\n // ReadKillCursorsZero reads the zero field from src.\n func ReadKillCursorsZero(src []byte) (zero int32, rem []byte, ok bool) {\n \treturn readi32(src)"
    },
    {
      "sha": "29f0a2de4514b64d229aeac296112728a27310bd",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/argon2.go",
      "status": "added",
      "additions": 283,
      "deletions": 0,
      "changes": 283,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fargon2.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fargon2.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fargon2.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,283 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package argon2 implements the key derivation function Argon2.\n+// Argon2 was selected as the winner of the Password Hashing Competition and can\n+// be used to derive cryptographic keys from passwords.\n+//\n+// For a detailed specification of Argon2 see [1].\n+//\n+// If you aren't sure which function you need, use Argon2id (IDKey) and\n+// the parameter recommendations for your scenario.\n+//\n+// # Argon2i\n+//\n+// Argon2i (implemented by Key) is the side-channel resistant version of Argon2.\n+// It uses data-independent memory access, which is preferred for password\n+// hashing and password-based key derivation. Argon2i requires more passes over\n+// memory than Argon2id to protect from trade-off attacks. The recommended\n+// parameters (taken from [2]) for non-interactive operations are time=3 and to\n+// use the maximum available memory.\n+//\n+// # Argon2id\n+//\n+// Argon2id (implemented by IDKey) is a hybrid version of Argon2 combining\n+// Argon2i and Argon2d. It uses data-independent memory access for the first\n+// half of the first iteration over the memory and data-dependent memory access\n+// for the rest. Argon2id is side-channel resistant and provides better brute-\n+// force cost savings due to time-memory tradeoffs than Argon2i. The recommended\n+// parameters for non-interactive operations (taken from [2]) are time=1 and to\n+// use the maximum available memory.\n+//\n+// [1] https://github.com/P-H-C/phc-winner-argon2/blob/master/argon2-specs.pdf\n+// [2] https://tools.ietf.org/html/draft-irtf-cfrg-argon2-03#section-9.3\n+package argon2\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"sync\"\n+\n+\t\"golang.org/x/crypto/blake2b\"\n+)\n+\n+// The Argon2 version implemented by this package.\n+const Version = 0x13\n+\n+const (\n+\targon2d = iota\n+\targon2i\n+\targon2id\n+)\n+\n+// Key derives a key from the password, salt, and cost parameters using Argon2i\n+// returning a byte slice of length keyLen that can be used as cryptographic\n+// key. The CPU cost and parallelism degree must be greater than zero.\n+//\n+// For example, you can get a derived key for e.g. AES-256 (which needs a\n+// 32-byte key) by doing:\n+//\n+//\tkey := argon2.Key([]byte(\"some password\"), salt, 3, 32*1024, 4, 32)\n+//\n+// The draft RFC recommends[2] time=3, and memory=32*1024 is a sensible number.\n+// If using that amount of memory (32 MB) is not possible in some contexts then\n+// the time parameter can be increased to compensate.\n+//\n+// The time parameter specifies the number of passes over the memory and the\n+// memory parameter specifies the size of the memory in KiB. For example\n+// memory=32*1024 sets the memory cost to ~32 MB. The number of threads can be\n+// adjusted to the number of available CPUs. The cost parameters should be\n+// increased as memory latency and CPU parallelism increases. Remember to get a\n+// good random salt.\n+func Key(password, salt []byte, time, memory uint32, threads uint8, keyLen uint32) []byte {\n+\treturn deriveKey(argon2i, password, salt, nil, nil, time, memory, threads, keyLen)\n+}\n+\n+// IDKey derives a key from the password, salt, and cost parameters using\n+// Argon2id returning a byte slice of length keyLen that can be used as\n+// cryptographic key. The CPU cost and parallelism degree must be greater than\n+// zero.\n+//\n+// For example, you can get a derived key for e.g. AES-256 (which needs a\n+// 32-byte key) by doing:\n+//\n+//\tkey := argon2.IDKey([]byte(\"some password\"), salt, 1, 64*1024, 4, 32)\n+//\n+// The draft RFC recommends[2] time=1, and memory=64*1024 is a sensible number.\n+// If using that amount of memory (64 MB) is not possible in some contexts then\n+// the time parameter can be increased to compensate.\n+//\n+// The time parameter specifies the number of passes over the memory and the\n+// memory parameter specifies the size of the memory in KiB. For example\n+// memory=64*1024 sets the memory cost to ~64 MB. The number of threads can be\n+// adjusted to the numbers of available CPUs. The cost parameters should be\n+// increased as memory latency and CPU parallelism increases. Remember to get a\n+// good random salt.\n+func IDKey(password, salt []byte, time, memory uint32, threads uint8, keyLen uint32) []byte {\n+\treturn deriveKey(argon2id, password, salt, nil, nil, time, memory, threads, keyLen)\n+}\n+\n+func deriveKey(mode int, password, salt, secret, data []byte, time, memory uint32, threads uint8, keyLen uint32) []byte {\n+\tif time < 1 {\n+\t\tpanic(\"argon2: number of rounds too small\")\n+\t}\n+\tif threads < 1 {\n+\t\tpanic(\"argon2: parallelism degree too low\")\n+\t}\n+\th0 := initHash(password, salt, secret, data, time, memory, uint32(threads), keyLen, mode)\n+\n+\tmemory = memory / (syncPoints * uint32(threads)) * (syncPoints * uint32(threads))\n+\tif memory < 2*syncPoints*uint32(threads) {\n+\t\tmemory = 2 * syncPoints * uint32(threads)\n+\t}\n+\tB := initBlocks(&h0, memory, uint32(threads))\n+\tprocessBlocks(B, time, memory, uint32(threads), mode)\n+\treturn extractKey(B, memory, uint32(threads), keyLen)\n+}\n+\n+const (\n+\tblockLength = 128\n+\tsyncPoints  = 4\n+)\n+\n+type block [blockLength]uint64\n+\n+func initHash(password, salt, key, data []byte, time, memory, threads, keyLen uint32, mode int) [blake2b.Size + 8]byte {\n+\tvar (\n+\t\th0     [blake2b.Size + 8]byte\n+\t\tparams [24]byte\n+\t\ttmp    [4]byte\n+\t)\n+\n+\tb2, _ := blake2b.New512(nil)\n+\tbinary.LittleEndian.PutUint32(params[0:4], threads)\n+\tbinary.LittleEndian.PutUint32(params[4:8], keyLen)\n+\tbinary.LittleEndian.PutUint32(params[8:12], memory)\n+\tbinary.LittleEndian.PutUint32(params[12:16], time)\n+\tbinary.LittleEndian.PutUint32(params[16:20], uint32(Version))\n+\tbinary.LittleEndian.PutUint32(params[20:24], uint32(mode))\n+\tb2.Write(params[:])\n+\tbinary.LittleEndian.PutUint32(tmp[:], uint32(len(password)))\n+\tb2.Write(tmp[:])\n+\tb2.Write(password)\n+\tbinary.LittleEndian.PutUint32(tmp[:], uint32(len(salt)))\n+\tb2.Write(tmp[:])\n+\tb2.Write(salt)\n+\tbinary.LittleEndian.PutUint32(tmp[:], uint32(len(key)))\n+\tb2.Write(tmp[:])\n+\tb2.Write(key)\n+\tbinary.LittleEndian.PutUint32(tmp[:], uint32(len(data)))\n+\tb2.Write(tmp[:])\n+\tb2.Write(data)\n+\tb2.Sum(h0[:0])\n+\treturn h0\n+}\n+\n+func initBlocks(h0 *[blake2b.Size + 8]byte, memory, threads uint32) []block {\n+\tvar block0 [1024]byte\n+\tB := make([]block, memory)\n+\tfor lane := uint32(0); lane < threads; lane++ {\n+\t\tj := lane * (memory / threads)\n+\t\tbinary.LittleEndian.PutUint32(h0[blake2b.Size+4:], lane)\n+\n+\t\tbinary.LittleEndian.PutUint32(h0[blake2b.Size:], 0)\n+\t\tblake2bHash(block0[:], h0[:])\n+\t\tfor i := range B[j+0] {\n+\t\t\tB[j+0][i] = binary.LittleEndian.Uint64(block0[i*8:])\n+\t\t}\n+\n+\t\tbinary.LittleEndian.PutUint32(h0[blake2b.Size:], 1)\n+\t\tblake2bHash(block0[:], h0[:])\n+\t\tfor i := range B[j+1] {\n+\t\t\tB[j+1][i] = binary.LittleEndian.Uint64(block0[i*8:])\n+\t\t}\n+\t}\n+\treturn B\n+}\n+\n+func processBlocks(B []block, time, memory, threads uint32, mode int) {\n+\tlanes := memory / threads\n+\tsegments := lanes / syncPoints\n+\n+\tprocessSegment := func(n, slice, lane uint32, wg *sync.WaitGroup) {\n+\t\tvar addresses, in, zero block\n+\t\tif mode == argon2i || (mode == argon2id && n == 0 && slice < syncPoints/2) {\n+\t\t\tin[0] = uint64(n)\n+\t\t\tin[1] = uint64(lane)\n+\t\t\tin[2] = uint64(slice)\n+\t\t\tin[3] = uint64(memory)\n+\t\t\tin[4] = uint64(time)\n+\t\t\tin[5] = uint64(mode)\n+\t\t}\n+\n+\t\tindex := uint32(0)\n+\t\tif n == 0 && slice == 0 {\n+\t\t\tindex = 2 // we have already generated the first two blocks\n+\t\t\tif mode == argon2i || mode == argon2id {\n+\t\t\t\tin[6]++\n+\t\t\t\tprocessBlock(&addresses, &in, &zero)\n+\t\t\t\tprocessBlock(&addresses, &addresses, &zero)\n+\t\t\t}\n+\t\t}\n+\n+\t\toffset := lane*lanes + slice*segments + index\n+\t\tvar random uint64\n+\t\tfor index < segments {\n+\t\t\tprev := offset - 1\n+\t\t\tif index == 0 && slice == 0 {\n+\t\t\t\tprev += lanes // last block in lane\n+\t\t\t}\n+\t\t\tif mode == argon2i || (mode == argon2id && n == 0 && slice < syncPoints/2) {\n+\t\t\t\tif index%blockLength == 0 {\n+\t\t\t\t\tin[6]++\n+\t\t\t\t\tprocessBlock(&addresses, &in, &zero)\n+\t\t\t\t\tprocessBlock(&addresses, &addresses, &zero)\n+\t\t\t\t}\n+\t\t\t\trandom = addresses[index%blockLength]\n+\t\t\t} else {\n+\t\t\t\trandom = B[prev][0]\n+\t\t\t}\n+\t\t\tnewOffset := indexAlpha(random, lanes, segments, threads, n, slice, lane, index)\n+\t\t\tprocessBlockXOR(&B[offset], &B[prev], &B[newOffset])\n+\t\t\tindex, offset = index+1, offset+1\n+\t\t}\n+\t\twg.Done()\n+\t}\n+\n+\tfor n := uint32(0); n < time; n++ {\n+\t\tfor slice := uint32(0); slice < syncPoints; slice++ {\n+\t\t\tvar wg sync.WaitGroup\n+\t\t\tfor lane := uint32(0); lane < threads; lane++ {\n+\t\t\t\twg.Add(1)\n+\t\t\t\tgo processSegment(n, slice, lane, &wg)\n+\t\t\t}\n+\t\t\twg.Wait()\n+\t\t}\n+\t}\n+\n+}\n+\n+func extractKey(B []block, memory, threads, keyLen uint32) []byte {\n+\tlanes := memory / threads\n+\tfor lane := uint32(0); lane < threads-1; lane++ {\n+\t\tfor i, v := range B[(lane*lanes)+lanes-1] {\n+\t\t\tB[memory-1][i] ^= v\n+\t\t}\n+\t}\n+\n+\tvar block [1024]byte\n+\tfor i, v := range B[memory-1] {\n+\t\tbinary.LittleEndian.PutUint64(block[i*8:], v)\n+\t}\n+\tkey := make([]byte, keyLen)\n+\tblake2bHash(key, block[:])\n+\treturn key\n+}\n+\n+func indexAlpha(rand uint64, lanes, segments, threads, n, slice, lane, index uint32) uint32 {\n+\trefLane := uint32(rand>>32) % threads\n+\tif n == 0 && slice == 0 {\n+\t\trefLane = lane\n+\t}\n+\tm, s := 3*segments, ((slice+1)%syncPoints)*segments\n+\tif lane == refLane {\n+\t\tm += index\n+\t}\n+\tif n == 0 {\n+\t\tm, s = slice*segments, 0\n+\t\tif slice == 0 || lane == refLane {\n+\t\t\tm += index\n+\t\t}\n+\t}\n+\tif index == 0 || lane == refLane {\n+\t\tm--\n+\t}\n+\treturn phi(rand, uint64(m), uint64(s), refLane, lanes)\n+}\n+\n+func phi(rand, m, s uint64, lane, lanes uint32) uint32 {\n+\tp := rand & 0xFFFFFFFF\n+\tp = (p * p) >> 32\n+\tp = (p * m) >> 32\n+\treturn lane*lanes + uint32((s+m-(p+1))%uint64(lanes))\n+}"
    },
    {
      "sha": "10f46948dc1053083178c9818fc15408ad19e488",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/blake2b.go",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblake2b.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblake2b.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblake2b.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package argon2\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"hash\"\n+\n+\t\"golang.org/x/crypto/blake2b\"\n+)\n+\n+// blake2bHash computes an arbitrary long hash value of in\n+// and writes the hash to out.\n+func blake2bHash(out []byte, in []byte) {\n+\tvar b2 hash.Hash\n+\tif n := len(out); n < blake2b.Size {\n+\t\tb2, _ = blake2b.New(n, nil)\n+\t} else {\n+\t\tb2, _ = blake2b.New512(nil)\n+\t}\n+\n+\tvar buffer [blake2b.Size]byte\n+\tbinary.LittleEndian.PutUint32(buffer[:4], uint32(len(out)))\n+\tb2.Write(buffer[:4])\n+\tb2.Write(in)\n+\n+\tif len(out) <= blake2b.Size {\n+\t\tb2.Sum(out[:0])\n+\t\treturn\n+\t}\n+\n+\toutLen := len(out)\n+\tb2.Sum(buffer[:0])\n+\tb2.Reset()\n+\tcopy(out, buffer[:32])\n+\tout = out[32:]\n+\tfor len(out) > blake2b.Size {\n+\t\tb2.Write(buffer[:])\n+\t\tb2.Sum(buffer[:0])\n+\t\tcopy(out, buffer[:32])\n+\t\tout = out[32:]\n+\t\tb2.Reset()\n+\t}\n+\n+\tif outLen%blake2b.Size > 0 { // outLen > 64\n+\t\tr := ((outLen + 31) / 32) - 2 // ⌈τ /32⌉-2\n+\t\tb2, _ = blake2b.New(outLen-32*r, nil)\n+\t}\n+\tb2.Write(buffer[:])\n+\tb2.Sum(out[:0])\n+}"
    },
    {
      "sha": "063e7784f867419c0343c175fc2cf66c3e873cb5",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/blamka_amd64.go",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build amd64 && gc && !purego\n+\n+package argon2\n+\n+import \"golang.org/x/sys/cpu\"\n+\n+func init() {\n+\tuseSSE4 = cpu.X86.HasSSE41\n+}\n+\n+//go:noescape\n+func mixBlocksSSE2(out, a, b, c *block)\n+\n+//go:noescape\n+func xorBlocksSSE2(out, a, b, c *block)\n+\n+//go:noescape\n+func blamkaSSE4(b *block)\n+\n+func processBlockSSE(out, in1, in2 *block, xor bool) {\n+\tvar t block\n+\tmixBlocksSSE2(&t, in1, in2, &t)\n+\tif useSSE4 {\n+\t\tblamkaSSE4(&t)\n+\t} else {\n+\t\tfor i := 0; i < blockLength; i += 16 {\n+\t\t\tblamkaGeneric(\n+\t\t\t\t&t[i+0], &t[i+1], &t[i+2], &t[i+3],\n+\t\t\t\t&t[i+4], &t[i+5], &t[i+6], &t[i+7],\n+\t\t\t\t&t[i+8], &t[i+9], &t[i+10], &t[i+11],\n+\t\t\t\t&t[i+12], &t[i+13], &t[i+14], &t[i+15],\n+\t\t\t)\n+\t\t}\n+\t\tfor i := 0; i < blockLength/8; i += 2 {\n+\t\t\tblamkaGeneric(\n+\t\t\t\t&t[i], &t[i+1], &t[16+i], &t[16+i+1],\n+\t\t\t\t&t[32+i], &t[32+i+1], &t[48+i], &t[48+i+1],\n+\t\t\t\t&t[64+i], &t[64+i+1], &t[80+i], &t[80+i+1],\n+\t\t\t\t&t[96+i], &t[96+i+1], &t[112+i], &t[112+i+1],\n+\t\t\t)\n+\t\t}\n+\t}\n+\tif xor {\n+\t\txorBlocksSSE2(out, in1, in2, &t)\n+\t} else {\n+\t\tmixBlocksSSE2(out, in1, in2, &t)\n+\t}\n+}\n+\n+func processBlock(out, in1, in2 *block) {\n+\tprocessBlockSSE(out, in1, in2, false)\n+}\n+\n+func processBlockXOR(out, in1, in2 *block) {\n+\tprocessBlockSSE(out, in1, in2, true)\n+}"
    },
    {
      "sha": "c3895478ed0c5560ee9c06b873cc1b46971544c8",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/blamka_amd64.s",
      "status": "added",
      "additions": 2791,
      "deletions": 0,
      "changes": 2791,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_amd64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,2791 @@\n+// Code generated by command: go run blamka_amd64.go -out ../blamka_amd64.s -pkg argon2. DO NOT EDIT.\n+\n+//go:build amd64 && gc && !purego\n+\n+#include \"textflag.h\"\n+\n+// func blamkaSSE4(b *block)\n+// Requires: SSE2, SSSE3\n+TEXT ·blamkaSSE4(SB), NOSPLIT, $0-8\n+\tMOVQ       b+0(FP), AX\n+\tMOVOU      ·c40<>+0(SB), X10\n+\tMOVOU      ·c48<>+0(SB), X11\n+\tMOVOU      (AX), X0\n+\tMOVOU      16(AX), X1\n+\tMOVOU      32(AX), X2\n+\tMOVOU      48(AX), X3\n+\tMOVOU      64(AX), X4\n+\tMOVOU      80(AX), X5\n+\tMOVOU      96(AX), X6\n+\tMOVOU      112(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, (AX)\n+\tMOVOU      X1, 16(AX)\n+\tMOVOU      X2, 32(AX)\n+\tMOVOU      X3, 48(AX)\n+\tMOVOU      X4, 64(AX)\n+\tMOVOU      X5, 80(AX)\n+\tMOVOU      X6, 96(AX)\n+\tMOVOU      X7, 112(AX)\n+\tMOVOU      128(AX), X0\n+\tMOVOU      144(AX), X1\n+\tMOVOU      160(AX), X2\n+\tMOVOU      176(AX), X3\n+\tMOVOU      192(AX), X4\n+\tMOVOU      208(AX), X5\n+\tMOVOU      224(AX), X6\n+\tMOVOU      240(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 128(AX)\n+\tMOVOU      X1, 144(AX)\n+\tMOVOU      X2, 160(AX)\n+\tMOVOU      X3, 176(AX)\n+\tMOVOU      X4, 192(AX)\n+\tMOVOU      X5, 208(AX)\n+\tMOVOU      X6, 224(AX)\n+\tMOVOU      X7, 240(AX)\n+\tMOVOU      256(AX), X0\n+\tMOVOU      272(AX), X1\n+\tMOVOU      288(AX), X2\n+\tMOVOU      304(AX), X3\n+\tMOVOU      320(AX), X4\n+\tMOVOU      336(AX), X5\n+\tMOVOU      352(AX), X6\n+\tMOVOU      368(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 256(AX)\n+\tMOVOU      X1, 272(AX)\n+\tMOVOU      X2, 288(AX)\n+\tMOVOU      X3, 304(AX)\n+\tMOVOU      X4, 320(AX)\n+\tMOVOU      X5, 336(AX)\n+\tMOVOU      X6, 352(AX)\n+\tMOVOU      X7, 368(AX)\n+\tMOVOU      384(AX), X0\n+\tMOVOU      400(AX), X1\n+\tMOVOU      416(AX), X2\n+\tMOVOU      432(AX), X3\n+\tMOVOU      448(AX), X4\n+\tMOVOU      464(AX), X5\n+\tMOVOU      480(AX), X6\n+\tMOVOU      496(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 384(AX)\n+\tMOVOU      X1, 400(AX)\n+\tMOVOU      X2, 416(AX)\n+\tMOVOU      X3, 432(AX)\n+\tMOVOU      X4, 448(AX)\n+\tMOVOU      X5, 464(AX)\n+\tMOVOU      X6, 480(AX)\n+\tMOVOU      X7, 496(AX)\n+\tMOVOU      512(AX), X0\n+\tMOVOU      528(AX), X1\n+\tMOVOU      544(AX), X2\n+\tMOVOU      560(AX), X3\n+\tMOVOU      576(AX), X4\n+\tMOVOU      592(AX), X5\n+\tMOVOU      608(AX), X6\n+\tMOVOU      624(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 512(AX)\n+\tMOVOU      X1, 528(AX)\n+\tMOVOU      X2, 544(AX)\n+\tMOVOU      X3, 560(AX)\n+\tMOVOU      X4, 576(AX)\n+\tMOVOU      X5, 592(AX)\n+\tMOVOU      X6, 608(AX)\n+\tMOVOU      X7, 624(AX)\n+\tMOVOU      640(AX), X0\n+\tMOVOU      656(AX), X1\n+\tMOVOU      672(AX), X2\n+\tMOVOU      688(AX), X3\n+\tMOVOU      704(AX), X4\n+\tMOVOU      720(AX), X5\n+\tMOVOU      736(AX), X6\n+\tMOVOU      752(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 640(AX)\n+\tMOVOU      X1, 656(AX)\n+\tMOVOU      X2, 672(AX)\n+\tMOVOU      X3, 688(AX)\n+\tMOVOU      X4, 704(AX)\n+\tMOVOU      X5, 720(AX)\n+\tMOVOU      X6, 736(AX)\n+\tMOVOU      X7, 752(AX)\n+\tMOVOU      768(AX), X0\n+\tMOVOU      784(AX), X1\n+\tMOVOU      800(AX), X2\n+\tMOVOU      816(AX), X3\n+\tMOVOU      832(AX), X4\n+\tMOVOU      848(AX), X5\n+\tMOVOU      864(AX), X6\n+\tMOVOU      880(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 768(AX)\n+\tMOVOU      X1, 784(AX)\n+\tMOVOU      X2, 800(AX)\n+\tMOVOU      X3, 816(AX)\n+\tMOVOU      X4, 832(AX)\n+\tMOVOU      X5, 848(AX)\n+\tMOVOU      X6, 864(AX)\n+\tMOVOU      X7, 880(AX)\n+\tMOVOU      896(AX), X0\n+\tMOVOU      912(AX), X1\n+\tMOVOU      928(AX), X2\n+\tMOVOU      944(AX), X3\n+\tMOVOU      960(AX), X4\n+\tMOVOU      976(AX), X5\n+\tMOVOU      992(AX), X6\n+\tMOVOU      1008(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 896(AX)\n+\tMOVOU      X1, 912(AX)\n+\tMOVOU      X2, 928(AX)\n+\tMOVOU      X3, 944(AX)\n+\tMOVOU      X4, 960(AX)\n+\tMOVOU      X5, 976(AX)\n+\tMOVOU      X6, 992(AX)\n+\tMOVOU      X7, 1008(AX)\n+\tMOVOU      (AX), X0\n+\tMOVOU      128(AX), X1\n+\tMOVOU      256(AX), X2\n+\tMOVOU      384(AX), X3\n+\tMOVOU      512(AX), X4\n+\tMOVOU      640(AX), X5\n+\tMOVOU      768(AX), X6\n+\tMOVOU      896(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, (AX)\n+\tMOVOU      X1, 128(AX)\n+\tMOVOU      X2, 256(AX)\n+\tMOVOU      X3, 384(AX)\n+\tMOVOU      X4, 512(AX)\n+\tMOVOU      X5, 640(AX)\n+\tMOVOU      X6, 768(AX)\n+\tMOVOU      X7, 896(AX)\n+\tMOVOU      16(AX), X0\n+\tMOVOU      144(AX), X1\n+\tMOVOU      272(AX), X2\n+\tMOVOU      400(AX), X3\n+\tMOVOU      528(AX), X4\n+\tMOVOU      656(AX), X5\n+\tMOVOU      784(AX), X6\n+\tMOVOU      912(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 16(AX)\n+\tMOVOU      X1, 144(AX)\n+\tMOVOU      X2, 272(AX)\n+\tMOVOU      X3, 400(AX)\n+\tMOVOU      X4, 528(AX)\n+\tMOVOU      X5, 656(AX)\n+\tMOVOU      X6, 784(AX)\n+\tMOVOU      X7, 912(AX)\n+\tMOVOU      32(AX), X0\n+\tMOVOU      160(AX), X1\n+\tMOVOU      288(AX), X2\n+\tMOVOU      416(AX), X3\n+\tMOVOU      544(AX), X4\n+\tMOVOU      672(AX), X5\n+\tMOVOU      800(AX), X6\n+\tMOVOU      928(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 32(AX)\n+\tMOVOU      X1, 160(AX)\n+\tMOVOU      X2, 288(AX)\n+\tMOVOU      X3, 416(AX)\n+\tMOVOU      X4, 544(AX)\n+\tMOVOU      X5, 672(AX)\n+\tMOVOU      X6, 800(AX)\n+\tMOVOU      X7, 928(AX)\n+\tMOVOU      48(AX), X0\n+\tMOVOU      176(AX), X1\n+\tMOVOU      304(AX), X2\n+\tMOVOU      432(AX), X3\n+\tMOVOU      560(AX), X4\n+\tMOVOU      688(AX), X5\n+\tMOVOU      816(AX), X6\n+\tMOVOU      944(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 48(AX)\n+\tMOVOU      X1, 176(AX)\n+\tMOVOU      X2, 304(AX)\n+\tMOVOU      X3, 432(AX)\n+\tMOVOU      X4, 560(AX)\n+\tMOVOU      X5, 688(AX)\n+\tMOVOU      X6, 816(AX)\n+\tMOVOU      X7, 944(AX)\n+\tMOVOU      64(AX), X0\n+\tMOVOU      192(AX), X1\n+\tMOVOU      320(AX), X2\n+\tMOVOU      448(AX), X3\n+\tMOVOU      576(AX), X4\n+\tMOVOU      704(AX), X5\n+\tMOVOU      832(AX), X6\n+\tMOVOU      960(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 64(AX)\n+\tMOVOU      X1, 192(AX)\n+\tMOVOU      X2, 320(AX)\n+\tMOVOU      X3, 448(AX)\n+\tMOVOU      X4, 576(AX)\n+\tMOVOU      X5, 704(AX)\n+\tMOVOU      X6, 832(AX)\n+\tMOVOU      X7, 960(AX)\n+\tMOVOU      80(AX), X0\n+\tMOVOU      208(AX), X1\n+\tMOVOU      336(AX), X2\n+\tMOVOU      464(AX), X3\n+\tMOVOU      592(AX), X4\n+\tMOVOU      720(AX), X5\n+\tMOVOU      848(AX), X6\n+\tMOVOU      976(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 80(AX)\n+\tMOVOU      X1, 208(AX)\n+\tMOVOU      X2, 336(AX)\n+\tMOVOU      X3, 464(AX)\n+\tMOVOU      X4, 592(AX)\n+\tMOVOU      X5, 720(AX)\n+\tMOVOU      X6, 848(AX)\n+\tMOVOU      X7, 976(AX)\n+\tMOVOU      96(AX), X0\n+\tMOVOU      224(AX), X1\n+\tMOVOU      352(AX), X2\n+\tMOVOU      480(AX), X3\n+\tMOVOU      608(AX), X4\n+\tMOVOU      736(AX), X5\n+\tMOVOU      864(AX), X6\n+\tMOVOU      992(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 96(AX)\n+\tMOVOU      X1, 224(AX)\n+\tMOVOU      X2, 352(AX)\n+\tMOVOU      X3, 480(AX)\n+\tMOVOU      X4, 608(AX)\n+\tMOVOU      X5, 736(AX)\n+\tMOVOU      X6, 864(AX)\n+\tMOVOU      X7, 992(AX)\n+\tMOVOU      112(AX), X0\n+\tMOVOU      240(AX), X1\n+\tMOVOU      368(AX), X2\n+\tMOVOU      496(AX), X3\n+\tMOVOU      624(AX), X4\n+\tMOVOU      752(AX), X5\n+\tMOVOU      880(AX), X6\n+\tMOVOU      1008(AX), X7\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFD     $0xb1, X6, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tPSHUFB     X10, X2\n+\tMOVO       X0, X8\n+\tPMULULQ    X2, X8\n+\tPADDQ      X2, X0\n+\tPADDQ      X8, X0\n+\tPADDQ      X8, X0\n+\tPXOR       X0, X6\n+\tPSHUFB     X11, X6\n+\tMOVO       X4, X8\n+\tPMULULQ    X6, X8\n+\tPADDQ      X6, X4\n+\tPADDQ      X8, X4\n+\tPADDQ      X8, X4\n+\tPXOR       X4, X2\n+\tMOVO       X2, X8\n+\tPADDQ      X2, X8\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X8, X2\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X7, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tPSHUFB     X10, X3\n+\tMOVO       X1, X8\n+\tPMULULQ    X3, X8\n+\tPADDQ      X3, X1\n+\tPADDQ      X8, X1\n+\tPADDQ      X8, X1\n+\tPXOR       X1, X7\n+\tPSHUFB     X11, X7\n+\tMOVO       X5, X8\n+\tPMULULQ    X7, X8\n+\tPADDQ      X7, X5\n+\tPADDQ      X8, X5\n+\tPADDQ      X8, X5\n+\tPXOR       X5, X3\n+\tMOVO       X3, X8\n+\tPADDQ      X3, X8\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X8, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      X0, 112(AX)\n+\tMOVOU      X1, 240(AX)\n+\tMOVOU      X2, 368(AX)\n+\tMOVOU      X3, 496(AX)\n+\tMOVOU      X4, 624(AX)\n+\tMOVOU      X5, 752(AX)\n+\tMOVOU      X6, 880(AX)\n+\tMOVOU      X7, 1008(AX)\n+\tRET\n+\n+DATA ·c40<>+0(SB)/8, $0x0201000706050403\n+DATA ·c40<>+8(SB)/8, $0x0a09080f0e0d0c0b\n+GLOBL ·c40<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·c48<>+0(SB)/8, $0x0100070605040302\n+DATA ·c48<>+8(SB)/8, $0x09080f0e0d0c0b0a\n+GLOBL ·c48<>(SB), RODATA|NOPTR, $16\n+\n+// func mixBlocksSSE2(out *block, a *block, b *block, c *block)\n+// Requires: SSE2\n+TEXT ·mixBlocksSSE2(SB), NOSPLIT, $0-32\n+\tMOVQ out+0(FP), DX\n+\tMOVQ a+8(FP), AX\n+\tMOVQ b+16(FP), BX\n+\tMOVQ c+24(FP), CX\n+\tMOVQ $0x00000080, DI\n+\n+loop:\n+\tMOVOU (AX), X0\n+\tMOVOU (BX), X1\n+\tMOVOU (CX), X2\n+\tPXOR  X1, X0\n+\tPXOR  X2, X0\n+\tMOVOU X0, (DX)\n+\tADDQ  $0x10, AX\n+\tADDQ  $0x10, BX\n+\tADDQ  $0x10, CX\n+\tADDQ  $0x10, DX\n+\tSUBQ  $0x02, DI\n+\tJA    loop\n+\tRET\n+\n+// func xorBlocksSSE2(out *block, a *block, b *block, c *block)\n+// Requires: SSE2\n+TEXT ·xorBlocksSSE2(SB), NOSPLIT, $0-32\n+\tMOVQ out+0(FP), DX\n+\tMOVQ a+8(FP), AX\n+\tMOVQ b+16(FP), BX\n+\tMOVQ c+24(FP), CX\n+\tMOVQ $0x00000080, DI\n+\n+loop:\n+\tMOVOU (AX), X0\n+\tMOVOU (BX), X1\n+\tMOVOU (CX), X2\n+\tMOVOU (DX), X3\n+\tPXOR  X1, X0\n+\tPXOR  X2, X0\n+\tPXOR  X3, X0\n+\tMOVOU X0, (DX)\n+\tADDQ  $0x10, AX\n+\tADDQ  $0x10, BX\n+\tADDQ  $0x10, CX\n+\tADDQ  $0x10, DX\n+\tSUBQ  $0x02, DI\n+\tJA    loop\n+\tRET"
    },
    {
      "sha": "a481b2243f855fda59f2d0cb3092061d36d14eb9",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/blamka_generic.go",
      "status": "added",
      "additions": 163,
      "deletions": 0,
      "changes": 163,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_generic.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_generic.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_generic.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,163 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package argon2\n+\n+var useSSE4 bool\n+\n+func processBlockGeneric(out, in1, in2 *block, xor bool) {\n+\tvar t block\n+\tfor i := range t {\n+\t\tt[i] = in1[i] ^ in2[i]\n+\t}\n+\tfor i := 0; i < blockLength; i += 16 {\n+\t\tblamkaGeneric(\n+\t\t\t&t[i+0], &t[i+1], &t[i+2], &t[i+3],\n+\t\t\t&t[i+4], &t[i+5], &t[i+6], &t[i+7],\n+\t\t\t&t[i+8], &t[i+9], &t[i+10], &t[i+11],\n+\t\t\t&t[i+12], &t[i+13], &t[i+14], &t[i+15],\n+\t\t)\n+\t}\n+\tfor i := 0; i < blockLength/8; i += 2 {\n+\t\tblamkaGeneric(\n+\t\t\t&t[i], &t[i+1], &t[16+i], &t[16+i+1],\n+\t\t\t&t[32+i], &t[32+i+1], &t[48+i], &t[48+i+1],\n+\t\t\t&t[64+i], &t[64+i+1], &t[80+i], &t[80+i+1],\n+\t\t\t&t[96+i], &t[96+i+1], &t[112+i], &t[112+i+1],\n+\t\t)\n+\t}\n+\tif xor {\n+\t\tfor i := range t {\n+\t\t\tout[i] ^= in1[i] ^ in2[i] ^ t[i]\n+\t\t}\n+\t} else {\n+\t\tfor i := range t {\n+\t\t\tout[i] = in1[i] ^ in2[i] ^ t[i]\n+\t\t}\n+\t}\n+}\n+\n+func blamkaGeneric(t00, t01, t02, t03, t04, t05, t06, t07, t08, t09, t10, t11, t12, t13, t14, t15 *uint64) {\n+\tv00, v01, v02, v03 := *t00, *t01, *t02, *t03\n+\tv04, v05, v06, v07 := *t04, *t05, *t06, *t07\n+\tv08, v09, v10, v11 := *t08, *t09, *t10, *t11\n+\tv12, v13, v14, v15 := *t12, *t13, *t14, *t15\n+\n+\tv00 += v04 + 2*uint64(uint32(v00))*uint64(uint32(v04))\n+\tv12 ^= v00\n+\tv12 = v12>>32 | v12<<32\n+\tv08 += v12 + 2*uint64(uint32(v08))*uint64(uint32(v12))\n+\tv04 ^= v08\n+\tv04 = v04>>24 | v04<<40\n+\n+\tv00 += v04 + 2*uint64(uint32(v00))*uint64(uint32(v04))\n+\tv12 ^= v00\n+\tv12 = v12>>16 | v12<<48\n+\tv08 += v12 + 2*uint64(uint32(v08))*uint64(uint32(v12))\n+\tv04 ^= v08\n+\tv04 = v04>>63 | v04<<1\n+\n+\tv01 += v05 + 2*uint64(uint32(v01))*uint64(uint32(v05))\n+\tv13 ^= v01\n+\tv13 = v13>>32 | v13<<32\n+\tv09 += v13 + 2*uint64(uint32(v09))*uint64(uint32(v13))\n+\tv05 ^= v09\n+\tv05 = v05>>24 | v05<<40\n+\n+\tv01 += v05 + 2*uint64(uint32(v01))*uint64(uint32(v05))\n+\tv13 ^= v01\n+\tv13 = v13>>16 | v13<<48\n+\tv09 += v13 + 2*uint64(uint32(v09))*uint64(uint32(v13))\n+\tv05 ^= v09\n+\tv05 = v05>>63 | v05<<1\n+\n+\tv02 += v06 + 2*uint64(uint32(v02))*uint64(uint32(v06))\n+\tv14 ^= v02\n+\tv14 = v14>>32 | v14<<32\n+\tv10 += v14 + 2*uint64(uint32(v10))*uint64(uint32(v14))\n+\tv06 ^= v10\n+\tv06 = v06>>24 | v06<<40\n+\n+\tv02 += v06 + 2*uint64(uint32(v02))*uint64(uint32(v06))\n+\tv14 ^= v02\n+\tv14 = v14>>16 | v14<<48\n+\tv10 += v14 + 2*uint64(uint32(v10))*uint64(uint32(v14))\n+\tv06 ^= v10\n+\tv06 = v06>>63 | v06<<1\n+\n+\tv03 += v07 + 2*uint64(uint32(v03))*uint64(uint32(v07))\n+\tv15 ^= v03\n+\tv15 = v15>>32 | v15<<32\n+\tv11 += v15 + 2*uint64(uint32(v11))*uint64(uint32(v15))\n+\tv07 ^= v11\n+\tv07 = v07>>24 | v07<<40\n+\n+\tv03 += v07 + 2*uint64(uint32(v03))*uint64(uint32(v07))\n+\tv15 ^= v03\n+\tv15 = v15>>16 | v15<<48\n+\tv11 += v15 + 2*uint64(uint32(v11))*uint64(uint32(v15))\n+\tv07 ^= v11\n+\tv07 = v07>>63 | v07<<1\n+\n+\tv00 += v05 + 2*uint64(uint32(v00))*uint64(uint32(v05))\n+\tv15 ^= v00\n+\tv15 = v15>>32 | v15<<32\n+\tv10 += v15 + 2*uint64(uint32(v10))*uint64(uint32(v15))\n+\tv05 ^= v10\n+\tv05 = v05>>24 | v05<<40\n+\n+\tv00 += v05 + 2*uint64(uint32(v00))*uint64(uint32(v05))\n+\tv15 ^= v00\n+\tv15 = v15>>16 | v15<<48\n+\tv10 += v15 + 2*uint64(uint32(v10))*uint64(uint32(v15))\n+\tv05 ^= v10\n+\tv05 = v05>>63 | v05<<1\n+\n+\tv01 += v06 + 2*uint64(uint32(v01))*uint64(uint32(v06))\n+\tv12 ^= v01\n+\tv12 = v12>>32 | v12<<32\n+\tv11 += v12 + 2*uint64(uint32(v11))*uint64(uint32(v12))\n+\tv06 ^= v11\n+\tv06 = v06>>24 | v06<<40\n+\n+\tv01 += v06 + 2*uint64(uint32(v01))*uint64(uint32(v06))\n+\tv12 ^= v01\n+\tv12 = v12>>16 | v12<<48\n+\tv11 += v12 + 2*uint64(uint32(v11))*uint64(uint32(v12))\n+\tv06 ^= v11\n+\tv06 = v06>>63 | v06<<1\n+\n+\tv02 += v07 + 2*uint64(uint32(v02))*uint64(uint32(v07))\n+\tv13 ^= v02\n+\tv13 = v13>>32 | v13<<32\n+\tv08 += v13 + 2*uint64(uint32(v08))*uint64(uint32(v13))\n+\tv07 ^= v08\n+\tv07 = v07>>24 | v07<<40\n+\n+\tv02 += v07 + 2*uint64(uint32(v02))*uint64(uint32(v07))\n+\tv13 ^= v02\n+\tv13 = v13>>16 | v13<<48\n+\tv08 += v13 + 2*uint64(uint32(v08))*uint64(uint32(v13))\n+\tv07 ^= v08\n+\tv07 = v07>>63 | v07<<1\n+\n+\tv03 += v04 + 2*uint64(uint32(v03))*uint64(uint32(v04))\n+\tv14 ^= v03\n+\tv14 = v14>>32 | v14<<32\n+\tv09 += v14 + 2*uint64(uint32(v09))*uint64(uint32(v14))\n+\tv04 ^= v09\n+\tv04 = v04>>24 | v04<<40\n+\n+\tv03 += v04 + 2*uint64(uint32(v03))*uint64(uint32(v04))\n+\tv14 ^= v03\n+\tv14 = v14>>16 | v14<<48\n+\tv09 += v14 + 2*uint64(uint32(v09))*uint64(uint32(v14))\n+\tv04 ^= v09\n+\tv04 = v04>>63 | v04<<1\n+\n+\t*t00, *t01, *t02, *t03 = v00, v01, v02, v03\n+\t*t04, *t05, *t06, *t07 = v04, v05, v06, v07\n+\t*t08, *t09, *t10, *t11 = v08, v09, v10, v11\n+\t*t12, *t13, *t14, *t15 = v12, v13, v14, v15\n+}"
    },
    {
      "sha": "16d58c650eb5e3d245cc1089f657e36bc3b88e49",
      "filename": "backend/vendor/golang.org/x/crypto/argon2/blamka_ref.go",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_ref.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_ref.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fargon2%2Fblamka_ref.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !amd64 || purego || !gc\n+\n+package argon2\n+\n+func processBlock(out, in1, in2 *block) {\n+\tprocessBlockGeneric(out, in1, in2, false)\n+}\n+\n+func processBlockXOR(out, in1, in2 *block) {\n+\tprocessBlockGeneric(out, in1, in2, true)\n+}"
    },
    {
      "sha": "fc311609081849d379013a25310456fbb1a6e66a",
      "filename": "backend/vendor/golang.org/x/crypto/bcrypt/base64.go",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbase64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbase64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbase64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bcrypt\n+\n+import \"encoding/base64\"\n+\n+const alphabet = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n+\n+var bcEncoding = base64.NewEncoding(alphabet)\n+\n+func base64Encode(src []byte) []byte {\n+\tn := bcEncoding.EncodedLen(len(src))\n+\tdst := make([]byte, n)\n+\tbcEncoding.Encode(dst, src)\n+\tfor dst[n-1] == '=' {\n+\t\tn--\n+\t}\n+\treturn dst[:n]\n+}\n+\n+func base64Decode(src []byte) ([]byte, error) {\n+\tnumOfEquals := 4 - (len(src) % 4)\n+\tfor i := 0; i < numOfEquals; i++ {\n+\t\tsrc = append(src, '=')\n+\t}\n+\n+\tdst := make([]byte, bcEncoding.DecodedLen(len(src)))\n+\tn, err := bcEncoding.Decode(dst, src)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn dst[:n], nil\n+}"
    },
    {
      "sha": "dc9311870a5dc627ab6ec14f6d4423c6f54d791e",
      "filename": "backend/vendor/golang.org/x/crypto/bcrypt/bcrypt.go",
      "status": "added",
      "additions": 304,
      "deletions": 0,
      "changes": 304,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbcrypt.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbcrypt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fbcrypt%2Fbcrypt.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,304 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package bcrypt implements Provos and Mazières's bcrypt adaptive hashing\n+// algorithm. See http://www.usenix.org/event/usenix99/provos/provos.pdf\n+package bcrypt\n+\n+// The code is a port of Provos and Mazières's C implementation.\n+import (\n+\t\"crypto/rand\"\n+\t\"crypto/subtle\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"strconv\"\n+\n+\t\"golang.org/x/crypto/blowfish\"\n+)\n+\n+const (\n+\tMinCost     int = 4  // the minimum allowable cost as passed in to GenerateFromPassword\n+\tMaxCost     int = 31 // the maximum allowable cost as passed in to GenerateFromPassword\n+\tDefaultCost int = 10 // the cost that will actually be set if a cost below MinCost is passed into GenerateFromPassword\n+)\n+\n+// The error returned from CompareHashAndPassword when a password and hash do\n+// not match.\n+var ErrMismatchedHashAndPassword = errors.New(\"crypto/bcrypt: hashedPassword is not the hash of the given password\")\n+\n+// The error returned from CompareHashAndPassword when a hash is too short to\n+// be a bcrypt hash.\n+var ErrHashTooShort = errors.New(\"crypto/bcrypt: hashedSecret too short to be a bcrypted password\")\n+\n+// The error returned from CompareHashAndPassword when a hash was created with\n+// a bcrypt algorithm newer than this implementation.\n+type HashVersionTooNewError byte\n+\n+func (hv HashVersionTooNewError) Error() string {\n+\treturn fmt.Sprintf(\"crypto/bcrypt: bcrypt algorithm version '%c' requested is newer than current version '%c'\", byte(hv), majorVersion)\n+}\n+\n+// The error returned from CompareHashAndPassword when a hash starts with something other than '$'\n+type InvalidHashPrefixError byte\n+\n+func (ih InvalidHashPrefixError) Error() string {\n+\treturn fmt.Sprintf(\"crypto/bcrypt: bcrypt hashes must start with '$', but hashedSecret started with '%c'\", byte(ih))\n+}\n+\n+type InvalidCostError int\n+\n+func (ic InvalidCostError) Error() string {\n+\treturn fmt.Sprintf(\"crypto/bcrypt: cost %d is outside allowed range (%d,%d)\", int(ic), MinCost, MaxCost)\n+}\n+\n+const (\n+\tmajorVersion       = '2'\n+\tminorVersion       = 'a'\n+\tmaxSaltSize        = 16\n+\tmaxCryptedHashSize = 23\n+\tencodedSaltSize    = 22\n+\tencodedHashSize    = 31\n+\tminHashSize        = 59\n+)\n+\n+// magicCipherData is an IV for the 64 Blowfish encryption calls in\n+// bcrypt(). It's the string \"OrpheanBeholderScryDoubt\" in big-endian bytes.\n+var magicCipherData = []byte{\n+\t0x4f, 0x72, 0x70, 0x68,\n+\t0x65, 0x61, 0x6e, 0x42,\n+\t0x65, 0x68, 0x6f, 0x6c,\n+\t0x64, 0x65, 0x72, 0x53,\n+\t0x63, 0x72, 0x79, 0x44,\n+\t0x6f, 0x75, 0x62, 0x74,\n+}\n+\n+type hashed struct {\n+\thash  []byte\n+\tsalt  []byte\n+\tcost  int // allowed range is MinCost to MaxCost\n+\tmajor byte\n+\tminor byte\n+}\n+\n+// ErrPasswordTooLong is returned when the password passed to\n+// GenerateFromPassword is too long (i.e. > 72 bytes).\n+var ErrPasswordTooLong = errors.New(\"bcrypt: password length exceeds 72 bytes\")\n+\n+// GenerateFromPassword returns the bcrypt hash of the password at the given\n+// cost. If the cost given is less than MinCost, the cost will be set to\n+// DefaultCost, instead. Use CompareHashAndPassword, as defined in this package,\n+// to compare the returned hashed password with its cleartext version.\n+// GenerateFromPassword does not accept passwords longer than 72 bytes, which\n+// is the longest password bcrypt will operate on.\n+func GenerateFromPassword(password []byte, cost int) ([]byte, error) {\n+\tif len(password) > 72 {\n+\t\treturn nil, ErrPasswordTooLong\n+\t}\n+\tp, err := newFromPassword(password, cost)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn p.Hash(), nil\n+}\n+\n+// CompareHashAndPassword compares a bcrypt hashed password with its possible\n+// plaintext equivalent. Returns nil on success, or an error on failure.\n+func CompareHashAndPassword(hashedPassword, password []byte) error {\n+\tp, err := newFromHash(hashedPassword)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\totherHash, err := bcrypt(password, p.cost, p.salt)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\totherP := &hashed{otherHash, p.salt, p.cost, p.major, p.minor}\n+\tif subtle.ConstantTimeCompare(p.Hash(), otherP.Hash()) == 1 {\n+\t\treturn nil\n+\t}\n+\n+\treturn ErrMismatchedHashAndPassword\n+}\n+\n+// Cost returns the hashing cost used to create the given hashed\n+// password. When, in the future, the hashing cost of a password system needs\n+// to be increased in order to adjust for greater computational power, this\n+// function allows one to establish which passwords need to be updated.\n+func Cost(hashedPassword []byte) (int, error) {\n+\tp, err := newFromHash(hashedPassword)\n+\tif err != nil {\n+\t\treturn 0, err\n+\t}\n+\treturn p.cost, nil\n+}\n+\n+func newFromPassword(password []byte, cost int) (*hashed, error) {\n+\tif cost < MinCost {\n+\t\tcost = DefaultCost\n+\t}\n+\tp := new(hashed)\n+\tp.major = majorVersion\n+\tp.minor = minorVersion\n+\n+\terr := checkCost(cost)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tp.cost = cost\n+\n+\tunencodedSalt := make([]byte, maxSaltSize)\n+\t_, err = io.ReadFull(rand.Reader, unencodedSalt)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tp.salt = base64Encode(unencodedSalt)\n+\thash, err := bcrypt(password, p.cost, p.salt)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tp.hash = hash\n+\treturn p, err\n+}\n+\n+func newFromHash(hashedSecret []byte) (*hashed, error) {\n+\tif len(hashedSecret) < minHashSize {\n+\t\treturn nil, ErrHashTooShort\n+\t}\n+\tp := new(hashed)\n+\tn, err := p.decodeVersion(hashedSecret)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\thashedSecret = hashedSecret[n:]\n+\tn, err = p.decodeCost(hashedSecret)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\thashedSecret = hashedSecret[n:]\n+\n+\t// The \"+2\" is here because we'll have to append at most 2 '=' to the salt\n+\t// when base64 decoding it in expensiveBlowfishSetup().\n+\tp.salt = make([]byte, encodedSaltSize, encodedSaltSize+2)\n+\tcopy(p.salt, hashedSecret[:encodedSaltSize])\n+\n+\thashedSecret = hashedSecret[encodedSaltSize:]\n+\tp.hash = make([]byte, len(hashedSecret))\n+\tcopy(p.hash, hashedSecret)\n+\n+\treturn p, nil\n+}\n+\n+func bcrypt(password []byte, cost int, salt []byte) ([]byte, error) {\n+\tcipherData := make([]byte, len(magicCipherData))\n+\tcopy(cipherData, magicCipherData)\n+\n+\tc, err := expensiveBlowfishSetup(password, uint32(cost), salt)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tfor i := 0; i < 24; i += 8 {\n+\t\tfor j := 0; j < 64; j++ {\n+\t\t\tc.Encrypt(cipherData[i:i+8], cipherData[i:i+8])\n+\t\t}\n+\t}\n+\n+\t// Bug compatibility with C bcrypt implementations. We only encode 23 of\n+\t// the 24 bytes encrypted.\n+\thsh := base64Encode(cipherData[:maxCryptedHashSize])\n+\treturn hsh, nil\n+}\n+\n+func expensiveBlowfishSetup(key []byte, cost uint32, salt []byte) (*blowfish.Cipher, error) {\n+\tcsalt, err := base64Decode(salt)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// Bug compatibility with C bcrypt implementations. They use the trailing\n+\t// NULL in the key string during expansion.\n+\t// We copy the key to prevent changing the underlying array.\n+\tckey := append(key[:len(key):len(key)], 0)\n+\n+\tc, err := blowfish.NewSaltedCipher(ckey, csalt)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tvar i, rounds uint64\n+\trounds = 1 << cost\n+\tfor i = 0; i < rounds; i++ {\n+\t\tblowfish.ExpandKey(ckey, c)\n+\t\tblowfish.ExpandKey(csalt, c)\n+\t}\n+\n+\treturn c, nil\n+}\n+\n+func (p *hashed) Hash() []byte {\n+\tarr := make([]byte, 60)\n+\tarr[0] = '$'\n+\tarr[1] = p.major\n+\tn := 2\n+\tif p.minor != 0 {\n+\t\tarr[2] = p.minor\n+\t\tn = 3\n+\t}\n+\tarr[n] = '$'\n+\tn++\n+\tcopy(arr[n:], []byte(fmt.Sprintf(\"%02d\", p.cost)))\n+\tn += 2\n+\tarr[n] = '$'\n+\tn++\n+\tcopy(arr[n:], p.salt)\n+\tn += encodedSaltSize\n+\tcopy(arr[n:], p.hash)\n+\tn += encodedHashSize\n+\treturn arr[:n]\n+}\n+\n+func (p *hashed) decodeVersion(sbytes []byte) (int, error) {\n+\tif sbytes[0] != '$' {\n+\t\treturn -1, InvalidHashPrefixError(sbytes[0])\n+\t}\n+\tif sbytes[1] > majorVersion {\n+\t\treturn -1, HashVersionTooNewError(sbytes[1])\n+\t}\n+\tp.major = sbytes[1]\n+\tn := 3\n+\tif sbytes[2] != '$' {\n+\t\tp.minor = sbytes[2]\n+\t\tn++\n+\t}\n+\treturn n, nil\n+}\n+\n+// sbytes should begin where decodeVersion left off.\n+func (p *hashed) decodeCost(sbytes []byte) (int, error) {\n+\tcost, err := strconv.Atoi(string(sbytes[0:2]))\n+\tif err != nil {\n+\t\treturn -1, err\n+\t}\n+\terr = checkCost(cost)\n+\tif err != nil {\n+\t\treturn -1, err\n+\t}\n+\tp.cost = cost\n+\treturn 3, nil\n+}\n+\n+func (p *hashed) String() string {\n+\treturn fmt.Sprintf(\"&{hash: %#v, salt: %#v, cost: %d, major: %c, minor: %c}\", string(p.hash), p.salt, p.cost, p.major, p.minor)\n+}\n+\n+func checkCost(cost int) error {\n+\tif cost < MinCost || cost > MaxCost {\n+\t\treturn InvalidCostError(cost)\n+\t}\n+\treturn nil\n+}"
    },
    {
      "sha": "d2e98d4295bdb83774fee0bb36ac25dc18548f25",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2b.go",
      "status": "added",
      "additions": 291,
      "deletions": 0,
      "changes": 291,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,291 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package blake2b implements the BLAKE2b hash algorithm defined by RFC 7693\n+// and the extendable output function (XOF) BLAKE2Xb.\n+//\n+// BLAKE2b is optimized for 64-bit platforms—including NEON-enabled ARMs—and\n+// produces digests of any size between 1 and 64 bytes.\n+// For a detailed specification of BLAKE2b see https://blake2.net/blake2.pdf\n+// and for BLAKE2Xb see https://blake2.net/blake2x.pdf\n+//\n+// If you aren't sure which function you need, use BLAKE2b (Sum512 or New512).\n+// If you need a secret-key MAC (message authentication code), use the New512\n+// function with a non-nil key.\n+//\n+// BLAKE2X is a construction to compute hash values larger than 64 bytes. It\n+// can produce hash values between 0 and 4 GiB.\n+package blake2b\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"errors\"\n+\t\"hash\"\n+)\n+\n+const (\n+\t// The blocksize of BLAKE2b in bytes.\n+\tBlockSize = 128\n+\t// The hash size of BLAKE2b-512 in bytes.\n+\tSize = 64\n+\t// The hash size of BLAKE2b-384 in bytes.\n+\tSize384 = 48\n+\t// The hash size of BLAKE2b-256 in bytes.\n+\tSize256 = 32\n+)\n+\n+var (\n+\tuseAVX2 bool\n+\tuseAVX  bool\n+\tuseSSE4 bool\n+)\n+\n+var (\n+\terrKeySize  = errors.New(\"blake2b: invalid key size\")\n+\terrHashSize = errors.New(\"blake2b: invalid hash size\")\n+)\n+\n+var iv = [8]uint64{\n+\t0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,\n+\t0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,\n+}\n+\n+// Sum512 returns the BLAKE2b-512 checksum of the data.\n+func Sum512(data []byte) [Size]byte {\n+\tvar sum [Size]byte\n+\tcheckSum(&sum, Size, data)\n+\treturn sum\n+}\n+\n+// Sum384 returns the BLAKE2b-384 checksum of the data.\n+func Sum384(data []byte) [Size384]byte {\n+\tvar sum [Size]byte\n+\tvar sum384 [Size384]byte\n+\tcheckSum(&sum, Size384, data)\n+\tcopy(sum384[:], sum[:Size384])\n+\treturn sum384\n+}\n+\n+// Sum256 returns the BLAKE2b-256 checksum of the data.\n+func Sum256(data []byte) [Size256]byte {\n+\tvar sum [Size]byte\n+\tvar sum256 [Size256]byte\n+\tcheckSum(&sum, Size256, data)\n+\tcopy(sum256[:], sum[:Size256])\n+\treturn sum256\n+}\n+\n+// New512 returns a new hash.Hash computing the BLAKE2b-512 checksum. A non-nil\n+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.\n+func New512(key []byte) (hash.Hash, error) { return newDigest(Size, key) }\n+\n+// New384 returns a new hash.Hash computing the BLAKE2b-384 checksum. A non-nil\n+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.\n+func New384(key []byte) (hash.Hash, error) { return newDigest(Size384, key) }\n+\n+// New256 returns a new hash.Hash computing the BLAKE2b-256 checksum. A non-nil\n+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.\n+func New256(key []byte) (hash.Hash, error) { return newDigest(Size256, key) }\n+\n+// New returns a new hash.Hash computing the BLAKE2b checksum with a custom length.\n+// A non-nil key turns the hash into a MAC. The key must be between zero and 64 bytes long.\n+// The hash size can be a value between 1 and 64 but it is highly recommended to use\n+// values equal or greater than:\n+// - 32 if BLAKE2b is used as a hash function (The key is zero bytes long).\n+// - 16 if BLAKE2b is used as a MAC function (The key is at least 16 bytes long).\n+// When the key is nil, the returned hash.Hash implements BinaryMarshaler\n+// and BinaryUnmarshaler for state (de)serialization as documented by hash.Hash.\n+func New(size int, key []byte) (hash.Hash, error) { return newDigest(size, key) }\n+\n+func newDigest(hashSize int, key []byte) (*digest, error) {\n+\tif hashSize < 1 || hashSize > Size {\n+\t\treturn nil, errHashSize\n+\t}\n+\tif len(key) > Size {\n+\t\treturn nil, errKeySize\n+\t}\n+\td := &digest{\n+\t\tsize:   hashSize,\n+\t\tkeyLen: len(key),\n+\t}\n+\tcopy(d.key[:], key)\n+\td.Reset()\n+\treturn d, nil\n+}\n+\n+func checkSum(sum *[Size]byte, hashSize int, data []byte) {\n+\th := iv\n+\th[0] ^= uint64(hashSize) | (1 << 16) | (1 << 24)\n+\tvar c [2]uint64\n+\n+\tif length := len(data); length > BlockSize {\n+\t\tn := length &^ (BlockSize - 1)\n+\t\tif length == n {\n+\t\t\tn -= BlockSize\n+\t\t}\n+\t\thashBlocks(&h, &c, 0, data[:n])\n+\t\tdata = data[n:]\n+\t}\n+\n+\tvar block [BlockSize]byte\n+\toffset := copy(block[:], data)\n+\tremaining := uint64(BlockSize - offset)\n+\tif c[0] < remaining {\n+\t\tc[1]--\n+\t}\n+\tc[0] -= remaining\n+\n+\thashBlocks(&h, &c, 0xFFFFFFFFFFFFFFFF, block[:])\n+\n+\tfor i, v := range h[:(hashSize+7)/8] {\n+\t\tbinary.LittleEndian.PutUint64(sum[8*i:], v)\n+\t}\n+}\n+\n+type digest struct {\n+\th      [8]uint64\n+\tc      [2]uint64\n+\tsize   int\n+\tblock  [BlockSize]byte\n+\toffset int\n+\n+\tkey    [BlockSize]byte\n+\tkeyLen int\n+}\n+\n+const (\n+\tmagic         = \"b2b\"\n+\tmarshaledSize = len(magic) + 8*8 + 2*8 + 1 + BlockSize + 1\n+)\n+\n+func (d *digest) MarshalBinary() ([]byte, error) {\n+\tif d.keyLen != 0 {\n+\t\treturn nil, errors.New(\"crypto/blake2b: cannot marshal MACs\")\n+\t}\n+\tb := make([]byte, 0, marshaledSize)\n+\tb = append(b, magic...)\n+\tfor i := 0; i < 8; i++ {\n+\t\tb = appendUint64(b, d.h[i])\n+\t}\n+\tb = appendUint64(b, d.c[0])\n+\tb = appendUint64(b, d.c[1])\n+\t// Maximum value for size is 64\n+\tb = append(b, byte(d.size))\n+\tb = append(b, d.block[:]...)\n+\tb = append(b, byte(d.offset))\n+\treturn b, nil\n+}\n+\n+func (d *digest) UnmarshalBinary(b []byte) error {\n+\tif len(b) < len(magic) || string(b[:len(magic)]) != magic {\n+\t\treturn errors.New(\"crypto/blake2b: invalid hash state identifier\")\n+\t}\n+\tif len(b) != marshaledSize {\n+\t\treturn errors.New(\"crypto/blake2b: invalid hash state size\")\n+\t}\n+\tb = b[len(magic):]\n+\tfor i := 0; i < 8; i++ {\n+\t\tb, d.h[i] = consumeUint64(b)\n+\t}\n+\tb, d.c[0] = consumeUint64(b)\n+\tb, d.c[1] = consumeUint64(b)\n+\td.size = int(b[0])\n+\tb = b[1:]\n+\tcopy(d.block[:], b[:BlockSize])\n+\tb = b[BlockSize:]\n+\td.offset = int(b[0])\n+\treturn nil\n+}\n+\n+func (d *digest) BlockSize() int { return BlockSize }\n+\n+func (d *digest) Size() int { return d.size }\n+\n+func (d *digest) Reset() {\n+\td.h = iv\n+\td.h[0] ^= uint64(d.size) | (uint64(d.keyLen) << 8) | (1 << 16) | (1 << 24)\n+\td.offset, d.c[0], d.c[1] = 0, 0, 0\n+\tif d.keyLen > 0 {\n+\t\td.block = d.key\n+\t\td.offset = BlockSize\n+\t}\n+}\n+\n+func (d *digest) Write(p []byte) (n int, err error) {\n+\tn = len(p)\n+\n+\tif d.offset > 0 {\n+\t\tremaining := BlockSize - d.offset\n+\t\tif n <= remaining {\n+\t\t\td.offset += copy(d.block[d.offset:], p)\n+\t\t\treturn\n+\t\t}\n+\t\tcopy(d.block[d.offset:], p[:remaining])\n+\t\thashBlocks(&d.h, &d.c, 0, d.block[:])\n+\t\td.offset = 0\n+\t\tp = p[remaining:]\n+\t}\n+\n+\tif length := len(p); length > BlockSize {\n+\t\tnn := length &^ (BlockSize - 1)\n+\t\tif length == nn {\n+\t\t\tnn -= BlockSize\n+\t\t}\n+\t\thashBlocks(&d.h, &d.c, 0, p[:nn])\n+\t\tp = p[nn:]\n+\t}\n+\n+\tif len(p) > 0 {\n+\t\td.offset += copy(d.block[:], p)\n+\t}\n+\n+\treturn\n+}\n+\n+func (d *digest) Sum(sum []byte) []byte {\n+\tvar hash [Size]byte\n+\td.finalize(&hash)\n+\treturn append(sum, hash[:d.size]...)\n+}\n+\n+func (d *digest) finalize(hash *[Size]byte) {\n+\tvar block [BlockSize]byte\n+\tcopy(block[:], d.block[:d.offset])\n+\tremaining := uint64(BlockSize - d.offset)\n+\n+\tc := d.c\n+\tif c[0] < remaining {\n+\t\tc[1]--\n+\t}\n+\tc[0] -= remaining\n+\n+\th := d.h\n+\thashBlocks(&h, &c, 0xFFFFFFFFFFFFFFFF, block[:])\n+\n+\tfor i, v := range h {\n+\t\tbinary.LittleEndian.PutUint64(hash[8*i:], v)\n+\t}\n+}\n+\n+func appendUint64(b []byte, x uint64) []byte {\n+\tvar a [8]byte\n+\tbinary.BigEndian.PutUint64(a[:], x)\n+\treturn append(b, a[:]...)\n+}\n+\n+func appendUint32(b []byte, x uint32) []byte {\n+\tvar a [4]byte\n+\tbinary.BigEndian.PutUint32(a[:], x)\n+\treturn append(b, a[:]...)\n+}\n+\n+func consumeUint64(b []byte) ([]byte, uint64) {\n+\tx := binary.BigEndian.Uint64(b)\n+\treturn b[8:], x\n+}\n+\n+func consumeUint32(b []byte) ([]byte, uint32) {\n+\tx := binary.BigEndian.Uint32(b)\n+\treturn b[4:], x\n+}"
    },
    {
      "sha": "199c21d27aad4d119d9ae197705fc3d10694afe3",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2bAVX2_amd64.go",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build amd64 && gc && !purego\n+\n+package blake2b\n+\n+import \"golang.org/x/sys/cpu\"\n+\n+func init() {\n+\tuseAVX2 = cpu.X86.HasAVX2\n+\tuseAVX = cpu.X86.HasAVX\n+\tuseSSE4 = cpu.X86.HasSSE41\n+}\n+\n+//go:noescape\n+func hashBlocksAVX2(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte)\n+\n+//go:noescape\n+func hashBlocksAVX(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte)\n+\n+//go:noescape\n+func hashBlocksSSE4(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte)\n+\n+func hashBlocks(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte) {\n+\tswitch {\n+\tcase useAVX2:\n+\t\thashBlocksAVX2(h, c, flag, blocks)\n+\tcase useAVX:\n+\t\thashBlocksAVX(h, c, flag, blocks)\n+\tcase useSSE4:\n+\t\thashBlocksSSE4(h, c, flag, blocks)\n+\tdefault:\n+\t\thashBlocksGeneric(h, c, flag, blocks)\n+\t}\n+}"
    },
    {
      "sha": "f75162e039c10a29690c25dc895343c7aa1c6a3a",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2bAVX2_amd64.s",
      "status": "added",
      "additions": 4559,
      "deletions": 0,
      "changes": 4559,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2bAVX2_amd64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6"
    },
    {
      "sha": "9a0ce2124462f63b5b72532a12a999769ef9f2bd",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2b_amd64.s",
      "status": "added",
      "additions": 1441,
      "deletions": 0,
      "changes": 1441,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_amd64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_amd64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_amd64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,1441 @@\n+// Code generated by command: go run blake2b_amd64_asm.go -out ../../blake2b_amd64.s -pkg blake2b. DO NOT EDIT.\n+\n+//go:build amd64 && gc && !purego\n+\n+#include \"textflag.h\"\n+\n+// func hashBlocksSSE4(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte)\n+// Requires: SSE2, SSE4.1, SSSE3\n+TEXT ·hashBlocksSSE4(SB), NOSPLIT, $288-48\n+\tMOVQ  h+0(FP), AX\n+\tMOVQ  c+8(FP), BX\n+\tMOVQ  flag+16(FP), CX\n+\tMOVQ  blocks_base+24(FP), SI\n+\tMOVQ  blocks_len+32(FP), DI\n+\tMOVQ  SP, R10\n+\tADDQ  $0x0f, R10\n+\tANDQ  $-16, R10\n+\tMOVOU ·iv3<>+0(SB), X0\n+\tMOVO  X0, (R10)\n+\tXORQ  CX, (R10)\n+\tMOVOU ·c40<>+0(SB), X13\n+\tMOVOU ·c48<>+0(SB), X14\n+\tMOVOU (AX), X12\n+\tMOVOU 16(AX), X15\n+\tMOVQ  (BX), R8\n+\tMOVQ  8(BX), R9\n+\n+loop:\n+\tADDQ $0x80, R8\n+\tCMPQ R8, $0x80\n+\tJGE  noinc\n+\tINCQ R9\n+\n+noinc:\n+\tMOVQ       R8, X8\n+\tPINSRQ     $0x01, R9, X8\n+\tMOVO       X12, X0\n+\tMOVO       X15, X1\n+\tMOVOU      32(AX), X2\n+\tMOVOU      48(AX), X3\n+\tMOVOU      ·iv0<>+0(SB), X4\n+\tMOVOU      ·iv1<>+0(SB), X5\n+\tMOVOU      ·iv2<>+0(SB), X6\n+\tPXOR       X8, X6\n+\tMOVO       (R10), X7\n+\tMOVQ       (SI), X8\n+\tPINSRQ     $0x01, 16(SI), X8\n+\tMOVQ       32(SI), X9\n+\tPINSRQ     $0x01, 48(SI), X9\n+\tMOVQ       8(SI), X10\n+\tPINSRQ     $0x01, 24(SI), X10\n+\tMOVQ       40(SI), X11\n+\tPINSRQ     $0x01, 56(SI), X11\n+\tMOVO       X8, 16(R10)\n+\tMOVO       X9, 32(R10)\n+\tMOVO       X10, 48(R10)\n+\tMOVO       X11, 64(R10)\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       64(SI), X8\n+\tPINSRQ     $0x01, 80(SI), X8\n+\tMOVQ       96(SI), X9\n+\tPINSRQ     $0x01, 112(SI), X9\n+\tMOVQ       72(SI), X10\n+\tPINSRQ     $0x01, 88(SI), X10\n+\tMOVQ       104(SI), X11\n+\tPINSRQ     $0x01, 120(SI), X11\n+\tMOVO       X8, 80(R10)\n+\tMOVO       X9, 96(R10)\n+\tMOVO       X10, 112(R10)\n+\tMOVO       X11, 128(R10)\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       112(SI), X8\n+\tPINSRQ     $0x01, 32(SI), X8\n+\tMOVQ       72(SI), X9\n+\tPINSRQ     $0x01, 104(SI), X9\n+\tMOVQ       80(SI), X10\n+\tPINSRQ     $0x01, 64(SI), X10\n+\tMOVQ       120(SI), X11\n+\tPINSRQ     $0x01, 48(SI), X11\n+\tMOVO       X8, 144(R10)\n+\tMOVO       X9, 160(R10)\n+\tMOVO       X10, 176(R10)\n+\tMOVO       X11, 192(R10)\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       8(SI), X8\n+\tPINSRQ     $0x01, (SI), X8\n+\tMOVQ       88(SI), X9\n+\tPINSRQ     $0x01, 40(SI), X9\n+\tMOVQ       96(SI), X10\n+\tPINSRQ     $0x01, 16(SI), X10\n+\tMOVQ       56(SI), X11\n+\tPINSRQ     $0x01, 24(SI), X11\n+\tMOVO       X8, 208(R10)\n+\tMOVO       X9, 224(R10)\n+\tMOVO       X10, 240(R10)\n+\tMOVO       X11, 256(R10)\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       88(SI), X8\n+\tPINSRQ     $0x01, 96(SI), X8\n+\tMOVQ       40(SI), X9\n+\tPINSRQ     $0x01, 120(SI), X9\n+\tMOVQ       64(SI), X10\n+\tPINSRQ     $0x01, (SI), X10\n+\tMOVQ       16(SI), X11\n+\tPINSRQ     $0x01, 104(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       80(SI), X8\n+\tPINSRQ     $0x01, 24(SI), X8\n+\tMOVQ       56(SI), X9\n+\tPINSRQ     $0x01, 72(SI), X9\n+\tMOVQ       112(SI), X10\n+\tPINSRQ     $0x01, 48(SI), X10\n+\tMOVQ       8(SI), X11\n+\tPINSRQ     $0x01, 32(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       56(SI), X8\n+\tPINSRQ     $0x01, 24(SI), X8\n+\tMOVQ       104(SI), X9\n+\tPINSRQ     $0x01, 88(SI), X9\n+\tMOVQ       72(SI), X10\n+\tPINSRQ     $0x01, 8(SI), X10\n+\tMOVQ       96(SI), X11\n+\tPINSRQ     $0x01, 112(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       16(SI), X8\n+\tPINSRQ     $0x01, 40(SI), X8\n+\tMOVQ       32(SI), X9\n+\tPINSRQ     $0x01, 120(SI), X9\n+\tMOVQ       48(SI), X10\n+\tPINSRQ     $0x01, 80(SI), X10\n+\tMOVQ       (SI), X11\n+\tPINSRQ     $0x01, 64(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       72(SI), X8\n+\tPINSRQ     $0x01, 40(SI), X8\n+\tMOVQ       16(SI), X9\n+\tPINSRQ     $0x01, 80(SI), X9\n+\tMOVQ       (SI), X10\n+\tPINSRQ     $0x01, 56(SI), X10\n+\tMOVQ       32(SI), X11\n+\tPINSRQ     $0x01, 120(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       112(SI), X8\n+\tPINSRQ     $0x01, 88(SI), X8\n+\tMOVQ       48(SI), X9\n+\tPINSRQ     $0x01, 24(SI), X9\n+\tMOVQ       8(SI), X10\n+\tPINSRQ     $0x01, 96(SI), X10\n+\tMOVQ       64(SI), X11\n+\tPINSRQ     $0x01, 104(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       16(SI), X8\n+\tPINSRQ     $0x01, 48(SI), X8\n+\tMOVQ       (SI), X9\n+\tPINSRQ     $0x01, 64(SI), X9\n+\tMOVQ       96(SI), X10\n+\tPINSRQ     $0x01, 80(SI), X10\n+\tMOVQ       88(SI), X11\n+\tPINSRQ     $0x01, 24(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       32(SI), X8\n+\tPINSRQ     $0x01, 56(SI), X8\n+\tMOVQ       120(SI), X9\n+\tPINSRQ     $0x01, 8(SI), X9\n+\tMOVQ       104(SI), X10\n+\tPINSRQ     $0x01, 40(SI), X10\n+\tMOVQ       112(SI), X11\n+\tPINSRQ     $0x01, 72(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       96(SI), X8\n+\tPINSRQ     $0x01, 8(SI), X8\n+\tMOVQ       112(SI), X9\n+\tPINSRQ     $0x01, 32(SI), X9\n+\tMOVQ       40(SI), X10\n+\tPINSRQ     $0x01, 120(SI), X10\n+\tMOVQ       104(SI), X11\n+\tPINSRQ     $0x01, 80(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       (SI), X8\n+\tPINSRQ     $0x01, 48(SI), X8\n+\tMOVQ       72(SI), X9\n+\tPINSRQ     $0x01, 64(SI), X9\n+\tMOVQ       56(SI), X10\n+\tPINSRQ     $0x01, 24(SI), X10\n+\tMOVQ       16(SI), X11\n+\tPINSRQ     $0x01, 88(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       104(SI), X8\n+\tPINSRQ     $0x01, 56(SI), X8\n+\tMOVQ       96(SI), X9\n+\tPINSRQ     $0x01, 24(SI), X9\n+\tMOVQ       88(SI), X10\n+\tPINSRQ     $0x01, 112(SI), X10\n+\tMOVQ       8(SI), X11\n+\tPINSRQ     $0x01, 72(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       40(SI), X8\n+\tPINSRQ     $0x01, 120(SI), X8\n+\tMOVQ       64(SI), X9\n+\tPINSRQ     $0x01, 16(SI), X9\n+\tMOVQ       (SI), X10\n+\tPINSRQ     $0x01, 32(SI), X10\n+\tMOVQ       48(SI), X11\n+\tPINSRQ     $0x01, 80(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       48(SI), X8\n+\tPINSRQ     $0x01, 112(SI), X8\n+\tMOVQ       88(SI), X9\n+\tPINSRQ     $0x01, (SI), X9\n+\tMOVQ       120(SI), X10\n+\tPINSRQ     $0x01, 72(SI), X10\n+\tMOVQ       24(SI), X11\n+\tPINSRQ     $0x01, 64(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       96(SI), X8\n+\tPINSRQ     $0x01, 104(SI), X8\n+\tMOVQ       8(SI), X9\n+\tPINSRQ     $0x01, 80(SI), X9\n+\tMOVQ       16(SI), X10\n+\tPINSRQ     $0x01, 56(SI), X10\n+\tMOVQ       32(SI), X11\n+\tPINSRQ     $0x01, 40(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVQ       80(SI), X8\n+\tPINSRQ     $0x01, 64(SI), X8\n+\tMOVQ       56(SI), X9\n+\tPINSRQ     $0x01, 8(SI), X9\n+\tMOVQ       16(SI), X10\n+\tPINSRQ     $0x01, 32(SI), X10\n+\tMOVQ       48(SI), X11\n+\tPINSRQ     $0x01, 40(SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tMOVQ       120(SI), X8\n+\tPINSRQ     $0x01, 72(SI), X8\n+\tMOVQ       24(SI), X9\n+\tPINSRQ     $0x01, 104(SI), X9\n+\tMOVQ       88(SI), X10\n+\tPINSRQ     $0x01, 112(SI), X10\n+\tMOVQ       96(SI), X11\n+\tPINSRQ     $0x01, (SI), X11\n+\tPADDQ      X8, X0\n+\tPADDQ      X9, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      X10, X0\n+\tPADDQ      X11, X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tPADDQ      16(R10), X0\n+\tPADDQ      32(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      48(R10), X0\n+\tPADDQ      64(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tPADDQ      80(R10), X0\n+\tPADDQ      96(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      112(R10), X0\n+\tPADDQ      128(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tPADDQ      144(R10), X0\n+\tPADDQ      160(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      176(R10), X0\n+\tPADDQ      192(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X6, X8\n+\tPUNPCKLQDQ X6, X9\n+\tPUNPCKHQDQ X7, X6\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X7, X9\n+\tMOVO       X8, X7\n+\tMOVO       X2, X8\n+\tPUNPCKHQDQ X9, X7\n+\tPUNPCKLQDQ X3, X9\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X3\n+\tPADDQ      208(R10), X0\n+\tPADDQ      224(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFD     $0xb1, X6, X6\n+\tPSHUFD     $0xb1, X7, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tPSHUFB     X13, X2\n+\tPSHUFB     X13, X3\n+\tPADDQ      240(R10), X0\n+\tPADDQ      256(R10), X1\n+\tPADDQ      X2, X0\n+\tPADDQ      X3, X1\n+\tPXOR       X0, X6\n+\tPXOR       X1, X7\n+\tPSHUFB     X14, X6\n+\tPSHUFB     X14, X7\n+\tPADDQ      X6, X4\n+\tPADDQ      X7, X5\n+\tPXOR       X4, X2\n+\tPXOR       X5, X3\n+\tMOVOU      X2, X11\n+\tPADDQ      X2, X11\n+\tPSRLQ      $0x3f, X2\n+\tPXOR       X11, X2\n+\tMOVOU      X3, X11\n+\tPADDQ      X3, X11\n+\tPSRLQ      $0x3f, X3\n+\tPXOR       X11, X3\n+\tMOVO       X4, X8\n+\tMOVO       X5, X4\n+\tMOVO       X8, X5\n+\tMOVO       X2, X8\n+\tPUNPCKLQDQ X2, X9\n+\tPUNPCKHQDQ X3, X2\n+\tPUNPCKHQDQ X9, X2\n+\tPUNPCKLQDQ X3, X9\n+\tMOVO       X8, X3\n+\tMOVO       X6, X8\n+\tPUNPCKHQDQ X9, X3\n+\tPUNPCKLQDQ X7, X9\n+\tPUNPCKHQDQ X9, X6\n+\tPUNPCKLQDQ X8, X9\n+\tPUNPCKHQDQ X9, X7\n+\tMOVOU      32(AX), X10\n+\tMOVOU      48(AX), X11\n+\tPXOR       X0, X12\n+\tPXOR       X1, X15\n+\tPXOR       X2, X10\n+\tPXOR       X3, X11\n+\tPXOR       X4, X12\n+\tPXOR       X5, X15\n+\tPXOR       X6, X10\n+\tPXOR       X7, X11\n+\tMOVOU      X10, 32(AX)\n+\tMOVOU      X11, 48(AX)\n+\tLEAQ       128(SI), SI\n+\tSUBQ       $0x80, DI\n+\tJNE        loop\n+\tMOVOU      X12, (AX)\n+\tMOVOU      X15, 16(AX)\n+\tMOVQ       R8, (BX)\n+\tMOVQ       R9, 8(BX)\n+\tRET\n+\n+DATA ·iv3<>+0(SB)/8, $0x1f83d9abfb41bd6b\n+DATA ·iv3<>+8(SB)/8, $0x5be0cd19137e2179\n+GLOBL ·iv3<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·c40<>+0(SB)/8, $0x0201000706050403\n+DATA ·c40<>+8(SB)/8, $0x0a09080f0e0d0c0b\n+GLOBL ·c40<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·c48<>+0(SB)/8, $0x0100070605040302\n+DATA ·c48<>+8(SB)/8, $0x09080f0e0d0c0b0a\n+GLOBL ·c48<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·iv0<>+0(SB)/8, $0x6a09e667f3bcc908\n+DATA ·iv0<>+8(SB)/8, $0xbb67ae8584caa73b\n+GLOBL ·iv0<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·iv1<>+0(SB)/8, $0x3c6ef372fe94f82b\n+DATA ·iv1<>+8(SB)/8, $0xa54ff53a5f1d36f1\n+GLOBL ·iv1<>(SB), RODATA|NOPTR, $16\n+\n+DATA ·iv2<>+0(SB)/8, $0x510e527fade682d1\n+DATA ·iv2<>+8(SB)/8, $0x9b05688c2b3e6c1f\n+GLOBL ·iv2<>(SB), RODATA|NOPTR, $16"
    },
    {
      "sha": "3168a8aa3c834ae3c7b6ff5194f3f95b40bed61b",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2b_generic.go",
      "status": "added",
      "additions": 182,
      "deletions": 0,
      "changes": 182,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_generic.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_generic.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_generic.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,182 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package blake2b\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"math/bits\"\n+)\n+\n+// the precomputed values for BLAKE2b\n+// there are 12 16-byte arrays - one for each round\n+// the entries are calculated from the sigma constants.\n+var precomputed = [12][16]byte{\n+\t{0, 2, 4, 6, 1, 3, 5, 7, 8, 10, 12, 14, 9, 11, 13, 15},\n+\t{14, 4, 9, 13, 10, 8, 15, 6, 1, 0, 11, 5, 12, 2, 7, 3},\n+\t{11, 12, 5, 15, 8, 0, 2, 13, 10, 3, 7, 9, 14, 6, 1, 4},\n+\t{7, 3, 13, 11, 9, 1, 12, 14, 2, 5, 4, 15, 6, 10, 0, 8},\n+\t{9, 5, 2, 10, 0, 7, 4, 15, 14, 11, 6, 3, 1, 12, 8, 13},\n+\t{2, 6, 0, 8, 12, 10, 11, 3, 4, 7, 15, 1, 13, 5, 14, 9},\n+\t{12, 1, 14, 4, 5, 15, 13, 10, 0, 6, 9, 8, 7, 3, 2, 11},\n+\t{13, 7, 12, 3, 11, 14, 1, 9, 5, 15, 8, 2, 0, 4, 6, 10},\n+\t{6, 14, 11, 0, 15, 9, 3, 8, 12, 13, 1, 10, 2, 7, 4, 5},\n+\t{10, 8, 7, 1, 2, 4, 6, 5, 15, 9, 3, 13, 11, 14, 12, 0},\n+\t{0, 2, 4, 6, 1, 3, 5, 7, 8, 10, 12, 14, 9, 11, 13, 15}, // equal to the first\n+\t{14, 4, 9, 13, 10, 8, 15, 6, 1, 0, 11, 5, 12, 2, 7, 3}, // equal to the second\n+}\n+\n+func hashBlocksGeneric(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte) {\n+\tvar m [16]uint64\n+\tc0, c1 := c[0], c[1]\n+\n+\tfor i := 0; i < len(blocks); {\n+\t\tc0 += BlockSize\n+\t\tif c0 < BlockSize {\n+\t\t\tc1++\n+\t\t}\n+\n+\t\tv0, v1, v2, v3, v4, v5, v6, v7 := h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]\n+\t\tv8, v9, v10, v11, v12, v13, v14, v15 := iv[0], iv[1], iv[2], iv[3], iv[4], iv[5], iv[6], iv[7]\n+\t\tv12 ^= c0\n+\t\tv13 ^= c1\n+\t\tv14 ^= flag\n+\n+\t\tfor j := range m {\n+\t\t\tm[j] = binary.LittleEndian.Uint64(blocks[i:])\n+\t\t\ti += 8\n+\t\t}\n+\n+\t\tfor j := range precomputed {\n+\t\t\ts := &(precomputed[j])\n+\n+\t\t\tv0 += m[s[0]]\n+\t\t\tv0 += v4\n+\t\t\tv12 ^= v0\n+\t\t\tv12 = bits.RotateLeft64(v12, -32)\n+\t\t\tv8 += v12\n+\t\t\tv4 ^= v8\n+\t\t\tv4 = bits.RotateLeft64(v4, -24)\n+\t\t\tv1 += m[s[1]]\n+\t\t\tv1 += v5\n+\t\t\tv13 ^= v1\n+\t\t\tv13 = bits.RotateLeft64(v13, -32)\n+\t\t\tv9 += v13\n+\t\t\tv5 ^= v9\n+\t\t\tv5 = bits.RotateLeft64(v5, -24)\n+\t\t\tv2 += m[s[2]]\n+\t\t\tv2 += v6\n+\t\t\tv14 ^= v2\n+\t\t\tv14 = bits.RotateLeft64(v14, -32)\n+\t\t\tv10 += v14\n+\t\t\tv6 ^= v10\n+\t\t\tv6 = bits.RotateLeft64(v6, -24)\n+\t\t\tv3 += m[s[3]]\n+\t\t\tv3 += v7\n+\t\t\tv15 ^= v3\n+\t\t\tv15 = bits.RotateLeft64(v15, -32)\n+\t\t\tv11 += v15\n+\t\t\tv7 ^= v11\n+\t\t\tv7 = bits.RotateLeft64(v7, -24)\n+\n+\t\t\tv0 += m[s[4]]\n+\t\t\tv0 += v4\n+\t\t\tv12 ^= v0\n+\t\t\tv12 = bits.RotateLeft64(v12, -16)\n+\t\t\tv8 += v12\n+\t\t\tv4 ^= v8\n+\t\t\tv4 = bits.RotateLeft64(v4, -63)\n+\t\t\tv1 += m[s[5]]\n+\t\t\tv1 += v5\n+\t\t\tv13 ^= v1\n+\t\t\tv13 = bits.RotateLeft64(v13, -16)\n+\t\t\tv9 += v13\n+\t\t\tv5 ^= v9\n+\t\t\tv5 = bits.RotateLeft64(v5, -63)\n+\t\t\tv2 += m[s[6]]\n+\t\t\tv2 += v6\n+\t\t\tv14 ^= v2\n+\t\t\tv14 = bits.RotateLeft64(v14, -16)\n+\t\t\tv10 += v14\n+\t\t\tv6 ^= v10\n+\t\t\tv6 = bits.RotateLeft64(v6, -63)\n+\t\t\tv3 += m[s[7]]\n+\t\t\tv3 += v7\n+\t\t\tv15 ^= v3\n+\t\t\tv15 = bits.RotateLeft64(v15, -16)\n+\t\t\tv11 += v15\n+\t\t\tv7 ^= v11\n+\t\t\tv7 = bits.RotateLeft64(v7, -63)\n+\n+\t\t\tv0 += m[s[8]]\n+\t\t\tv0 += v5\n+\t\t\tv15 ^= v0\n+\t\t\tv15 = bits.RotateLeft64(v15, -32)\n+\t\t\tv10 += v15\n+\t\t\tv5 ^= v10\n+\t\t\tv5 = bits.RotateLeft64(v5, -24)\n+\t\t\tv1 += m[s[9]]\n+\t\t\tv1 += v6\n+\t\t\tv12 ^= v1\n+\t\t\tv12 = bits.RotateLeft64(v12, -32)\n+\t\t\tv11 += v12\n+\t\t\tv6 ^= v11\n+\t\t\tv6 = bits.RotateLeft64(v6, -24)\n+\t\t\tv2 += m[s[10]]\n+\t\t\tv2 += v7\n+\t\t\tv13 ^= v2\n+\t\t\tv13 = bits.RotateLeft64(v13, -32)\n+\t\t\tv8 += v13\n+\t\t\tv7 ^= v8\n+\t\t\tv7 = bits.RotateLeft64(v7, -24)\n+\t\t\tv3 += m[s[11]]\n+\t\t\tv3 += v4\n+\t\t\tv14 ^= v3\n+\t\t\tv14 = bits.RotateLeft64(v14, -32)\n+\t\t\tv9 += v14\n+\t\t\tv4 ^= v9\n+\t\t\tv4 = bits.RotateLeft64(v4, -24)\n+\n+\t\t\tv0 += m[s[12]]\n+\t\t\tv0 += v5\n+\t\t\tv15 ^= v0\n+\t\t\tv15 = bits.RotateLeft64(v15, -16)\n+\t\t\tv10 += v15\n+\t\t\tv5 ^= v10\n+\t\t\tv5 = bits.RotateLeft64(v5, -63)\n+\t\t\tv1 += m[s[13]]\n+\t\t\tv1 += v6\n+\t\t\tv12 ^= v1\n+\t\t\tv12 = bits.RotateLeft64(v12, -16)\n+\t\t\tv11 += v12\n+\t\t\tv6 ^= v11\n+\t\t\tv6 = bits.RotateLeft64(v6, -63)\n+\t\t\tv2 += m[s[14]]\n+\t\t\tv2 += v7\n+\t\t\tv13 ^= v2\n+\t\t\tv13 = bits.RotateLeft64(v13, -16)\n+\t\t\tv8 += v13\n+\t\t\tv7 ^= v8\n+\t\t\tv7 = bits.RotateLeft64(v7, -63)\n+\t\t\tv3 += m[s[15]]\n+\t\t\tv3 += v4\n+\t\t\tv14 ^= v3\n+\t\t\tv14 = bits.RotateLeft64(v14, -16)\n+\t\t\tv9 += v14\n+\t\t\tv4 ^= v9\n+\t\t\tv4 = bits.RotateLeft64(v4, -63)\n+\n+\t\t}\n+\n+\t\th[0] ^= v0 ^ v8\n+\t\th[1] ^= v1 ^ v9\n+\t\th[2] ^= v2 ^ v10\n+\t\th[3] ^= v3 ^ v11\n+\t\th[4] ^= v4 ^ v12\n+\t\th[5] ^= v5 ^ v13\n+\t\th[6] ^= v6 ^ v14\n+\t\th[7] ^= v7 ^ v15\n+\t}\n+\tc[0], c[1] = c0, c1\n+}"
    },
    {
      "sha": "6e28668cd1989034c58e25d270b5749cbfe26c95",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2b_ref.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_ref.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_ref.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2b_ref.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !amd64 || purego || !gc\n+\n+package blake2b\n+\n+func hashBlocks(h *[8]uint64, c *[2]uint64, flag uint64, blocks []byte) {\n+\thashBlocksGeneric(h, c, flag, blocks)\n+}"
    },
    {
      "sha": "52c414db0e64d77e877835a7da8d5aad51004243",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/blake2x.go",
      "status": "added",
      "additions": 177,
      "deletions": 0,
      "changes": 177,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fblake2x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,177 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package blake2b\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"errors\"\n+\t\"io\"\n+)\n+\n+// XOF defines the interface to hash functions that\n+// support arbitrary-length output.\n+type XOF interface {\n+\t// Write absorbs more data into the hash's state. It panics if called\n+\t// after Read.\n+\tio.Writer\n+\n+\t// Read reads more output from the hash. It returns io.EOF if the limit\n+\t// has been reached.\n+\tio.Reader\n+\n+\t// Clone returns a copy of the XOF in its current state.\n+\tClone() XOF\n+\n+\t// Reset resets the XOF to its initial state.\n+\tReset()\n+}\n+\n+// OutputLengthUnknown can be used as the size argument to NewXOF to indicate\n+// the length of the output is not known in advance.\n+const OutputLengthUnknown = 0\n+\n+// magicUnknownOutputLength is a magic value for the output size that indicates\n+// an unknown number of output bytes.\n+const magicUnknownOutputLength = (1 << 32) - 1\n+\n+// maxOutputLength is the absolute maximum number of bytes to produce when the\n+// number of output bytes is unknown.\n+const maxOutputLength = (1 << 32) * 64\n+\n+// NewXOF creates a new variable-output-length hash. The hash either produce a\n+// known number of bytes (1 <= size < 2**32-1), or an unknown number of bytes\n+// (size == OutputLengthUnknown). In the latter case, an absolute limit of\n+// 256GiB applies.\n+//\n+// A non-nil key turns the hash into a MAC. The key must between\n+// zero and 32 bytes long.\n+func NewXOF(size uint32, key []byte) (XOF, error) {\n+\tif len(key) > Size {\n+\t\treturn nil, errKeySize\n+\t}\n+\tif size == magicUnknownOutputLength {\n+\t\t// 2^32-1 indicates an unknown number of bytes and thus isn't a\n+\t\t// valid length.\n+\t\treturn nil, errors.New(\"blake2b: XOF length too large\")\n+\t}\n+\tif size == OutputLengthUnknown {\n+\t\tsize = magicUnknownOutputLength\n+\t}\n+\tx := &xof{\n+\t\td: digest{\n+\t\t\tsize:   Size,\n+\t\t\tkeyLen: len(key),\n+\t\t},\n+\t\tlength: size,\n+\t}\n+\tcopy(x.d.key[:], key)\n+\tx.Reset()\n+\treturn x, nil\n+}\n+\n+type xof struct {\n+\td                digest\n+\tlength           uint32\n+\tremaining        uint64\n+\tcfg, root, block [Size]byte\n+\toffset           int\n+\tnodeOffset       uint32\n+\treadMode         bool\n+}\n+\n+func (x *xof) Write(p []byte) (n int, err error) {\n+\tif x.readMode {\n+\t\tpanic(\"blake2b: write to XOF after read\")\n+\t}\n+\treturn x.d.Write(p)\n+}\n+\n+func (x *xof) Clone() XOF {\n+\tclone := *x\n+\treturn &clone\n+}\n+\n+func (x *xof) Reset() {\n+\tx.cfg[0] = byte(Size)\n+\tbinary.LittleEndian.PutUint32(x.cfg[4:], uint32(Size)) // leaf length\n+\tbinary.LittleEndian.PutUint32(x.cfg[12:], x.length)    // XOF length\n+\tx.cfg[17] = byte(Size)                                 // inner hash size\n+\n+\tx.d.Reset()\n+\tx.d.h[1] ^= uint64(x.length) << 32\n+\n+\tx.remaining = uint64(x.length)\n+\tif x.remaining == magicUnknownOutputLength {\n+\t\tx.remaining = maxOutputLength\n+\t}\n+\tx.offset, x.nodeOffset = 0, 0\n+\tx.readMode = false\n+}\n+\n+func (x *xof) Read(p []byte) (n int, err error) {\n+\tif !x.readMode {\n+\t\tx.d.finalize(&x.root)\n+\t\tx.readMode = true\n+\t}\n+\n+\tif x.remaining == 0 {\n+\t\treturn 0, io.EOF\n+\t}\n+\n+\tn = len(p)\n+\tif uint64(n) > x.remaining {\n+\t\tn = int(x.remaining)\n+\t\tp = p[:n]\n+\t}\n+\n+\tif x.offset > 0 {\n+\t\tblockRemaining := Size - x.offset\n+\t\tif n < blockRemaining {\n+\t\t\tx.offset += copy(p, x.block[x.offset:])\n+\t\t\tx.remaining -= uint64(n)\n+\t\t\treturn\n+\t\t}\n+\t\tcopy(p, x.block[x.offset:])\n+\t\tp = p[blockRemaining:]\n+\t\tx.offset = 0\n+\t\tx.remaining -= uint64(blockRemaining)\n+\t}\n+\n+\tfor len(p) >= Size {\n+\t\tbinary.LittleEndian.PutUint32(x.cfg[8:], x.nodeOffset)\n+\t\tx.nodeOffset++\n+\n+\t\tx.d.initConfig(&x.cfg)\n+\t\tx.d.Write(x.root[:])\n+\t\tx.d.finalize(&x.block)\n+\n+\t\tcopy(p, x.block[:])\n+\t\tp = p[Size:]\n+\t\tx.remaining -= uint64(Size)\n+\t}\n+\n+\tif todo := len(p); todo > 0 {\n+\t\tif x.remaining < uint64(Size) {\n+\t\t\tx.cfg[0] = byte(x.remaining)\n+\t\t}\n+\t\tbinary.LittleEndian.PutUint32(x.cfg[8:], x.nodeOffset)\n+\t\tx.nodeOffset++\n+\n+\t\tx.d.initConfig(&x.cfg)\n+\t\tx.d.Write(x.root[:])\n+\t\tx.d.finalize(&x.block)\n+\n+\t\tx.offset = copy(p, x.block[:todo])\n+\t\tx.remaining -= uint64(todo)\n+\t}\n+\treturn\n+}\n+\n+func (d *digest) initConfig(cfg *[Size]byte) {\n+\td.offset, d.c[0], d.c[1] = 0, 0, 0\n+\tfor i := range d.h {\n+\t\td.h[i] = iv[i] ^ binary.LittleEndian.Uint64(cfg[i*8:])\n+\t}\n+}"
    },
    {
      "sha": "54e446e1d2ce77eeabeaf021a56c01ba8883f832",
      "filename": "backend/vendor/golang.org/x/crypto/blake2b/register.go",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fregister.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fregister.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblake2b%2Fregister.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package blake2b\n+\n+import (\n+\t\"crypto\"\n+\t\"hash\"\n+)\n+\n+func init() {\n+\tnewHash256 := func() hash.Hash {\n+\t\th, _ := New256(nil)\n+\t\treturn h\n+\t}\n+\tnewHash384 := func() hash.Hash {\n+\t\th, _ := New384(nil)\n+\t\treturn h\n+\t}\n+\n+\tnewHash512 := func() hash.Hash {\n+\t\th, _ := New512(nil)\n+\t\treturn h\n+\t}\n+\n+\tcrypto.RegisterHash(crypto.BLAKE2b_256, newHash256)\n+\tcrypto.RegisterHash(crypto.BLAKE2b_384, newHash384)\n+\tcrypto.RegisterHash(crypto.BLAKE2b_512, newHash512)\n+}"
    },
    {
      "sha": "9d80f19521b461af2a77b10e8eaf64936d8e223d",
      "filename": "backend/vendor/golang.org/x/crypto/blowfish/block.go",
      "status": "added",
      "additions": 159,
      "deletions": 0,
      "changes": 159,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fblock.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fblock.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fblock.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,159 @@\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package blowfish\n+\n+// getNextWord returns the next big-endian uint32 value from the byte slice\n+// at the given position in a circular manner, updating the position.\n+func getNextWord(b []byte, pos *int) uint32 {\n+\tvar w uint32\n+\tj := *pos\n+\tfor i := 0; i < 4; i++ {\n+\t\tw = w<<8 | uint32(b[j])\n+\t\tj++\n+\t\tif j >= len(b) {\n+\t\t\tj = 0\n+\t\t}\n+\t}\n+\t*pos = j\n+\treturn w\n+}\n+\n+// ExpandKey performs a key expansion on the given *Cipher. Specifically, it\n+// performs the Blowfish algorithm's key schedule which sets up the *Cipher's\n+// pi and substitution tables for calls to Encrypt. This is used, primarily,\n+// by the bcrypt package to reuse the Blowfish key schedule during its\n+// set up. It's unlikely that you need to use this directly.\n+func ExpandKey(key []byte, c *Cipher) {\n+\tj := 0\n+\tfor i := 0; i < 18; i++ {\n+\t\t// Using inlined getNextWord for performance.\n+\t\tvar d uint32\n+\t\tfor k := 0; k < 4; k++ {\n+\t\t\td = d<<8 | uint32(key[j])\n+\t\t\tj++\n+\t\t\tif j >= len(key) {\n+\t\t\t\tj = 0\n+\t\t\t}\n+\t\t}\n+\t\tc.p[i] ^= d\n+\t}\n+\n+\tvar l, r uint32\n+\tfor i := 0; i < 18; i += 2 {\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.p[i], c.p[i+1] = l, r\n+\t}\n+\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s0[i], c.s0[i+1] = l, r\n+\t}\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s1[i], c.s1[i+1] = l, r\n+\t}\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s2[i], c.s2[i+1] = l, r\n+\t}\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s3[i], c.s3[i+1] = l, r\n+\t}\n+}\n+\n+// This is similar to ExpandKey, but folds the salt during the key\n+// schedule. While ExpandKey is essentially expandKeyWithSalt with an all-zero\n+// salt passed in, reusing ExpandKey turns out to be a place of inefficiency\n+// and specializing it here is useful.\n+func expandKeyWithSalt(key []byte, salt []byte, c *Cipher) {\n+\tj := 0\n+\tfor i := 0; i < 18; i++ {\n+\t\tc.p[i] ^= getNextWord(key, &j)\n+\t}\n+\n+\tj = 0\n+\tvar l, r uint32\n+\tfor i := 0; i < 18; i += 2 {\n+\t\tl ^= getNextWord(salt, &j)\n+\t\tr ^= getNextWord(salt, &j)\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.p[i], c.p[i+1] = l, r\n+\t}\n+\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl ^= getNextWord(salt, &j)\n+\t\tr ^= getNextWord(salt, &j)\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s0[i], c.s0[i+1] = l, r\n+\t}\n+\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl ^= getNextWord(salt, &j)\n+\t\tr ^= getNextWord(salt, &j)\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s1[i], c.s1[i+1] = l, r\n+\t}\n+\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl ^= getNextWord(salt, &j)\n+\t\tr ^= getNextWord(salt, &j)\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s2[i], c.s2[i+1] = l, r\n+\t}\n+\n+\tfor i := 0; i < 256; i += 2 {\n+\t\tl ^= getNextWord(salt, &j)\n+\t\tr ^= getNextWord(salt, &j)\n+\t\tl, r = encryptBlock(l, r, c)\n+\t\tc.s3[i], c.s3[i+1] = l, r\n+\t}\n+}\n+\n+func encryptBlock(l, r uint32, c *Cipher) (uint32, uint32) {\n+\txl, xr := l, r\n+\txl ^= c.p[0]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[1]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[2]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[3]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[4]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[5]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[6]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[7]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[8]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[9]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[10]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[11]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[12]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[13]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[14]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[15]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[16]\n+\txr ^= c.p[17]\n+\treturn xr, xl\n+}\n+\n+func decryptBlock(l, r uint32, c *Cipher) (uint32, uint32) {\n+\txl, xr := l, r\n+\txl ^= c.p[17]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[16]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[15]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[14]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[13]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[12]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[11]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[10]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[9]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[8]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[7]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[6]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[5]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[4]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[3]\n+\txr ^= ((c.s0[byte(xl>>24)] + c.s1[byte(xl>>16)]) ^ c.s2[byte(xl>>8)]) + c.s3[byte(xl)] ^ c.p[2]\n+\txl ^= ((c.s0[byte(xr>>24)] + c.s1[byte(xr>>16)]) ^ c.s2[byte(xr>>8)]) + c.s3[byte(xr)] ^ c.p[1]\n+\txr ^= c.p[0]\n+\treturn xr, xl\n+}"
    },
    {
      "sha": "0898956807c6f88698b4e2b69997b83edcd3b3c0",
      "filename": "backend/vendor/golang.org/x/crypto/blowfish/cipher.go",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fcipher.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fcipher.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fcipher.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,99 @@\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package blowfish implements Bruce Schneier's Blowfish encryption algorithm.\n+//\n+// Blowfish is a legacy cipher and its short block size makes it vulnerable to\n+// birthday bound attacks (see https://sweet32.info). It should only be used\n+// where compatibility with legacy systems, not security, is the goal.\n+//\n+// Deprecated: any new system should use AES (from crypto/aes, if necessary in\n+// an AEAD mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from\n+// golang.org/x/crypto/chacha20poly1305).\n+package blowfish\n+\n+// The code is a port of Bruce Schneier's C implementation.\n+// See https://www.schneier.com/blowfish.html.\n+\n+import \"strconv\"\n+\n+// The Blowfish block size in bytes.\n+const BlockSize = 8\n+\n+// A Cipher is an instance of Blowfish encryption using a particular key.\n+type Cipher struct {\n+\tp              [18]uint32\n+\ts0, s1, s2, s3 [256]uint32\n+}\n+\n+type KeySizeError int\n+\n+func (k KeySizeError) Error() string {\n+\treturn \"crypto/blowfish: invalid key size \" + strconv.Itoa(int(k))\n+}\n+\n+// NewCipher creates and returns a Cipher.\n+// The key argument should be the Blowfish key, from 1 to 56 bytes.\n+func NewCipher(key []byte) (*Cipher, error) {\n+\tvar result Cipher\n+\tif k := len(key); k < 1 || k > 56 {\n+\t\treturn nil, KeySizeError(k)\n+\t}\n+\tinitCipher(&result)\n+\tExpandKey(key, &result)\n+\treturn &result, nil\n+}\n+\n+// NewSaltedCipher creates a returns a Cipher that folds a salt into its key\n+// schedule. For most purposes, NewCipher, instead of NewSaltedCipher, is\n+// sufficient and desirable. For bcrypt compatibility, the key can be over 56\n+// bytes.\n+func NewSaltedCipher(key, salt []byte) (*Cipher, error) {\n+\tif len(salt) == 0 {\n+\t\treturn NewCipher(key)\n+\t}\n+\tvar result Cipher\n+\tif k := len(key); k < 1 {\n+\t\treturn nil, KeySizeError(k)\n+\t}\n+\tinitCipher(&result)\n+\texpandKeyWithSalt(key, salt, &result)\n+\treturn &result, nil\n+}\n+\n+// BlockSize returns the Blowfish block size, 8 bytes.\n+// It is necessary to satisfy the Block interface in the\n+// package \"crypto/cipher\".\n+func (c *Cipher) BlockSize() int { return BlockSize }\n+\n+// Encrypt encrypts the 8-byte buffer src using the key k\n+// and stores the result in dst.\n+// Note that for amounts of data larger than a block,\n+// it is not safe to just call Encrypt on successive blocks;\n+// instead, use an encryption mode like CBC (see crypto/cipher/cbc.go).\n+func (c *Cipher) Encrypt(dst, src []byte) {\n+\tl := uint32(src[0])<<24 | uint32(src[1])<<16 | uint32(src[2])<<8 | uint32(src[3])\n+\tr := uint32(src[4])<<24 | uint32(src[5])<<16 | uint32(src[6])<<8 | uint32(src[7])\n+\tl, r = encryptBlock(l, r, c)\n+\tdst[0], dst[1], dst[2], dst[3] = byte(l>>24), byte(l>>16), byte(l>>8), byte(l)\n+\tdst[4], dst[5], dst[6], dst[7] = byte(r>>24), byte(r>>16), byte(r>>8), byte(r)\n+}\n+\n+// Decrypt decrypts the 8-byte buffer src using the key k\n+// and stores the result in dst.\n+func (c *Cipher) Decrypt(dst, src []byte) {\n+\tl := uint32(src[0])<<24 | uint32(src[1])<<16 | uint32(src[2])<<8 | uint32(src[3])\n+\tr := uint32(src[4])<<24 | uint32(src[5])<<16 | uint32(src[6])<<8 | uint32(src[7])\n+\tl, r = decryptBlock(l, r, c)\n+\tdst[0], dst[1], dst[2], dst[3] = byte(l>>24), byte(l>>16), byte(l>>8), byte(l)\n+\tdst[4], dst[5], dst[6], dst[7] = byte(r>>24), byte(r>>16), byte(r>>8), byte(r)\n+}\n+\n+func initCipher(c *Cipher) {\n+\tcopy(c.p[0:], p[0:])\n+\tcopy(c.s0[0:], s0[0:])\n+\tcopy(c.s1[0:], s1[0:])\n+\tcopy(c.s2[0:], s2[0:])\n+\tcopy(c.s3[0:], s3[0:])\n+}"
    },
    {
      "sha": "d04077595abc44b8db297e4945c4fd546e3eb073",
      "filename": "backend/vendor/golang.org/x/crypto/blowfish/const.go",
      "status": "added",
      "additions": 199,
      "deletions": 0,
      "changes": 199,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fconst.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fconst.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fcrypto%2Fblowfish%2Fconst.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,199 @@\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The startup permutation array and substitution boxes.\n+// They are the hexadecimal digits of PI; see:\n+// https://www.schneier.com/code/constants.txt.\n+\n+package blowfish\n+\n+var s0 = [256]uint32{\n+\t0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n+\t0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n+\t0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,\n+\t0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n+\t0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n+\t0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n+\t0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,\n+\t0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n+\t0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,\n+\t0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n+\t0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,\n+\t0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n+\t0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,\n+\t0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n+\t0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n+\t0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n+\t0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,\n+\t0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n+\t0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,\n+\t0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n+\t0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,\n+\t0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n+\t0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,\n+\t0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n+\t0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n+\t0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n+\t0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,\n+\t0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n+\t0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,\n+\t0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n+\t0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,\n+\t0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n+\t0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,\n+\t0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n+\t0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n+\t0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n+\t0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,\n+\t0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n+\t0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,\n+\t0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n+\t0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,\n+\t0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n+\t0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,\n+}\n+\n+var s1 = [256]uint32{\n+\t0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d,\n+\t0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,\n+\t0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65,\n+\t0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n+\t0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9,\n+\t0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,\n+\t0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d,\n+\t0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,\n+\t0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n+\t0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,\n+\t0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908,\n+\t0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,\n+\t0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124,\n+\t0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n+\t0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,\n+\t0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,\n+\t0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b,\n+\t0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,\n+\t0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n+\t0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,\n+\t0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d,\n+\t0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,\n+\t0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5,\n+\t0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n+\t0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,\n+\t0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,\n+\t0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca,\n+\t0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,\n+\t0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n+\t0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,\n+\t0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054,\n+\t0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,\n+\t0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea,\n+\t0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n+\t0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,\n+\t0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,\n+\t0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea,\n+\t0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,\n+\t0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n+\t0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,\n+\t0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd,\n+\t0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,\n+\t0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,\n+}\n+\n+var s2 = [256]uint32{\n+\t0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7,\n+\t0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,\n+\t0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n+\t0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,\n+\t0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4,\n+\t0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,\n+\t0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec,\n+\t0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n+\t0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332,\n+\t0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,\n+\t0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58,\n+\t0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,\n+\t0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n+\t0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,\n+\t0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60,\n+\t0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,\n+\t0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99,\n+\t0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n+\t0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74,\n+\t0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,\n+\t0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3,\n+\t0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,\n+\t0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n+\t0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,\n+\t0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa,\n+\t0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,\n+\t0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086,\n+\t0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n+\t0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24,\n+\t0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,\n+\t0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84,\n+\t0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,\n+\t0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n+\t0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,\n+\t0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe,\n+\t0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,\n+\t0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0,\n+\t0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n+\t0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188,\n+\t0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,\n+\t0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8,\n+\t0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,\n+\t0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n+}\n+\n+var s3 = [256]uint32{\n+\t0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,\n+\t0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n+\t0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,\n+\t0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n+\t0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,\n+\t0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n+\t0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n+\t0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n+\t0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,\n+\t0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n+\t0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,\n+\t0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n+\t0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,\n+\t0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n+\t0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,\n+\t0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n+\t0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n+\t0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n+\t0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,\n+\t0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n+\t0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,\n+\t0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n+\t0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,\n+\t0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n+\t0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,\n+\t0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n+\t0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n+\t0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n+\t0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,\n+\t0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n+\t0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,\n+\t0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n+\t0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,\n+\t0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n+\t0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,\n+\t0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n+\t0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n+\t0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n+\t0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,\n+\t0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n+\t0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,\n+\t0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n+\t0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6,\n+}\n+\n+var p = [18]uint32{\n+\t0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,\n+\t0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n+\t0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,\n+}"
    },
    {
      "sha": "bca3ae9a0c221ab109e5051c76b377e29f0b70bb",
      "filename": "backend/vendor/golang.org/x/net/html/doctype.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fdoctype.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fdoctype.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fdoctype.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -87,7 +87,7 @@ func parseDoctype(s string) (n *Node, quirks bool) {\n \t\t\t}\n \t\t}\n \t\tif lastAttr := n.Attr[len(n.Attr)-1]; lastAttr.Key == \"system\" &&\n-\t\t\tstrings.ToLower(lastAttr.Val) == \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\" {\n+\t\t\tstrings.EqualFold(lastAttr.Val, \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\") {\n \t\t\tquirks = true\n \t\t}\n \t}"
    },
    {
      "sha": "e8515d8e887fb26a540fc64c7edca76ad6a14723",
      "filename": "backend/vendor/golang.org/x/net/html/foreign.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fforeign.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fforeign.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fforeign.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -40,8 +40,7 @@ func htmlIntegrationPoint(n *Node) bool {\n \t\tif n.Data == \"annotation-xml\" {\n \t\t\tfor _, a := range n.Attr {\n \t\t\t\tif a.Key == \"encoding\" {\n-\t\t\t\t\tval := strings.ToLower(a.Val)\n-\t\t\t\t\tif val == \"text/html\" || val == \"application/xhtml+xml\" {\n+\t\t\t\t\tif strings.EqualFold(a.Val, \"text/html\") || strings.EqualFold(a.Val, \"application/xhtml+xml\") {\n \t\t\t\t\t\treturn true\n \t\t\t\t\t}\n \t\t\t\t}"
    },
    {
      "sha": "643c674e37802d509cb5806cff26a0b0be4ab603",
      "filename": "backend/vendor/golang.org/x/net/html/parse.go",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fnet%2Fhtml%2Fparse.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -840,6 +840,10 @@ func afterHeadIM(p *parser) bool {\n \n \tp.parseImpliedToken(StartTagToken, a.Body, a.Body.String())\n \tp.framesetOK = true\n+\tif p.tok.Type == ErrorToken {\n+\t\t// Stop parsing.\n+\t\treturn true\n+\t}\n \treturn false\n }\n \n@@ -1031,7 +1035,7 @@ func inBodyIM(p *parser) bool {\n \t\t\tif p.tok.DataAtom == a.Input {\n \t\t\t\tfor _, t := range p.tok.Attr {\n \t\t\t\t\tif t.Key == \"type\" {\n-\t\t\t\t\t\tif strings.ToLower(t.Val) == \"hidden\" {\n+\t\t\t\t\t\tif strings.EqualFold(t.Val, \"hidden\") {\n \t\t\t\t\t\t\t// Skip setting framesetOK = false\n \t\t\t\t\t\t\treturn true\n \t\t\t\t\t\t}\n@@ -1459,7 +1463,7 @@ func inTableIM(p *parser) bool {\n \t\t\treturn inHeadIM(p)\n \t\tcase a.Input:\n \t\t\tfor _, t := range p.tok.Attr {\n-\t\t\t\tif t.Key == \"type\" && strings.ToLower(t.Val) == \"hidden\" {\n+\t\t\t\tif t.Key == \"type\" && strings.EqualFold(t.Val, \"hidden\") {\n \t\t\t\t\tp.addElement()\n \t\t\t\t\tp.oe.pop()\n \t\t\t\t\treturn true"
    },
    {
      "sha": "2a7cf70da6e498df9c11ab6a5eaa2ddd7af34da4",
      "filename": "backend/vendor/golang.org/x/oauth2/LICENSE",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FLICENSE",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FLICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FLICENSE?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2009 The Go Authors. All rights reserved.\n+Copyright 2009 The Go Authors.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n@@ -10,7 +10,7 @@ notice, this list of conditions and the following disclaimer.\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n-   * Neither the name of Google Inc. nor the names of its\n+   * Neither the name of Google LLC nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n "
    },
    {
      "sha": "48dbb9d84c89210a0d43403a549485bf2b24d19b",
      "filename": "backend/vendor/golang.org/x/oauth2/README.md",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FREADME.md",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FREADME.md",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2FREADME.md?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -5,15 +5,6 @@\n \n oauth2 package contains a client implementation for OAuth 2.0 spec.\n \n-## Installation\n-\n-~~~~\n-go get golang.org/x/oauth2\n-~~~~\n-\n-Or you can manually git clone the repository to\n-`$(go env GOPATH)/src/golang.org/x/oauth2`.\n-\n See pkg.go.dev for further documentation and examples.\n \n * [pkg.go.dev/golang.org/x/oauth2](https://pkg.go.dev/golang.org/x/oauth2)\n@@ -33,7 +24,11 @@ The main issue tracker for the oauth2 repository is located at\n https://github.com/golang/oauth2/issues.\n \n This repository uses Gerrit for code changes. To learn how to submit changes to\n-this repository, see https://golang.org/doc/contribute.html. In particular:\n+this repository, see https://go.dev/doc/contribute.\n+\n+The git repository is https://go.googlesource.com/oauth2.\n+\n+Note:\n \n * Excluding trivial changes, all contributions should be connected to an existing issue.\n * API changes must go through the [change proposal process](https://go.dev/s/proposal-process) before they can be accepted."
    },
    {
      "sha": "950754ce44b402a2db01c7b9764fe36b3017efbf",
      "filename": "backend/vendor/golang.org/x/oauth2/endpoints/endpoints.go",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Fendpoints%2Fendpoints.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -62,8 +62,9 @@ var GitHub = oauth2.Endpoint{\n \n // GitLab is the endpoint for GitLab.\n var GitLab = oauth2.Endpoint{\n-\tAuthURL:  \"https://gitlab.com/oauth/authorize\",\n-\tTokenURL: \"https://gitlab.com/oauth/token\",\n+\tAuthURL:       \"https://gitlab.com/oauth/authorize\",\n+\tTokenURL:      \"https://gitlab.com/oauth/token\",\n+\tDeviceAuthURL: \"https://gitlab.com/oauth/authorize_device\",\n }\n \n // Google is the endpoint for Google."
    },
    {
      "sha": "109997d77cea5a7df4aef15479ac43c35bd02f7a",
      "filename": "backend/vendor/golang.org/x/oauth2/token.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Foauth2%2Ftoken.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -49,6 +49,13 @@ type Token struct {\n \t// mechanisms for that TokenSource will not be used.\n \tExpiry time.Time `json:\"expiry,omitempty\"`\n \n+\t// ExpiresIn is the OAuth2 wire format \"expires_in\" field,\n+\t// which specifies how many seconds later the token expires,\n+\t// relative to an unknown time base approximately around \"now\".\n+\t// It is the application's responsibility to populate\n+\t// `Expiry` from `ExpiresIn` when required.\n+\tExpiresIn int64 `json:\"expires_in,omitempty\"`\n+\n \t// raw optionally contains extra metadata from the server\n \t// when updating a token.\n \traw interface{}"
    },
    {
      "sha": "269e173ca46941da5e6b8b737502b86a82d3152e",
      "filename": "backend/vendor/golang.org/x/sys/cpu/asm_aix_ppc64.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_aix_ppc64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_aix_ppc64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_aix_ppc64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gc\n+\n+#include \"textflag.h\"\n+\n+//\n+// System calls for ppc64, AIX are implemented in runtime/syscall_aix.go\n+//\n+\n+TEXT ·syscall6(SB),NOSPLIT,$0-88\n+\tJMP\tsyscall·syscall6(SB)\n+\n+TEXT ·rawSyscall6(SB),NOSPLIT,$0-88\n+\tJMP\tsyscall·rawSyscall6(SB)"
    },
    {
      "sha": "ec2acfe540ea7b0e714e137a72f75db190cf8998",
      "filename": "backend/vendor/golang.org/x/sys/cpu/asm_darwin_x86_gc.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_darwin_x86_gc.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_darwin_x86_gc.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fasm_darwin_x86_gc.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2024 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build darwin && amd64 && gc\n+\n+#include \"textflag.h\"\n+\n+TEXT libc_sysctl_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_sysctl(SB)\n+GLOBL\t·libc_sysctl_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_sysctl_trampoline_addr(SB)/8, $libc_sysctl_trampoline<>(SB)\n+\n+TEXT libc_sysctlbyname_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_sysctlbyname(SB)\n+GLOBL\t·libc_sysctlbyname_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_sysctlbyname_trampoline_addr(SB)/8, $libc_sysctlbyname_trampoline<>(SB)"
    },
    {
      "sha": "271055be0b1e1a73e8b42b62240da8434becd991",
      "filename": "backend/vendor/golang.org/x/sys/cpu/byteorder.go",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fbyteorder.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fbyteorder.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fbyteorder.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"runtime\"\n+)\n+\n+// byteOrder is a subset of encoding/binary.ByteOrder.\n+type byteOrder interface {\n+\tUint32([]byte) uint32\n+\tUint64([]byte) uint64\n+}\n+\n+type littleEndian struct{}\n+type bigEndian struct{}\n+\n+func (littleEndian) Uint32(b []byte) uint32 {\n+\t_ = b[3] // bounds check hint to compiler; see golang.org/issue/14808\n+\treturn uint32(b[0]) | uint32(b[1])<<8 | uint32(b[2])<<16 | uint32(b[3])<<24\n+}\n+\n+func (littleEndian) Uint64(b []byte) uint64 {\n+\t_ = b[7] // bounds check hint to compiler; see golang.org/issue/14808\n+\treturn uint64(b[0]) | uint64(b[1])<<8 | uint64(b[2])<<16 | uint64(b[3])<<24 |\n+\t\tuint64(b[4])<<32 | uint64(b[5])<<40 | uint64(b[6])<<48 | uint64(b[7])<<56\n+}\n+\n+func (bigEndian) Uint32(b []byte) uint32 {\n+\t_ = b[3] // bounds check hint to compiler; see golang.org/issue/14808\n+\treturn uint32(b[3]) | uint32(b[2])<<8 | uint32(b[1])<<16 | uint32(b[0])<<24\n+}\n+\n+func (bigEndian) Uint64(b []byte) uint64 {\n+\t_ = b[7] // bounds check hint to compiler; see golang.org/issue/14808\n+\treturn uint64(b[7]) | uint64(b[6])<<8 | uint64(b[5])<<16 | uint64(b[4])<<24 |\n+\t\tuint64(b[3])<<32 | uint64(b[2])<<40 | uint64(b[1])<<48 | uint64(b[0])<<56\n+}\n+\n+// hostByteOrder returns littleEndian on little-endian machines and\n+// bigEndian on big-endian machines.\n+func hostByteOrder() byteOrder {\n+\tswitch runtime.GOARCH {\n+\tcase \"386\", \"amd64\", \"amd64p32\",\n+\t\t\"alpha\",\n+\t\t\"arm\", \"arm64\",\n+\t\t\"loong64\",\n+\t\t\"mipsle\", \"mips64le\", \"mips64p32le\",\n+\t\t\"nios2\",\n+\t\t\"ppc64le\",\n+\t\t\"riscv\", \"riscv64\",\n+\t\t\"sh\":\n+\t\treturn littleEndian{}\n+\tcase \"armbe\", \"arm64be\",\n+\t\t\"m68k\",\n+\t\t\"mips\", \"mips64\", \"mips64p32\",\n+\t\t\"ppc\", \"ppc64\",\n+\t\t\"s390\", \"s390x\",\n+\t\t\"shbe\",\n+\t\t\"sparc\", \"sparc64\":\n+\t\treturn bigEndian{}\n+\t}\n+\tpanic(\"unknown architecture\")\n+}"
    },
    {
      "sha": "02609d5b21d56a5b82ce169a3bd1f933f9d091f3",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu.go",
      "status": "added",
      "additions": 312,
      "deletions": 0,
      "changes": 312,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,312 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package cpu implements processor feature detection for\n+// various CPU architectures.\n+package cpu\n+\n+import (\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// Initialized reports whether the CPU features were initialized.\n+//\n+// For some GOOS/GOARCH combinations initialization of the CPU features depends\n+// on reading an operating specific file, e.g. /proc/self/auxv on linux/arm\n+// Initialized will report false if reading the file fails.\n+var Initialized bool\n+\n+// CacheLinePad is used to pad structs to avoid false sharing.\n+type CacheLinePad struct{ _ [cacheLineSize]byte }\n+\n+// X86 contains the supported CPU features of the\n+// current X86/AMD64 platform. If the current platform\n+// is not X86/AMD64 then all feature flags are false.\n+//\n+// X86 is padded to avoid false sharing. Further the HasAVX\n+// and HasAVX2 are only set if the OS supports XMM and YMM\n+// registers in addition to the CPUID feature bit being set.\n+var X86 struct {\n+\t_                   CacheLinePad\n+\tHasAES              bool // AES hardware implementation (AES NI)\n+\tHasADX              bool // Multi-precision add-carry instruction extensions\n+\tHasAVX              bool // Advanced vector extension\n+\tHasAVX2             bool // Advanced vector extension 2\n+\tHasAVX512           bool // Advanced vector extension 512\n+\tHasAVX512F          bool // Advanced vector extension 512 Foundation Instructions\n+\tHasAVX512CD         bool // Advanced vector extension 512 Conflict Detection Instructions\n+\tHasAVX512ER         bool // Advanced vector extension 512 Exponential and Reciprocal Instructions\n+\tHasAVX512PF         bool // Advanced vector extension 512 Prefetch Instructions\n+\tHasAVX512VL         bool // Advanced vector extension 512 Vector Length Extensions\n+\tHasAVX512BW         bool // Advanced vector extension 512 Byte and Word Instructions\n+\tHasAVX512DQ         bool // Advanced vector extension 512 Doubleword and Quadword Instructions\n+\tHasAVX512IFMA       bool // Advanced vector extension 512 Integer Fused Multiply Add\n+\tHasAVX512VBMI       bool // Advanced vector extension 512 Vector Byte Manipulation Instructions\n+\tHasAVX5124VNNIW     bool // Advanced vector extension 512 Vector Neural Network Instructions Word variable precision\n+\tHasAVX5124FMAPS     bool // Advanced vector extension 512 Fused Multiply Accumulation Packed Single precision\n+\tHasAVX512VPOPCNTDQ  bool // Advanced vector extension 512 Double and quad word population count instructions\n+\tHasAVX512VPCLMULQDQ bool // Advanced vector extension 512 Vector carry-less multiply operations\n+\tHasAVX512VNNI       bool // Advanced vector extension 512 Vector Neural Network Instructions\n+\tHasAVX512GFNI       bool // Advanced vector extension 512 Galois field New Instructions\n+\tHasAVX512VAES       bool // Advanced vector extension 512 Vector AES instructions\n+\tHasAVX512VBMI2      bool // Advanced vector extension 512 Vector Byte Manipulation Instructions 2\n+\tHasAVX512BITALG     bool // Advanced vector extension 512 Bit Algorithms\n+\tHasAVX512BF16       bool // Advanced vector extension 512 BFloat16 Instructions\n+\tHasAMXTile          bool // Advanced Matrix Extension Tile instructions\n+\tHasAMXInt8          bool // Advanced Matrix Extension Int8 instructions\n+\tHasAMXBF16          bool // Advanced Matrix Extension BFloat16 instructions\n+\tHasBMI1             bool // Bit manipulation instruction set 1\n+\tHasBMI2             bool // Bit manipulation instruction set 2\n+\tHasCX16             bool // Compare and exchange 16 Bytes\n+\tHasERMS             bool // Enhanced REP for MOVSB and STOSB\n+\tHasFMA              bool // Fused-multiply-add instructions\n+\tHasOSXSAVE          bool // OS supports XSAVE/XRESTOR for saving/restoring XMM registers.\n+\tHasPCLMULQDQ        bool // PCLMULQDQ instruction - most often used for AES-GCM\n+\tHasPOPCNT           bool // Hamming weight instruction POPCNT.\n+\tHasRDRAND           bool // RDRAND instruction (on-chip random number generator)\n+\tHasRDSEED           bool // RDSEED instruction (on-chip random number generator)\n+\tHasSSE2             bool // Streaming SIMD extension 2 (always available on amd64)\n+\tHasSSE3             bool // Streaming SIMD extension 3\n+\tHasSSSE3            bool // Supplemental streaming SIMD extension 3\n+\tHasSSE41            bool // Streaming SIMD extension 4 and 4.1\n+\tHasSSE42            bool // Streaming SIMD extension 4 and 4.2\n+\t_                   CacheLinePad\n+}\n+\n+// ARM64 contains the supported CPU features of the\n+// current ARMv8(aarch64) platform. If the current platform\n+// is not arm64 then all feature flags are false.\n+var ARM64 struct {\n+\t_           CacheLinePad\n+\tHasFP       bool // Floating-point instruction set (always available)\n+\tHasASIMD    bool // Advanced SIMD (always available)\n+\tHasEVTSTRM  bool // Event stream support\n+\tHasAES      bool // AES hardware implementation\n+\tHasPMULL    bool // Polynomial multiplication instruction set\n+\tHasSHA1     bool // SHA1 hardware implementation\n+\tHasSHA2     bool // SHA2 hardware implementation\n+\tHasCRC32    bool // CRC32 hardware implementation\n+\tHasATOMICS  bool // Atomic memory operation instruction set\n+\tHasFPHP     bool // Half precision floating-point instruction set\n+\tHasASIMDHP  bool // Advanced SIMD half precision instruction set\n+\tHasCPUID    bool // CPUID identification scheme registers\n+\tHasASIMDRDM bool // Rounding double multiply add/subtract instruction set\n+\tHasJSCVT    bool // Javascript conversion from floating-point to integer\n+\tHasFCMA     bool // Floating-point multiplication and addition of complex numbers\n+\tHasLRCPC    bool // Release Consistent processor consistent support\n+\tHasDCPOP    bool // Persistent memory support\n+\tHasSHA3     bool // SHA3 hardware implementation\n+\tHasSM3      bool // SM3 hardware implementation\n+\tHasSM4      bool // SM4 hardware implementation\n+\tHasASIMDDP  bool // Advanced SIMD double precision instruction set\n+\tHasSHA512   bool // SHA512 hardware implementation\n+\tHasSVE      bool // Scalable Vector Extensions\n+\tHasSVE2     bool // Scalable Vector Extensions 2\n+\tHasASIMDFHM bool // Advanced SIMD multiplication FP16 to FP32\n+\tHasDIT      bool // Data Independent Timing support\n+\tHasI8MM     bool // Advanced SIMD Int8 matrix multiplication instructions\n+\t_           CacheLinePad\n+}\n+\n+// ARM contains the supported CPU features of the current ARM (32-bit) platform.\n+// All feature flags are false if:\n+//  1. the current platform is not arm, or\n+//  2. the current operating system is not Linux.\n+var ARM struct {\n+\t_           CacheLinePad\n+\tHasSWP      bool // SWP instruction support\n+\tHasHALF     bool // Half-word load and store support\n+\tHasTHUMB    bool // ARM Thumb instruction set\n+\tHas26BIT    bool // Address space limited to 26-bits\n+\tHasFASTMUL  bool // 32-bit operand, 64-bit result multiplication support\n+\tHasFPA      bool // Floating point arithmetic support\n+\tHasVFP      bool // Vector floating point support\n+\tHasEDSP     bool // DSP Extensions support\n+\tHasJAVA     bool // Java instruction set\n+\tHasIWMMXT   bool // Intel Wireless MMX technology support\n+\tHasCRUNCH   bool // MaverickCrunch context switching and handling\n+\tHasTHUMBEE  bool // Thumb EE instruction set\n+\tHasNEON     bool // NEON instruction set\n+\tHasVFPv3    bool // Vector floating point version 3 support\n+\tHasVFPv3D16 bool // Vector floating point version 3 D8-D15\n+\tHasTLS      bool // Thread local storage support\n+\tHasVFPv4    bool // Vector floating point version 4 support\n+\tHasIDIVA    bool // Integer divide instruction support in ARM mode\n+\tHasIDIVT    bool // Integer divide instruction support in Thumb mode\n+\tHasVFPD32   bool // Vector floating point version 3 D15-D31\n+\tHasLPAE     bool // Large Physical Address Extensions\n+\tHasEVTSTRM  bool // Event stream support\n+\tHasAES      bool // AES hardware implementation\n+\tHasPMULL    bool // Polynomial multiplication instruction set\n+\tHasSHA1     bool // SHA1 hardware implementation\n+\tHasSHA2     bool // SHA2 hardware implementation\n+\tHasCRC32    bool // CRC32 hardware implementation\n+\t_           CacheLinePad\n+}\n+\n+// MIPS64X contains the supported CPU features of the current mips64/mips64le\n+// platforms. If the current platform is not mips64/mips64le or the current\n+// operating system is not Linux then all feature flags are false.\n+var MIPS64X struct {\n+\t_      CacheLinePad\n+\tHasMSA bool // MIPS SIMD architecture\n+\t_      CacheLinePad\n+}\n+\n+// PPC64 contains the supported CPU features of the current ppc64/ppc64le platforms.\n+// If the current platform is not ppc64/ppc64le then all feature flags are false.\n+//\n+// For ppc64/ppc64le, it is safe to check only for ISA level starting on ISA v3.00,\n+// since there are no optional categories. There are some exceptions that also\n+// require kernel support to work (DARN, SCV), so there are feature bits for\n+// those as well. The struct is padded to avoid false sharing.\n+var PPC64 struct {\n+\t_        CacheLinePad\n+\tHasDARN  bool // Hardware random number generator (requires kernel enablement)\n+\tHasSCV   bool // Syscall vectored (requires kernel enablement)\n+\tIsPOWER8 bool // ISA v2.07 (POWER8)\n+\tIsPOWER9 bool // ISA v3.00 (POWER9), implies IsPOWER8\n+\t_        CacheLinePad\n+}\n+\n+// S390X contains the supported CPU features of the current IBM Z\n+// (s390x) platform. If the current platform is not IBM Z then all\n+// feature flags are false.\n+//\n+// S390X is padded to avoid false sharing. Further HasVX is only set\n+// if the OS supports vector registers in addition to the STFLE\n+// feature bit being set.\n+var S390X struct {\n+\t_         CacheLinePad\n+\tHasZARCH  bool // z/Architecture mode is active [mandatory]\n+\tHasSTFLE  bool // store facility list extended\n+\tHasLDISP  bool // long (20-bit) displacements\n+\tHasEIMM   bool // 32-bit immediates\n+\tHasDFP    bool // decimal floating point\n+\tHasETF3EH bool // ETF-3 enhanced\n+\tHasMSA    bool // message security assist (CPACF)\n+\tHasAES    bool // KM-AES{128,192,256} functions\n+\tHasAESCBC bool // KMC-AES{128,192,256} functions\n+\tHasAESCTR bool // KMCTR-AES{128,192,256} functions\n+\tHasAESGCM bool // KMA-GCM-AES{128,192,256} functions\n+\tHasGHASH  bool // KIMD-GHASH function\n+\tHasSHA1   bool // K{I,L}MD-SHA-1 functions\n+\tHasSHA256 bool // K{I,L}MD-SHA-256 functions\n+\tHasSHA512 bool // K{I,L}MD-SHA-512 functions\n+\tHasSHA3   bool // K{I,L}MD-SHA3-{224,256,384,512} and K{I,L}MD-SHAKE-{128,256} functions\n+\tHasVX     bool // vector facility\n+\tHasVXE    bool // vector-enhancements facility 1\n+\t_         CacheLinePad\n+}\n+\n+// RISCV64 contains the supported CPU features and performance characteristics for riscv64\n+// platforms. The booleans in RISCV64, with the exception of HasFastMisaligned, indicate\n+// the presence of RISC-V extensions.\n+//\n+// It is safe to assume that all the RV64G extensions are supported and so they are omitted from\n+// this structure. As riscv64 Go programs require at least RV64G, the code that populates\n+// this structure cannot run successfully if some of the RV64G extensions are missing.\n+// The struct is padded to avoid false sharing.\n+var RISCV64 struct {\n+\t_                 CacheLinePad\n+\tHasFastMisaligned bool // Fast misaligned accesses\n+\tHasC              bool // Compressed instruction-set extension\n+\tHasV              bool // Vector extension compatible with RVV 1.0\n+\tHasZba            bool // Address generation instructions extension\n+\tHasZbb            bool // Basic bit-manipulation extension\n+\tHasZbs            bool // Single-bit instructions extension\n+\t_                 CacheLinePad\n+}\n+\n+func init() {\n+\tarchInit()\n+\tinitOptions()\n+\tprocessOptions()\n+}\n+\n+// options contains the cpu debug options that can be used in GODEBUG.\n+// Options are arch dependent and are added by the arch specific initOptions functions.\n+// Features that are mandatory for the specific GOARCH should have the Required field set\n+// (e.g. SSE2 on amd64).\n+var options []option\n+\n+// Option names should be lower case. e.g. avx instead of AVX.\n+type option struct {\n+\tName      string\n+\tFeature   *bool\n+\tSpecified bool // whether feature value was specified in GODEBUG\n+\tEnable    bool // whether feature should be enabled\n+\tRequired  bool // whether feature is mandatory and can not be disabled\n+}\n+\n+func processOptions() {\n+\tenv := os.Getenv(\"GODEBUG\")\n+field:\n+\tfor env != \"\" {\n+\t\tfield := \"\"\n+\t\ti := strings.IndexByte(env, ',')\n+\t\tif i < 0 {\n+\t\t\tfield, env = env, \"\"\n+\t\t} else {\n+\t\t\tfield, env = env[:i], env[i+1:]\n+\t\t}\n+\t\tif len(field) < 4 || field[:4] != \"cpu.\" {\n+\t\t\tcontinue\n+\t\t}\n+\t\ti = strings.IndexByte(field, '=')\n+\t\tif i < 0 {\n+\t\t\tprint(\"GODEBUG sys/cpu: no value specified for \\\"\", field, \"\\\"\\n\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tkey, value := field[4:i], field[i+1:] // e.g. \"SSE2\", \"on\"\n+\n+\t\tvar enable bool\n+\t\tswitch value {\n+\t\tcase \"on\":\n+\t\t\tenable = true\n+\t\tcase \"off\":\n+\t\t\tenable = false\n+\t\tdefault:\n+\t\t\tprint(\"GODEBUG sys/cpu: value \\\"\", value, \"\\\" not supported for cpu option \\\"\", key, \"\\\"\\n\")\n+\t\t\tcontinue field\n+\t\t}\n+\n+\t\tif key == \"all\" {\n+\t\t\tfor i := range options {\n+\t\t\t\toptions[i].Specified = true\n+\t\t\t\toptions[i].Enable = enable || options[i].Required\n+\t\t\t}\n+\t\t\tcontinue field\n+\t\t}\n+\n+\t\tfor i := range options {\n+\t\t\tif options[i].Name == key {\n+\t\t\t\toptions[i].Specified = true\n+\t\t\t\toptions[i].Enable = enable\n+\t\t\t\tcontinue field\n+\t\t\t}\n+\t\t}\n+\n+\t\tprint(\"GODEBUG sys/cpu: unknown cpu feature \\\"\", key, \"\\\"\\n\")\n+\t}\n+\n+\tfor _, o := range options {\n+\t\tif !o.Specified {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif o.Enable && !*o.Feature {\n+\t\t\tprint(\"GODEBUG sys/cpu: can not enable \\\"\", o.Name, \"\\\", missing CPU support\\n\")\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif !o.Enable && o.Required {\n+\t\t\tprint(\"GODEBUG sys/cpu: can not disable \\\"\", o.Name, \"\\\", required CPU feature\\n\")\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t*o.Feature = o.Enable\n+\t}\n+}"
    },
    {
      "sha": "9bf0c32eb6add508376c74375833d533cc0e7c2a",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_aix.go",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build aix\n+\n+package cpu\n+\n+const (\n+\t// getsystemcfg constants\n+\t_SC_IMPL     = 2\n+\t_IMPL_POWER8 = 0x10000\n+\t_IMPL_POWER9 = 0x20000\n+)\n+\n+func archInit() {\n+\timpl := getsystemcfg(_SC_IMPL)\n+\tif impl&_IMPL_POWER8 != 0 {\n+\t\tPPC64.IsPOWER8 = true\n+\t}\n+\tif impl&_IMPL_POWER9 != 0 {\n+\t\tPPC64.IsPOWER8 = true\n+\t\tPPC64.IsPOWER9 = true\n+\t}\n+\n+\tInitialized = true\n+}\n+\n+func getsystemcfg(label int) (n uint64) {\n+\tr0, _ := callgetsystemcfg(label)\n+\tn = uint64(r0)\n+\treturn\n+}"
    },
    {
      "sha": "301b752e9c53d88dbd701256855b0b142f390f32",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_arm.go",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+const cacheLineSize = 32\n+\n+// HWCAP/HWCAP2 bits.\n+// These are specific to Linux.\n+const (\n+\thwcap_SWP       = 1 << 0\n+\thwcap_HALF      = 1 << 1\n+\thwcap_THUMB     = 1 << 2\n+\thwcap_26BIT     = 1 << 3\n+\thwcap_FAST_MULT = 1 << 4\n+\thwcap_FPA       = 1 << 5\n+\thwcap_VFP       = 1 << 6\n+\thwcap_EDSP      = 1 << 7\n+\thwcap_JAVA      = 1 << 8\n+\thwcap_IWMMXT    = 1 << 9\n+\thwcap_CRUNCH    = 1 << 10\n+\thwcap_THUMBEE   = 1 << 11\n+\thwcap_NEON      = 1 << 12\n+\thwcap_VFPv3     = 1 << 13\n+\thwcap_VFPv3D16  = 1 << 14\n+\thwcap_TLS       = 1 << 15\n+\thwcap_VFPv4     = 1 << 16\n+\thwcap_IDIVA     = 1 << 17\n+\thwcap_IDIVT     = 1 << 18\n+\thwcap_VFPD32    = 1 << 19\n+\thwcap_LPAE      = 1 << 20\n+\thwcap_EVTSTRM   = 1 << 21\n+\n+\thwcap2_AES   = 1 << 0\n+\thwcap2_PMULL = 1 << 1\n+\thwcap2_SHA1  = 1 << 2\n+\thwcap2_SHA2  = 1 << 3\n+\thwcap2_CRC32 = 1 << 4\n+)\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"pmull\", Feature: &ARM.HasPMULL},\n+\t\t{Name: \"sha1\", Feature: &ARM.HasSHA1},\n+\t\t{Name: \"sha2\", Feature: &ARM.HasSHA2},\n+\t\t{Name: \"swp\", Feature: &ARM.HasSWP},\n+\t\t{Name: \"thumb\", Feature: &ARM.HasTHUMB},\n+\t\t{Name: \"thumbee\", Feature: &ARM.HasTHUMBEE},\n+\t\t{Name: \"tls\", Feature: &ARM.HasTLS},\n+\t\t{Name: \"vfp\", Feature: &ARM.HasVFP},\n+\t\t{Name: \"vfpd32\", Feature: &ARM.HasVFPD32},\n+\t\t{Name: \"vfpv3\", Feature: &ARM.HasVFPv3},\n+\t\t{Name: \"vfpv3d16\", Feature: &ARM.HasVFPv3D16},\n+\t\t{Name: \"vfpv4\", Feature: &ARM.HasVFPv4},\n+\t\t{Name: \"half\", Feature: &ARM.HasHALF},\n+\t\t{Name: \"26bit\", Feature: &ARM.Has26BIT},\n+\t\t{Name: \"fastmul\", Feature: &ARM.HasFASTMUL},\n+\t\t{Name: \"fpa\", Feature: &ARM.HasFPA},\n+\t\t{Name: \"edsp\", Feature: &ARM.HasEDSP},\n+\t\t{Name: \"java\", Feature: &ARM.HasJAVA},\n+\t\t{Name: \"iwmmxt\", Feature: &ARM.HasIWMMXT},\n+\t\t{Name: \"crunch\", Feature: &ARM.HasCRUNCH},\n+\t\t{Name: \"neon\", Feature: &ARM.HasNEON},\n+\t\t{Name: \"idivt\", Feature: &ARM.HasIDIVT},\n+\t\t{Name: \"idiva\", Feature: &ARM.HasIDIVA},\n+\t\t{Name: \"lpae\", Feature: &ARM.HasLPAE},\n+\t\t{Name: \"evtstrm\", Feature: &ARM.HasEVTSTRM},\n+\t\t{Name: \"aes\", Feature: &ARM.HasAES},\n+\t\t{Name: \"crc32\", Feature: &ARM.HasCRC32},\n+\t}\n+\n+}"
    },
    {
      "sha": "af2aa99f9f06c916e57b73ae44f7d8b27d6ad33a",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_arm64.go",
      "status": "added",
      "additions": 194,
      "deletions": 0,
      "changes": 194,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,194 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import \"runtime\"\n+\n+// cacheLineSize is used to prevent false sharing of cache lines.\n+// We choose 128 because Apple Silicon, a.k.a. M1, has 128-byte cache line size.\n+// It doesn't cost much and is much more future-proof.\n+const cacheLineSize = 128\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"fp\", Feature: &ARM64.HasFP},\n+\t\t{Name: \"asimd\", Feature: &ARM64.HasASIMD},\n+\t\t{Name: \"evstrm\", Feature: &ARM64.HasEVTSTRM},\n+\t\t{Name: \"aes\", Feature: &ARM64.HasAES},\n+\t\t{Name: \"fphp\", Feature: &ARM64.HasFPHP},\n+\t\t{Name: \"jscvt\", Feature: &ARM64.HasJSCVT},\n+\t\t{Name: \"lrcpc\", Feature: &ARM64.HasLRCPC},\n+\t\t{Name: \"pmull\", Feature: &ARM64.HasPMULL},\n+\t\t{Name: \"sha1\", Feature: &ARM64.HasSHA1},\n+\t\t{Name: \"sha2\", Feature: &ARM64.HasSHA2},\n+\t\t{Name: \"sha3\", Feature: &ARM64.HasSHA3},\n+\t\t{Name: \"sha512\", Feature: &ARM64.HasSHA512},\n+\t\t{Name: \"sm3\", Feature: &ARM64.HasSM3},\n+\t\t{Name: \"sm4\", Feature: &ARM64.HasSM4},\n+\t\t{Name: \"sve\", Feature: &ARM64.HasSVE},\n+\t\t{Name: \"sve2\", Feature: &ARM64.HasSVE2},\n+\t\t{Name: \"crc32\", Feature: &ARM64.HasCRC32},\n+\t\t{Name: \"atomics\", Feature: &ARM64.HasATOMICS},\n+\t\t{Name: \"asimdhp\", Feature: &ARM64.HasASIMDHP},\n+\t\t{Name: \"cpuid\", Feature: &ARM64.HasCPUID},\n+\t\t{Name: \"asimrdm\", Feature: &ARM64.HasASIMDRDM},\n+\t\t{Name: \"fcma\", Feature: &ARM64.HasFCMA},\n+\t\t{Name: \"dcpop\", Feature: &ARM64.HasDCPOP},\n+\t\t{Name: \"asimddp\", Feature: &ARM64.HasASIMDDP},\n+\t\t{Name: \"asimdfhm\", Feature: &ARM64.HasASIMDFHM},\n+\t\t{Name: \"dit\", Feature: &ARM64.HasDIT},\n+\t\t{Name: \"i8mm\", Feature: &ARM64.HasI8MM},\n+\t}\n+}\n+\n+func archInit() {\n+\tswitch runtime.GOOS {\n+\tcase \"freebsd\":\n+\t\treadARM64Registers()\n+\tcase \"linux\", \"netbsd\", \"openbsd\":\n+\t\tdoinit()\n+\tdefault:\n+\t\t// Many platforms don't seem to allow reading these registers.\n+\t\tsetMinimalFeatures()\n+\t}\n+}\n+\n+// setMinimalFeatures fakes the minimal ARM64 features expected by\n+// TestARM64minimalFeatures.\n+func setMinimalFeatures() {\n+\tARM64.HasASIMD = true\n+\tARM64.HasFP = true\n+}\n+\n+func readARM64Registers() {\n+\tInitialized = true\n+\n+\tparseARM64SystemRegisters(getisar0(), getisar1(), getpfr0())\n+}\n+\n+func parseARM64SystemRegisters(isar0, isar1, pfr0 uint64) {\n+\t// ID_AA64ISAR0_EL1\n+\tswitch extractBits(isar0, 4, 7) {\n+\tcase 1:\n+\t\tARM64.HasAES = true\n+\tcase 2:\n+\t\tARM64.HasAES = true\n+\t\tARM64.HasPMULL = true\n+\t}\n+\n+\tswitch extractBits(isar0, 8, 11) {\n+\tcase 1:\n+\t\tARM64.HasSHA1 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 12, 15) {\n+\tcase 1:\n+\t\tARM64.HasSHA2 = true\n+\tcase 2:\n+\t\tARM64.HasSHA2 = true\n+\t\tARM64.HasSHA512 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 16, 19) {\n+\tcase 1:\n+\t\tARM64.HasCRC32 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 20, 23) {\n+\tcase 2:\n+\t\tARM64.HasATOMICS = true\n+\t}\n+\n+\tswitch extractBits(isar0, 28, 31) {\n+\tcase 1:\n+\t\tARM64.HasASIMDRDM = true\n+\t}\n+\n+\tswitch extractBits(isar0, 32, 35) {\n+\tcase 1:\n+\t\tARM64.HasSHA3 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 36, 39) {\n+\tcase 1:\n+\t\tARM64.HasSM3 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 40, 43) {\n+\tcase 1:\n+\t\tARM64.HasSM4 = true\n+\t}\n+\n+\tswitch extractBits(isar0, 44, 47) {\n+\tcase 1:\n+\t\tARM64.HasASIMDDP = true\n+\t}\n+\n+\t// ID_AA64ISAR1_EL1\n+\tswitch extractBits(isar1, 0, 3) {\n+\tcase 1:\n+\t\tARM64.HasDCPOP = true\n+\t}\n+\n+\tswitch extractBits(isar1, 12, 15) {\n+\tcase 1:\n+\t\tARM64.HasJSCVT = true\n+\t}\n+\n+\tswitch extractBits(isar1, 16, 19) {\n+\tcase 1:\n+\t\tARM64.HasFCMA = true\n+\t}\n+\n+\tswitch extractBits(isar1, 20, 23) {\n+\tcase 1:\n+\t\tARM64.HasLRCPC = true\n+\t}\n+\n+\tswitch extractBits(isar1, 52, 55) {\n+\tcase 1:\n+\t\tARM64.HasI8MM = true\n+\t}\n+\n+\t// ID_AA64PFR0_EL1\n+\tswitch extractBits(pfr0, 16, 19) {\n+\tcase 0:\n+\t\tARM64.HasFP = true\n+\tcase 1:\n+\t\tARM64.HasFP = true\n+\t\tARM64.HasFPHP = true\n+\t}\n+\n+\tswitch extractBits(pfr0, 20, 23) {\n+\tcase 0:\n+\t\tARM64.HasASIMD = true\n+\tcase 1:\n+\t\tARM64.HasASIMD = true\n+\t\tARM64.HasASIMDHP = true\n+\t}\n+\n+\tswitch extractBits(pfr0, 32, 35) {\n+\tcase 1:\n+\t\tARM64.HasSVE = true\n+\n+\t\tparseARM64SVERegister(getzfr0())\n+\t}\n+\n+\tswitch extractBits(pfr0, 48, 51) {\n+\tcase 1:\n+\t\tARM64.HasDIT = true\n+\t}\n+}\n+\n+func parseARM64SVERegister(zfr0 uint64) {\n+\tswitch extractBits(zfr0, 0, 3) {\n+\tcase 1:\n+\t\tARM64.HasSVE2 = true\n+\t}\n+}\n+\n+func extractBits(data uint64, start, end uint) uint {\n+\treturn (uint)(data>>start) & ((1 << (end - start + 1)) - 1)\n+}"
    },
    {
      "sha": "22cc99844a75693c78f2241ac334da02644411fc",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_arm64.s",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gc\n+\n+#include \"textflag.h\"\n+\n+// func getisar0() uint64\n+TEXT ·getisar0(SB),NOSPLIT,$0-8\n+\t// get Instruction Set Attributes 0 into x0\n+\t// mrs x0, ID_AA64ISAR0_EL1 = d5380600\n+\tWORD\t$0xd5380600\n+\tMOVD\tR0, ret+0(FP)\n+\tRET\n+\n+// func getisar1() uint64\n+TEXT ·getisar1(SB),NOSPLIT,$0-8\n+\t// get Instruction Set Attributes 1 into x0\n+\t// mrs x0, ID_AA64ISAR1_EL1 = d5380620\n+\tWORD\t$0xd5380620\n+\tMOVD\tR0, ret+0(FP)\n+\tRET\n+\n+// func getpfr0() uint64\n+TEXT ·getpfr0(SB),NOSPLIT,$0-8\n+\t// get Processor Feature Register 0 into x0\n+\t// mrs x0, ID_AA64PFR0_EL1 = d5380400\n+\tWORD\t$0xd5380400\n+\tMOVD\tR0, ret+0(FP)\n+\tRET\n+\n+// func getzfr0() uint64\n+TEXT ·getzfr0(SB),NOSPLIT,$0-8\n+\t// get SVE Feature Register 0 into x0\n+\t// mrs\tx0, ID_AA64ZFR0_EL1 = d5380480\n+\tWORD $0xd5380480\n+\tMOVD\tR0, ret+0(FP)\n+\tRET"
    },
    {
      "sha": "b838cb9e956e61f625d7976f3a123f44072e529b",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_darwin_x86.go",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_darwin_x86.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_darwin_x86.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_darwin_x86.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2024 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build darwin && amd64 && gc\n+\n+package cpu\n+\n+// darwinSupportsAVX512 checks Darwin kernel for AVX512 support via sysctl\n+// call (see issue 43089). It also restricts AVX512 support for Darwin to\n+// kernel version 21.3.0 (MacOS 12.2.0) or later (see issue 49233).\n+//\n+// Background:\n+// Darwin implements a special mechanism to economize on thread state when\n+// AVX512 specific registers are not in use. This scheme minimizes state when\n+// preempting threads that haven't yet used any AVX512 instructions, but adds\n+// special requirements to check for AVX512 hardware support at runtime (e.g.\n+// via sysctl call or commpage inspection). See issue 43089 and link below for\n+// full background:\n+// https://github.com/apple-oss-distributions/xnu/blob/xnu-11215.1.10/osfmk/i386/fpu.c#L214-L240\n+//\n+// Additionally, all versions of the Darwin kernel from 19.6.0 through 21.2.0\n+// (corresponding to MacOS 10.15.6 - 12.1) have a bug that can cause corruption\n+// of the AVX512 mask registers (K0-K7) upon signal return. For this reason\n+// AVX512 is considered unsafe to use on Darwin for kernel versions prior to\n+// 21.3.0, where a fix has been confirmed. See issue 49233 for full background.\n+func darwinSupportsAVX512() bool {\n+\treturn darwinSysctlEnabled([]byte(\"hw.optional.avx512f\\x00\")) && darwinKernelVersionCheck(21, 3, 0)\n+}\n+\n+// Ensure Darwin kernel version is at least major.minor.patch, avoiding dependencies\n+func darwinKernelVersionCheck(major, minor, patch int) bool {\n+\tvar release [256]byte\n+\terr := darwinOSRelease(&release)\n+\tif err != nil {\n+\t\treturn false\n+\t}\n+\n+\tvar mmp [3]int\n+\tc := 0\n+Loop:\n+\tfor _, b := range release[:] {\n+\t\tswitch {\n+\t\tcase b >= '0' && b <= '9':\n+\t\t\tmmp[c] = 10*mmp[c] + int(b-'0')\n+\t\tcase b == '.':\n+\t\t\tc++\n+\t\t\tif c > 2 {\n+\t\t\t\treturn false\n+\t\t\t}\n+\t\tcase b == 0:\n+\t\t\tbreak Loop\n+\t\tdefault:\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\tif c != 2 {\n+\t\treturn false\n+\t}\n+\treturn mmp[0] > major || mmp[0] == major && (mmp[1] > minor || mmp[1] == minor && mmp[2] >= patch)\n+}"
    },
    {
      "sha": "6ac6e1efb2087b950ad459226610811485fce2d1",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gc_arm64.go",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gc\n+\n+package cpu\n+\n+func getisar0() uint64\n+func getisar1() uint64\n+func getpfr0() uint64\n+func getzfr0() uint64"
    },
    {
      "sha": "c8ae6ddc156f50b564d2398f8fb6286a8602e5f0",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gc_s390x.go",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_s390x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_s390x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gc\n+\n+package cpu\n+\n+// haveAsmFunctions reports whether the other functions in this file can\n+// be safely called.\n+func haveAsmFunctions() bool { return true }\n+\n+// The following feature detection functions are defined in cpu_s390x.s.\n+// They are likely to be expensive to call so the results should be cached.\n+func stfle() facilityList\n+func kmQuery() queryResult\n+func kmcQuery() queryResult\n+func kmctrQuery() queryResult\n+func kmaQuery() queryResult\n+func kimdQuery() queryResult\n+func klmdQuery() queryResult"
    },
    {
      "sha": "32a44514e245fe38568a04ce77817b1b8c01aa73",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gc_x86.go",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build (386 || amd64 || amd64p32) && gc\n+\n+package cpu\n+\n+// cpuid is implemented in cpu_gc_x86.s for gc compiler\n+// and in cpu_gccgo.c for gccgo.\n+func cpuid(eaxArg, ecxArg uint32) (eax, ebx, ecx, edx uint32)\n+\n+// xgetbv with ecx = 0 is implemented in cpu_gc_x86.s for gc compiler\n+// and in cpu_gccgo.c for gccgo.\n+func xgetbv() (eax, edx uint32)"
    },
    {
      "sha": "ce208ce6d6a3a64925076de5b9db96a4afedaf0d",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gc_x86.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gc_x86.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build (386 || amd64 || amd64p32) && gc\n+\n+#include \"textflag.h\"\n+\n+// func cpuid(eaxArg, ecxArg uint32) (eax, ebx, ecx, edx uint32)\n+TEXT ·cpuid(SB), NOSPLIT, $0-24\n+\tMOVL eaxArg+0(FP), AX\n+\tMOVL ecxArg+4(FP), CX\n+\tCPUID\n+\tMOVL AX, eax+8(FP)\n+\tMOVL BX, ebx+12(FP)\n+\tMOVL CX, ecx+16(FP)\n+\tMOVL DX, edx+20(FP)\n+\tRET\n+\n+// func xgetbv() (eax, edx uint32)\n+TEXT ·xgetbv(SB), NOSPLIT, $0-8\n+\tMOVL $0, CX\n+\tXGETBV\n+\tMOVL AX, eax+0(FP)\n+\tMOVL DX, edx+4(FP)\n+\tRET"
    },
    {
      "sha": "7f1946780bd305c1d17491b40bc4062ea32d228d",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gccgo_arm64.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gccgo\n+\n+package cpu\n+\n+func getisar0() uint64 { return 0 }\n+func getisar1() uint64 { return 0 }\n+func getpfr0() uint64  { return 0 }"
    },
    {
      "sha": "9526d2ce3a957e675e79b7e9084860934fbc3c57",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gccgo_s390x.go",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_s390x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_s390x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gccgo\n+\n+package cpu\n+\n+// haveAsmFunctions reports whether the other functions in this file can\n+// be safely called.\n+func haveAsmFunctions() bool { return false }\n+\n+// TODO(mundaym): the following feature detection functions are currently\n+// stubs. See https://golang.org/cl/162887 for how to fix this.\n+// They are likely to be expensive to call so the results should be cached.\n+func stfle() facilityList     { panic(\"not implemented for gccgo\") }\n+func kmQuery() queryResult    { panic(\"not implemented for gccgo\") }\n+func kmcQuery() queryResult   { panic(\"not implemented for gccgo\") }\n+func kmctrQuery() queryResult { panic(\"not implemented for gccgo\") }\n+func kmaQuery() queryResult   { panic(\"not implemented for gccgo\") }\n+func kimdQuery() queryResult  { panic(\"not implemented for gccgo\") }\n+func klmdQuery() queryResult  { panic(\"not implemented for gccgo\") }"
    },
    {
      "sha": "3f73a05dcf328b92c22ed7aa3b62c7abe792fdd4",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gccgo_x86.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.c",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.c",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.c?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build (386 || amd64 || amd64p32) && gccgo\n+\n+#include <cpuid.h>\n+#include <stdint.h>\n+#include <x86intrin.h>\n+\n+// Need to wrap __get_cpuid_count because it's declared as static.\n+int\n+gccgoGetCpuidCount(uint32_t leaf, uint32_t subleaf,\n+                   uint32_t *eax, uint32_t *ebx,\n+                   uint32_t *ecx, uint32_t *edx)\n+{\n+\treturn __get_cpuid_count(leaf, subleaf, eax, ebx, ecx, edx);\n+}\n+\n+#pragma GCC diagnostic ignored \"-Wunknown-pragmas\"\n+#pragma GCC push_options\n+#pragma GCC target(\"xsave\")\n+#pragma clang attribute push (__attribute__((target(\"xsave\"))), apply_to=function)\n+\n+// xgetbv reads the contents of an XCR (Extended Control Register)\n+// specified in the ECX register into registers EDX:EAX.\n+// Currently, the only supported value for XCR is 0.\n+void\n+gccgoXgetbv(uint32_t *eax, uint32_t *edx)\n+{\n+\tuint64_t v = _xgetbv(0);\n+\t*eax = v & 0xffffffff;\n+\t*edx = v >> 32;\n+}\n+\n+#pragma clang attribute pop\n+#pragma GCC pop_options"
    },
    {
      "sha": "170d21ddfda4163fb6d9d2094fb62ff9e027fb65",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_gccgo_x86.go",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_gccgo_x86.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build (386 || amd64 || amd64p32) && gccgo\n+\n+package cpu\n+\n+//extern gccgoGetCpuidCount\n+func gccgoGetCpuidCount(eaxArg, ecxArg uint32, eax, ebx, ecx, edx *uint32)\n+\n+func cpuid(eaxArg, ecxArg uint32) (eax, ebx, ecx, edx uint32) {\n+\tvar a, b, c, d uint32\n+\tgccgoGetCpuidCount(eaxArg, ecxArg, &a, &b, &c, &d)\n+\treturn a, b, c, d\n+}\n+\n+//extern gccgoXgetbv\n+func gccgoXgetbv(eax, edx *uint32)\n+\n+func xgetbv() (eax, edx uint32) {\n+\tvar a, d uint32\n+\tgccgoXgetbv(&a, &d)\n+\treturn a, d\n+}"
    },
    {
      "sha": "743eb54354b598b61a295d11e04a3f3f95b4b9df",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux.go",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !386 && !amd64 && !amd64p32 && !arm64\n+\n+package cpu\n+\n+func archInit() {\n+\tif err := readHWCAP(); err != nil {\n+\t\treturn\n+\t}\n+\tdoinit()\n+\tInitialized = true\n+}"
    },
    {
      "sha": "2057006dce4c0d7d3a8acc0cd720042ef277738b",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_arm.go",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+func doinit() {\n+\tARM.HasSWP = isSet(hwCap, hwcap_SWP)\n+\tARM.HasHALF = isSet(hwCap, hwcap_HALF)\n+\tARM.HasTHUMB = isSet(hwCap, hwcap_THUMB)\n+\tARM.Has26BIT = isSet(hwCap, hwcap_26BIT)\n+\tARM.HasFASTMUL = isSet(hwCap, hwcap_FAST_MULT)\n+\tARM.HasFPA = isSet(hwCap, hwcap_FPA)\n+\tARM.HasVFP = isSet(hwCap, hwcap_VFP)\n+\tARM.HasEDSP = isSet(hwCap, hwcap_EDSP)\n+\tARM.HasJAVA = isSet(hwCap, hwcap_JAVA)\n+\tARM.HasIWMMXT = isSet(hwCap, hwcap_IWMMXT)\n+\tARM.HasCRUNCH = isSet(hwCap, hwcap_CRUNCH)\n+\tARM.HasTHUMBEE = isSet(hwCap, hwcap_THUMBEE)\n+\tARM.HasNEON = isSet(hwCap, hwcap_NEON)\n+\tARM.HasVFPv3 = isSet(hwCap, hwcap_VFPv3)\n+\tARM.HasVFPv3D16 = isSet(hwCap, hwcap_VFPv3D16)\n+\tARM.HasTLS = isSet(hwCap, hwcap_TLS)\n+\tARM.HasVFPv4 = isSet(hwCap, hwcap_VFPv4)\n+\tARM.HasIDIVA = isSet(hwCap, hwcap_IDIVA)\n+\tARM.HasIDIVT = isSet(hwCap, hwcap_IDIVT)\n+\tARM.HasVFPD32 = isSet(hwCap, hwcap_VFPD32)\n+\tARM.HasLPAE = isSet(hwCap, hwcap_LPAE)\n+\tARM.HasEVTSTRM = isSet(hwCap, hwcap_EVTSTRM)\n+\tARM.HasAES = isSet(hwCap2, hwcap2_AES)\n+\tARM.HasPMULL = isSet(hwCap2, hwcap2_PMULL)\n+\tARM.HasSHA1 = isSet(hwCap2, hwcap2_SHA1)\n+\tARM.HasSHA2 = isSet(hwCap2, hwcap2_SHA2)\n+\tARM.HasCRC32 = isSet(hwCap2, hwcap2_CRC32)\n+}\n+\n+func isSet(hwc uint, value uint) bool {\n+\treturn hwc&value != 0\n+}"
    },
    {
      "sha": "f1caf0f78e24b65db57f1b599d8bead8e1d9d65f",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_arm64.go",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,120 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"strings\"\n+\t\"syscall\"\n+)\n+\n+// HWCAP/HWCAP2 bits. These are exposed by Linux.\n+const (\n+\thwcap_FP       = 1 << 0\n+\thwcap_ASIMD    = 1 << 1\n+\thwcap_EVTSTRM  = 1 << 2\n+\thwcap_AES      = 1 << 3\n+\thwcap_PMULL    = 1 << 4\n+\thwcap_SHA1     = 1 << 5\n+\thwcap_SHA2     = 1 << 6\n+\thwcap_CRC32    = 1 << 7\n+\thwcap_ATOMICS  = 1 << 8\n+\thwcap_FPHP     = 1 << 9\n+\thwcap_ASIMDHP  = 1 << 10\n+\thwcap_CPUID    = 1 << 11\n+\thwcap_ASIMDRDM = 1 << 12\n+\thwcap_JSCVT    = 1 << 13\n+\thwcap_FCMA     = 1 << 14\n+\thwcap_LRCPC    = 1 << 15\n+\thwcap_DCPOP    = 1 << 16\n+\thwcap_SHA3     = 1 << 17\n+\thwcap_SM3      = 1 << 18\n+\thwcap_SM4      = 1 << 19\n+\thwcap_ASIMDDP  = 1 << 20\n+\thwcap_SHA512   = 1 << 21\n+\thwcap_SVE      = 1 << 22\n+\thwcap_ASIMDFHM = 1 << 23\n+\thwcap_DIT      = 1 << 24\n+\n+\thwcap2_SVE2 = 1 << 1\n+\thwcap2_I8MM = 1 << 13\n+)\n+\n+// linuxKernelCanEmulateCPUID reports whether we're running\n+// on Linux 4.11+. Ideally we'd like to ask the question about\n+// whether the current kernel contains\n+// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=77c97b4ee21290f5f083173d957843b615abbff2\n+// but the version number will have to do.\n+func linuxKernelCanEmulateCPUID() bool {\n+\tvar un syscall.Utsname\n+\tsyscall.Uname(&un)\n+\tvar sb strings.Builder\n+\tfor _, b := range un.Release[:] {\n+\t\tif b == 0 {\n+\t\t\tbreak\n+\t\t}\n+\t\tsb.WriteByte(byte(b))\n+\t}\n+\tmajor, minor, _, ok := parseRelease(sb.String())\n+\treturn ok && (major > 4 || major == 4 && minor >= 11)\n+}\n+\n+func doinit() {\n+\tif err := readHWCAP(); err != nil {\n+\t\t// We failed to read /proc/self/auxv. This can happen if the binary has\n+\t\t// been given extra capabilities(7) with /bin/setcap.\n+\t\t//\n+\t\t// When this happens, we have two options. If the Linux kernel is new\n+\t\t// enough (4.11+), we can read the arm64 registers directly which'll\n+\t\t// trap into the kernel and then return back to userspace.\n+\t\t//\n+\t\t// But on older kernels, such as Linux 4.4.180 as used on many Synology\n+\t\t// devices, calling readARM64Registers (specifically getisar0) will\n+\t\t// cause a SIGILL and we'll die. So for older kernels, parse /proc/cpuinfo\n+\t\t// instead.\n+\t\t//\n+\t\t// See golang/go#57336.\n+\t\tif linuxKernelCanEmulateCPUID() {\n+\t\t\treadARM64Registers()\n+\t\t} else {\n+\t\t\treadLinuxProcCPUInfo()\n+\t\t}\n+\t\treturn\n+\t}\n+\n+\t// HWCAP feature bits\n+\tARM64.HasFP = isSet(hwCap, hwcap_FP)\n+\tARM64.HasASIMD = isSet(hwCap, hwcap_ASIMD)\n+\tARM64.HasEVTSTRM = isSet(hwCap, hwcap_EVTSTRM)\n+\tARM64.HasAES = isSet(hwCap, hwcap_AES)\n+\tARM64.HasPMULL = isSet(hwCap, hwcap_PMULL)\n+\tARM64.HasSHA1 = isSet(hwCap, hwcap_SHA1)\n+\tARM64.HasSHA2 = isSet(hwCap, hwcap_SHA2)\n+\tARM64.HasCRC32 = isSet(hwCap, hwcap_CRC32)\n+\tARM64.HasATOMICS = isSet(hwCap, hwcap_ATOMICS)\n+\tARM64.HasFPHP = isSet(hwCap, hwcap_FPHP)\n+\tARM64.HasASIMDHP = isSet(hwCap, hwcap_ASIMDHP)\n+\tARM64.HasCPUID = isSet(hwCap, hwcap_CPUID)\n+\tARM64.HasASIMDRDM = isSet(hwCap, hwcap_ASIMDRDM)\n+\tARM64.HasJSCVT = isSet(hwCap, hwcap_JSCVT)\n+\tARM64.HasFCMA = isSet(hwCap, hwcap_FCMA)\n+\tARM64.HasLRCPC = isSet(hwCap, hwcap_LRCPC)\n+\tARM64.HasDCPOP = isSet(hwCap, hwcap_DCPOP)\n+\tARM64.HasSHA3 = isSet(hwCap, hwcap_SHA3)\n+\tARM64.HasSM3 = isSet(hwCap, hwcap_SM3)\n+\tARM64.HasSM4 = isSet(hwCap, hwcap_SM4)\n+\tARM64.HasASIMDDP = isSet(hwCap, hwcap_ASIMDDP)\n+\tARM64.HasSHA512 = isSet(hwCap, hwcap_SHA512)\n+\tARM64.HasSVE = isSet(hwCap, hwcap_SVE)\n+\tARM64.HasASIMDFHM = isSet(hwCap, hwcap_ASIMDFHM)\n+\tARM64.HasDIT = isSet(hwCap, hwcap_DIT)\n+\n+\t// HWCAP2 feature bits\n+\tARM64.HasSVE2 = isSet(hwCap2, hwcap2_SVE2)\n+\tARM64.HasI8MM = isSet(hwCap2, hwcap2_I8MM)\n+}\n+\n+func isSet(hwc uint, value uint) bool {\n+\treturn hwc&value != 0\n+}"
    },
    {
      "sha": "4686c1d541d888a71ef645882666639daeda9e6e",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_mips64x.go",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_mips64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_mips64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_mips64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build linux && (mips64 || mips64le)\n+\n+package cpu\n+\n+// HWCAP bits. These are exposed by the Linux kernel 5.4.\n+const (\n+\t// CPU features\n+\thwcap_MIPS_MSA = 1 << 1\n+)\n+\n+func doinit() {\n+\t// HWCAP feature bits\n+\tMIPS64X.HasMSA = isSet(hwCap, hwcap_MIPS_MSA)\n+}\n+\n+func isSet(hwc uint, value uint) bool {\n+\treturn hwc&value != 0\n+}"
    },
    {
      "sha": "7d902b6847bbf90526eb980e09039a79cebcceda",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_noinit.go",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_noinit.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build linux && !arm && !arm64 && !mips64 && !mips64le && !ppc64 && !ppc64le && !s390x && !riscv64\n+\n+package cpu\n+\n+func doinit() {}"
    },
    {
      "sha": "197188e67f34368bdcfae683cd73a32fbf22c054",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_ppc64x.go",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build linux && (ppc64 || ppc64le)\n+\n+package cpu\n+\n+// HWCAP/HWCAP2 bits. These are exposed by the kernel.\n+const (\n+\t// ISA Level\n+\t_PPC_FEATURE2_ARCH_2_07 = 0x80000000\n+\t_PPC_FEATURE2_ARCH_3_00 = 0x00800000\n+\n+\t// CPU features\n+\t_PPC_FEATURE2_DARN = 0x00200000\n+\t_PPC_FEATURE2_SCV  = 0x00100000\n+)\n+\n+func doinit() {\n+\t// HWCAP2 feature bits\n+\tPPC64.IsPOWER8 = isSet(hwCap2, _PPC_FEATURE2_ARCH_2_07)\n+\tPPC64.IsPOWER9 = isSet(hwCap2, _PPC_FEATURE2_ARCH_3_00)\n+\tPPC64.HasDARN = isSet(hwCap2, _PPC_FEATURE2_DARN)\n+\tPPC64.HasSCV = isSet(hwCap2, _PPC_FEATURE2_SCV)\n+}\n+\n+func isSet(hwc uint, value uint) bool {\n+\treturn hwc&value != 0\n+}"
    },
    {
      "sha": "cb4a0c5728073c634d2cf69b3d76286e013a82ae",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_riscv64.go",
      "status": "added",
      "additions": 137,
      "deletions": 0,
      "changes": 137,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_riscv64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_riscv64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,137 @@\n+// Copyright 2024 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"syscall\"\n+\t\"unsafe\"\n+)\n+\n+// RISC-V extension discovery code for Linux. The approach here is to first try the riscv_hwprobe\n+// syscall falling back to HWCAP to check for the C extension if riscv_hwprobe is not available.\n+//\n+// A note on detection of the Vector extension using HWCAP.\n+//\n+// Support for the Vector extension version 1.0 was added to the Linux kernel in release 6.5.\n+// Support for the riscv_hwprobe syscall was added in 6.4. It follows that if the riscv_hwprobe\n+// syscall is not available then neither is the Vector extension (which needs kernel support).\n+// The riscv_hwprobe syscall should then be all we need to detect the Vector extension.\n+// However, some RISC-V board manufacturers ship boards with an older kernel on top of which\n+// they have back-ported various versions of the Vector extension patches but not the riscv_hwprobe\n+// patches. These kernels advertise support for the Vector extension using HWCAP. Falling\n+// back to HWCAP to detect the Vector extension, if riscv_hwprobe is not available, or simply not\n+// bothering with riscv_hwprobe at all and just using HWCAP may then seem like an attractive option.\n+//\n+// Unfortunately, simply checking the 'V' bit in AT_HWCAP will not work as this bit is used by\n+// RISC-V board and cloud instance providers to mean different things. The Lichee Pi 4A board\n+// and the Scaleway RV1 cloud instances use the 'V' bit to advertise their support for the unratified\n+// 0.7.1 version of the Vector Specification. The Banana Pi BPI-F3 and the CanMV-K230 board use\n+// it to advertise support for 1.0 of the Vector extension. Versions 0.7.1 and 1.0 of the Vector\n+// extension are binary incompatible. HWCAP can then not be used in isolation to populate the\n+// HasV field as this field indicates that the underlying CPU is compatible with RVV 1.0.\n+//\n+// There is a way at runtime to distinguish between versions 0.7.1 and 1.0 of the Vector\n+// specification by issuing a RVV 1.0 vsetvli instruction and checking the vill bit of the vtype\n+// register. This check would allow us to safely detect version 1.0 of the Vector extension\n+// with HWCAP, if riscv_hwprobe were not available. However, the check cannot\n+// be added until the assembler supports the Vector instructions.\n+//\n+// Note the riscv_hwprobe syscall does not suffer from these ambiguities by design as all of the\n+// extensions it advertises support for are explicitly versioned. It's also worth noting that\n+// the riscv_hwprobe syscall is the only way to detect multi-letter RISC-V extensions, e.g., Zba.\n+// These cannot be detected using HWCAP and so riscv_hwprobe must be used to detect the majority\n+// of RISC-V extensions.\n+//\n+// Please see https://docs.kernel.org/arch/riscv/hwprobe.html for more information.\n+\n+// golang.org/x/sys/cpu is not allowed to depend on golang.org/x/sys/unix so we must\n+// reproduce the constants, types and functions needed to make the riscv_hwprobe syscall\n+// here.\n+\n+const (\n+\t// Copied from golang.org/x/sys/unix/ztypes_linux_riscv64.go.\n+\triscv_HWPROBE_KEY_IMA_EXT_0   = 0x4\n+\triscv_HWPROBE_IMA_C           = 0x2\n+\triscv_HWPROBE_IMA_V           = 0x4\n+\triscv_HWPROBE_EXT_ZBA         = 0x8\n+\triscv_HWPROBE_EXT_ZBB         = 0x10\n+\triscv_HWPROBE_EXT_ZBS         = 0x20\n+\triscv_HWPROBE_KEY_CPUPERF_0   = 0x5\n+\triscv_HWPROBE_MISALIGNED_FAST = 0x3\n+\triscv_HWPROBE_MISALIGNED_MASK = 0x7\n+)\n+\n+const (\n+\t// sys_RISCV_HWPROBE is copied from golang.org/x/sys/unix/zsysnum_linux_riscv64.go.\n+\tsys_RISCV_HWPROBE = 258\n+)\n+\n+// riscvHWProbePairs is copied from golang.org/x/sys/unix/ztypes_linux_riscv64.go.\n+type riscvHWProbePairs struct {\n+\tkey   int64\n+\tvalue uint64\n+}\n+\n+const (\n+\t// CPU features\n+\thwcap_RISCV_ISA_C = 1 << ('C' - 'A')\n+)\n+\n+func doinit() {\n+\t// A slice of key/value pair structures is passed to the RISCVHWProbe syscall. The key\n+\t// field should be initialised with one of the key constants defined above, e.g.,\n+\t// RISCV_HWPROBE_KEY_IMA_EXT_0. The syscall will set the value field to the appropriate value.\n+\t// If the kernel does not recognise a key it will set the key field to -1 and the value field to 0.\n+\n+\tpairs := []riscvHWProbePairs{\n+\t\t{riscv_HWPROBE_KEY_IMA_EXT_0, 0},\n+\t\t{riscv_HWPROBE_KEY_CPUPERF_0, 0},\n+\t}\n+\n+\t// This call only indicates that extensions are supported if they are implemented on all cores.\n+\tif riscvHWProbe(pairs, 0) {\n+\t\tif pairs[0].key != -1 {\n+\t\t\tv := uint(pairs[0].value)\n+\t\t\tRISCV64.HasC = isSet(v, riscv_HWPROBE_IMA_C)\n+\t\t\tRISCV64.HasV = isSet(v, riscv_HWPROBE_IMA_V)\n+\t\t\tRISCV64.HasZba = isSet(v, riscv_HWPROBE_EXT_ZBA)\n+\t\t\tRISCV64.HasZbb = isSet(v, riscv_HWPROBE_EXT_ZBB)\n+\t\t\tRISCV64.HasZbs = isSet(v, riscv_HWPROBE_EXT_ZBS)\n+\t\t}\n+\t\tif pairs[1].key != -1 {\n+\t\t\tv := pairs[1].value & riscv_HWPROBE_MISALIGNED_MASK\n+\t\t\tRISCV64.HasFastMisaligned = v == riscv_HWPROBE_MISALIGNED_FAST\n+\t\t}\n+\t}\n+\n+\t// Let's double check with HWCAP if the C extension does not appear to be supported.\n+\t// This may happen if we're running on a kernel older than 6.4.\n+\n+\tif !RISCV64.HasC {\n+\t\tRISCV64.HasC = isSet(hwCap, hwcap_RISCV_ISA_C)\n+\t}\n+}\n+\n+func isSet(hwc uint, value uint) bool {\n+\treturn hwc&value != 0\n+}\n+\n+// riscvHWProbe is a simplified version of the generated wrapper function found in\n+// golang.org/x/sys/unix/zsyscall_linux_riscv64.go. We simplify it by removing the\n+// cpuCount and cpus parameters which we do not need. We always want to pass 0 for\n+// these parameters here so the kernel only reports the extensions that are present\n+// on all cores.\n+func riscvHWProbe(pairs []riscvHWProbePairs, flags uint) bool {\n+\tvar _zero uintptr\n+\tvar p0 unsafe.Pointer\n+\tif len(pairs) > 0 {\n+\t\tp0 = unsafe.Pointer(&pairs[0])\n+\t} else {\n+\t\tp0 = unsafe.Pointer(&_zero)\n+\t}\n+\n+\t_, _, e1 := syscall.Syscall6(sys_RISCV_HWPROBE, uintptr(p0), uintptr(len(pairs)), uintptr(0), uintptr(0), uintptr(flags), 0)\n+\treturn e1 == 0\n+}"
    },
    {
      "sha": "1517ac61d31b5aef0d3e9d3d9df18ca199e4a580",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_linux_s390x.go",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+const (\n+\t// bit mask values from /usr/include/bits/hwcap.h\n+\thwcap_ZARCH  = 2\n+\thwcap_STFLE  = 4\n+\thwcap_MSA    = 8\n+\thwcap_LDISP  = 16\n+\thwcap_EIMM   = 32\n+\thwcap_DFP    = 64\n+\thwcap_ETF3EH = 256\n+\thwcap_VX     = 2048\n+\thwcap_VXE    = 8192\n+)\n+\n+func initS390Xbase() {\n+\t// test HWCAP bit vector\n+\thas := func(featureMask uint) bool {\n+\t\treturn hwCap&featureMask == featureMask\n+\t}\n+\n+\t// mandatory\n+\tS390X.HasZARCH = has(hwcap_ZARCH)\n+\n+\t// optional\n+\tS390X.HasSTFLE = has(hwcap_STFLE)\n+\tS390X.HasLDISP = has(hwcap_LDISP)\n+\tS390X.HasEIMM = has(hwcap_EIMM)\n+\tS390X.HasETF3EH = has(hwcap_ETF3EH)\n+\tS390X.HasDFP = has(hwcap_DFP)\n+\tS390X.HasMSA = has(hwcap_MSA)\n+\tS390X.HasVX = has(hwcap_VX)\n+\tif S390X.HasVX {\n+\t\tS390X.HasVXE = has(hwcap_VXE)\n+\t}\n+}"
    },
    {
      "sha": "558635850c7860085e2b14ce20d01cf2aa39ab3c",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_loong64.go",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_loong64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build loong64\n+\n+package cpu\n+\n+const cacheLineSize = 64\n+\n+func initOptions() {\n+}"
    },
    {
      "sha": "fedb00cc4cb9f1dd8fc7fcc78a8bd148b0898b71",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_mips64x.go",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build mips64 || mips64le\n+\n+package cpu\n+\n+const cacheLineSize = 32\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"msa\", Feature: &MIPS64X.HasMSA},\n+\t}\n+}"
    },
    {
      "sha": "ffb4ec7eb39e57d8230c0fa4c787543aec7deadc",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_mipsx.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build mips || mipsle\n+\n+package cpu\n+\n+const cacheLineSize = 32\n+\n+func initOptions() {}"
    },
    {
      "sha": "ebfb3fc8e76d2acc9d337527e450fb3d69f8107b",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_netbsd_arm64.go",
      "status": "added",
      "additions": 173,
      "deletions": 0,
      "changes": 173,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_netbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_netbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_netbsd_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,173 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"syscall\"\n+\t\"unsafe\"\n+)\n+\n+// Minimal copy of functionality from x/sys/unix so the cpu package can call\n+// sysctl without depending on x/sys/unix.\n+\n+const (\n+\t_CTL_QUERY = -2\n+\n+\t_SYSCTL_VERS_1 = 0x1000000\n+)\n+\n+var _zero uintptr\n+\n+func sysctl(mib []int32, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(mib) > 0 {\n+\t\t_p0 = unsafe.Pointer(&mib[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\t_, _, errno := syscall.Syscall6(\n+\t\tsyscall.SYS___SYSCTL,\n+\t\tuintptr(_p0),\n+\t\tuintptr(len(mib)),\n+\t\tuintptr(unsafe.Pointer(old)),\n+\t\tuintptr(unsafe.Pointer(oldlen)),\n+\t\tuintptr(unsafe.Pointer(new)),\n+\t\tuintptr(newlen))\n+\tif errno != 0 {\n+\t\treturn errno\n+\t}\n+\treturn nil\n+}\n+\n+type sysctlNode struct {\n+\tFlags          uint32\n+\tNum            int32\n+\tName           [32]int8\n+\tVer            uint32\n+\t__rsvd         uint32\n+\tUn             [16]byte\n+\t_sysctl_size   [8]byte\n+\t_sysctl_func   [8]byte\n+\t_sysctl_parent [8]byte\n+\t_sysctl_desc   [8]byte\n+}\n+\n+func sysctlNodes(mib []int32) ([]sysctlNode, error) {\n+\tvar olen uintptr\n+\n+\t// Get a list of all sysctl nodes below the given MIB by performing\n+\t// a sysctl for the given MIB with CTL_QUERY appended.\n+\tmib = append(mib, _CTL_QUERY)\n+\tqnode := sysctlNode{Flags: _SYSCTL_VERS_1}\n+\tqp := (*byte)(unsafe.Pointer(&qnode))\n+\tsz := unsafe.Sizeof(qnode)\n+\tif err := sysctl(mib, nil, &olen, qp, sz); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// Now that we know the size, get the actual nodes.\n+\tnodes := make([]sysctlNode, olen/sz)\n+\tnp := (*byte)(unsafe.Pointer(&nodes[0]))\n+\tif err := sysctl(mib, np, &olen, qp, sz); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn nodes, nil\n+}\n+\n+func nametomib(name string) ([]int32, error) {\n+\t// Split name into components.\n+\tvar parts []string\n+\tlast := 0\n+\tfor i := 0; i < len(name); i++ {\n+\t\tif name[i] == '.' {\n+\t\t\tparts = append(parts, name[last:i])\n+\t\t\tlast = i + 1\n+\t\t}\n+\t}\n+\tparts = append(parts, name[last:])\n+\n+\tmib := []int32{}\n+\t// Discover the nodes and construct the MIB OID.\n+\tfor partno, part := range parts {\n+\t\tnodes, err := sysctlNodes(mib)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfor _, node := range nodes {\n+\t\t\tn := make([]byte, 0)\n+\t\t\tfor i := range node.Name {\n+\t\t\t\tif node.Name[i] != 0 {\n+\t\t\t\t\tn = append(n, byte(node.Name[i]))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif string(n) == part {\n+\t\t\t\tmib = append(mib, int32(node.Num))\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tif len(mib) != partno+1 {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\treturn mib, nil\n+}\n+\n+// aarch64SysctlCPUID is struct aarch64_sysctl_cpu_id from NetBSD's <aarch64/armreg.h>\n+type aarch64SysctlCPUID struct {\n+\tmidr      uint64 /* Main ID Register */\n+\trevidr    uint64 /* Revision ID Register */\n+\tmpidr     uint64 /* Multiprocessor Affinity Register */\n+\taa64dfr0  uint64 /* A64 Debug Feature Register 0 */\n+\taa64dfr1  uint64 /* A64 Debug Feature Register 1 */\n+\taa64isar0 uint64 /* A64 Instruction Set Attribute Register 0 */\n+\taa64isar1 uint64 /* A64 Instruction Set Attribute Register 1 */\n+\taa64mmfr0 uint64 /* A64 Memory Model Feature Register 0 */\n+\taa64mmfr1 uint64 /* A64 Memory Model Feature Register 1 */\n+\taa64mmfr2 uint64 /* A64 Memory Model Feature Register 2 */\n+\taa64pfr0  uint64 /* A64 Processor Feature Register 0 */\n+\taa64pfr1  uint64 /* A64 Processor Feature Register 1 */\n+\taa64zfr0  uint64 /* A64 SVE Feature ID Register 0 */\n+\tmvfr0     uint32 /* Media and VFP Feature Register 0 */\n+\tmvfr1     uint32 /* Media and VFP Feature Register 1 */\n+\tmvfr2     uint32 /* Media and VFP Feature Register 2 */\n+\tpad       uint32\n+\tclidr     uint64 /* Cache Level ID Register */\n+\tctr       uint64 /* Cache Type Register */\n+}\n+\n+func sysctlCPUID(name string) (*aarch64SysctlCPUID, error) {\n+\tmib, err := nametomib(name)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tout := aarch64SysctlCPUID{}\n+\tn := unsafe.Sizeof(out)\n+\t_, _, errno := syscall.Syscall6(\n+\t\tsyscall.SYS___SYSCTL,\n+\t\tuintptr(unsafe.Pointer(&mib[0])),\n+\t\tuintptr(len(mib)),\n+\t\tuintptr(unsafe.Pointer(&out)),\n+\t\tuintptr(unsafe.Pointer(&n)),\n+\t\tuintptr(0),\n+\t\tuintptr(0))\n+\tif errno != 0 {\n+\t\treturn nil, errno\n+\t}\n+\treturn &out, nil\n+}\n+\n+func doinit() {\n+\tcpuid, err := sysctlCPUID(\"machdep.cpu0.cpu_id\")\n+\tif err != nil {\n+\t\tsetMinimalFeatures()\n+\t\treturn\n+\t}\n+\tparseARM64SystemRegisters(cpuid.aa64isar0, cpuid.aa64isar1, cpuid.aa64pfr0)\n+\n+\tInitialized = true\n+}"
    },
    {
      "sha": "85b64d5ccb735e9387ee9dad8b583d4458bc6ffe",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_openbsd_arm64.go",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"syscall\"\n+\t\"unsafe\"\n+)\n+\n+// Minimal copy of functionality from x/sys/unix so the cpu package can call\n+// sysctl without depending on x/sys/unix.\n+\n+const (\n+\t// From OpenBSD's sys/sysctl.h.\n+\t_CTL_MACHDEP = 7\n+\n+\t// From OpenBSD's machine/cpu.h.\n+\t_CPU_ID_AA64ISAR0 = 2\n+\t_CPU_ID_AA64ISAR1 = 3\n+)\n+\n+// Implemented in the runtime package (runtime/sys_openbsd3.go)\n+func syscall_syscall6(fn, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)\n+\n+//go:linkname syscall_syscall6 syscall.syscall6\n+\n+func sysctl(mib []uint32, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (err error) {\n+\t_, _, errno := syscall_syscall6(libc_sysctl_trampoline_addr, uintptr(unsafe.Pointer(&mib[0])), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen))\n+\tif errno != 0 {\n+\t\treturn errno\n+\t}\n+\treturn nil\n+}\n+\n+var libc_sysctl_trampoline_addr uintptr\n+\n+//go:cgo_import_dynamic libc_sysctl sysctl \"libc.so\"\n+\n+func sysctlUint64(mib []uint32) (uint64, bool) {\n+\tvar out uint64\n+\tnout := unsafe.Sizeof(out)\n+\tif err := sysctl(mib, (*byte)(unsafe.Pointer(&out)), &nout, nil, 0); err != nil {\n+\t\treturn 0, false\n+\t}\n+\treturn out, true\n+}\n+\n+func doinit() {\n+\tsetMinimalFeatures()\n+\n+\t// Get ID_AA64ISAR0 and ID_AA64ISAR1 from sysctl.\n+\tisar0, ok := sysctlUint64([]uint32{_CTL_MACHDEP, _CPU_ID_AA64ISAR0})\n+\tif !ok {\n+\t\treturn\n+\t}\n+\tisar1, ok := sysctlUint64([]uint32{_CTL_MACHDEP, _CPU_ID_AA64ISAR1})\n+\tif !ok {\n+\t\treturn\n+\t}\n+\tparseARM64SystemRegisters(isar0, isar1, 0)\n+\n+\tInitialized = true\n+}"
    },
    {
      "sha": "054ba05d607b3ad0d6caf66c79b4c1333f7b1164",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_openbsd_arm64.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_openbsd_arm64.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include \"textflag.h\"\n+\n+TEXT libc_sysctl_trampoline<>(SB),NOSPLIT,$0-0\n+\tJMP\tlibc_sysctl(SB)\n+\n+GLOBL\t·libc_sysctl_trampoline_addr(SB), RODATA, $8\n+DATA\t·libc_sysctl_trampoline_addr(SB)/8, $libc_sysctl_trampoline<>(SB)"
    },
    {
      "sha": "e9ecf2a45674ac5e93d418e8e17b949613d9af72",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_arm.go",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !linux && arm\n+\n+package cpu\n+\n+func archInit() {}"
    },
    {
      "sha": "5341e7f88d7155dfe85293dc40d5aa412bc637c0",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_arm64.go",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !linux && !netbsd && !openbsd && arm64\n+\n+package cpu\n+\n+func doinit() {}"
    },
    {
      "sha": "5f8f2419ab85556e9c104d95e9f04efacaad9562",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_mips64x.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_mips64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_mips64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_mips64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !linux && (mips64 || mips64le)\n+\n+package cpu\n+\n+func archInit() {\n+\tInitialized = true\n+}"
    },
    {
      "sha": "89608fba276300b0ae828d968a4ee53aa2e590d6",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_ppc64x.go",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_ppc64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_ppc64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_ppc64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !aix && !linux && (ppc64 || ppc64le)\n+\n+package cpu\n+\n+func archInit() {\n+\tPPC64.IsPOWER8 = true\n+\tInitialized = true\n+}"
    },
    {
      "sha": "5ab87808f710956e0703c3a96dbf4a22db833e54",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_riscv64.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_riscv64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_riscv64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build !linux && riscv64\n+\n+package cpu\n+\n+func archInit() {\n+\tInitialized = true\n+}"
    },
    {
      "sha": "a0fd7e2f75d37fe6f894f799caae51d9b6fe006f",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_other_x86.go",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_x86.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_x86.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_x86.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2024 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build 386 || amd64p32 || (amd64 && (!darwin || !gc))\n+\n+package cpu\n+\n+func darwinSupportsAVX512() bool {\n+\tpanic(\"only implemented for gc && amd64 && darwin\")\n+}"
    },
    {
      "sha": "c14f12b14942161d412c89d14e212cfbec6905a1",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_ppc64x.go",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_ppc64x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_ppc64x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_ppc64x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build ppc64 || ppc64le\n+\n+package cpu\n+\n+const cacheLineSize = 128\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"darn\", Feature: &PPC64.HasDARN},\n+\t\t{Name: \"scv\", Feature: &PPC64.HasSCV},\n+\t}\n+}"
    },
    {
      "sha": "aca3199c911690b3b2899e2ee373083e2ac66cdd",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_riscv64.go",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv64.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv64.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build riscv64\n+\n+package cpu\n+\n+const cacheLineSize = 64\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"fastmisaligned\", Feature: &RISCV64.HasFastMisaligned},\n+\t\t{Name: \"c\", Feature: &RISCV64.HasC},\n+\t\t{Name: \"v\", Feature: &RISCV64.HasV},\n+\t\t{Name: \"zba\", Feature: &RISCV64.HasZba},\n+\t\t{Name: \"zbb\", Feature: &RISCV64.HasZbb},\n+\t\t{Name: \"zbs\", Feature: &RISCV64.HasZbs},\n+\t}\n+}"
    },
    {
      "sha": "5881b8833f5a5370d8d012796e49d995dbf54955",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_s390x.go",
      "status": "added",
      "additions": 172,
      "deletions": 0,
      "changes": 172,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,172 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+const cacheLineSize = 256\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"zarch\", Feature: &S390X.HasZARCH, Required: true},\n+\t\t{Name: \"stfle\", Feature: &S390X.HasSTFLE, Required: true},\n+\t\t{Name: \"ldisp\", Feature: &S390X.HasLDISP, Required: true},\n+\t\t{Name: \"eimm\", Feature: &S390X.HasEIMM, Required: true},\n+\t\t{Name: \"dfp\", Feature: &S390X.HasDFP},\n+\t\t{Name: \"etf3eh\", Feature: &S390X.HasETF3EH},\n+\t\t{Name: \"msa\", Feature: &S390X.HasMSA},\n+\t\t{Name: \"aes\", Feature: &S390X.HasAES},\n+\t\t{Name: \"aescbc\", Feature: &S390X.HasAESCBC},\n+\t\t{Name: \"aesctr\", Feature: &S390X.HasAESCTR},\n+\t\t{Name: \"aesgcm\", Feature: &S390X.HasAESGCM},\n+\t\t{Name: \"ghash\", Feature: &S390X.HasGHASH},\n+\t\t{Name: \"sha1\", Feature: &S390X.HasSHA1},\n+\t\t{Name: \"sha256\", Feature: &S390X.HasSHA256},\n+\t\t{Name: \"sha3\", Feature: &S390X.HasSHA3},\n+\t\t{Name: \"sha512\", Feature: &S390X.HasSHA512},\n+\t\t{Name: \"vx\", Feature: &S390X.HasVX},\n+\t\t{Name: \"vxe\", Feature: &S390X.HasVXE},\n+\t}\n+}\n+\n+// bitIsSet reports whether the bit at index is set. The bit index\n+// is in big endian order, so bit index 0 is the leftmost bit.\n+func bitIsSet(bits []uint64, index uint) bool {\n+\treturn bits[index/64]&((1<<63)>>(index%64)) != 0\n+}\n+\n+// facility is a bit index for the named facility.\n+type facility uint8\n+\n+const (\n+\t// mandatory facilities\n+\tzarch  facility = 1  // z architecture mode is active\n+\tstflef facility = 7  // store-facility-list-extended\n+\tldisp  facility = 18 // long-displacement\n+\teimm   facility = 21 // extended-immediate\n+\n+\t// miscellaneous facilities\n+\tdfp    facility = 42 // decimal-floating-point\n+\tetf3eh facility = 30 // extended-translation 3 enhancement\n+\n+\t// cryptography facilities\n+\tmsa  facility = 17  // message-security-assist\n+\tmsa3 facility = 76  // message-security-assist extension 3\n+\tmsa4 facility = 77  // message-security-assist extension 4\n+\tmsa5 facility = 57  // message-security-assist extension 5\n+\tmsa8 facility = 146 // message-security-assist extension 8\n+\tmsa9 facility = 155 // message-security-assist extension 9\n+\n+\t// vector facilities\n+\tvx   facility = 129 // vector facility\n+\tvxe  facility = 135 // vector-enhancements 1\n+\tvxe2 facility = 148 // vector-enhancements 2\n+)\n+\n+// facilityList contains the result of an STFLE call.\n+// Bits are numbered in big endian order so the\n+// leftmost bit (the MSB) is at index 0.\n+type facilityList struct {\n+\tbits [4]uint64\n+}\n+\n+// Has reports whether the given facilities are present.\n+func (s *facilityList) Has(fs ...facility) bool {\n+\tif len(fs) == 0 {\n+\t\tpanic(\"no facility bits provided\")\n+\t}\n+\tfor _, f := range fs {\n+\t\tif !bitIsSet(s.bits[:], uint(f)) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// function is the code for the named cryptographic function.\n+type function uint8\n+\n+const (\n+\t// KM{,A,C,CTR} function codes\n+\taes128 function = 18 // AES-128\n+\taes192 function = 19 // AES-192\n+\taes256 function = 20 // AES-256\n+\n+\t// K{I,L}MD function codes\n+\tsha1     function = 1  // SHA-1\n+\tsha256   function = 2  // SHA-256\n+\tsha512   function = 3  // SHA-512\n+\tsha3_224 function = 32 // SHA3-224\n+\tsha3_256 function = 33 // SHA3-256\n+\tsha3_384 function = 34 // SHA3-384\n+\tsha3_512 function = 35 // SHA3-512\n+\tshake128 function = 36 // SHAKE-128\n+\tshake256 function = 37 // SHAKE-256\n+\n+\t// KLMD function codes\n+\tghash function = 65 // GHASH\n+)\n+\n+// queryResult contains the result of a Query function\n+// call. Bits are numbered in big endian order so the\n+// leftmost bit (the MSB) is at index 0.\n+type queryResult struct {\n+\tbits [2]uint64\n+}\n+\n+// Has reports whether the given functions are present.\n+func (q *queryResult) Has(fns ...function) bool {\n+\tif len(fns) == 0 {\n+\t\tpanic(\"no function codes provided\")\n+\t}\n+\tfor _, f := range fns {\n+\t\tif !bitIsSet(q.bits[:], uint(f)) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+func doinit() {\n+\tinitS390Xbase()\n+\n+\t// We need implementations of stfle, km and so on\n+\t// to detect cryptographic features.\n+\tif !haveAsmFunctions() {\n+\t\treturn\n+\t}\n+\n+\t// optional cryptographic functions\n+\tif S390X.HasMSA {\n+\t\taes := []function{aes128, aes192, aes256}\n+\n+\t\t// cipher message\n+\t\tkm, kmc := kmQuery(), kmcQuery()\n+\t\tS390X.HasAES = km.Has(aes...)\n+\t\tS390X.HasAESCBC = kmc.Has(aes...)\n+\t\tif S390X.HasSTFLE {\n+\t\t\tfacilities := stfle()\n+\t\t\tif facilities.Has(msa4) {\n+\t\t\t\tkmctr := kmctrQuery()\n+\t\t\t\tS390X.HasAESCTR = kmctr.Has(aes...)\n+\t\t\t}\n+\t\t\tif facilities.Has(msa8) {\n+\t\t\t\tkma := kmaQuery()\n+\t\t\t\tS390X.HasAESGCM = kma.Has(aes...)\n+\t\t\t}\n+\t\t}\n+\n+\t\t// compute message digest\n+\t\tkimd := kimdQuery() // intermediate (no padding)\n+\t\tklmd := klmdQuery() // last (padding)\n+\t\tS390X.HasSHA1 = kimd.Has(sha1) && klmd.Has(sha1)\n+\t\tS390X.HasSHA256 = kimd.Has(sha256) && klmd.Has(sha256)\n+\t\tS390X.HasSHA512 = kimd.Has(sha512) && klmd.Has(sha512)\n+\t\tS390X.HasGHASH = kimd.Has(ghash) // KLMD-GHASH does not exist\n+\t\tsha3 := []function{\n+\t\t\tsha3_224, sha3_256, sha3_384, sha3_512,\n+\t\t\tshake128, shake256,\n+\t\t}\n+\t\tS390X.HasSHA3 = kimd.Has(sha3...) && klmd.Has(sha3...)\n+\t}\n+}"
    },
    {
      "sha": "1fb4b701334c529f3e08c56b21ede39a9e77bb06",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_s390x.s",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.s",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.s",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_s390x.s?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build gc\n+\n+#include \"textflag.h\"\n+\n+// func stfle() facilityList\n+TEXT ·stfle(SB), NOSPLIT|NOFRAME, $0-32\n+\tMOVD $ret+0(FP), R1\n+\tMOVD $3, R0          // last doubleword index to store\n+\tXC   $32, (R1), (R1) // clear 4 doublewords (32 bytes)\n+\tWORD $0xb2b01000     // store facility list extended (STFLE)\n+\tRET\n+\n+// func kmQuery() queryResult\n+TEXT ·kmQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KM-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xB92E0024    // cipher message (KM)\n+\tRET\n+\n+// func kmcQuery() queryResult\n+TEXT ·kmcQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KMC-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xB92F0024    // cipher message with chaining (KMC)\n+\tRET\n+\n+// func kmctrQuery() queryResult\n+TEXT ·kmctrQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KMCTR-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xB92D4024    // cipher message with counter (KMCTR)\n+\tRET\n+\n+// func kmaQuery() queryResult\n+TEXT ·kmaQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KMA-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xb9296024    // cipher message with authentication (KMA)\n+\tRET\n+\n+// func kimdQuery() queryResult\n+TEXT ·kimdQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KIMD-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xB93E0024    // compute intermediate message digest (KIMD)\n+\tRET\n+\n+// func klmdQuery() queryResult\n+TEXT ·klmdQuery(SB), NOSPLIT|NOFRAME, $0-16\n+\tMOVD $0, R0         // set function code to 0 (KLMD-Query)\n+\tMOVD $ret+0(FP), R1 // address of 16-byte return value\n+\tWORD $0xB93F0024    // compute last message digest (KLMD)\n+\tRET"
    },
    {
      "sha": "384787ea3062384428ab4c7a51a664f5b42efc1f",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_wasm.go",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build wasm\n+\n+package cpu\n+\n+// We're compiling the cpu package for an unknown (software-abstracted) CPU.\n+// Make CacheLinePad an empty struct and hope that the usual struct alignment\n+// rules are good enough.\n+\n+const cacheLineSize = 0\n+\n+func initOptions() {}\n+\n+func archInit() {}"
    },
    {
      "sha": "600a6807861e7fd225b672283e2bc5c984eb13d6",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_x86.go",
      "status": "added",
      "additions": 149,
      "deletions": 0,
      "changes": 149,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build 386 || amd64 || amd64p32\n+\n+package cpu\n+\n+import \"runtime\"\n+\n+const cacheLineSize = 64\n+\n+func initOptions() {\n+\toptions = []option{\n+\t\t{Name: \"adx\", Feature: &X86.HasADX},\n+\t\t{Name: \"aes\", Feature: &X86.HasAES},\n+\t\t{Name: \"avx\", Feature: &X86.HasAVX},\n+\t\t{Name: \"avx2\", Feature: &X86.HasAVX2},\n+\t\t{Name: \"avx512\", Feature: &X86.HasAVX512},\n+\t\t{Name: \"avx512f\", Feature: &X86.HasAVX512F},\n+\t\t{Name: \"avx512cd\", Feature: &X86.HasAVX512CD},\n+\t\t{Name: \"avx512er\", Feature: &X86.HasAVX512ER},\n+\t\t{Name: \"avx512pf\", Feature: &X86.HasAVX512PF},\n+\t\t{Name: \"avx512vl\", Feature: &X86.HasAVX512VL},\n+\t\t{Name: \"avx512bw\", Feature: &X86.HasAVX512BW},\n+\t\t{Name: \"avx512dq\", Feature: &X86.HasAVX512DQ},\n+\t\t{Name: \"avx512ifma\", Feature: &X86.HasAVX512IFMA},\n+\t\t{Name: \"avx512vbmi\", Feature: &X86.HasAVX512VBMI},\n+\t\t{Name: \"avx512vnniw\", Feature: &X86.HasAVX5124VNNIW},\n+\t\t{Name: \"avx5124fmaps\", Feature: &X86.HasAVX5124FMAPS},\n+\t\t{Name: \"avx512vpopcntdq\", Feature: &X86.HasAVX512VPOPCNTDQ},\n+\t\t{Name: \"avx512vpclmulqdq\", Feature: &X86.HasAVX512VPCLMULQDQ},\n+\t\t{Name: \"avx512vnni\", Feature: &X86.HasAVX512VNNI},\n+\t\t{Name: \"avx512gfni\", Feature: &X86.HasAVX512GFNI},\n+\t\t{Name: \"avx512vaes\", Feature: &X86.HasAVX512VAES},\n+\t\t{Name: \"avx512vbmi2\", Feature: &X86.HasAVX512VBMI2},\n+\t\t{Name: \"avx512bitalg\", Feature: &X86.HasAVX512BITALG},\n+\t\t{Name: \"avx512bf16\", Feature: &X86.HasAVX512BF16},\n+\t\t{Name: \"amxtile\", Feature: &X86.HasAMXTile},\n+\t\t{Name: \"amxint8\", Feature: &X86.HasAMXInt8},\n+\t\t{Name: \"amxbf16\", Feature: &X86.HasAMXBF16},\n+\t\t{Name: \"bmi1\", Feature: &X86.HasBMI1},\n+\t\t{Name: \"bmi2\", Feature: &X86.HasBMI2},\n+\t\t{Name: \"cx16\", Feature: &X86.HasCX16},\n+\t\t{Name: \"erms\", Feature: &X86.HasERMS},\n+\t\t{Name: \"fma\", Feature: &X86.HasFMA},\n+\t\t{Name: \"osxsave\", Feature: &X86.HasOSXSAVE},\n+\t\t{Name: \"pclmulqdq\", Feature: &X86.HasPCLMULQDQ},\n+\t\t{Name: \"popcnt\", Feature: &X86.HasPOPCNT},\n+\t\t{Name: \"rdrand\", Feature: &X86.HasRDRAND},\n+\t\t{Name: \"rdseed\", Feature: &X86.HasRDSEED},\n+\t\t{Name: \"sse3\", Feature: &X86.HasSSE3},\n+\t\t{Name: \"sse41\", Feature: &X86.HasSSE41},\n+\t\t{Name: \"sse42\", Feature: &X86.HasSSE42},\n+\t\t{Name: \"ssse3\", Feature: &X86.HasSSSE3},\n+\n+\t\t// These capabilities should always be enabled on amd64:\n+\t\t{Name: \"sse2\", Feature: &X86.HasSSE2, Required: runtime.GOARCH == \"amd64\"},\n+\t}\n+}\n+\n+func archInit() {\n+\n+\tInitialized = true\n+\n+\tmaxID, _, _, _ := cpuid(0, 0)\n+\n+\tif maxID < 1 {\n+\t\treturn\n+\t}\n+\n+\t_, _, ecx1, edx1 := cpuid(1, 0)\n+\tX86.HasSSE2 = isSet(26, edx1)\n+\n+\tX86.HasSSE3 = isSet(0, ecx1)\n+\tX86.HasPCLMULQDQ = isSet(1, ecx1)\n+\tX86.HasSSSE3 = isSet(9, ecx1)\n+\tX86.HasFMA = isSet(12, ecx1)\n+\tX86.HasCX16 = isSet(13, ecx1)\n+\tX86.HasSSE41 = isSet(19, ecx1)\n+\tX86.HasSSE42 = isSet(20, ecx1)\n+\tX86.HasPOPCNT = isSet(23, ecx1)\n+\tX86.HasAES = isSet(25, ecx1)\n+\tX86.HasOSXSAVE = isSet(27, ecx1)\n+\tX86.HasRDRAND = isSet(30, ecx1)\n+\n+\tvar osSupportsAVX, osSupportsAVX512 bool\n+\t// For XGETBV, OSXSAVE bit is required and sufficient.\n+\tif X86.HasOSXSAVE {\n+\t\teax, _ := xgetbv()\n+\t\t// Check if XMM and YMM registers have OS support.\n+\t\tosSupportsAVX = isSet(1, eax) && isSet(2, eax)\n+\n+\t\tif runtime.GOOS == \"darwin\" {\n+\t\t\t// Darwin requires special AVX512 checks, see cpu_darwin_x86.go\n+\t\t\tosSupportsAVX512 = osSupportsAVX && darwinSupportsAVX512()\n+\t\t} else {\n+\t\t\t// Check if OPMASK and ZMM registers have OS support.\n+\t\t\tosSupportsAVX512 = osSupportsAVX && isSet(5, eax) && isSet(6, eax) && isSet(7, eax)\n+\t\t}\n+\t}\n+\n+\tX86.HasAVX = isSet(28, ecx1) && osSupportsAVX\n+\n+\tif maxID < 7 {\n+\t\treturn\n+\t}\n+\n+\t_, ebx7, ecx7, edx7 := cpuid(7, 0)\n+\tX86.HasBMI1 = isSet(3, ebx7)\n+\tX86.HasAVX2 = isSet(5, ebx7) && osSupportsAVX\n+\tX86.HasBMI2 = isSet(8, ebx7)\n+\tX86.HasERMS = isSet(9, ebx7)\n+\tX86.HasRDSEED = isSet(18, ebx7)\n+\tX86.HasADX = isSet(19, ebx7)\n+\n+\tX86.HasAVX512 = isSet(16, ebx7) && osSupportsAVX512 // Because avx-512 foundation is the core required extension\n+\tif X86.HasAVX512 {\n+\t\tX86.HasAVX512F = true\n+\t\tX86.HasAVX512CD = isSet(28, ebx7)\n+\t\tX86.HasAVX512ER = isSet(27, ebx7)\n+\t\tX86.HasAVX512PF = isSet(26, ebx7)\n+\t\tX86.HasAVX512VL = isSet(31, ebx7)\n+\t\tX86.HasAVX512BW = isSet(30, ebx7)\n+\t\tX86.HasAVX512DQ = isSet(17, ebx7)\n+\t\tX86.HasAVX512IFMA = isSet(21, ebx7)\n+\t\tX86.HasAVX512VBMI = isSet(1, ecx7)\n+\t\tX86.HasAVX5124VNNIW = isSet(2, edx7)\n+\t\tX86.HasAVX5124FMAPS = isSet(3, edx7)\n+\t\tX86.HasAVX512VPOPCNTDQ = isSet(14, ecx7)\n+\t\tX86.HasAVX512VPCLMULQDQ = isSet(10, ecx7)\n+\t\tX86.HasAVX512VNNI = isSet(11, ecx7)\n+\t\tX86.HasAVX512GFNI = isSet(8, ecx7)\n+\t\tX86.HasAVX512VAES = isSet(9, ecx7)\n+\t\tX86.HasAVX512VBMI2 = isSet(6, ecx7)\n+\t\tX86.HasAVX512BITALG = isSet(12, ecx7)\n+\n+\t\teax71, _, _, _ := cpuid(7, 1)\n+\t\tX86.HasAVX512BF16 = isSet(5, eax71)\n+\t}\n+\n+\tX86.HasAMXTile = isSet(24, edx7)\n+\tX86.HasAMXInt8 = isSet(25, edx7)\n+\tX86.HasAMXBF16 = isSet(22, edx7)\n+}\n+\n+func isSet(bitpos uint, value uint32) bool {\n+\treturn value&(1<<bitpos) != 0\n+}"
    },
    {
      "sha": "5f54683a22e3e2f0db222ff136d35ab62cdd799c",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_zos.go",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+func archInit() {\n+\tdoinit()\n+\tInitialized = true\n+}"
    },
    {
      "sha": "ccb1b708aba987e33c3d6ed04d773967855206df",
      "filename": "backend/vendor/golang.org/x/sys/cpu/cpu_zos_s390x.go",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos_s390x.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_zos_s390x.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+func initS390Xbase() {\n+\t// get the facilities list\n+\tfacilities := stfle()\n+\n+\t// mandatory\n+\tS390X.HasZARCH = facilities.Has(zarch)\n+\tS390X.HasSTFLE = facilities.Has(stflef)\n+\tS390X.HasLDISP = facilities.Has(ldisp)\n+\tS390X.HasEIMM = facilities.Has(eimm)\n+\n+\t// optional\n+\tS390X.HasETF3EH = facilities.Has(etf3eh)\n+\tS390X.HasDFP = facilities.Has(dfp)\n+\tS390X.HasMSA = facilities.Has(msa)\n+\tS390X.HasVX = facilities.Has(vx)\n+\tif S390X.HasVX {\n+\t\tS390X.HasVXE = facilities.Has(vxe)\n+\t}\n+}"
    },
    {
      "sha": "7fe04b0a13b1ae86405617a94a06e047d39ed173",
      "filename": "backend/vendor/golang.org/x/sys/cpu/endian_big.go",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_big.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_big.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_big.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2023 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build armbe || arm64be || m68k || mips || mips64 || mips64p32 || ppc || ppc64 || s390 || s390x || shbe || sparc || sparc64\n+\n+package cpu\n+\n+// IsBigEndian records whether the GOARCH's byte order is big endian.\n+const IsBigEndian = true"
    },
    {
      "sha": "48eccc4c79963855c4026e37a594755f1cd85c4f",
      "filename": "backend/vendor/golang.org/x/sys/cpu/endian_little.go",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_little.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_little.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fendian_little.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2023 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build 386 || amd64 || amd64p32 || alpha || arm || arm64 || loong64 || mipsle || mips64le || mips64p32le || nios2 || ppc64le || riscv || riscv64 || sh || wasm\n+\n+package cpu\n+\n+// IsBigEndian records whether the GOARCH's byte order is big endian.\n+const IsBigEndian = false"
    },
    {
      "sha": "34e49f955a8774d604f72fd4da206145f7795027",
      "filename": "backend/vendor/golang.org/x/sys/cpu/hwcap_linux.go",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fhwcap_linux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fhwcap_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fhwcap_linux.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import (\n+\t\"os\"\n+)\n+\n+const (\n+\t_AT_HWCAP  = 16\n+\t_AT_HWCAP2 = 26\n+\n+\tprocAuxv = \"/proc/self/auxv\"\n+\n+\tuintSize = int(32 << (^uint(0) >> 63))\n+)\n+\n+// For those platforms don't have a 'cpuid' equivalent we use HWCAP/HWCAP2\n+// These are initialized in cpu_$GOARCH.go\n+// and should not be changed after they are initialized.\n+var hwCap uint\n+var hwCap2 uint\n+\n+func readHWCAP() error {\n+\t// For Go 1.21+, get auxv from the Go runtime.\n+\tif a := getAuxv(); len(a) > 0 {\n+\t\tfor len(a) >= 2 {\n+\t\t\ttag, val := a[0], uint(a[1])\n+\t\t\ta = a[2:]\n+\t\t\tswitch tag {\n+\t\t\tcase _AT_HWCAP:\n+\t\t\t\thwCap = val\n+\t\t\tcase _AT_HWCAP2:\n+\t\t\t\thwCap2 = val\n+\t\t\t}\n+\t\t}\n+\t\treturn nil\n+\t}\n+\n+\tbuf, err := os.ReadFile(procAuxv)\n+\tif err != nil {\n+\t\t// e.g. on android /proc/self/auxv is not accessible, so silently\n+\t\t// ignore the error and leave Initialized = false. On some\n+\t\t// architectures (e.g. arm64) doinit() implements a fallback\n+\t\t// readout and will set Initialized = true again.\n+\t\treturn err\n+\t}\n+\tbo := hostByteOrder()\n+\tfor len(buf) >= 2*(uintSize/8) {\n+\t\tvar tag, val uint\n+\t\tswitch uintSize {\n+\t\tcase 32:\n+\t\t\ttag = uint(bo.Uint32(buf[0:]))\n+\t\t\tval = uint(bo.Uint32(buf[4:]))\n+\t\t\tbuf = buf[8:]\n+\t\tcase 64:\n+\t\t\ttag = uint(bo.Uint64(buf[0:]))\n+\t\t\tval = uint(bo.Uint64(buf[8:]))\n+\t\t\tbuf = buf[16:]\n+\t\t}\n+\t\tswitch tag {\n+\t\tcase _AT_HWCAP:\n+\t\t\thwCap = val\n+\t\tcase _AT_HWCAP2:\n+\t\t\thwCap2 = val\n+\t\t}\n+\t}\n+\treturn nil\n+}"
    },
    {
      "sha": "762b63d6882cd71bcbde1cf4f9fff1de10274556",
      "filename": "backend/vendor/golang.org/x/sys/cpu/parse.go",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fparse.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+import \"strconv\"\n+\n+// parseRelease parses a dot-separated version number. It follows the semver\n+// syntax, but allows the minor and patch versions to be elided.\n+//\n+// This is a copy of the Go runtime's parseRelease from\n+// https://golang.org/cl/209597.\n+func parseRelease(rel string) (major, minor, patch int, ok bool) {\n+\t// Strip anything after a dash or plus.\n+\tfor i := 0; i < len(rel); i++ {\n+\t\tif rel[i] == '-' || rel[i] == '+' {\n+\t\t\trel = rel[:i]\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\n+\tnext := func() (int, bool) {\n+\t\tfor i := 0; i < len(rel); i++ {\n+\t\t\tif rel[i] == '.' {\n+\t\t\t\tver, err := strconv.Atoi(rel[:i])\n+\t\t\t\trel = rel[i+1:]\n+\t\t\t\treturn ver, err == nil\n+\t\t\t}\n+\t\t}\n+\t\tver, err := strconv.Atoi(rel)\n+\t\trel = \"\"\n+\t\treturn ver, err == nil\n+\t}\n+\tif major, ok = next(); !ok || rel == \"\" {\n+\t\treturn\n+\t}\n+\tif minor, ok = next(); !ok || rel == \"\" {\n+\t\treturn\n+\t}\n+\tpatch, ok = next()\n+\treturn\n+}"
    },
    {
      "sha": "4cd64c7042bcc702b4c7ca840559df41b86c8cc0",
      "filename": "backend/vendor/golang.org/x/sys/cpu/proc_cpuinfo_linux.go",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fproc_cpuinfo_linux.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fproc_cpuinfo_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fproc_cpuinfo_linux.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2022 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build linux && arm64\n+\n+package cpu\n+\n+import (\n+\t\"errors\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+func readLinuxProcCPUInfo() error {\n+\tf, err := os.Open(\"/proc/cpuinfo\")\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tdefer f.Close()\n+\n+\tvar buf [1 << 10]byte // enough for first CPU\n+\tn, err := io.ReadFull(f, buf[:])\n+\tif err != nil && err != io.ErrUnexpectedEOF {\n+\t\treturn err\n+\t}\n+\tin := string(buf[:n])\n+\tconst features = \"\\nFeatures\t: \"\n+\ti := strings.Index(in, features)\n+\tif i == -1 {\n+\t\treturn errors.New(\"no CPU features found\")\n+\t}\n+\tin = in[i+len(features):]\n+\tif i := strings.Index(in, \"\\n\"); i != -1 {\n+\t\tin = in[:i]\n+\t}\n+\tm := map[string]*bool{}\n+\n+\tinitOptions() // need it early here; it's harmless to call twice\n+\tfor _, o := range options {\n+\t\tm[o.Name] = o.Feature\n+\t}\n+\t// The EVTSTRM field has alias \"evstrm\" in Go, but Linux calls it \"evtstrm\".\n+\tm[\"evtstrm\"] = &ARM64.HasEVTSTRM\n+\n+\tfor _, f := range strings.Fields(in) {\n+\t\tif p, ok := m[f]; ok {\n+\t\t\t*p = true\n+\t\t}\n+\t}\n+\treturn nil\n+}"
    },
    {
      "sha": "5f92ac9a2e2b950464a8cb5de8fb367a27438d7f",
      "filename": "backend/vendor/golang.org/x/sys/cpu/runtime_auxv.go",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2023 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cpu\n+\n+// getAuxvFn is non-nil on Go 1.21+ (via runtime_auxv_go121.go init)\n+// on platforms that use auxv.\n+var getAuxvFn func() []uintptr\n+\n+func getAuxv() []uintptr {\n+\tif getAuxvFn == nil {\n+\t\treturn nil\n+\t}\n+\treturn getAuxvFn()\n+}"
    },
    {
      "sha": "4c9788ea8ee88a5071ca70fa6d45096b2e20613a",
      "filename": "backend/vendor/golang.org/x/sys/cpu/runtime_auxv_go121.go",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv_go121.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv_go121.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fruntime_auxv_go121.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2023 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//go:build go1.21\n+\n+package cpu\n+\n+import (\n+\t_ \"unsafe\" // for linkname\n+)\n+\n+//go:linkname runtime_getAuxv runtime.getAuxv\n+func runtime_getAuxv() []uintptr\n+\n+func init() {\n+\tgetAuxvFn = runtime_getAuxv\n+}"
    },
    {
      "sha": "1b9ccb091a57b0288929f832bd0defdb6ad9e960",
      "filename": "backend/vendor/golang.org/x/sys/cpu/syscall_aix_gccgo.go",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_gccgo.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_gccgo.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_gccgo.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6",
      "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Recreate a getsystemcfg syscall handler instead of\n+// using the one provided by x/sys/unix to avoid having\n+// the dependency between them. (See golang.org/issue/32102)\n+// Moreover, this file will be used during the building of\n+// gccgo's libgo and thus must not used a CGo method.\n+\n+//go:build aix && gccgo\n+\n+package cpu\n+\n+import (\n+\t\"syscall\"\n+)\n+\n+//extern getsystemcfg\n+func gccgoGetsystemcfg(label uint32) (r uint64)\n+\n+func callgetsystemcfg(label int) (r1 uintptr, e1 syscall.Errno) {\n+\tr1 = uintptr(gccgoGetsystemcfg(uint32(label)))\n+\te1 = syscall.GetErrno()\n+\treturn\n+}"
    },
    {
      "sha": "e8b6cdbe9a7c8b62a50d04e727ffc19bd43146dd",
      "filename": "backend/vendor/golang.org/x/sys/cpu/syscall_aix_ppc64_gc.go",
      "status": "added",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_ppc64_gc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_ppc64_gc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_aix_ppc64_gc.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6"
    },
    {
      "sha": "4d0888b0c010f41faaf56692175b7d395bb7494a",
      "filename": "backend/vendor/golang.org/x/sys/cpu/syscall_darwin_x86_gc.go",
      "status": "added",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_darwin_x86_gc.go",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_darwin_x86_gc.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fsyscall_darwin_x86_gc.go?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6"
    },
    {
      "sha": "f01361f901f80c2356e0e93a5aa5fbe2824683ea",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 22,
      "deletions": 17,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark42/blob/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fmodules.txt",
      "raw_url": "https://github.com/umputun/remark42/raw/2e00002413c4f3311e5e77e902939823ab2c1bd6/backend%2Fvendor%2Fmodules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fvendor%2Fmodules.txt?ref=2e00002413c4f3311e5e77e902939823ab2c1bd6"
    }
  ]
}
