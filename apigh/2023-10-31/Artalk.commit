{
  "sha": "d44212bd90f338ecebe603244fa9f1ab94c08153",
  "node_id": "C_kwDOCQOkhNoAKGQ0NDIxMmJkOTBmMzM4ZWNlYmU2MDMyNDRmYTlmMWFiOTRjMDgxNTM",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-10-30T12:13:18Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-10-30T12:13:18Z"
    },
    "message": "refactor(ui/marked): separate markdown related codes",
    "tree": {
      "sha": "844132011a9c07495e4b67a1d2c2ff8216f8e495",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/844132011a9c07495e4b67a1d2c2ff8216f8e495"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/d44212bd90f338ecebe603244fa9f1ab94c08153",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZT+d3gAKCRDUbg8O6nwT\namEaAP9RVRcE/P4nGzdcpIfiAB0orsprGP1yyc4eqdBPLlUwwQD/Vlkk+eK2oLNr\nTHsJWOXp9NdfsZv4p1bYaO1fsX1LnAg=\n=1c8J\n-----END PGP SIGNATURE-----",
      "payload": "tree 844132011a9c07495e4b67a1d2c2ff8216f8e495\nparent 37d4ca76fa72e0feb0b57b3a656fa32bf6a199b2\nauthor qwqcode <qwqcode@gmail.com> 1698667998 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1698667998 +0800\n\nrefactor(ui/marked): separate markdown related codes\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/d44212bd90f338ecebe603244fa9f1ab94c08153",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/d44212bd90f338ecebe603244fa9f1ab94c08153",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/d44212bd90f338ecebe603244fa9f1ab94c08153/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "37d4ca76fa72e0feb0b57b3a656fa32bf6a199b2",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/37d4ca76fa72e0feb0b57b3a656fa32bf6a199b2",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/37d4ca76fa72e0feb0b57b3a656fa32bf6a199b2"
    }
  ],
  "stats": {
    "total": 237,
    "additions": 132,
    "deletions": 105
  },
  "files": [
    {
      "sha": "69cbc8020041459b9285e18b44925d0cf60d233e",
      "filename": "ui/packages/artalk/src/lib/highlight.ts",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fhighlight.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fhighlight.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fhighlight.ts?ref=d44212bd90f338ecebe603244fa9f1ab94c08153",
      "patch": "@@ -0,0 +1,5 @@\n+import hanabi from 'hanabi'\n+\n+export function renderCode(code: string) {\n+  return hanabi(code)\n+}"
    },
    {
      "sha": "e0851ab73666f436b105b8f72b1c1ed967697826",
      "filename": "ui/packages/artalk/src/lib/marked-renderer.ts",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked-renderer.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked-renderer.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked-renderer.ts?ref=d44212bd90f338ecebe603244fa9f1ab94c08153",
      "patch": "@@ -0,0 +1,32 @@\n+import { marked as libMarked } from 'marked'\n+import { renderCode } from './highlight'\n+\n+export function getRenderer() {\n+  const renderer = new libMarked.Renderer()\n+  renderer.link = markedLinkRenderer(renderer, renderer.link)\n+  renderer.code = markedCodeRenderer()\n+  return renderer\n+}\n+\n+export const markedLinkRenderer = (renderer: any, orgLinkRenderer: Function) => (href: string, title: string, text: string): string => {\n+  const localLink = href?.startsWith(`${window.location.protocol}//${window.location.hostname}`);\n+  const html = orgLinkRenderer.call(renderer, href, title, text);\n+  return html.replace(/^<a /, `<a target=\"_blank\" ${!localLink ? `rel=\"noreferrer noopener nofollow\"` : ''} `);\n+}\n+\n+export const markedCodeRenderer = () => (block: string, lang: string | undefined): string => {\n+  // Colorize the block only if the language is known to highlight.js\n+  const realLang = (!lang ? 'plaintext' : lang)\n+  let colorized = block\n+  if ((window as any).hljs) {\n+    if (realLang && (window as any).hljs.getLanguage(realLang)) {\n+      colorized = (window as any).hljs.highlight(realLang, block).value\n+    }\n+  } else {\n+    colorized = renderCode(block)\n+  }\n+\n+  return `<pre rel=\"${realLang}\">\\n`\n+    + `<code class=\"hljs language-${realLang}\">${colorized.replace(/&amp;/g, '&')}</code>\\n`\n+    + `</pre>`\n+}"
    },
    {
      "sha": "0bbba35d6d4166d1943768d3f8080164e176b8f9",
      "filename": "ui/packages/artalk/src/lib/marked.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 105,
      "changes": 143,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fmarked.ts?ref=d44212bd90f338ecebe603244fa9f1ab94c08153",
      "patch": "@@ -1,139 +1,72 @@\n-import { marked as libMarked } from 'marked'\n-import insane from 'insane'\n-import hanabi from 'hanabi'\n+import { marked as libMarked, MarkedOptions } from 'marked'\n+\n+import { sanitize } from './sanitizer'\n+import { renderCode } from './highlight'\n+import { getRenderer } from './marked-renderer'\n \n type Replacer = (raw: string) => string\n+export type TMarked = typeof libMarked\n \n let instance: (typeof libMarked)|undefined\n let replacers: Replacer[] = []\n \n-export type TMarked = typeof libMarked\n+const markedOptions: MarkedOptions = {\n+  pedantic: false,\n+  gfm: true,\n+  breaks: true,\n+  smartLists: true,\n+  smartypants: true,\n+  xhtml: false,\n+  sanitize: false,\n+  silent: true,\n+}\n \n /** Get Marked instance */\n export function getInstance() {\n   return instance\n }\n \n+export function setReplacers(arr: Replacer[]) {\n+  replacers = arr\n+}\n+\n /** 初始化 marked */\n export function initMarked() {\n   try { if (!libMarked.name) return } catch { return }\n \n-  const renderer = new libMarked.Renderer()\n-  const orgLinkRenderer = renderer.link\n-  renderer.link = (href, title, text) => {\n-    const localLink = href?.startsWith(`${window.location.protocol}//${window.location.hostname}`);\n-    const html = orgLinkRenderer.call(renderer as any, href, title, text);\n-    return html.replace(/^<a /, `<a target=\"_blank\" ${!localLink ? `rel=\"noreferrer noopener nofollow\"` : ''} `);\n-  }\n-\n-  renderer.code = (block, lang) => {\n-    // Colorize the block only if the language is known to highlight.js\n-    const realLang = (!lang ? 'plaintext' : lang)\n-    let colorized = block\n-    if ((window as any).hljs) {\n-      if (realLang && (window as any).hljs.getLanguage(realLang)) {\n-        colorized = (window as any).hljs.highlight(realLang, block).value\n-      }\n-    } else {\n-      colorized = hanabi(block)\n-    }\n-\n-    return `<pre rel=\"${realLang}\">\\n`\n-      + `<code class=\"hljs language-${realLang}\">${colorized.replace(/&amp;/g, '&')}</code>\\n`\n-      + `</pre>`\n-  }\n-\n   // @see https://github.com/markedjs/marked/blob/4afb228d956a415624c4e5554bb8f25d047676fe/src/Tokenizer.js#L329\n-  const nMarked = libMarked\n   libMarked.setOptions({\n-    renderer,\n-    pedantic: false,\n-    gfm: true,\n-    breaks: true,\n-    smartLists: true,\n-    smartypants: true,\n-    xhtml: false,\n-    sanitize: false,\n-    silent: true,\n+    renderer: getRenderer(),\n+    ...markedOptions\n   })\n \n-  instance = nMarked\n-}\n-\n-export function setReplacers(arr: Replacer[]) {\n-  replacers = arr\n+  instance = libMarked\n }\n \n /** 解析 markdown */\n export default function marked(src: string): string {\n   let markedContent = getInstance()?.parse(src)\n-  if (!markedContent) {\n-    // 无 Markdown 模式简单处理\n-    markedContent = src\n-      // .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n-      .replace(/```\\s*([^]+?.*?[^]+?[^]+?)```/g, (_, code) => `<pre><code>${hanabi(code)}</code></pre>`)\n-      // .replace(/`([^`]+?)`/g, '<code>$1</code>')\n-      .replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (_, alt, imgSrc) => `<img src=\"${imgSrc}\" alt=\"${alt}\" />`)\n-      .replace(/\\[(.*?)\\]\\((.*?)\\)/g, (_, text, link) => `<a href=\"${link}\" target=\"_blank\">${text}</a>`)\n-      .replace(/\\n/g, '<br>')\n+  if (!markedContent) { // 无 Markdown 模式简单处理\n+    markedContent = simpleMarked(src)\n   }\n \n-  // @link https://github.com/markedjs/marked/discussions/1232\n-  // @link https://gist.github.com/lionel-rowe/bb384465ba4e4c81a9c8dada84167225\n-  let dest = insane(markedContent, {\n-    allowedClasses: {},\n-    // @refer CVE-2018-8495\n-    // @link https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8495\n-    // @link https://leucosite.com/Microsoft-Edge-RCE/\n-    // @link https://medium.com/@knownsec404team/analysis-of-the-security-issues-of-url-scheme-in-pc-from-cve-2018-8495-934478a36756\n-    allowedSchemes: [\n-      'http', 'https', 'mailto',\n-      'data' // for support base64 encoded image (安全性有待考虑)\n-    ],\n-    allowedTags: [\n-      'a', 'abbr', 'article', 'b', 'blockquote', 'br', 'caption', 'code', 'del', 'details', 'div', 'em',\n-      'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'main', 'mark',\n-      'ol', 'p', 'pre', 'section', 'span', 'strike', 'strong', 'sub', 'summary', 'sup', 'table',\n-      'tbody', 'td', 'th', 'thead', 'tr', 'u', 'ul'\n-    ],\n-    allowedAttributes: {\n-      '*': ['title', 'accesskey'],\n-      a: ['href', 'name', 'target', 'aria-label', 'rel'],\n-      img: ['src', 'alt', 'title', 'atk-emoticon', 'aria-label'],\n-      // for code highlight\n-      code: ['class'],\n-      span: ['class', 'style'],\n-    },\n-    filter: node => {\n-      // allow hljs style\n-      const allowed = [\n-        [ 'code', /^hljs\\W+language-(.*)$/ ],\n-        [ 'span', /^(hljs-.*)$/ ]\n-      ]\n-      allowed.forEach(([ tag, reg ]) => {\n-        if (\n-          node.tag === tag\n-          && !!node.attrs.class\n-          && !(reg as RegExp).test(node.attrs.class)\n-        ) {\n-          delete node.attrs.class\n-        }\n-      })\n-\n-      // allow <span> set color sty\n-      if (node.tag === 'span' && !!node.attrs.style\n-          && !/^color:(\\W+)?#[0-9a-f]{3,6};?$/i.test(node.attrs.style)) {\n-        delete node.attrs.style\n-      }\n-\n-      return true\n-    }\n-  })\n+  let dest = sanitize(markedContent)\n \n   // 内容替换器\n   replacers.forEach((replacer) => {\n-    if (typeof replacer === 'function') dest = replacer(dest)\n+    if (typeof replacer === 'function')\n+      dest = replacer(dest)\n   })\n \n   return dest\n }\n+\n+function simpleMarked(src: string) {\n+  return src\n+    // .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n+    .replace(/```\\s*([^]+?.*?[^]+?[^]+?)```/g, (_, code) => `<pre><code>${renderCode(code)}</code></pre>`)\n+    // .replace(/`([^`]+?)`/g, '<code>$1</code>')\n+    .replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (_, alt, imgSrc) => `<img src=\"${imgSrc}\" alt=\"${alt}\" />`)\n+    .replace(/\\[(.*?)\\]\\((.*?)\\)/g, (_, text, link) => `<a href=\"${link}\" target=\"_blank\">${text}</a>`)\n+    .replace(/\\n/g, '<br>')\n+}"
    },
    {
      "sha": "f702152efa5b2b267dc1aecd11fb7a411804c051",
      "filename": "ui/packages/artalk/src/lib/sanitizer.ts",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fsanitizer.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/d44212bd90f338ecebe603244fa9f1ab94c08153/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fsanitizer.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fsanitizer.ts?ref=d44212bd90f338ecebe603244fa9f1ab94c08153",
      "patch": "@@ -0,0 +1,57 @@\n+import insane from 'insane'\n+\n+const insaneOptions = {\n+  allowedClasses: {},\n+  // @refer CVE-2018-8495\n+  // @link https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8495\n+  // @link https://leucosite.com/Microsoft-Edge-RCE/\n+  // @link https://medium.com/@knownsec404team/analysis-of-the-security-issues-of-url-scheme-in-pc-from-cve-2018-8495-934478a36756\n+  allowedSchemes: [\n+    'http', 'https', 'mailto',\n+    'data' // for support base64 encoded image (安全性有待考虑)\n+  ],\n+  allowedTags: [\n+    'a', 'abbr', 'article', 'b', 'blockquote', 'br', 'caption', 'code', 'del', 'details', 'div', 'em',\n+    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'main', 'mark',\n+    'ol', 'p', 'pre', 'section', 'span', 'strike', 'strong', 'sub', 'summary', 'sup', 'table',\n+    'tbody', 'td', 'th', 'thead', 'tr', 'u', 'ul'\n+  ],\n+  allowedAttributes: {\n+    '*': ['title', 'accesskey'],\n+    a: ['href', 'name', 'target', 'aria-label', 'rel'],\n+    img: ['src', 'alt', 'title', 'atk-emoticon', 'aria-label'],\n+    // for code highlight\n+    code: ['class'],\n+    span: ['class', 'style'],\n+  },\n+  filter: node => {\n+    // allow hljs style\n+    const allowed = [\n+      [ 'code', /^hljs\\W+language-(.*)$/ ],\n+      [ 'span', /^(hljs-.*)$/ ]\n+    ]\n+    allowed.forEach(([ tag, reg ]) => {\n+      if (\n+        node.tag === tag\n+        && !!node.attrs.class\n+        && !(reg as RegExp).test(node.attrs.class)\n+      ) {\n+        delete node.attrs.class\n+      }\n+    })\n+\n+    // allow <span> set color sty\n+    if (node.tag === 'span' && !!node.attrs.style\n+        && !/^color:(\\W+)?#[0-9a-f]{3,6};?$/i.test(node.attrs.style)) {\n+      delete node.attrs.style\n+    }\n+\n+    return true\n+  }\n+}\n+\n+export function sanitize(content: string): string {\n+  // @link https://github.com/markedjs/marked/discussions/1232\n+  // @link https://gist.github.com/lionel-rowe/bb384465ba4e4c81a9c8dada84167225\n+  return insane(content, insaneOptions)\n+}"
    }
  ]
}
