{
  "sha": "6402ef9cae790b2361f270c6bcabe26261842064",
  "node_id": "C_kwDOBtgov9oAKDY0MDJlZjljYWU3OTBiMjM2MWYyNzBjNmJjYWJlMjYyNjE4NDIwNjQ",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2024-12-09T01:53:15Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2024-12-09T01:53:15Z"
    },
    "message": "Merge pull request #1871 from umputun/paskal/improve_tests\n\nImprove tests",
    "tree": {
      "sha": "792193dacbc4a736af4e4eb7f70923db40323266",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/792193dacbc4a736af4e4eb7f70923db40323266"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/6402ef9cae790b2361f270c6bcabe26261842064",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnVk2LCRC1aQ7uu5UhlAAAzyUQADd91kxlGdLeaCHD0jTVgOyq\nzFboVQXh+CaK34nc3aGV0WBYBMtIT+KXfJ7/Hq1gv1hs/cPtOIsLSruK7cq97GuC\nAJJFIr+PP3hxVuxAGpPFg2lsN1eJvIThubtpLA4luqDmhMbJd1IvO0Mnr3J8gyr7\nVPif1ogZ0XHj0OTcV05eEhasFy4PJvfjtR0xB4LmHtiOdAAR7n9bkAzb3HYLwH7e\nPKhvx0DGJl+6vRI8u4S2Q79JTW+nICpXW9ZmP6tbjHJXj50Tr7XzbHU41ipXi6XD\newpxBgL1v+FpigDYNpJp9DTxntLu/wWQnusB1v7hB3qyKOUtTjmEDkpHFl5DCKLE\nqqzhsT8t9tbPosNQm4paB0ddrfnc33sR0trBKfZQyF2RoFcj9s9if/S44bHr0UxA\nwbUvamdSMA2thafV3jbJMM6wDZ7rj+ecB+wyzahQ43vcREPZfGynO+89FqCerDxz\nOwjfSagTS9kc203SB+hAIabu0S5B9EZ4cmKlqsS+0c+tIK3yyEl2qndnDydPeaLQ\nxNk1TkODRgM7OQicJJXLlXL7m+AFfcPDIUwmlt+J/RHzIy/ERKuDzIPzhgSVWkq0\ny44Y3NDd4VwXbIFasj0QS/cwew99tfKP0RZFgp48OIjnAz7Y6agK8+sAgQw9IDXy\nsobb+XjxjSC93ScYkTVN\n=bWs5\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 792193dacbc4a736af4e4eb7f70923db40323266\nparent 9628312b5ddb2c7c62cc11166bfa41cf23f50862\nparent 4ed48dd85cc97f74e121a65c7de71f8906009523\nauthor Umputun <umputun@gmail.com> 1733709195 -0600\ncommitter GitHub <noreply@github.com> 1733709195 -0600\n\nMerge pull request #1871 from umputun/paskal/improve_tests\n\nImprove tests",
      "verified_at": "2024-12-09T01:53:19Z"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/6402ef9cae790b2361f270c6bcabe26261842064",
  "html_url": "https://github.com/umputun/remark42/commit/6402ef9cae790b2361f270c6bcabe26261842064",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/6402ef9cae790b2361f270c6bcabe26261842064/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9628312b5ddb2c7c62cc11166bfa41cf23f50862",
      "url": "https://api.github.com/repos/umputun/remark42/commits/9628312b5ddb2c7c62cc11166bfa41cf23f50862",
      "html_url": "https://github.com/umputun/remark42/commit/9628312b5ddb2c7c62cc11166bfa41cf23f50862"
    },
    {
      "sha": "4ed48dd85cc97f74e121a65c7de71f8906009523",
      "url": "https://api.github.com/repos/umputun/remark42/commits/4ed48dd85cc97f74e121a65c7de71f8906009523",
      "html_url": "https://github.com/umputun/remark42/commit/4ed48dd85cc97f74e121a65c7de71f8906009523"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 53,
    "deletions": 15
  },
  "files": [
    {
      "sha": "66ecc068721c86d0267100ba95489dfa10aa473a",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark42/blob/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Fcmd%2Fserver_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver_test.go?ref=6402ef9cae790b2361f270c6bcabe26261842064",
      "patch": "@@ -637,10 +637,10 @@ func TestServerAuthHooks(t *testing.T) {\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusCreated, resp.StatusCode, \"non-blocked user able to post\")\n \n-\t// add comment with no-aud claim\n-\tclaimsNoAud := claims\n-\tclaimsNoAud.Audience = \"\"\n-\ttkNoAud, err := tkService.Token(claimsNoAud)\n+\t// try to add comment with no-aud claim\n+\tbadClaimsNoAud := claims\n+\tbadClaimsNoAud.Audience = \"\"\n+\ttkNoAud, err := tkService.Token(badClaimsNoAud)\n \trequire.NoError(t, err)\n \tt.Logf(\"no-aud claims: %s\", tkNoAud)\n \treq, err = http.NewRequest(\"POST\", fmt.Sprintf(\"http://localhost:%d/api/v1/comment\", port),\n@@ -655,6 +655,25 @@ func TestServerAuthHooks(t *testing.T) {\n \trequire.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode, \"user without aud claim rejected, \\n\"+tkNoAud+\"\\n\"+string(body))\n \n+\t// try to add comment without user set\n+\tbadClaimsNoUser := claims\n+\tbadClaimsNoUser.Audience = \"remark\"\n+\tbadClaimsNoUser.User = nil\n+\ttkNoUser, err := tkService.Token(badClaimsNoUser)\n+\trequire.NoError(t, err)\n+\tt.Logf(\"no user claims: %s\", tkNoUser)\n+\treq, err = http.NewRequest(\"POST\", fmt.Sprintf(\"http://localhost:%d/api/v1/comment\", port),\n+\t\tstrings.NewReader(`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/p/2018/12/29/podcast-631/\",\n+\t\"site\": \"remark\"}}`))\n+\trequire.NoError(t, err)\n+\treq.Header.Set(\"X-JWT\", tkNoUser)\n+\tresp, err = client.Do(req)\n+\trequire.NoError(t, err)\n+\tbody, err = io.ReadAll(resp.Body)\n+\trequire.NoError(t, err)\n+\trequire.NoError(t, resp.Body.Close())\n+\tassert.Equal(t, http.StatusUnauthorized, resp.StatusCode, \"user without user information rejected, \\n\"+tkNoUser+\"\\n\"+string(body))\n+\n \t// block user github_dev as admin\n \treq, err = http.NewRequest(http.MethodPut,\n \t\tfmt.Sprintf(\"http://localhost:%d/api/v1/admin/user/github_dev?site=remark&block=1&ttl=10d\", port), http.NoBody)"
    },
    {
      "sha": "68d5c33d5c81c60d9ae20800008c4c48124878a0",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark42/blob/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Fmain_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Fmain_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fmain_test.go?ref=6402ef9cae790b2361f270c6bcabe26261842064",
      "patch": "@@ -121,9 +121,9 @@ func TestMain_WithWebhook(t *testing.T) {\n \n func TestGetDump(t *testing.T) {\n \tdump := getDump()\n-\tassert.True(t, strings.Contains(dump, \"goroutine\"))\n-\tassert.True(t, strings.Contains(dump, \"[running]\"))\n-\tassert.True(t, strings.Contains(dump, \"backend/app/main.go\"))\n+\tassert.Contains(t, dump, \"goroutine\")\n+\tassert.Contains(t, dump, \"[running]\")\n+\tassert.Contains(t, dump, \"backend/app/main.go\")\n \tt.Logf(\"\\n dump: %s\", dump)\n }\n "
    },
    {
      "sha": "644a8ce51028a529b4985d85ef13bbac5b39c7f3",
      "filename": "backend/app/rest/api/admin_test.go",
      "status": "modified",
      "additions": 26,
      "deletions": 7,
      "changes": 33,
      "blob_url": "https://github.com/umputun/remark42/blob/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Fadmin_test.go?ref=6402ef9cae790b2361f270c6bcabe26261842064",
      "patch": "@@ -803,9 +803,9 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \n \t// try bad user\n-\tbadClaims := claims\n-\tbadClaims.User.ID = \"no-such-id\"\n-\ttkn, err = srv.Authenticator.TokenService().Token(badClaims)\n+\tbadClaimsUser := claims\n+\tbadClaimsUser.User.ID = \"no-such-id\"\n+\ttkn, err = srv.Authenticator.TokenService().Token(badClaimsUser)\n \tassert.NoError(t, err)\n \treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n@@ -814,11 +814,12 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n \tassert.Equal(t, http.StatusBadRequest, resp.StatusCode, resp.Status)\n+\tbadClaimsUser.User.ID = \"provider1_user1\"\n \n \t// try without deleteme flag\n-\tbadClaims2 := claims\n-\tbadClaims2.User.SetBoolAttr(\"delete_me\", false)\n-\ttkn, err = srv.Authenticator.TokenService().Token(badClaims2)\n+\tbadClaimsWithoutDeleteMe := claims\n+\tbadClaimsWithoutDeleteMe.User.SetBoolAttr(\"delete_me\", false)\n+\ttkn, err = srv.Authenticator.TokenService().Token(badClaimsWithoutDeleteMe)\n \tassert.NoError(t, err)\n \treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n \tassert.NoError(t, err)\n@@ -829,7 +830,25 @@ func TestAdmin_DeleteMeRequestFailed(t *testing.T) {\n \tb, err := io.ReadAll(resp.Body)\n \tassert.NoError(t, err)\n \tassert.NoError(t, resp.Body.Close())\n-\tassert.True(t, strings.Contains(string(b), \"can't use provided token\"))\n+\tassert.Contains(t, string(b), \"can't use provided token\")\n+\tbadClaimsWithoutDeleteMe.User.SetBoolAttr(\"delete_me\", true)\n+\n+\t// try with wrong audience\n+\tbadClaimsMultipleAudience := claims\n+\tbadClaimsMultipleAudience.StandardClaims.Audience = \"something else\"\n+\ttkn, err = srv.Authenticator.TokenService().Token(badClaimsMultipleAudience)\n+\tassert.NoError(t, err)\n+\treq, err = http.NewRequest(http.MethodGet, fmt.Sprintf(\"%s/api/v1/admin/deleteme?token=%s\", ts.URL, tkn), http.NoBody)\n+\tassert.NoError(t, err)\n+\treq.SetBasicAuth(\"admin\", \"password\")\n+\tresp, err = client.Do(req)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, http.StatusBadRequest, resp.StatusCode)\n+\tb, err = io.ReadAll(resp.Body)\n+\tassert.NoError(t, err)\n+\tassert.NoError(t, resp.Body.Close())\n+\tassert.Contains(t, string(b), `site \\\"something else\\\" not found`)\n+\tbadClaimsMultipleAudience.StandardClaims.Audience = \"remark42\"\n }\n \n func TestAdmin_GetUserInfo(t *testing.T) {"
    },
    {
      "sha": "502148163b64a324a6b53e168a05c1c9d27d3f8c",
      "filename": "backend/app/rest/proxy/image_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark42/blob/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Frest%2Fproxy%2Fimage_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/6402ef9cae790b2361f270c6bcabe26261842064/backend%2Fapp%2Frest%2Fproxy%2Fimage_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fproxy%2Fimage_test.go?ref=6402ef9cae790b2361f270c6bcabe26261842064",
      "patch": "@@ -262,7 +262,7 @@ func TestImage_RoutesTimedOut(t *testing.T) {\n \tassert.NoError(t, resp.Body.Close())\n \trequire.NoError(t, err)\n \tt.Log(string(b))\n-\tassert.True(t, strings.Contains(string(b), \"deadline exceeded\"))\n+\tassert.Contains(t, string(b), \"deadline exceeded\")\n \tassert.Equal(t, 1, len(imageStore.LoadCalls()))\n }\n "
    }
  ]
}
