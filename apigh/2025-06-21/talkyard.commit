{
  "sha": "7a67282090228d9d591093f8a11a6a67f0d3e6e7",
  "node_id": "C_kwDOAKEu-toAKDdhNjcyODIwOTAyMjhkOWQ1OTEwOTNmOGExMWE2YTY3ZjBkM2U2ZTc",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2025-03-25T15:10:30Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2025-03-25T15:10:30Z"
    },
    "message": "Merge v0.2025.005 into 'release'.",
    "tree": {
      "sha": "900594e0f53d8ccc6326dae89e8b6c19018005bb",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/900594e0f53d8ccc6326dae89e8b6c19018005bb"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/7a67282090228d9d591093f8a11a6a67f0d3e6e7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null,
      "verified_at": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/7a67282090228d9d591093f8a11a6a67f0d3e6e7",
  "html_url": "https://github.com/debiki/talkyard/commit/7a67282090228d9d591093f8a11a6a67f0d3e6e7",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/7a67282090228d9d591093f8a11a6a67f0d3e6e7/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "617325d6946dda8cb6d1e5919313537b887c59fd",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/617325d6946dda8cb6d1e5919313537b887c59fd",
      "html_url": "https://github.com/debiki/talkyard/commit/617325d6946dda8cb6d1e5919313537b887c59fd"
    },
    {
      "sha": "491341dc47b9c49d1371f1dd37cd22be85dc5be6",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/491341dc47b9c49d1371f1dd37cd22be85dc5be6",
      "html_url": "https://github.com/debiki/talkyard/commit/491341dc47b9c49d1371f1dd37cd22be85dc5be6"
    }
  ],
  "stats": {
    "total": 719,
    "additions": 549,
    "deletions": 170
  },
  "files": [
    {
      "sha": "f0940ff2e552bdf499ae892b50755dcde3698d5c",
      "filename": "appsv/model/src/main/scala/com/debiki/core/ReviewTask.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -34,7 +34,7 @@ case class ModResult(\n   updatedAuthor: Option[Participant],\n   updatedPageId: Option[PageId] = None,\n   deletedPageId: Option[PageId] = None,\n-  bannedUser: Opt[Pat] = None)\n+  bannedPat: Opt[Pat] = None)\n \n object ModResult {\n   val NothingChanged = ModResult(Nil, None, None, None)"
    },
    {
      "sha": "323840c84188221c62d96dd81024c83e67f13574",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -602,7 +602,6 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   def loadAllUsernameUsages(): Seq[UsernameUsage]\n   def isUsernameInUse(username: String): Boolean = loadUsernameUsages(username).nonEmpty\n \n-  COULD // add fn: loadPatVb(patId): Opt[PatVb] ?\n   def loadParticipant(userId: UserId): Option[Participant]\n   def loadTheParticipant(userId: UserId): Participant =\n     loadParticipant(userId).getOrElse(throw UserNotFoundException(userId))\n@@ -656,6 +655,11 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n     loadParticipant(userId).map(_.asGuestOrThrow)\n   }\n \n+  def loadGuestOrAnon(patId: PatId): Opt[PatVb] = {\n+    dieIf(patId > Participant.MaxGuestOrAnonId, \"TyE8FY094\")\n+    loadParticipant(patId).map(_.asGuestOrAnonOrThrow)\n+  }\n+\n   def loadTheGuest(userId: UserId): Guest = {\n     dieIf(userId > Participant.MaxGuestId, \"EsE6YKWU2\", userId)\n     loadGuest(userId).getOrElse(throw UserNotFoundException(userId))\n@@ -737,9 +741,17 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n \n   def loadMembersVbById(userIds: Iterable[MembId]): ImmSeq[MemberVb]\n \n+  def loadPatVb(patId: PatId): Opt[PatVb] = {  // ParticipantInclDetails\n+    // [load_guests_vb]\n+    if (patId <= Pat.MaxGuestOrAnonId) this.loadGuestOrAnon(patId)\n+    else this.loadMembersVbById(ImmSeq(patId)).headOption\n+  }\n+\n+  RENAME // to loadPatVbsById_wrongGuestEmailNotfPerf(...):  Map[PatId, PatVb]\n   def loadParticipantsInclDetailsByIdsAsMap_wrongGuestEmailNotfPerf(ids: Iterable[UserId])\n         : immutable.Map[UserId, ParticipantInclDetails]\n \n+  RENAME // to loadPatVbsByExtId_wrongGuestEmailNotfPerf(...):  Map[PatId, PatVb]\n   def loadParticipantsInclDetailsByExtIdsAsMap_wrongGuestEmailNotfPerf(extImpIds: Iterable[ExtId])\n         : immutable.Map[ExtId, ParticipantInclDetails]\n "
    },
    {
      "sha": "69836689e79ff6dd9b822d1dd615feebfa31eca9",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -744,7 +744,10 @@ case object Participant {\n     *\n     * This is 2314-08-31 10:00:01. DO_BEFORE 2200-01-01: Replace w null & review constraints etc.\n     */\n-  val _BanMagicEpoch: i64 = 10876500001L // [ban_magic_nr]\n+  val _BanMagicEpochMs: i64 = 10876500001000L // [ban_magic_nr]\n+  // Oops forgot *1000 to get millis. Fixed in v0.2025.005, & v1.\n+  val _BanMagicEpochBadSecs: i64 = 10876500001L\n+\n }\n \n \n@@ -772,7 +775,10 @@ sealed trait Pat extends HasInt32Id {\n   // Later: Set to false, if banned? Add new fn: isSuspendedOrBanned?\n   def suspendedTill: Opt[ju.Date]\n   /** Banned users cannot log in and view their old posts — but suspended users can. */\n-  def isBanned: Bo = suspendedTill.exists(_.getTime == Participant._BanMagicEpoch)\n+  def isBanned: Bo = suspendedTill.exists(t =>\n+        t.getTime == Participant._BanMagicEpochMs ||\n+        // Oops, some dates saved as secs, should have been millis.\n+        t.getTime == Participant._BanMagicEpochBadSecs)\n   def isAdmin: Bo\n   def isOwner: Bo\n   def isModerator: Bo\n@@ -823,7 +829,9 @@ sealed trait Pat extends HasInt32Id {\n \n   final def isSuspendedAt(when: When): Bo = isSuspendedAt(when.toJavaDate)\n   final def isSuspendedAt(when: ju.Date): Bo =\n-    Participant.isSuspendedAt(when, suspendedTill = suspendedTill)\n+    Participant.isSuspendedAt(when, suspendedTill = suspendedTill) ||\n+          isBanned  // because of the _BanMagicEpochBadSecs instead of millis bug\n+                    // and later, if suspendedTil == None means banned?  [4ELBAUPW2]\n \n   def effectiveTrustLevel: TrustLevel\n \n@@ -934,6 +942,14 @@ sealed trait Pat extends HasInt32Id {\n     }\n   }\n \n+  def asGuestOrAnonOrThrow: PatVb = {\n+    this match {\n+      case guest: Guest => guest\n+      case anon: Anonym => anon\n+      case _ => throwWrongPatType(wantedWhat = \"a guest or anon\")\n+    }\n+  }\n+\n   final def toMemberVbOrDie: MemberVb = {\n     this match {\n       case u: UserVb => u\n@@ -1178,7 +1194,7 @@ case class Anonym(\n   def emailNotfPrefs: EmailNotfPrefs = EmailNotfPrefs.Unspecified\n   def tinyAvatar: Opt[UploadRef] = None\n   def smallAvatar: Opt[UploadRef] = None\n-  def suspendedTill: Opt[ju.Date] = None // for now\n+  def suspendedTill: Opt[ju.Date] = None // for now, think about later. [How_block_anons]\n \n   def isAdmin: Bo = false\n   def isOwner: Bo = false\n@@ -2417,6 +2433,7 @@ object BrowserIdData {\n   val Sysbot = BrowserIdData(\"127.0.0.4\", None, NoFingerprint)\n   // Superadmin = .3,  or  .10?  and Superbot = .4  or .20 ?\n   val Forgotten = BrowserIdData(\"127.0.0.2\", None, NoFingerprint)\n+  val Test = BrowserIdData(\"123.45.67.89\", None, NoFingerprint)\n }\n \n "
    },
    {
      "sha": "f63fdf5284c3fe24219f605e5f80473854f808ed",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -873,9 +873,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def loadMemberInclDetailsById(userId: UserId): Option[MemberVb] = {\n-    require(Participant.isRoleId(userId), \"DwE5FKE2\")\n-    _loadMemberVbByFieldValue(\"user_id\", userId.asAnyRef)\n+  def loadMemberInclDetailsById(id: MembId): Opt[MemberVb] = {\n+    require(Pat.isMember(id), s\"s$siteId: Not a member id: $id [DwE5FKE2]\")\n+    _loadMemberVbByFieldValue(\"user_id\", id.asAnyRef)\n   }\n \n \n@@ -924,6 +924,10 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n   def loadParticipantsInclDetailsByIdsAsMap_wrongGuestEmailNotfPerf(\n         ids: Iterable[UserId]): immutable.Map[UserId, ParticipantInclDetails] = {\n+    // But can't I split on ids <= MaxGuestOrAnonId and > MinMemberId, and run 2\n+    // queries, one for guests & anons, one for members? To load the correct\n+    // guest email notif prefs. See  [load_guests_vb].  Usually not needed though,\n+    // and one less query, the way it's now, hmm.\n     loadParticipantsInclDetails_wrongGuestEmailNotfPerf_Impl[UserId](\n       ids.map(_.asAnyRef), \"user_id\", _.id)\n   }\n@@ -932,6 +936,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   def loadParticipantsInclDetailsByExtIdsAsMap_wrongGuestEmailNotfPerf(\n         extImpIds: Iterable[ExtId])\n         : immutable.Map[ExtId, ParticipantInclDetails] = {\n+    // (See  [load_guests_vb].)\n     loadParticipantsInclDetails_wrongGuestEmailNotfPerf_Impl[ExtId](\n       extImpIds, \"ext_id\", _.extId.getOrDie(\"TyE205HKSD63\"))\n   }"
    },
    {
      "sha": "d70eb116098d337f2bd745dd8f32f5f4a8b1c539",
      "filename": "appsv/server/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -122,7 +122,8 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n               postType, pageMeta, pageAuthor = pageAuthor,\n               Vector(post), dao.getAnyPrivateGroupTalkMembers(pageMeta),\n               inCategoriesRootLast = categoriesRootLast,\n-              tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n+              tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+              now = now), \"EdEZBXK3M2\")\n       }\n       else {\n         // Won't need later, when true id stored in posts3/nodes_t? [posts3_true_id]\n@@ -138,6 +139,7 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n               dao.getAnyPrivateGroupTalkMembers(pageMeta),\n               inCategoriesRootLast = categoriesRootLast,\n               tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+              now = now,\n               // We're just saving a draft, can choose an ok alias later if needed.\n               ignoreAlias = true), \"TyEZBXK3M3\")\n       }"
    },
    {
      "sha": "51deb76fdff5bad3d94f7f84d43a1aa166e9fa1d",
      "filename": "appsv/server/controllers/EditController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FEditController.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -145,6 +145,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4JBR01\")\n     val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdE0DK9WY3\")\n     val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val now = dao.now()\n \n     // Won't need later, when true id stored in posts3/nodes_t? [posts3_true_id]\n     val postAuthor: Pat =\n@@ -163,6 +164,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           dao.getAnyPrivateGroupTalkMembers(pageMeta),\n           inCategoriesRootLast = categoriesRootLast,\n           tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+          now = now,\n           // We're just loading the draft text\n           ignoreAlias = true), \"EdEZBXKSM2\")\n \n@@ -202,6 +204,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val anyPostId: Opt[PostId] = parseOptInt32(body, \"postId\")\n     val newText: St = parseSt(body, \"text\")\n     val deleteDraftNr: Opt[DraftNr] = parseOptInt32(body, \"deleteDraftNr\")\n+    val now = dao.now()\n \n     TESTS_MISSING // Do as anon  TyTANONEDIT\n     val asAlias: Opt[WhichAliasPat] =\n@@ -252,7 +255,8 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       post, postAuthor = postAuthor, pageMeta, pageAuthor = pageAuthor,\n       dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n-      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdE4JBTYE8\")\n+      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+      now = now), \"EdE4JBTYE8\")\n \n     val postRenderSettings = dao.makePostRenderSettings(pageMeta.pageType)\n     val newTextAndHtml = dao.textAndHtmlMaker.forBodyOrComment("
    },
    {
      "sha": "82bb9e7cacfc217940274b28e6ef4c26495febce",
      "filename": "appsv/server/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FReplyController.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -60,6 +60,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val postType = PostType.fromInt((body \\ \"postType\").as[Int]) getOrElse throwBadReq(\n       \"DwE6KG4\", \"Bad post type\")\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n+    val now = context.globals.now()\n \n     throwForbiddenIf(isProd && postType == PostType.Bookmark,\n           \"TyEBOOKM0ENA1\", \"Bookmarks not yet enabled\")\n@@ -99,7 +100,8 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       postType, pageMeta, pageAuthor = pageAuthor,\n       replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n-      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)),\n+      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+      now = now),\n       \"TyEM0REPLY_\")\n \n     REFACTOR; COULD // intstead: [5FLK02]\n@@ -136,6 +138,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val pageId = (body \\ \"pageId\").as[PageId]\n     val text = (body \\ \"text\").as[String].trim\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n+    val now = context.globals.now()\n \n     // Not yet supported, for chat messages.\n     // val asAlias: Opt[WhichAliasPat] = ...\n@@ -156,7 +159,8 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       PostType.ChatMessage, pageMeta, pageAuthor = pageAuthor,\n       replyToPosts, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n-      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)),\n+      tooManyPermissions = dao.getPermsOnPages(categoriesRootLast),\n+      now = now),\n       \"EdEHDETG4K5\")\n \n     // Don't follow links in chat messages — chats don't work with search engines anyway.\n@@ -346,6 +350,7 @@ object EmbeddedCommentsPageCreator {   REFACTOR; CLEAN_UP; // moe to talkyard.se\n \n     val slug = None\n     val folder = None\n+    val now = context.globals.now()\n \n     val placeInCatId = lazyCreatePageInCatId getOrElse {\n       val id = siteSettings.embeddedCommentsCategoryId\n@@ -360,7 +365,8 @@ object EmbeddedCommentsPageCreator {   REFACTOR; CLEAN_UP; // moe to talkyard.se\n           request.theUserAndLevels, asAlias = None, dao.getGroupIdsOwnFirst(requester),\n           pageRole, PostType.Normal, pinWhere = None, anySlug = slug, anyFolder = folder,\n           inCategoriesRootLast = categoriesRootLast,\n-          tooManyPermissions = dao.getPermsOnPages(categories = categoriesRootLast)),\n+          tooManyPermissions = dao.getPermsOnPages(categories = categoriesRootLast),\n+          now = now),\n           \"EdE7USC2R8\")\n \n     // This won't generate any new page notf — but the first *reply*, does. [new_emb_pg_notf]"
    },
    {
      "sha": "1be43cb44bdab8710109bb59cb4deb3a50427d21",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUserController.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -918,8 +918,9 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val postId = (request.body \\ \"postId\").as[PostId]\n     val numDays = -1 // (request.body \\ \"numDays\").as[Int] // currently no longer in use\n     val threatLevel = ThreatLevel.fromInt((request.body \\ \"threatLevel\").as[Int]).getOrElse(\n-      throwBadArgument(\"EsE8GY2W\", \"threatLevel\"))\n-    request.dao.blockGuest(postId, numDays = numDays, threatLevel, blockerId = request.theUserId)\n+          throwBadArgument(\"EsE8GY2W\", \"threatLevel\"))\n+    request.dao.blockGuestIfAuZ(\n+          postId, threatLevel, request.reqrTargetSelf.denyUnlessStaff())\n     Ok\n   }\n "
    },
    {
      "sha": "2f65b35bb2030a62b90645ef1d63f0f04ce2a9c5",
      "filename": "appsv/server/debiki/DebikiHttp.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2FDebikiHttp.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2FDebikiHttp.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FDebikiHttp.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -233,6 +233,9 @@ object EdHttp {  // REFACTOR move to  talkyard.server.http object methods?\n   def throwUnauthorized(errCode: String, message: String = \"\") =\n     throw ResultException(UnauthorizedResult(errCode, message))\n \n+  def throwForbidden(err: ErrMsgCode) =\n+    throw ResultException(ForbiddenResult(err.code, err.message))\n+\n   def throwForbidden(errCode: String, message: String = \"\", details: String = \"\") =\n     throw ResultException(ForbiddenResult(errCode, message, details))\n "
    },
    {
      "sha": "4f448321faf3f3815c7657c57e9e220788c77131",
      "filename": "appsv/server/debiki/dao/MessagesDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -88,6 +88,7 @@ trait MessagesDao {\n       // But do let them talk with staff, e.g. ask \"why am I not allowed to ...\".\n       // 2) TrustLevle.New members haven't spent much time at the site, and it's a bit risky to\n       // let them start sending PMs directly.\n+      throwForbiddenIf(sender.user.isSuspendedAt(tx.now), \"TyEM0MSG_SUSP\", \"Account suspended\")\n       if ((sender.threatLevel.toInt >= ThreatLevel.ModerateThreat.toInt ||\n           sender.trustLevel.isStrangerOrNewMember) && !sender.isStaff) {\n         if (toMembers.exists(!_.isStaff))"
    },
    {
      "sha": "d656c3fe2f56eb9df9b1284e88da64b72e25e71c",
      "filename": "appsv/server/debiki/dao/PagesDao.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -127,6 +127,7 @@ trait PagesDao {\n \n     val catsRootLast = getAncestorCategoriesSelfFirst(inCatId)\n     val tooManyPermissions = getPermsOnPages(categories = catsRootLast)\n+    val now = globals.now()\n \n     // A bot might be creating the page on behalf of another user, via the API. Then,\n     // the requester is the bot (it sends the HTTP request), and the creator is the human.\n@@ -151,7 +152,8 @@ trait PagesDao {\n           pageType, PostType.Normal, pinWhere = None,\n           anySlug = anySlug, anyFolder = anyFolder,\n           inCategoriesRootLast = catsRootLast,\n-          tooManyPermissions),\n+          tooManyPermissions,\n+          now = now),\n           \"TyE_CRPG_REQR_PERMS\")\n \n     val createdByWho: Who = reqrAndCreator match {\n@@ -167,7 +169,8 @@ trait PagesDao {\n                 inCategoriesRootLast = catsRootLast,\n                 // (This includes permissions for both the requester and target users, and\n                 // everyone else, but mayCreatePage() uses only those of the creator.)\n-                tooManyPermissions),\n+                tooManyPermissions,\n+                now = now),\n                 \"TyE_CRPG_TGT_PERMS\")\n         }\n         creatorWho\n@@ -306,7 +309,7 @@ trait PagesDao {\n       realAuthorAndLevels, asAlias, groupIds,\n       pageRole, bodyPostType, pinWhere, anySlug = anySlug, anyFolder = anyFolder,\n       inCategoriesRootLast = categoryPath,\n-      permissions), \"EdE5JGK2W4\")\n+      permissions, now = now), \"EdE5JGK2W4\")\n \n     require(!anyFolder.exists(_.isEmpty), \"EsE6JGKE3\")\n     // (Empty slug ok though, e.g. homepage.)"
    },
    {
      "sha": "86c4b268a562b1ef31b95dbb2084df8ae4dd483f",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -103,15 +103,15 @@ trait PostsDao {\n           asAlias = if (reqrAndReplyer.areNotTheSame) None else asAlias,\n           groupIds = this.getOnesGroupIds(reqrAndLevels.user),\n           postType, pageMeta, pageAuthor = pageAuthor, replyToPosts, privTalkMembers,\n-          inCategoriesRootLast = catsRootLast, tooManyPermissions),\n+          inCategoriesRootLast = catsRootLast, tooManyPermissions, now = now()),\n           \"TyEM0REPLY1\")\n \n     if (reqrAndReplyer.areNotTheSame) {\n       val replyerAndLevels = readTx(this.loadUserAndLevels(reqrAndReplyer.targetToWho, _))\n       throwNoUnless(Authz.mayPostReply(\n             replyerAndLevels, asAlias, this.getOnesGroupIds(replyerAndLevels.user),\n             postType, pageMeta, pageAuthor = pageAuthor, replyToPosts, privTalkMembers,\n-            inCategoriesRootLast = catsRootLast, tooManyPermissions),\n+            inCategoriesRootLast = catsRootLast, tooManyPermissions, now = now()),\n             \"TyEM0REPLY2\")\n     }\n \n@@ -281,7 +281,7 @@ trait PostsDao {\n       postType, page.meta, pageAuthor = pageAuthor,\n       replyToPosts, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n       tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n-      tx.loadPermsOnPages()), \"EdEMAY0RE\")\n+      tx.loadPermsOnPages(), now = now), \"EdEMAY0RE\")\n \n     // ----- Generate id, nr\n \n@@ -839,7 +839,7 @@ trait PostsDao {\n           PostType.ChatMessage, page.meta, pageAuthor = pageAuthor,\n           replyToPosts = Nil, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n           tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n-          tx.loadPermsOnPages()), \"EdEMAY0CHAT\")\n+          tx.loadPermsOnPages(), now = now()), \"EdEMAY0CHAT\")\n \n       val (reviewReasons: Seq[ReviewReason], _) =\n         throwOrFindNewPostReviewReasons(page.meta, authorAndLevels, tx)\n@@ -1234,7 +1234,7 @@ trait PostsDao {\n             tx.loadAnyPrivateGroupTalkMembers(page.meta),\n             inCategoriesRootLast = tx.loadCategoryPathRootLast(\n                   page.meta.categoryId, inclSelfFirst = true),\n-            tooManyPermissions = tx.loadPermsOnPages()), \"EdE6JLKW2R\")\n+            tooManyPermissions = tx.loadPermsOnPages(), now = now()), \"EdE6JLKW2R\")\n \n       // COULD don't allow sbd else to edit until 3 mins after last edit by sbd else?\n       // so won't create too many revs quickly because 2 edits.\n@@ -1966,6 +1966,7 @@ trait PostsDao {\n       val page = newPageDao(pageId, tx)\n       val postBefore = page.parts.thePostByNr(postNr)\n       val Seq(postOrigAuthor, changer) = tx.loadTheParticipants(postBefore.createdById, reqr.id)\n+      // See post? See  [granular_perms] comment below too.\n       throwIfMayNotSeePage(page, Some(changer))(tx)\n \n       val postAfter = postBefore.copy(tyype = newType)\n@@ -1984,6 +1985,8 @@ trait PostsDao {\n \n       // Test if the changer is allowed to change the post type in this way.\n       REFACTOR // Move this to new fn Authz.mayAlterPost(..., Alter.PostType)  ? [alterPage]\n+      // Maybe mods & core members shouldn't always be able to change type  [granular_perms]\n+      // (on pages they can see)?\n       if (changer.isStaffOrCoreMember) {\n         (postBefore.tyype, postAfter.tyype) match {\n           case (before, after) if before == PostType.Normal && after.isWiki =>\n@@ -3388,9 +3391,12 @@ trait PostsDao {\n         val memberAfter = member.copyWithMaxThreatLevel(ThreatLevel.ModerateThreat)\n         tx.updateUserInclDetails(memberAfter)\n       }\n-      else {\n-        blockGuestImpl(theBrowserIdData, user.id, numDays = 31,\n-          threatLevel = ThreatLevel.ModerateThreat, blockerId = SystemUserId)(tx)\n+      else user match {\n+        case guest: Guest =>\n+          this.blockGuestSkipAuZ(guest, Some(theBrowserIdData),\n+              threatLevel = ThreatLevel.ModerateThreat, blockerId = SystemUserId)(tx)\n+        case x =>\n+          // [How_block_anons]?\n       }\n \n       SECURITY ; BUG // minor: if the author has posted > numThings post, only the most recent ones"
    },
    {
      "sha": "9103740ee67143c2552ab6fb9867dce9a4ddfaef",
      "filename": "appsv/server/debiki/dao/ReviewsDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -381,7 +381,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n                   post, decidedById = decidedById, doingTasksNow = modTasks,\n                   browserIdData)(tx, staleStuff)\n             if (decision == DeleteAndBanSpammer) {\n-              val bannedUser = banUser(post.createdById, reason = \"DeleteAndBanSpammer\",\n+              val bannedPat: Opt[Pat] = this.banAuthorOf(post, reason = \"DeleteAndBanSpammer\",\n                     bannedById = decidedById)(tx, staleStuff)\n \n               // Has the spammer posted more spam? We'll delete it too, by looking up\n@@ -412,7 +412,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n                       doingTasksNow = Nil, browserIdData)(tx, staleStuff)\n               }\n \n-              res = res.copy(bannedUser = Some(bannedUser))\n+              res = res.copy(bannedPat = bannedPat)\n             }\n             res\n         }"
    },
    {
      "sha": "1bd46f551328163f439cbc34d015a3f275fcc498",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 135,
      "deletions": 58,
      "changes": 193,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -33,7 +33,7 @@ import talkyard.server._\n import talkyard.server.dao.StaleStuff\n import talkyard.server.authn.{Join, Leave, JoinOrLeave, StayIfMaySee}\n import talkyard.server.authz.{AuthzCtxOnPats, AuthzCtxOnAllWithReqer, AuthzCtxWithReqer}\n-import talkyard.server.authz.{ReqrAndTgt, PatAndPrivPrefs}\n+import talkyard.server.authz.{StaffReqrAndTgt, ReqrAndTgt, PatAndPrivPrefs}\n \n \n case class LoginNotFoundException(siteId: SiteId, userId: UserId)\n@@ -411,10 +411,52 @@ trait UserDao {\n     * And the person can't log in and view their old posts — but you can if you're\n     * only suspended.\n     */\n-  def banUser(userId: UserId, reason: St, bannedById: UserId)(tx: SiteTx, ss: StaleStuff,\n-          ): Pat = {\n-    _suspendOrBan(userId, until = new ju.Date(Pat._BanMagicEpoch), reason = reason,\n-          suspendedById = bannedById)(tx, ss)\n+  def banAuthorOf(post: Post, reason: St, bannedById: UserId)(tx: SiteTx, ss: StaleStuff,\n+          ): Opt[Pat] = {\n+    // (We've already checked if the banner may see the page. [auz_banner_of_auhtor])\n+\n+    // (Don't throw anything from here — that'd prevent the janitor actor from ever\n+    // carrying out this mod task, and mod tasks later in the queue.)\n+\n+    val patBef: Pat = tx.loadPatVb(post.createdById) getOrElse {\n+      logger.error(s\"s$siteId: Can't find author of post ${post.id} [TyEBAN0ATR]\")\n+      return None\n+    }\n+\n+    val patAft: Pat = patBef match {\n+      case guestBef: Guest =>\n+        UNTESTED\n+        // Guests don't have real user accounts — we'll ban their\n+        // unauthenticated guest account, and their ip addr too for a while.\n+        val auditLogEntry: Opt[AuditLogEntry] = tx.loadCreatePostAuditLogEntry(post.id)\n+        if (auditLogEntry.isEmpty)\n+          logger.warn(o\"\"\"s$siteId: No audit log entry, when blocking author of post ${post.id},\n+              who supposedly is a guest — so can't block IP addr [TyW2WKF6]\"\"\")\n+\n+        val guestAft = this.blockGuestSkipAuZ(\n+              guestBef, auditLogEntry.map(_.browserIdData),\n+              ThreatLevel.SevereThreat, blockerId = bannedById)(tx)\n+\n+        guestAft getOrElse guestBef // guestAft is None if already banned\n+\n+      case userBef: UserVb =>\n+        _suspendOrBan(userBef, until = new ju.Date(Pat._BanMagicEpochMs),\n+              reason = reason, suspendedById = bannedById)(tx, ss) getOrIfBad { err=>\n+          logger.warn(s\"s$siteId: Cound't ban pat ${patBef.id}: $err [TyEBANATR07]\")\n+          return None\n+        }\n+\n+      case anonBef: Anonym =>\n+        // [How_block_anons]\n+        logger.warn(s\"s$siteId: Baning anonyms hasn't been implemented [TyEBANATR05]\")\n+        return None\n+\n+      case other =>\n+        logger.error(s\"s$siteId: Can't ban a ${classNameOf(other)} [TyEBANATR03]\")\n+        return None\n+    }\n+\n+    Some(patAft)\n   }\n \n \n@@ -428,35 +470,37 @@ trait UserDao {\n     writeTx { (tx, staleStuff) =>\n       val now = tx.now\n       val suspendedTill = new ju.Date(now.millis + cappedDays * MillisPerDay)\n-\n-      _suspendOrBan(userId, until = suspendedTill, reason = reason,\n-            suspendedById = suspendedById)(tx, staleStuff)\n+      var user: UserVb = tx.loadTheUserInclDetails(userId)\n+      _suspendOrBan(user, until = suspendedTill, reason = reason,\n+            suspendedById = suspendedById)(tx, staleStuff) ifBad { err =>\n+        throwForbidden(err)\n+      }\n     }\n   }\n \n \n-  /** If `until` is epoch `_BanMagicEpoch` the user is considered banned.\n+  /** If `until` is epoch `_BanMagicEpochMs` the user is considered banned.\n     */\n-  private def _suspendOrBan(userId: UserId, until: ju.Date, reason: St, suspendedById: UserId,\n-          )(tx: SiteTx, staleStuff: StaleStuff): Pat = {\n-      var user = tx.loadTheUserInclDetails(userId)\n-      if (user.isAdmin)\n-        throwForbidden(\"DwE4KEF24\", \"Cannot suspend admins\")\n+  private def _suspendOrBan(userBef: UserVb, until: ju.Date, reason: St,\n+          suspendedById: UserId)(tx: SiteTx, staleStuff: StaleStuff): Pat Or ErrMsgCode = Good {\n+\n+      if (userBef.isAdmin)\n+        return Bad(ErrMsgCode(\"Cannot suspend admins\", \"TyE4KEF24\"))\n \n-      user = user.copy(\n+      val userAft = userBef.copy(\n         suspendedAt = Some(now().toJavaDate),\n         suspendedTill = Some(until),\n         suspendedById = Some(suspendedById),\n         suspendedReason = Some(reason.trim))\n \n-      tx.updateUserInclDetails(user)\n-      staleStuff.addPatIds(Set(userId))\n+      tx.updateUserInclDetails(userAft)\n+      staleStuff.addPatIds(Set(userAft.id))\n \n-      logout(user.noDetails, bumpLastSeen = false, anyTx = Some(tx, staleStuff))\n+      logout(userAft.noDetails, bumpLastSeen = false, anyTx = Some(tx, staleStuff))\n       terminateSessions(  // [end_sess]\n-            forPatId = user.id, all = true, anyTx = Some(tx, staleStuff))\n+            forPatId = userAft.id, all = true, anyTx = Some(tx, staleStuff))\n \n-      user\n+      userAft\n   }\n \n \n@@ -471,26 +515,61 @@ trait UserDao {\n   }\n \n \n-  def blockGuest(postId: PostId, numDays: Int, threatLevel: ThreatLevel, blockerId: UserId): Unit = {\n+  def blockGuestIfAuZ(postId: PostId, threatLevel: ThreatLevel, blocker: StaffReqrAndTgt)\n+          : Opt[Pat] = {\n+\n     val anyChangedGuest: Option[Guest] = readWriteTransaction { tx =>\n-      val auditLogEntry: AuditLogEntry = tx.loadCreatePostAuditLogEntry(postId) getOrElse {\n-        throwForbidden(\"DwE2WKF5\", \"Cannot block user: No audit log entry, so no ip and id cookie\")\n+\n+      // ----- AuZ\n+\n+      SECURITY; TESTS_MISSING // No tests for guests?  [block_post_author_e2e_test]\n+      // There's this though: [mod_bans_guest_app_test].\n+\n+      val post = loadPostByUniqueId(postId, Some(tx)) getOrElse {\n+        security.throwIndistinguishableNotFound(s\"TyE0SEE_BLOCKATR_0POST\")\n+      }\n+      val (maySeeResult, debugCode) =\n+            this.maySeePost(post, Some(blocker.reqr), maySeeUnlistedPages = true)(tx)\n+      if (!maySeeResult.may) {\n+        security.throwIndistinguishableNotFound(s\"TyE0SEE_BLOCKATR_$debugCode\")\n       }\n \n-      blockGuestImpl(auditLogEntry.browserIdData, auditLogEntry.doerId,\n-          numDays, threatLevel, blockerId)(tx)\n+      // ----- Block\n+\n+      // (We'll look up by post author id, below, if audit log entry missing.)\n+      val auditLogEntry: Opt[AuditLogEntry] = tx.loadCreatePostAuditLogEntry(postId)\n+\n+      if (auditLogEntry.isEmpty)\n+        logger.warn(o\"\"\"s$siteId: No audit log entry, when blocking author of post $postId,\n+              who supposedly is a guest — so can't block ip addr [TyW2WKF5]\"\"\")\n+\n+      val patId = auditLogEntry.map(_.doerId) getOrElse {\n+        post.createdById\n+      }\n+      // Later: Can theoretically be different, if changed author. [post_authors]\n+      devDieIf(patId != post.createdById, \"TyE603SKL46\")\n+\n+      val guest = tx.loadTheParticipant(patId) match {\n+        case g: Guest => g\n+        case _: Anonym =>\n+          // [How_block_anons]?\n+          throwBadReq(\"TyE0GUEST522\", \"Can't block anonyms, not implemented\")\n+        case x =>\n+          throwBadReq(\"TyE0GUEST523\", \"Author is not a guest user\")\n+      }\n+\n+      blockGuestSkipAuZ(guest, auditLogEntry.map(_.browserIdData),\n+            threatLevel, blockerId = blocker.reqr.id)(tx)\n     }\n     anyChangedGuest.foreach(g => removeUserFromMemCache(g.id))\n+    anyChangedGuest\n   }\n \n \n   /** Returns any guest whose threat level got changed and should be uncached.\n     */\n-  def blockGuestImpl(browserIdData: BrowserIdData, guestId: UserId, numDays: Int,\n-        threatLevel: ThreatLevel, blockerId: UserId)(tx: SiteTransaction): Option[Guest] = {\n-\n-      if (!Participant.isGuestId(guestId))\n-        throwForbidden(\"DwE4WKQ2\", \"Cannot block authenticated users. Suspend them instead\")\n+  def blockGuestSkipAuZ(guest: Guest, browserIdData: Opt[BrowserIdData],\n+        threatLevel: ThreatLevel, blockerId: UserId)(tx: SiteTx): Option[Guest] = {\n \n       // Hardcode 2 & 6 weeks for now. Asking the user to choose # days –> too much for him/her\n       // to think about. Block the ip for a little bit shorter time, because might affect\n@@ -501,15 +580,16 @@ trait UserDao {\n       val cookieBlockedTill =\n         Some(new ju.Date(tx.now.millis + OneWeekInMillis * 6))\n \n-      val ipBlock = Block(\n+      val ipBlock = browserIdData map { brIdData => Block(\n         threatLevel = threatLevel,\n-        ip = Some(browserIdData.inetAddress),  // include ip\n-        browserIdCookie = None,                // skip cookie\n+        ip = Some(brIdData.inetAddress),   // include ip\n+        browserIdCookie = None,            // skip cookie\n         blockedById = blockerId,\n         blockedAt = tx.now.toJavaDate,\n         blockedTill = ipBlockedTill)\n+      }\n \n-      val browserIdCookieBlock = browserIdData.idCookie map { idCookie =>\n+      val browserIdCookieBlock = browserIdData.flatMap(_.idCookie) map { idCookie =>\n         Block(\n           threatLevel = threatLevel,\n           ip = None,                        // skip ip\n@@ -522,25 +602,24 @@ trait UserDao {\n       // COULD catch dupl key error when inserting IP block, and update it instead, if new\n       // threat level is *worse* [6YF42]. Aand continue anyway with inserting browser id\n       // cookie block.\n-      tx.insertBlock(ipBlock)\n+      ipBlock foreach tx.insertBlock\n       browserIdCookieBlock foreach tx.insertBlock\n \n-      // Also set the user's threat level, if the new level is worse.\n-      tx.loadGuest(guestId) foreach { guest =>\n-        if (!guest.lockedThreatLevel.exists(_.toInt >= threatLevel.toInt)) {\n-          // The new threat level is worse than the previous (if any).\n-          tx.updateGuest(\n-            guest.copy(lockedThreatLevel = Some(threatLevel)))\n-          return Some(guest)\n-        }\n+      // Update threat level, if new level is worse.\n+      if (!guest.lockedThreatLevel.exists(_.toInt >= threatLevel.toInt)) {\n+        // The new threat level is worse than the previous.\n+        val worseGuest = guest.copy(lockedThreatLevel = Some(threatLevel))\n+        tx.updateGuest(worseGuest)\n+        return Some(worseGuest)\n       }\n+\n       None\n   }\n \n \n-  def unblockGuest(postNr: PostNr, unblockerId: UserId): Unit = {\n+  def unblockGuest(postId: PostId, unblockerId: UserId): Unit = {\n     val anyChangedGuest = readWriteTransaction { tx =>\n-      val auditLogEntry: AuditLogEntry = tx.loadCreatePostAuditLogEntry(postNr) getOrElse {\n+      val auditLogEntry: AuditLogEntry = tx.loadCreatePostAuditLogEntry(postId) getOrElse {\n         throwForbidden(\"DwE5FK83\", \"Cannot unblock guest: No audit log entry, IP unknown\")\n       }\n       tx.unblockIp(auditLogEntry.browserIdData.inetAddress)\n@@ -806,29 +885,27 @@ trait UserDao {\n               return Bad(problem)\n             }\n \n-      addUserStats(UserStats(loginGrant.user.id, lastSeenAt = tx.now))(tx)\n-\n-      // What? isSuspendedAt checks only suspendedTill ? what about suspendedAt? [4ELBAUPW2]\n-      // (Fine for now, maybe need to fix later though)\n-      if (!loginGrant.user.isSuspendedAt(loginAttempt.date))\n-        return Good(loginGrant)\n+      val user: UserBr = loginGrant.user\n+      if (user.isBanned)\n+        throwForbidden(\"TyEBANND0_\", o\"\"\"Account banned\"\"\")\n \n-      val user = tx.loadUserInclDetails(loginGrant.user.id) getOrElse throwForbidden(\n-        \"DwE05KW2\", \"User not found, id: \" + loginGrant.user.id)\n-      // Still suspended?\n-      if (user.suspendedAt.isDefined) {\n+      if (user.isSuspendedAt(loginAttempt.date)) {\n+        val userVb = tx.loadTheUserInclDetails(user.id)\n         val forHowLong = user.suspendedTill match {\n-          case None => \"forever\"\n+          case None =>\n+            // Dead code, currently always set if is suspended or banned. [4ELBAUPW2]\n+            \"forever\"\n           case Some(date) => \"until \" + toIso8601NoT(date)\n         }\n         throwForbidden(\"TyEUSRSSPNDD_\", o\"\"\"Account suspended $forHowLong,\n-            reason: ${user.suspendedReason getOrElse \"?\"}\"\"\")\n+              reason: ${userVb.suspendedReason getOrElse \"?\"}\"\"\")\n       }\n \n-      // Not suspended, is past end date.\n+      addUserStats(UserStats(user.id, lastSeenAt = tx.now))(tx)\n       loginGrant\n     }\n \n+    // Tiny optimization: Cache user, will need, next http request.\n     // Don't save any site cache version, because user specific data doesn't change\n     // when site specific data changes. [pat_cache]\n     memCache.put("
    },
    {
      "sha": "6a7e7aa28f97660b787b6fa89e5f234c48b5533e",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -275,9 +275,12 @@ object Authz {\n     anySlug: Option[String],\n     anyFolder: Option[String],\n     inCategoriesRootLast: immutable.Seq[Category],\n-    tooManyPermissions: immutable.Seq[PermsOnPages]): MayMaybe = {\n+    tooManyPermissions: immutable.Seq[PermsOnPages],\n+    now: When): MayMaybe = {\n \n     val anyUser: Opt[Pat] = userAndLevels.anyUser\n+    if (anyUser.exists(_.isSuspendedAt(now)))\n+      return NoMayNot(\"TyEM0CRP_SUSP\", \"Account suspended\")\n \n     val mayWhat = checkPermsOnPages(\n           anyUser, asAlias = asAlias, groupIds,\n@@ -506,9 +509,13 @@ object Authz {\n     replyToPosts: immutable.Seq[Post],\n     privateGroupTalkMemberIds: Set[UserId],\n     inCategoriesRootLast: immutable.Seq[Category],\n-    tooManyPermissions: immutable.Seq[PermsOnPages]): MayMaybe = {\n+    tooManyPermissions: immutable.Seq[PermsOnPages],\n+    now: When,\n+    ): MayMaybe = {\n \n     val user = userAndLevels.user\n+    if (user.isSuspendedAt(now))\n+      return NoMayNot(\"TyEM0RE_SUSP\", \"Account suspended\")\n \n     SHOULD // check perms on post too, not just page.  Need post author. [posts3_true_id]\n     val mayWhat = checkPermsOnPages(\n@@ -591,10 +598,13 @@ object Authz {\n     privateGroupTalkMemberIds: Set[UserId],\n     inCategoriesRootLast: immutable.Seq[Category],\n     tooManyPermissions: immutable.Seq[PermsOnPages],\n+    now: When,\n     ignoreAlias: Bo = false,\n     ): MayMaybe = {\n \n     val user = userAndLevels.user\n+    if (user.isSuspendedAt(now))\n+      return NoMayNot(\"TyEM0ED_SUSP\", \"Account suspended\")\n \n     if (post.isDeleted && !user.isStaff)\n       return NoNotFound(\"TyEM0EDPOSTDELD\")"
    },
    {
      "sha": "53e4bfd1e057385dc2d558b6bc74c67aac66e324",
      "filename": "appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -497,7 +497,7 @@ trait AuthzSiteDaoMixin {\n \n \n   def throwIfMayNotSeeReviewTaskUseCache(task: ReviewTask, forWho: Who): Unit = {\n-    TESTS_MISSING // add security test, not e2e test?\n+    TESTS_MISSING // [block_post_author_e2e_test]\n     val postId = task.postId getOrElse { return }\n     val post = loadPostByUniqueId(postId) getOrDie \"TyE5WKBGP\"  // there's a foreign key\n     // If one has activated a pseudonym, one might need to activate one's main user account\n@@ -507,7 +507,7 @@ trait AuthzSiteDaoMixin {\n     val (result, debugCode) =\n           _maySeePostImpl(ThePost.Here(post), Some(requester), anyTx = None)\n     if (!result.may)\n-      throwIndistinguishableNotFound(s\"TyEM0REVTSK-$debugCode\")\n+      throwIndistinguishableNotFound(s\"TyEM0REVTSK-$debugCode\")  // [auz_banner_of_auhtor]\n   }\n \n "
    },
    {
      "sha": "2acbd2471b0ac4f65faaeb1fa1f83cbef08681f3",
      "filename": "appsv/server/talkyard/server/authz/ReqrAndTgt.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FReqrAndTgt.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FReqrAndTgt.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FReqrAndTgt.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -59,6 +59,10 @@ sealed trait AnyReqrAndTgt {\n   * \"Prin\" is an abbreviation for 1) \"principal\" and 2) \"principle\" — let's use \"prin\"?\n   * See: https://www.merriam-webster.com/dictionary/prin\n   *\n+  * This corresponds to Git's \"author\" and \"committer\". In Talkyard, the author\n+  * is the \"principal\" (well, \"target\" right now, to be renamed) and the committer\n+  * is \"requester\".\n+  *\n   * And RENAME this class to  ReqrAndPrin  for \"requester and principal\",\n   * and instead of \"tgt\", use \"prin\" everywhere. (It's ok to abbreviate\n   * more commonly used words, and \"principal\" will be \"everywhere\")\n@@ -109,6 +113,11 @@ object ReqrAndTgt {\n     this.apply(reqrInf.reqr, reqrInf.browserIdData, target = target)\n   }\n \n+  /** When the reqr does things on behalf of hanself. (Requester = principal/target.) */\n+  def self(reqr: Pat, browserIdData: BrowserIdData): ReqrAndTgt = {\n+    this.apply(reqr, browserIdData, target = reqr)\n+  }\n+\n   def apply(reqr: Pat, browserIdData: BrowserIdData, target: Pat): ReqrAndTgt = {\n     // Maybe move the checks in  UserDao._editMemberThrowUnlessSelfStaff()  to here?\n     // Then, things like  [vote_as_otr], [do_as_otr]  would get checked automatically everywhere,"
    },
    {
      "sha": "8e1de1eea0c530121099b5e31e84fbeb13629601",
      "filename": "appsv/server/talkyard/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -588,7 +588,7 @@ class PlainApiActions(\n       val isBanned = anyUserMaybeSuspended.exists(_.isBanned)\n       if (isBanned) {\n         return Future.successful(\n-              ForbiddenResult(\"TyEBANND\", \"Account banned\")\n+              ForbiddenResult(\"TyEBANND1\", \"Account banned\")\n                   .discardingCookies(DiscardingSessionCookies: _*))\n       }\n "
    },
    {
      "sha": "f97865c317ad66a4ed71a83f8a28c800e51650ba",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 26,
      "deletions": 6,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -41,6 +41,11 @@ enum ScrollToPreview {\n // let's just skip auto scrolling totally, for embedded comments? Simpler & safer.\n // Long term, seems an [inline_editor_and_preview] would work better, for\n // blog comments, and maybe optionally (for those who want) in forums too.\n+//\n+// UX: Or maybe always skip auto-scroll to preview? Isn't it more nice to see the post one\n+// is replying to. But then should probably open the split pane in-editor preview, so one\n+// sees how one's post will look (if the screen is wide enough). [show_split_pane_preview]\n+//\n const MaybeAutoPreview =\n         eds.isInIframe ? ScrollToPreview.No : ScrollToPreview.Auto;\n \n@@ -3006,6 +3011,7 @@ export const Editor = createFactory<any, EditorState>({\n     };\n \n     const scrollToPreviewProps = !thereIsAnInPagePreview ? {} : {\n+      className: 'c_E_PrvwTtl',\n       onMouseEnter: () => ReactActions.highlightPreview(true),\n       onMouseLeave: () => ReactActions.highlightPreview(false),\n       onClick: stopAutoPreview || scrollToPreviewOnce\n@@ -3036,10 +3042,19 @@ export const Editor = createFactory<any, EditorState>({\n           // the preview into view, if typing more text.\n           // And show the whole button (both \"Auto\" and \"show preview\") in a depressed state.\n           // If already auto scrolling, then, stop doing that (and render buttons as not depressed).\n-          LinkButton({ ...autoScrollProps, className: 'c_E_ScrAutoB' }, \"Auto\"), // I18N\n+          //\n+          // But skip if in an embedded comments section — on iOS, if auto scrolling to show\n+          // the preview, then, the editor scrolls in under the iOS keyboard, so you can't see\n+          // what you're typing. But if *not* embedded, then the editor and comment-being-\n+          // -previewed are in the same frame (namely the main window) and then this\n+          // doesn't happen. (Could do this only if iOS and embedded, but safer to just\n+          // check if we're embedded, in case the is-iOS check doesn't work?)\n+          eds.isInIframe ? null :\n+              LinkButton({ ...autoScrollProps, className: 'c_E_ScrAutoB' }, \"Auto\"), // I18N\n           // If clicking \"show preview\" part, scroll the preview into view just once.\n-          LinkButton({ ...scrollToPreviewProps, className: 's_E_ScrPrvwB' }, t.ShowPreview));\n-\n+          LinkButton({ ...scrollToPreviewProps, className: 's_E_ScrPrvwB' },\n+            rFr({}, r.span({ className: 's_E_ScrPrvwB_Scr2' }, \"Scroll to \"), \"preview\")));\n+                                                  // I18N was:  t.ShowPreview\n     let editorClasses = skipInEditorPreview ? 's_E-NoInEdPrvw' : 's_E-WithInEdPrvw';\n \n \n@@ -3128,10 +3143,15 @@ export const Editor = createFactory<any, EditorState>({\n                   primary: state.showMinimized, tabIndex: 3 },\n                 state.showMinimized ? t.e.ShowEditorAgain : t.e.Minimize),\n               Button({ onClick: this.togglePreview, id: 'esPreviewBtn', tabIndex: 2 },\n-                state.showOnlyPreview ? t.EditV : t.PreviewV),\n+                state.showOnlyPreview\n+                    ? rFr({},\n+                        r.span({ className: 'c_E_PrvB' }, t.EditV),\n+                        // If wide screen, so textarea & preview visible side by side, then,\n+                        // \"Hide preview\" makes more sense than \"Edit\", since\n+                        // is editing already.  [textarea_and_preview_both_visible]\n+                        r.span({ className: 'c_E_PrvB-Lg' }, \"Hide preview\")) // I18N\n+                    : t.PreviewV),\n               anyViewHistoryButton)),\n-            r.div({ className: 's_E_iPhoneKbd' },\n-              t.e.IPhoneKbdSpace_1, r.br(), t.e.IPhoneKbdSpace_2),\n \n             eds.isInEmbeddedEditor ? null :  // [RESEMBEDTR]\n               r.div({ className: 's_Resizor-Up', ref: 'resizeHandle' }),"
    },
    {
      "sha": "73f4da53f7d8e7b38c85313932ffcfb6450b8434",
      "filename": "client/app-editor/editor/editor.styl",
      "status": "modified",
      "additions": 151,
      "deletions": 34,
      "changes": 185,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.styl?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1,6 +1,13 @@\n \n $spaceForButtons = 46px;\n+\n $showPreviewMinWidth = 900px;\n+// It'd be nice to change this to 1100? when the editor is placed to the left — then it's\n+// much more narrow. But let's wait, complicated enough already. And if the page isn't\n+// somewhat wide, the Place-Left button isn't shown anyway right now.\n+// $eitherTextareaOrPreviewMaxWidth = 1100px; // ?\n+\n+$autoMaximizeEditorMaxWidth = 700px;\n $spacyButtonsMinWidth = 450px;\n $spacyYMinHeight = 400px;\n \n@@ -33,7 +40,7 @@ $spacyYMinHeight = 400px;\n   .form-group\n     margin-bottom: 0;\n \n-  @media (max-width: 700px)\n+  @media (max-width: 700px)  // is that $autoMaximizeEditorMaxWidth?\n     // Now don't list all stuff side by side, instead, one per row.\n     flex-direction: column;\n \n@@ -161,6 +168,7 @@ $scrollPreviewButtonPaddingTop = 6px;\n   box-shadow: 2px 2px 4px rgba(0, 0, 0, 47%);\n   margin: 0 0 5px 28px;\n   background: white;\n+  white-space: nowrap;\n   &.auto\n     position: relative;\n     top: 2px;\n@@ -178,22 +186,56 @@ $scrollPreviewButtonPaddingTop = 6px;\n .c_E_ScrAutoB,\n .s_E_ScrPrvwB\n   display: inline-block;\n-  padding: $scrollPreviewButtonPaddingTop 5px;\n+  padding: $scrollPreviewButtonPaddingTop 11px;\n   cursor: pointer;\n   background: inherit;\n   &, &:hover\n     color: #222;\n     text-decoration: none;\n \n+// The  [Auto|  half of the button.\n .c_E_ScrAutoB\n-  padding-left: 11px;\n+  padding-right: 3px;  // places _closer_to_other_half\n   border-right: 1px solid hsl(0 0% 95%) !important;\n \n-.s_E_ScrPrvwB\n-  padding-right: 11px;\n+// The  |scroll to preview]  half of the button.\n+.c_E_ScrAutoB + .s_E_ScrPrvwB\n+  // Lowercase 's':  [Auto|scroll to preview]  not:  [Auto|Scroll to preview].\n+  text-transform: lowercase;\n+  padding-left:  4px;  // places _closer_to_other_half\n+\n \n+// Tighter whitespace\n // ------------------------\n \n+tighterEditorTopButtons()\n+  .c_E_ScrPrvw,\n+  #debiki-editor-controller.s_E-NoInEdPrvw .s_DfSts\n+    margin-left: 10px;\n+  .c_E_ScrAutoB\n+    padding-left:  6px;\n+  .s_E_ScrPrvwB\n+    padding-right: 6px;\n+\n+// If editor placed to the left, and screen a bit narrow.\n+@media (max-width: 1350px)\n+  html.c_Html-EdLeft\n+    tighterEditorTopButtons()\n+\n+    // Change button title from:  [Auto|scroll to preview]  to just:  [Auto|preview].\n+    // It's a power user feature anyway, to place the editor to the left.\n+    // (Really small screens? Then, [auto_full_screen_editor], and the scroll-to-preview\n+    // button gets removed.)\n+    .c_E_ScrAutoB + .s_E_ScrPrvwB .s_E_ScrPrvwB_Scr2\n+      display: none;\n+\n+// If screen narrow.\n+@media (max-width: 650px)\n+  tighterEditorTopButtons()\n+\n+// ------------------------\n+\n+\n #debiki-editor-controller\n   position: fixed !important; // !important so jQuery.resizable() won't overwrite — what? but jQuery.resizable() is gone now (year 2020) since long.\n   top: initial;\n@@ -242,8 +284,9 @@ $scrollPreviewButtonPaddingTop = 6px;\n \n // On forum topic list pages, there's no in-page preview — instead, the preview\n // is inside the editor. Then, the editor needs more space, say, 60% instead of 45%:\n-// COULD UX: Make the editor horizontally resizable.\n-html.es-forum #debiki-editor-controller.c_E-PlaceLeft\n+html.es-forum #debiki-editor-controller.c_E-PlaceLeft,\n+// If split pane textarea & preview on a discussion page, then, need the same extra width.\n+#debiki-editor-controller.c_E-PlaceLeft.s_E-Prv\n   width: calc(100% * 0.60);  // [ed_left_width]\n \n \n@@ -254,15 +297,19 @@ html.es-watchbar-open #debiki-editor-controller\n     left: $watchbarWidth; // 230px;\n     // Seems `$watchbarWidth` won't get replaced inside calc!?\n     width: calc((100% - 230px) * 0.45);  // [ed_left_width]\n-    // Nothing to the right of the buttons (no preview).\n-    .submit-cancel-btns\n-      width: auto;\n     .esOpenWatchbarBtn\n       // Not needed; watchbar already open.\n       display: none;\n \n+// The editor can be a bit narrow, when placed to the left. So set the\n+// _editor_submit_preview_buttons_width to auto, so gets as wide as needed.\n+// Nothing to the right of the buttons (no preview).\n+#debiki-editor-controller.c_E-PlaceLeft .submit-cancel-btns\n+  width: auto;\n+\n // Extra wide, on topic list pages — but subtract the watchbar width.\n-html.es-watchbar-open.es-forum #debiki-editor-controller\n+html.es-watchbar-open.es-forum #debiki-editor-controller,  // or rm? [ed_prv_orig_splits]\n+html.es-watchbar-open #debiki-editor-controller.s_E-Prv\n   &.c_E-PlaceLeft\n     // Try using $watchbarWidth instead of 230, hmm.\n     width: calc((100% - 230px) * 0.60);  // [ed_left_width]\n@@ -280,6 +327,7 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       border: none !important;\n     // --- /dupl\n \n+  // Editor maximized and split horizontally (textarea above, preview below).\n   @media (min-width: $showPreviewMinWidth + 1)\n     &.s_E-SplitHz\n       .editor-area\n@@ -291,7 +339,11 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n         top: 35%;\n         bottom: $spaceForButtons + 3px;\n \n-  @media (max-width: $showPreviewMinWidth)\n+  // If the screen is narrow, we'll make the editor full screen, and reduce margins & paddings,\n+  // and disable some stuff that won't work on small screens (e.g. we'll remove\n+  // the split pane preview buttons `.esEdtr_cycleMaxHzBtn`).\n+  //\n+  @media (max-width: $autoMaximizeEditorMaxWidth)  // [auto_full_screen_editor]\n     top: 0;\n \n     // --- dupl [5KETW02]\n@@ -304,6 +356,7 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       border: none !important;\n     // --- /dupl\n \n+  @media (max-width: $showPreviewMinWidth)\n     .esEdtr_cycleMaxHzBtn\n       display: none;\n \n@@ -383,7 +436,9 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n     .s_E_DoingRow\n       position: relative; // why? can remove?\n       display: flex;\n+      flex-wrap: wrap;\n       align-items: baseline;\n+      padding-right: 32px; // some space for the [x] close editor button\n       @media (min-height: $spacyYMinHeight)\n         margin-bottom: 4px;\n \n@@ -418,6 +473,10 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n         &:focus\n           box-shadow: 0 1px 3px 2px hsl($uiHue, 100%, 79%);\n \n+    // Show _either_textarea_or_preview.\n+    //@media (max-width: $eitherTextareaOrPreviewMaxWidth)\n+    //  html.c_Html-EdLeft .preview-area\n+    //    theStuffBelow()  (the 3 lines)\n     @media (max-width: $showPreviewMinWidth)\n       width: 100%;\n       .editor-area-after-borders\n@@ -449,11 +508,24 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       background: white\n       overflow: auto\n \n+    // Show _either_textarea_or_preview.\n+    //@media (max-width: $eitherTextareaOrPreviewMaxWidth)\n+    //  html.c_Html-EdLeft .preview-area\n+    //    theStuffBelow()  (3 lines)\n     @media (max-width: $showPreviewMinWidth)\n       display: none;\n       width: 100%;\n-      bottom: $spaceForButtons;\n+      bottom: $spaceForButtons;  // also just below...\n \n+  // ... If the textarea is placed left, in split-textarea-preview mode, the editor might be\n+  // a bit narrow, so the bottom of the preview pane would overlap the rightmost part of\n+  // the Submit/Cancel/Hide-Preview buttons <div>. Therefore, make the preview a bit shorter.\n+  &.c_E-PlaceLeft .preview-area\n+    bottom: $spaceForButtons; // instead of 0\n+\n+  //@media (max-width: $eitherTextareaOrPreviewMaxWidth)\n+  //  html.c_Html-EdLeft .preview-area\n+  //    theStuffBelow()  (1 line display: ..)\n   .editor-area,\n   .preview-area\n     @media (min-width: $showPreviewMinWidth + 1)\n@@ -462,9 +534,19 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       display: block !important;\n \n   .submit-cancel-btns\n+    // This'll place the Preview button just to the left of the middle of the editor,\n+    // so when clicking, and the preview opens to the right (and the textarea will be to\n+    // the left), the button can stay in the same place (because the preview opens on the\n+    // 50% space to the right of the button), so we won't need to move the finger or mouse\n+    // to click the button again to hide the preview.\n+    // [_editor_submit_preview_buttons_width]\n     width: calc(50% - 10px);\n+    //@media (max-width: $eitherTextareaOrPreviewMaxWidth)\n+    //  html.c_Html-EdLeft .preview-area\n+    //    theStuffBelow()  (1 line width: ...)\n     @media (max-width: $showPreviewMinWidth)\n       width: 100%;\n+\n     position: absolute;\n     bottom: 3px;  // (8KAQF24)\n     @media (min-height: $spacyYMinHeight)\n@@ -482,15 +564,68 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       margin: 0;\n       @media (min-width: $spacyButtonsMinWidth)\n         margin-left: 5px;\n+    //@media (max-width: $eitherTextareaOrPreviewMaxWidth)\n+    //  html.c_Html-EdLeft .preview-area\n+    //    theStuffBelow()\n     @media (min-width: $showPreviewMinWidth + 1)\n-      #esPreviewBtn,\n+      // Let's try with these present always —  it's nice, actually, to be able to see an\n+      // in-editor preview too, if one want's to look a the post one replies to (while\n+      // seeing both the editor & preview simultaneously).\n+      // But we'll change the hide-preview title from \"Edit\" to \"Hide preview\", on\n+      // large screens (...-Lg) where the [textarea_and_preview_both_visible].\n+      #esPreviewBtn\n+        .c_E_PrvB\n+          display: none;\n+        .c_E_PrvB-Lg\n+          display: inline-block;\n       #esMinimizeBtn\n         display: none;\n \n   .view-edit-history\n     margin-left: 1em;\n     vertical-align: middle;\n \n+.c_E_PrvB-Lg\n+  display: none;\n+\n+// ----- Maximized editor\n+\n+// The scroll-to-in-page-preview button makes no sense, when the editor fills the whole window,\n+// since the page cannot be seen anyway (only the editor). The editor fills the whole window,\n+// if 1) it's maximized (also for embedded comments — the editor iframe gets maximized),\n+// or if 2) the window is narrow, then the editor gets auto maximized,\n+// unless in embedded comments.\n+\n+// But: `selectors, @media ..., more-selectors` doesn't seem to work. So, let's use this\n+// fn instead.\n+hideScrollButtons()\n+  .c_E_ScrPrvw\n+    display: none;\n+  // The replying to @username shouldn't be clickable either. Normally, clicking it,\n+  // scrolls to the post that person wrote and that you're replying to, but now the\n+  // editor fills the whole window.\n+  // And likewise, the \"Preview\" title shouldn't scroll to the preview.\n+  .s_E_DoingWhat a,\n+  .c_E_PrvwTtl\n+    pointer-events: none;\n+  .s_E_DoingWhat a .esP_By_U\n+  .c_E_PrvwTtl\n+    color: hsl(0 0% 25%) !important;\n+\n+.s_E-Max  // case 1 above\n+  hideScrollButtons()\n+\n+@media (max-width: $autoMaximizeEditorMaxWidth)  // case 2\n+  html:not(.dw-embedded-editor)\n+    hideScrollButtons()\n+\n+// When editor maximized (because of clicking the Maximize button, rather than the screen\n+// being small), there's a preview already, to the right, or below. So, no need for\n+// a Preview button.\n+.s_E-Max #esPreviewBtn\n+  display: none;\n+\n+// -----\n \n .s_DfSts\n   margin: 0 auto;  // places it in the middle, if flex layout\n@@ -565,27 +700,9 @@ html.mouse .rta__entity\n   @media (min-width: $spacyButtonsMinWidth)\n     display: inline;\n \n-.s_E_iPhoneKbd\n-  display: none;\n-\n-// iPhone is problematic, needs these special fixes.\n+// iPhone is problematic, needs these special fixes. Edit, year 2025: Now it works better,\n+// just one fix left, is it still needed?\n html.s_iphone\n-  .s_E-E\n-    // Leave lots of space for the keyboard. The iPhone keyboard doesn't trigger any resize event,\n-    // when appearing — it just covers the lower parts of the window, sometimes also the lower\n-    // parts of a <textarea>, making the lower parts impossible to edit (without canceling\n-    // the keyboard, scrolling down and opening it again).\n-    #editor-after-borders\n-      height: 73%;\n-\n-    .s_E_iPhoneKbd\n-      display: block;\n-      position: absolute;\n-      bottom: 25px;\n-      left: 30px;\n-      font-size: 14px;\n-      color: gray;\n-\n   // Prevent iPhone from zooming in on input fields — which it does if the font size is <= 16 px.\n   // Based on:\n   //   https://stackoverflow.com/questions/2989263/"
    },
    {
      "sha": "4a9d5f90104ad5176cccd185198a5efff993cf94",
      "filename": "client/app-slim/page/page.styl",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-slim%2Fpage%2Fpage.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-slim%2Fpage%2Fpage.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fpage.styl?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -185,19 +185,25 @@ html.c_Html-EdLeft\n     // @media (min-width: ???)\n     // then can hardcode left — since editor has max width.  [ed_left_max_width]\n \n-html.es-forum.c_Html-EdLeft\n+// On forum topic list pages, the editor gets 60% of the space, since\n+// now the editor includes the preview too (there's no page to show any\n+// in-page-preview in).\n+// And on discussion pages, if the user has clicked Preview (so that the textarea\n+// and preview are shown side by side, like on a topic list page).\n+html.c_Html-EdLeft:has(.s_E-Prv),\n+html.c_Html-EdLeft.es-forum   // or add .s_E-Prv also if topic list view? [ed_prv_orig_splits]\n   &:not(.es-watchbar-open)\n+    // Move both the topbar and the page itself to the right, to leave space\n+    // for the editor:\n     .s_Tb-Fxd,\n     #esPageColumn\n-      // On forum topic list pages, the editor gets 60% of the space, since\n-      // now the editor includes the preview too (there's no page to show any\n-      // in-page-preview in).\n       left: calc(100% * 0.60);  // [ed_left_width]\n \n+  // If the left sidebar is open, add its width:\n   &.es-watchbar-open\n     .s_Tb-Fxd,\n     #esPageColumn\n-      left: calc((100% - 230px) * 0.60 + 230px);  // [ed_left_width]\n+      left: calc((100% - 230px) * 0.60 + 230px);  // [ed_left_width] $watchbarWidth\n \n \n // Page width & padding"
    },
    {
      "sha": "03f432f513e4d9fe5334238f682667392ee75541",
      "filename": "client/app-slim/translations.d.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-slim%2Ftranslations.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/client%2Fapp-slim%2Ftranslations.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Ftranslations.d.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1075,9 +1075,6 @@ interface TalkyardTranslations {\n     ShowEditorAgain: string;\n     Minimize: string;\n \n-    IPhoneKbdSpace_1: string;\n-    IPhoneKbdSpace_2: string;\n-\n     PreviewInfo: string;\n     CannotType: string;\n "
    },
    {
      "sha": "ec2ce963addff38c401f69fb5ebf49a91c148aa7",
      "filename": "docs/abbreviations.txt",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Fabbreviations.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Fabbreviations.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fabbreviations.txt?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -265,6 +265,7 @@ Wro = wrong\n X   = extra\n Xl  = extra large (screen), also: Lg, Sm, Md\n Wb  = Watchbar\n+Wde = wide,  Nrw = narrow\n Wbhk = webhook\n Example: s_Whatever_SaveB = save button. Or s_SomethingElse_EmT = email addresses table.\n \n@@ -365,7 +366,7 @@ s_MvPD          = move post dialog\n \n s_NP            = No page, i.e. login-&-create-something-here stuff  RENAME to s_NPg\n \n-Nrw             = narrow\n+Nrw             = narrow,  Wde = wide\n \n   U             = user\n "
    },
    {
      "sha": "2be09aad0937e8d513fe01b33ec8ad73dc90fe8c",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -997,6 +997,10 @@ frame at the bottom of the browser window.\n iOS is especially annoying (from Ty's perspective), in that it can scroll [the textarea\n where you're typing] in under the iOS keyboard (although the textarea is\n position: fixed). [ios_bugs].\n+But now the iOS problems seems to be gone? And maybe it's pretty nice with the editor\n+frame after all, since can then see the post one is replying to, while typing.\n+Maybe, however:\n+[show_split_pane_preview] by default, if screen wide enough.\n \n [html_json] [nashorn_in_tx] [save_post_lns_mentions]\n Keep sanitized html in a json array with placeholders for site origin,"
    },
    {
      "sha": "c12c5a5dfa6a02617312cef266e72998c9faee9b",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -2,6 +2,8 @@ All End-to-End tests and where to find them\n ============================================\n \n Test ids: TyTE2E... = end-to-end test, TyTIT... = integration test.\n+Or why not just:  TyTE_ ... = e2e tests, TyTI_.. = intergration (e.g. AnonymAppSpec)\n+and TyTU_ .. = unit tests (usually not listed here though).\n \n RENAME this file to tests-map.txt\n \n@@ -1547,7 +1549,16 @@ spam: (4BKS0)\n           - spam-basic-akismet-false-negatives.2browsers.test.ts  TyT63MKWYT37\n           - spam-basic-safe-browsing-api-blocked.2browsers.test.ts  TyTSPSAFEBRAPI\n   ban spammer:\n+    who is a user:\n             - modn-ban-spammer.2br.f  TyTMODNBANSPM\n+    who is a guest:\n+            - TESTS_MISSING  [block_post_author_e2e_test]\n+                there's this though:  TyTI_TRUST_THREAT_LV.[mod_bans_guest_app_test]\n+\n+trust levels,\n+threat levels:\n+            - ThreatLevelsAppSpec  TyTI_TRUST_THREAT_LV\n+\n \n delete user:    NEXT was a bug, when deleted by admin\n   deletes henself:"
    },
    {
      "sha": "3e66da41d028602f60db47c81b478d405ba1638a",
      "filename": "modules/ty-translations",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules%2Fty-translations?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1 +1 @@\n-Subproject commit e31aafcc10e27deb3b047dc7dcba66504ed9f143\n+Subproject commit 3e66da41d028602f60db47c81b478d405ba1638a"
    },
    {
      "sha": "552818b54169e530e6843c8ff14690a4806f7bc5",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1 +1 @@\n-Subproject commit ca53d24d8de0a71a8597b7ec51fb4b8306d90d54\n+Subproject commit 552818b54169e530e6843c8ff14690a4806f7bc5"
    },
    {
      "sha": "8de3752edf1de8053eb49dd6beced71afbce1ad7",
      "filename": "tests/app/debiki/dao/ReviewStuffAppSuite.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fapp%2Fdebiki%2Fdao%2FReviewStuffAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fapp%2Fdebiki%2Fdao%2FReviewStuffAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FReviewStuffAppSuite.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -21,6 +21,7 @@ import scala.collection.Seq\n import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki.TitleSourceAndHtml\n+import talkyard.server.authz.ReqrAndTgt\n import org.scalatest.BeforeAndAfterAll\n import org.scalatest.freespec.AnyFreeSpec\n import org.scalatest.matchers.must\n@@ -66,12 +67,20 @@ class ReviewStuffAppSuite(randomString: String)\n       }\n     }\n \n+    RENAME // to replySkiqAuZ, maybe stop using?\n     def reply(memberId: UserId, text: String): InsertPostResult = {\n       dao.insertReplySkipAuZ(textAndHtmlMaker.testBody(text), thePageId,\n         replyToPostNrs = Set(PageParts.BodyNr), PostType.Normal, deleteDraftNr = None,\n         Who(memberId, browserIdData), dummySpamRelReqStuff)\n     }\n \n+    def replyIfAuZ(author: Pat, text: String): InsertPostResult = {\n+      dao.insertReplyIfAuZ(textAndHtmlMaker.testBody(text), thePageId,\n+            replyToPostNrs = Set(PageParts.BodyNr), PostType.Normal, deleteDraftNr = None,\n+            reqrAndReplyer = ReqrAndTgt.self(author, BrowserIdData.Test),\n+            dummySpamRelReqStuff)\n+    }\n+\n     def approveButUndo(reviewTask: ReviewTask): Unit = {\n       dao.makeReviewDecisionIfAuthz(reviewTask.id, whoAdmin, anyRevNr = Some(FirstRevisionNr),\n         ReviewDecision.Accept)"
    },
    {
      "sha": "87e9cfa87fbb418ed0f688e9cb661a742da1eefc",
      "filename": "tests/app/debiki/dao/ThreatLevelsAppSpec.scala",
      "status": "modified",
      "additions": 67,
      "deletions": 8,
      "changes": 75,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fapp%2Fdebiki%2Fdao%2FThreatLevelsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fapp%2Fdebiki%2Fdao%2FThreatLevelsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FThreatLevelsAppSpec.scala?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -19,13 +19,15 @@ package debiki.dao\n \n import scala.collection.Seq\n import com.debiki.core._\n+import talkyard.server.authz.{ReqrAndTgt, StaffReqrAndTgt}\n \n \n-class ThreatLevelsAppSpec extends ReviewStuffAppSuite(\"6gp4\") {\n+// RENAME to BlockAndBanAppSpec?\n+class ThreatLevelsAppSpec extends ReviewStuffAppSuite(\"6gp4\") {  // TyTI_TRUST_THREAT_LV\n \n   override def nestedSuites = Vector(\n     new NestedPostsSuite {\n-      override def beforeAll: Unit = {\n+      override def beforeAll(): U = {\n         dao.saveSiteSettings(SettingsToSave(\n           orgFullName = Some(Some(\"Test Org Name\")),\n           maxPostsPendApprBefore = Some(Some(0)),\n@@ -71,10 +73,18 @@ class ThreatLevelsAppSpec extends ReviewStuffAppSuite(\"6gp4\") {\n         checkNoReviewTask(post)\n       }\n \n+      def makeModReqr(): StaffReqrAndTgt =\n+        ReqrAndTgt.self(theAdmin, BrowserIdData.Test).denyUnlessStaff()\n+\n+      def makeGuest(): Guest =\n+        dao.loginAsGuest(GuestLoginAttempt(ip = \"3.4.5.6\",\n+              date = globals.now().toJavaDate, name = \"A Guest\",\n+              email = \"aguest@email.co\", \"guestBrId-2480437\"))\n+\n+\n       \"guest, mild and moderate threat level: comments are added to the moderation queue\" in {\n-        val guest = dao.loginAsGuest(GuestLoginAttempt(ip = \"3.4.5.6\",\n-          date = globals.now().toJavaDate, name = \"A Guest\", email = \"aguest@email.co\",\n-          \"guestBrId-2480437\"))\n+        val modSelf = makeModReqr()\n+        val guest = makeGuest()\n \n         info(\"guests may post replies, the first 2 are always queued for review\") // [4JKFWP4]\n         var post = reply(guest.id, \"reply_63502_a_1\").post\n@@ -88,21 +98,21 @@ class ThreatLevelsAppSpec extends ReviewStuffAppSuite(\"6gp4\") {\n         checkNoReviewTask(post)\n \n         info(\"mild threat guest –> review after\")\n-        dao.blockGuest(post.id, numDays = -1, ThreatLevel.MildThreat, theAdmin.id)\n+        dao.blockGuestIfAuZ(post.id, ThreatLevel.MildThreat, modSelf)\n         post = reply(guest.id, \"reply_63502_b\").post\n         post.approvedById mustBe Some(SystemUserId)\n         checkReviewTaskGenerated(post, Seq(ReviewReason.IsByThreatUser))\n \n         info(\"moderate threat guest –> review before\")\n         dao.unblockGuest(post.id, theAdmin.id) // for now, else unique key error in db [6YF42]\n-        dao.blockGuest(post.id, numDays = -1, ThreatLevel.ModerateThreat, theAdmin.id)\n+        dao.blockGuestIfAuZ(post.id, ThreatLevel.ModerateThreat, modSelf)\n         post = reply(guest.id, \"reply_63502_c\").post\n         post.approvedById mustBe None\n         checkReviewTaskGenerated(post, Seq(ReviewReason.IsByThreatUser))\n \n         info(\"severe threat –> forbidden\")\n         dao.unblockGuest(post.id, theAdmin.id) // for now, else unique key error in db [6YF42]\n-        dao.blockGuest(post.id, numDays = -1, ThreatLevel.SevereThreat, theAdmin.id)\n+        dao.blockGuestIfAuZ(post.id, ThreatLevel.SevereThreat, modSelf)\n         intercept[Exception]{\n           reply(guest.id, \"reply_02844_d\").post\n         }.getMessage must include(\"EsE5Y80G2_\")\n@@ -113,6 +123,55 @@ class ThreatLevelsAppSpec extends ReviewStuffAppSuite(\"6gp4\") {\n         post.approvedById mustBe Some(SystemUserId)\n         checkNoReviewTask(post)\n       }\n+\n+      \"ban user\" in {\n+        val modSelf = makeModReqr()\n+        val modId = modSelf.reqr.id\n+        val user = createPasswordUser(s\"mem_60258\", dao)\n+\n+        info(\"user posts two replies\")\n+        val post1 = reply(user.id, \"reply_70326_a\").post\n+        post1.approvedById mustBe Some(SystemUserId)\n+        checkNoReviewTask(post1)\n+        val post2 = reply(user.id, \"reply_70326_b\").post\n+        post2.approvedById mustBe Some(SystemUserId)\n+        checkNoReviewTask(post2)\n+\n+        info(\"mod bans user\")\n+        dao.writeTx { (tx, ss) =>\n+          dao.banAuthorOf(post2, reason = \"Didn't pat my cat\", bannedById = modId)(tx, ss)\n+        }\n+\n+        info(\"user can't post more posts\")\n+        intercept[Exception]{\n+          replyIfAuZ(user, \"reply_70326_c\").post\n+        }.getMessage must include(\"TyEM0REPLY1-TyEM0RE_SUSP\")\n+      }\n+\n+      \"ban guest\" in {\n+        val modSelf = makeModReqr()\n+        val guest = makeGuest()\n+\n+        info(\"guests posts two replies\") // [4JKFWP4]\n+        val post1 = reply(guest.id, \"reply_73061_a_1\").post\n+        post1.approvedById mustBe Some(SystemUserId)\n+        checkNoReviewTask(post1)\n+        val post2 = reply(guest.id, \"reply_73061_a_2\").post\n+        post2.approvedById mustBe Some(SystemUserId)\n+        checkNoReviewTask(post2)\n+\n+        // This will not, though, auto delete post1. But review decision\n+        // ReviewDecision.DeleteAndBanSpammer would do that. (That'd be another test spec.)\n+        info(\"mod bans guest\")  // [mod_bans_guest_app_test]\n+        dao.writeTx { (tx, ss) =>\n+          dao.banAuthorOf(post2, reason = \"Upset my cat\", bannedById = modSelf.reqr.id)(tx, ss)\n+        }\n+\n+        info(\"guest forbidden to post more posts\")\n+        intercept[Exception]{\n+          replyIfAuZ(guest, \"reply_73061_a_3\").post\n+        }.getMessage must include(\"EsE5Y80G2_\")\n+      }\n     })\n \n }"
    },
    {
      "sha": "8946ec206c1956967e3f07804e78a75f6baa8808",
      "filename": "tests/e2e-wdio7/specs/modn-ban-spammer.2br.f.e2e.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fmodn-ban-spammer.2br.f.e2e.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -232,7 +232,7 @@ describe(`modn-ban-spammer.2br.f  TyTMODNBANSPM`, () => {\n     await maria_brB.loginDialog.loginWithPassword(maria, { resultInError: true });\n   });\n   it(`... an error dialog says \"Banned\"`, async () => {\n-    await maria_brB.serverErrorDialog.waitForBannedError();\n+    await maria_brB.serverErrorDialog.waitForBannedError('WhenLoggingIn');\n   });\n \n \n@@ -289,7 +289,7 @@ describe(`modn-ban-spammer.2br.f  TyTMODNBANSPM`, () => {\n     await merche_brB.loginDialog.loginWithPassword(merche, { resultInError: true });\n   });\n   it(`... an error dialog says \"Banned\"`, async () => {\n-    await merche_brB.serverErrorDialog.waitForBannedError();\n+    await merche_brB.serverErrorDialog.waitForBannedError('WhenLoggingIn');\n   });\n \n \n@@ -369,7 +369,7 @@ describe(`modn-ban-spammer.2br.f  TyTMODNBANSPM`, () => {\n     await mallory_brB.loginDialog.loginWithPassword(mallory, { resultInError: true });\n   });\n   it(`... an error dialog says \"Banned\"`, async () => {\n-    await mallory_brB.serverErrorDialog.waitForBannedError();\n+    await mallory_brB.serverErrorDialog.waitForBannedError('WhenLoggingIn');\n   });\n \n   // Angry Elk's reply to Mallory doesn't get deleted, and it's still in the"
    },
    {
      "sha": "32143469f1c5f2b2d72d4b7855c33e4add6d0d30",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -10371,8 +10371,13 @@ export class TyE2eTestBrowser {\n         await this.waitUntilTextMatches('.s_SED_Msg', 'TyESUSPENDED_|TyE0LGDIN_');\n       },\n \n-      waitForBannedError: async () => {\n-        await this.waitUntilTextMatches('.s_SED_Msg', 'banned.*TyEBANND');\n+      waitForBannedError: async (when?: 'WhenLoggingIn') => {\n+        const msgRegex = (() => {\n+          switch (when) {\n+            case 'WhenLoggingIn': return 'Account banned.*TyEBANND0_';\n+            default:              return 'banned.*TyEBANND1';\n+        }})();\n+        await this.waitUntilTextMatches('.s_SED_Msg', msgRegex);\n       },\n \n       dismissReloadPageAlert: async () => {"
    },
    {
      "sha": "c3e71b1e170af2b093f40f6b8a949bb48239cbc0",
      "filename": "tests/e2e-wdio7/utils/utils.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/tests%2Fe2e-wdio7%2Futils%2Futils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Futils.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -324,7 +324,10 @@ talkyardAuthnToken = ${JSON.stringify(ps.authnToken)};\n     let resultHtmlStr = `\n <!DOCTYPE html>\n <html>\n-<head><title>Embedded comments E2E test</title></head>\n+<head>\n+<title>Embedded comments E2E test</title>\n+<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+</head>\n <body style=\"background: ${ps.bgColor || 'black'}; color: ${ps.color || '#ccc'}; font-family: monospace; font-weight: bold;\">\n <p>Embedded comments E2E test page \"${ps.pageName}\".<br>\n Discussion id: \"${ps.discussionId || ''}\"${ieEmpty}.<br>\n@@ -405,6 +408,7 @@ talkyardAuthnToken = ${JSON.stringify(ps.authnToken)};\n <html>\n <head>\n <title>Embedded comments many iframes E2E test</title>\n+<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n <style>\n body { background: ${ps.bgColor || 'black'}; color: ${ps.color || '#ccc'}; font-family: monospace; }\n iframe { margin: 15px 0 25px; }\n@@ -443,6 +447,7 @@ export function makeBlogPostIndexPageHtml(ps: { localHostname?: St, urlA: St, ur\n         <html>\n         <head>\n         <title>Embedded comments E2E test</title>\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n         <style>a { color: white }</style>\n         </head>\n         <body style=\"background: #000; color: #bbb; font-family: monospace;\">"
    },
    {
      "sha": "32d3b58772382c83bf2e88da15f2c4fc83cf5d6f",
      "filename": "translations/en_US/i18n.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fen_US%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fen_US%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fen_US%2Fi18n.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1233,9 +1233,6 @@ var t_en_US: TalkyardTranslations = t = {\n     ShowEditorAgain: \"Show editor again\",\n     Minimize: \"Minimize\",\n \n-    IPhoneKbdSpace_1: \"(This gray space is reserved\",\n-    IPhoneKbdSpace_2: \"for the iPhone keyboard.)\",\n-\n     PreviewInfo: \"Here you can preview how your post will look.\",\n     CannotType: \"You cannot type here.\",\n "
    },
    {
      "sha": "1b49dec524b251056c015745b0887630b358c735",
      "filename": "translations/pt_BR/i18n.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fpt_BR%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fpt_BR%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fpt_BR%2Fi18n.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1224,9 +1224,6 @@ var t_pt_BR: TalkyardTranslations = t = {\n     ShowEditorAgain: \"Mostrar editor novamente\",\n     Minimize: \"Minimizar\",\n \n-    IPhoneKbdSpace_1: \"(Este espaço cinza está reservado\",\n-    IPhoneKbdSpace_2: \"para o teclado do iPhone.)\",\n-\n     PreviewInfo: \"Aqui você pode pré-visualizar como seu post vai ficar.\",\n     CannotType: \"Você não pode digitar aqui.\",\n "
    },
    {
      "sha": "06e5e7ccbedf79ed693b556fd05302a929168fcc",
      "filename": "translations/ru_RU/i18n.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fru_RU%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fru_RU%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fru_RU%2Fi18n.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1223,9 +1223,6 @@ var t_ru_RU: TalkyardTranslations = t = {\n     ShowEditorAgain: \"Показать редактор снова\",\n     Minimize: \"Минимизировать\",\n \n-    IPhoneKbdSpace_1: \"(Это серое пространство зарезервировано\",\n-    IPhoneKbdSpace_2: \"для клавиатуры iPhone.)\",\n-\n     PreviewInfo: \"Здесь вы можете просмотреть, как будет выглядеть ваш пост.\",\n     CannotType: \"Вы не можете здесь печатать.\",\n "
    },
    {
      "sha": "a3128b20e2845552916ebe472f5d9766994b12e8",
      "filename": "translations/sv_SE/i18n.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fsv_SE%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/translations%2Fsv_SE%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fsv_SE%2Fi18n.ts?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1221,9 +1221,6 @@ var t_sv_SE: TalkyardTranslations = t = {\n     ShowEditorAgain: \"Visa editor istället\",\n     Minimize: \"Minimera\",\n \n-    IPhoneKbdSpace_1: \"(This gray space is reserved\",\n-    IPhoneKbdSpace_2: \"for the iPhone keyboard.)\",\n-\n     PreviewInfo: \"Här kan du förhandsgranska din text.\",\n     CannotType: \"Du kan inte skriva här.\",\n "
    },
    {
      "sha": "2f473e51162b2fe5b0c55df1f82d07bad7a26b53",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -1 +1 @@\n-v0.2025.004\n+v0.2025.005"
    },
    {
      "sha": "3ced3426b877a05bf7eb4820d631c58d63e6c6f2",
      "filename": "wip/aliases/wip.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/7a67282090228d9d591093f8a11a6a67f0d3e6e7/wip%2Faliases%2Fwip.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/7a67282090228d9d591093f8a11a6a67f0d3e6e7/wip%2Faliases%2Fwip.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/wip%2Faliases%2Fwip.txt?ref=7a67282090228d9d591093f8a11a6a67f0d3e6e7",
      "patch": "@@ -61,6 +61,7 @@ Left to do\n -----------------------\n \n Now:\n+  - [How_block_anons]?  or/and [block_true_user] from creating new anons?\n   - Save persona mode in ... localStorage? Cookie? [remember_persona_mode]\n   - [hide_peoples_dates]  [deanon_risk]\n   - Notifications: List notifications to all one's aliases (anonyms & pseudonyms),"
    }
  ]
}
