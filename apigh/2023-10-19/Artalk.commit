{
  "sha": "0f35532f0ba404ca37420c2485de1dee1ca7c006",
  "node_id": "C_kwDOCQOkhNoAKDBmMzU1MzJmMGJhNDA0Y2EzNzQyMGMyNDg1ZGUxZGVlMWNhN2MwMDY",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2023-10-17T12:11:47Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2023-10-17T12:11:47Z"
    },
    "message": "refactor(editor): refactor plug kit and events (#613)",
    "tree": {
      "sha": "1639e35f87e8bb14c3167d317530a98bf2f82d0f",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/1639e35f87e8bb14c3167d317530a98bf2f82d0f"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/0f35532f0ba404ca37420c2485de1dee1ca7c006",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlLnoDCRBK7hj4Ov3rIwAAHpUIAI+wEHzmqdfIbmF3tsfAJOvL\nKzQMDJpPg1EJZJseU+zEbs4XuthSEbFudmUFP5BTDX9OKpe2D0CYjAbaMuM3r3Dt\nLHgrryKowgvlAENDIvMCqiP1Eb3ep3+YCkpU+yy/3JNG9gObKYEAGbib28+nYkDi\nlJk6OVlvWhmLBG8k7gph7TGzgkWjMWshS4U66sBTk5cEPAJngsKyyHNLnJiPDmKX\njEOdJwqWKvU90Qe190eaj8jq764ABqElpYMD0qXMTvchOGxgKdRM09WiAvl/iZwD\n24srutR4RhpcXuMmpY/mx8dwqrZhw/VWXBXiOBJ+TO5iFDYMSIdcWCYd+vmCAk0=\n=QiW6\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 1639e35f87e8bb14c3167d317530a98bf2f82d0f\nparent d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1697544707 +0800\ncommitter GitHub <noreply@github.com> 1697544707 +0800\n\nrefactor(editor): refactor plug kit and events (#613)\n\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/0f35532f0ba404ca37420c2485de1dee1ca7c006",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/0f35532f0ba404ca37420c2485de1dee1ca7c006",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/0f35532f0ba404ca37420c2485de1dee1ca7c006/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/d21e47f881d722b08b2b6a5b41b6a18ba1c2b8ad"
    }
  ],
  "stats": {
    "total": 830,
    "additions": 431,
    "deletions": 399
  },
  "files": [
    {
      "sha": "65634de1e9c1b8482a95bf66ae03a874723e790f",
      "filename": "ui/packages/artalk/src/editor/core/_sample-plug.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2F_sample-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2F_sample-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2F_sample-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,8 +1,8 @@\n-import Editor from '../editor'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class SamplePlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n   }\n }"
    },
    {
      "sha": "3b78c20530bd3921a2749ab7a7eab8f464bef084",
      "filename": "ui/packages/artalk/src/editor/core/closable-plug.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fclosable-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fclosable-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fclosable-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,31 +1,32 @@\n import User from '@/lib/user'\n import * as Utils from '@/lib/utils'\n-import Editor from '../editor'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class ClosablePlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n   }\n \n   close() {\n-    if (!this.editor.getUI().$textareaWrap.querySelector('.atk-comment-closed'))\n-      this.editor.getUI().$textareaWrap.prepend(Utils.createElement(`<div class=\"atk-comment-closed\">${this.editor.$t('onlyAdminCanReply')}</div>`))\n+    if (!this.kit.useUI().$textareaWrap.querySelector('.atk-comment-closed'))\n+      this.kit.useUI().$textareaWrap.prepend(Utils.createElement(`<div class=\"atk-comment-closed\">${$t('onlyAdminCanReply')}</div>`))\n \n     if (!User.data.isAdmin) {\n-      this.editor.getUI().$textarea.style.display = 'none'\n-      this.editor.getPlugs()?.closePlugPanel()\n-      this.editor.getUI().$bottom.style.display = 'none'\n+      this.kit.useUI().$textarea.style.display = 'none'\n+      this.kit.useEvents().trigger('panel-close')\n+      this.kit.useUI().$bottom.style.display = 'none'\n     } else {\n       // 管理员一直打开评论\n-      this.editor.getUI().$textarea.style.display = ''\n-      this.editor.getUI().$bottom.style.display = ''\n+      this.kit.useUI().$textarea.style.display = ''\n+      this.kit.useUI().$bottom.style.display = ''\n     }\n   }\n \n   open() {\n-    this.editor.getUI().$textareaWrap.querySelector('.atk-comment-closed')?.remove()\n-    this.editor.getUI().$textarea.style.display = ''\n-    this.editor.getUI().$bottom.style.display = ''\n+    this.kit.useUI().$textareaWrap.querySelector('.atk-comment-closed')?.remove()\n+    this.kit.useUI().$textarea.style.display = ''\n+    this.kit.useUI().$bottom.style.display = ''\n   }\n }"
    },
    {
      "sha": "eeda2c8897f4881059d8adc11ebc90aa1c341ccb",
      "filename": "ui/packages/artalk/src/editor/core/edit-plug.ts",
      "status": "modified",
      "additions": 25,
      "deletions": 24,
      "changes": 49,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fedit-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fedit-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fedit-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,7 +1,8 @@\n import type { CommentData } from '~/types/artalk-data'\n-import * as Utils from '../../lib/utils'\n-import Editor from '../editor'\n-import User from '../../lib/user'\n+import $t from '@/i18n'\n+import * as Utils from '@/lib/utils'\n+import User from '@/lib/user'\n+import PlugKit from '../plug-kit'\n import EditorPlug from '../editor-plug'\n import SubmitPlug from './submit-plug'\n import MoverPlug from './mover-plug'\n@@ -17,43 +18,43 @@ export default class EditPlug extends EditorPlug {\n     return !!this.comment\n   }\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     this.kit.useMounted(() => {\n-      const submitPlug = this.editor.getPlugs()?.get(SubmitPlug)\n+      const submitPlug = this.kit.useDeps(SubmitPlug)\n       if (!submitPlug) throw Error(\"SubmitPlug not initialized\")\n \n       submitPlug.registerCustom({\n         activeCond: () => !!this.comment, // active this custom submit when edit mode\n         req: async () => {\n           const saveData = {\n-            content: this.editor.getContentFinal(),\n-            nick: this.editor.getUI().$nick.value,\n-            email: this.editor.getUI().$email.value,\n-            link: this.editor.getUI().$link.value,\n+            content: this.kit.useEditor().getContentFinal(),\n+            nick: this.kit.useUI().$nick.value,\n+            email: this.kit.useUI().$email.value,\n+            link: this.kit.useUI().$link.value,\n           }\n-          const nComment = await this.editor.ctx.getApi().comment.commentEdit({\n+          const nComment = await this.kit.useApi().comment.commentEdit({\n             ...this.comment, ...saveData\n           })\n           return nComment\n         },\n         post: (nComment: CommentData) => {\n-          this.editor.ctx.updateComment(nComment)\n+          this.kit.useGlobalCtx().updateComment(nComment)\n         }\n       })\n     })\n   }\n \n   edit(comment: CommentData, $comment: HTMLElement) {\n     this.cancelEdit()\n-    this.editor.cancelReply()\n+    this.kit.useEditor().cancelReply()\n \n-    const ui = this.editor.getUI()\n+    const ui = this.kit.useUI()\n     if (!ui.$editCancelBtn) {\n       const $btn = Utils.createElement(\n         `<div class=\"atk-send-reply\">` +\n-          `${this.editor.$t('editCancel')} ` +\n+          `${$t('editCancel')} ` +\n           `<span class=\"atk-cancel\">×</span>` +\n         `</div>`\n       )\n@@ -67,37 +68,37 @@ export default class EditPlug extends EditorPlug {\n \n     ui.$header.style.display = 'none' // TODO support modify header information\n \n-    this.editor.getPlugs()?.get(MoverPlug)?.move($comment)\n+    this.kit.useDeps(MoverPlug)?.move($comment)\n \n     ui.$nick.value = comment.nick || ''\n     ui.$email.value = comment.email || ''\n     ui.$link.value = comment.link || ''\n \n-    this.editor.setContent(comment.content)\n+    this.kit.useEditor().setContent(comment.content)\n     ui.$textarea.focus()\n \n-    this.updateSubmitBtnText(this.editor.$t('save'))\n+    this.updateSubmitBtnText($t('save'))\n   }\n \n   cancelEdit() {\n     if (!this.comment) return\n \n-    const ui = this.editor.getUI()\n+    const ui = this.kit.useUI()\n \n     if (ui.$editCancelBtn) {\n       ui.$editCancelBtn.remove()\n       ui.$editCancelBtn = undefined\n     }\n \n     this.comment = undefined\n-    this.editor.getPlugs()?.get(MoverPlug)?.back()\n+    this.kit.useDeps(MoverPlug)?.back()\n \n     const { nick, email, link } = User.data\n     ui.$nick.value = nick\n     ui.$email.value = email\n     ui.$link.value = link\n \n-    this.editor.setContent('')\n+    this.kit.useEditor().setContent('')\n     this.restoreSubmitBtnText()\n \n     ui.$header.style.display = '' // TODO support modify header information\n@@ -110,11 +111,11 @@ export default class EditPlug extends EditorPlug {\n   private originalSubmitBtnText = 'Send'\n \n   private updateSubmitBtnText(text: string) {\n-    this.originalSubmitBtnText = this.editor.getUI().$submitBtn.innerText\n-    this.editor.getUI().$submitBtn.innerText = text\n+    this.originalSubmitBtnText = this.kit.useUI().$submitBtn.innerText\n+    this.kit.useUI().$submitBtn.innerText = text\n   }\n \n   private restoreSubmitBtnText() {\n-    this.editor.getUI().$submitBtn.innerText = this.originalSubmitBtnText\n+    this.kit.useUI().$submitBtn.innerText = this.originalSubmitBtnText\n   }\n }"
    },
    {
      "sha": "c5e89a99302997a007515fcf8b58700d27389000",
      "filename": "ui/packages/artalk/src/editor/core/header-input-plug.ts",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-input-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,24 +1,23 @@\n-import Editor from '../editor'\n-import User from '../../lib/user'\n+import User from '@/lib/user'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class HeaderInputPlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n-    this.kit.useHeaderInput((key, $input) => {\n-      if (key === 'nick' || key === 'email') {\n+    this.kit.useEvents().on('header-input', (({ field, $input }) => {\n+      if (field === 'nick' || field === 'email')\n         this.fetchUserInfo()\n-      }\n-    })\n+    }))\n \n     const onLinkInputChange = () => this.onLinkInputChange()\n \n     this.kit.useMounted(() => {\n-      this.editor.getUI().$link.addEventListener('change', onLinkInputChange)\n+      this.kit.useUI().$link.addEventListener('change', onLinkInputChange)\n     })\n     this.kit.useUnmounted(() => {\n-      this.editor.getUI().$link.addEventListener('change', onLinkInputChange)\n+      this.kit.useUI().$link.addEventListener('change', onLinkInputChange)\n     })\n   }\n \n@@ -38,7 +37,7 @@ export default class HeaderInputPlug extends EditorPlug {\n     this.queryUserInfo.timeout = window.setTimeout(() => {\n       this.queryUserInfo.timeout = null // 清理\n \n-      const {req, abort} = this.editor.ctx.getApi().user.userGet(\n+      const {req, abort} = this.kit.useApi().user.userGet(\n         User.data.nick, User.data.email\n       )\n       this.queryUserInfo.abortFunc = abort\n@@ -48,19 +47,19 @@ export default class HeaderInputPlug extends EditorPlug {\n         }\n \n         // 未读消息更新\n-        this.editor.ctx.updateNotifies(data.unread)\n+        this.kit.useGlobalCtx().updateNotifies(data.unread)\n \n         // 若用户为管理员，执行登陆操作\n         if (User.checkHasBasicUserInfo() && !data.is_login && data.user?.is_admin) {\n           // 显示登录窗口\n-          this.editor.ctx.checkAdmin({\n+          this.kit.useGlobalCtx().checkAdmin({\n             onSuccess: () => {}\n           })\n         }\n \n         // 自动填入 link\n         if (data.user && data.user.link) {\n-          this.editor.getUI().$link.value = data.user.link\n+          this.kit.useUI().$link.value = data.user.link\n           User.update({ link: data.user.link })\n         }\n       })\n@@ -73,10 +72,10 @@ export default class HeaderInputPlug extends EditorPlug {\n \n   private onLinkInputChange() {\n     // Link URL 自动补全协议\n-    const link = this.editor.getUI().$link.value.trim()\n+    const link = this.kit.useUI().$link.value.trim()\n     if (!!link && !/^(http|https):\\/\\//.test(link)) {\n-      this.editor.getUI().$link.value = `https://${link}`\n-      User.update({ link: this.editor.getUI().$link.value })\n+      this.kit.useUI().$link.value = `https://${link}`\n+      User.update({ link: this.kit.useUI().$link.value })\n     }\n   }\n }"
    },
    {
      "sha": "e73f90464750e89c01d98493c532f6328d26b781",
      "filename": "ui/packages/artalk/src/editor/core/header-plug.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fheader-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,32 +1,34 @@\n import User from '@/lib/user'\n+import $t from '@/i18n'\n import Editor from '../editor'\n import EditorPlug from '../editor-plug'\n import EditPlug from './edit-plug'\n+import PlugKit from '../plug-kit'\n \n export default class HeaderPlug extends EditorPlug {\n   private get $inputs() {\n-    return this.editor.getHeaderInputEls()\n+    return this.kit.useEditor().getHeaderInputEls()\n   }\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     const inputEventFns: {[name: string]: () => void} = {}\n \n     // the input event\n     const onInput = ($input: HTMLInputElement, key: string) => () => {\n-      if (editor.getPlugs()?.get(EditPlug)?.getIsEditMode()) return // 评论编辑模式，不修改个人信息\n+      if (this.kit.useDeps(EditPlug)?.getIsEditMode()) return // 评论编辑模式，不修改个人信息\n \n       User.update({ [key]: $input.value.trim() })\n \n       // trigger header input event\n-      editor.getPlugs()?.triggerHeaderInputEvt(key, $input)\n+      this.kit.useEvents().trigger('header-input', { field: key, $input })\n     }\n \n     this.kit.useMounted(() => {\n       // set placeholder and sync header input value\n       Object.entries(this.$inputs).forEach(([key, $input]) => {\n-        $input.placeholder = `${editor.$t(key as any)}`\n+        $input.placeholder = `${$t(key as any)}`\n         $input.value = User.data[key] || ''\n       })\n "
    },
    {
      "sha": "2ba7e298fcb50e59b240fde2e91b1f7aa1846284",
      "filename": "ui/packages/artalk/src/editor/core/local-storage-plug.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Flocal-storage-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Flocal-storage-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Flocal-storage-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,31 +1,32 @@\n-import Editor from '../editor'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n const LocalStorageKey = 'ArtalkContent'\n \n export default class LocalStoragePlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     this.kit.useMounted(() => {\n       // load editor content from localStorage when init\n       const localContent = window.localStorage.getItem(LocalStorageKey) || ''\n       if (localContent.trim() !== '') {\n-        editor.showNotify(editor.$t('restoredMsg'), 'i')\n-        editor.setContent(localContent)\n+        this.kit.useEditor().showNotify($t('restoredMsg'), 'i')\n+        this.kit.useEditor().setContent(localContent)\n       }\n     })\n \n     this.kit.useUnmounted(() => {\n     })\n \n-    this.kit.useContentUpdated(() => {\n+    this.kit.useEvents().on('content-updated', () => {\n       this.save()\n     })\n   }\n \n   // Save editor content to localStorage\n   public save() {\n-    window.localStorage.setItem(LocalStorageKey, this.editor.getContentRaw().trim())\n+    window.localStorage.setItem(LocalStorageKey, this.kit.useEditor().getContentRaw().trim())\n   }\n }"
    },
    {
      "sha": "d9ca00337191d06e0cbb9f8ff7970951597fd9ca",
      "filename": "ui/packages/artalk/src/editor/core/mover-plug.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fmover-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fmover-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fmover-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,19 +1,19 @@\n-import Editor from '../editor'\n-import * as Utils from '../../lib/utils'\n+import * as Utils from '@/lib/utils'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class MoverPlug extends EditorPlug {\n   private isMoved = false\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n   }\n \n   move(afterEl: HTMLElement) {\n     if (this.isMoved) return\n     this.isMoved = true\n \n-    const editorEl = this.editor.getUI().$el\n+    const editorEl = this.kit.useUI().$el\n \n     editorEl.after(Utils.createElement('<div class=\"atk-editor-travel-placeholder\"></div>'))\n \n@@ -27,8 +27,8 @@ export default class MoverPlug extends EditorPlug {\n   back() {\n     if (!this.isMoved) return\n     this.isMoved = false\n-    this.editor.ctx.$root.querySelector('.atk-editor-travel-placeholder')?.replaceWith(this.editor.getUI().$el)\n+    this.kit.useGlobalCtx().$root.querySelector('.atk-editor-travel-placeholder')?.replaceWith(this.kit.useUI().$el)\n \n-    this.editor.cancelReply()  // 取消回复\n+    this.kit.useEditor().cancelReply()  // 取消回复\n   }\n }"
    },
    {
      "sha": "3cfc22295397abcf769a67c06241ee7d8a2e3b23",
      "filename": "ui/packages/artalk/src/editor/core/reply-plug.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Freply-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,42 +1,43 @@\n import type { CommentData } from '~/types/artalk-data'\n-import Editor from '../editor'\n-import * as Utils from '../../lib/utils'\n-import * as Ui from '../../lib/ui'\n+import * as Utils from '@/lib/utils'\n+import * as Ui from '@/lib/ui'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n import MoverPlug from './mover-plug'\n+import PlugKit from '../plug-kit'\n \n export default class ReplyPlug extends EditorPlug {\n   private comment?: CommentData\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n   }\n \n   getComment() {\n     return this.comment\n   }\n \n   setReply(commentData: CommentData, $comment: HTMLElement, scroll = true) {\n-    this.editor.cancelEditComment()\n+    this.kit.useEditor().cancelEditComment()\n     this.cancelReply()\n \n-    const ui = this.editor.getUI()\n+    const ui = this.kit.useUI()\n     if (!ui.$sendReply) {\n       ui.$sendReply = Utils.createElement(\n         `<div class=\"atk-send-reply\">` +\n-          `${this.editor.$t('reply')} ` +\n+          `${$t('reply')} ` +\n           `<span class=\"atk-text\"></span><span class=\"atk-cancel\">×</span>` +\n         `</div>`\n       )\n       ui.$sendReply.querySelector<HTMLElement>('.atk-text')!.innerText = `@${commentData.nick}`\n       ui.$sendReply.addEventListener('click', () => {\n-        this.editor.cancelReply()\n+        this.kit.useEditor().cancelReply()\n       })\n       ui.$textareaWrap.append(ui.$sendReply)\n     }\n \n     this.comment = commentData\n-    this.editor.getPlugs()?.get(MoverPlug)?.move($comment)\n+    this.kit.useDeps(MoverPlug)?.move($comment)\n \n     if (scroll) Ui.scrollIntoView(ui.$el)\n \n@@ -46,13 +47,13 @@ export default class ReplyPlug extends EditorPlug {\n   cancelReply() {\n     if (!this.comment) return\n \n-    const ui = this.editor.getUI()\n+    const ui = this.kit.useUI()\n     if (ui.$sendReply) {\n       ui.$sendReply.remove()\n       ui.$sendReply = undefined\n     }\n     this.comment = undefined\n \n-    this.editor.getPlugs()?.get(MoverPlug)?.back()\n+    this.kit.useDeps(MoverPlug)?.back()\n   }\n }"
    },
    {
      "sha": "c15acc60f56b207b5a8756dd378ab9de9ba4d2a3",
      "filename": "ui/packages/artalk/src/editor/core/submit-btn-plug.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-btn-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-btn-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-btn-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,24 +1,25 @@\n-import Editor from '../editor'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class SubmitBtnPlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     const onClick = () => {\n-      this.editor.submit()\n+      this.kit.useEditor().submit()\n     }\n \n     this.kit.useMounted(() => {\n       // apply the submit button text from user custom config\n-      this.editor.getUI().$submitBtn.innerText = this.editor.ctx.conf.sendBtn || this.editor.$t('send')\n+      this.kit.useUI().$submitBtn.innerText = this.kit.useConf().sendBtn || $t('send')\n \n       // bind the event when click the submit button\n-      editor.getUI().$submitBtn.addEventListener('click', onClick)\n+      this.kit.useUI().$submitBtn.addEventListener('click', onClick)\n     })\n \n     this.kit.useUnmounted(() => {\n-      editor.getUI().$submitBtn.removeEventListener('click', onClick)\n+      this.kit.useUI().$submitBtn.removeEventListener('click', onClick)\n     })\n   }\n }"
    },
    {
      "sha": "de37752125c4bf2ed7c0f966cc6f6c1100839a67",
      "filename": "ui/packages/artalk/src/editor/core/submit-plug.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 19,
      "changes": 39,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Fsubmit-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,8 +1,9 @@\n import type { CommentData } from '~/types/artalk-data'\n-import Editor from '../editor'\n-import User from '../../lib/user'\n+import $t from '@/i18n'\n+import User from '@/lib/user'\n import EditorPlug from '../editor-plug'\n import ReplyPlug from './reply-plug'\n+import PlugKit from '../plug-kit'\n \n interface CustomSubmit {\n   activeCond: () => void\n@@ -14,20 +15,20 @@ interface CustomSubmit {\n export default class SubmitPlug extends EditorPlug {\n   customs: CustomSubmit[] = []\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n   }\n \n   async do() {\n-    if (this.editor.getContentFinal().trim() === '') {\n-      this.editor.focus()\n+    if (this.kit.useEditor().getContentFinal().trim() === '') {\n+      this.kit.useEditor().focus()\n       return\n     }\n \n     const custom = this.customs.find(o => o.activeCond())\n \n-    this.editor.ctx.trigger('editor-submit')\n-    this.editor.showLoading()\n+    this.kit.useGlobalCtx().trigger('editor-submit')\n+    this.kit.useEditor().showLoading()\n \n     try {\n       // pre submit\n@@ -45,14 +46,14 @@ export default class SubmitPlug extends EditorPlug {\n     } catch (err: any) {\n       // submit error\n       console.error(err)\n-      this.editor.showNotify(`${this.editor.$t('commentFail')}，${err.msg || String(err)}`, 'e')\n+      this.kit.useEditor().showNotify(`${$t('commentFail')}，${err.msg || String(err)}`, 'e')\n       return\n     } finally {\n-      this.editor.hideLoading()\n+      this.kit.useEditor().hideLoading()\n     }\n \n-    this.editor.reset() // 复原编辑器\n-    this.editor.ctx.trigger('editor-submitted')\n+    this.kit.useEditor().reset() // 复原编辑器\n+    this.kit.useGlobalCtx().trigger('editor-submitted')\n   }\n \n   registerCustom(c: CustomSubmit) {\n@@ -64,19 +65,19 @@ export default class SubmitPlug extends EditorPlug {\n   // -------------------------------------------------------------------\n \n   private async reqAdd() {\n-    const nComment = await this.editor.ctx.getApi().comment.add({\n+    const nComment = await this.kit.useApi().comment.add({\n       ...this.getSubmitAddParams()\n     })\n     return nComment\n   }\n \n   private getSubmitAddParams() {\n     const { nick, email, link } = User.data\n-    const conf = this.editor.ctx.conf\n-    const reply = this.editor.getPlugs()?.get(ReplyPlug)?.getComment()\n+    const conf = this.kit.useConf()\n+    const reply = this.kit.useDeps(ReplyPlug)?.getComment()\n \n     return {\n-      content: this.editor.getContentFinal(),\n+      content: this.kit.useEditor().getContentFinal(),\n       nick, email, link,\n       rid: (!reply) ? 0 : reply.id,\n       page_key: (!reply) ? conf.pageKey : reply.page_key,\n@@ -87,12 +88,12 @@ export default class SubmitPlug extends EditorPlug {\n \n   private postSubmitAdd(commentNew: CommentData) {\n     // 回复不同页面的评论，跳转到新页面\n-    const replyComment = this.editor.getPlugs()?.get(ReplyPlug)?.getComment()\n-    const conf = this.editor.ctx.conf\n+    const replyComment = this.kit.useDeps(ReplyPlug)?.getComment()\n+    const conf = this.kit.useConf()\n     if (!!replyComment && replyComment.page_key !== conf.pageKey) {\n       window.open(`${replyComment.page_url}#atk-comment-${commentNew.id}`)\n     }\n \n-    this.editor.ctx.insertComment(commentNew)\n+    this.kit.useGlobalCtx().insertComment(commentNew)\n   }\n }"
    },
    {
      "sha": "db5086630f1c8ba660b1e127dc0168f3ec484f19",
      "filename": "ui/packages/artalk/src/editor/core/textarea-plug.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Ftextarea-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Ftextarea-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fcore%2Ftextarea-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,29 +1,30 @@\n-import Editor from '../editor'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class TextareaPlug extends EditorPlug {\n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     const onKeydown = (e: KeyboardEvent) => this.onKeydown(e)\n     const onInput = () => this.onInput()\n \n     this.kit.useMounted(() => {\n       // 占位符\n-      editor.getUI().$textarea.placeholder = editor.ctx.conf.placeholder || editor.$t('placeholder')\n+      this.kit.useUI().$textarea.placeholder = this.kit.useConf().placeholder || $t('placeholder')\n \n       // bind the event\n-      editor.getUI().$textarea.addEventListener('keydown', onKeydown)\n-      editor.getUI().$textarea.addEventListener('input', onInput)\n+      this.kit.useUI().$textarea.addEventListener('keydown', onKeydown)\n+      this.kit.useUI().$textarea.addEventListener('input', onInput)\n     })\n \n     this.kit.useUnmounted(() => {\n       // unmount the event\n-      editor.getUI().$textarea.removeEventListener('keydown', onKeydown)\n-      editor.getUI().$textarea.removeEventListener('input', onInput)\n+      this.kit.useUI().$textarea.removeEventListener('keydown', onKeydown)\n+      this.kit.useUI().$textarea.removeEventListener('input', onInput)\n     })\n \n-    this.kit.useContentUpdated(() => {\n+    this.kit.useEvents().on('content-updated', () => {\n       // delay 80ms to prevent invalid execution\n       window.setTimeout(() => {\n         this.adaptiveHeightByContent()\n@@ -37,18 +38,18 @@ export default class TextareaPlug extends EditorPlug {\n \n     if (keyCode === 9) {\n       e.preventDefault()\n-      this.editor.insertContent('\\t')\n+      this.kit.useEditor().insertContent('\\t')\n     }\n   }\n \n   private onInput() {\n-    this.editor.getPlugs()?.triggerContentUpdatedEvt(this.editor.getContentRaw())\n+    this.kit.useEvents().trigger('content-updated', this.kit.useEditor().getContentRaw())\n   }\n \n   // Resize the textarea height by content\n   public adaptiveHeightByContent() {\n-    const diff = this.editor.getUI().$textarea.offsetHeight - this.editor.getUI().$textarea.clientHeight\n-    this.editor.getUI().$textarea.style.height = '0px' // it's a magic. 若不加此行，内容减少，高度回不去\n-    this.editor.getUI().$textarea.style.height = `${this.editor.getUI().$textarea.scrollHeight + diff}px`\n+    const diff = this.kit.useUI().$textarea.offsetHeight - this.kit.useUI().$textarea.clientHeight\n+    this.kit.useUI().$textarea.style.height = '0px' // it's a magic. 若不加此行，内容减少，高度回不去\n+    this.kit.useUI().$textarea.style.height = `${this.kit.useUI().$textarea.scrollHeight + diff}px`\n   }\n }"
    },
    {
      "sha": "3084f34db82cf22a0de2ef92b1a644ea4de2fea0",
      "filename": "ui/packages/artalk/src/editor/editor-plug.ts",
      "status": "modified",
      "additions": 34,
      "deletions": 12,
      "changes": 46,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,28 +1,50 @@\n-import Editor from '@/editor/editor'\n+import * as Utils from '@/lib/utils'\n import PlugKit from './plug-kit'\n \n /**\n  * Editor 插件\n- *\n- * (使用 Interface x Abstract 合并声明：https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces)\n  */\n interface EditorPlug {\n   $btn?: HTMLElement\n   $panel?: HTMLElement\n-  onMounted?(): void\n-  onUnmounted?(): void\n-  onPanelShow?(): void\n-  onPanelHide?(): void\n-  onHeaderInput?(key: string, $input: HTMLElement): void\n-  onContentUpdated?(content: string): void\n   contentTransformer?(rawContent: string): string\n }\n \n class EditorPlug {\n-  protected kit: PlugKit\n+  constructor(\n+    protected kit: PlugKit\n+  ) {\n+  }\n+\n+  /** Use plug btn will add a btn on the bottom of editor */\n+  useBtn(html: string = '<div></div>') {\n+    this.$btn = Utils.createElement(`<span class=\"atk-plug-btn\">${html}</span>`)\n+    return this.$btn\n+  }\n+\n+  /** Use plug panel will show the panel when btn is clicked */\n+  usePanel(html: string = '<div></div>') {\n+    this.$panel = Utils.createElement(html)\n+    return this.$panel\n+  }\n+\n+  /** Use the content transformer to handle the content of the last submit by the editor */\n+  useContentTransformer(func: (raw: string) => string) {\n+    this.contentTransformer = func\n+  }\n+\n+  /** Listen the event of panel show */\n+  usePanelShow(func: () => void) {\n+    this.kit.useEvents().on('panel-show', (aPlug) => {\n+      if (aPlug === this) func()\n+    })\n+  }\n \n-  constructor(protected editor: Editor) {\n-    this.kit = new PlugKit(this)\n+  /** Listen the event of panel hide */\n+  usePanelHide(func: () => void) {\n+    this.kit.useEvents().on('panel-hide', (aPlug) => {\n+      if (aPlug === this) func()\n+    })\n   }\n }\n "
    },
    {
      "sha": "23e2117da20fb2853866359b5fabedb593e8321f",
      "filename": "ui/packages/artalk/src/editor/editor.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 109,
      "changes": 114,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Feditor.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,7 +1,7 @@\n import type { CommentData } from '~/types/artalk-data'\n+import type EditorApi from '~/types/editor'\n import type Context from '~/types/context'\n import Component from '../lib/component'\n-import * as Utils from '../lib/utils'\n import * as Ui from '../lib/ui'\n import marked from '../lib/marked'\n import { render, EditorUI } from './ui'\n@@ -12,111 +12,7 @@ import EditPlug from './core/edit-plug'\n import SubmitPlug from './core/submit-plug'\n import ClosablePlug from './core/closable-plug'\n \n-interface Editor extends Component {\n-  getUI(): EditorUI\n-  getPlugs(): PlugManager | undefined\n-\n-  /**\n-   * Get the header input elements\n-   */\n-  getHeaderInputEls(): Record<string, HTMLInputElement>\n-\n-  /**\n-   * Set content\n-   */\n-  setContent(val: string): void\n-\n-  /**\n-   * Insert content\n-   */\n-  insertContent(val: string): void\n-\n-  /**\n-   * Get the final content\n-   *\n-   * This function returns the raw content or the content transformed through a plugin hook.\n-   */\n-  getContentFinal(): string\n-\n-  /**\n-   * Get the raw content which is inputed by user\n-   */\n-  getContentRaw(): string\n-\n-  /**\n-   * Get the HTML format content which is rendered by marked (a markdown parser)\n-   */\n-  getContentMarked(): string\n-\n-  /**\n-   * Focus editor\n-   */\n-  focus(): void\n-\n-  /**\n-   * Reset editor\n-   */\n-  reset(): void\n-\n-  /**\n-   * Reset editor UI\n-   *\n-   * call it will move editor to the initial position\n-   */\n-  resetUI(): void\n-\n-  /**\n-   * Submit comment\n-   */\n-  submit(): void\n-\n-  /**\n-   * Close comment editor which prevent user from submitting (but admin excluded)\n-   */\n-  close(): void\n-\n-  /**\n-   * Open comment editor which allow user to submit (only be called while editor is closed)\n-   */\n-  open(): void\n-\n-  /**\n-   * Show notification message\n-   */\n-  showNotify(msg: string, type: \"i\" | \"s\" | \"w\" | \"e\"): void\n-\n-  /**\n-   * Show loading on editor\n-   */\n-  showLoading(): void\n-\n-  /**\n-   * Hide loading on editor\n-   */\n-  hideLoading(): void\n-\n-  /**\n-   * Start replaying a comment\n-   */\n-  setReply(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void\n-\n-  /**\n-   * Cancel replaying the comment\n-   */\n-  cancelReply(): void\n-\n-  /**\n-   * Start editing a comment\n-   */\n-  setEditComment(commentData: CommentData, $comment: HTMLElement): void\n-\n-  /**\n-   * Cancel editing the comment\n-   */\n-  cancelEditComment(): void\n-}\n-\n-class Editor extends Component {\n+class Editor extends Component implements EditorApi {\n   private ui: EditorUI\n   getUI() { return this.ui }\n \n@@ -134,13 +30,13 @@ class Editor extends Component {\n     this.ctx.on('conf-loaded', () => {\n       // trigger unmount event will call all plugs' unmount function\n       // (this will only be called while conf reloaded, not be called at first time)\n-      this.plugs?.triggerUnmounted()\n+      this.plugs?.getEvents().trigger('unmounted')\n \n       // initialize editor plugs\n       this.plugs = new PlugManager(this)\n \n       // trigger event for plug initialization\n-      this.plugs.triggerMounted()\n+      this.plugs.getEvents().trigger('mounted')\n     })\n   }\n \n@@ -169,7 +65,7 @@ class Editor extends Component {\n     this.ui.$textarea.value = val\n \n     // plug hook: content updated\n-    this.plugs?.triggerContentUpdatedEvt(val)\n+    this.plugs?.getEvents().trigger('content-updated', val)\n   }\n \n   insertContent(val: string) {"
    },
    {
      "sha": "3d9c5e2c4f62ea0267fbc188ca49d833ca141415",
      "filename": "ui/packages/artalk/src/editor/plug-enabled.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-enabled.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -0,0 +1,38 @@\n+import type ArtalkConfig from '~/types/artalk-config'\n+import EditorPlug from './editor-plug'\n+import LocalStoragePlug from './core/local-storage-plug'\n+import HeaderPlug from './core/header-plug'\n+import TextareaPlug from './core/textarea-plug'\n+import SubmitBtnPlug from './core/submit-btn-plug'\n+import SubmitPlug from './core/submit-plug'\n+import ReplyPlug from './core/reply-plug'\n+import EditPlug from './core/edit-plug'\n+import ClosablePlug from './core/closable-plug'\n+import HeaderInputPlug from './core/header-input-plug'\n+import MoverPlug from './core/mover-plug'\n+import EmoticonsPlug from './plugs/emoticons-plug'\n+import UploadPlug from './plugs/upload-plug'\n+import PreviewPlug from './plugs/preview-plug'\n+\n+/** The default enabled plugs */\n+export const ENABLED_PLUGS: (typeof EditorPlug)[] = [\n+  // Core\n+  LocalStoragePlug,\n+  HeaderPlug, HeaderInputPlug, TextareaPlug,\n+  SubmitPlug, SubmitBtnPlug,\n+  MoverPlug, ReplyPlug, EditPlug,\n+  ClosablePlug,\n+\n+  // Extensions\n+  EmoticonsPlug, UploadPlug, PreviewPlug\n+]\n+\n+/** Get the name list of disabled plugs */\n+export function getDisabledPlugByConf(conf: ArtalkConfig): (typeof EditorPlug)[] {\n+  return [\n+    {k: UploadPlug, v: conf.imgUpload},\n+    {k: EmoticonsPlug, v: conf.emoticons},\n+    {k: PreviewPlug, v: conf.preview},\n+    {k: MoverPlug, v: conf.editorTravel},\n+  ].filter(n => !n.v).flatMap(n => n.k)\n+}"
    },
    {
      "sha": "60e13bc47f9c32c0edf5529daf86448a5af5453d",
      "filename": "ui/packages/artalk/src/editor/plug-kit.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 30,
      "changes": 60,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-kit.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-kit.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-kit.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,59 +1,59 @@\n+import EditorApi from '~/types/editor'\n import * as Utils from '@/lib/utils'\n import EditorPlug from \"./editor-plug\"\n+import PlugManager from './plug-manager'\n \n /**\n  * PlugKit provides a set of methods to help you develop editor plug\n  */\n export default class PlugKit {\n   constructor(\n-    private plug: EditorPlug\n+    private plugs: PlugManager\n   ) {\n   }\n \n-  /** Use plug btn will add a btn on the bottom of editor */\n-  useBtn(html: string = '<div></div>') {\n-    this.plug.$btn = Utils.createElement(`<span class=\"atk-plug-btn\">${html}</span>`)\n-    return this.plug.$btn\n+  /** Use the editor */\n+  useEditor() {\n+    return this.plugs.editor\n   }\n \n-  /** Use plug panel will show the panel when btn is clicked */\n-  usePanel(html: string = '<div></div>') {\n-    this.plug.$panel = Utils.createElement(html)\n-    return this.plug.$panel\n+  /** Use the context of global */\n+  useGlobalCtx() {\n+    return this.plugs.editor.ctx\n   }\n \n-  /** Listen the event when plug is mounted */\n-  useMounted(func: () => void) {\n-    this.plug.onMounted = func\n+  /** Use the config of Artalk */\n+  useConf() {\n+    return this.plugs.editor.ctx.conf\n   }\n \n-  /** Listen the event when plug is unmounted */\n-  useUnmounted(func: () => void) {\n-    this.plug.onUnmounted = func\n+  /** Use the http api client */\n+  useApi() {\n+    return this.plugs.editor.ctx.getApi()\n   }\n \n-  /** Listen the event of panel show */\n-  usePanelShow(func: () => void) {\n-    this.plug.onPanelShow = func\n+  /** Use the ui of editor */\n+  useUI() {\n+    return this.plugs.editor.getUI()\n   }\n \n-  /** Listen the event of panel hide */\n-  usePanelHide(func: () => void) {\n-    this.plug.onPanelHide = func\n+  /** Use the events in editor scope */\n+  useEvents() {\n+    return this.plugs.getEvents()\n   }\n \n-  /** Listen the event of header input is changed */\n-  useHeaderInput(func: (key: string, $input: HTMLElement) => void) {\n-    this.plug.onHeaderInput = func\n+  /** Listen the event when plug is mounted */\n+  useMounted(func: () => void) {\n+    this.useEvents().on('mounted', func)\n   }\n \n-  /** Listen the event of editor content is updated */\n-  useContentUpdated(func: (content: string) => void) {\n-    this.plug.onContentUpdated = func\n+  /** Listen the event when plug is unmounted */\n+  useUnmounted(func: () => void) {\n+    this.useEvents().on('unmounted', func)\n   }\n \n-  /** Use the content transformer to handle the content of the last submit by the editor */\n-  useContentTransformer(func: (raw: string) => string) {\n-    this.plug.contentTransformer = func\n+  /** Use the deps of other plug */\n+  useDeps<T extends typeof EditorPlug>(plug: T) {\n+    return this.plugs.get(plug)\n   }\n }"
    },
    {
      "sha": "a88e55cf1583425a8cf1080145815d61925f8432",
      "filename": "ui/packages/artalk/src/editor/plug-manager.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 71,
      "changes": 101,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-manager.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-manager.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplug-manager.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,39 +1,27 @@\n-import type ArtalkConfig from '~/types/artalk-config'\n-import MoverPlug from './core/mover-plug'\n-import EmoticonsPlug from './plugs/emoticons-plug'\n-import UploadPlug from './plugs/upload-plug'\n-import PreviewPlug from './plugs/preview-plug'\n-import HeaderInputPlug from './core/header-input-plug'\n+import type EditorApi from '~/types/editor'\n import EditorPlug from './editor-plug'\n-import Editor from './editor'\n-import LocalStoragePlug from './core/local-storage-plug'\n-import HeaderPlug from './core/header-plug'\n-import TextareaPlug from './core/textarea-plug'\n-import SubmitBtnPlug from './core/submit-btn-plug'\n-import SubmitPlug from './core/submit-plug'\n-import ReplyPlug from './core/reply-plug'\n-import EditPlug from './core/edit-plug'\n-import ClosablePlug from './core/closable-plug'\n-\n-/** The default enabled plugs */\n-const ENABLED_PLUGS: (typeof EditorPlug)[] = [\n-  // Core\n-  LocalStoragePlug,\n-  HeaderPlug, HeaderInputPlug, TextareaPlug,\n-  SubmitPlug, SubmitBtnPlug,\n-  MoverPlug, ReplyPlug, EditPlug,\n-  ClosablePlug,\n-\n-  // Extensions\n-  EmoticonsPlug, UploadPlug, PreviewPlug\n-]\n-\n-export default class PlugManager {\n-  plugs: EditorPlug[] = []\n-  openedPlug: EditorPlug|null = null\n+import EventManager from '../lib/event-manager'\n+import PlugKit from './plug-kit'\n+import { ENABLED_PLUGS, getDisabledPlugByConf } from './plug-enabled'\n+\n+export interface EditorEventPayloadMap {\n+  'mounted': undefined\n+  'unmounted': undefined\n+  'header-input': { field: string, $input: HTMLInputElement }\n+  'content-updated': string\n+  'panel-show': EditorPlug\n+  'panel-hide': EditorPlug\n+  'panel-close': undefined\n+}\n+\n+class PlugManager {\n+  private plugs: EditorPlug[] = []\n+  private openedPlug: EditorPlug|null = null\n+  private events = new EventManager<EditorEventPayloadMap>()\n+  getEvents() { return this.events }\n \n   constructor(\n-    public editor: Editor\n+    public editor: EditorApi\n   ) {\n     // handle ui, clear and reset the plug btns and plug panels\n     editor.getUI().$plugPanelWrap.innerHTML = ''\n@@ -47,13 +35,17 @@ export default class PlugManager {\n       .filter(p => !DISABLED.includes(p)) // 禁用的插件\n       .forEach((Plug) => {\n         // create the plug instance\n-        this.plugs.push(new Plug(this.editor))\n+        const kit = new PlugKit(this)\n+        this.plugs.push(new Plug(kit))\n       })\n \n     // load the plug UI\n     this.plugs.forEach((plug) => {\n       this.loadPlugUI(plug)\n     })\n+\n+    // bind events\n+    this.events.on('panel-close', () => this.closePlugPanel())\n   }\n \n   /** Load the plug btn and plug panel on editor ui */\n@@ -102,10 +94,10 @@ export default class PlugManager {\n \n       if (aPlug === plug) {\n         plugPanel.style.display = ''\n-        plug.onPanelShow && plug.onPanelShow()\n+        this.events.trigger('panel-show', plug)\n       } else {\n         plugPanel.style.display = 'none'\n-        plug.onPanelHide && plug.onPanelHide()\n+        this.events.trigger('panel-hide', plug)\n       }\n     })\n \n@@ -117,9 +109,8 @@ export default class PlugManager {\n   closePlugPanel() {\n     if (!this.openedPlug) return\n \n-    this.openedPlug.onPanelHide && this.openedPlug.onPanelHide()\n-\n     this.editor.getUI().$plugPanelWrap.style.display = 'none'\n+    this.events.trigger('panel-hide', this.openedPlug)\n     this.openedPlug = null\n   }\n \n@@ -132,38 +123,6 @@ export default class PlugManager {\n     })\n     return result\n   }\n-\n-  // -------------------------------------------------------------------\n-  //  Events\n-  // -------------------------------------------------------------------\n-\n-  /** Trigger event when mounted */\n-  triggerMounted() {\n-    this.plugs.forEach((aPlug) => aPlug.onMounted && aPlug.onMounted())\n-  }\n-\n-  /** Trigger event when unmounted */\n-  triggerUnmounted() {\n-    this.plugs.forEach((aPlug) => aPlug.onUnmounted && aPlug.onUnmounted())\n-  }\n-\n-  /** Trigger event when editor header input changed */\n-  triggerHeaderInputEvt(field: string, $input: HTMLInputElement) {\n-    this.plugs.forEach((aPlug) => aPlug.onHeaderInput && aPlug.onHeaderInput(field, $input))\n-  }\n-\n-  /** Trigger event when editor content updated */\n-  triggerContentUpdatedEvt(content: string) {\n-    this.plugs.forEach((aPlug) => aPlug.onContentUpdated && aPlug.onContentUpdated(content))\n-  }\n }\n \n-/** Get the name list of disabled plugs */\n-function getDisabledPlugByConf(conf: ArtalkConfig): (typeof EditorPlug)[] {\n-  return [\n-    {k: UploadPlug, v: conf.imgUpload},\n-    {k: EmoticonsPlug, v: conf.emoticons},\n-    {k: PreviewPlug, v: conf.preview},\n-    {k: MoverPlug, v: conf.editorTravel},\n-  ].filter(n => !n.v).flatMap(n => n.k)\n-}\n+export default PlugManager"
    },
    {
      "sha": "001a39875a30bd10ba884d7c9a8b55b0f6b5f8cf",
      "filename": "ui/packages/artalk/src/editor/plugs/emoticons-plug.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Femoticons-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Femoticons-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Femoticons-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,10 +1,11 @@\n import './emoticons-plug.scss'\n \n-import * as Utils from '~/src/lib/utils'\n-import * as Ui from '~/src/lib/ui'\n import { EmoticonListData, EmoticonGrpData } from '~/types/artalk-data'\n+import * as Utils from '@/lib/utils'\n+import * as Ui from '@/lib/ui'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n-import Editor from '../editor'\n+import PlugKit from '../plug-kit'\n \n type OwOFormatType = {\n   [key: string] : {\n@@ -20,13 +21,13 @@ export default class EmoticonsPlug extends EditorPlug {\n   private $grpWrap!: HTMLElement\n   private $grpSwitcher!: HTMLElement\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n-    this.kit.usePanel(`<div class=\"atk-editor-plug-emoticons\"></div>`)\n-    this.kit.useBtn(this.editor.ctx.$t('emoticon'))\n-    this.kit.useContentTransformer((raw) => this.transEmoticonImageText(raw))\n-    this.kit.usePanelShow(() => {\n+    this.usePanel(`<div class=\"atk-editor-plug-emoticons\"></div>`)\n+    this.useBtn($t('emoticon'))\n+    this.useContentTransformer((raw) => this.transEmoticonImageText(raw))\n+    this.usePanelShow(() => {\n       ;(async () => {\n         await this.loadEmoticonsData()\n \n@@ -42,7 +43,7 @@ export default class EmoticonsPlug extends EditorPlug {\n         }, 30)\n       })()\n     })\n-    this.kit.usePanelHide(() => {\n+    this.usePanelHide(() => {\n       this.$panel!.parentElement!.style.height = ''\n     })\n \n@@ -65,7 +66,7 @@ export default class EmoticonsPlug extends EditorPlug {\n     // 数据处理\n     this.loadingTask = (async () => {\n       Ui.showLoading(this.$panel!)\n-      this.emoticons = await this.handleData(this.editor.ctx.conf.emoticons)\n+      this.emoticons = await this.handleData(this.kit.useConf().emoticons)\n       Ui.hideLoading(this.$panel!)\n       this.loadingTask = null\n       this.isListLoaded = true\n@@ -224,9 +225,9 @@ export default class EmoticonsPlug extends EditorPlug {\n \n         $item.onclick = () => {\n           if (grp.type === 'image') {\n-            this.editor.insertContent(`:[${item.key}]`)\n+            this.kit.useEditor().insertContent(`:[${item.key}]`)\n           } else {\n-            this.editor.insertContent(item.val || '')\n+            this.kit.useEditor().insertContent(item.val || '')\n           }\n         }\n       })"
    },
    {
      "sha": "a635a06c28a13f6b97aafae489ef8668570306ff",
      "filename": "ui/packages/artalk/src/editor/plugs/preview-plug.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 11,
      "changes": 23,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fpreview-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,36 +1,37 @@\n import './preview-plug.scss'\n \n-import Editor from '../editor'\n+import $t from '@/i18n'\n import EditorPlug from '../editor-plug'\n+import PlugKit from '../plug-kit'\n \n export default class PreviewPlug extends EditorPlug {\n   private isPlugPanelShow = false\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n-    this.kit.usePanel(`<div class=\"atk-editor-plug-preview\"></div>`)\n+    this.usePanel(`<div class=\"atk-editor-plug-preview\"></div>`)\n \n     // initialize plug button\n-    let btnText = this.editor.$t('preview')\n-    if (this.editor.ctx.getMarkedInstance()) btnText += ` <i title=\"Markdown is supported\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></i>`\n-    this.kit.useBtn(btnText)\n+    let btnText = $t('preview')\n+    if (this.kit.useGlobalCtx().getMarkedInstance()) btnText += ` <i title=\"Markdown is supported\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></i>`\n+    this.useBtn(btnText)\n \n     // function to update content\n-    this.kit.useContentUpdated((content) => {\n+    this.kit.useEvents().on('content-updated', (content) => {\n       this.isPlugPanelShow && this.updateContent()\n     })\n \n-    this.kit.usePanelShow(() => {\n+    this.usePanelShow(() => {\n       this.isPlugPanelShow = true\n       this.updateContent()\n     })\n-    this.kit.usePanelHide(() => {\n+    this.usePanelHide(() => {\n       this.isPlugPanelShow = false\n     })\n   }\n \n   updateContent() {\n-    this.$panel!.innerHTML = this.editor.getContentMarked()\n+    this.$panel!.innerHTML = this.kit.useEditor().getContentMarked()\n   }\n }"
    },
    {
      "sha": "2954cc0904ce91d3dc8c724c529e114162f7ca1e",
      "filename": "ui/packages/artalk/src/editor/plugs/upload-plug.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fupload-plug.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fupload-plug.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Feditor%2Fplugs%2Fupload-plug.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,6 +1,7 @@\n import * as Utils from '@/lib/utils'\n-import Editor from '../editor'\n+import $t from '@/i18n'\n import User from '../../lib/user'\n+import PlugKit from '../plug-kit'\n import EditorPlug from '../editor-plug'\n \n /** 允许的图片格式 */\n@@ -9,15 +10,15 @@ const AllowImgExts = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg', 'webp']\n export default class UploadPlug extends EditorPlug {\n   private $imgUploadInput?: HTMLInputElement\n \n-  constructor(editor: Editor) {\n-    super(editor)\n+  constructor(kit: PlugKit) {\n+    super(kit)\n \n     this.$imgUploadInput = document.createElement('input')\n     this.$imgUploadInput.type = 'file'\n     this.$imgUploadInput.style.display = 'none'\n     this.$imgUploadInput.accept = AllowImgExts.map(o => `.${o}`).join(',')\n \n-    const $btn = this.kit.useBtn(`${this.editor.ctx.$t('image')}`)\n+    const $btn = this.useBtn(`${$t('image')}`)\n     $btn.after(this.$imgUploadInput)\n     $btn.onclick = () => {\n       // 选择图片\n@@ -32,7 +33,7 @@ export default class UploadPlug extends EditorPlug {\n       $input.click() // 显示选择图片对话框\n     }\n \n-    if (!this.editor.ctx.conf.imgUpload) {\n+    if (!this.kit.useConf().imgUpload) {\n       this.$btn!.setAttribute('atk-only-admin-show', '')\n     }\n \n@@ -49,12 +50,12 @@ export default class UploadPlug extends EditorPlug {\n     // 拖拽图片\n     // @link https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop\n     // 阻止浏览器的默认释放行为\n-    this.editor.getUI().$textarea.addEventListener('dragover', (evt) => {\n+    this.kit.useUI().$textarea.addEventListener('dragover', (evt) => {\n       evt.stopPropagation()\n       evt.preventDefault()\n     })\n \n-    this.editor.getUI().$textarea.addEventListener('drop', (evt) => {\n+    this.kit.useUI().$textarea.addEventListener('drop', (evt) => {\n       const files = evt.dataTransfer?.files\n       if (files?.length) {\n         evt.preventDefault()\n@@ -63,7 +64,7 @@ export default class UploadPlug extends EditorPlug {\n     })\n \n     // 粘贴图片\n-    this.editor.getUI().$textarea.addEventListener('paste', (evt) => {\n+    this.kit.useUI().$textarea.addEventListener('paste', (evt) => {\n       const files = evt.clipboardData?.files\n       if (files?.length) {\n         evt.preventDefault()\n@@ -78,43 +79,44 @@ export default class UploadPlug extends EditorPlug {\n \n     // 未登录提示\n     if (!User.checkHasBasicUserInfo()) {\n-      this.editor.showNotify(this.editor.ctx.$t('uploadLoginMsg'), 'w')\n+      this.kit.useEditor().showNotify($t('uploadLoginMsg'), 'w')\n       return\n     }\n \n     // 插入图片前换一行\n     let insertPrefix = '\\n'\n-    if (this.editor.getUI().$textarea.value.trim() === '') insertPrefix = ''\n+    if (this.kit.useUI().$textarea.value.trim() === '') insertPrefix = ''\n \n     // 插入占位加载文字\n     const uploadPlaceholderTxt = `${insertPrefix}![](Uploading ${file.name}...)`\n-    this.editor.insertContent(uploadPlaceholderTxt)\n+    this.kit.useEditor().insertContent(uploadPlaceholderTxt)\n \n     // 上传图片\n     let resp: any\n     try {\n-      if (!this.editor.ctx.conf.imgUploader) {\n+      const customUploaderFn = this.kit.useConf().imgUploader\n+      if (!customUploaderFn) {\n         // 使用 Artalk 进行图片上传\n-        resp = await this.editor.ctx.getApi().upload.imgUpload(file)\n+        resp = await this.kit.useApi().upload.imgUpload(file)\n       } else {\n         // 使用自定义的图片上传器\n-        resp = {img_url: await this.editor.ctx.conf.imgUploader(file)}\n+        resp = {img_url: await customUploaderFn(file)}\n       }\n     } catch (err: any) {\n       console.error(err)\n-      this.editor.showNotify(`${this.editor.ctx.$t('uploadFail')}，${err.msg}`, 'e')\n+      this.kit.useEditor().showNotify(`${$t('uploadFail')}，${err.msg}`, 'e')\n     }\n     if (!!resp && resp.img_url) {\n       let imgURL = resp.img_url as string\n \n       // 若为相对路径，加上 artalk server\n-      if (!Utils.isValidURL(imgURL)) imgURL = Utils.getURLBasedOnApi(this.editor.ctx, imgURL)\n+      if (!Utils.isValidURL(imgURL)) imgURL = Utils.getURLBasedOnApi(this.kit.useGlobalCtx(), imgURL)\n \n       // 上传成功插入图片\n-      this.editor.setContent(this.editor.getUI().$textarea.value.replace(uploadPlaceholderTxt, `${insertPrefix}![](${imgURL})`))\n+      this.kit.useEditor().setContent(this.kit.useUI().$textarea.value.replace(uploadPlaceholderTxt, `${insertPrefix}![](${imgURL})`))\n     } else {\n       // 上传失败删除加载文字\n-      this.editor.setContent(this.editor.getUI().$textarea.value.replace(uploadPlaceholderTxt, ''))\n+      this.kit.useEditor().setContent(this.kit.useUI().$textarea.value.replace(uploadPlaceholderTxt, ''))\n     }\n   }\n }"
    },
    {
      "sha": "be6f13d8f3d6646cf94851d1250c53ab4799ff97",
      "filename": "ui/packages/artalk/src/lib/event-manager.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Flib%2Fevent-manager.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -1,7 +1,4 @@\n-export interface EventHandler<P> {\n-  (payload: P): void\n-}\n-\n+export type EventHandler<T> = (payload: T) => void\n export interface Event<PayloadMap, K extends keyof PayloadMap = keyof PayloadMap> {\n   name: K\n   handler: EventHandler<PayloadMap[K]>\n@@ -35,9 +32,9 @@ export default class EventManager<PayloadMap> implements EventManagerFuncs<Paylo\n   /**\n    * Trigger an event with an optional payload\n    */\n-  public trigger<K extends keyof PayloadMap>(name: K, payload: PayloadMap[K]) {\n+  public trigger<K extends keyof PayloadMap>(name: K, payload?: PayloadMap[K]) {\n     this.events\n       .filter((evt) => evt.name === name && typeof evt.handler === 'function')\n-      .forEach((evt) => evt.handler(payload))\n+      .forEach((evt) => evt.handler(payload!))\n   }\n }"
    },
    {
      "sha": "2359cbe7acb0e899e71ca084ec5c84878554f54d",
      "filename": "ui/packages/artalk/types/editor.d.ts",
      "status": "added",
      "additions": 108,
      "deletions": 0,
      "changes": 108,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/0f35532f0ba404ca37420c2485de1dee1ca7c006/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Ftypes%2Feditor.d.ts?ref=0f35532f0ba404ca37420c2485de1dee1ca7c006",
      "patch": "@@ -0,0 +1,108 @@\n+import type { CommentData } from './artalk-data'\n+import Component from '../src/lib/component'\n+import { EditorUI } from '../src/editor/ui'\n+import PlugManager from '../src/editor/plug-manager'\n+\n+export default interface Editor extends Component {\n+  getUI(): EditorUI\n+  getPlugs(): PlugManager | undefined\n+\n+  /**\n+   * Get the header input elements\n+   */\n+  getHeaderInputEls(): Record<string, HTMLInputElement>\n+\n+  /**\n+   * Set content\n+   */\n+  setContent(val: string): void\n+\n+  /**\n+   * Insert content\n+   */\n+  insertContent(val: string): void\n+\n+  /**\n+   * Get the final content\n+   *\n+   * This function returns the raw content or the content transformed through a plugin hook.\n+   */\n+  getContentFinal(): string\n+\n+  /**\n+   * Get the raw content which is inputed by user\n+   */\n+  getContentRaw(): string\n+\n+  /**\n+   * Get the HTML format content which is rendered by marked (a markdown parser)\n+   */\n+  getContentMarked(): string\n+\n+  /**\n+   * Focus editor\n+   */\n+  focus(): void\n+\n+  /**\n+   * Reset editor\n+   */\n+  reset(): void\n+\n+  /**\n+   * Reset editor UI\n+   *\n+   * call it will move editor to the initial position\n+   */\n+  resetUI(): void\n+\n+  /**\n+   * Submit comment\n+   */\n+  submit(): void\n+\n+  /**\n+   * Close comment editor which prevent user from submitting (but admin excluded)\n+   */\n+  close(): void\n+\n+  /**\n+   * Open comment editor which allow user to submit (only be called while editor is closed)\n+   */\n+  open(): void\n+\n+  /**\n+   * Show notification message\n+   */\n+  showNotify(msg: string, type: \"i\" | \"s\" | \"w\" | \"e\"): void\n+\n+  /**\n+   * Show loading on editor\n+   */\n+  showLoading(): void\n+\n+  /**\n+   * Hide loading on editor\n+   */\n+  hideLoading(): void\n+\n+  /**\n+   * Start replaying a comment\n+   */\n+  setReply(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void\n+\n+  /**\n+   * Cancel replaying the comment\n+   */\n+  cancelReply(): void\n+\n+  /**\n+   * Start editing a comment\n+   */\n+  setEditComment(commentData: CommentData, $comment: HTMLElement): void\n+\n+  /**\n+   * Cancel editing the comment\n+   */\n+  cancelEditComment(): void\n+}"
    }
  ]
}
