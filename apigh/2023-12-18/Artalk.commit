{
  "sha": "1b938752ffbbfe95508251b3c7b409d4e1397946",
  "node_id": "C_kwDOCQOkhNoAKDFiOTM4NzUyZmZiYmZlOTU1MDgyNTFiM2M3YjQwOWQ0ZTEzOTc5NDY",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2023-12-18T11:14:58Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2023-12-18T11:14:58Z"
    },
    "message": "fix(ui/dark-mode): potential memory leak issue in auto mode (#688)",
    "tree": {
      "sha": "c3b82c7f5206b0cdc1278eb3ec7450f6be5697d5",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/c3b82c7f5206b0cdc1278eb3ec7450f6be5697d5"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/1b938752ffbbfe95508251b3c7b409d4e1397946",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJlgCmyCRBK7hj4Ov3rIwAAQGwIAARERzt05Ilsmom0aAunITeR\nd7qm8eDfDi+xMVErvQkcdId1YRDNtK9pLhqbU6ihX2eEbytq6FVv7P2A2gFPxGWU\nym2rbeeUV5SrtrDtjjmwLot0N9suVMH39X1M6aIFjBDz5Zu+QQzJMmyCTtkWAeQx\nHHYtwnRoOKmM3i9tx/wsqMNtd/LEsOR51vuRHMqZlNw7iRkYWLVoeVm77wmpiRDx\ns0iKCQiPTtDApjZIgjVU3Xu1DBb52ftxakcexAX1CdtmUiQ/NGx4KroykEQMmvLD\ni5BEEnHw3CxhhUY1QG8TbIvP4xlP5dQinpIhYodJT/KBtGYJFcTYpvlkumCPceU=\n=2S4X\n-----END PGP SIGNATURE-----\n",
      "payload": "tree c3b82c7f5206b0cdc1278eb3ec7450f6be5697d5\nparent 835a886dc8d3aa2426bb708b74569416b76eb745\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1702898098 +0800\ncommitter GitHub <noreply@github.com> 1702898098 +0800\n\nfix(ui/dark-mode): potential memory leak issue in auto mode (#688)\n\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/1b938752ffbbfe95508251b3c7b409d4e1397946",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/1b938752ffbbfe95508251b3c7b409d4e1397946",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/1b938752ffbbfe95508251b3c7b409d4e1397946/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "835a886dc8d3aa2426bb708b74569416b76eb745",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/835a886dc8d3aa2426bb708b74569416b76eb745",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/835a886dc8d3aa2426bb708b74569416b76eb745"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 53,
    "deletions": 36
  },
  "files": [
    {
      "sha": "b67edb51a70870f5a390f76243045a2a107382ba",
      "filename": "ui/packages/artalk/src/components/dark-mode.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/835a886dc8d3aa2426bb708b74569416b76eb745/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomponents%2Fdark-mode.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/835a886dc8d3aa2426bb708b74569416b76eb745/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomponents%2Fdark-mode.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fcomponents%2Fdark-mode.ts?ref=835a886dc8d3aa2426bb708b74569416b76eb745",
      "patch": "@@ -1,30 +0,0 @@\n-const darkModeMedia = window.matchMedia('(prefers-color-scheme: dark)')\n-let darkModeAutoFunc: (evt: MediaQueryListEvent) => void\n-\n-export function applyDarkMode($els: HTMLElement[], darkMode: boolean|'auto') {\n-  const apply = (d: boolean) => {\n-    $els.forEach($el => updateClassName($el, d))\n-  }\n-\n-  if (darkMode === 'auto') {\n-    if (!darkModeAutoFunc) { // 自动切换夜间模式，事件监听\n-      darkModeAutoFunc = (evt) => apply(evt.matches)\n-      darkModeMedia.addEventListener('change', darkModeAutoFunc)\n-    }\n-\n-    apply(darkModeMedia.matches)\n-  } else {\n-    // if the type of darkMode is boolean\n-    if (darkModeAutoFunc) // 解除事件监听绑定\n-      darkModeMedia.removeEventListener('change', darkModeAutoFunc)\n-\n-    apply(darkMode)\n-  }\n-}\n-\n-export const DarkModeClassName = 'atk-dark-mode'\n-\n-function updateClassName($el: HTMLElement, darkMode: boolean) {\n-  if (darkMode) $el.classList.add(DarkModeClassName)\n-  else $el.classList.remove(DarkModeClassName)\n-}"
    },
    {
      "sha": "f5990cd9769fadf0e9fe0b2c551aff97c6e686da",
      "filename": "ui/packages/artalk/src/plugins/dark-mode.ts",
      "status": "modified",
      "additions": 53,
      "deletions": 6,
      "changes": 59,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/1b938752ffbbfe95508251b3c7b409d4e1397946/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fdark-mode.ts",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/1b938752ffbbfe95508251b3c7b409d4e1397946/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fdark-mode.ts",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/ui%2Fpackages%2Fartalk%2Fsrc%2Fplugins%2Fdark-mode.ts?ref=1b938752ffbbfe95508251b3c7b409d4e1397946",
      "patch": "@@ -1,12 +1,59 @@\n import type { ArtalkPlugin } from '~/types'\n-import { applyDarkMode } from '@/components/dark-mode'\n+\n+// Notice: Singleton mode needs to be loaded as lazy as possible,\n+//         because the SSG application does not have a `window` context.\n+let darkModeMedia: MediaQueryList | undefined\n+\n+function updateClassnames($els: HTMLElement[], darkMode: boolean) {\n+  const DarkModeClassName = 'atk-dark-mode'\n+\n+  $els.forEach($el => {\n+    if (darkMode) $el.classList.add(DarkModeClassName)\n+    else $el.classList.remove(DarkModeClassName)\n+  })\n+}\n \n export const DarkMode: ArtalkPlugin = (ctx) => {\n-  const sync = () => {\n-    applyDarkMode([ctx.$root, ctx.get('layerManager').getEl()], ctx.conf.darkMode)\n+  // the handler bind to Artalk instance, don't forget to remove it when Artalk instance destroyed\n+  let darkModeAutoHandler: ((evt: MediaQueryListEvent) => void) | undefined\n+\n+  const sync = (darkMode: boolean|'auto') => {\n+    // the elements that classnames need to be updated when darkMode changed\n+    const $els = [ctx.$root, ctx.get('layerManager').getEl()]\n+\n+    // init darkModeMedia if not exists, and only create once\n+    if (!darkModeMedia) {\n+      darkModeMedia = window.matchMedia('(prefers-color-scheme: dark)')\n+    }\n+\n+    if (darkMode === 'auto') {\n+      // if darkMode is 'auto', add handler\n+      if (!darkModeAutoHandler) {\n+        // the handler that will be called when darkModeMedia changed\n+        darkModeAutoHandler = (evt) => updateClassnames($els, evt.matches)\n+        darkModeMedia.addEventListener('change', darkModeAutoHandler)\n+      }\n+\n+      // update classnames immediately\n+      updateClassnames($els, darkModeMedia.matches)\n+    } else {\n+      // if darkMode is boolean, remove handler\n+      if (darkModeAutoHandler) {\n+        darkModeMedia.removeEventListener('change', darkModeAutoHandler)\n+        darkModeAutoHandler = undefined\n+      }\n+\n+      // update classnames immediately\n+      updateClassnames($els, darkMode)\n+    }\n   }\n \n-  ctx.on('inited', () => sync())\n-  ctx.on('conf-loaded', () => sync())\n-  ctx.on('dark-mode-changed', () => sync())\n+  ctx.on('inited', () => sync(ctx.conf.darkMode))\n+  ctx.on('conf-loaded', (conf) => sync(conf.darkMode))\n+  ctx.on('dark-mode-changed', (darkMode) => sync(darkMode))\n+  ctx.on('destroy', () => {\n+    // if handler exists, don't forget to remove it, or it will cause memory leak\n+    darkModeAutoHandler && darkModeMedia?.removeEventListener('change', darkModeAutoHandler)\n+    darkModeAutoHandler = undefined\n+  })\n }"
    }
  ]
}
