{
  "sha": "b60cb585b6fcb02a31a9beb230202eed98131997",
  "node_id": "C_kwDOCQOkhNoAKGI2MGNiNTg1YjZmY2IwMmEzMWE5YmViMjMwMjAyZWVkOTgxMzE5OTc",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "22412567+qwqcode@users.noreply.github.com",
      "date": "2024-03-17T13:01:42Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2024-03-17T13:01:42Z"
    },
    "message": "perf(db): optimize N+1 query in comment list (#799)",
    "tree": {
      "sha": "a9e8d6e6addaec2a0b865501f8d896e818b639af",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/a9e8d6e6addaec2a0b865501f8d896e818b639af"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/b60cb585b6fcb02a31a9beb230202eed98131997",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJl9um2CRC1aQ7uu5UhlAAAOdwQAFqPyLfL9h4U39tWjI/iAnJ3\nmQF4SuXeL7006T1PGN9R8lfJ5ThQBkFqoRC3jcbvQGNYa3A/FgVb/5fMmorof0aj\nVBdBXZ/NUawOrXLQucOkY3z+5++qYnVBDV+8Xd2b+4IBLuEkvbKNoKCir6JfEe2/\n57ldWk+OCX5sasDqD8qMllLaICIc0YiPcj+6AVg6n05Chi+p+OKd8C++VpST3k3V\nb4MTUmfQon17qof/iexWKQzhJcW6BpcX0L8887MMQUan1JRfYf6DBSk0aGJxfSNk\n1neRJesKN5x41bXQmH1L+WGLAqsS33YEblt7kuIP9PlzTOjHmasTgMNmlN+TxCJZ\n+Nm3zST7vNX37toELmgskFEm3+515cbJpID27PXgXIUeH7TtJAIln6s7aBLc6sn6\nkR2Do2imYV62V9qPrmIzWnME1crstrIxyX1aQbnVCUIZPB/fWg39BFkcrUdnaJvz\neV/vaSCtMA5FzIOdo1P8YdPflpFiu9Ag06L7WGZsYHTNB48iSbYtCOr2ZXiKqZ+O\nr9DzmhCZ03UIg2upDNu0E92yyWfH8BENIHVVutGDmAAsKZzpbI4kNbY8oOgzyDWK\ne5ETbyZYhIkvZgN8bBFfuI+/zRazEc/RauCQi8CoiIlPJa60kCZYadsL2MQkoai5\nK6iNa1mrTI96E8SBor3I\n=FCz6\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a9e8d6e6addaec2a0b865501f8d896e818b639af\nparent 44bca8d2f4a1753e1ab15d7306d3f11a63631978\nauthor qwqcode <22412567+qwqcode@users.noreply.github.com> 1710680502 +0800\ncommitter GitHub <noreply@github.com> 1710680502 +0800\n\nperf(db): optimize N+1 query in comment list (#799)\n\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/b60cb585b6fcb02a31a9beb230202eed98131997",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/b60cb585b6fcb02a31a9beb230202eed98131997",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/b60cb585b6fcb02a31a9beb230202eed98131997/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44bca8d2f4a1753e1ab15d7306d3f11a63631978",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/44bca8d2f4a1753e1ab15d7306d3f11a63631978",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/44bca8d2f4a1753e1ab15d7306d3f11a63631978"
    }
  ],
  "stats": {
    "total": 150,
    "additions": 127,
    "deletions": 23
  },
  "files": [
    {
      "sha": "117c25365cd0d004f1c8c3dad340d9e5d5c3ecfe",
      "filename": "docker-entrypoint.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/docker-entrypoint.sh",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/docker-entrypoint.sh",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/docker-entrypoint.sh?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -14,11 +14,11 @@ if [ \"$1\" != 'gen' ] && ( [ ! -e /data/artalk.yml ] && [ ! -e /data/artalk-go.ym\n         upMsg+=$'# please unmount the config file volume from your container\\n'\n         upMsg+=$'# and edit \"/data/artalk.yml\" for configuration.'\n         echo \"$upMsg\" > /conf.yml\n-        echo \"$(date) [info] Copy config file from '/conf.yml' to '/data/artalk.yml' for upgrade\"\n+        echo \"$(date) [info][docker] Copy config file from '/conf.yml' to '/data/artalk.yml' for upgrade\"\n     else\n         # Generate new config\n         artalk gen conf /data/artalk.yml\n-        echo \"$(date) [info] Generate new config file to '/data/artalk.yml'\"\n+        echo \"$(date) [info][docker] Generate new config file to '/data/artalk.yml'\"\n     fi\n fi\n "
    },
    {
      "sha": "713e6e43bca30cd79fe42856e087765ed2bd11f1",
      "filename": "internal/dao/cook.go",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fcook.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fcook.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fcook.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -11,8 +11,17 @@ import (\n // ===============\n \n func (dao *Dao) CookComment(c *entity.Comment) entity.CookedComment {\n-\tuser := dao.FetchUserForComment(c)\n-\tpage := dao.FetchPageForComment(c)\n+\tuser := c.User\n+\tif user == nil {\n+\t\tu := dao.FetchUserForComment(c)\n+\t\tuser = &u\n+\t}\n+\n+\tpage := c.Page\n+\tif c.Page == nil {\n+\t\tp := dao.FetchPageForComment(c)\n+\t\tpage = &p\n+\t}\n \n \tmarkedContent, _ := utils.Marked(c.Content)\n \n@@ -39,15 +48,15 @@ func (dao *Dao) CookComment(c *entity.Comment) entity.CookedComment {\n \t\tVoteUp:         c.VoteUp,\n \t\tVoteDown:       c.VoteDown,\n \t\tPageKey:        c.PageKey,\n-\t\tPageURL:        dao.GetPageAccessibleURL(&page),\n+\t\tPageURL:        dao.GetPageAccessibleURL(page),\n \t\tSiteName:       c.SiteName,\n \t}\n }\n \n-func (dao *Dao) CookAllComments(comments []entity.Comment) []entity.CookedComment {\n+func (dao *Dao) CookAllComments(comments []*entity.Comment) []entity.CookedComment {\n \tcookedComments := []entity.CookedComment{}\n \tfor _, c := range comments {\n-\t\tcookedComments = append(cookedComments, dao.CookComment(&c))\n+\t\tcookedComments = append(cookedComments, dao.CookComment(c))\n \t}\n \treturn cookedComments\n }"
    },
    {
      "sha": "ce378464b15da1a30b0b56df81b55cf167ec3579",
      "filename": "internal/dao/migrate.go",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fmigrate.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fmigrate.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fmigrate.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -2,10 +2,50 @@ package dao\n \n import (\n \t\"github.com/ArtalkJS/Artalk/internal/entity\"\n+\t\"github.com/ArtalkJS/Artalk/internal/log\"\n )\n \n func (dao *Dao) MigrateModels() {\n+\t// Upgrade the database\n+\tdao.migrateRootID()\n+\n \t// Migrate the schema\n \tdao.DB().AutoMigrate(&entity.Site{}, &entity.Page{}, &entity.User{},\n \t\t&entity.Comment{}, &entity.Notify{}, &entity.Vote{}) // 注意表的创建顺序，因为有关联字段\n }\n+\n+func (dao *Dao) migrateRootID() {\n+\tconst TAG = \"[DB Migrator] \"\n+\n+\tif !dao.DB().Migrator().HasTable(&entity.Comment{}) {\n+\t\treturn\n+\t}\n+\tif dao.DB().Migrator().HasColumn(&entity.Comment{}, \"root_id\") {\n+\t\treturn\n+\t}\n+\tdao.DB().Migrator().AddColumn(&entity.Comment{}, \"root_id\")\n+\n+\tbatchSize := 1000\n+\tvar offset uint = 0\n+\tfor {\n+\t\tvar comments []entity.Comment\n+\t\tdao.DB().Limit(batchSize).Offset(int(offset)).Find(&comments)\n+\n+\t\tif len(comments) == 0 {\n+\t\t\tbreak\n+\t\t}\n+\n+\t\tfor i := range comments {\n+\t\t\tif comments[i].Rid != 0 {\n+\t\t\t\trootID := dao.FindCommentRootID(comments[i].Rid)\n+\t\t\t\tcomments[i].RootID = rootID\n+\t\t\t}\n+\t\t\tdao.DB().Save(&comments[i])\n+\t\t}\n+\n+\t\toffset += uint(batchSize)\n+\t\tlog.Debug(TAG, \"Processed \", offset, \" comments\")\n+\t}\n+\n+\tlog.Info(TAG, \"Root IDs generated successfully.\")\n+}"
    },
    {
      "sha": "0f7719d686a14b318bb4ed1c4aa1162c55fff8a6",
      "filename": "internal/dao/query_find.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fquery_find.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fquery_find.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -34,6 +34,18 @@ func (dao *Dao) FindComment(id uint, checkers ...func(*entity.Comment) bool) ent\n \treturn comment\n }\n \n+func (dao *Dao) FindCommentRootID(rid uint) uint {\n+\tfor rid != 0 {\n+\t\tvar comment entity.Comment\n+\t\tdao.DB().First(&comment, rid)\n+\t\tif comment.Rid == 0 {\n+\t\t\treturn comment.ID\n+\t\t}\n+\t\trid = comment.Rid\n+\t}\n+\treturn 0\n+}\n+\n // (Cached：parent-comments)\n func (dao *Dao) FindCommentChildrenShallow(parentID uint, checkers ...func(*entity.Comment) bool) []entity.Comment {\n \tvar children []entity.Comment"
    },
    {
      "sha": "727dba18970085b3215bde8451dd6a311b5da371",
      "filename": "internal/dao/query_find_test.go",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fquery_find_test.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fdao%2Fquery_find_test.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fdao%2Fquery_find_test.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -47,6 +47,24 @@ func TestFindComment(t *testing.T) {\n \t}\n }\n \n+func TestFindCommentRootID(t *testing.T) {\n+\tapp, _ := test.NewTestApp()\n+\tdefer app.Cleanup()\n+\n+\ttests := []struct {\n+\t\trid    uint\n+\t\trootID uint\n+\t}{\n+\t\t{0, 0},\n+\t\t{1002, 1000},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tgot := app.Dao().FindCommentRootID(tt.rid)\n+\t\tassert.Equal(t, tt.rootID, got)\n+\t}\n+}\n+\n func TestFindCommentChildrenShallow(t *testing.T) {\n \tapp, _ := test.NewTestApp()\n \tdefer app.Cleanup()"
    },
    {
      "sha": "596c1bee68cf9cd6a9aeacb1f07a8a39db4d905c",
      "filename": "internal/entity/comment.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fentity%2Fcomment.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/internal%2Fentity%2Fcomment.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fentity%2Fcomment.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -25,6 +25,11 @@ type Comment struct {\n \n \tVoteUp   int\n \tVoteDown int\n+\n+\tRootID   uint       `gorm:\"index\"` // 根评论 ID\n+\tChildren []*Comment `gorm:\"foreignKey:root_id;references:id\"`\n+\tPage     *Page      `gorm:\"foreignKey:page_key;references:key\"`\n+\tUser     *User      `gorm:\"foreignKey:id;references:user_id\"`\n }\n \n func (c Comment) IsEmpty() bool {"
    },
    {
      "sha": "1815c90e0cd38cf10dab33890a99e901d427d103",
      "filename": "scripts/benchmark.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/scripts%2Fbenchmark.sh",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/scripts%2Fbenchmark.sh",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/scripts%2Fbenchmark.sh?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -1,3 +1,3 @@\n #!/bin/bash\n \n-bombardier -c 125 -d 10s -b \"site_name=ArtalkDocs&page_key=https%3A%2F%2Fartalk.js.org%2Fguide%2Fintro.html&limit=20&offset=0\" -m GET -H \"Origin: http://127.0.0.1:5173\" -H \"Content-Type: application/x-www-form-urlencoded\" http://127.0.0.1:23366/api/v2/comments\n+bombardier -c 125 -d 10s -m GET \"http://127.0.0.1:23366/api/v2/comments?limit=10&offset=0&flat_mode=false&page_key=https%3A%2F%2Fartalk.js.org%2Fguide%2Fintro.html&site_name=ArtalkDocs\""
    },
    {
      "sha": "06d28506df92bc44fde3c0996b455121a6e20d11",
      "filename": "server/handler/comment_create.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomment_create.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomment_create.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomment_create.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -127,7 +127,8 @@ func CommentCreate(app *core.App, router fiber.Router) {\n \t\t\tIP:     ip,\n \t\t\tUA:     ua,\n \n-\t\t\tRid: p.Rid,\n+\t\t\tRid:    p.Rid,\n+\t\t\tRootID: app.Dao().FindCommentRootID(p.Rid),\n \n \t\t\tIsPending:   false,\n \t\t\tIsCollapsed: false,"
    },
    {
      "sha": "e229df107592fd987c90e2e902a98204415d736a",
      "filename": "server/handler/comment_list.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomment_list.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomment_list.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomment_list.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -113,14 +113,14 @@ func CommentList(app *core.App, router fiber.Router) {\n \t\t\tOnlyRoot: !p.FlatMode,\n \t\t})\n \n-\t\t// Transform\n-\t\tcomments := app.Dao().CookAllComments(rawComments)\n+\t\tvar comments []entity.CookedComment\n \n \t\t// Find extra comments\n \t\tif p.FlatMode {\n-\t\t\tcomments = cog.FindLinkedComments(app.Dao(), comments)\n+\t\t\t// Transform\n+\t\t\tcomments = cog.FindLinkedComments(app.Dao(), app.Dao().CookAllComments(rawComments))\n \t\t} else {\n-\t\t\tcomments = cog.FindChildComments(app.Dao(), user, comments)\n+\t\t\tcomments = app.Dao().CookAllComments(cog.FlattenChildComments(app.Dao(), user, rawComments))\n \t\t}\n \n \t\t// Get IP region"
    },
    {
      "sha": "72aa506927d5f0318fd4a9fa0c5f9cff8d84025e",
      "filename": "server/handler/comments_get/base.go",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomments_get%2Fbase.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomments_get%2Fbase.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomments_get%2Fbase.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -75,8 +75,8 @@ type FindOptions struct {\n }\n \n // Find comments by options\n-func FindComments(dao *dao.Dao, opts QueryOptions, pg FindOptions) []entity.Comment {\n-\tvar comments []entity.Comment\n+func FindComments(dao *dao.Dao, opts QueryOptions, pg FindOptions) []*entity.Comment {\n+\tvar comments []*entity.Comment\n \n \tq := dao.DB().Model(&entity.Comment{}).\n \t\tScopes(GetQueryScopes(dao, opts))\n@@ -90,6 +90,8 @@ func FindComments(dao *dao.Dao, opts QueryOptions, pg FindOptions) []entity.Comm\n \tif pg.OnlyRoot {\n \t\t// Nested mode get only the root comments\n \t\tq.Scopes(OnlyRoot())\n+\n+\t\tq.Preload(\"Children\").Preload(\"User\").Preload(\"Page\").Preload(\"Children.User\").Preload(\"Children.Page\")\n \t}\n \n \tq.Find(&comments)"
    },
    {
      "sha": "d14d864f345a3e06a32fe9bae32ce4cf559ecf86",
      "filename": "server/handler/comments_get/utils_list.go",
      "status": "modified",
      "additions": 23,
      "deletions": 6,
      "changes": 29,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomments_get%2Futils_list.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fcomments_get%2Futils_list.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fcomments_get%2Futils_list.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -1,20 +1,35 @@\n package comments_get\n \n import (\n+\t\"slices\"\n+\n \t\"github.com/ArtalkJS/Artalk/internal/core\"\n \t\"github.com/ArtalkJS/Artalk/internal/dao\"\n \t\"github.com/ArtalkJS/Artalk/internal/entity\"\n \t\"github.com/ArtalkJS/Artalk/internal/log\"\n )\n \n // Find all child comments (for nested mode)\n-func FindChildComments(dao *dao.Dao, user entity.User, comments []entity.CookedComment) []entity.CookedComment {\n-\tfor _, parent := range comments { // TODO: Consider add a feature, read more children, pagination for children comment\n-\t\tchildren := dao.FindCommentChildren(parent.ID, NoPendingChecker(user))\n-\t\tcomments = append(comments, dao.CookAllComments(children)...)\n+func FlattenChildComments(dao *dao.Dao, user entity.User, comments []*entity.Comment) []*entity.Comment {\n+\tflatten := make([]*entity.Comment, 0)\n+\tqueue := make([]*entity.Comment, len(comments))\n+\tcopy(queue, comments)\n+\n+\tfor len(queue) > 0 {\n+\t\tc := queue[0]     // get the first element\n+\t\tqueue = queue[1:] // dequeue\n+\n+\t\tif !NoPendingChecker(user)(c) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tflatten = append(flatten, c)\n+\n+\t\t// add children to the end of the queue\n+\t\tqueue = append(queue, c.Children...)\n \t}\n \n-\treturn comments\n+\treturn flatten\n }\n \n // Find all linked comments (for flat mode)\n@@ -28,7 +43,9 @@ func FindLinkedComments(app *dao.Dao, comments []entity.CookedComment) []entity.\n \t\t}\n \n \t\t// If comment is already in the list, skip\n-\t\tif entity.ContainsCookedComment(comments, comment.Rid) {\n+\t\tif slices.ContainsFunc(comments, func(c entity.CookedComment) bool {\n+\t\t\treturn c.ID == comment.Rid\n+\t\t}) {\n \t\t\tcontinue\n \t\t}\n "
    },
    {
      "sha": "b4cce5717081308df8be26de8dfa06be6da8cf8a",
      "filename": "server/handler/stat.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fstat.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/b60cb585b6fcb02a31a9beb230202eed98131997/server%2Fhandler%2Fstat.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/server%2Fhandler%2Fstat.go?ref=b60cb585b6fcb02a31a9beb230202eed98131997",
      "patch": "@@ -70,7 +70,7 @@ func Stat(app *core.App, router fiber.Router) {\n \t\tswitch queryType {\n \t\tcase \"latest_comments\":\n \t\t\t// 最新评论\n-\t\t\tvar comments []entity.Comment\n+\t\t\tvar comments []*entity.Comment\n \t\t\tapp.Dao().DB().Scopes(QueryComments).\n \t\t\t\tOrder(\"created_at DESC\").\n \t\t\t\tLimit(p.Limit).\n@@ -166,7 +166,7 @@ func Stat(app *core.App, router fiber.Router) {\n \n \t\tcase \"rand_comments\":\n \t\t\t// 随机评论\n-\t\t\tvar comments []entity.Comment\n+\t\t\tvar comments []*entity.Comment\n \t\t\tapp.Dao().DB().Scopes(QueryComments, QueryOrderRand).\n \t\t\t\tLimit(p.Limit).\n \t\t\t\tFind(&comments)"
    }
  ]
}
