{
  "sha": "d75b60f3e5fc292268724b82c533c008b9822467",
  "node_id": "MDY6Q29tbWl0Mzg3ODYxOTU6ZDc1YjYwZjNlNWZjMjkyMjY4NzI0YjgyYzUzM2MwMDhiOTgyMjQ2Nw==",
  "commit": {
    "author": {
      "name": "Paul Vorbach",
      "email": "paul@vorba.ch",
      "date": "2016-02-16T23:53:05Z"
    },
    "committer": {
      "name": "Paul Vorbach",
      "email": "paul@vorba.ch",
      "date": "2016-02-16T23:53:05Z"
    },
    "message": "Merge branch 'release/0.1.0'",
    "tree": {
      "sha": "c496a57fbeb2df428905a2d6b40688d69d0b1a1c",
      "url": "https://api.github.com/repos/pvorb/platon/git/trees/c496a57fbeb2df428905a2d6b40688d69d0b1a1c"
    },
    "url": "https://api.github.com/repos/pvorb/platon/git/commits/d75b60f3e5fc292268724b82c533c008b9822467",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/pvorb/platon/commits/d75b60f3e5fc292268724b82c533c008b9822467",
  "html_url": "https://github.com/pvorb/platon/commit/d75b60f3e5fc292268724b82c533c008b9822467",
  "comments_url": "https://api.github.com/repos/pvorb/platon/commits/d75b60f3e5fc292268724b82c533c008b9822467/comments",
  "author": {
    "login": "pvorb",
    "id": 183534,
    "node_id": "MDQ6VXNlcjE4MzUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/183534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pvorb",
    "html_url": "https://github.com/pvorb",
    "followers_url": "https://api.github.com/users/pvorb/followers",
    "following_url": "https://api.github.com/users/pvorb/following{/other_user}",
    "gists_url": "https://api.github.com/users/pvorb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pvorb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pvorb/subscriptions",
    "organizations_url": "https://api.github.com/users/pvorb/orgs",
    "repos_url": "https://api.github.com/users/pvorb/repos",
    "events_url": "https://api.github.com/users/pvorb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pvorb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "pvorb",
    "id": 183534,
    "node_id": "MDQ6VXNlcjE4MzUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/183534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pvorb",
    "html_url": "https://github.com/pvorb",
    "followers_url": "https://api.github.com/users/pvorb/followers",
    "following_url": "https://api.github.com/users/pvorb/following{/other_user}",
    "gists_url": "https://api.github.com/users/pvorb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pvorb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pvorb/subscriptions",
    "organizations_url": "https://api.github.com/users/pvorb/orgs",
    "repos_url": "https://api.github.com/users/pvorb/repos",
    "events_url": "https://api.github.com/users/pvorb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pvorb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c5470aec46c06f4d82366be38650dfe28380d5a",
      "url": "https://api.github.com/repos/pvorb/platon/commits/5c5470aec46c06f4d82366be38650dfe28380d5a",
      "html_url": "https://github.com/pvorb/platon/commit/5c5470aec46c06f4d82366be38650dfe28380d5a"
    },
    {
      "sha": "24ff64377224a2c5ee1b4f6431db54880463d276",
      "url": "https://api.github.com/repos/pvorb/platon/commits/24ff64377224a2c5ee1b4f6431db54880463d276",
      "html_url": "https://github.com/pvorb/platon/commit/24ff64377224a2c5ee1b4f6431db54880463d276"
    }
  ],
  "stats": {
    "total": 2395,
    "additions": 2395,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5b0c19ee6c5bbee3d53b58cc16c73bc3141bd96a",
      "filename": ".gitignore",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/.gitignore",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/.gitignore",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/.gitignore?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,6 @@\n+/target/\n+/.idea/\n+/*.iml\n+/*.db\n+\n+/src/main/resources/bower_components/"
    },
    {
      "sha": "9d80c4a8c0389b8c9069bfb0170f6a8476b249d0",
      "filename": ".gitlab-ci.yml",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/.gitlab-ci.yml",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/.gitlab-ci.yml",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/.gitlab-ci.yml?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,22 @@\n+image: maven:3-jdk-8\n+\n+before_script:\n+  - export MAVEN_OPTS=\"-Xms256m -Xmx512m -Dmaven.repo.local=.m2/repository\"\n+\n+cache:\n+  key: \"$CI_BUILD_NAME\"\n+  untracked: true\n+\n+stages:\n+  - build\n+  - test\n+\n+compile:\n+  stage: build\n+  script:\n+    - mvn -B compile\n+\n+tests:\n+  stage: test\n+  script:\n+    - mvn -B test"
    },
    {
      "sha": "69d34662b9225947a0bf4bccd10b795d6f90023e",
      "filename": "LICENSE",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/LICENSE",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/LICENSE",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/LICENSE?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2016 Paul Vorbach\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
    },
    {
      "sha": "e3aa3c03eed72b25f36d84fdf33672757153ec15",
      "filename": "README.md",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/README.md",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/README.md",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/README.md?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -1 +1,31 @@\n # platon\n+\n+A comment server similar to disqus and isso\n+\n+\n+## Development\n+\n+### Build\n+\n+~~~\n+mvn clean package\n+~~~\n+\n+### Run\n+\n+~~~\n+mvn spring-boot:run\n+~~~\n+\n+By default, the server will start under [localhost:8080](http://localhost:8080/).\n+\n+### Test\n+\n+~~~\n+mvn clean test\n+~~~\n+\n+\n+## License\n+\n+The MIT License (MIT)"
    },
    {
      "sha": "33dd56ebca4ecbcf45b946fa7fcbb6d9ecf100a3",
      "filename": "pom.xml",
      "status": "added",
      "additions": 186,
      "deletions": 0,
      "changes": 186,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/pom.xml",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/pom.xml",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/pom.xml?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,186 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>de.vorb</groupId>\n+    <artifactId>platon</artifactId>\n+    <version>0.1.0</version>\n+    <packaging>jar</packaging>\n+\n+    <name>Platon</name>\n+    <url>https://gitlab.com/pvorb/platon</url>\n+    <description>A comment server</description>\n+\n+    <scm>\n+        <connection>scm:git:git://gitlab.com/pvorb/platon.git</connection>\n+        <developerConnection>scm:git:ssh://git@gitlab.com:pvorb/platon.git</developerConnection>\n+        <url>https://gitlab.com/pvorb/platon.git</url>\n+    </scm>\n+\n+    <licenses>\n+        <license>\n+            <name>MIT License</name>\n+            <url>http://www.opensource.org/licenses/mit-license.php</url>\n+            <distribution>repo</distribution>\n+        </license>\n+    </licenses>\n+\n+    <developers>\n+        <developer>\n+            <id>pvorb</id>\n+            <name>Paul Vorbach</name>\n+            <email>paul@vorba.ch</email>\n+        </developer>\n+    </developers>\n+\n+    <properties>\n+        <!-- Java version -->\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+\n+        <!-- Dependency versions -->\n+        <guava.version>18.0</guava.version>\n+        <commons-lang.version>3.4</commons-lang.version>\n+        <jackson-jsr310.version>2.6.1</jackson-jsr310.version>\n+        <owasp-java-html.version>1.1</owasp-java-html.version>\n+        <encoder.version>1.2</encoder.version>\n+        <h2.version>1.4.190</h2.version>\n+        <flyway.version>3.2.1</flyway.version>\n+\n+        <!-- Testing -->\n+        <junit.version>4.12</junit.version>\n+        <truth.version>0.28</truth.version>\n+    </properties>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>1.3.2.RELEASE</version>\n+    </parent>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-tomcat</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-undertow</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-jersey</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-tomcat</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-mail</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-freemarker</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-devtools</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>${guava.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>${commons-lang.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.datatype</groupId>\n+            <artifactId>jackson-datatype-jsr310</artifactId>\n+            <version>${jackson-jsr310.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.googlecode.owasp-java-html-sanitizer</groupId>\n+            <artifactId>owasp-java-html-sanitizer</artifactId>\n+            <version>${owasp-java-html.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.owasp.encoder</groupId>\n+            <artifactId>encoder</artifactId>\n+            <version>${encoder.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.flywaydb</groupId>\n+            <artifactId>flyway-core</artifactId>\n+            <version>${flyway.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.truth</groupId>\n+            <artifactId>truth</artifactId>\n+            <version>${truth.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.7.5.201505241946</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>report</id>\n+                        <phase>test</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>"
    },
    {
      "sha": "8c3caec9bee9644780a355a5af3cce35b938bf3b",
      "filename": "src/main/java/de/vorb/platon/PlatonApp.java",
      "status": "added",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2FPlatonApp.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2FPlatonApp.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2FPlatonApp.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,82 @@\n+package de.vorb.platon;\n+\n+import de.vorb.platon.security.HmacRequestVerifier;\n+import de.vorb.platon.security.SecretKeyProvider;\n+import de.vorb.platon.util.CurrentTimeProvider;\n+import de.vorb.platon.util.InputSanitizer;\n+\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n+\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Base64;\n+\n+@SpringBootApplication\n+public class PlatonApp {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PlatonApp.class);\n+\n+    public static void main(String... args) {\n+        SpringApplication.run(PlatonApp.class, args);\n+    }\n+\n+    private final SecretKey secretKey;\n+\n+    public PlatonApp() throws NoSuchAlgorithmException {\n+        secretKey = KeyGenerator.getInstance(HmacRequestVerifier.HMAC_ALGORITHM.toString()).generateKey();\n+\n+        logger.info(\"Secret key: {}\", Base64.getEncoder().encodeToString(secretKey.getEncoded()));\n+    }\n+\n+    @Bean\n+    public WebMvcConfigurerAdapter staticResourceHandlerConfigurer() {\n+        return new WebMvcConfigurerAdapter() {\n+            @Override\n+            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n+                registry.addResourceHandler(\"classpath:/static\");\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    public SecretKeyProvider secretKeyProvider() {\n+        return () -> secretKey;\n+    }\n+\n+    @Bean\n+    public CurrentTimeProvider timeProvider() {\n+        return () -> Instant.now();\n+    }\n+\n+    private static final HtmlPolicyBuilder htmlContentPolicyBuilder = new HtmlPolicyBuilder()\n+            .allowUrlProtocols(\"http\", \"https\", \"mailto\")\n+            .allowAttributes(\"href\").onElements(\"a\")\n+            .allowAttributes(\"src\", \"width\", \"height\", \"alt\").onElements(\"img\")\n+            .allowAttributes(\"class\").onElements(\"div\", \"span\");\n+\n+    @Value(\"${platon.input.html_elements}\")\n+    private String htmlElements;\n+\n+    @Bean\n+    public InputSanitizer htmlInputSanitizer() {\n+        final String[] htmlElementList = htmlElements.split(\"\\\\s*,\\\\s*\");\n+\n+        htmlContentPolicyBuilder.allowElements(htmlElementList);\n+\n+        final PolicyFactory htmlContentPolicy = htmlContentPolicyBuilder.toFactory();\n+\n+        return htmlContentPolicy::sanitize;\n+    }\n+\n+}"
    },
    {
      "sha": "df4200edd9a9e249c2d8de46774098aa2ea97436",
      "filename": "src/main/java/de/vorb/platon/model/Comment.java",
      "status": "added",
      "additions": 331,
      "deletions": 0,
      "changes": 331,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FComment.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FComment.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FComment.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,331 @@\n+package de.vorb.platon.model;\n+\n+\n+import de.vorb.platon.web.rest.json.ByteArraySerializer;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.codec.digest.MessageDigestAlgorithms;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+\n+@Entity\n+@Table(name = \"COMMENTS\")\n+public class Comment {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(Comment.class);\n+\n+    private static final int LIMIT_AUTHOR = 128;\n+    private static final int LIMIT_URL = 256;\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"comment_id_seq_gen\")\n+    @SequenceGenerator(name = \"comment_id_seq_gen\", sequenceName = \"COMMENT_ID_SEQ\", allocationSize = 1)\n+    private Long id;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"THREAD_ID\", nullable = false)\n+    @JsonIgnore\n+    private CommentThread thread;\n+\n+    @OneToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"PARENT_ID\", nullable = true)\n+    @JsonIgnore\n+    private Comment parent;\n+\n+    @Column(name = \"CREATION_DATE\", nullable = false)\n+    @CreatedDate\n+    private Instant creationDate;\n+\n+    @Column(name = \"LAST_MODIFICATION_DATE\", nullable = false)\n+    @LastModifiedDate\n+    private Instant lastModificationDate;\n+\n+    @Column(name = \"STATUS\", nullable = false)\n+    private Status status = Status.PUBLIC;\n+\n+    @Column(name = \"TEXT\", nullable = false)\n+    @Lob\n+    private String text;\n+\n+    @Column(name = \"AUTHOR\", length = LIMIT_AUTHOR, nullable = true)\n+    private String author;\n+\n+    @Column(name = \"EMAIL_HASH\", columnDefinition = \"BINARY(16) NULL\")\n+    @JsonSerialize(using = ByteArraySerializer.class)\n+    private byte[] emailHash;\n+\n+    @Column(name = \"URL\", length = LIMIT_URL, nullable = true)\n+    private String url;\n+\n+    protected Comment() {}\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public CommentThread getThread() {\n+        return thread;\n+    }\n+\n+    public void setThread(CommentThread thread) {\n+        this.thread = thread;\n+    }\n+\n+    public Comment getParent() {\n+        return parent;\n+    }\n+\n+    protected void setParent(Comment parent) {\n+        this.parent = parent;\n+    }\n+\n+    public Long getParentId() {\n+        return parent != null ? parent.getId() : null;\n+    }\n+\n+    protected void setParentId(Long parentId) {\n+        if (parentId != null) {\n+            parent = new Comment();\n+            parent.setId(parentId);\n+        } else if (parent != null) {\n+            parent = null;\n+        }\n+    }\n+\n+    public Instant getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(Instant creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public Instant getLastModificationDate() {\n+        return lastModificationDate;\n+    }\n+\n+    public void setLastModificationDate(Instant lastModificationDate) {\n+        this.lastModificationDate = lastModificationDate;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    protected void setStatus(Status status) {\n+        Preconditions.checkNotNull(status);\n+        this.status = status;\n+    }\n+\n+    public String getText() {\n+        return text;\n+    }\n+\n+    public void setText(String text) {\n+        Preconditions.checkNotNull(text);\n+        this.text = text;\n+    }\n+\n+    public String getAuthor() {\n+        return author;\n+    }\n+\n+    public void setAuthor(String author) {\n+        this.author = StringUtils.left(author, LIMIT_AUTHOR);\n+    }\n+\n+    public byte[] getEmailHash() {\n+        return emailHash;\n+    }\n+\n+    protected void setEmailHash(byte[] emailHash) {\n+        Preconditions.checkArgument(emailHash == null || emailHash.length == 16, \"emailHash has invalid length\");\n+        this.emailHash = emailHash;\n+    }\n+\n+    protected void setEmail(String email) {\n+        if (email == null) {\n+            this.emailHash = null;\n+            return;\n+        }\n+\n+        final byte[] stringBytes = email.getBytes(StandardCharsets.UTF_8);\n+        try {\n+            emailHash = MessageDigest.getInstance(MessageDigestAlgorithms.MD5).digest(stringBytes);\n+        } catch (NoSuchAlgorithmException e) {\n+            logger.error(\"No implementation of MessageDigest algorithm MD5 available on this platform\");\n+        }\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = StringUtils.left(url, LIMIT_URL);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Comment comment = (Comment) o;\n+        return Objects.equals(id, comment.id) &&\n+                Objects.equals(thread, comment.thread) &&\n+                Objects.equals(parent, comment.parent) &&\n+                Objects.equals(status, comment.status) &&\n+                Objects.equals(text, comment.text) &&\n+                Objects.equals(author, comment.author) &&\n+                Arrays.equals(emailHash, comment.emailHash) &&\n+                Objects.equals(url, comment.url);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, thread, parent, text, author, url) * 31 + Arrays.hashCode(emailHash);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .omitNullValues()\n+                .add(\"id\", id)\n+                .add(\"thread\", thread)\n+                .add(\"text\", text != null && text.length() > 1024\n+                        ? StringUtils.left(text, 1021) + \"...\"\n+                        : text)\n+                .add(\"author\", author)\n+                .toString();\n+    }\n+\n+    public enum Status {\n+        DELETED(0),\n+        PUBLIC(1),\n+        AWAITING_MODERATION(2);\n+\n+        private final int value;\n+\n+        Status(int intValue) {\n+            value = (byte) intValue;\n+        }\n+\n+        @JsonValue\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        public static Status fromValue(int value) {\n+            for (Status status : Status.values()) {\n+                if (status.value == value) {\n+                    return status;\n+                }\n+            }\n+\n+            throw new IllegalArgumentException(\"Unknown status\");\n+        }\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static class Builder {\n+\n+        private final Comment comment = new Comment();\n+\n+        private Builder() {}\n+\n+        public Builder id(Long id) {\n+            comment.setId(id);\n+            return this;\n+        }\n+\n+        public Builder thread(CommentThread thread) {\n+            comment.setThread(thread);\n+            return this;\n+        }\n+\n+        public Builder parent(Comment parentComment) {\n+            comment.setParent(parentComment);\n+            return this;\n+        }\n+\n+        public Builder parentId(Long parentId) {\n+            comment.setParentId(parentId);\n+            return this;\n+        }\n+\n+        public Builder creationDate(Instant creationDate) {\n+            comment.setCreationDate(creationDate);\n+            return this;\n+        }\n+\n+        public Builder modificationDate(Instant modificationDate) {\n+            comment.setLastModificationDate(modificationDate);\n+            return this;\n+        }\n+\n+        public Builder text(String text) {\n+            comment.setText(text);\n+            return this;\n+        }\n+\n+        public Builder author(String author) {\n+            comment.setAuthor(author);\n+            return this;\n+        }\n+\n+        public Builder emailHash(byte[] emailHash) {\n+            comment.setEmailHash(emailHash);\n+            return this;\n+        }\n+\n+        public Builder email(String email) {\n+            comment.setEmail(email);\n+            return this;\n+        }\n+\n+        public Builder url(String url) {\n+            comment.setUrl(url);\n+            return this;\n+        }\n+\n+        public Comment build() {\n+            return comment;\n+        }\n+\n+    }\n+\n+}"
    },
    {
      "sha": "8824c6101f3f0480dde34537c47cc5593499b9bf",
      "filename": "src/main/java/de/vorb/platon/model/CommentThread.java",
      "status": "added",
      "additions": 139,
      "deletions": 0,
      "changes": 139,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThread.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThread.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThread.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,139 @@\n+package de.vorb.platon.model;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Lists;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.NamedAttributeNode;\n+import javax.persistence.NamedEntityGraph;\n+import javax.persistence.OneToMany;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+import java.util.List;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"THREADS\")\n+@NamedEntityGraph(name = \"CommentThread.detail\", attributeNodes = @NamedAttributeNode(\"comments\"))\n+public class CommentThread {\n+\n+    private static final int LIMIT_URL = 256;\n+    private static final int LIMIT_TITLE = 512;\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"thread_id_seq_gen\")\n+    @SequenceGenerator(name = \"thread_id_seq_gen\", sequenceName = \"THREAD_ID_SEQ\", allocationSize = 1)\n+    private Long id;\n+\n+    @Column(name = \"URL\", length = LIMIT_URL, nullable = false)\n+    private String url;\n+\n+    @Column(name = \"TITLE\", length = LIMIT_TITLE, nullable = true)\n+    private String title;\n+\n+    @OneToMany(mappedBy = \"thread\", fetch = FetchType.LAZY)\n+    private List<Comment> comments;\n+\n+\n+    protected CommentThread() {}\n+\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    protected void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    protected void setUrl(String url) {\n+        this.url = StringUtils.left(url, LIMIT_URL);\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    protected void setTitle(String title) {\n+        this.title = StringUtils.left(title, LIMIT_TITLE);\n+    }\n+\n+    public List<Comment> getComments() {\n+        return this.comments;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        CommentThread that = (CommentThread) o;\n+        return Objects.equals(id, that.id) &&\n+                Objects.equals(url, that.url) &&\n+                Objects.equals(title, that.title);\n+    }\n+\n+    public boolean equalsById(CommentThread commentThread) {\n+        if (this == commentThread) return true;\n+        if (commentThread == null || commentThread.id == null || id == null) return false;\n+        return Objects.equals(id, commentThread.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, url, title);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .omitNullValues()\n+                .add(\"id\", id)\n+                .add(\"url\", url)\n+                .toString();\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static class Builder {\n+\n+        private final CommentThread commentThread = new CommentThread();\n+\n+        private Builder() {\n+            commentThread.comments = Lists.newArrayList();\n+        }\n+\n+        public Builder id(Long id) {\n+            commentThread.setId(id);\n+            return this;\n+        }\n+\n+        public Builder url(String url) {\n+            commentThread.setUrl(url);\n+            return this;\n+        }\n+\n+        public Builder title(String title) {\n+            commentThread.setTitle(title);\n+            return this;\n+        }\n+\n+        public CommentThread build() {\n+            return commentThread;\n+        }\n+\n+    }\n+\n+}"
    },
    {
      "sha": "70df57af486e921ab5de83f33c12fdbd1ad5989d",
      "filename": "src/main/java/de/vorb/platon/persistence/CommentRepository.java",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentRepository.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentRepository.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentRepository.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,24 @@\n+package de.vorb.platon.persistence;\n+\n+import de.vorb.platon.model.Comment;\n+import de.vorb.platon.model.CommentThread;\n+\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+\n+@Repository\n+public interface CommentRepository extends PagingAndSortingRepository<Comment, Long> {\n+\n+    @Query(\"select c from Comment c where c.thread = :thread and c.status > 0 order by c.creationDate asc\")\n+    List<Comment> findByThread(@Param(\"thread\") CommentThread thread);\n+\n+    @Modifying\n+    @Query(\"update Comment c set c.status = :status where c.id = :commentId\")\n+    void setStatus(@Param(\"commentId\") Long commentId, @Param(\"status\") Comment.Status status);\n+\n+}"
    },
    {
      "sha": "85a95e74d4e5336835a30d50762d1a667f9d760f",
      "filename": "src/main/java/de/vorb/platon/persistence/CommentStatusConverter.java",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverter.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverter.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverter.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,24 @@\n+package de.vorb.platon.persistence;\n+\n+import de.vorb.platon.model.Comment;\n+\n+import org.springframework.stereotype.Component;\n+\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+\n+@Component\n+@Converter(autoApply = true)\n+public class CommentStatusConverter implements AttributeConverter<Comment.Status, Integer> {\n+\n+    @Override\n+    public Integer convertToDatabaseColumn(Comment.Status attribute) {\n+        return attribute.getValue();\n+    }\n+\n+    @Override\n+    public Comment.Status convertToEntityAttribute(Integer dbData) {\n+        return Comment.Status.fromValue(dbData);\n+    }\n+\n+}"
    },
    {
      "sha": "0885b3b5539583c2053af75ca914b07a36c0b89a",
      "filename": "src/main/java/de/vorb/platon/persistence/CommentThreadRepository.java",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentThreadRepository.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentThreadRepository.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentThreadRepository.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,17 @@\n+package de.vorb.platon.persistence;\n+\n+import de.vorb.platon.model.CommentThread;\n+\n+import org.springframework.data.jpa.repository.EntityGraph;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public interface CommentThreadRepository extends PagingAndSortingRepository<CommentThread, Long> {\n+\n+    @Transactional(readOnly = true)\n+    @EntityGraph(value = \"CommentThread.detail\", type = EntityGraph.EntityGraphType.LOAD)\n+    CommentThread getByUrl(String url);\n+\n+}"
    },
    {
      "sha": "9f4a6cf016fd552e60b4971d9f6ea87c7dfde7d8",
      "filename": "src/main/java/de/vorb/platon/persistence/Jsr310InstantTimestampConverter.java",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverter.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverter.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverter.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,24 @@\n+package de.vorb.platon.persistence;\n+\n+import org.springframework.stereotype.Component;\n+\n+import javax.persistence.AttributeConverter;\n+import javax.persistence.Converter;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+\n+@Component\n+@Converter(autoApply = true)\n+public class Jsr310InstantTimestampConverter implements AttributeConverter<Instant, Timestamp> {\n+\n+    @Override\n+    public Timestamp convertToDatabaseColumn(Instant attribute) {\n+        return attribute == null ? null : Timestamp.from(attribute);\n+    }\n+\n+    @Override\n+    public Instant convertToEntityAttribute(Timestamp dbData) {\n+        return dbData == null ? null : dbData.toInstant();\n+    }\n+\n+}"
    },
    {
      "sha": "821215c29e0dade97d256f7f8691290130407d6c",
      "filename": "src/main/java/de/vorb/platon/security/HmacRequestVerifier.java",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifier.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifier.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifier.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,66 @@\n+package de.vorb.platon.security;\n+\n+import de.vorb.platon.util.CurrentTimeProvider;\n+\n+import org.apache.commons.codec.digest.HmacAlgorithms;\n+import org.springframework.stereotype.Service;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKey;\n+import javax.inject.Inject;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Arrays;\n+\n+@Service\n+public class HmacRequestVerifier implements RequestVerifier {\n+\n+    public static final HmacAlgorithms HMAC_ALGORITHM = HmacAlgorithms.HMAC_SHA_256;\n+\n+    private final CurrentTimeProvider currentTimeProvider;\n+\n+    private final Mac mac;\n+\n+    @Inject\n+    public HmacRequestVerifier(SecretKeyProvider keyProvider, CurrentTimeProvider currentTimeProvider) {\n+\n+        this.currentTimeProvider = currentTimeProvider;\n+\n+        final SecretKey key = keyProvider.getSecretKey();\n+\n+        try {\n+            mac = Mac.getInstance(HMAC_ALGORITHM.toString());\n+            mac.init(key);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new SecurityException(\n+                    String.format(\"Could not find an implementation of the %s algorithm\", HMAC_ALGORITHM), e);\n+        } catch (InvalidKeyException e) {\n+            throw new SecurityException(\"The supplied key provider returned an invalid key\", e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] getSignatureToken(String identifier, Instant expirationDate) {\n+        final byte[] signatureSource = getSignatureSource(identifier, expirationDate);\n+\n+        return mac.doFinal(signatureSource);\n+    }\n+\n+    private byte[] getSignatureSource(String identifier, Instant expirationDate) {\n+        return String.format(\"%s|%s\", identifier, expirationDate).getBytes(StandardCharsets.UTF_8);\n+    }\n+\n+    @Override\n+    public boolean isRequestValid(String identifier, Instant expirationDate, byte[] signatureToken) {\n+        if (currentTimeProvider.get().isAfter(expirationDate)) {\n+            return false;\n+        }\n+\n+        final byte[] referenceSignature = getSignatureToken(identifier, expirationDate);\n+\n+        return Arrays.equals(signatureToken, referenceSignature);\n+    }\n+\n+}"
    },
    {
      "sha": "b1bd44c1ed04a205e992cdcbdccd3f3b9ed92016",
      "filename": "src/main/java/de/vorb/platon/security/RequestVerifier.java",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FRequestVerifier.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FRequestVerifier.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FRequestVerifier.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,11 @@\n+package de.vorb.platon.security;\n+\n+import java.time.Instant;\n+\n+public interface RequestVerifier {\n+\n+    byte[] getSignatureToken(String identifier, Instant expirationDate);\n+\n+    boolean isRequestValid(String identifier, Instant expirationDate, byte[] signatureToken);\n+\n+}"
    },
    {
      "sha": "9cc6eff787633b51b15fd654c4c38a1c9958a007",
      "filename": "src/main/java/de/vorb/platon/security/SecretKeyProvider.java",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecretKeyProvider.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecretKeyProvider.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecretKeyProvider.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,9 @@\n+package de.vorb.platon.security;\n+\n+import javax.crypto.SecretKey;\n+\n+public interface SecretKeyProvider {\n+\n+    SecretKey getSecretKey();\n+\n+}"
    },
    {
      "sha": "3a4e9f16a5fc859a49503fc18d417c2a7729092d",
      "filename": "src/main/java/de/vorb/platon/security/SecurityException.java",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecurityException.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecurityException.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FSecurityException.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,9 @@\n+package de.vorb.platon.security;\n+\n+public class SecurityException extends RuntimeException {\n+\n+    public SecurityException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+}"
    },
    {
      "sha": "ec276d4a511f915ef877e198a25bc560f70d3f82",
      "filename": "src/main/java/de/vorb/platon/util/CurrentTimeProvider.java",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FCurrentTimeProvider.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FCurrentTimeProvider.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FCurrentTimeProvider.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,7 @@\n+package de.vorb.platon.util;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+@FunctionalInterface\n+public interface CurrentTimeProvider extends Supplier<Instant> {}"
    },
    {
      "sha": "c8a71e3095947514f0bc6c946cf242dbaa763566",
      "filename": "src/main/java/de/vorb/platon/util/InputSanitizer.java",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FInputSanitizer.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FInputSanitizer.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Futil%2FInputSanitizer.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,8 @@\n+package de.vorb.platon.util;\n+\n+@FunctionalInterface\n+public interface InputSanitizer {\n+\n+    String sanitize(String input);\n+\n+}"
    },
    {
      "sha": "f03ec87b4c69f52971696a5e97f4fd595758cccd",
      "filename": "src/main/java/de/vorb/platon/web/mvc/IndexController.java",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Fmvc%2FIndexController.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Fmvc%2FIndexController.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Fmvc%2FIndexController.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,15 @@\n+package de.vorb.platon.web.mvc;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+@Controller\n+public class IndexController {\n+\n+    @RequestMapping(value = \"/\", method = RequestMethod.GET)\n+    public String getIndex() {\n+        return \"index\";\n+    }\n+\n+}"
    },
    {
      "sha": "b852700d3829202659f6bc378918ed6a89bf0d52",
      "filename": "src/main/java/de/vorb/platon/web/rest/CommentResource.java",
      "status": "added",
      "additions": 271,
      "deletions": 0,
      "changes": 271,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResource.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResource.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResource.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,271 @@\n+package de.vorb.platon.web.rest;\n+\n+import de.vorb.platon.model.Comment;\n+import de.vorb.platon.model.CommentThread;\n+import de.vorb.platon.persistence.CommentRepository;\n+import de.vorb.platon.persistence.CommentThreadRepository;\n+import de.vorb.platon.security.RequestVerifier;\n+import de.vorb.platon.util.InputSanitizer;\n+\n+import com.google.common.base.Preconditions;\n+import org.owasp.encoder.Encode;\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.inject.Inject;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Base64;\n+import java.util.List;\n+\n+@Component\n+@Path(\"comments\")\n+@Consumes(MediaType.APPLICATION_JSON)\n+@Produces(MediaType.APPLICATION_JSON)\n+public class CommentResource {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CommentResource.class);\n+\n+    private static final String SIGNATURE_HEADER = \"X-Signature\";\n+\n+    private static final PolicyFactory NO_HTML_POLICY = new HtmlPolicyBuilder().toFactory();\n+\n+\n+    private final CommentThreadRepository threadRepository;\n+    private final CommentRepository commentRepository;\n+\n+    private final RequestVerifier requestVerifier;\n+    private final InputSanitizer inputSanitizer;\n+\n+\n+    @Inject\n+    public CommentResource(CommentThreadRepository threadRepository, CommentRepository commentRepository,\n+            RequestVerifier requestVerifier, InputSanitizer inputSanitizer) {\n+\n+        this.threadRepository = threadRepository;\n+        this.commentRepository = commentRepository;\n+\n+        this.requestVerifier = requestVerifier;\n+        this.inputSanitizer = inputSanitizer;\n+    }\n+\n+\n+    @GET\n+    @Path(\"{id}\")\n+    @Transactional(readOnly = true)\n+    public Comment getComment(\n+            @NotNull @PathParam(\"id\") Long commentId) {\n+\n+        final Comment comment = commentRepository.findOne(commentId);\n+\n+        if (comment == null || comment.getStatus() != Comment.Status.PUBLIC) {\n+            throw new NotFoundException(String.format(\"No comment found with id = %d\", commentId));\n+        } else {\n+            return comment;\n+        }\n+    }\n+\n+\n+    @GET\n+    @Transactional(readOnly = true)\n+    public List<Comment> findCommentsByThreadUrl(\n+            @NotNull @QueryParam(\"threadUrl\") String threadUrl) {\n+\n+        final CommentThread thread = threadRepository.getByUrl(threadUrl);\n+        if (thread == null) {\n+            throw new NotFoundException(String.format(\"No thread found with url = '%s'\", threadUrl));\n+        } else {\n+            return commentRepository.findByThread(thread);\n+        }\n+    }\n+\n+\n+    @POST\n+    @Transactional\n+    public Response postComment(\n+            @NotNull @QueryParam(\"threadUrl\") String threadUrl,\n+            @NotNull @QueryParam(\"title\") String title,\n+            @NotNull Comment comment) {\n+\n+        if (comment.getId() != null) {\n+            throw new BadRequestException(\"Comment id is not null\");\n+        }\n+\n+        CommentThread thread = threadRepository.getByUrl(threadUrl);\n+        if (thread == null) {\n+\n+            thread =\n+                    CommentThread.builder()\n+                            .url(threadUrl)\n+                            .title(title)\n+                            .build();\n+\n+            threadRepository.save(thread);\n+\n+            logger.info(\"Created new {}\", thread);\n+        }\n+\n+        comment.setThread(thread);\n+        comment.setCreationDate(Instant.now());\n+        comment.setLastModificationDate(comment.getCreationDate());\n+\n+        assertParentBelongsToSameThread(comment);\n+\n+        sanitizeComment(comment);\n+\n+        commentRepository.save(comment);\n+\n+        logger.info(\"Posted new comment to {}\", thread);\n+\n+        final URI commentUri = getUriFromId(comment.getId());\n+\n+        final String identifier = commentUri.toString();\n+        final Instant expirationDate = comment.getCreationDate().plus(2, ChronoUnit.HOURS);\n+        final byte[] signature = requestVerifier.getSignatureToken(identifier, expirationDate);\n+\n+        return Response.created(commentUri)\n+                .header(SIGNATURE_HEADER, String.format(\"%s|%s|%s\", identifier, expirationDate,\n+                        Base64.getEncoder().encodeToString(signature)))\n+                .entity(comment)\n+                .build();\n+    }\n+\n+    @Transactional(readOnly = true)\n+    protected void assertParentBelongsToSameThread(Comment comment) {\n+\n+        final Long parentId = comment.getParentId();\n+        if (parentId == null) {\n+            return;\n+        }\n+\n+        final Comment parentComment = commentRepository.findOne(parentId);\n+\n+        if (parentComment == null) {\n+            throw new BadRequestException(\"Parent comment does not exist\");\n+        }\n+\n+        final boolean parentBelongsToSameThread = comment.getThread().equalsById(parentComment.getThread());\n+\n+        if (!parentBelongsToSameThread) {\n+            throw new BadRequestException(\"Parent comment does not belong to same thread\");\n+        }\n+\n+    }\n+\n+\n+    @PUT\n+    @Path(\"{id}\")\n+    @Transactional(noRollbackFor = BadRequestException.class)\n+    public void updateComment(\n+            @NotNull @HeaderParam(SIGNATURE_HEADER) String signature,\n+            @NotNull @PathParam(\"id\") Long commentId,\n+            @NotNull Comment comment) {\n+\n+        if (!commentId.equals(comment.getId())) {\n+            throw new BadRequestException(\n+                    String.format(\"Comment ids do not match (%d != %d)\", comment.getId(), commentId));\n+        }\n+\n+        verifyValidRequest(signature, commentId);\n+\n+        if (commentRepository.exists(commentId)) {\n+\n+            sanitizeComment(comment);\n+\n+            commentRepository.save(comment);\n+\n+        } else {\n+            throw new BadRequestException(String.format(\"Comment with id = %d does not exist\", commentId));\n+        }\n+    }\n+\n+\n+    protected void sanitizeComment(Comment comment) {\n+        if (comment.getAuthor() != null) {\n+            comment.setAuthor(NO_HTML_POLICY.sanitize(comment.getAuthor()));\n+        }\n+\n+        if (comment.getUrl() != null) {\n+            comment.setUrl(Encode.forHtmlAttribute(comment.getUrl()));\n+        }\n+\n+        final String requestText = comment.getText();\n+        final String sanitizedText = inputSanitizer.sanitize(requestText);\n+        comment.setText(sanitizedText);\n+    }\n+\n+\n+    @DELETE\n+    @Path(\"{id}\")\n+    @Transactional\n+    public void deleteComment(\n+            @NotNull @HeaderParam(SIGNATURE_HEADER) String signature,\n+            @NotNull @PathParam(\"id\") Long commentId) {\n+\n+        verifyValidRequest(signature, commentId);\n+\n+        if (commentRepository.exists(commentId)) {\n+\n+            commentRepository.setStatus(commentId, Comment.Status.DELETED);\n+            logger.info(\"Deleted comment with id = {}\", commentId);\n+\n+        } else {\n+            throw new BadRequestException(String.format(\"Comment with id = %d does not exist\", commentId));\n+        }\n+\n+    }\n+\n+    private void verifyValidRequest(String signature, Long commentId) {\n+\n+        final String[] signatureComponents = signature.split(\"\\\\|\");\n+\n+        try {\n+\n+            Preconditions.checkArgument(signatureComponents.length == 3);\n+\n+            final String identifier = signatureComponents[0];\n+            final String referenceIdentifier = getUriFromId(commentId).toString();\n+\n+            Preconditions.checkArgument(identifier.equals(referenceIdentifier));\n+\n+            final Instant expirationDate = Instant.parse(signatureComponents[1]);\n+            final byte[] signatureToken =\n+                    Base64.getDecoder().decode(signatureComponents[2].getBytes(StandardCharsets.UTF_8));\n+\n+            if (!requestVerifier.isRequestValid(identifier, expirationDate, signatureToken)) {\n+                throw new BadRequestException(\"Authentication signature is invalid or has expired\");\n+            }\n+\n+        } catch (IllegalArgumentException | DateTimeParseException e) {\n+            throw new BadRequestException(\"Illegal authentication signature provided\");\n+        }\n+    }\n+\n+    private URI getUriFromId(long commentId) {\n+        return UriBuilder.fromResource(getClass()).segment(\"{id}\").build(commentId);\n+    }\n+\n+}"
    },
    {
      "sha": "a46c356ebd3ad4e8809876c69fda2a87ae317c63",
      "filename": "src/main/java/de/vorb/platon/web/rest/ObjectMapperContextResolver.java",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolver.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolver.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolver.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,24 @@\n+package de.vorb.platon.web.rest;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import javax.ws.rs.ext.ContextResolver;\n+import javax.ws.rs.ext.Provider;\n+\n+@Provider\n+public class ObjectMapperContextResolver implements ContextResolver<ObjectMapper> {\n+\n+    private final ObjectMapper objectMapper;\n+\n+    public ObjectMapperContextResolver() {\n+        objectMapper = new ObjectMapper();\n+        objectMapper.findAndRegisterModules();\n+        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+    }\n+\n+    @Override\n+    public ObjectMapper getContext(Class<?> type) {\n+        return objectMapper;\n+    }\n+}"
    },
    {
      "sha": "0bcd81a437c0924b488138473de47eeba9ce2e10",
      "filename": "src/main/java/de/vorb/platon/web/rest/PoweredByResponseFilter.java",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilter.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilter.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilter.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,14 @@\n+package de.vorb.platon.web.rest;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import java.io.IOException;\n+\n+public class PoweredByResponseFilter implements ContainerResponseFilter {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n+            throws IOException {\n+        responseContext.getHeaders().add(\"X-Powered-By\", \"Platon\");\n+    }\n+}"
    },
    {
      "sha": "123000b64a4658faca797bbd19d4a63a778702ef",
      "filename": "src/main/java/de/vorb/platon/web/rest/RestResourceConfig.java",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfig.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfig.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfig.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,22 @@\n+package de.vorb.platon.web.rest;\n+\n+import org.glassfish.jersey.filter.LoggingFilter;\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.server.spring.scope.RequestContextFilter;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ws.rs.ApplicationPath;\n+\n+@Component\n+@ApplicationPath(\"/api\")\n+public class RestResourceConfig extends ResourceConfig {\n+\n+    public RestResourceConfig() {\n+        register(RequestContextFilter.class);\n+        register(PoweredByResponseFilter.class);\n+        register(CommentResource.class);\n+        register(LoggingFilter.class);\n+        register(ObjectMapperContextResolver.class);\n+    }\n+\n+}"
    },
    {
      "sha": "8a77e910df71d2af424ece1d1620e74be7de12bf",
      "filename": "src/main/java/de/vorb/platon/web/rest/json/ByteArraySerializer.java",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializer.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializer.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializer.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,18 @@\n+package de.vorb.platon.web.rest.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+\n+public class ByteArraySerializer extends JsonSerializer<byte[]> {\n+\n+    @Override\n+    public void serialize(byte[] bytes, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+        final BigInteger bi = new BigInteger(1, bytes);\n+        gen.writeString(String.format(\"%0\" + (bytes.length << 1) + \"x\", bi));\n+    }\n+\n+}"
    },
    {
      "sha": "b723a9b9cbfd3843cb821766e7289ce75586fbbf",
      "filename": "src/main/resources/config/application.properties",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Fconfig%2Fapplication.properties",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Fconfig%2Fapplication.properties",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fresources%2Fconfig%2Fapplication.properties?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,12 @@\n+# database\n+spring.datasource.url = jdbc:h2:file:./platon\n+spring.jpa.database = H2\n+spring.jpa.generate-ddl = false\n+spring.jpa.hibernate.ddl-auto = none\n+\n+# input sanitization\n+platon.input.html_elements = h1, h2, h3, h4, h5, h6,\\\n+                             br, p, hr, div, span,\\\n+                             a, img, em, strong,\\\n+                             ol, ul, li\\\n+                             blockquote, code, pre"
    },
    {
      "sha": "6fa0ecc6de3548e1e3eed2893bc56c3e8376bd5b",
      "filename": "src/main/resources/db/migration/V0.1.0__initial_schema.sql",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Fdb%2Fmigration%2FV0.1.0__initial_schema.sql",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Fdb%2Fmigration%2FV0.1.0__initial_schema.sql",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fresources%2Fdb%2Fmigration%2FV0.1.0__initial_schema.sql?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,35 @@\n+-- sequences\n+CREATE SEQUENCE thread_id_seq START WITH 1 INCREMENT BY 1 CACHE 1;\n+\n+CREATE SEQUENCE comment_id_seq START WITH 1 INCREMENT BY 1 CACHE 1;\n+\n+-- tables\n+CREATE TABLE threads (\n+  id    BIGINT PRIMARY KEY,\n+  url   VARCHAR(256) NOT NULL,\n+  title VARCHAR(512) NULL\n+);\n+\n+CREATE TABLE comments (\n+  id                     BIGINT PRIMARY KEY,\n+  thread_id              BIGINT       NOT NULL,\n+  parent_id              BIGINT       NULL,\n+  creation_date          TIMESTAMP    NOT NULL,\n+  last_modification_date TIMESTAMP    NOT NULL,\n+  status                 TINYINT      NOT NULL,\n+  text                   CLOB         NOT NULL,\n+  author                 VARCHAR(128) NULL,\n+  email_hash             BINARY(16)   NULL,\n+  url                    VARCHAR(256) NULL,\n+  FOREIGN KEY (thread_id) REFERENCES threads (id),\n+  FOREIGN KEY (parent_id) REFERENCES comments (id)\n+);\n+\n+-- indexes\n+CREATE INDEX thread_id_idx ON threads (id);\n+CREATE INDEX thread_url_idx ON threads (url);\n+\n+CREATE INDEX comment_id_idx ON comments (id);\n+CREATE INDEX comment_thread_id_idx ON comments (thread_id);\n+CREATE INDEX comment_creation_date_idx ON comments (creation_date);\n+CREATE INDEX comment_status_idx ON comments (status);"
    },
    {
      "sha": "2d8d6bd7ce1e6f6f4af2ccc90a8efce3b09170e1",
      "filename": "src/main/resources/templates/index.ftl",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Ftemplates%2Findex.ftl",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Fmain%2Fresources%2Ftemplates%2Findex.ftl",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Fmain%2Fresources%2Ftemplates%2Findex.ftl?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,13 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <title>Platon comment server</title>\n+<#include \"head.ftl\" />\n+</head>\n+<body>\n+    <h1>The Platon comment server</h1>\n+\n+    <p><a href=\"https://github.com/pvorb/platon\">GitHub Repository</a></p>\n+</body>\n+</html>"
    },
    {
      "sha": "c28860949abd0d26f3f5f1ac720beee7596409f3",
      "filename": "src/test/java/de/vorb/platon/model/CommentTest.java",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,86 @@\n+package de.vorb.platon.model;\n+\n+import com.google.common.truth.Truth;\n+import org.apache.commons.codec.digest.MessageDigestAlgorithms;\n+import org.junit.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.function.Supplier;\n+\n+public class CommentTest {\n+\n+    @Test\n+    public void testSetParentId() throws Exception {\n+\n+        final Comment comment = new Comment();\n+        final long parentId = 42;\n+\n+        comment.setParentId(parentId);\n+\n+        Truth.assertThat(comment.getParentId()).isEqualTo(parentId);\n+\n+        comment.setParentId(null);\n+\n+        Truth.assertThat(comment.getParent()).isNull();\n+\n+    }\n+\n+    @Test\n+    public void testSetEmail() throws Exception {\n+\n+        final Comment comment = new Comment();\n+        comment.setEmail(null);\n+\n+        Truth.assertThat(comment.getEmailHash()).isNull();\n+\n+        final String emailAddress = \"user@example.com\";\n+        comment.setEmail(emailAddress);\n+\n+        final byte[] referenceHash = MessageDigest.getInstance(MessageDigestAlgorithms.MD5)\n+                .digest(emailAddress.getBytes(StandardCharsets.UTF_8));\n+\n+        Truth.assertThat(Arrays.equals(comment.getEmailHash(), referenceHash)).isTrue();\n+\n+    }\n+\n+    @Test\n+    public void testSetEmailHash() throws Exception {\n+        new Comment().setEmailHash(new byte[16]);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetEmailHashWithInvalidLength() throws Exception {\n+        new Comment().setEmailHash(new byte[0]);\n+    }\n+\n+    @Test\n+    public void testEquals() throws Exception {\n+\n+        final Comment comment = new Comment();\n+        Truth.assertThat(comment).isNotEqualTo(null);\n+        Truth.assertThat(comment).isEqualTo(comment);\n+        Truth.assertThat(comment).isEqualTo(new Comment());\n+\n+        Truth.assertThat(NEW_COMMENT.get()).isEqualTo(NEW_COMMENT.get());\n+    }\n+\n+    @Test\n+    public void testHashCode() throws Exception {\n+        Truth.assertThat(NEW_COMMENT.get().hashCode()).isEqualTo(NEW_COMMENT.get().hashCode());\n+    }\n+\n+    private static final Supplier<Comment> NEW_COMMENT = () -> {\n+        final Comment c = new Comment();\n+        c.setId(2L);\n+        c.setParentId(1L);\n+        c.setThread(new CommentThread());\n+        c.setText(\"Comment text\");\n+        c.setAuthor(\"User\");\n+        c.setEmail(\"user@example.com\");\n+        c.setUrl(\"http://example.com\");\n+        return c;\n+    };\n+\n+}"
    },
    {
      "sha": "6d142484d16dd1cf68581abf21cdc0e54b5045b4",
      "filename": "src/test/java/de/vorb/platon/model/CommentThreadTest.java",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThreadTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThreadTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fmodel%2FCommentThreadTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,60 @@\n+package de.vorb.platon.model;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Test;\n+\n+public class CommentThreadTest {\n+\n+    @Test\n+    public void testEqualsById() throws Exception {\n+\n+        final CommentThread thread1 = CommentThread.builder().id(1L).build();\n+\n+        Truth.assertThat(thread1.equalsById(thread1)).isTrue();\n+\n+        final CommentThread thread1Copy = CommentThread.builder().id(1L).build();\n+\n+        Truth.assertThat(thread1.equalsById(thread1Copy)).isTrue();\n+        Truth.assertThat(thread1Copy.equalsById(thread1)).isTrue();\n+\n+        final CommentThread thread2 = CommentThread.builder().id(2L).build();\n+\n+        Truth.assertThat(thread1.equalsById(thread2)).isFalse();\n+        Truth.assertThat(thread2.equalsById(thread1)).isFalse();\n+\n+        final CommentThread threadWithNullId = new CommentThread();\n+\n+        Truth.assertThat(thread1.equalsById(threadWithNullId)).isFalse();\n+        Truth.assertThat(threadWithNullId.equalsById(thread1)).isFalse();\n+\n+        final CommentThread anotherThreadWithNullId = new CommentThread();\n+\n+        Truth.assertThat(threadWithNullId.equalsById(anotherThreadWithNullId)).isFalse();\n+        Truth.assertThat(anotherThreadWithNullId.equalsById(threadWithNullId)).isFalse();\n+\n+    }\n+\n+    @Test\n+    public void testHashCode() throws Exception {\n+        final String articleUrl = \"http://example.com/article\";\n+        final String articleTitle = \"Article\";\n+\n+        final CommentThread thread1 =\n+                CommentThread.builder()\n+                        .id(42L)\n+                        .url(articleUrl)\n+                        .title(articleTitle)\n+                        .build();\n+\n+        final CommentThread thread2 =\n+                CommentThread.builder()\n+                        .id(42L)\n+                        .url(articleUrl)\n+                        .title(articleTitle)\n+                        .build();\n+\n+        Truth.assertThat(thread1).isEqualTo(thread2);\n+        Truth.assertThat(thread1.hashCode()).isEqualTo(thread2.hashCode());\n+    }\n+\n+}"
    },
    {
      "sha": "c58d73c24831a5f9304d3f51e1b95b9598e2669b",
      "filename": "src/test/java/de/vorb/platon/persistence/CommentStatusConverterTest.java",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverterTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverterTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FCommentStatusConverterTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,41 @@\n+package de.vorb.platon.persistence;\n+\n+import de.vorb.platon.model.Comment;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Test;\n+\n+public class CommentStatusConverterTest {\n+\n+    private final CommentStatusConverter converter = new CommentStatusConverter();\n+\n+    @Test\n+    public void testConvertToDatabaseColumn() throws Exception {\n+        for (Comment.Status status : Comment.Status.values()) {\n+            Truth.assertThat(converter.convertToDatabaseColumn(status)).isEqualTo(status.getValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testConvertToEntityAttribute() throws Exception {\n+        for (Comment.Status status : Comment.Status.values()) {\n+            Truth.assertThat(converter.convertToEntityAttribute(status.getValue())).isEqualTo(status);\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testConvertNullToDatabaseColumn() {\n+        converter.convertToDatabaseColumn(null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testConvertNullToEntityAttribute() {\n+        converter.convertToEntityAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testConvertUnknownByteToEntityAttribute() throws Exception {\n+        converter.convertToEntityAttribute(-1);\n+    }\n+\n+}"
    },
    {
      "sha": "9d87aaca91499fdd51a05519a79f4c52b14939cf",
      "filename": "src/test/java/de/vorb/platon/persistence/Jsr310InstantTimestampConverterTest.java",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverterTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverterTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fpersistence%2FJsr310InstantTimestampConverterTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,32 @@\n+package de.vorb.platon.persistence;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Test;\n+\n+import javax.persistence.AttributeConverter;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+\n+public class Jsr310InstantTimestampConverterTest {\n+\n+    final Jsr310InstantTimestampConverter converter = new Jsr310InstantTimestampConverter();\n+\n+    @Test\n+    public void testInstantTimestampConversion() throws Exception {\n+\n+        final Instant instant = Instant.now();\n+\n+        final Instant converted =\n+                converter.convertToEntityAttribute(\n+                        converter.convertToDatabaseColumn(instant));\n+\n+        Truth.assertThat(converted).isEqualTo(instant);\n+\n+    }\n+\n+    @Test\n+    public void testConversionsWithNull() throws Exception {\n+        Truth.assertThat(converter.convertToDatabaseColumn(null)).isNull();\n+        Truth.assertThat(converter.convertToEntityAttribute(null)).isNull();\n+    }\n+}"
    },
    {
      "sha": "b9bbee915568771bf4f50b22bbe54fda9875d122",
      "filename": "src/test/java/de/vorb/platon/security/HmacRequestVerifierTest.java",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifierTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifierTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2FHmacRequestVerifierTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,101 @@\n+package de.vorb.platon.security;\n+\n+import de.vorb.platon.util.CurrentTimeProvider;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.springframework.test.annotation.Repeat;\n+\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import java.time.Instant;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HmacRequestVerifierTest {\n+\n+    @Mock\n+    private SecretKeyProvider secretKeyProvider;\n+\n+    @Mock\n+    private CurrentTimeProvider currentTimeProvider;\n+\n+    private HmacRequestVerifier requestVerifier;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // generate a secret key once and always return that secret key\n+        final SecretKey secretKey = KeyGenerator.getInstance(\n+                HmacRequestVerifier.HMAC_ALGORITHM.toString()).generateKey();\n+        Mockito.when(secretKeyProvider.getSecretKey()).thenReturn(secretKey);\n+\n+        requestVerifier = new HmacRequestVerifier(secretKeyProvider, currentTimeProvider);\n+\n+    }\n+\n+    @Test(expected = SecurityException.class)\n+    public void testInvalidKey() throws Exception {\n+\n+        Mockito.when(secretKeyProvider.getSecretKey()).thenReturn(null);\n+\n+        new HmacRequestVerifier(secretKeyProvider, currentTimeProvider);\n+\n+    }\n+\n+    @Test\n+    @Repeat(10)\n+    public void testGetSignatureTokenIsRepeatable() throws Exception {\n+\n+        final String identifier = \"comment/1\";\n+        final Instant expirationDate = Instant.now();\n+\n+        final byte[] firstSignatureToken = requestVerifier.getSignatureToken(identifier, expirationDate);\n+        final byte[] secondSignatureToken = requestVerifier.getSignatureToken(identifier, expirationDate);\n+\n+        Truth.assertThat(firstSignatureToken).isEqualTo(secondSignatureToken);\n+\n+    }\n+\n+    @Test\n+    public void testTokenExpiration() throws Exception {\n+\n+        final String identifier = \"comment/1\";\n+\n+        final Instant currentTime = Instant.now();\n+        Mockito.when(currentTimeProvider.get()).thenReturn(currentTime);\n+\n+        final Instant expirationDate = currentTime.minusMillis(1); // token expired 1ms ago\n+        final byte[] signatureToken = requestVerifier.getSignatureToken(identifier, expirationDate);\n+\n+        final boolean validity = requestVerifier.isRequestValid(identifier, expirationDate, signatureToken);\n+\n+        Truth.assertThat(validity).isFalse();\n+\n+    }\n+\n+    @Test\n+    public void testCannotFakeExpirationDate() throws Exception {\n+\n+        final String identifier = \"comment/1\";\n+\n+        final Instant currentTime = Instant.now();\n+        Mockito.when(currentTimeProvider.get()).thenReturn(currentTime);\n+\n+        final Instant expirationDate = currentTime.minusMillis(1);\n+        final byte[] signatureToken = requestVerifier.getSignatureToken(identifier, expirationDate);\n+\n+        // a user attempts to set the expiration date manually (without changing the token)\n+        final Instant fakedExpirationDate = currentTime;\n+\n+        final boolean validity = requestVerifier.isRequestValid(identifier, fakedExpirationDate, signatureToken);\n+\n+        Truth.assertThat(validity).isFalse();\n+\n+    }\n+\n+}"
    },
    {
      "sha": "34a2ea7b544a2791eaed01491d6c87c8304a7e3d",
      "filename": "src/test/java/de/vorb/platon/security/mock/InsecureRequestVerifier.java",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2Fmock%2FInsecureRequestVerifier.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2Fmock%2FInsecureRequestVerifier.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fsecurity%2Fmock%2FInsecureRequestVerifier.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,29 @@\n+package de.vorb.platon.security.mock;\n+\n+import de.vorb.platon.security.RequestVerifier;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.Instant;\n+import java.util.Arrays;\n+\n+public class InsecureRequestVerifier implements RequestVerifier {\n+\n+    @Override\n+    public byte[] getSignatureToken(String identifier, Instant expirationDate) {\n+        try {\n+            return MessageDigest.getInstance(\"SHA-1\").digest(\n+                    String.format(\"%s|%s\", identifier, expirationDate).getBytes(StandardCharsets.UTF_8));\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRequestValid(String identifier, Instant expirationDate, byte[] signatureToken) {\n+        final byte[] referenceSignature = getSignatureToken(identifier, expirationDate);\n+        return Arrays.equals(referenceSignature, signatureToken);\n+    }\n+\n+}"
    },
    {
      "sha": "e570e8e9c7dc9c4016204c533cae2a3f925563d8",
      "filename": "src/test/java/de/vorb/platon/web/rest/CommentResourcePostWithParentTest.java",
      "status": "added",
      "additions": 162,
      "deletions": 0,
      "changes": 162,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourcePostWithParentTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourcePostWithParentTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourcePostWithParentTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,162 @@\n+package de.vorb.platon.web.rest;\n+\n+import de.vorb.platon.model.Comment;\n+import de.vorb.platon.model.CommentThread;\n+import de.vorb.platon.persistence.CommentRepository;\n+import de.vorb.platon.persistence.CommentThreadRepository;\n+import de.vorb.platon.security.RequestVerifier;\n+import de.vorb.platon.util.InputSanitizer;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.Response;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommentResourcePostWithParentTest {\n+\n+    @Mock\n+    private CommentThreadRepository threadRepository;\n+\n+    @Mock\n+    private CommentRepository commentRepository;\n+\n+    @Mock\n+    private RequestVerifier requestVerifier;\n+\n+    private final InputSanitizer htmlInputSanitizer = String::trim;\n+\n+    private CommentResource commentResource;\n+\n+\n+    private CommentThread thread;\n+\n+\n+    private Comment existingParentComment;\n+\n+    private Comment nonExistingParentComment;\n+\n+    private Comment existingParentFromOtherThread;\n+\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        Mockito.when(requestVerifier.getSignatureToken(Mockito.any(), Mockito.any())).thenReturn(new byte[0]);\n+        Mockito.when(requestVerifier.isRequestValid(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(true);\n+\n+\n+        final long threadId = 42;\n+        thread =\n+                Mockito.spy(CommentThread.builder()\n+                        .url(\"http://example.com/article\")\n+                        .title(\"Article\")\n+                        .build());\n+\n+        Mockito.when(thread.getId()).thenReturn(threadId);\n+\n+        Mockito.when(threadRepository.getByUrl(Mockito.eq(thread.getUrl()))).thenReturn(thread);\n+\n+\n+        final long existingParentId = 4711;\n+        existingParentComment =\n+                Mockito.spy(Comment.builder()\n+                        .thread(thread)\n+                        .text(\"Existing parent\")\n+                        .build());\n+        Mockito.when(existingParentComment.getId()).thenReturn(existingParentId);\n+\n+        Mockito.when(commentRepository.findOne(Mockito.eq(existingParentId))).thenReturn(existingParentComment);\n+\n+\n+        final long nonExistingParentId = 4712;\n+        nonExistingParentComment =\n+                Mockito.spy(Comment.builder()\n+                        .thread(thread)\n+                        .text(\"Non-existing parent\")\n+                        .build());\n+        Mockito.when(nonExistingParentComment.getId()).thenReturn(nonExistingParentId);\n+\n+        Mockito.when(commentRepository.findOne(Mockito.eq(nonExistingParentId))).thenReturn(null);\n+\n+\n+        final long otherThreadId = 43;\n+        final CommentThread otherThread =\n+                Mockito.spy(CommentThread.builder()\n+                        .url(\"http://example.com/other-article\")\n+                        .title(\"Other article\")\n+                        .build());\n+        Mockito.when(otherThread.getId()).thenReturn(otherThreadId);\n+\n+        final long existingParentFromOtherThreadId = 4713;\n+        existingParentFromOtherThread =\n+                Mockito.spy(Comment.builder()\n+                        .thread(otherThread)\n+                        .text(\"Existing parent from other thread\")\n+                        .build());\n+        Mockito.when(existingParentFromOtherThread.getId()).thenReturn(existingParentFromOtherThreadId);\n+\n+        Mockito.when(commentRepository.findOne(Mockito.eq(existingParentFromOtherThreadId)))\n+                .thenReturn(existingParentFromOtherThread);\n+\n+        commentResource = new CommentResource(threadRepository, commentRepository, requestVerifier, htmlInputSanitizer);\n+    }\n+\n+    @Test\n+    public void testWithExistingParent() throws Exception {\n+\n+        final Comment newChildComment =\n+                Comment.builder()\n+                        .parent(existingParentComment)\n+                        .text(\"Child\")\n+                        .build();\n+\n+        Mockito.when(commentRepository.save(Mockito.eq(newChildComment))).then(invocation -> {\n+            newChildComment.setId(4711L);\n+            return newChildComment;\n+        });\n+\n+        final Response response = commentResource.postComment(thread.getUrl(), thread.getTitle(), newChildComment);\n+\n+        Truth.assertThat(response.getStatus()).isEqualTo(Response.Status.CREATED.getStatusCode());\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testWithNonExistingParent() throws Exception {\n+\n+        final Comment newChildComment =\n+                Comment.builder()\n+                        .parent(nonExistingParentComment)\n+                        .text(\"Child\")\n+                        .build();\n+\n+        Mockito.when(commentRepository.save(Mockito.eq(newChildComment))).then(invocation -> {\n+            newChildComment.setId(4711L);\n+            return newChildComment;\n+        });\n+\n+        commentResource.postComment(thread.getUrl(), thread.getTitle(), newChildComment);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testWithParentFromOtherThread() throws Exception {\n+\n+        final Comment newChildComment =\n+                Comment.builder()\n+                        .parent(existingParentFromOtherThread)\n+                        .text(\"Child\")\n+                        .build();\n+\n+        commentResource.postComment(thread.getUrl(), thread.getTitle(), newChildComment);\n+\n+    }\n+\n+}"
    },
    {
      "sha": "87045396514d1975ea900b0796d96b62d716db82",
      "filename": "src/test/java/de/vorb/platon/web/rest/CommentResourceTest.java",
      "status": "added",
      "additions": 321,
      "deletions": 0,
      "changes": 321,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourceTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourceTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FCommentResourceTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,321 @@\n+package de.vorb.platon.web.rest;\n+\n+import de.vorb.platon.model.Comment;\n+import de.vorb.platon.model.CommentThread;\n+import de.vorb.platon.persistence.CommentRepository;\n+import de.vorb.platon.persistence.CommentThreadRepository;\n+import de.vorb.platon.security.RequestVerifier;\n+import de.vorb.platon.util.InputSanitizer;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Random;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CommentResourceTest {\n+\n+    private static final CommentThread emptyThread =\n+            CommentThread.builder()\n+                    .url(\"http://example.com/article\")\n+                    .title(\"An empty comment thread\")\n+                    .build();\n+\n+    private static final CommentThread nonEmptyThread =\n+            CommentThread.builder()\n+                    .url(\"http://example.com/article-with-comments\")\n+                    .title(\"A non-empty comment thread\")\n+                    .build();\n+\n+    static {\n+        final Comment comment =\n+                Comment.builder()\n+                        .id(4711L)\n+                        .thread(nonEmptyThread)\n+                        .text(\"Text\")\n+                        .author(\"Author\")\n+                        .build();\n+\n+        nonEmptyThread.getComments().add(comment);\n+    }\n+\n+    @Mock\n+    private CommentRepository commentRepository;\n+\n+    @Mock\n+    private CommentThreadRepository threadRepository;\n+\n+    @Mock\n+    private RequestVerifier requestVerifier;\n+\n+    private final InputSanitizer htmlInputSanitizer = String::trim;\n+\n+    private CommentResource commentResource;\n+\n+    private final Comment updateComment = Comment.builder().id(42L).text(\"Text\").build();\n+    private final String defaultRequestSignature = getSignature(\"comments/42\", Instant.now());\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        Mockito.when(threadRepository.getByUrl(Mockito.eq(null))).thenReturn(null);\n+\n+        Mockito.when(threadRepository.getByUrl(Mockito.eq(emptyThread.getUrl()))).thenReturn(emptyThread);\n+\n+        Mockito.when(threadRepository.getByUrl(Mockito.eq(nonEmptyThread.getUrl()))).thenReturn(nonEmptyThread);\n+\n+        final Random rng = new Random();\n+        Mockito.when(commentRepository.save(Mockito.any(Comment.class))).then(invocation -> {\n+            final Comment comment = invocation.getArgumentAt(0, Comment.class);\n+            comment.setId(rng.nextLong());\n+            return comment;\n+        });\n+\n+        Mockito.when(commentRepository.findByThread(nonEmptyThread)).thenReturn(nonEmptyThread.getComments());\n+\n+        Mockito.when(requestVerifier.getSignatureToken(Mockito.any(), Mockito.any())).thenReturn(new byte[0]);\n+        Mockito.when(requestVerifier.isRequestValid(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(true);\n+\n+        commentResource = new CommentResource(threadRepository, commentRepository, requestVerifier, htmlInputSanitizer);\n+    }\n+\n+    @Test(expected = NotFoundException.class)\n+    public void testGetCommentsByThreadUrlNull() throws Exception {\n+        commentResource.findCommentsByThreadUrl(null);\n+    }\n+\n+    @Test\n+    public void testGetCommentsByThreadUrlEmptyThread() throws Exception {\n+        Truth.assertThat(commentResource.findCommentsByThreadUrl(emptyThread.getUrl())).isEmpty();\n+    }\n+\n+    @Test\n+    public void testGetCommentsByThreadUrlNonEmptyThread() throws Exception {\n+        final List<Comment> comments = commentResource.findCommentsByThreadUrl(nonEmptyThread.getUrl());\n+        Truth.assertThat(comments).isNotEmpty();\n+    }\n+\n+    @Test\n+    public void testGetCommentById() throws Exception {\n+\n+        final Comment comment = Mockito.mock(Comment.class);\n+        Mockito.when(comment.getStatus()).thenReturn(Comment.Status.PUBLIC);\n+        Mockito.when(commentRepository.findOne(Mockito.eq(4711L))).thenReturn(comment);\n+\n+        Truth.assertThat(commentResource.getComment(4711L)).isSameAs(comment);\n+\n+    }\n+\n+    @Test(expected = NotFoundException.class)\n+    public void testGetCommentAwaitingModerationById() throws Exception {\n+\n+        final Comment comment = Mockito.mock(Comment.class);\n+        Mockito.when(comment.getStatus()).thenReturn(Comment.Status.AWAITING_MODERATION);\n+        Mockito.when(commentRepository.findOne(Mockito.eq(4711L))).thenReturn(comment);\n+\n+        commentResource.getComment(4711L);\n+\n+    }\n+\n+    @Test(expected = NotFoundException.class)\n+    public void testGetDeletedCommentById() throws Exception {\n+\n+        final Comment comment = Mockito.mock(Comment.class);\n+        Mockito.when(comment.getStatus()).thenReturn(Comment.Status.DELETED);\n+        Mockito.when(commentRepository.findOne(Mockito.eq(4711L))).thenReturn(comment);\n+\n+        commentResource.getComment(4711L);\n+\n+    }\n+\n+    @Test(expected = NotFoundException.class)\n+    public void testGetCommentIdNotFound() throws Exception {\n+\n+        Mockito.when(commentRepository.findOne(Mockito.anyLong())).thenReturn(null);\n+        commentResource.getComment(4711L);\n+\n+    }\n+\n+    @Test\n+    public void testPostCommentToExistingThread() throws Exception {\n+        final Comment newComment =\n+                Mockito.spy(Comment.builder()\n+                        .thread(nonEmptyThread)\n+                        .text(\"Text\")\n+                        .author(\"Author\")\n+                        .build());\n+\n+        commentResource.postComment(nonEmptyThread.getUrl(), nonEmptyThread.getTitle(), newComment);\n+\n+        Mockito.verify(commentRepository).save(Mockito.same(newComment));\n+    }\n+\n+    @Test\n+    public void testPostCommentToNewThread() throws Exception {\n+        final String threadUrl = \"http://example.com/new-article\";\n+        final String threadTitle = \"New article\";\n+        final Comment newComment =\n+                Mockito.spy(Comment.builder()\n+                        .text(\"Text\")\n+                        .author(\"Author\")\n+                        .build());\n+\n+        commentResource.postComment(threadUrl, threadTitle, newComment);\n+\n+        final ArgumentCaptor<CommentThread> threadCaptor = ArgumentCaptor.forClass(CommentThread.class);\n+        Mockito.verify(threadRepository).save(threadCaptor.capture());\n+\n+        Truth.assertThat(threadCaptor.getValue().getUrl()).isEqualTo(threadUrl);\n+        Truth.assertThat(threadCaptor.getValue().getTitle()).isEqualTo(threadTitle);\n+\n+        Mockito.verify(commentRepository).save(Mockito.same(newComment));\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testPostCommentWithId() throws Exception {\n+        final Comment comment = Comment.builder().id(1337L).build();\n+        commentResource.postComment(\"http://example.com/article\", \"Article\", comment);\n+    }\n+\n+    @Test\n+    public void testUpdateComment() throws Exception {\n+\n+        Mockito.when(commentRepository.exists(Mockito.eq(updateComment.getId()))).thenReturn(true);\n+\n+        commentResource.updateComment(defaultRequestSignature, updateComment.getId(), updateComment);\n+\n+        Mockito.verify(commentRepository).save(updateComment);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testUpdateCommentWithMismatchingId() throws Exception {\n+\n+        commentResource.updateComment(defaultRequestSignature, updateComment.getId() + 1, updateComment);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testUpdateNonExistingComment() throws Exception {\n+\n+        Mockito.when(commentRepository.exists(Mockito.eq(updateComment.getId()))).thenReturn(false);\n+\n+        commentResource.updateComment(defaultRequestSignature, updateComment.getId(), updateComment);\n+\n+    }\n+\n+    @Test\n+    public void testDeleteCommentWithValidRequest() throws Exception {\n+\n+        Mockito.when(commentRepository.exists(42L)).thenReturn(true);\n+\n+        commentResource.deleteComment(defaultRequestSignature, 42L);\n+\n+        Mockito.verify(commentRepository).setStatus(Mockito.eq(42L), Mockito.eq(Comment.Status.DELETED));\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteNonExistingComment() throws Exception {\n+\n+        Mockito.when(commentRepository.exists(42L)).thenReturn(false);\n+\n+        commentResource.deleteComment(defaultRequestSignature, 42L);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteCommentWithInvalidRequest() throws Exception {\n+\n+        final String identifier = \"comments/42\";\n+        final Instant expirationDate = Instant.now();\n+\n+        final String signature = getSignature(identifier, expirationDate);\n+\n+        Mockito.when(requestVerifier.isRequestValid(Mockito.eq(identifier), Mockito.eq(expirationDate), Mockito.any()))\n+                .thenReturn(false);\n+\n+        commentResource.deleteComment(signature, 42L);\n+\n+    }\n+\n+    private String getSignature(String identifier, Instant expirationDate) {\n+        return String.format(\"%s|%s|%s\", identifier, expirationDate,\n+                Base64.getEncoder().encodeToString(\"token\".getBytes()));\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteCommentWithInvalidNumberOfComponentsInSignature() throws Exception {\n+\n+        final String signatureWithInvalidNumberOfComponents = \"comments/42\";\n+        commentResource.deleteComment(signatureWithInvalidNumberOfComponents, 42L);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteCommentWithInvalidBase64EncodedToken() throws Exception {\n+\n+        final String signatureWithBadBase64Encoding = \"comments/42|2016-01-01T00:00:00.000Z|SGVsbG8gV29ybGQ==\";\n+        commentResource.deleteComment(signatureWithBadBase64Encoding, 42L);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteCommentWithNonParseableDateInSignature() throws Exception {\n+\n+        final String signatureWithNonParseableDate = \"comments/42|2016-01-01 00:00:00|SGVsbG8gV29ybGQ=\";\n+        commentResource.deleteComment(signatureWithNonParseableDate, 42L);\n+\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testDeleteCommentWithMismatchingIds() throws Exception {\n+\n+        final long commentId = 42;\n+        final String signatureWithMismatchingId = \"comments/43|2016-01-01T00:00:00.000Z|SGVsbG8gV29ybGQ=\";\n+\n+        commentResource.deleteComment(signatureWithMismatchingId, commentId);\n+\n+    }\n+\n+    @Test\n+    public void testSanitizeComment() throws Exception {\n+\n+        final InputSanitizer inputSanitizer = Mockito.mock(InputSanitizer.class);\n+\n+        final CommentResource commentResource = new CommentResource(\n+                Mockito.mock(CommentThreadRepository.class),\n+                Mockito.mock(CommentRepository.class),\n+                Mockito.mock(RequestVerifier.class),\n+                inputSanitizer\n+        );\n+\n+        final Comment comment = Comment.builder()\n+                .text(\"Some text\")\n+                .url(\"http://example.com/article?param1=foo&param2=bar\")\n+                .author(\"<a href=\\\"http://example.com/\\\">Sam</a>\")\n+                .build();\n+\n+        Mockito.when(inputSanitizer.sanitize(Mockito.eq(comment.getText()))).thenReturn(comment.getText());\n+\n+        commentResource.sanitizeComment(comment);\n+\n+        Mockito.verify(inputSanitizer).sanitize(Mockito.eq(comment.getText()));\n+\n+        Truth.assertThat(comment.getAuthor()).isEqualTo(\"Sam\");\n+        Truth.assertThat(comment.getUrl()).isEqualTo(\"http://example.com/article?param1=foo&amp;param2=bar\");\n+\n+    }\n+\n+}"
    },
    {
      "sha": "d61cf8151120c961d56d5302677094770ca8a710",
      "filename": "src/test/java/de/vorb/platon/web/rest/ObjectMapperContextResolverTest.java",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolverTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolverTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FObjectMapperContextResolverTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,23 @@\n+package de.vorb.platon.web.rest;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.google.common.truth.Truth;\n+import org.junit.Test;\n+\n+public class ObjectMapperContextResolverTest {\n+\n+    @Test\n+    public void testGetContext() throws Exception {\n+\n+        final int writeDatesAsTimestamps = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS.getMask();\n+\n+        final ObjectMapper objectMapper = new ObjectMapperContextResolver().getContext(Object.class);\n+        final int serializationFeatures = objectMapper.getSerializationConfig().getSerializationFeatures();\n+\n+        // assert that write dates as timestampts is NOT enabled\n+        Truth.assertThat(serializationFeatures & writeDatesAsTimestamps).isEqualTo(0);\n+\n+    }\n+\n+}"
    },
    {
      "sha": "4a189f3e6cdc539e1a88b5757ce2b7a285e1557f",
      "filename": "src/test/java/de/vorb/platon/web/rest/PoweredByResponseFilterTest.java",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilterTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilterTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FPoweredByResponseFilterTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,37 @@\n+package de.vorb.platon.web.rest;\n+\n+import com.google.common.truth.Truth;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PoweredByResponseFilterTest {\n+\n+    @Mock\n+    private ContainerRequestContext requestContext;\n+\n+    @Mock\n+    private ContainerResponseContext responseContext;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        Mockito.when(responseContext.getHeaders()).thenReturn(new MultivaluedHashMap<>());\n+    }\n+\n+    @Test\n+    public void testPoweredByHeader() throws Exception {\n+\n+        new PoweredByResponseFilter().filter(requestContext, responseContext);\n+\n+        Truth.assertThat(responseContext.getHeaders()).containsKey(\"X-Powered-By\");\n+\n+    }\n+}"
    },
    {
      "sha": "599f4830014944a06840b2f89093cba04092ff2a",
      "filename": "src/test/java/de/vorb/platon/web/rest/RestResourceConfigTest.java",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfigTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfigTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2FRestResourceConfigTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,28 @@\n+package de.vorb.platon.web.rest;\n+\n+import com.google.common.truth.Truth;\n+import org.glassfish.jersey.filter.LoggingFilter;\n+import org.glassfish.jersey.server.spring.scope.RequestContextFilter;\n+import org.junit.Test;\n+\n+import java.util.Set;\n+\n+public class RestResourceConfigTest {\n+\n+    @Test\n+    public void testConstructor() throws Exception {\n+\n+        final RestResourceConfig restResourceConfig = new RestResourceConfig();\n+\n+        final Set<Class<?>> registeredClasses = restResourceConfig.getClasses();\n+\n+        // assert that the correct resources and filters are registered\n+        Truth.assertThat(registeredClasses).containsExactly(\n+                RequestContextFilter.class,\n+                PoweredByResponseFilter.class,\n+                CommentResource.class,\n+                LoggingFilter.class,\n+                ObjectMapperContextResolver.class);\n+\n+    }\n+}"
    },
    {
      "sha": "ec7ec60f73671db4aad9e3e4578cc2e78ad6e328",
      "filename": "src/test/java/de/vorb/platon/web/rest/json/ByteArraySerializerTest.java",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/pvorb/platon/blob/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializerTest.java",
      "raw_url": "https://github.com/pvorb/platon/raw/d75b60f3e5fc292268724b82c533c008b9822467/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializerTest.java",
      "contents_url": "https://api.github.com/repos/pvorb/platon/contents/src%2Ftest%2Fjava%2Fde%2Fvorb%2Fplaton%2Fweb%2Frest%2Fjson%2FByteArraySerializerTest.java?ref=d75b60f3e5fc292268724b82c533c008b9822467",
      "patch": "@@ -0,0 +1,35 @@\n+package de.vorb.platon.web.rest.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.math.BigInteger;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ByteArraySerializerTest {\n+\n+    @Mock\n+    private JsonGenerator jsonGenerator;\n+\n+    @Mock\n+    private SerializerProvider serializerProvider;\n+\n+    @Test\n+    public void testSerialize() throws Exception {\n+\n+        final String sampleHash = \"341be97d9aff90c9978347f66f945b77\";\n+        final byte[] bytes = new BigInteger(sampleHash, 16).toByteArray();\n+\n+        new ByteArraySerializer().serialize(bytes, jsonGenerator, serializerProvider);\n+\n+        // verify that the byte array is correctly serialized\n+        Mockito.verify(jsonGenerator).writeString(Mockito.eq(sampleHash));\n+\n+    }\n+\n+}"
    }
  ]
}
