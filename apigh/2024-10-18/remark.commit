{
  "sha": "f9d48375676f374f828c7a8e3e3b658928f3827c",
  "node_id": "C_kwDOBtgov9oAKGY5ZDQ4Mzc1Njc2ZjM3NGY4MjhjN2E4ZTNlM2I2NTg5MjhmMzgyN2M",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2024-08-04T22:00:16Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2024-10-15T22:53:12Z"
    },
    "message": "Add Content-Security-Policy and Permissions-Policy headers\n\n`Content-Security-Policy` now restricts resource loading and execution\nto enhance security:\n  - `default-src 'none'`: Disallow all resource loading by default.\n  - `base-uri 'none'`: Prevents the use of `<base>` tag to change the\n  base URL for relative URLs.\n  - `form-action 'none'`: Disallows form submissions.\n  - `connect-src 'self'`: Restricts the origins that can be connected to\n   (via XHR, WebSockets, etc.) to the same origin.\n  - `frame-src 'self'`: Restricts the origins that can be embedded using\n   `<frame>` and `<iframe>` to the same origin (for `/web/` demo\n    endpoint).\n  - `frame-ancestors %s;`: Specifies the origins that are allowed to\n  embed this content in a frame. If no specific origins are allowed, it\n  defaults to `*` (any origin). This enhances security by controlling\n  which sites can embed your content.\n  - `img-src 'self'`: Allows images to be loaded only from the same\n  origin. If `imageProxyEnabled` is true, allows images from any origin\n  (`*`).\n  - `script-src 'self' 'unsafe-inline'`: Allows scripts to be loaded and\n   executed only from the same origin and allows inline scripts.\n  - `style-src 'self' 'unsafe-inline'`: Allows styles to be loaded and\n  applied only from the same origin and allows inline styles.\n  - `font-src data:`: Allows fonts to be loaded from data URIs.\n  - `object-src 'none'`: Disallows the use of `<object>`, `<embed>`, and\n   `<applet>` tags.\n\n`Permissions-Policy` now restricts the use of certain browser features\nwhich we don't use to enhance user privacy and security:\n  - `accelerometer=()`: Disables the use of the accelerometer sensor.\n  - `autoplay=()`: Disables automatic playback of media.\n  - `camera=()`: Disables the use of the camera.\n  - `cross-origin-isolated=()`: Disallows the page from being treated as\n   cross-origin isolated.\n  - `display-capture=()`: Disables the ability to capture the display.\n  - `encrypted-media=()`: Disables the use of Encrypted Media Extensions\n  .\n  - `fullscreen=()`: Disables the ability to use fullscreen mode.\n  - `geolocation=()`: Disables the use of geolocation.\n  - `gyroscope=()`: Disables the use of the gyroscope sensor.\n  - `keyboard-map=()`: Disables the use of the keyboard map.\n  - `magnetometer=()`: Disables the use of the magnetometer sensor.\n  - `microphone=()`: Disables the use of the microphone.\n  - `midi=()`: Disables the use of the MIDI API.\n  - `payment=()`: Disables the Payment Request API.\n  - `picture-in-picture=()`: Disables the use of Picture-in-Picture mode\n  .\n  - `publickey-credentials-get=()`: Disables the use of the Web\n  Authentication API.\n  - `screen-wake-lock=()`: Disables the ability to prevent the screen\n  from dimming.\n  - `sync-xhr=()`: Disables synchronous XMLHttpRequest.\n  - `usb=()`: Disables the use of the USB API.\n  - `xr-spatial-tracking=()`: Disables the use of spatial tracking in\n  WebXR.\n  - `clipboard-read=()`: Disables the ability to read from the clipboard\n  .\n  - `clipboard-write=()`: Disables the ability to write to the clipboard\n  .\n  - `gamepad=()`: Disables the use of the Gamepad API.\n  - `hid=()`: Disables the use of the Human Interface Device API.\n  - `idle-detection=()`: Disables the ability to detect idle state.\n  - `interest-cohort=()`: Disables the use of interest cohort tracking.\n  - `serial=()`: Disables the use of the Serial API.\n  - `unload=()`: Disables the ability to use the `beforeunload` and\n  `unload` events.\n  - `window-management=()`: Disables the ability to use window\n  management APIs.",
    "tree": {
      "sha": "b103f8941b088b9c36c7cccfcb4390545212fe46",
      "url": "https://api.github.com/repos/umputun/remark42/git/trees/b103f8941b088b9c36c7cccfcb4390545212fe46"
    },
    "url": "https://api.github.com/repos/umputun/remark42/git/commits/f9d48375676f374f828c7a8e3e3b658928f3827c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark42/commits/f9d48375676f374f828c7a8e3e3b658928f3827c",
  "html_url": "https://github.com/umputun/remark42/commit/f9d48375676f374f828c7a8e3e3b658928f3827c",
  "comments_url": "https://api.github.com/repos/umputun/remark42/commits/f9d48375676f374f828c7a8e3e3b658928f3827c/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9fb301422921d09e245b18e62576e40aea98947d",
      "url": "https://api.github.com/repos/umputun/remark42/commits/9fb301422921d09e245b18e62576e40aea98947d",
      "html_url": "https://github.com/umputun/remark42/commit/9fb301422921d09e245b18e62576e40aea98947d"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 40,
    "deletions": 39
  },
  "files": [
    {
      "sha": "c2bbfd4b2eadb350e8e24b57d8f536510bf06e1e",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark42/blob/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Fcmd%2Fserver.go",
      "raw_url": "https://github.com/umputun/remark42/raw/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Fcmd%2Fserver.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Fcmd%2Fserver.go?ref=f9d48375676f374f828c7a8e3e3b658928f3827c",
      "patch": "@@ -608,6 +608,7 @@ func (s *ServerCommand) newServerApp(ctx context.Context) (*serverApp, error) {\n \t\tSubscribersOnly:            s.SubscribersOnly,\n \t\tDisableSignature:           s.DisableSignature,\n \t\tDisableFancyTextFormatting: s.DisableFancyTextFormatting,\n+\t\tExternalImageProxy:         s.ImageProxy.CacheExternal,\n \t}\n \n \tsrv.ScoreThresholds.Low, srv.ScoreThresholds.Critical = s.LowScore, s.CriticalScore"
    },
    {
      "sha": "9f38e45b0e50a9f6b40f102b92dc70e8fe29d87d",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 18,
      "deletions": 17,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark42/blob/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "raw_url": "https://github.com/umputun/remark42/raw/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Frest%2Fapi%2Frest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest.go?ref=f9d48375676f374f828c7a8e3e3b658928f3827c",
      "patch": "@@ -70,6 +70,7 @@ type Rest struct {\n \tSubscribersOnly            bool\n \tDisableSignature           bool // prevent signature from being added to headers\n \tDisableFancyTextFormatting bool // disables SmartyPants in the comment text rendering of the posted comments\n+\tExternalImageProxy         bool\n \n \tSSLConfig   SSLConfig\n \thttpsServer *http.Server\n@@ -205,6 +206,7 @@ func (s *Rest) routes() chi.Router {\n \t}\n \trouter := chi.NewRouter()\n \trouter.Use(middleware.Throttle(1000), middleware.RealIP, R.Recoverer(log.Default()))\n+\trouter.Use(securityHeadersMiddleware(s.ExternalImageProxy, s.AllowedAncestors))\n \tif !s.DisableSignature {\n \t\trouter.Use(R.AppInfo(\"remark42\", \"umputun\", s.Version))\n \t}\n@@ -226,11 +228,6 @@ func (s *Rest) routes() chi.Router {\n \t\trouter.Use(corsMiddleware.Handler)\n \t}\n \n-\tif len(s.AllowedAncestors) > 0 {\n-\t\tlog.Printf(\"[INFO] allowed from %+v only\", s.AllowedAncestors)\n-\t\trouter.Use(frameAncestors(s.AllowedAncestors))\n-\t}\n-\n \tipFn := func(ip string) string { return store.HashValue(ip, s.SharedSecret)[:12] } // logger uses it for anonymization\n \tlogInfoWithBody := logger.New(logger.Log(log.Default()), logger.WithBody, logger.IPfn(ipFn), logger.Prefix(\"[INFO]\")).Handler\n \n@@ -623,19 +620,23 @@ func cacheControl(expiration time.Duration, version string) func(http.Handler) h\n \t}\n }\n \n-// frameAncestors is a middleware setting Content-Security-Policy \"frame-ancestors host1 host2 ...\"\n-// prevents loading of comments widgets from any other origins. In case if the list of allowed empty, ignored.\n-func frameAncestors(hosts []string) func(http.Handler) http.Handler {\n-\treturn func(h http.Handler) http.Handler {\n-\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n-\t\t\tif len(hosts) == 0 {\n-\t\t\t\th.ServeHTTP(w, r)\n-\t\t\t\treturn\n+// securityHeadersMiddleware sets security-related headers: Content-Security-Policy and Permissions-Policy\n+func securityHeadersMiddleware(imageProxyEnabled bool, allowedAncestors []string) func(http.Handler) http.Handler {\n+\treturn func(next http.Handler) http.Handler {\n+\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\timgSrc := \"'self'\"\n+\t\t\tif imageProxyEnabled {\n+\t\t\t\timgSrc = \"*\"\n \t\t\t}\n-\t\t\tw.Header().Set(\"Content-Security-Policy\", \"frame-ancestors \"+strings.Join(hosts, \" \")+\";\")\n-\t\t\th.ServeHTTP(w, r)\n-\t\t}\n-\t\treturn http.HandlerFunc(fn)\n+\t\t\tframeAncestors := \"*\"\n+\t\t\tif len(allowedAncestors) > 0 {\n+\t\t\t\tlog.Printf(\"[INFO] frame embedding allowed from %+v only\", allowedAncestors)\n+\t\t\t\tframeAncestors = strings.Join(allowedAncestors, \" \")\n+\t\t\t}\n+\t\t\tw.Header().Set(\"Content-Security-Policy\", fmt.Sprintf(\"default-src 'none'; base-uri 'none'; form-action 'none'; connect-src 'self'; frame-src 'self'; img-src %s; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; font-src data:; object-src 'none'; frame-ancestors %s;\", imgSrc, frameAncestors))\n+\t\t\tw.Header().Set(\"Permissions-Policy\", \"accelerometer=(), autoplay=(), camera=(), cross-origin-isolated=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), xr-spatial-tracking=(), clipboard-read=(), clipboard-write=(), gamepad=(), hid=(), idle-detection=(), interest-cohort=(), serial=(), unload=(), window-management=()\")\n+\t\t\tnext.ServeHTTP(w, r)\n+\t\t})\n \t}\n }\n "
    },
    {
      "sha": "63f19e3481e27ce1d58a65a7fb92d643916c83c8",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 21,
      "deletions": 22,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark42/blob/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Frest%2Fapi%2Frest_test.go",
      "raw_url": "https://github.com/umputun/remark42/raw/f9d48375676f374f828c7a8e3e3b658928f3827c/backend%2Fapp%2Frest%2Fapi%2Frest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark42/contents/backend%2Fapp%2Frest%2Fapi%2Frest_test.go?ref=f9d48375676f374f828c7a8e3e3b658928f3827c",
      "patch": "@@ -320,30 +320,29 @@ func TestRest_cacheControl(t *testing.T) {\n }\n \n func TestRest_frameAncestors(t *testing.T) {\n-\ttbl := []struct {\n-\t\thosts  []string\n-\t\theader string\n-\t}{\n-\t\t{[]string{\"http://example.com\"}, \"frame-ancestors http://example.com;\"},\n-\t\t{[]string{}, \"\"},\n-\t\t{[]string{\"http://example.com\", \"http://example2.com\"}, \"frame-ancestors http://example.com http://example2.com;\"},\n-\t}\n+\tts, _, teardown := startupT(t, func(o *Rest) {\n+\t\to.AllowedAncestors = []string{\"'self'\", \"https://example.com\"}\n+\t})\n \n-\tfor i, tt := range tbl {\n-\t\ttt := tt\n-\t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n-\t\t\treq := httptest.NewRequest(\"GET\", \"http://example.com\", http.NoBody)\n-\t\t\tw := httptest.NewRecorder()\n+\t// Test case with frame-ancestors\n+\tclient := http.Client{}\n+\tresp, err := client.Get(ts.URL + \"/web/index.html\")\n+\trequire.NoError(t, err)\n+\tdefer resp.Body.Close()\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\tassert.Contains(t, resp.Header.Get(\"Content-Security-Policy\"), \"frame-ancestors 'self' https://example.com;\")\n+\tteardown()\n \n-\t\t\th := frameAncestors(tt.hosts)(http.HandlerFunc(func(http.ResponseWriter, *http.Request) {}))\n-\t\t\th.ServeHTTP(w, req)\n-\t\t\tresp := w.Result()\n-\t\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n-\t\t\tassert.NoError(t, resp.Body.Close())\n-\t\t\tt.Logf(\"%+v\", resp.Header)\n-\t\t\tassert.Equal(t, tt.header, resp.Header.Get(\"Content-Security-Policy\"))\n-\t\t})\n-\t}\n+\t// Test case without frame-ancestors\n+\tts, _, teardown = startupT(t, func(srv *Rest) {\n+\t\tsrv.AllowedAncestors = []string{}\n+\t})\n+\tdefer teardown()\n+\tresp, err = client.Get(ts.URL + \"/web/index.html\")\n+\trequire.NoError(t, err)\n+\tdefer resp.Body.Close()\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\tassert.Contains(t, resp.Header.Get(\"Content-Security-Policy\"), \"frame-ancestors *;\")\n }\n \n func TestRest_subscribersOnly(t *testing.T) {"
    }
  ]
}
