{
  "sha": "4f064e1360e863721ff5a0931f537c6e536f47b3",
  "node_id": "C_kwDOAKEu-toAKDRmMDY0ZTEzNjBlODYzNzIxZmY1YTA5MzFmNTM3YzZlNTM2ZjQ3YjM",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-04-22T07:17:15Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-04-22T07:17:15Z"
    },
    "message": "Merge v0.2023.004 into 'release'.",
    "tree": {
      "sha": "5a67b5f761905ddac797b802df6157d0fd01da36",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/5a67b5f761905ddac797b802df6157d0fd01da36"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/4f064e1360e863721ff5a0931f537c6e536f47b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/4f064e1360e863721ff5a0931f537c6e536f47b3",
  "html_url": "https://github.com/debiki/talkyard/commit/4f064e1360e863721ff5a0931f537c6e536f47b3",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/4f064e1360e863721ff5a0931f537c6e536f47b3/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "706b2161759ff1b81dc8f2a598d3e32c3fac8611",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/706b2161759ff1b81dc8f2a598d3e32c3fac8611",
      "html_url": "https://github.com/debiki/talkyard/commit/706b2161759ff1b81dc8f2a598d3e32c3fac8611"
    },
    {
      "sha": "479878c397f93b048c93aa119e5cc139b02a8f74",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/479878c397f93b048c93aa119e5cc139b02a8f74",
      "html_url": "https://github.com/debiki/talkyard/commit/479878c397f93b048c93aa119e5cc139b02a8f74"
    }
  ],
  "stats": {
    "total": 10875,
    "additions": 9280,
    "deletions": 1595
  },
  "files": [
    {
      "sha": "4edd8bba830a6ac09e4efa2e0df02dc207156065",
      "filename": "Makefile",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/Makefile",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/Makefile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/Makefile?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -206,12 +206,12 @@ prod_asset_bundle_files:=\\\n   images/web/assets/$(TALKYARD_VERSION)/styles-bundle.rtl.css.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/styles-bundle.rtl.min.css.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/zxcvbn.min.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/de_DE/i18n.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/de_DE/i18n.min.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/en_US/i18n.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/en_US/i18n.min.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/es_CL/i18n.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/es_CL/i18n.min.js.gz \\\n-  images/web/assets/$(TALKYARD_VERSION)/translations/de_DE/i18n.js.gz \\\n-  images/web/assets/$(TALKYARD_VERSION)/translations/de_DE/i18n.min.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/he_IL/i18n.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/he_IL/i18n.min.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/lv_LV/i18n.js.gz \\\n@@ -224,6 +224,10 @@ prod_asset_bundle_files:=\\\n   images/web/assets/$(TALKYARD_VERSION)/translations/ru_RU/i18n.min.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/sv_SE/i18n.js.gz \\\n   images/web/assets/$(TALKYARD_VERSION)/translations/sv_SE/i18n.min.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/uk_UA/i18n.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/uk_UA/i18n.min.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/zh_CN/i18n.js.gz \\\n+  images/web/assets/$(TALKYARD_VERSION)/translations/zh_CN/i18n.min.js.gz \\\n   images/app/assets/server-bundle.min.js \\\n   images/app/assets/translations/en_US/i18n.min.js \\\n   images/app/assets/translations/es_CL/i18n.min.js \\"
    },
    {
      "sha": "66eb602a34e161eff05ee514638fef5d2664d349",
      "filename": "appsv/model/src/main/scala/com/debiki/core/AuditLogEntry.scala",
      "status": "modified",
      "additions": 31,
      "deletions": 2,
      "changes": 33,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FAuditLogEntry.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FAuditLogEntry.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FAuditLogEntry.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -179,11 +179,37 @@ object AuditLogEntryType {\n }\n \n \n+/**\n+  *\n+  * @param siteId\n+  * @param id\n+  * @param didWhat\n+  * @param doerTrueId\n+  * @param doneAt\n+  * @param browserIdData\n+  * @param browserLocation\n+  * @param emailAddress\n+  * @param pageId\n+  * @param pageType\n+  * @param uniquePostId\n+  * @param postNr\n+  * @param uploadHashPathSuffix\n+  * @param uploadFileName\n+  * @param sizeBytes\n+  * @param targetUniquePostId\n+  * @param targetSiteId\n+  * @param targetPageId\n+  * @param targetPostNr\n+  * @param targetPatTrueId â€” If same as doerTrueId, then, include,\n+  *      or let be None? [audit_log_tgt_self]\n+  * @param batchId\n+  * @param isLoading\n+  */\n case class AuditLogEntry(\n   siteId: SiteId,\n   id: AuditLogEntryId,\n   didWhat: AuditLogEntryType,\n-  doerId: UserId,\n+  doerTrueId: TrueId,\n   doneAt: ju.Date,\n   browserIdData: BrowserIdData,\n   browserLocation: Option[BrowserLocation] = None,\n@@ -199,13 +225,16 @@ case class AuditLogEntry(\n   targetSiteId: Option[SiteId] = None, // CLEAN_UP ought to RENAME to otherSiteId, rename db column too\n   targetPageId: Option[PageId] = None,\n   targetPostNr: Option[PostNr] = None,\n-  targetUserId: Option[UserId] = None,\n+  targetPatTrueId: Option[TrueId] = None,\n   batchId: Option[AuditLogEntryId] = None,\n   isLoading: Boolean = false) {\n \n   RENAME // to postId\n   def postId: Opt[PostId] = uniquePostId\n \n+  def doerId: PatId = doerTrueId.curId\n+  def targetUserId: Opt[PatId] = targetPatTrueId.map(_.curId)\n+\n   CLEAN_UP // change doneAt to type When\n   def doneAtWhen: When = When.fromDate(doneAt)\n "
    },
    {
      "sha": "749b04aa9e089f7b6cdc6ea42e7928a07fedef29",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Category.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -102,9 +102,9 @@ object IncludeInSummaries {\n   * @param frozenAt\n   * @param deletedAt\n   */\n-case class Category(  // [exp] ok use   too long name! use Cat instead\n+case class Category( // [exp] ok use   too long name! use Cat instead\n   id: CategoryId,\n-  extImpId: Option[ExtId] = None,  // RENAME to extId\n+  extImpId: Option[ExtId] = None, // RENAME to extId\n   sectionPageId: PageId,\n   // Later when adding child categories, see all: [0GMK2WAL] (currently parentId is just for the\n   // root category).\n@@ -113,18 +113,22 @@ case class Category(  // [exp] ok use   too long name! use Cat instead\n   name: String,\n   slug: String,\n   position: Int,\n-  description: Option[String],  // REMOVE [502RKDJWF5]\n+  description: Option[String], // REMOVE [502RKDJWF5]\n   // [refactor] [5YKW294] [rename] Should no longer be a list. Change db too, from \"nnn,nnn,nnn\" to single int.\n   newTopicTypes: immutable.Seq[PageType],\n   // None â€”> inherited from parent cat (not impl though)\n-  defaultSortOrder: Opt[PageOrderOffset] = None,  // RENAME to pageOrder\n+  defaultSortOrder: Opt[PageOrderOffset] = None, // RENAME to pageOrder\n   comtOrder: Opt[PostSortOrder] = None,\n   comtNesting: Opt[ComtNesting_later] = None,\n+  comtsStartHidden: Opt[NeverAlways] = None,\n+  comtsStartAnon: Opt[NeverAlways] = None,\n+  opStartsAnon: Opt[NeverAlways] = None,\n+  newAnonStatus: Opt[AnonStatus] = None,\n   doVoteStyle: Opt[DoVoteStyle] = None,\n   // Not impl though. [vote_from_tp_ls]\n   doVoteInTopicList: Opt[Bo] = None,\n   // REFACTOR these two should be one field?: Unlist.Nothing = 0, Unlist.Topics = 1, Unlist.Category = 2?\n-  unlistCategory: Boolean,  // also unlists topics\n+  unlistCategory: Boolean, // also unlists topics\n   unlistTopics: Boolean,\n   //  -----------\n "
    },
    {
      "sha": "920458e454573f760b29d15c89155711a1f007c1",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "status": "modified",
      "additions": 96,
      "deletions": 9,
      "changes": 105,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -130,7 +130,7 @@ object PageMeta {\n   def forNewPage(\n         pageId: PageId,\n         pageRole: PageType,\n-        authorId: UserId,\n+        authorId: PatId,\n         creationDati: ju.Date,  // RENAME to createdAt\n         numPostsTotal: Int,\n         extId: Option[ExtId] = None,\n@@ -192,7 +192,7 @@ object PageMeta {\n   * @param embeddingPageUrl The canonical URL to the page, useful when linking to the page.\n   *            Currently only needed and used for embedded comments, and then it\n   *            is the URL of the embedding page.\n-  * @param authorId\n+  * @param authorId The original post author. Or an anonym or pseudonym of hens.\n   * @param frequentPosterIds: Most frequent poster listed first. Author & last-reply-by excluded.\n   * @param layout: A bitmask that tells JS code how to render the page\n   * @param forumSearchBox: 2 if should show a prominent search box, on forum homepage.\n@@ -235,6 +235,10 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n   // the page e.g. gets closed or answered etc. And the view â€” the forum would\n   // provide a default, but everyone can override it, e.g. change sort order\n   // or 1D/2D layout etc, for themselves.\n+  // HOWEVER the above, 0) 1) 2) 3), is overdoing it.  Instead, nodes_t which will\n+  // store cats, pages and posts, is more flexible thany *any* other discussion software\n+  // already. And copying/syncing settings between cats, would be simpler to implement\n+  // and give all (?) of the benefits with 0) 1) 2) 3) anyway (?).\n   pageId: String,\n   extImpId: Option[ExtId] = None,  // RENAME to extId\n   pageType: PageType,\n@@ -249,14 +253,17 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n   lastApprovedReplyById: Option[UserId] = None,\n   categoryId: Option[CategoryId] = None,\n   embeddingPageUrl: Option[String],\n-  authorId: UserId,\n+  authorId: PatId,\n   frequentPosterIds: Seq[UserId] = Seq.empty,\n   // -----\n   // REFACTOR move to DiscViewProps and disc_views_t [disc_props_view_stats]  [PAGETYPESETTNG]\n   //          or just DiscProps     and disc_props_t.\n   layout: PageLayout = PageLayout.Default,\n   comtOrder: Opt[PostSortOrder] = None,\n   comtNesting: Opt[ComtNesting_later] = None,\n+  comtsStartHidden: Opt[NeverAlways] = None,\n+  comtsStartAnon: Opt[NeverAlways] = None,\n+  newAnonStatus: Opt[AnonStatus] = None,\n   // Move to SectProps and sect_props_t\n   forumSearchBox: Opt[i32] = None,\n   forumMainView: Opt[i32] = None,\n@@ -413,11 +420,6 @@ case class PageMeta( // ?RENAME to Page? And rename Page to PageAndPosts?  [exp]\n \n   def bumpedOrPublishedOrCreatedAt: ju.Date = bumpedAt orElse publishedAt getOrElse createdAt\n \n-  def addUserIdsTo(ids: mutable.Set[UserId]): Unit = {\n-    ids += authorId\n-    ids ++= frequentPosterIds\n-    lastApprovedReplyById.foreach(ids += _)\n-  }\n \n   def idVersion: PageIdVersion = PageIdVersion(pageId, version = version)\n \n@@ -553,7 +555,12 @@ trait DiscProps {\n }\n \n \n-\n+/** Later, derive:  comtsStartHidden, comtsStartAnon, opStartsAnon, newAnonStatus\n+  *  too, but better wait until moved to  pat_node_multi_rels_t ?  [add_nodes_t]\n+  * [derive_node_props_on_server]\n+  * @param comtOrder\n+  * @param comtNesting\n+  */\n case class DiscPropsDerived(\n   //origPostReplyBtnTitle: St,\n   //origPostVotes: OrigPostVotes,\n@@ -834,6 +841,9 @@ object PageType {\n     override def hasDoingStatus = true\n   }\n \n+  // Later â€” links to show in the sidebar, or for one's personal [bookmarks]?\n+  // case object MenuTree extends PageType(?, staffOnly = false)\n+\n \n   def fromInt(value: Int): Option[PageType] = Some(value match {\n     case CustomHtmlPage.IntValue => CustomHtmlPage\n@@ -1118,11 +1128,88 @@ object PinPageWhere {\n \n \n \n+// MOVE these two (PageQuery, PostQuery) to their own file,  queries.scala?\n+// And add more, e.g. user queries.\n+\n case class PageQuery(  // also see PeopleQuery\n   orderOffset: PageOrderOffset,\n   pageFilter: PageFilter,\n   includeAboutCategoryPages: Boolean)\n \n+\n+/**\n+  * @param reqrInf â€” info about who's doing this request.\n+  */\n+sealed trait PostQuery {\n+  def reqrInf: ReqrInf\n+  def reqr: Pat = reqrInf.reqr\n+  def inclAnonPosts: Bo\n+  def inclTitles: Bo\n+  def inclUnapproved: Bo\n+  def inclUnlistedPagePosts: Bo\n+  def onlyEmbComments: Bo = false\n+  def limit: i32\n+  def orderBy: OrderBy\n+\n+  /** If this query is by someone about henself. Or if is by a mod or admin. */\n+  def reqrIsStaffOrObject: Bo = reqr.isStaff\n+}\n+\n+\n+object PostQuery {\n+  case class AllPosts(\n+    reqrInf: ReqrInf,\n+    inclAnonPosts: Bo,\n+    inclTitles: Bo,\n+    inclUnapproved: Bo,\n+    inclUnlistedPagePosts: Bo,\n+    override val onlyEmbComments: Bo,\n+    limit: i32,\n+    orderBy: OrderBy,\n+  ) extends PostQuery {\n+\n+    unimplIf(!inclAnonPosts, \"Excluding anon posts when listing all [TyEANONUNIMPL02]\");  ANON_UNIMPL\n+\n+  }\n+\n+  case class PostsRelatedToPat[T <: PatNodeRelType](\n+    reqrInf: ReqrInf,\n+    relatedPatId: PatId,\n+    relType: T,\n+    onlyOpen: Bo,\n+    inclAnonPosts: Bo,\n+    inclTitles: Bo,\n+    inclUnapproved: Bo,\n+    inclUnlistedPagePosts: Bo,\n+    limit: i32,\n+    orderBy: OrderBy,\n+  ) extends PostQuery {\n+\n+    unimplIf(inclAnonPosts, \"Listing related anon posts [TyEANONUNIMPL09]\");  ANON_UNIMPL\n+\n+    override def reqrIsStaffOrObject: Bo = reqr.isStaff || reqr.id == relatedPatId\n+  }\n+\n+  // Later, replace w PostsRelatedToPat and relType AuthorOf.\n+  case class PostsByAuthor(\n+    reqrInf: ReqrInf,\n+    authorId: PatId,\n+    inclAnonPosts: Bo,\n+    inclTitles: Bo,\n+    inclUnapproved: Bo,\n+    inclUnlistedPagePosts: Bo,\n+    limit: i32,\n+    orderBy: OrderBy,\n+  ) extends PostQuery {\n+\n+    unimplIf(inclAnonPosts, \"Listing an author's anon posts [TyEANONUNIMPL08]\");  ANON_UNIMPL\n+\n+    override def reqrIsStaffOrObject: Bo = reqr.isStaff || reqr.id == authorId\n+  }\n+\n+}\n+\n+\n /** How to sort pages, and where to start listing them, e.g. if fetching additional\n   * pages after the user has scrolled down to the end of a page list.\n   */"
    },
    {
      "sha": "df1727b35606808af79bb4384f2b30a880b6b84e",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PageParts.scala",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPageParts.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -237,10 +237,6 @@ abstract class PageParts {\n   def theBody: Post = thePostByNr(BodyNr)\n   def theTitle: Post = thePostByNr(TitleNr)\n \n-  def postByAuthorId(authorId: UserId): Seq[Post] = {\n-    allPosts.filter(_.createdById == authorId)\n-  }\n-\n   /** Finds all of postNrs. If any single one (or more) is missing, returns Error. */\n   def getPostsAllOrError(postNrs: Set[PostNr]): immutable.Seq[Post] Or One[PostNr] = {\n     Good(postNrs.toVector map { nr =>"
    },
    {
      "sha": "18d63cd229313d43eb3f0bb38e58ae5d5431c271",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 30,
      "deletions": 3,
      "changes": 33,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPost.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -304,8 +304,10 @@ object DraftType {\n   *   writing (rather than pageId and postNr). Still, nice to have pageId, in case staff\n   *   moves the post to a page one may not access â€” then, good to know on which page it was\n   *   located, originally, when starting typing the draft (so one knows what topic it concerns).\n-  * @param postNr\n-  * @param postId\n+  * @param postNr â€” Which post, on pageId, we're replying to.\n+  * @param postId â€” 1) An already existing post we'r editing. Or 2) The post we're\n+  *   replying to â€” might be different from page id + post nr, if got moved to other\n+  *   page. (Then where does the draft appear? I forgot. Oh well.)\n   */\n case class DraftLocator(\n   draftType: DraftType,\n@@ -349,6 +351,7 @@ case class Draft(\n   deletedAt: Option[When] = None,\n   topicType: Option[PageType] = None,\n   postType: Option[PostType] = None,\n+  doAsAnon: Opt[WhichAnon],\n   title: String,\n   text: String) {\n \n@@ -410,6 +413,9 @@ case class Post(   // [exp] ok use\n   tyype: PostType,\n   createdAt: ju.Date,\n   createdById: UserId,\n+  // Don't incl in export â€” are already in post_actions3 (pat_rels_t)\n+  // Maybe create an interface PostToExpImp with these excluded?\n+  // .move_later to here, but for now, at the end, so can have defaults.\n   // Also need:  [post_page_written_added_at]\n   // pubSubmittedAt â€” the publicly shown submission date, if different from createdAt.\n   // addedToPageAt â€” if moved from one page to another, this is when it got added to the new page,\n@@ -433,7 +439,7 @@ case class Post(   // [exp] ok use\n   approvedAt: Option[ju.Date],   // RENAME to lastApprovedAt  [first_last_apr_at]\n   approvedById: Option[UserId],  // RENAME to lastApproved...\n   approvedRevisionNr: Option[Int],\n-  // privatePatsId: Opt[PatId],  // later  [priv_comts]\n+  // privatePatsId: Opt[PatId],   // later  [priv_comts] â€” no, will remove\n   collapsedStatus: CollapsedStatus,\n   collapsedAt: Option[ju.Date],\n   collapsedById: Option[UserId],\n@@ -460,6 +466,10 @@ case class Post(   // [exp] ok use\n   numUnwantedVotes: Int,\n   numTimesRead: Int,\n   smtpMsgIdPrefix: Opt[SmtpMsgIdPrefix],  // SHOULD incl in patch json? Later.\n+  // .move_later\n+  ownerIds: Vec[PatId] = Vec.empty,\n+  authorIds: Vec[PatId] = Vec.empty,\n+  assigneeIds: Vec[PatId] = Vec.empty,\n   ) {\n \n   require(id >= 1, \"DwE4WEKQ8\")\n@@ -481,6 +491,14 @@ case class Post(   // [exp] ok use\n   require(!currentRevLastEditedAt.exists(_.getTime < currentRevStaredAt.getTime), \"DwE7KEF3\")\n   require(currentRevisionById == createdById || currentRevisionNr > FirstRevisionNr, \"DwE0G9W2\")\n \n+  require(ownerIds.forall(_ >= Participant.LowestTalkToMemberId), \"TyE206AKSE7\")\n+  require(authorIds.forall(_ >= Participant.LowestTalkToMemberId), \"TyE206AKSE8\")\n+  // But maybe allow assignee ids < 0: Can sometimes make sense to assign a post\n+  // to an anonymous user (e.g. in a workplace, where people are anonymous for a short\n+  // while in a new discussion, to improve decision making). [assign_anon]  But for now:\n+  require(assigneeIds.forall(_ >= Participant.LowestTalkToMemberId), \"TyE206AKSE6\")\n+\n+\n   require(lastApprovedEditAt.isEmpty == lastApprovedEditById.isEmpty, \"DwE9JK3\")\n   if (lastApprovedEditAt.isDefined && currentRevLastEditedAt.isDefined) {\n     require(lastApprovedEditAt.get.getTime <= currentRevLastEditedAt.get.getTime, \"DwE2LYG6\")\n@@ -600,6 +618,15 @@ case class Post(   // [exp] ok use\n     else Some(currentSource)\n   }\n \n+  def addVisiblePatIdsTo(mutSet: MutSet[PatId]): U = {\n+    // Later: Incl authorIds too, but then maybe don't incl createdById, so that\n+    // info won't be leaked. (If the author is set to sbd else, then, it can be\n+    // off-topic for site visitors to know who created a post in the first place.)\n+    // And, don't include [private_pats], once impl.\n+    // Skip this.ownerIds â€” not needed for rendering a page, and might not be public.\n+    mutSet ++= assigneeIds\n+    mutSet += createdById\n+  }\n \n   def numEditsToReview: Int = currentRevisionNr - approvedRevisionNr.getOrElse(0)\n "
    },
    {
      "sha": "5b85e69b94fe88a45b712e42368eb2bdfe1357e8",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PostAction.scala",
      "status": "modified",
      "additions": 81,
      "deletions": 9,
      "changes": 90,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -28,9 +28,11 @@ import Prelude._\n   *\n   * (This corresponds to edges in a graph database, from nodes of type Pat.)\n   */\n-sealed abstract class PatRelType_later(val IntVal: i32) { def toInt: i32 = IntVal }\n+sealed abstract class PatNodeRelType(val IntVal: i32) extends PostActionType {\n+  def toInt: i32 = IntVal\n+}\n \n-object PatRelType_later {\n+object PatNodeRelType {\n \n   /** Like votes, Disagree votes etc.\n     *  - Sub type is vote type.\n@@ -42,7 +44,7 @@ object PatRelType_later {\n     *      gets done â€” if each person has, say, 10 Do-It votes to distribute among the\n     *      ideas/bugs hen cares about.\n     */\n-  case object VotedOn extends PatRelType_later(-1)\n+  case object VotedOn_later extends PatNodeRelType(-1)\n \n   /** If a user (or group) is assigned to do something related to a post or category.\n     *  - Sub type could be assigned-to-do-*what*?\n@@ -103,18 +105,50 @@ object PatRelType_later {\n     *      And did they have any comments â€” where are they? (As replies to the post?)\n     *      Maybe assignments could be in a separate table, even, if they're this\n     *      special. ?\n+    *      But that'd be another rel, type VotedOn, sub type Review, and value +-1, +-2 ?\n+    *      And thereafter the AssignedTo maybe would become dormant?\n     *\n     *  - A custom value could be e.g. AssignedTo.Review { what = dependencies }, or\n     *      AssignedTo.Review what = code. And VotedOn.Review { what = dependencies },\n     *      for custom plugins [review_plugin]\n     */\n-  case object AssignedTo extends PatRelType_later(-1)\n+  case object AssignedTo extends PatNodeRelType(11)\n \n   /** If a pat wants to get notified about posts from another pat.  Hmm but\n     * shouldn't this be in  notf_prefs_t?  So can follow someone *in a specific cat* only,\n     * and choose how often to get notified, other notf prefs things.\n+    * Or should be in  pat_pat_rels_t?\n     */\n-  // object FollowerOf extends PatRelType_later(-1)\n+  case object FollowerOf_later extends PatNodeRelType(-1)\n+\n+  /** If pat has been added as author of a post.  (Value could maybe say if is\n+    * primary author, or secondary author?)\n+\n+    * The person who posted a post, is the author, by default.  [post_authors]\n+    * But others can be made authors instead, by adding this AuthorOf relationship.\n+    */\n+  case object AuthorOf_later extends PatNodeRelType(-1)  // maybe IntVal 2?\n+\n+  /** If pat has been added as owner of a post. The owners of a post,\n+    * can edit it, change the authors, make it  private (but not make a private\n+    * post public), add/remove owners, etc â€” as if it was their post (it is).\n+    *\n+    *  Changing the owner, can be good if 1) someone starts working on an article,\n+    *  and leaves for vacation, and another person is to finish the article,\n+    *  publish it etc.  Or if 2) mods have deleted a post, and want to prevent\n+    *  the original author from un-deleting it or editing it any further. Then,\n+    *  the mods can make the Moderators group the owner of the post â€”\n+    *  thereafter the original author cannot edit it, un/delete it or anything.\n+    *\n+    * Or, probably never, actually?  Instead:  pat_node_multi_rels_t.is_owner_c?\n+    */\n+  case object OwnerOf_later extends PatNodeRelType(-1)  // maybe IntVal 1?  or delete? Will be in  perms table ?\n+\n+\n+  def fromInt(value: i32): Opt[PatNodeRelType] = Some(value match {\n+    case AssignedTo.IntVal => AssignedTo\n+    case _ => return None\n+  })\n }\n \n \n@@ -195,16 +229,46 @@ object PostStatusAction {\n }\n \n \n-abstract class PostAction {\n+// RENAME to  PatNodeRel\n+// Stored in  post_actions3, will rename to  pat_node_rels_t?\n+sealed abstract class PostAction {\n+  RENAME // to toNodeId\n   def uniqueId: PostId\n-  def pageId: PageId\n-  def postNr: PostNr\n+  def pageId: PageId  // deprecated?\n+  def postNr: PostNr  //\n+  RENAME // to fromPatId\n   def doerId: UserId\n+  RENAME // to addedAt\n   def doneAt: When\n+  RENAME // to relType\n   def actionType: PostActionType\n }\n \n \n+case class PatNodeRel[T <: PatNodeRelType](\n+  toNodeId: PostId,\n+  fromPatId: PatId,\n+  @deprecated\n+  pageId: PageId,\n+  @deprecated\n+  postNr: PostNr,\n+  addedAt: When,\n+  relType: T,\n+) extends PostAction {\n+  def uniqueId: PostId = toNodeId\n+  def doerId: UserId = fromPatId\n+  def doneAt: When = addedAt\n+  def actionType: T = relType\n+\n+  // For now.\n+  require(relType.toInt == PatNodeRelType.AssignedTo.toInt,\n+        s\"Bad rel type: ${relType}, only AssignedTo implemented [TyEPATNODERELTYP]\")\n+\n+  require(fromPatId >= Pat.LowestTalkToMemberId,\n+        s\"Bad pat id to assign: ${fromPatId}, is < ${Pat.LowestTalkToMemberId} [TyEASGNPATID]\")\n+}\n+\n+\n object PostAction {\n   def apply(uniqueId: PostId, pageId: PageId, postNr: PostNr, doerId: UserId,\n         doneAt: When, actionType: PostActionType)\n@@ -213,7 +277,15 @@ object PostAction {\n       PostVote(uniqueId, pageId, postNr, doneAt, voterId = doerId, voteType = voteType)\n     case flagType: PostFlagType =>\n       PostFlag(uniqueId, pageId, postNr, doneAt, flaggerId = doerId, flagType = flagType)\n-    case x =>\n+    case patNodeRelType: PatNodeRelType =>\n+      PatNodeRel(\n+            fromPatId = doerId,\n+            toNodeId = uniqueId,\n+            pageId = pageId,\n+            postNr = postNr,\n+            addedAt = doneAt,\n+            relType = patNodeRelType)\n+    case _ =>\n       die(\"DwE7GPK2\", s\"Bad action type: '$actionType'\")\n   }\n }"
    },
    {
      "sha": "dcf3cf161aa1213c820d92afaf7db58431001cab",
      "filename": "appsv/model/src/main/scala/com/debiki/core/ReviewTask.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FReviewTask.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -153,6 +153,12 @@ object ReviewDecision {\n   * @param maybeBadUserId A user that did something possibly harmful and therefore what s/he did\n   *   should be reviewed. E.g. wrote a post that got flagged. Or changed his/her avatar\n   *   and his/her profile, which therefore should be reviewed.\n+  *   If the user is anonymous, then, this is the id of the anonym, not the real user\n+  *   â€” so mods won't accidentally learn who the anonyms are.  [anons_and_mods]\n+  *   Only if a post is really problematic, can the mods choose to have a look and\n+  *   consider suspending the real post author. Or, they'll suspend the anonym,\n+  *   and this can then also suspend the real author (the one behind the anonym),\n+  *   without the mods having to know who hen is.\n   * @param pageId A new page that should be reviewed.\n   * @param postId A post that should be reviewed, it might be spam for example.\n   */\n@@ -174,7 +180,7 @@ case class ReviewTask(  //  RENAME to ModTask\n   // COULD change to a Set[UserId] and include editors too, hmm. [6KW02QS]  Or just the author +\n   // the 10? most recent editors, or the 10 most recent editors (not the author) for wiki posts.\n   // Or the ones who edited the post, since it was last reviewed & any flags disagreed with?\n-  maybeBadUserId: UserId,\n+  maybeBadUserId: PatId,  // RENAME to aboutPatId\n   // Only if is for both title and body (cannot currently be moved to different page).\n   pageId: Option[PageId] = None,\n   postId: Option[PostId] = None,"
    },
    {
      "sha": "bd7b3c6d4cfaea992dc03b900768d63ba547034a",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 37,
      "deletions": 16,
      "changes": 53,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -107,21 +107,27 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   def loadTheOrigPost(pageId: PageId): Post =\n     loadOrigPost(pageId).getOrDie(\"TyE204RKT1J\", s\"s$siteId: OP missing, page $pageId\")\n \n+  /** Useful for chats â€” then, we want to show the chat description, which is\n+    * in the orig post. And the most recent chat messsages, to show.  */\n   def loadOrigPostAndLatestPosts(pageId: PageId, limit: Int): Seq[Post]\n   def loadPostsOnPage(pageId: PageId): Vec[Post]\n   def loadPostsByNrs(pagePostNrs: Iterable[PagePostNr]): immutable.Seq[Post]\n+  /** The result is shorter, if some posts weren't found. */\n+  def loadPostsByIdKeepOrder(postIds: Iterable[PostId]): ImmSeq[Post]\n   def loadPostsByUniqueId(postIds: Iterable[PostId]): immutable.Map[PostId, Post]     ; RENAME; QUICK // to loadPostsByIds\n   def loadPostsByExtIdAsMap(extImpIds: Iterable[ExtId]): immutable.Map[ExtId, Post]\n \n-  def loadAllPosts(): immutable.Seq[Post]\n+  def loadAllPostsForExport(): immutable.Seq[Post]\n   def loadAllUnapprovedPosts(pageId: PageId, limit: Int): immutable.Seq[Post]\n   def loadUnapprovedPosts(pageId: PageId, by: UserId, limit: Int): immutable.Seq[Post]\n   def loadCompletedForms(pageId: PageId, limit: Int): immutable.Seq[Post]\n \n   /** Loads the most Like voted posts, per page.\n+    * Does *not* load assignee or additional author ids (that's why the name is \"...ExclAggs\").\n+    * Would be nice with type safety for that. [Scala_3]?\n     * (Excluding posts with Unwanted votes or pending flags, and collapsed/hidden/deleted posts.)\n     */\n-  def loadPopularPostsByPage(pageIds: Iterable[PageId], limitPerPage: Int, exclOrigPost: Boolean)\n+  def loadPopularPostsByPageExclAggs(pageIds: Iterable[PageId], limitPerPage: Int, exclOrigPost: Boolean)\n         : Map[PageId, immutable.Seq[Post]]\n \n   def loadApprovedOrigPostAndRepliesByPage(pageIds: Iterable[PageId]): Map[PageId, immutable.Seq[Post]]\n@@ -132,9 +138,7 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   // Also, these params:  includeDeleted,  includeHidden.\n   //    includeChatMessages: Boolean,  onlyUnapproved: Boolean,\n   //    onPageId: Option[PageId]\n-  def loadPostsByQuery(limit: Int, orderBy: OrderBy, byUserId: Option[UserId],\n-        includeTitlePosts: Boolean, inclUnapprovedPosts: Boolean,\n-        inclUnlistedPagePosts_unimpl: Boolean): immutable.Seq[Post]\n+  def loadPostsByQuery(query: PostQuery): immutable.Seq[Post]\n \n   def loadEmbeddedCommentsApprovedNotDeleted(limit: Int, orderBy: OrderBy): immutable.Seq[Post]\n \n@@ -214,8 +218,13 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   def loadActionsOnPage(pageId: PageId): immutable.Seq[PostAction]\n   def loadActionsByUserOnPage(userId: UserId, pageId: PageId): immutable.Seq[PostAction]\n   def loadActionsDoneToPost(pageId: PageId, postNr: PostNr): immutable.Seq[PostAction]\n-  def loadAllPostActions(): immutable.Seq[PostAction]\n-  def insertPostAction(postAction: PostAction): Unit\n+  def loadPatPostRels[T <: PatNodeRelType](forPatId: PatId, relType: T, onlyOpenPosts: Bo,\n+                                           limit: i32): ImmSeq[PatNodeRel[T]]\n+  def loadAllPostActionsForExport(): immutable.Seq[PostAction]\n+\n+  def insertPostAction(postAction: PostAction): U\n+  def deletePatNodeRels(fromPatIds: Set[PatId], toPostId: PostId,\n+        relTypes: Set[PatNodeRelType]): i32\n \n   def deleteVote(pageId: PageId, postNr: PostNr, voteType: PostVoteType, voterId: UserId): Boolean\n   /** Loads the first X voter ids, sorted by ... what? Currently loads all. [1WVKPW02]\n@@ -446,9 +455,12 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   def loadOpenAuthIdentity(key: OpenAuthProviderIdKey): Option[OpenAuthIdentity]\n   def deleteAllUsersIdentities(userId: UserId): Unit\n \n+  RENAME // to nextGuestOrAnonId?\n   def nextGuestId: UserId\n   def insertGuest(guest: Guest): Unit   // should be: GuestDetailed\n \n+  def insertAnonym(anonym: Anonym): U\n+\n   def nextMemberId: UserId\n   def insertMember(user: UserInclDetails): Unit\n \n@@ -471,7 +483,7 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n       case user: UserInclDetails => user\n       case group: Group =>\n         REFACTOR // instead:  Member.asUserOr(ThrowBadReq)\n-        throw GotAGroupException(group.id)\n+        throw GotAGroupException(group.id, wantedWhat = \"a user\")\n     }\n \n   def loadGroup(groupId: UserId): Option[Group] =\n@@ -529,6 +541,7 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   def loadAllUsernameUsages(): Seq[UsernameUsage]\n   def isUsernameInUse(username: String): Boolean = loadUsernameUsages(username).nonEmpty\n \n+  COULD // add fn: loadPatVb(patId): Opt[PatVb] ?\n   def loadParticipant(userId: UserId): Option[Participant]\n   def loadTheParticipant(userId: UserId): Participant =\n     loadParticipant(userId).getOrElse(throw UserNotFoundException(userId))\n@@ -538,12 +551,12 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n \n   def loadGuest(userId: UserId): Option[Guest] = {\n     dieIf(userId > Participant.MaxGuestId, \"EsE8FY032\")\n-    loadParticipant(userId).map(_.asInstanceOf[Guest])\n+    loadParticipant(userId).map(_.asGuestOrThrow)\n   }\n \n   def loadTheGuest(userId: UserId): Guest = {\n     dieIf(userId > Participant.MaxGuestId, \"EsE6YKWU2\", userId)\n-    loadTheParticipant(userId).asInstanceOf[Guest]\n+    loadGuest(userId).getOrElse(throw UserNotFoundException(userId))\n   }\n   def loadUser(userId: UserId): Option[User] = {\n     dieIf(userId <= Participant.MaxGuestId, \"EsE2A8ERB3\", userId)\n@@ -616,7 +629,7 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n   def loadUsersInclDetailsById(userIds: Iterable[UserId]): immutable.Seq[UserInclDetails] =\n     loadMembersVbById(userIds) map {\n       case user: UserInclDetails => user\n-      case group: Group => throw GotAGroupException(group.id)\n+      case group: Group => throw GotAGroupException(group.id, wantedWhat = \"a user\")\n     }\n \n   def loadMembersVbByRef(refs: Iterable[PatRef]): ImmSeq[MemberVb]\n@@ -641,7 +654,8 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n \n   def insertGroup(group: Group): Unit\n   def deleteGroup(groupId: UserId): Unit\n-  def updateGroup(group: Group): Unit\n+  def updateGroup(group: Group): U = updateGroup(ValidGroup(group)) // just for now\n+  def updateGroup(validGroup: ValidGroup): U\n   def loadAllGroupsAsSeq(): Vector[Group]\n   def loadAllGroupsAsMap(): Map[UserId, Group] = loadAllGroupsAsSeq().map(g => g.id -> g).toMap\n \n@@ -785,14 +799,21 @@ trait SiteTransaction {   RENAME // to SiteTx â€” already started with a type Si\n \n \n /** Include stack trace, so can find bugs. (So don't use QuickMessageException). */\n-case class GotAGroupException(groupId: UserId) extends Exception(\n-  s\"Got a group when trying to load member $groupId [EdE2SBA4J7]\")\n+case class GotAGroupException(patId: PatId, wantedWhat: St) extends Exception(\n+  s\"Got a group when trying to load pat $patId, wanted $wantedWhat [EdE2SBA4J7]\")\n \n case class GotANotGroupException(groupId: UserId) extends Exception(\n   s\"Got a not-group when trying to load group $groupId [EdE4GW1WA9]\")\n \n-case class GotAGuestException(groupId: UserId, errCode: St = \"\") extends Exception(\n-  s\"Got a guest when trying to load member $groupId [TyEGOTGST${dashErr(errCode)}]\")\n+case class GotAGuestException(patId: PatId, wantedWhat: St, errCode: St = \"\") extends Exception(\n+  s\"Got a guest when trying to load pat $patId, wanted $wantedWhat [TyEGOTGST${\n+      dashErr(errCode)}]\")\n+  \n+case class GotAUserEx(patId: PatId, wantedWhat: St) extends Exception(\n+  s\"Got a user when trying to load pat id $patId, wanted $wantedWhat [TyEGOTAUSER]\")\n+\n+case class GotAnAnonEx(anonymId: PatId, wantedWhat: St) extends Exception(\n+  s\"Got an anonym when trying to load pat $anonymId, wanted $wantedWhat [TyEGOTANANON]\")\n \n // COULD incl errCode\n case object GotUnknownUserException extends Exception"
    },
    {
      "sha": "cecc12c6eeecb80863ed8bd3cb57f48b5c174b4a",
      "filename": "appsv/model/src/main/scala/com/debiki/core/TrueId.scala",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FTrueId.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FTrueId.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FTrueId.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,68 @@\n+/**\n+  * Copyright (c) 2023 Kaj Magnus Lindberg\n+  *\n+  * This program is free software: you can redistribute it and/or modify\n+  * it under the terms of the GNU Affero General Public License as\n+  * published by the Free Software Foundation, either version 3 of the\n+  * License, or (at your option) any later version.\n+  *\n+  * This program is distributed in the hope that it will be useful,\n+  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+  * GNU Affero General Public License for more details.\n+  *\n+  * You should have received a copy of the GNU Affero General Public License\n+  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+  */\n+\n+package com.debiki.core\n+\n+import com.debiki.core.Prelude._\n+\n+\n+sealed trait TrueId {\n+  def curId: PatId\n+  def anyTrueId: Opt[MembId]\n+\n+  require(curId != 0, \"curId is 0 [TyE8SKFWW5]\")\n+  require(anyTrueId.forall(_ >= LowestTalkToMemberId),\n+        s\"Bad ids: $this, anyTrueId is < $LowestTalkToMemberId. [TyEANONWANON]\")\n+\n+  final def trueId: PatId = anyTrueId getOrElse curId\n+  final def isGuestOrAnon: Bo = curId <= MaxGuestOrAnonId\n+\n+  /* Guests cannot have true ids, only anonyms can. */\n+  final def isGuest: Bo = isGuestOrAnon && anyTrueId.isEmpty\n+\n+  // If an anon is made unrecoverably-anon, then, its true id could be set\n+  // to -3 = UnknownUserId? Then, we'd still know it's an anon (not a guest).\n+  final def isAnon: Bo = isGuestOrAnon && anyTrueId.isDefined\n+\n+  /** Pseudonyms are \"real\" accounts: their names can be edited, there can be a bio,\n+    * etc, and thus they have ids > 0, unlike guests and anons which have ids < 0.  */\n+  final def isPseudonym: Bo = LowestTalkToMemberId <= curId && anyTrueId.isDefined\n+\n+}\n+\n+\n+object TrueId {\n+  def apply(curId: PatId, anyTrueId: Opt[MembId] = None): TrueId =\n+    TrueIdImpl(curId, anyTrueId = anyTrueId)\n+\n+  def forMember(membId: MembId): TrueId = {\n+    dieIf(membId < Pat.LowestMemberId, \"TyE0MEMBID0357\", s\"Member id < ${Pat.LowestMemberId\n+          }, not allowed: $membId\")\n+    TrueIdOnly(membId)\n+  }\n+}\n+\n+\n+private case class TrueIdImpl(curId: PatId, anyTrueId: Opt[MembId] = None) extends TrueId\n+\n+\n+/** For doing things where one may not use an anonym or pseudonym. */\n+case class TrueIdOnly(curId: PatId) extends TrueId {\n+  def anyTrueId: Opt[MembId] = None\n+}\n+\n+"
    },
    {
      "sha": "99f4a06080ecc7cf027c70229192a948afb3cdb1",
      "filename": "appsv/model/src/main/scala/com/debiki/core/links.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Flinks.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Flinks.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Flinks.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -79,7 +79,7 @@ case class Link(\n   toStaffSpace: Boolean = false,\n   toPageId: Option[PageId] = None,\n   toPostId: Option[PostId] = None,\n-  toPpId: Option[UserId] = None,\n+  toPpId: Opt[PatId] = None,   // RENAME to toPatId\n   toTagId: Option[TagDefId] = None,\n   toCategoryId: Option[CategoryId] = None) {\n "
    },
    {
      "sha": "0727ec3d94cd4256da703a85e1f3f091f33cfe26",
      "filename": "appsv/model/src/main/scala/com/debiki/core/notifications.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fnotifications.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -91,6 +91,10 @@ object NotificationType {\n   // + TopicDone\n   // + TopicClosed\n \n+  // case object PostOwnersChanged extends NotificationType(401 or 451)\n+  // case object PostAuthorsChanged extends NotificationType(..2 ?)\n+  // case object PostAssigneesChanged extends NotificationType(..3 ?)\n+\n   case object OneLikeVote extends NotificationType(501)\n   // What about WrongVote, OffTopic, Unwanted?\n   // Not so interesting? Could cause flame wars?\n@@ -112,6 +116,7 @@ object NotificationType {\n     case Message.IntValue => Message\n     case NewPost.IntValue => NewPost\n     case PostTagged.IntValue => PostTagged\n+    //case PostAssigneesChanged.IntVal => PostAssigneesChanged\n     case OneLikeVote.IntValue => OneLikeVote\n     case _ => return None\n   })"
    },
    {
      "sha": "bc3c501e52ed55987ed3bfa2858da1f3152a34a5",
      "filename": "appsv/model/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 247,
      "deletions": 19,
      "changes": 266,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -194,7 +194,7 @@ package object core {\n   type SiteId = Int\n   val NoSiteId = 0\n \n-  type SiteVersion = Int\n+  type SiteVersion = i32\n \n   type LangCode = St  // [Scala_3] opaque type\n \n@@ -212,10 +212,12 @@ package object core {\n   // Later, these will be different?\n   type GroupBr = Group\n   type GroupVb = Group\n+  case class ValidGroup(get: Group)  // Scala_3 opaque type\n \n   type PatId = Int\n   type ParticipantId = Int  ; RENAME // to PatId\n   type GuestId = PatId\n+  type AnonId = PatId     // Scala_3 opaque type, must be <= max-anon-id\n   type MemberId = PatId   ; RENAME // to MembId\n   type MembId = PatId     // but hard to read: '...bI..', two lines next to each other. Instead:\n   type MemId = PatId      // ... is this better?  NO, REMOVE.\n@@ -542,6 +544,38 @@ package object core {\n     case object No extends MayLink_unused\n   }\n \n+\n+  /** Sync w Typescript [NeverAlways].\n+    * Sync w db, the  never_always_d  PostgreSQL custom domain.\n+    */\n+  sealed abstract class NeverAlways(val IntVal: i32) { def toInt: i32 = IntVal }\n+  object NeverAlways {\n+    //se object Never extends NeverAlways(1)\n+    case object NeverButCanContinue extends NeverAlways(2)\n+    case object Allowed extends NeverAlways(3)\n+    /** The setting is shown, and if one leaves it as is, it'll be disabled / off. */\n+    //se object AllowedMustChoose extends NeverAlways(4)\n+    /** The setting is shown, and one needs to click & choose: disabled, or enabled. */\n+    //se object MustChoose extends NeverAlways(5)\n+    /** The setting is shown, and if one leaves it as is, it'll be enabled / on. */\n+    //se object RecommendedMustChoose extends NeverAlways(6)\n+    case object Recommended extends NeverAlways(7)\n+    case object AlwaysButCanContinue extends NeverAlways(8)\n+    //se object Always extends NeverAlways(9)\n+\n+    def fromOptInt(value: Opt[i32]): Opt[NeverAlways] =\n+      value flatMap fromInt32\n+\n+    def fromInt32(value: i32): Opt[NeverAlways] = Some(value match {\n+      case NeverButCanContinue.IntVal => NeverButCanContinue\n+      case Allowed.IntVal => Allowed\n+      case Recommended.IntVal => Recommended\n+      case AlwaysButCanContinue.IntVal => AlwaysButCanContinue\n+      case _ => return None\n+    })\n+  }\n+\n+\n   type Hopefully[R] = R Or Problem\n \n   sealed abstract class AnyProblem {\n@@ -769,26 +803,199 @@ package object core {\n   }\n \n \n-  type ReqrId = Who // RENAME to ReqrIds? (with an ...s)\n+  type StorePatch = JsObject  // [Scala_3] opaque type. Or maybe a struct of its own?\n+\n+  type ReqrId = Who // RENAME to ReqrIds? (with an ...s),  [edit] NO, instead, to ReqrInf. [/edit]\n                     // ... because is more than one id (user id, ip, bowser id cookie, etc)\n \n+  case class ReqrInf( // better\n+    reqr: Pat,\n+    browserIdData: BrowserIdData,\n+  ) {\n+    def toWho: Who = Who(reqr.trueId2, browserIdData, reqr.isAnon)\n+  }\n+\n+\n   type BrowserIdSt = St  // [Scala_3] opaque type\n \n   RENAME // to ReqrId? = \"Requester id\" and that's what it is: the user id plus hens browser id data.\n   // I find \"who\" being confusing as to whom it refers to.\n-  case class Who(id: UserId, browserIdData: BrowserIdData) {\n+  // [edit] No, rename to ReqrInf instead?!  (Requester information)\n+  // But not to ReqInf, because it's not info about the *request*, but about\n+  // the *requester* (the person). E.g. url path and query param names, should *not*\n+  // be exposed to internal parts of Ty (would increase the coupling, in a bad way).\n+  // So, not ReqInf, but ReqrInf.  [/edit]\n+  // Is isAnon always false, hmmm?\n+  case class Who(trueId: TrueId, browserIdData: BrowserIdData, isAnon: Bo = false) {\n+    def id: PatId = trueId.curId\n     def ip: String = browserIdData.ip\n     def idCookie: Option[String] = browserIdData.idCookie\n     def browserFingerprint: Int = browserIdData.fingerprint\n-    def isGuest: Boolean = Participant.isGuestId(id)\n+    REFACTOR; CLEAN_UP; DO_AFTER // 2023-04-20\n+    // His can now be a TrueId memb fn? Just verify this is ok:\n+    dieIf(isAnon != trueId.isAnon, \"TyE603MSKJ46\")\n+    def isGuest: Bo = !isAnon && Participant.isGuestId(id)\n     def isSystem: Boolean = id == SystemUserId\n+    def isGuestOrAnon: Bo = trueId.isGuestOrAnon\n+\n+    dieIf(isAnon != trueId.anyTrueId.isDefined, \"TyE40MADEW35\",\n+          s\"isAnon: $isAnon but trueId: ${trueId.trueId}\")\n   }\n \n   object Who {\n-    val System = Who(SystemUserId, BrowserIdData.System)\n+    def apply(patId: PatId, browserIdData: BrowserIdData): Who =\n+      Who(TrueId(patId), browserIdData)\n+\n+    val System = Who(TrueId(SystemUserId), BrowserIdData.System)\n   }\n \n-  case class UserAndLevels(user: Participant, trustLevel: TrustLevel, threatLevel: ThreatLevel) {\n+\n+  /*\n+  sealed abstract class AnonLevel(val IntVal: i32) { def toInt: i32 = IntVal }\n+  object AnonLevel {\n+    case object NotAnon extends AnonLevel(10)\n+    case object AnonymPerPage extends AnonLevel(50)\n+\n+    def fromInt(value: i32): Opt[AnonLevel] = Some(value match {\n+      case NotAnon.IntVal => NotAnon\n+      case AnonymPerPage.IntVal => AnonymPerPage\n+      case _ => return None\n+    })\n+  }*/\n+\n+\n+\n+  /** A bitfield. Currently only None, 65535 = IsAnonOnlySelfCanDeanon\n+    * and 2097151 = IsAnonCanAutoDeanon are supported.\n+    *\n+    * None, SQL null, 0 means:  is *not* anon.\n+    *\n+    * Default value, if *is* anon,  is an i32 with 21 lowest bits set:\n+    *    2^21 - 1 = 2097151,  upper 11 bits zero (0).   But why?  Because with some\n+    * unused bits (see below) being 0, others 1, one can choose if a future new flag bit\n+    * is going to be by default 0 (off) or 1 (on), by picking a reseved bit that's\n+    * already 0 (bits 22-32, see below) or 1 (bits 8-16, see below). Without having to\n+    * update any database rows.\n+    *\n+    * Why is this a bitfield? â€” Because creating 32 db columns is boring (not that many,\n+    * but still), and wastes bandwidth if sending as a json obj (instead of an i32)\n+    * over the network.\n+    *\n+    * Bit 1:\n+    *   -------1  =   1: is anonymous\n+    *\n+    *   Bits 2-3: Store true id?\n+    *   -----00-  =  0: don't remember true id info at all\n+    *   -----01-  =  2: can keep true id in-memory briefly, to review and spam check, then delete\n+    *   -----10-  =  4: can keep in db for a while, but delete after some time (a conf val)\n+    *   -----11-  =  6: can keep in db permanently (the default)\n+    *\n+    *   Bits 4:  1,  reserverd\n+    *\n+    *   Bits 5-7: Who may see the true id?\n+    *   -000----  =  A DBA cannot and could not see the true id of this anon (wasn't stored)\n+    *   -001----  =  A DBA can (could) see the true id, by running SQL queries\n+    *   -010----  =  you cay (could) see your own anons\n+    *   -011----  =  admins can see the true ids of anons\n+    *   -100----  =  ?\n+    *   -101----  =  ?\n+    *   -110----  =  ?\n+    *   -111----  =  others with see-anon permissions in the category,\n+    *           can see true ids (typically mods, so they can know who\n+    *           a problematic anon is, without having to de-anonymize the account).\n+    *\n+    * Bits 8, 9-16:\n+    *   111111111  =  reserved  (and only bits 1-16 set = 65535).\n+    *\n+    *  Bits 17-19:  Who may deanonymize?\n+    *   --000  =  cannot be deanonymized (not even by DBAs, info not stored)\n+    *   --001  =  can be deanonymize by DBAs\n+    *   --010  =  may deanonymize oneself (and DBAs can too)\n+    *   --011  =  may be deanonymized by admins (and oneself and DBAs)\n+    *   --100  =  may be deanonymized by admins and mods?\n+    *   --101  =  ?\n+    *   --110  =  may be deanonymized by others with deanon permission in the category?\n+    *   --111  =  may get deanonymized automatically (by trigger, e.g. date)\n+    *\n+    *  Bits 20, 21: Reserved, and 1 (set) if IsAnonCanAutoDeanon,\n+    *                             0 (unset) if IsAnonOnlySelfCanDeanon. Hmm.\n+    *\n+    * Bits  22-32:\n+    *   00000000000  reserved   (and only bits 1-21 set = 2097151.)\n+    *\n+    * Reserved bits could later say if e.g.:\n+    *       - May any of the anon's posts be moved to other pages? By default, no.\n+    *       - May the anon comment on other pages or anywhere in a category? (But then,\n+    *         couldn't anon_on_page_id_st_c just be set to null instead, meaning anywhere.\n+    *         Or after [add_nodes_t] to a cateory, meaning, anywhere therein?)\n+    *       - May one switch to another anonym, in the same sub thread?\n+    *         Let's say, reply as anon MyAnA to the orig post, then, sbd repiles to\n+    *         MyAnA, and then one relpies as MyAn*B* to that other person?\n+    *         Or, one then needs to reply as MyAnA? Or needs to use the same anon\n+    *         on the whole page?\n+    */\n+  sealed abstract class AnonStatus(val IntVal: i32, val isAnon: Bo = true) {\n+    def toInt: i32 = IntVal\n+  }\n+\n+  object AnonStatus {\n+    /** Cannot save in the database (that'd mean an anonymous user that wasn't anonymous)\n+      * â€” just means that pat intentionally wants to use hens real account.\n+      * (And then that real user would get saved as post author, instead â€” but IntVal 0 doesn't\n+      * get saved in the db, instead, is null (in the db).)\n+      */\n+    case object NotAnon extends AnonStatus(0, isAnon = false)\n+\n+    case object IsAnonOnlySelfCanDeanon extends AnonStatus(65535)\n+\n+    /** For now, all 21 lower bits set. See the AnonStatus descr above. Sync w Typescript. */\n+    case object IsAnonCanAutoDeanon extends AnonStatus(2097151)\n+\n+    def fromOptInt(value: Opt[i32]): Opt[AnonStatus] = value flatMap fromInt\n+\n+    def fromInt(value: i32): Opt[AnonStatus] = Some(value match {\n+      case NotAnon.IntVal => return None\n+      case IsAnonOnlySelfCanDeanon.IntVal => IsAnonOnlySelfCanDeanon\n+      case IsAnonCanAutoDeanon.IntVal => IsAnonCanAutoDeanon\n+      case _ =>\n+        // warnDevDie() â€” later?\n+        return None\n+    })\n+  }\n+\n+\n+  sealed abstract class WhichAnon() {\n+    require(anySameAnonId.isDefined != anyNewAnonStatus.isDefined, \"TyE6G0FM2TF3\")\n+\n+    // Either ...\n+    def anyNewAnonStatus: Opt[AnonStatus] = None\n+    // ... or.\n+    def anySameAnonId: Opt[AnonId] = None\n+  }\n+\n+  object WhichAnon {\n+    case class NewAnon(anonStatus: AnonStatus) extends WhichAnon {\n+      require(anonStatus != AnonStatus.NotAnon, \"WhichAnon is NotAnon [TyE2MC06Y8G]\")\n+      override def anyNewAnonStatus: Opt[AnonStatus] = Some(anonStatus)\n+    }\n+\n+    case class SameAsBefore(sameAnonId: PatId) extends WhichAnon {\n+      override def anySameAnonId: Opt[AnonId] = Some(sameAnonId)\n+    }\n+  }\n+\n+\n+  /**\n+    * @param user, (RENAME to patOrPseudonym?) â€” the id of the requester, can be a pseudonym. But not an anonym.\n+    * @param trustLevel â€” if patOrPseudonym is a pseudonym, then this is the pseudonym's\n+    *   trust level, which can be different from the true member's trust level?\n+    *   (See tyworld.adoc, [pseudonyms_trust].)\n+    */\n+  case class UserAndLevels(\n+    user: Pat,\n+    trustLevel: TrustLevel,\n+    threatLevel: ThreatLevel,\n+  ) {\n     def id: UserId = user.id\n     def isStaff: Boolean = user.isStaff\n     def nameHashId: String = user.nameHashId\n@@ -876,8 +1083,9 @@ package object core {\n   def FirstSiteId: SiteId = Site.FirstSiteId\n   val NoUserId = 0\n   def SystemUserId: UserId = Participant.SystemUserId\n-  def SystemSpamStuff = SpamRelReqStuff(userAgent = None, referer = None, uri = \"/dummy\",\n-    userName = None, userEmail = None, userUrl = None, userTrustLevel = None)\n+  def SystemSpamStuff = SpamRelReqStuff(\n+        BrowserIdData.System, userAgent = None, referer = None, uri = \"/dummy\",\n+        userName = None, userEmail = None, userUrl = None, userTrustLevel = None)\n   def SystemUserFullName: String = Participant.SystemUserFullName\n   def SystemUserUsername: String = Participant.SystemUserUsername\n   def SysbotUserId: UserId = Participant.SysbotUserId\n@@ -887,6 +1095,7 @@ package object core {\n   def UnknownUserName: String = Participant.UnknownUserName\n   def UnknownUserBrowserId: String = Participant.UnknownUserBrowserId\n   def MaxGuestId: UserId = Participant.MaxGuestId\n+  def MaxGuestOrAnonId: PatId = Participant.MaxGuestOrAnonId\n   def MaxCustomGuestId: UserId = Participant.MaxCustomGuestId\n   def LowestNonGuestId: UserId = Participant.LowestNonGuestId\n   def LowestTalkToMemberId: UserId = Participant.LowestTalkToMemberId\n@@ -1229,6 +1438,7 @@ package object core {\n     * reports to include all original data. [AKISMET].\n     */\n   case class SpamRelReqStuff(\n+    browserIdData: BrowserIdData,\n     userAgent: Option[String],\n     referer: Option[String],\n     uri: String,\n@@ -1242,6 +1452,18 @@ package object core {\n     require(!userUrl.exists(_.trim.isEmpty), \"TyE430MKQ26\")\n   }\n \n+  /**\n+    *\n+    * @param postId\n+    * @param postNr\n+    * @param postRevNr\n+    * @param pageId â€” the page where the post was posted, even if the post is moved\n+    *   elsewhere later.\n+    * @param pageType\n+    * @param pageAvailableAt\n+    * @param htmlToSpamCheck\n+    * @param language\n+    */\n   case class PostToSpamCheck(\n     postId: PostId,\n     postNr: PostNr,\n@@ -1268,25 +1490,27 @@ package object core {\n     * and before it gets reviewed â€” Akismet wants misclassification\n     * reports to include all original data. [AKISMET]\n     *\n-    * @postedToPageId â€” good to remember, if the post gets moved to a different page, later.\n-    * @pagePublishedAt â€” if the page got unpublished and re published, good to remember\n+    * @param postToSpamCheck\n+    * @param reqrId â€” the pat who posted or edited the post to check. If posting anonymously,\n+    *   then this is the anonym, not the real user. See: [anons_and_mods].\n+    * @param pagePublishedAt â€” if the page got unpublished and re published, good to remember\n     *   the publication date, as it was, when the maybe-spam-post was posted.\n-    * @resultsAt â€” when all spam check services have replied, and we're saving their results.\n-    * @resultsJson â€” there's a field and a results object, for each spam check service we queried.\n+    * @param resultsAt â€” when all spam check services have replied, and we're saving their results.\n+    * @param resultsJson â€” there's a field and a results object, for each spam check service we queried.\n     *   The field name is the domain name for the spam check service (e.g. akismet.com).\n     *   Alternatively, could construct new database tables for this, but json = simpler,\n     *   and seems rather uninteresting to reference the results via foreign keys or anything.\n-    * @resultsText â€” human readable spam check results description.\n-    * @humanSaysIsSpam â€” updated once staff has reviewed.\n-    * @misclassificationsReportedAt â€” if the spam check service thought something was spam\n+    * @param resultsText â€” human readable spam check results description.\n+    * @param humanSaysIsSpam â€” updated once staff has reviewed.\n+    * @param misclassificationsReportedAt â€” if the spam check service thought something was spam\n     *   when it wasn't, or vice versa, this is the time when this misclassification was\n     *   reported to the spam check service, so it can learn and improve.\n     */\n   case class SpamCheckTask(\n     createdAt: When,\n     siteId: SiteId,\n     postToSpamCheck: Option[PostToSpamCheck],\n-    who: Who,\n+    reqrId: PatId,\n     requestStuff: SpamRelReqStuff,\n     resultsAt: Option[When] = None,\n     resultsJson: Option[JsObject] = None,\n@@ -1305,7 +1529,7 @@ package object core {\n     require((resultsAt.isDefined && humanSaysIsSpam.isDefined) ||\n       misclassificationsReportedAt.isEmpty, \"TyE4RBK6RS55\")\n \n-    def key: SpamCheckTask.Key =\n+    def taskKey: SpamCheckTask.Key =\n       postToSpamCheck match {\n         case None => Right(siteUserId)\n         case Some(p) => Left((siteId, p.postId, p.postRevNr))\n@@ -1316,13 +1540,13 @@ package object core {\n         p.copy(htmlToSpamCheck = p.htmlToSpamCheck.take(600))\n       }\n \n-    def siteUserId = SiteUserId(siteId, who.id)\n+    def siteUserId: SiteUserId = SiteUserId(siteId, reqrId)\n \n     def sitePostIdRevOrUser: String = s\"s$siteId, \" + (postToSpamCheck match {\n       case Some(thePostToSpamCheck) =>\n         s\"post ${thePostToSpamCheck.postId} rev nr ${thePostToSpamCheck.postRevNr}\"\n       case None =>\n-        s\"user ${who.id} request stuff $requestStuff\"\n+        s\"user ${reqrId} request stuff $requestStuff\"\n     })\n \n     def isMisclassified: Option[Boolean] =\n@@ -1730,6 +1954,9 @@ package object core {\n   def FASTER_E2E_TESTS = () // An opportunity to speed up the e2e tests (maybe just marginally)\n   def FLAKY = ()          // If an e2e test has races, can fail (ought to fix ... well ... later)\n \n+  def UNIMPL = ()\n+  def ANON_UNIMPL = ()\n+\n   // Maybe split into [defense] and [weakness]?\n   // [defense] code tags are good â€” means security issues that have been dealt with.\n   // [weakness] means an issues not yet handled, might lead to a 'vulnerability'\n@@ -1787,6 +2014,7 @@ package object core {\n   def REMOVE = ()\n   def CLEAN_UP = ()       // Unused stuff that should be deleted after a grace period, or when\n                           // the developers are less short of time.\n+  def USE_StaleStuff_INSTEAD = ()\n   def DEPRECATED = ()     // Consider removing some time later\n   def DISCUSSION_QUALITY = () // Stuff to do to improve the quality of the discussions\n   def UNPOLITE = ()       // Vuln that lets a user be unpolite to someone else"
    },
    {
      "sha": "8edbfab56836cad2c98e65ebec86afad3aab36ea",
      "filename": "appsv/model/src/main/scala/com/debiki/core/permissions.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpermissions.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -23,7 +23,8 @@ import com.debiki.core.Prelude._\n \n case class EffPatPerms(\n   maxUploadSizeBytes: i32,\n-  allowedUploadExtensions: Set[St])\n+  allowedUploadExtensions: Set[St],\n+  canSeeOthersEmailAdrs: Bo)\n \n \n \n@@ -34,12 +35,17 @@ case class EffPatPerms(\n case class PatPerms (\n   maxUploadBytes: Opt[i32],\n   allowedUplExts: Opt[St],\n-)(usingPatPermsCreate: Bo) {\n+  canSeeOthersEmailAdrs: Opt[Bo],\n+)(mab: MessAborter) {\n \n   // Maybe cache?\n   def allowedUplExtensionsAsSet: Set[St] =\n     allowedUplExts.map(_.split(\" \").flatMap(_.trimNoneIfEmpty).toSet[St])\n           .getOrElse(Set.empty)\n+\n+  // [may_not_perms]\n+  mab.abortIf(canSeeOthersEmailAdrs is false, o\"\"\"Negative permissions not implemented,\n+        canSeeOthersEmailAdrs = Some(false) not yet supported [TyENEGPERMS052]\"\"\")\n }\n \n \n@@ -48,7 +54,8 @@ object PatPerms {  REFACTOR // add MessAborter  to \"all\" case classes  instead?\n \n   def create(mab: MessAborter,\n         maxUploadBytes: Opt[i32] = None,\n-        allowedUplExts: Opt[St] = None): PatPerms = {\n+        allowedUplExts: Opt[St] = None,\n+        canSeeOthersEmailAdrs: Opt[Bo] = None): PatPerms = {\n \n     allowedUplExts foreach { exts =>\n       val max = 1500\n@@ -64,7 +71,8 @@ object PatPerms {  REFACTOR // add MessAborter  to \"all\" case classes  instead?\n \n     PatPerms(maxUploadBytes = maxUploadBytes,\n           allowedUplExts = allowedUplExts.noneIfBlank,\n-          )(usingPatPermsCreate = true)\n+          canSeeOthersEmailAdrs = canSeeOthersEmailAdrs,\n+          )(mab)\n   }\n }\n "
    },
    {
      "sha": "cbcdcc59d847802b1ae5fb194672ec84c688cd4c",
      "filename": "appsv/model/src/main/scala/com/debiki/core/trust-threat-level.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Ftrust-threat-level.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -53,7 +53,7 @@ sealed abstract class TrustLevel(val IntVal: Int) extends HasInt32 {\n object TrustLevel {\n   case object Stranger extends TrustLevel(0)   ; REFACTOR // bump all 1, so won't start at 0\n                                       // 0 is easily buggy-mistaken for undefined, in Javascript.\n-  //se object [StrangerWithSecret] â€” if someone doesn't yet have a real account, but via a secret link\n+  //se object [StrangerWithSecret] â€” if someone doesn't yet have a real account, but via a secret link  [new_trust_levels]\n   //      has been invited to look at an otherwise private discussion?\n   //      Or has been invited to a private community, and then can view \"public\" topics, there.\n   //      Should id be < 0? And if creating a real account, gets a > 0 id?\n@@ -73,7 +73,7 @@ object TrustLevel {\n   //                or GoodMembers,  not Trusted-*.)\n   case object CoreMember extends TrustLevel(6)\n \n-  // + Mod,\n+  // + Mod, [mods_are_core_membs][new_trust_levels]\n   // + ModOfMods (can resolve disagreements between mods)\n   // + Admin,\n   // (AdminOfAdmins â€” the site owner is *by default* AdminOfAdmins? Other admins cannot depose hen)"
    },
    {
      "sha": "fece5726a833721e62e205e1b284c98f72137168",
      "filename": "appsv/model/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 182,
      "deletions": 20,
      "changes": 202,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fuser.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -316,7 +316,8 @@ case object Participant {\n   val SuperAdminId = 3  // no, 4? or 49?  see below\n \n   /** Maintenance tasks by bot(s) that supervise all sites. */\n-  // val SuperbotId = 4  ?\n+  // val SuperStaffId = 4  ?\n+  // val SuperBotId = 5  ?\n \n   // ? rename SuperX to Global Read/Action X,\n   // Hmm these would be useful, for site staff to View As ...\n@@ -332,13 +333,18 @@ case object Participant {\n   // val SuperPupbMod = 6 ?\n \n   // ?? If a member chooses to post anonymously:\n+  //     â€” no, using anonym_id_c  and anonym_ids_t instead?  And optional pen names\n   // val AnonymousUserId = 7\n \n+  // UnknownUserId = 6\n+  // UnknownStaffId = 7\n+\n   // The real ids of deactivated and deleted users, could be replaced with these ids, when rendering\n   // pages, so others won't find the real ids of the deactivated/deleted accounts.\n   // val DeactivatedUserId = 8\n   // val DeletedUserId = 9\n-  // or just: DeactivatedOrDeletedUserId = 9 ?\n+  // or just: DeactivatedOrDeletedUserId = 9 ?  or just: DeactivatedUserId incl deleted users?\n+\n \n   // Can talk with, and can listen to notifications. But 1..9 = special. And -X = guests.\n   val LowestNormalMemberId: Int = Group.EveryoneId  // [S7KPWG42]\n@@ -357,11 +363,14 @@ case object Participant {\n   /** Guests with custom name and email, but not guests with magic ids like the Unknown user. */\n   // Change to <= -1001?  [UID1001]\n   val MaxCustomGuestId: UserId = -10\n+  val MaxAnonId: PatId = MaxCustomGuestId\n \n   val MaxGuestId: UserId = -1\n   //assert(MaxGuestId == AnonymousUserId)\n   assert(UnknownUserId.toInt <= MaxGuestId)\n \n+  val MaxGuestOrAnonId: PatId = MaxGuestId\n+\n   /** Ids 1 .. 99 are reserved in case in the future I want to combine users and groups,\n     * and then there'll be a few groups with hardcoded ids in the range 1..99.\n     */\n@@ -371,6 +380,7 @@ case object Participant {\n   val LowestNonGuestId = 1  // CLEAN_UP RENAME to LowestMemberId?\n   assert(LowestNonGuestId == SystemUserId)\n \n+  RENAME // to isGuestOrAnonId\n   def isGuestId(userId: UserId): Boolean =\n     userId <= MaxGuestId\n \n@@ -612,6 +622,27 @@ case object Participant {\n \n     None\n   }\n+\n+\n+  /** A `val` would cause null pointer exceptions (because accessed too soon). */\n+  def SystemUserBr = UserBr(\n+        id = SystemUserId,\n+        ssoId = None,\n+        extId = None,\n+        fullName = Some(\"System\"),\n+        theUsername = \"system\",\n+        email = \"\",\n+        emailNotfPrefs = EmailNotfPrefs.ForbiddenForever,\n+        emailVerifiedAt = None,\n+        passwordHash = None,\n+        privPrefs = MemberPrivacyPrefs.empty,\n+        isApproved = Some(true),\n+        suspendedTill = None,\n+        trustLevel = TrustLevel.CoreMember,\n+        threatLevel = ThreatLevel.SuperSafe,\n+        isAdmin = true,\n+        isModerator = true,\n+        )\n }\n \n \n@@ -627,6 +658,8 @@ case object Participant {\n sealed trait Pat {\n \n   def id: PatId\n+  def trueId2: TrueId = TrueId(id)  ; RENAME // to  trueId  remove '2'.\n+\n   def extId: Opt[ExtId]\n   def email: EmailAdr  // COULD rename to emailAddr and change to Opt[EmailAdr] (instead of \"\")\n   def emailNotfPrefs: EmailNotfPrefs\n@@ -640,8 +673,9 @@ sealed trait Pat {\n   // Later: Impl for Guest users too?\n   def isDeactivated: Bo = false\n   def isDeleted: Bo = false\n+  def isAnon: Bo = false\n \n-  final def isAuthenticated: Bo = isRoleId(id)\n+  def isAuthenticated: Bo = isRoleId(id)\n   def isApprovedOrStaff: Bo\n   final def isSystemUser: Bo = id == SystemUserId\n   final def isSystemOrSysbot: Bo = id == SystemUserId || id == SysbotUserId\n@@ -662,14 +696,17 @@ sealed trait Pat {\n   def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo\n \n   final def isMember: Bo = Participant.isMember(id)\n-  final def isGuest: Bo = Participant.isGuestId(id)\n+  final def isGuest: Bo = Participant.isGuestId(id) && !isAnon\n+  final def isGuestOrAnon: Bo = Participant.isGuestId(id)\n+  final def canAddToGroup: Bo = !isGuestOrAnon && !isSystemOrSysbot\n   // Rename to jus isUser later when \"user\" means \"user not guest\" everywhere anyway.\n   final def isUserNotGuest: Bo = isMember && !isGroup && !isBuiltIn\n \n   def isGroup: Bo\n   final def anyMemberId: Opt[MembId] = if (isRoleId(id)) Some(id) else None\n \n-  final def accountType: St = if (isGuest) \"guest\" else if (isGroup) \"group\" else \"user\"\n+  final def accountType: St =\n+    if (isGuest) \"guest\" else if (isAnon) \"anonym\" else if (isGroup) \"group\" else \"user\"\n \n   final def isSuspendedAt(when: When): Bo = isSuspendedAt(when.toJavaDate)\n   final def isSuspendedAt(when: ju.Date): Bo =\n@@ -739,7 +776,21 @@ sealed trait Pat {\n       case m: UserBase => m\n       case g: Guest => throw GotAGuestException(g.id, errCode)\n       case g: Group => g\n-      case UnknownParticipant => throw GotUnknownUserException\n+      case _ => throwWrongPatType(wantedWhat = \"a user or group\")\n+    }\n+  }\n+\n+  def asAnonOrThrow: Anonym = {\n+    this match {\n+      case anon: Anonym => anon\n+      case _ => throwWrongPatType(wantedWhat = \"an anonym\")\n+    }\n+  }\n+\n+  def asGuestOrThrow: Guest = {\n+    this match {\n+      case guest: Guest => guest\n+      case _ => throwWrongPatType(wantedWhat = \"a guest\")\n     }\n   }\n \n@@ -754,12 +805,10 @@ sealed trait Pat {\n   COULD_OPTIMIZE // return UserBase instead?\n   final def toUserOrThrow: User = {\n     this match {\n-      case m: User => m\n+      case u: User => u\n       case u: UserVb => u.briefUser // or just return UserBase instead of converting\n       case _: UserBase => die(\"TyE59RKTJ1\", \"Should see UserBr or UserVb before UserBase\")\n-      case g: Guest => throw GotAGuestException(g.id)\n-      case g: Group => throw GotAGroupException(g.id)\n-      case UnknownParticipant => throw GotUnknownUserException\n+      case _ => throwWrongPatType(wantedWhat = \"a user\")\n     }\n   }\n \n@@ -768,8 +817,16 @@ sealed trait Pat {\n       case _: UserBr => die(\"TyE59RKTJ2\", \"Got a UserBr not a UserVb\")\n       case u: UserVb => u\n       case _: UserBase => die(\"TyE59RKTJ3\", \"Should see UserBr or UserVb before UserBase\")\n-      case g: Guest => throw GotAGuestException(g.id)\n-      case g: Group => throw GotAGroupException(g.id)\n+      case _ => throwWrongPatType(wantedWhat = \"a user\")\n+    }\n+  }\n+\n+  private def throwWrongPatType(wantedWhat: St): Nothing = {\n+    this match {\n+      case _: UserBase => throw GotAUserEx(this.id, wantedWhat)\n+      case _: Anonym => throw GotAnAnonEx(this.id, wantedWhat)\n+      case _: Guest => throw GotAGuestException(this.id, wantedWhat)\n+      case _: Group => throw GotAGroupException(this.id, wantedWhat)\n       case UnknownParticipant => throw GotUnknownUserException\n     }\n   }\n@@ -783,7 +840,7 @@ sealed trait Member extends Pat {\n   final def usernameOrGuestName: St = theUsername\n   final def nameOrUsername: St = anyName getOrElse theUsername\n \n-  final def usernameParensFullName: St = anyName match {\n+  final def usernameParensFullName: St = anyName match {    // dupl fn?\n     case Some(name) => s\"$theUsername ($name)\"\n     case None => theUsername\n   }\n@@ -924,6 +981,75 @@ case class UserBr(\n }\n \n \n+\n+trait MemberMaybeDetails {\n+  def theUsername: String\n+  def fullName: Option[String]\n+  def usernameHashId: String\n+  def primaryEmailAddress: String\n+  def emailVerified: Bo\n+  def nameOrUsername: String = fullName getOrElse theUsername\n+\n+  def usernameParensFullName: String = fullName match {\n+    case Some(name) => s\"$theUsername ($name)\"\n+    case None => theUsername\n+  }\n+}\n+\n+\n+\n+case class Anonym(\n+  id: AnonId,\n+  createdAt: When,\n+  anonStatus: AnonStatus,\n+  anonForPatId: MembId,\n+  anonOnPageId: PageId,\n+  // deanonymizedById: Opt[MembId],  // later\n+  ) extends Pat with GuestOrAnon with Someone {\n+\n+  override def trueId2: TrueId = TrueId(id, anyTrueId = Some(anonForPatId))\n+\n+  def anyUsername: Opt[St] = None\n+  def nameOrUsername: St = \"Anonym\"\n+  override def anyName: Opt[St] = Some(nameOrUsername)\n+  override def usernameOrGuestName: St = nameOrUsername\n+\n+  def extId: Opt[ExtId] = None\n+  def noDetails: Pat = this\n+\n+  def email: EmailAdr = \"\"\n+  def emailNotfPrefs: EmailNotfPrefs = EmailNotfPrefs.Unspecified\n+  def tinyAvatar: Opt[UploadRef] = None\n+  def smallAvatar: Opt[UploadRef] = None\n+  def suspendedTill: Opt[ju.Date] = None // for now\n+\n+  def isAdmin: Bo = false\n+  def isOwner: Bo = false\n+  def isModerator: Bo = false\n+  def isSuperAdmin: Bo = false\n+  def isGroup: Bo = false\n+  override def isAnon: Bo = true\n+  def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n+\n+  // Never deactivate or delete. If the underlying real user deactivates hens account,\n+  // don't deactivate the anonym â€” that'd make it simpler to know who the anonym is\n+  // (if gets deactivated at the same time).\n+  override def isDeactivated: Bo = false\n+  override def isDeleted: Bo = false\n+\n+  // Currently only approved users may use anonyms, so, for now:\n+  override def isAuthenticated: Bo = true\n+\n+  // Or use the real user's levels? But then it can be simpler to know how hen is?\n+  def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember\n+  //def effectiveThreatLevel: ThreatLevel = ThreatLevel.SeemsSafe\n+\n+  // But the accounts haven't been approved?\n+  override def isApprovedOrStaff: Bo = false\n+}\n+\n+\n+\n case class ExternalUser(   // sync with test code [7KBA24Y]\n   ssoId: St,\n   extId: Opt[St],\n@@ -975,7 +1101,7 @@ case class Guest( // [exp] ok   REFACTOR split into GuestBr and GuestVb [guest_b\n   // -----------------------\n   lockedThreatLevel: Option[ThreatLevel] = None,\n   )\n-  extends Participant with ParticipantInclDetails with Someone {\n+  extends Participant with ParticipantInclDetails with GuestOrAnon with Someone {\n \n   def isApprovedOrStaff = false\n   def emailVerifiedAt: Option[ju.Date] = None\n@@ -987,9 +1113,13 @@ case class Guest( // [exp] ok   REFACTOR split into GuestBr and GuestVb [guest_b\n   def isAdmin: Boolean = false\n   def isOwner: Boolean = false\n   def isModerator: Boolean = false\n-  def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n+  override def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n   def suspendedTill: Option[ju.Date] = None\n-  def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember  // or sometimes [StrangerWithSecret] or should that be another class?\n+\n+  // Or sometimes [StrangerWithSecret] or should that be another class?\n+  SHOULD // CHANGE to TrustLevel.Stranger and remove isStaffOrMinTrustNotThreat above\n+  // which then no longer is needed\n+  def effectiveTrustLevel: TrustLevel = TrustLevel.NewMember\n \n   def anyName: Opt[St] = Some(guestName)\n   def anyUsername: Opt[St] = None\n@@ -1007,9 +1137,14 @@ case class Guest( // [exp] ok   REFACTOR split into GuestBr and GuestVb [guest_b\n }\n \n \n+sealed trait GuestOrAnon extends ParticipantInclDetails\n+\n+\n /** Includes info about the pat that's usually not needed.\n   */\n sealed trait ParticipantInclDetails extends Pat {    RENAME   // to PatVb\n+  //f id: UserId\n+  //f extId: Option[ExtId]\n   def createdAt: When\n   def noDetails: Participant\n   def about: Option[String] = None    ; RENAME // to bio\n@@ -1501,10 +1636,28 @@ case class Group( // [exp] missing: createdAt, add to MemberInclDetails & Partic\n \n   def isGroup = true\n \n-  // Or maybe true for mod & admin groups? Currently doesn't matter.\n-  def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo = false\n-\n-  override def effectiveTrustLevel: TrustLevel = grantsTrustLevel getOrElse TrustLevel.NewMember\n+  UNTESTED // was just: false\n+  def isStaffOrMinTrustNotThreat(trustLevel: TrustLevel): Bo =\n+    isAdmin || isModerator // || HMM_SKIP_THIS_FOR_NOW\n+    // Doesn't completely work â€” trust level groups don't *grant* any trust level\n+    // instead, if one has a trust level, then one gets added to that group.\n+    // Or that's a philosofical thought?\n+    // grantsTrustLevel.exists(_.isAtLeast(trustLevel))\n+\n+  override def effectiveTrustLevel: TrustLevel = {\n+    /*  HMM_SKIP_THIS_FOR_NOW\n+    if (isAdmin || isModerator)\n+      return TrustLevel.CoreMember\n+    What?:\n+    if (id < Group.EveryoneId || Group.CoreMembersId < id) {\n+    Shouldn't that be:  (or did I mean \"return TrustLevel.Stranger or NewMember\" if outside?)\n+    if (Group.EveryoneId <= id && id <= Group.CoreMembersId) {\n+      val nr = id - Group.EveryoneId.toInt\n+      return TrustLevel.fromInt(nr)\n+    } */\n+\n+    grantsTrustLevel getOrElse TrustLevel.NewMember\n+  }\n \n   def usernameLowercase: String = theUsername.toLowerCase\n \n@@ -1527,6 +1680,15 @@ case class Group( // [exp] missing: createdAt, add to MemberInclDetails & Partic\n       summaryEmailIntervalMins = preferences.summaryEmailIntervalMins,\n       summaryEmailIfActive = preferences.summaryEmailIfActive)\n \n+\n+  def checkValid(mab: MessAborter): ValidGroup = {\n+    mab.abortIf(perms.canSeeOthersEmailAdrs.is(true) &&\n+          !isAdmin && !isModerator && id != Group.CoreMembersId,\n+          // Later, instead: [mods_are_core_membs]\n+          // !this.isStaffOrMinTrustNotThreat(TrustLevel.CoreMember)\n+          \"TyEPATCONFEML\", \"Only >= core members may be configured to see others' emails\")\n+    ValidGroup(this)\n+  }\n }\n \n "
    },
    {
      "sha": "3778a4cf2c60d36d6d02c05375e170ecfa743f4c",
      "filename": "appsv/rdb/src/main/resources/db/migration/db-refactor.txt",
      "status": "removed",
      "additions": 0,
      "deletions": 27,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/706b2161759ff1b81dc8f2a598d3e32c3fac8611/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-refactor.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/706b2161759ff1b81dc8f2a598d3e32c3fac8611/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-refactor.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-refactor.txt?ref=706b2161759ff1b81dc8f2a598d3e32c3fac8611",
      "patch": "@@ -1,27 +0,0 @@\n--- Oops, see:\n--- ./db-wip.sql\n-\n-?? settings3.many_sections  â€”> enable_sub_sites\n-\n-rename perms_on_pages to  page_perms  ?\n-   no ... instead,  perms_on_pages, perms_on_cats, perms_on_tags. ?\n-\n-\n-split  page_users into:\n-  - page_pats_t    â€” maybe  is_assigned?\n-  - page_visits_t\n-  - page_notf_prefs_t\n-\n-users3 -> pats_t\n-\n-\n-could have:  cat_perms_t  and tag_perms_t\n-but that's overkill.\n-Only  tag_label_perms.may_use  makes sense (says who may add/remove a tag with that label)\n-\n-\n-[page_pps_t] Maybe a table with member notf prefs and joined = true/false?\n-And change page_users3 to page_reading_progrs_t only?\n-The notf prefs table could be split into one for pages â€” namely page_pps_t\n-â€” and one for categories:  cat_pps_t?\n-But the current approach with page_users3 and page_notf_prefs3 is fairly ok too."
    },
    {
      "sha": "b9de02d77480be7f0d0cb3ada66cdaf9f3def4f0",
      "filename": "appsv/rdb/src/main/resources/db/migration/db-wip.sql",
      "status": "modified",
      "additions": 236,
      "deletions": 163,
      "changes": 399,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1,76 +1,68 @@\n \n---==== Circles and User Lists =================================================\n+-- Bit manipulation in Postgres, e.g.:\n+--   select (12::bit(31) & (1::bit(31) << 3))::integer  â€”â€”>  8::int4\n+-- Also:\n+--   https://medium.com/developer-rants/bitwise-magic-in-postgresql-1a05284e4017\n+\n+\n+--=============================================================================\n+--  Misc new domains?\n+--=============================================================================\n+\n+-- *_u: For unused columns, just sketching the future:\n+create domain i16_u smallint;\n+create domain i32_u smallint;\n+create domain i64_u smallint;\n+alter  domain i16_u add constraint i16_u_c_null check (value is null);\n+alter  domain i32_u add constraint i32_u_c_null check (value is null);\n+alter  domain i64_u add constraint i64_u_c_null check (value is null);\n+\n+create domain text_nonempty_ste90_trimmed_d text_nonempty_ste90_d;\n+alter domain  text_nonempty_ste90_trimmed_d add\n+   constraint text_nonempty_ste90_trimmed_d_c_trimmed check (is_trimmed(value));\n+\n+create domain folder_path_d text_nonempty_ste90_d;\n+alter  domain folder_path_d add\n+   constraint folder_path_d_c_chars check (value ~ '^/([a-z0-9][a-z0-9_-]*/)+$');\n+\n+-- See if others are active / here, currently?  Can it ever make sense to\n+-- let that be per category or page (chat)?\n+create domain can_see_whos_here_d i16_d;\n+alter  domain can_see_whos_here_d add\n+   constraint can_see_whos_here_d_c_null check (value is null);\n+\n+--=============================================================================\n+--  Circles\n+--=============================================================================\n \n -- User lists, so can assign many to something. Or have more than one author,\n -- or owner. And for private comment sub threads â€” who can see them.\n -- But should user lists have their own pat ids < 0?  Since they shouldn't be used\n -- in the permission system (they're just lists). But currently only guest\n -- (and anons, soon) ids have ids < 0.\n \n--- New types of pats â€” flavors of groups: pat lists, and circles. Here:\n-\n-create domain how_private_d      i16_gz_lt128_d;\n-alter table users3 add column how_private_c  how_private_d; -- or  can_add_more_c ?\n-comment on column  users3.how_private_c  is $_$\n-If non-null, this should be a list (is_pat_list_c true), and the how_private_c\n-value says if it's ok to add more people to this list, and if someone added,\n-can see already existing private comments in private sub threads by pats\n-in this list:\n-1) May add more people to the private page (make it less private)\n-and they get to see the alreday existing comments, or\n-2) Can add more people to a private page, but they don't get to see any\n-already existing comments; only new comments (posted after hen got added).\n-(Maybe a  perms_on_pats_t.cannot_see_post_nrs_below_c, or how else remember this?)\n-Or 3) If adding more people, a new private page gets created, with the\n-original people and the ones added.\n-$_$;\n-\n-\n-alter table users3 add column is_pat_list_c  bool;\n-comment on column  users3.is_pat_list_c  is $_$\n-If non-null, this pats_t row is not a real group, but a help construction\n-that lists users or groups, and wherever this list-of-pats appear, the pats\n-are to be listed. For example, if  posts_t.author_id_c  is a list,\n-and Alice and Bob are in the list, then Alice's and Bob's usernames are shown\n-instead of the lists username (it has none), e.g.:\n-\"By Alice and Bob on 2022-03-04: ....\", if authors_id_c points to\n-that list with Alice and Bob. But if authors_id_c is a non-list group,\n-e.g. Support Team, then the text would read \"By Support Team\", instead\n-of listing all members.\n-$_$;\n+-- New type of pat: Flavor of groups, pat circles:\n \n alter table users3 add column is_circle_c    bool;\n+\n comment on column  users3.is_circle_c  is $_$\n Circles are bottom-up constructed groups â€” anyone in a community can create\n a circle, and let others join. Maybe they'll be able to @mention the\n circle, and they can create private discussions for their circle only?\n $_$; --'\n \n-alter table users3 add constraint  pats_c_patlist_is_group check (\n-    (is_pat_list_c is not true) or (is_group is true));\n-\n alter table users3 add constraint  pats_c_circle_is_group check (\n     (is_circle_c is not true) or (is_group is true));\n \n-alter table users3 add constraint  pats_c_not_patlist_circle check (\n-    (is_pat_list_c is not true) or (is_circle_c is not true));\n-\n-alter table users3 add constraint  pats_c_private_is_patlist check (\n-    (how_private_c is null) or (is_pat_list_c is true));\n-\n--- Lists don't have any username, so need to drop this constraint, was:\n---    check (user_id < 0 or created_at is not null and username is not null)\n--- OR let lists have ids < 0, is that better?\n-alter table users3 drop constraint people_member_c_nn;\n-alter table users3 add constraint pats_c_members_have_username check (\n-    (user_id < 0) or is_pat_list_c or (username is not null));\n \n -- Recreate this. WHy might guests (< 0) have no created_at? Don't remember.\n alter table users3 add constraint pats_c_members_have_username check (\n     (user_id < 0) or (created_at is not null));\n \n \n---==== Custom types ===========================================================\n+--=============================================================================\n+--  Custom types\n+--=============================================================================\n \n -- Types and values for plugins, in the future.\n \n@@ -182,13 +174,14 @@ create unique index types_u_anypat_basetype_subtype_urlslug on types_t (\n -- For pat rels:\n \n \n-alter table post_actions3 rename to pat_rels_t;  -- upd triggers too!\n+-- upd triggers too!\n+alter table post_actions3 rename to pat_node_rels_t; -- not: pat_rels_t;\n \n alter table post_actions3 drop column action_id; -- ?. Already noted below in \"delete: ...\".\n-alter table post_actions3 rename column created_at to at_c:  -- or \"added_at_c\" or drop it?\n+alter table post_actions3 rename to created_at to added_at_c;\n -- Audit log, instead:\n alter table post_actions3 drop column updated_at;\n-alter table post_actions3 drop column deleted_at;\n+alter table post_actions3 drop column deleted_at;  -- delete the row instead?\n alter table post_actions3 drop column deleted_by_id;\n \n -- Maybe not â€” instead reuse  rel_type_c and sub_type_c, if > 1000 they're custom types?\n@@ -197,6 +190,7 @@ alter table post_actions3 add    column  cust_sub_type_c   cust_type_d;\n \n -- Yes:\n alter table post_actions3 add    column  cust_json_c       jsonb_ste100_000_d;\n+alter table post_actions3 add    column  cust_i64_c        i64_d; -- ?\n \n --------------- But so many foregin keys, 3 --------------\n -- fk ix: patrels_i_custreltype\n@@ -238,7 +232,7 @@ create index patrels_i_reltype on post_actions3 (site_id, rel_type_c, sub_type_c\n \n -- For post rels:\n \n-create table post_rels_t (\n+create table post_post_rels_t (  -- or:  node_node_rels_t?, see below\n   site_id_c,\n   from_post_id_c,\n \n@@ -247,8 +241,8 @@ create table post_rels_t (\n \n   dormant_status_c,\n \n-  thing_type_c   thing_type_d, -- these are custom types that references types_t\n-  sub_type_c     sub_type_d,   -- iff ids > 1000. Otherwise built-in, not fks.\n+  thing_type_c   thing_type_d, -- can be a custom type that references types_t\n+  sub_type_c     sub_type_d,   -- then, thing type id > 10 000? Otherwise built-in, no fk?\n \n   cust_i32_c     i32_d,\n   cust_json_c    jsonb_ste100_000_d,\n@@ -265,16 +259,18 @@ alter table posts3 add column  cust_json_c  jsonb_ste100_000_d;\n -- Add ix and fks [pg_15]\n \n \n---== / Custom types ===========================================================\n+--=============================================================================\n+-- / Custom types\n+--=============================================================================\n \n \n---======================================================================\n---  post_rels_t\n---======================================================================\n+--=============================================================================\n+--  post_rels_t  or  node_node_rels_t  ?\n+--=============================================================================\n \n ------------------------------------------------------------------------\n-comment on table  post_rels_t  is $_$\n-Store simple relationships from posts to whatever, e.g. AnswerTo, FlagOf.\n+comment on table  node_node_rels_t  is $_$   -- not:  post_rels_t\n+Relationships from one post to another post, e.g. AnswerTo, FlagOf.\n $_$;\n ------------------------------------------------------------------------\n \n@@ -283,26 +279,14 @@ $_$;\n \n -- Later:\n -- alter table pages3 add column closed_status_c closed_status_d;\n--- â€” what would that be? The same as the OrigPost's closed_status_c?\n+-- â€” by default, the same as the orig post's status.\n \n -- Replace all pages_t.answered_by_id_c, published_by_id_c,\n --     postponed_by_id_c, planned_by_id_c, started_by_id_c,\n --     paused_by_id_c, done_by_id_c, closed_by_id_c, locked_by_id_c,\n --     frozen_by_id_c, unwanted_by_id_c, hidden_by_id_c, deleted_by_id_c\n--- with:  private_status_c\n---                 [edit] No, using private_pats_id_c instead. And the following might be\n---                 a user list/group setting instead: [/edit]\n---            null or 0 = not private,\n---            1 = yes, can make public,\n---            2 = yes, can*not* make public, but can add more who can see it,\n---            3 = yes but cannot add more pats who can see it (only indirectly via groups?)\n---        assigned_status_c  â€” maybe should be a bool?\n---            over complicated:\n---                1 = assigned to one\n---                2 = assigned to many\n---                3 = assigned to one or many, but they're all absent (e.g. resigned & quit) ?\n---        doing_status_c\n---                planned / started / paused / done\n+-- with:\n+--        answered_status_c (added already)\n --        review_status_c\n --                needs review / sbd assigned / review started / done looks bad / looks good\n --        publish_status_c  or publish_at_c  ?\n@@ -311,7 +295,6 @@ $_$;\n --                   1 = not yet published\n --                   2 = scheduled\n --                   3 = published\n---        closed_status_c,\n --        unwanted_status_c\n --        hidden_status_c,\n --        deleted_status_c ?   And details (who did what, when) in post_pats_t?\n@@ -323,77 +306,11 @@ $_$;\n --  â€” move some / most-of ?  this db-wip stuff to there instead?\n --\n \n+-- Sidebar menu:\n+--\n -- Maybe there should be another page setting: pinInWatchbar? (as opposed to topic list)\n--- Or should that be a separate table. Maybe the same as a bookmarks table? Bookmarks\n+-- Or should that be stored in a sidebar menu data structure?  [bookmarks] [MenuTree]\n -- can also form a tree structure, just like future pages and cats in the watchbar.\n-\n--- Don't!?\n-create table trees_t (  --  NO, instead, use posts_t for bookmarks?\n-                        --  A page and comments is already a tree structure,\n-                        --  with all we need!? almost precisely what we neeed\n-      --\n-      -- Such an odd, & good!?, idea.\n-      -- Posts & bookmarks, the same table?\n-      -- Just like persons and groups, same table? (Which worked out great.)\n-      --\n-      -- A new page & post type:  PageType.Linkbar / Bookmarks?\n-      -- And type Linkbar, for Everyone, appears in the linkbar,\n-      -- and post_t.visible_only_to_id can hide some links.\n-      --\n-      -- And  posts_t.doing_status_c then automatically works\n-      -- for bookmarks too! And one can create a bookmark,\n-      -- and transfer it to someone else's personal bookmarks page,\n-      -- maybe continue seeing it, via visible_only_to_c?\n-      -- and have it linked from one's own bookmarks page?\n-\n-\n-  -- Pk: (these 4 cols)\n-  site_id_c,\n-  for_pat_id_c,   -- Everyone + TreeType.Linkbar => appears in the linkbar (watchbar)\n-  tree_type_c,    -- TreeType.Linkbar or Bookmarks\n-  node_id_c,\n-\n-  parent_id_c,    -- Null unless nested? FK to:\n-                  --    (site_id_c, for_pat_id_c, tree_type_c, node_id_c).\n-  created_by_id_c, -- An admin might give a bookmark \"task\" to sbd else?\n-  owner_id_c,     -- Who may edit this tree, if different from for_pat_id_c.\n-  visible_to_id_c, --- gah gets complicated\n-\n-  node_title_c,   -- To override title of page or category or tag below.\n-  node_descr_c,   -- Optional personal comment about an assignment?\n-  node_order_c,\n-  -- A node can be collapsed by default.\n-  -- And a pat can collapse or hide a default node: (site_id, pat_id, node_id, hide = true)\n-  node_collapsed_c,\n-  node_hidden_c\n-\n-  -- At most one of these:\n-  node_page_id_c,  -- shows assignees, doing status\n-  node_post_id_c,  --       â€”\"\"â€”\n-  node_cat_id_c,\n-  node_tag_id_c,\n-  node_pat_id_c,\n-  node_url_c,\n-\n-  -- To insert another tree node into one's own bookmarks?\n-  -- (It cannot link back, because parent_id_c must be to the same tree.)\n-  other_tree_for_pat_id_c,\n-  other_tree_type_c,\n-  other_tree_node_id_c,\n-\n-  -- Optional:\n-  children_order_c,\n-  children_what_c,  -- e.g. top 3 pages in cat, if this is a cat\n-\n-  created_at_c,   -- If sorting children by date\n-  archived_c,      -- then not loaded by default\n-  reminder_at_c,\n-  reminder_interval_c,\n-  my_doing_status_c, -- if someone wants hens own task related to a post,\n-                     -- not visible to others (assuming TreeType is Bookmarks).\n-);\n-\n-\n -- maybe pointless? Can instead always be a tree_t.reminder_at_c?\n -- create table reminders_t (\n --   site_id_c,\n@@ -406,21 +323,13 @@ create table trees_t (  --  NO, instead, use posts_t for bookmarks?\n \n \n \n---   pages_t.pin_in_linkbar_order_c \n-\n-alter table perms_on_pages_t add columns:\n-  can_see_assigned_groups_c     bool,\n-  can_see_assigned_persons_c    bool,\n-  can_assign_self_c             bool,\n-  can_assign_others_c           bool,\n-\n-\n -- Split settings3 and pages3 into:\n --   pages_t,\n --   sect_props_t, sect_views_t, sect_stats_t,\n --   disc_props_t, disc_views_t, disc_stats_t,\n -- see: y2999/wip_sect_disc_props_views_stats.sql\n \n+-- Later, drop: category_id, page_id.\n \n -- Tags:\n create domain show_tag_how_d as i16_d;\n@@ -447,6 +356,8 @@ alter domain show_tag_how_d add constraint show_tag_how_d_c_vals_in check (\n \n -- what's this:  logo_url_or_html\n \n+-- No, this should be a per category setting instead. â€” Fine, will automatically be,\n+-- once  nodes_t  is in use.\n alter table settings3 add column media_in_posts int;\n alter table settings3 add constraint settings_c_mediainposts check (\n     media_in_posts between 0 and 100);\n@@ -478,19 +389,23 @@ rename table alt_page_ids3 to discussion_keys;\n -- or an url path:   /....\n \n \n--- Discussion id / page id  domain?:\n-create domain page_id_st_d text_oneline_57_d;\n-alter domain page_id_st_d add constraint url_slug_d_c_regex check (\n-    value ~ '^[[:alnum:]_-]*$');\n-comment on domain page_id_st_d is\n-    'Currently, page ids are strings â€” later, those will become aliases, '\n-    'and there''l be numeric ids instead?';\n ---------------\n \n--- RENAME pages3 to  page_meta_t?\n--- RENAME  default_category_id  to def_sub_cat_id, no, def_descendant_cat_id\n+-- RENAME posts3 to  nodes_t\n+-- MERGE categories3, pages3 into nodes_t (formerly posts3).\n+--        And, parts of settings3 into nodes_t too, namely all settings\n+--        that can vary from category to category (& page).\n+--    RENAME  default_category_id  to  def_descendant_cat_id_c\n+-- RENAME pages3 to  node_stats_t  and make it useful for all of cat, page, posts stats.\n+-- RENAME page_users3 into node_pat_stats_t, ... no, pat_page_visits_t (see below)?\n+--    MOVE column  joined_by_id  to:  perms_on_nodes_t\n+--    MOVE column  incl_in_summary_email_at_mins  to new table:  pat_node_prefs_t ?\n+-- REMOVE column  post_read_stats3.ip,  store in audit_log_t instead on login/if-changes, or elsewhere.\n -- RENAME  users3.last_reply_at/by_id  to  last_appr_repl_at/by_id\n \n+-- RENAME settings3.many_sections  â€”> enable_sub_sites_c?\n+--           DROP:  category_id,  page_id  â€” will be only in  nodes_t  instead.\n+-- RENAME users3 -> pats_t\n -- change users3.email_notfs to int, remove _toFlag [7KABKF2]\n \n alter table settings3 drop column embedded_comments_category_id;\n@@ -1041,3 +956,161 @@ alter table posts3 add constraint posts_c_draft_where_eq_pagetype_null check (\n -- & no cat or pat,  if is edits.\n -- & ... ?\n \n+\n+\n+--======================================================================\n+--======================================================================\n+--======================================================================\n+--  cont_prefs_t\n+--======================================================================\n+--======================================================================\n+\n+\n+create domain content_set_type_d int;\n+alter  domain content_set_type_d add\n+   constraint content_set_type_c_in_11 check (value in (11));\n+  -- 1 = whole site, 4 = mixed (opt cat + opt tags + opt page ids),\n+  -- 7 = tag(s) only, 11 = cat(s) only, 14 = page(s), 17 = replies?\n+\n+\n+-- Content settings/preferences\n+-------------------------------------------------\n+\n+-- For categories and tags. Can sometimes be overridden by groups or individual users.\n+\n+\n+-- create table cont_prefs_mixed_t(\n+--   site_id_c                        site_id_d,    -- pk\n+--   for_pat_id_c                     member_id_d,  -- pk\n+--   cont_prefs_pat_id_c\n+--   cont_prefs_nr_c\n+--   cat_id_c\n+--   tagtype_id_c\n+--   page_id_c\n+\n+-- Scala +=\n+delete from cont_prefs_t  ;\n+delete from cont_prefs_t where site_id_c = ?  ;\n+\n+-- Wait with this. Instead, add categories3 (cats_t) cols for now,\n+-- see:  ./y2023/v419__anon_posts_disc_prefs.sql\n+--\n+create table cont_prefs_t(\n+  site_id_c                        site_id_d, -- pk\n+  pat_id_c                         member_id_d,  -- pk\n+  prefs_nr_c                       i16_gz_d,  -- pk\n+\n+  content_set_type_c               content_set_type_d not null,\n+\n+-- ren to  anon_ops_c\n+  ops_start_anon_c                 never_alowd_recd_always_d,\n+-- ren to  anon_comts_c\n+  cmts_start_anon_c                never_alowd_recd_always_d,\n+  -- posts_stay_anon__unimpl_c        never_alowd_recd_always_d,\n+  -- min_anon_mins__unimpl_c          i32_gz_d,\n+  -- deanon_pages_aft_mins__unimpl_c  i32_gz_d,\n+  -- deanon_posts_aft_mins__unimpl_c  i32_gz_d,\n+\n+  -- sect_page_id__unimpl_c           page_id_st_d,\n+  -- sect_page_id_int__unimpl_c       page_id_d__later,\n+\n+  -- pin_in_linksbar__unimpl_c        show_in_linksbar_d,\n+  -- pin_in_linksbar_order__unimpl_c  i32_gz_d,\n+  -- pin_in_cat_order__unimpl_c       i32_gz_d,\n+  -- pin_in_globally__unimpl_c        i32_gz_d,\n+\n+  -- base_folder__unimpl_c            folder_path_d,\n+  -- show_page_ids__unimpl_c          i16_gz_d,\n+  -- ops_start_wiki__unimpl_c         never_always_d,\n+  -- cmts_start_wiki__unimpl_c        never_always_d,\n+  -- show_op_author__unimpl_c         i16_gz_d,\n+  -- allow_cmts__unimpl_c             i16_gz_d, -- yes / no-but-may-reply-to-old / no-but-keep-old / no-and-hide-old  ?\n+\n+  constraint contprefs_p_prefsid primary key (site_id_c, pat_id_c, prefs_nr_c),\n+\n+  -- fk ix: pk\n+  constraint contprefs_r_pats foreign key (site_id_c, pat_id_c)\n+      references users3 (site_id, user_id) deferrable,\n+\n+  --  -- For specific users, id must be < 0 â€” so that there can be a > 0 constraint,\n+  --  -- in cats_t and tagtypes_t, for the default prefs, to catch bugs (don't want the\n+  --  -- default prefs to accidentally reference a specific user's/group's prefs).\n+  --  constraint contprefs_c_id_gtz_iff_everyone check ((memb_id_c is null) = (prefs_id_c > 0)),\n+\n+  -- Guests and anon users cannot configure discussion preferences â€” only groups\n+  -- and real users can.\n+  constraint contprefs_c_for_users_and_groups check (pat_id_c >= 10)\n+\n+  -- -- Should use  memb_id_c = null, not 10, for everyone's prefs, otherwise\n+  -- -- I think foreign keys won't work (Postgres wouldn't know the rows were unique?).\n+  -- constraint contprefs_c_null_not_everyone check (memb_id_c <> 10)\n+);\n+\n+\n+-- Default prefs, for Everyone, id 10, per category.\n+alter table categories3 add column cont_prefs_nr_c  i32_gz_d;\n+alter table categories3 add column cont_pat_id_10_c i32_gz_d default 10;\n+alter table categories3 add constraint cont_patid10_c_eq10 check (cont_pat_id_10_c = 10);\n+\n+-- fk ix: cats_i_patid10_contprefsid\n+-- unique ix: \n+alter table categories3 add constraint cats_contprefsid_r_contprefs\n+    foreign key (site_id, cont_pat_id_10_c, cont_prefs_nr_c)\n+    references cont_prefs_t (site_id_c, pat_id_c, prefs_nr_c) deferrable;\n+\n+create index cats_i_patid10_contprefsid on categories3 (site_id, cont_pat_id_10_c, cont_prefs_nr_c);\n+\n+\n+\n+--======================================================================\n+--  cont_prefs_t\n+--======================================================================\n+\n+------------------------------------------------------------------------\n+comment on table  cont_prefs_t  is $_$\n+\n+Settings and preferences that make sense for all of categories, tags\n+and specific pages. Usually they're default, for everyone in the forum;\n+then, memb_id_c is 10 (Everyone) and prefs_id_c is > 0.\n+\n+But some preferences can be overridden by user groups or individual users\n+themselves â€” then, prefs_id_c is < 0 and memb_id_c is the user/group id.\n+Let's say you want to always post anonymously in a specific\n+category. Then, you can (not impl though) set ops_start_anon_c and cmts_start_anon_c\n+to true, for yourself only, in that category. And thereafter you cannot\n+forget to be anonyomus, there. Whilst others are unaffected.\n+Or maybe you're the teacher, and don't care about being anonymous in one\n+specific category â€” whilst the default (for all students) is to be anonymous. \n+\n+Maybe later, there'll be a table cont_mixed_prefs_t for specifying\n+content preferences for many categories, optionally combined with tags,\n+in one single row. But currently there's one cont_prefs_t per category,\n+maybe \"soon\" per tag too.\n+\n+Wikis: cont_prefs_t lets you implement wikis by making a forum\n+category a wiki category: set ops_start_wiki_c to true, and set\n+base_folder_c to e.g. '/wiki/' and show_page_ids_c to false.\n+Alternatively, you can create a *tag* named 'wiki', and configure the\n+same settings for that tag (instaed of a category).\n+Then wiki pages can be placed in the categories where it makes the most sense\n+whilst still being part of a wiki â€” just tag them with the wiki tag.\n+So, a wiki via a category, or a tag. What makes sense, is community\n+specific I suppose.\n+\n+Docs: In a documentation / articles category, you might want to set\n+show_op_author_c = false and allow_cmts_c = false,\n+and maybe base_folder_c = '/docs/'.\n+Or you can use a 'docs' tag, and have docs in different categories,\n+whilst still appearing below the '/docs/' URL path'\n+$_$;  -- '\n+\n+-- comment on column  cont_prefs_t.anon_by_def_c  is $_$\n+-- \n+-- If posts in this category, are anonymous, by default.\n+-- $_$;\n+-- ---------------------------------------------------------------------\n+-- comment on column  cont_prefs_t.def_anon_level_c  is $_$\n+-- \n+-- Default anonymity level, in this category.\n+-- $_$; -- '\n+------------------------------------------------------------------------"
    },
    {
      "sha": "bd9c4bc1f6c7e3d9849e7802dcac4d13af48f754",
      "filename": "appsv/rdb/src/main/resources/db/migration/r__comments.sql",
      "status": "modified",
      "additions": 217,
      "deletions": 32,
      "changes": 249,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fr__comments.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fr__comments.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fr__comments.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -7,6 +7,20 @@\n --  Domains\n --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n \n+------------------------------------------------------------------------\n+comment on domain  can_see_who_d  is $_$\n+Says if a pat can see other pats related to something, e.g. see who\n+is assigned to a task, or see which others also can see a private\n+page.  See: can_see_assigned_c and  can_see_who_can_see_c.\n+$_$;\n+\n+------------------------------------------------------------------------\n+comment on domain  creator_status_d  is $_$\n+Says if the poster is still author and owner. And if others have been\n+added as authors or owners, or assigned to this post â€” then, they'd\n+be looked up in pat_node_*_rels_t.\n+$_$;  -- '\n+\n ------------------------------------------------------------------------\n comment on domain  dormant_status_d  is $_$\n If not null, shows why a relationship (from a post or pat to something)\n@@ -27,6 +41,71 @@ PatRelType.AssignedTo or VotedOn, from a pat to a post.\n Is a thing_type_d.\n $_$;\n \n+--  ------------------------------------------------------------------------\n+--  comment on domain page_id_st_d is $_$\n+--  \n+--  Currently, page ids are strings â€” later, those will become aliases,\n+--  and there'll be numeric ids instead?\n+--  $_$;  -- '\n+\n+--  ------------------------------------------------------------------------\n+--  pat_type_d  REMOVE\n+--  comment on domain pat_type_d is $_$\n+--\n+--  Participant types:   â€” if null (the default), then, < 0 => Guest, > 0 => User?\n+--     and incl extra flag fields if different somehow, e.g. isBot,\n+--     isExtHelp, isSupRead, isSupAdm etc?\n+--\n+--  Maybe rename to specType?\n+--\n+--  ==== Anon, per page\n+--  %% -3 = Unknown pat\n+--  ==== Guests (semi anon blog commenters)\n+--  %% 1 = Guest or anonymous/unknown stranger.\n+--  ==== Not a real account, cannot add to groups etc:\n+--  %% 2 = Anonyn, with real_user_id identifying the real user.\n+--  ==== Cannot add to groups. Has all permisssions or gets in other ways:\n+--  1 = System user\n+--  2 = System bot ?\n+--  ==== Cannot log in, is just a pseudonym. But can add to groups etc:\n+--  21  = Anon\n+--  ====\n+--  <=  49 cannot have permissions?\n+--  51 = Group. Created by admins, top down. Can have security permissions\n+--      and config settings that get inherited by those in the group.\n+--  (? 52 = Circle, or bottom-up group. Created by ordinary members.\n+--      E.g. a study circle, or teacher circle. Doesn't have inheritable\n+--      settings? Nor permissions. Not impl.)\n+--  ==== Cannot config UI prefs â€” doesn't use any UI:\n+--  61 = Only bot, e.g. CI system? â€” cannot log in; can *only* do things via AIP.\n+--       A human + custom client should use type 9 User instead.\n+--  71  = Pen name. Not impl.\n+--  ====\n+--  %% 31 = User (a human, maybe a bot, sometimes cannot know. Maybe an extrenal Matrix\n+--      user who got an account auto generated).\n+--  ====\n+--  ? 101 = External management account: superbot, superadmin, superstaff (mod)\n+--  ? 111 = External help account â€” if site admins ask for help, and want to give access\n+--       only to some parts of their site? (e.g. dev/design help)\n+--  ====\n+--  ? 127 = temporary just one-request user, via API secret, mustn't store in db\n+--  \n+--  No!: Participant types:\n+--  1 = Unknown stranger or user.  â€” skip\n+--  2 = Anonymous stranger or user (no name).  â€” skip\n+--  3 = Guest.\n+--  4 = Pen name. Not impl.\n+--  7 = Built-in account, e.g. system, sysbot, superadmin.\n+--  8 = External management account: superbot, superadmin, superstaff?\n+--  9 = User (a human, maybe a bot, sometimes cannot no).\n+--  (10 = Bot, can only do things via AIP? But could be a human + a custom client?)\n+--  91 = Group. Created by admins, top down. Can have security permissions\n+--      and config settings that get inherited by those in the group.\n+--  (? 92 = Circle, or bottom-up group. Created by ordinary members.\n+--      E.g. a study circle, or teacher circle. Doesn't have inheritable\n+--      settings? Nor permissions. Not impl.)\n+--  $_$;\n+\n ------------------------------------------------------------------------\n comment on domain  post_nr_d  is $_$\n On each page, the Orig Post is nr 1, the first reply is nr 2, and so on.\n@@ -40,6 +119,12 @@ PostRelType.AnswerTo (other post) / FlagOf (posts or pats) / DuplicateOf (other\n Is a thing_type_d.\n $_$;\n \n+------------------------------------------------------------------------\n+comment on domain  private_status_d  is $_$\n+If not null, the page or post and all descendants, are private.\n+The value will show if more private pats can bee added, but for now, always 1.\n+$_$;\n+\n ------------------------------------------------------------------------\n comment on domain  rev_nr_d  is $_$\n Post revision number (if it's been edited).\n@@ -68,19 +153,22 @@ they'd try to use the same table row).\n $_$; -- '\n \n ------------------------------------------------------------------------\n-comment on domain trust_level_or_staff_d is $_$\n+comment on domain  trust_level_or_staff_d  is $_$\n \n Trust levels from Stranger = 0 to Core Member = 6, plus dummy trust levels\n for staff, i.e. mods = 7 and admins = 8.\n $_$;\n \n+------------------------------------------------------------------------\n+\n \n \n --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n --  Tables\n --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n \n \n+\n --======================================================================\n --  pats_t\n --======================================================================\n@@ -104,6 +192,17 @@ votes and flags, but later, flags will be kept in posts_t instead,\n linked to the flagged things via the upcoming table post_rels_t.\n $_$;\n \n+------------------------------------------------------------------------\n+comment on column  post_actions3.added_by_id_c  is $_$\n+If one pat assigns another to a task.\n+$_$;\n+\n+------------------------------------------------------------------------\n+comment on column  post_actions3.as_pat_id_c  is $_$\n+Done as another user, e.g. for anonymous votes, points to the anonym\n+to show instead of oneself.\n+$_$;\n+\n \n --======================================================================\n --  perms_on_pages_t\n@@ -128,16 +227,46 @@ start a new private message page and link to the comments page.\n RENAME to perms_on_pages_t.\n $_$;  -- '\n \n+------------------------------------------------------------------------\n+comment on column  perms_on_pages3.can_see_others_priv_c  is $_$\n+If one may see a category, or a private message (a page),\n+or a private comments thread on a not-private page.\n+$_$;\n+\n+------------------------------------------------------------------------\n+comment on column  perms_on_pages3.can_see_who_can_see_c  is $_$\n+If pat can see which other pats can see a page or comment tree.\n+null means inherit, and:\n+   1 = Cannot see if anyone else can see it.\n+   2 = See if anyone else can see it, but not who.\n+   3 = See the primary group(s) of those who can see it, e.g. Support Staff.\n+   4 = See precisely which individuals can see it, e.g. know which\n+       others are part of a private discussion â€” which\n+      can be important to know, depending on what one has in mind to say,\n+      and is the default.\n+$_$;\n+\n+------------------------------------------------------------------------\n+comment on column  perms_on_pages3.can_see_assigned_c  is $_$\n+null means inherit, and:\n+   1 = Can not see if a task is assigned to anyone.\n+   2 = See if assigned or not (but not to whom).\n+   3 = See which group(s) assigned to, e.g. Support Staff, but not\n+       to which person(s) in the group.\n+   4 = See precisely which individuals are assigned.\n+$_$;\n+\n \n --======================================================================\n --  posts_t\n --======================================================================\n \n ------------------------------------------------------------------------\n comment on table  posts3  is $_$\n-To be renamed to  posts_t.  Stores the actuall discussions:\n+To be renamed to  posts_t.  No, to nodes_t.  Stores the actuall discussions:\n the Original Post, a title post, reply/comment posts, meta posts,\n chat messages, any private comments.\n+Later, categories and pages will be here too. [all_in_nodes_t]\n \n Later, other things too: Flags. Flags are nicely represented as posts of\n type PostType.Flag on pages of type PageType.Flag, visible to oneself and mods\n@@ -153,41 +282,57 @@ And bookmarks. Later.\n $_$;  -- '\n \n ------------------------------------------------------------------------\n-comment on column  posts3.authors_id_c  is $_$\n-The person who posted a post, is shown as author by default.  [post_authors]\n-But this can be changed, by specifying a member or a list of members\n-if there's more than one author.\n+comment on column  posts3.created_by_id  is $_$\n+If created by an anonym or pseudonym, is the id of that anonym or pseudonym.\n+And to find the true author, one looks up that anon/pseudonym in pats_t,\n+and looks at the true_id_c column.\n $_$; -- '\n \n-------------------------------------------------------------------------\n-comment on column  posts3.owners_id_c  is $_$\n-The person who posted a post, is the owner of the post â€” *unless*  [post_owners]\n-owners_id_c is set to someone else. Can be set to a member or a list of\n-members. The owners of a post, may edit it, change the authors, make it\n-private (but not make a private post public), add/remove owners, etc.\n \n-Changing the owner, can be good if 1) someone starts working on an article,\n-and leaves for vacation, and another person is to finish the article,\n-publish it etc.  Or if 2) mods have deleted a post, and want to prevent\n-the original author from un-deleting it or editing it any further. Then,\n-the mods can make the Moderators group the owner of the post â€”\n-thereafter the original author cannot edit it, un/delete it or anything.\n-$_$;\n \n ------------------------------------------------------------------------\n-comment on column  posts3.private_pats_id_c  is $_$\n-If non-null, the post is private. Then, all descendants (the whole sub thread\n-or page if the Orig Post is private) should be too, otherwise it's a bug.\n-private_pats_id_c points to a pat or a list of pats (pats_t.is_pat_list_c = true).\n-Comments in private sub threads have nr:s < 0, so there's a quick way for Ty\n+comment on column  posts3.private_status_c  is $_$\n+If non-null, the post is private, and all descendants (the whole\n+comments tree or page if it's the orig post) are private too.\n+\n+In  perms_on_pages3.{may_post_comment, may_see}  we see who may\n+reply to (or only see) the private tree.\n+\n+The private_status_c value says if it's ok to add more people to this private\n+tree, and if someone added, can see already existing private comments\n+(otherwise they can see new, only).\n+These things can only be changed in the more-private direction,\n+once the private tree has been created.  Maybe values could be:\n+\n+0 or null: Not private.\n+1: Can add more private members, and make it public. The default.\n+   All other values below, won't be implemented the nearest ... years?:\n+2: Can add more people to the private tree, that is, make it less private, sort of.\n+   And they get to see the alreday existing comments.\n+3: Can add more people to a private tree, but they don't get to see any\n+   already existing comments; they can see only comments posted after they\n+   (the new people) got added. Will use  perms_on_posts3.can_see_priv_aft_c\n+   to remember when?\n+4: If adding more people to a private page, instead, a new private page\n+   gets created, with the original people plus the ones now added.\n+   (And you can keep adding people, until a comment has been posted on this\n+   new page â€” thereafter, adding more, cerates yet another page.)\n+   Then new people won't see that there was an earlier discussion,\n+   with fewer participants.\n+5: Cannot add more private pats (except for by adding to a group who can see).\n+6: Cannot add more private pats, not even by adding sbd to a group.\n+   (How's that going to get implemented? And does it ever make sense)\n+\n+Comments in private comment trees have nr:s < 0, so there's a quick way for Ty\n to skip them when loading comments to show by default on a page, *and*\n so there won't be any gaps in the not-private comment nr sequence (> 0).\n-Comments on private *pages* though, have positive nrs â€” because anyone who can\n+Comments on private *pages* though, can have nrs > 0? Because anyone who can\n see the private page, can see those comments, so we want to load all of them.\n-It's not allowed to start new private sub threads inside private threads\n+\n+It's not allowed to start new private sub trees inside private trees\n or on private pages, because then the permission system would become\n-unnecessarily complicated. ('New' here means that a different set of\n-pats could see those private sub threads.)\n+unnecessarily complicated? ('New' here means that a different group of\n+people could see those private-tree-in-tree.)\n $_$;  -- '\n \n ------------------------------------------------------------------------\n@@ -204,11 +349,10 @@ comment on column  identities3.idp_user_id_c  is $_$\n \n For OIDC, this is the 'sub', Subject Identifier.\n $_$;\n-\n-\n ------------------------------------------------------------------------\n \n \n+\n --======================================================================\n --  idps_t\n --======================================================================\n@@ -385,7 +529,7 @@ oEmbed was 9 215 bytes, and included an inline <svg> image, and\n 'background-color: #F4F4F4' repeated at 8 places, and the Instagram post text\n repeated twice. Better allow at least 2x more than that.\n There's an appserver max length check too [oEmb_json_len].\n-$_$;\n+$_$;  -- '\n \n \n ------------------------------------------------------------------------\n@@ -396,7 +540,7 @@ E.g. TCP RST or timeout. 0 means the same in a browser typically, e.g. request.a\n \n However, currently (maybe always?) failed fetches are instead cached temporarily\n only, in Redis, so cannot DoS attack the disk storage.  [ln_pv_fetch_errs]\n-$_$;\n+$_$; -- '\n \n \n ------------------------------------------------------------------------\n@@ -407,6 +551,47 @@ or a request timeout or TCP RST?   [ln_pv_fetch_errs]\n $_$;\n \n \n+\n+-- --======================================================================\n+-- --  posts3\n+-- --======================================================================\n+-- \n+-- ------------------------------------------------------------------------\n+-- RM:  comment on column  posts3.anon_level_c  is $_$\n+-- \n+-- If this post was done anonymously, by a member (not a guest), and how\n+-- much it is anonymized.\n+-- $_$;\n+-- ------------------------------------------------------------------------\n+-- RM:  comment on column  posts3.anonym_nr_c  is $_$\n+-- \n+-- Others can see that one's anonymous posts with the same virtual anon\n+-- account incarnation, were made by the same anonymous person (but of course\n+-- not who hen is).\n+-- $_$; -- '\n+-- ------------------------------------------------------------------------\n+\n+\n+-- ------------------------------------------------------------------------\n+comment on column  posts3.answered_status_c  is $_$\n+\n+1: Waiting for solutions. 2: There's some solutions, still waiting for more.\n+3: There's a solution, no more needed (and then page typically closed).\n+$_$; -- '\n+\n+-- ------------------------------------------------------------------------\n+comment on column  posts3.closed_status  is $_$\n+\n+1: Closed, 2: Locked, 3: Frozen.\n+$_$;\n+\n+-- ------------------------------------------------------------------------\n+comment on column  posts3.doing_status_c  is $_$\n+\n+1: Planned, 2: Started, 3: Paused, 4: Done.\n+$_$;\n+\n+\n --======================================================================\n --  types_t   (currently named tagtypes_t)\n --======================================================================"
    },
    {
      "sha": "cc0d574fb7a72f834317ca1ee7167619606cbcba",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2021/wip_v41Y__samesite_none.sql",
      "status": "removed",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/706b2161759ff1b81dc8f2a598d3e32c3fac8611/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2021%2Fwip_v41Y__samesite_none.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/706b2161759ff1b81dc8f2a598d3e32c3fac8611/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2021%2Fwip_v41Y__samesite_none.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2021%2Fwip_v41Y__samesite_none.sql?ref=706b2161759ff1b81dc8f2a598d3e32c3fac8611",
      "patch": "@@ -1,4 +0,0 @@\n-\n-alter table sessions_t add column                          hash_4_ho_ss_none_c  bytea_len32_d;\n-alter table sessions_t rename column hash_4_http_only_c to hash_5_ho_ss_lax_c;\n-alter table sessions_t rename column hash_5_strict_c    to hash_6_ho_ss_strict_c;"
    },
    {
      "sha": "35431f064c3cf17e3454270e15a468b2836c12c4",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2023/v419__anon_posts_disc_prefs.sql",
      "status": "added",
      "additions": 427,
      "deletions": 0,
      "changes": 427,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv419__anon_posts_disc_prefs.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv419__anon_posts_disc_prefs.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv419__anon_posts_disc_prefs.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,427 @@\n+-- In this migration: Anonymous posts, per page; discussion preferences;\n+-- and some new datatype domains.\n+\n+\n+-- New domains\n+-------------------------------------------------\n+\n+\n+create domain never_always_d i16_d;\n+alter  domain never_always_d add\n+   constraint never_always_d_c_in_2_3_7_8 check (value in (2, 3, 7, 8));\n+\n+-- See AnonStatus in the Scala code.\n+create domain anonym_status_d i32_d;\n+alter  domain anonym_status_d add\n+   constraint anonym_status_d_c_in_65535_2097151 check (value in (65535, 2097151));\n+\n+-- For now, always null. Will drop the null constr, and add other constraints later.\n+create domain pseudonym_status_d i32_d;\n+alter  domain pseudonym_status_d add\n+   constraint pseudonym_status_d_c_null check (value is null);\n+\n+create domain creator_status_d i16_gz_lt1024_d;\n+\n+create domain private_status_d i16_gz_lt1024_d;\n+alter  domain private_status_d add\n+   constraint private_status_d_c_null_1 check ((value is null) or (value = 1));\n+\n+create domain can_see_who_d i16_d;\n+alter  domain can_see_who_d add\n+   constraint can_see_who_d_c_null_1234 check (\n+            (value is null) or (value between 1 and 4));\n+\n+\n+\n+-- New permissions\n+-------------------------------------------------\n+\n+alter table settings3\n+    -- For site admins or cat mods. Lets them change moderation settings.\n+    -- If can change:  approve before,  review after,  pending review.\n+    add column  can_remove_mod_reqmts_c  i32_gz_d,\n+    add column  enable_anon_posts_c      bool;\n+\n+alter table perms_on_pages3\n+    add column  can_see_others_priv_c  bool,\n+    add column  can_see_who_can_see_c  can_see_who_d,\n+    add column  can_see_priv_aft_c     timestamp,\n+    add column  can_post_private_c     never_always_d,\n+    add column  can_delete_own_c       bool,\n+\n+    add column  can_alter_c            i64_gz_d,  -- [alterPage]\n+    add column  is_owner_c             i16_gz_d,  -- value is prio?\n+    add column  on_pats_id_c           pat_id_d,  -- default = anyone\n+    add column  can_manage_pats_c      i64_gz_d,\n+    add column  can_invite_pats_c      i64_gz_d,  -- instead of adder\n+    add column  can_suspend_pats_c     i64_gz_d,  -- instead of bouncer\n+\n+    add column  can_assign_pats_c      bool,\n+    add column  can_assign_self_c      bool,\n+    add column  can_see_assigned_c     can_see_who_d;\n+\n+\n+-- Authors and Anonymous votes\n+-------------------------------------------------\n+\n+\n+alter table post_actions3\n+    add column  as_pat_id_c    pat_id_d,\n+    add column  added_by_id_c  member_id_d,\n+\n+    -- fk ix: patnodesinrels_i_aspatid\n+    add constraint patnodesinrels_aspatid_r_pats\n+    foreign key (site_id, as_pat_id_c)\n+    references users3 (site_id, user_id) deferrable,\n+\n+    -- fk ix: patnodesinrels_i_addedbyid\n+    add constraint patnodesinrels_addedbyid_r_pats\n+    foreign key (site_id, added_by_id_c)\n+    references users3 (site_id, user_id) deferrable;\n+\n+create index patnodesinrels_i_aspatid on post_actions3 (site_id, as_pat_id_c)\n+    where as_pat_id_c is not null;\n+\n+create index patnodesinrels_i_addedbyid on post_actions3 (site_id, added_by_id_c)\n+    where added_by_id_c is not null;\n+\n+\n+\n+-- Anonymous posts\n+-------------------------------------------------\n+\n+\n+-- Dupl cols: both on categories3, and posts3. Won't be dupl, when pat_node_multi_rels_t\n+-- in use.\n+alter table categories3\n+    add column  comts_start_hidden_c  never_always_d,\n+    add column  comts_start_anon_c    never_always_d,\n+    add column  op_starts_anon_c      never_always_d,\n+    add column  new_anon_status_c     anonym_status_d;\n+\n+\n+alter table pages3\n+    -- Dupl, almost same cols as above, for categories3:\n+    add column  comts_start_hidden_c  never_always_d,\n+    add column  comts_start_anon_c    never_always_d,\n+    add column  new_anon_status_c     anonym_status_d;\n+\n+alter table posts3\n+    -- Private sub threads\n+    -- There's already hidden_status_c.\n+    add column  private_status_c      private_status_d,\n+    add column  creator_status_c      creator_status_d,\n+\n+    -- Old mistakes\n+    -- These will be in  pat_node_*_rels_t  instead, so can look up post ids directly\n+    -- by pat id, relationship type ordered by time.  Otherwise, if having many\n+    -- post authors, by pointing  authors_id_c  to a pats_t user list group,\n+    -- the database would need to do one lookup, for each user list group one is\n+    -- a member of. (These have never been used, ok to drop.)\n+    drop column  owners_id_c,\n+    drop column  authors_id_c;\n+\n+\n+\n+alter table links_t  rename column  to_pp_id_c  to  to_pat_id_c;\n+\n+\n+\n+alter table drafts3\n+    add column new_anon_status_c  anonym_status_d,\n+    add column post_as_id_c       pat_id_d,\n+\n+    -- fk ix: drafts_i_postasid\n+    add constraint drafts_postasid_r_pats\n+        foreign key (site_id, post_as_id_c)\n+        references users3 (site_id, user_id) deferrable;\n+\n+create index drafts_i_postasid on drafts3 (site_id, post_as_id_c)\n+    where post_as_id_c is not null;\n+\n+\n+\n+alter table users3\n+    add column can_see_others_email_adrs_c  bool,\n+    add column true_id_c                 member_id_d,\n+    add column pseudonym_status_c        pseudonym_status_d,\n+    add column anonym_status_c           anonym_status_d,\n+    -- Will change to  tree node id, [add_nodes_t].\n+    add column anon_on_page_id_st_c      page_id_st_d,\n+    add column anon_in_tree_id__later_c  post_id_d,\n+\n+    -- fk ix: pats_i_trueid_anononpageid or pats_i_trueid_anonintreeid.\n+    add constraint pats_trueid_r_pats\n+        foreign key (site_id, true_id_c)\n+        references users3 (site_id, user_id) deferrable,\n+\n+    -- fk ix: pats_i_anononpageid\n+    add constraint pats_anononpage_r_pages\n+        foreign key (site_id, anon_on_page_id_st_c)\n+        references pages3 (site_id, page_id) deferrable,\n+\n+    -- fk ix: pats_i_anonintreeid\n+    add constraint pats_anonintree_r_nodes\n+        foreign key (site_id, anon_in_tree_id__later_c)\n+        references posts3 (site_id, unique_post_id) deferrable;\n+\n+\n+-- Good to be able to look up if a pat (true_id_c) has any anonymous\n+-- comments on a given page.\n+create index pats_i_trueid_anononpageid on users3 (\n+    site_id, true_id_c, anon_on_page_id_st_c);\n+\n+create index pats_i_trueid_anonintreeid on users3 (\n+    site_id, true_id_c, anon_in_tree_id__later_c);\n+\n+create index pats_i_anononpageid on users3 (\n+    site_id, anon_on_page_id_st_c);\n+\n+create index pats_i_anonintreeid on users3 (\n+    site_id, anon_in_tree_id__later_c);\n+\n+\n+\n+alter table users3\n+    add constraint pats_c_pseudonymid_gte100 check (\n+          pseudonym_status_c is null or user_id >= 100),\n+\n+    add constraint pats_c_anonid_ltem10 check (\n+          anonym_status_c is null or user_id <= -10),\n+\n+    add constraint pats_c_not_both_anon_pseudo check (\n+          num_nonnulls(pseudonym_status_c, anonym_status_c) <= 1);\n+\n+alter table users3 add constraint pats_c_anon_null_same check (\n+    -- Either not an aonym or pseudonym:\n+    ((true_id_c is null) and\n+      (anonym_status_c is null) and\n+      (anon_on_page_id_st_c is null) and\n+      (pseudonym_status_c is null)\n+      )\n+    or ((true_id_c is not null)\n+      and (\n+        -- or an aonym:\n+        ((anonym_status_c is not null) and\n+         (anon_on_page_id_st_c is not null) and\n+         (pseudonym_status_c is null)\n+         )\n+        or -- pseudonym:\n+        ((anonym_status_c is null) and\n+         (anon_on_page_id_st_c is null) and\n+         (pseudonym_status_c is not null)\n+         )\n+        )));\n+\n+-- Anons don't need to get approved. Instead, if the real user is approved,\n+-- the annon is approved too, implicitly.\n+-- But pseudonyms might need to get approved? Since can have custom name and bio.\n+--\n+-- Anons (and pseudonyms too) can get suspended, I think, so if someone misbehaves\n+-- via an anon account, then, suspending just that anon account, is a bit more\n+-- friendly than suspending the user's real account â€” like, a first small warning,\n+-- suitable in some cases (but sometimes better suspend the real account directly).\n+--\n+alter table users3 add constraint pats_c_anons_need_no_approval check (\n+    anonym_status_c is null\n+    or (created_at is not null and\n+        is_approved is null and\n+        approved_at is null and\n+        approved_by_id is null));\n+\n+-- Maybe later it'll be possible for pseudonyms to configure a different\n+-- notifications email address â€” in case one wants discussions related to\n+-- the pseudonym, to get sent elsewhere. But is that over complicated? Because\n+-- then it could also make sense with *per category* notification email adrs,\n+-- maybe better avoid.\n+-- For now, neither anonyms nor pseudonyms can have any own email addr\n+-- (so cannot be different from their true account).\n+--\n+alter table users3 add constraint pats_c_anon_no_email check (\n+    (anonym_status_c is null and\n+      pseudonym_status_c is null\n+      )\n+    or (guest_email_addr is null and\n+        primary_email_addr is null and\n+        email_notfs is null and\n+        email_verified_at is null and\n+        email_for_every_new_post is null and\n+        summary_email_interval_mins is null and\n+        summary_email_if_active is null));\n+\n+-- These:  is_approved, approved_at, approved_by_id\n+-- are listed in  pats_c_anons_need_no_approval  instead.\n+--\n+-- These:  suspended_at, suspended_till, suspended_by_id, suspended_reason\n+-- also aren't listed, because anons *can* get suspended. Can be better than blocking\n+-- the real account, and, if someone misbehaves repeatedly, when being anon, then,\n+-- after some of those anon users have gotten suspended, the real user can automatically\n+-- get prevented from posting anonymously (or even suspended henself) â€” and this'd\n+-- happen *without* the mods having to know who hen is, that is, the misbehaving user\n+-- got blocked and hens true identity wasn't revealed to the mods.\n+--\n+-- These:  deactivated_at, deleted_at\n+-- also aren't included. Can make sense to delete an anon account?\n+--\n+-- Create sth similar, for pseudonyms, later?\n+--\n+alter table users3 add constraint pats_c_anon_nulls check (\n+    anonym_status_c is null\n+    or (guest_browser_id is null and\n+        sso_id is null and\n+        ext_id is null and\n+        username is null and\n+        password_hash is null and\n+        full_name is null and\n+        country is null and\n+        website is null and\n+        about is null and\n+        is_moderator is null and\n+        is_admin is null and\n+        is_superadmin is null and\n+        is_owner is null and\n+        is_group = false and\n+        ui_prefs is null and\n+        max_upload_bytes_c is null and\n+        allowed_upload_extensions_c is null and\n+        -- Maybe there should be an anon user group, where these are configured?:\n+        -- Or would that be the Everyone group?\n+        -- E.g.  may_assign_me_tr_lv_c  can actually make sense â€” assigning an\n+        -- anon, if you're all in the same company, you know hen is one of your\n+        -- helpful co-workers (but not exactly who). [assign_anon]\n+        may_search_engines_index_me_c is null and\n+        may_see_my_activity_tr_lv_c is null and\n+        may_see_my_username_tr_lv_c is null and\n+        may_see_my_full_name_tr_lv_c is null and\n+        may_see_my_tiny_avatar_tr_lv_c is null and\n+        may_see_my_medium_avatar_tr_lv_c is null and\n+        may_see_my_brief_bio_tr_lv_c is null and\n+        may_see_my_full_bio_tr_lv_c is null and\n+        may_see_my_memberships_tr_lv_c is null and\n+        may_see_my_profile_tr_lv_c is null and\n+        may_see_me_in_lists_tr_lv_c is null and\n+        may_see_if_im_online_tr_lv_c is null and\n+        may_see_my_visit_stats_tr_lv_c is null and\n+        may_see_my_post_stats_tr_lv_c is null and\n+        may_see_my_approx_stats_tr_lv_c is null and\n+        may_see_my_exact_stats_tr_lv_c is null and\n+        may_find_me_by_email_tr_lv_c is null and\n+        may_follow_me_tr_lv_c is null and\n+        may_mention_me_tr_lv_c is null and\n+        may_mention_me_same_disc_tr_lv_c is null and\n+        may_dir_msg_me_tr_lv_c is null and\n+        why_may_not_mention_msg_me_html_c is null and\n+        may_see_my_account_email_adrs_tr_lv_c is null and\n+        may_see_my_contact_email_adrs_tr_lv_c is null and\n+        can_see_others_email_adrs_c is null and\n+        may_assign_me_tr_lv_c is null and\n+        may_see_my_assignments_tr_lv_c is null and\n+        email_threading_c is null and\n+        email_notf_details_c is null\n+        ));\n+\n+-- Better lock the real user account's levels instead?\n+alter table users3 add constraint pats_c_anon_no_levels check (\n+    anonym_status_c is null\n+    or (trust_level is null and\n+        locked_trust_level is null and\n+        threat_level is null and\n+        locked_threat_level is null and\n+        tech_level_c is null\n+        ));\n+\n+alter table users3 add constraint pats_c_anon_no_avatar check (\n+    anonym_status_c is null\n+    or (avatar_tiny_base_url is null and\n+        avatar_tiny_hash_path is null and\n+        avatar_small_base_url is null and\n+        avatar_small_hash_path is null and\n+        avatar_medium_base_url is null and\n+        avatar_medium_hash_path is null));\n+\n+\n+alter table users3 drop constraint pps_c_guest_not_nulls;\n+alter table users3 add constraint pats_c_guest_non_nulls check (\n+    -- Member, special or anonym?\n+    (user_id > -10 or anonym_status_c is not null)\n+    -- Else, is a guest and then, add back the constr deleted above:\n+    -- (guest email is '-' if absent, so, never null)\n+    or (created_at is not null and\n+        full_name is not null and\n+        guest_email_addr is not null));\n+\n+-- There're are many check-sth-is-null, for guests. Is it simpler with just one, big?\n+-- Maybe combine other smaller constraints into this one, later?\n+alter table users3 add constraint pats_c_guest_nulls check (\n+    -- Member, special or anonym?\n+    (user_id > -10 or anonym_status_c is not null)\n+    -- Else: Guest.\n+    or (\n+        can_see_others_email_adrs_c is null\n+    ));\n+\n+alter table users3 drop constraint pps_c_guest_w_no_browserid_has_extid;\n+alter table users3 add constraint pats_c_guest_w_no_browserid_has_extid check (\n+    -- Member, special or anonym?\n+    (user_id > -10 or anonym_status_c is not null)\n+    -- Else, is guest; then needs a browser id or an ext id.\n+    or guest_browser_id is not null\n+    or ext_id is not null);\n+\n+\n+\n+alter table review_tasks3     rename column  user_id         to  about_pat_id_c;\n+\n+alter table spam_check_queue3 rename column  author_id       to  author_id_c;\n+\n+alter table audit_log3        rename column  doer_id         to  doer_id_c;\n+alter table audit_log3        rename column  target_user_id  to  target_pat_id_c;\n+\n+alter table audit_log3\n+    add column  doer_true_id_c        member_id_d,\n+    add column  target_pat_true_id_c  member_id_d,\n+    add column  sess_id_part_1        base64us_len16_d,\n+\n+    add constraint auditlog_c_doer_trueid_null check (\n+        (doer_true_id_c is null) or (doer_id_c is not null)),\n+\n+    add constraint auditlog_c_targetpat_trueid_null check (\n+        (target_pat_true_id_c is null) or (target_pat_id_c is not null)),\n+\n+    -- fk ix: auditlog_i_doertrueid\n+    add constraint auditlog_doertrueid_r_pats\n+        foreign key (site_id, doer_true_id_c)\n+        references users3 (site_id, user_id) deferrable,\n+\n+    -- fk ix: auditlog_i_targetpattrueid\n+    add constraint auditlog_targetpattrueid_r_pats\n+        foreign key (site_id, target_pat_true_id_c)\n+        references users3 (site_id, user_id) deferrable,\n+\n+    -- For now, to find bugs. Delete constraint later?\n+    -- fk ix: auditlog_i_sid_part1\n+    add constraint auditlog_sid_part1_r_sessions\n+        foreign key (site_id, sess_id_part_1)\n+        references sessions_t (site_id_c, part_1_comp_id_c) deferrable;\n+\n+\n+create index  auditlog_i_doertrueid       on audit_log3 (site_id, doer_true_id_c);\n+create index  auditlog_i_targetpattrueid  on audit_log3 (site_id, target_pat_true_id_c);\n+create index  auditlog_i_sid_part1        on audit_log3 (site_id, sess_id_part_1);\n+\n+\n+\n+-- Notification preferences\n+-------------------------------------------------\n+\n+-- About new pages, replies, maybe edits to wiki pages.\n+\n+alter table page_notf_prefs3  rename to page_notf_prefs_t;  -- OR node/content_notf_prefs_t?\n+alter table page_notf_prefs_t rename column people_id to pat_id_c;\n+\n+alter table page_notf_prefs_t rename column pages_in_whole_site  to pages_in_whole_site_c;\n+alter table page_notf_prefs_t rename column pages_in_category_id to pages_in_cat_id_c;\n+alter table page_notf_prefs_t rename column incl_sub_categories  to incl_sub_cats_c;\n+alter table page_notf_prefs_t rename column pages_pat_created    to pages_pat_created_c;\n+alter table page_notf_prefs_t rename column pages_pat_replied_to to pages_pat_replied_to_c;\n+"
    },
    {
      "sha": "7a71e78b500f329cb7eea6c70cf4e6c3e731405f",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2999/wip_sect_disc_props_views_stats.sql",
      "status": "modified",
      "additions": 76,
      "deletions": 3,
      "changes": 79,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_sect_disc_props_views_stats.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_sect_disc_props_views_stats.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_sect_disc_props_views_stats.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1,5 +1,21 @@\n+-- SKIP all this?\n+-- For example, instead of pages_t, there'll be a  nodes_t,\n+-- which will replace: pages3, categories3 and posts3 (it'd be posts3 renamed to nodes_t)\n+--\n+-- However maybe do create:\n+--\n+--   pat_node_prefs_t   with personal settings for pages and cats\n+--\n+-- Or maybe instead use:\n+--\n+--   pat_node_multi_rels_t  ?\n+--\n \n-create table pages_t (  -- [disc_props_view_stats]\n+\n+-- SKIP the rest of this file?  Move to  (proj-root)/old/don-t/ ?\n+--\n+\n+create table pages_t (  -- [disc_props_view_stats].  nodes_t  instead of  pages_t?\n   site_id_c,\n   id_c,\n   old_id_st_c, -- legacy textual id\n@@ -10,7 +26,14 @@ create table pages_t (  -- [disc_props_view_stats]\n   --- Or can it make sense to mark a page Done, independently of if\n   --- all mini tasks therein are done or not? I suppose so, yes,\n   --- so maybe these fields should be *both* in posts_t and pages_t?\n+\n   created_by_id_c,\n+  -------------------------------------------------------------------\n+  -- MOSTLY DON'T this,  insetad, there's pat_node_rels_t with RelType.AuthorOf,\n+  -- and  node_node_rels_t wiht RelType.AnswerTo, etc.\n+  -- And  nodes_t.doing_status_c = planned/started/paused/done.\n+  --              closed_status ...\n+\n   author_id_c,\n \n   answered_by_id_c,  -- Or use only posts_t.answered_status_c etc instead,\n@@ -36,8 +59,13 @@ create table pages_t (  -- [disc_props_view_stats]\n \n   -- Only for section pages: (e.g. forum topics & cats list page, or wiki main page)\n   -- Why not in cats_t? Because now, with this in pages_t, one can\n+  --  ... [Edit, 2023-01] can what? What was I going to write? Share the same\n+  --  props, between different categories?  But that's not so important, is it?\n+  --  can be better to have a way to configure many cats together,\n+  --  or copy props from one to another, instead?\n+  --  So maybe skip sect_props_c and sect_props_t, store directly in  nodes_t instead?\n   -- \n-  sect_props_c references sect_props_t (site_id_c, Everyone.id, props_id_c),\n+  sect_props_c references sect_props_t (site_id_c, Everyone.id, props_id_c), -- or skip\n   sect_view_c  references sect_views_t (site_id_c, Everyone.id, view_id_c),\n   -- No, reference from cats_t, the root cat, instead? because there should\n   -- be just one stats entry, not one per \"view\" page.\n@@ -46,7 +74,7 @@ create table pages_t (  -- [disc_props_view_stats]\n   -- For a section page, this'd be the defaults for all pages in the section\n   -- (or if navigating to those pages, via this section page).\n   -- And the stats would be the aggregate stats, for the whole section.\n-  disc_props_c references disc_props_t (site_id_c, Everyone.id, props_id_c),\n+  disc_props_c references disc_props_t (site_id_c, Everyone.id, props_id_c), -- or skip\n   disc_view_c  references disc_view_t  (site_id_c, Everyone.id, props_id_c),\n   disc_stats_c references disc_stats_c (site_id_c, Everyone.id, stats_id_c),\n );\n@@ -65,6 +93,8 @@ create table pages_t (  -- [disc_props_view_stats]\n \n -- Site section config table â€” how a forum / wiki / blog section should look and function.\n -- Can be overridden in categories, and individual pages.\n+-- SKIP, not needed,  now when there'll be  nodes_t which stores cats, pages, posts,\n+--       and where settings get inherited from cats to child cats and pages.\n create table sect_props_t (  -- or: forum_props_t?\n   site_id_c,\n   id_c\n@@ -97,6 +127,8 @@ create table sect_props_t (  -- or: forum_props_t?\n \n   -- Move from categories3 to here? So simpler to share same settings,\n   -- in different categories.\n+  -- SKIP, such a rare use case! Never heard anyone ask for or any forum supporting it.\n+  --    (However, copying and syncing settings between cats, maybe can be useful sometimes.)\n   def_page_sort_order_c        page_sort_order_d,\n   def_page_score_alg_c         i16_gez_d,\n   def_page_score_period_c      trending_period_d,\n@@ -118,10 +150,17 @@ create table sect_view_t (\n   forumCatsTopics: Opt[i32] = None,\n );\n \n+\n+-- SKIP. Currently in  page_users3 â€” or no, doesn't yet exist?.\n+-- Will use  pages3  renamed to node_stats_t?  for both cats & pages.\n+--\n create table sect_stats_t (\n   -- ...\n );\n \n+\n+-- SKIP, for same reason as not needing sect_props_t above.\n+---\n create table disc_props_t (   -- Scala:  DiscProps\n   site_id,\n   props_id_c,\n@@ -140,6 +179,14 @@ create table disc_props_t (   -- Scala:  DiscProps\n -- or name it  disc_layout_t  instead?\n -- Or skip for now, incl in  disc_props_t  instead?  then, not configurable per pat.\n -- Can customize individually: (just how discussions *look*)\n+--\n+-- Maybe: Add these columns to disc_prefs_t (will be named:  node_prefs_t  instead),\n+-- and to reuse layout settings,\n+-- instead create a layouts_t with layout settings, and then one can choose from those\n+-- predefined settings?  Hmm but if an admin edits a layouts_t row, then,\n+-- should those changes take effect in the cats that used those templates, or not?\n+-- Maybe instead: Link from it to disc_views_t.\n+--\n create table disc_view_t (   -- people can configure their own ~~view~~ layout (distant future)\n   site_id,\n   pat_id_c,  -- if someone's personal view. Default Everyone.Id\n@@ -162,6 +209,8 @@ create table disc_view_t (   -- people can configure their own ~~view~~ layout (\n   SummarizeNumRepliesVisibleLimit\n );\n \n+\n+-- SKIP, will use  pages3  renamed to node_stats_t?  for both cats & pages.\n create table disc_stats_t (   -- updated automatically\n   site_id,\n   -- Auto updated fields from pages3\n@@ -175,6 +224,30 @@ create table disc_stats_t (   -- updated automatically\n );\n \n \n+-- Maybe make some per cat settings individually / by-group configurable?\n+-- Categories are less frequent, so no need for a  cat_props_t with id rows and\n+-- referencing them, for sharing the same settings between many cats?\n+-- (But for pages â€” then, having pages_t.disc_props_id_c link to disc_props_t.props_id_c\n+-- makes sense.)\n+--\n+alter table disc_prefs_t add column view_id_c; -- or inline in table?\n+alter table disc_prefs_t add column incl_in_summaries;\n+alter table disc_prefs_t add column unlist_topics; -- ?\n+                             column unpinned; -- can individually unpin a topic one has read?\n+-- create table cat_pat_props_t (   -- or  per_pat_cat_props_t   or  cat_per_pat_props_t?\n+--                                 -- no, instead, incl in disc_prefs_t, see above\n+--   site_id_c,\n+--   cat_props_id_c,\n+--   -- cat_id_c,\n+--   -- pat_id_c default everyone.id,\n+--   anon_by_def_c           bool,\n+--   def_anon_level_c        anon_status_d,\n+--   max_anon_level_c        anon_status_d,\n+-- \n+--   incl_in_summaries,  -- so people can choose themselves\n+--   unlist_topics,      -- if one thinks it's just noise in this category\n+-- );\n+\n \n \n "
    },
    {
      "sha": "cce4703998fe8dc4d0d41f0a6039ad658bf5a052",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2999/wip_v41Y__samesite_none.sql",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_v41Y__samesite_none.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_v41Y__samesite_none.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2999%2Fwip_v41Y__samesite_none.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,19 @@\n+\n+create domain forgotten_d i16_d default 0;\n+alter  domain forgotten_d add\n+   constraint forgotten_d_c_in_0_1_2 check (value between 0 and 2);\n+\n+alter table sessions_t add column                          hash_4_ho_ss_none_c  bytea_len32_d;\n+alter table sessions_t rename column hash_4_http_only_c to hash_5_ho_ss_lax_c;\n+alter table sessions_t rename column hash_5_strict_c    to hash_6_ho_ss_strict_c;\n+\n+alter table sessions_t add column forgotten_c not null;\n+\n+\n+create sessions_i_to_forget_a_bit on sessions_t (least(deleted_at_c, expired_at_c))\n+  where forgotten_c = 0;\n+\n+create sessions_i_to_forget_more on sessions_t (least(deleted_at_c, expired_at_c))\n+  where forgotten_c = 1;\n+\n+create sessions_i_ended_at on sessions_t (least(deleted_at_c, expired_at_c));"
    },
    {
      "sha": "2e79ffab6565d116bcf7d6e27bd387155f0bfade",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/AuditLogSiteDaoMixin.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 10,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FAuditLogSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FAuditLogSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FAuditLogSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -75,7 +75,8 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n         site_id,\n         audit_id,\n         batch_id,\n-        doer_id,\n+        doer_id_c,\n+        doer_true_id_c,\n         done_at,\n         did_what,\n         details,\n@@ -99,19 +100,21 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n         target_page_id,\n         target_post_id,\n         target_post_nr,\n-        target_user_id,\n+        target_pat_id_c,\n+        target_pat_true_id_c,\n         target_site_id)\n       values (\n-        ?, ?, ?, ?, ? at time zone 'UTC',\n+        ?, ?, ?, ?, ?, ? at time zone 'UTC',\n         ?, ?, ?, ?::inet,\n-        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n+        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n       \"\"\"\n \n     val values = List[AnyRef](\n       entry.siteId.asAnyRef,\n       entry.id.asAnyRef,\n       entry.batchId.orNullInt,\n-      entry.doerId.asAnyRef,\n+      entry.doerTrueId.curId.asAnyRef,\n+      entry.doerTrueId.anyTrueId.orNullInt,\n       entry.doneAt.asTimestamp,\n       entry.didWhat.toInt.asAnyRef,\n       NullVarchar,\n@@ -135,7 +138,8 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n       entry.targetPageId.orNullVarchar,\n       entry.targetUniquePostId.orNullInt,\n       entry.targetPostNr.orNullInt,\n-      entry.targetUserId.orNullInt,\n+      entry.targetPatTrueId.map(_.curId).orNullInt,\n+      entry.targetPatTrueId.flatMap(_.anyTrueId).orNullInt,\n       entry.targetSiteId.orNullInt)\n \n     runUpdateSingleRow(statement, values)\n@@ -166,7 +170,8 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n       case None => \"\"\n       case Some(uId) =>\n         values.append(uId.asAnyRef)\n-        \"and doer_id = ?\"\n+        \"and doer_id_c = ?\"\n+        // Later, but only sometimes:  or doer_true_id_c = ?)   [sql_true_id_eq]\n     }\n \n     val andDidWhatEqType = if (types.isEmpty) \"\" else {\n@@ -266,7 +271,7 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  private def getAuditLogEntry(rs: js.ResultSet) = {\n+  private def getAuditLogEntry(rs: js.ResultSet): AuditLogEntry = {\n     val didWhatNr = rs.getInt(\"did_what\")\n     val didWhat = AuditLogEntryType.fromInt(didWhatNr\n                     ) getOrElse AuditLogEntryType.Unknown(didWhatNr)\n@@ -275,7 +280,8 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n       id = rs.getInt(\"audit_id\"),\n       batchId = getOptInt(rs, \"audit_id\"),\n       didWhat = didWhat,\n-      doerId = rs.getInt(\"doer_id\"),\n+      doerTrueId = TrueId(getInt32(rs, \"doer_id_c\"),\n+                      anyTrueId = getOptInt(rs, \"doer_true_id_c\")),\n       doneAt = getDate(rs, \"done_at\"),\n       emailAddress = Option(rs.getString(\"email_address\")),\n       browserIdData = getBrowserIdData(rs),\n@@ -290,7 +296,8 @@ trait AuditLogSiteDaoMixin extends SiteTransaction {\n       targetUniquePostId = getOptInt(rs, \"target_post_id\"),\n       targetPageId = Option(rs.getString(\"target_page_id\")),\n       targetPostNr = getOptInt(rs, \"target_post_nr\"),\n-      targetUserId = getOptInt(rs, \"target_user_id\"),\n+      targetPatTrueId = getOptInt(rs, \"target_pat_id_c\").map(id =>\n+            TrueId(id, anyTrueId = getOptInt(rs, \"target_pat_true_id_c\"))),\n       targetSiteId = getOptInt(rs, \"target_site_id\"),\n       isLoading = true)\n   }"
    },
    {
      "sha": "1444ea514e607243affc61690ce65b08ac9696a7",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/CategoriesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 73,
      "deletions": 31,
      "changes": 104,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -316,38 +316,68 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n \n   override def insertCategoryMarkSectionPageStale(category: Cat, mab: MessAborter) {\n     val statement = \"\"\"\n-      insert into categories3 (\n-        site_id, id, ext_id, page_id, parent_id, default_category_id,\n-        name, slug, position,\n-        description, new_topic_types,\n-        def_sort_order_c,\n-        comt_order_c,\n-        comt_nesting_c,\n-        def_score_alg_c,\n-        def_score_period_c,\n-        do_vote_style_c,\n-        do_vote_in_topic_list_c,\n-        unlist_category, unlist_topics, incl_in_summaries,\n-        created_at, updated_at, deleted_at)\n-      values (\n-        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\"\"\n+        insert into categories3 (\n+            site_id,\n+            id,\n+            ext_id,\n+            page_id,\n+            parent_id,\n+            default_category_id,\n+            name,\n+            slug,\n+            position,\n+            description,\n+            new_topic_types,\n+            def_sort_order_c,\n+            comt_order_c,\n+            comt_nesting_c,\n+            comts_start_hidden_c,\n+            comts_start_anon_c,\n+            op_starts_anon_c,\n+            new_anon_status_c,\n+            def_score_alg_c,\n+            def_score_period_c,\n+            do_vote_style_c,\n+            do_vote_in_topic_list_c,\n+            unlist_category,\n+            unlist_topics,\n+            incl_in_summaries,\n+            created_at,\n+            updated_at,\n+            deleted_at)\n+        values (\n+            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n+            ?, ?, ?, ?, ?)  \"\"\"\n+\n     val values = List[AnyRef](\n-      siteId.asAnyRef, category.id.asAnyRef, category.extImpId.orNullVarchar,\n-      category.sectionPageId, category.parentId.orNullInt,\n-      category.defaultSubCatId.orNullInt,\n-      category.name, category.slug, category.position.asAnyRef,\n-      category.description.orNullVarchar, topicTypesToVarchar(category.newTopicTypes),\n-      category.defaultSortOrder.map(_.toInt).orNullInt,\n-      category.comtOrder.map(_.toInt).orNullInt,\n-      category.comtNesting.orNullInt,\n-      catSortOrderScoreAlg(category).orNullInt,\n-      catSortOrderScorePeriodInt(category).orNullInt,\n-      category.doVoteStyle.map(_.toInt).orNullInt,\n-      category.doVoteInTopicList.orNullBo,\n-      category.unlistCategory.asAnyRef, category.unlistTopics.asAnyRef,\n-      category.includeInSummaries.toInt.asAnyRef,\n-      category.createdAt.asTimestamp, category.updatedAt.asTimestamp,\n-      category.deletedAt.orNullTimestamp)\n+          siteId.asAnyRef,\n+          category.id.asAnyRef,\n+          category.extImpId.orNullVarchar,\n+          category.sectionPageId,\n+          category.parentId.orNullInt,\n+          category.defaultSubCatId.orNullInt,\n+          category.name,\n+          category.slug,\n+          category.position.asAnyRef,\n+          category.description.orNullVarchar,\n+          topicTypesToVarchar(category.newTopicTypes),\n+          category.defaultSortOrder.map(_.toInt).orNullInt,\n+          category.comtOrder.map(_.toInt).orNullInt,\n+          category.comtNesting.orNullInt,\n+          category.comtsStartHidden.map(_.toInt).orNullInt,\n+          category.comtsStartAnon.map(_.toInt).orNullInt,\n+          category.opStartsAnon.map(_.toInt).orNullInt,\n+          category.newAnonStatus.map(_.toInt).orNullInt,\n+          catSortOrderScoreAlg(category).orNullInt,\n+          catSortOrderScorePeriodInt(category).orNullInt,\n+          category.doVoteStyle.map(_.toInt).orNullInt,\n+          category.doVoteInTopicList.orNullBo,\n+          category.unlistCategory.asAnyRef,\n+          category.unlistTopics.asAnyRef,\n+          category.includeInSummaries.toInt.asAnyRef,\n+          category.createdAt.asTimestamp,\n+          category.updatedAt.asTimestamp,\n+          category.deletedAt.orNullTimestamp)\n     tryInsUpdCat(category, mab) {\n       runUpdateSingleRow(statement, values)\n     }\n@@ -366,6 +396,10 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n         def_sort_order_c = ?,\n         comt_order_c = ?,\n         comt_nesting_c = ?,\n+        comts_start_hidden_c = ?,\n+        comts_start_anon_c = ?,\n+        op_starts_anon_c = ?,\n+        new_anon_status_c = ?,\n         def_score_alg_c = ?,\n         def_score_period_c = ?,\n         do_vote_style_c = ?,\n@@ -382,6 +416,10 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n       category.defaultSortOrder.map(_.toInt).orNullInt,\n       category.comtOrder.map(_.toInt).orNullInt,\n       category.comtNesting.orNullInt,\n+      category.comtsStartHidden.map(_.toInt).orNullInt,\n+      category.comtsStartAnon.map(_.toInt).orNullInt,\n+      category.opStartsAnon.map(_.toInt).orNullInt,\n+      category.newAnonStatus.map(_.toInt).orNullInt,\n       catSortOrderScoreAlg(category).orNullInt,\n       catSortOrderScorePeriodInt(category).orNullInt,\n       category.doVoteStyle.map(_.toInt).orNullInt,\n@@ -470,6 +508,10 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n             scorePeriodInt = getOptInt32(rs, \"def_score_period_c\")),\n       comtOrder = PostSortOrder.fromOptVal(getOptInt32(rs, \"comt_order_c\")),\n       comtNesting = getOptInt32(rs, \"comt_nesting_c\"),\n+      comtsStartHidden = NeverAlways.fromOptInt(getOptInt32(rs, \"comts_start_hidden_c\")),\n+      comtsStartAnon = NeverAlways.fromOptInt(getOptInt32(rs, \"comts_start_anon_c\")),\n+      opStartsAnon = NeverAlways.fromOptInt(getOptInt32(rs, \"op_starts_anon_c\")),\n+      newAnonStatus = AnonStatus.fromOptInt(getOptInt32(rs, \"new_anon_status_c\")),\n       doVoteStyle = DoVoteStyle.fromOptInt32(getOptInt32(rs, \"do_vote_style_c\")),\n       doVoteInTopicList = getOptBool(rs, \"do_vote_in_topic_list_c\"),\n       unlistCategory = rs.getBoolean(\"unlist_category\"),"
    },
    {
      "sha": "3715056d465de18279b43450eb9c8568db989145",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/CreateSiteSystemDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCreateSiteSystemDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCreateSiteSystemDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCreateSiteSystemDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -206,7 +206,7 @@ trait CreateSiteSystemDaoMixin extends SystemTransaction {  // RENAME to SystemS\n       // since we deleted a site & emptied upload_refs3.\n       s\"\"\"\n       delete from page_users3 where site_id = ?\n-      delete from page_notf_prefs3 where site_id = ?\n+      delete from page_notf_prefs_t where site_id = ?\n       delete from tag_notf_levels3 where site_id = ?\n       delete from post_tags3 where site_id = ?\n       delete from post_actions3 where site_id = ?"
    },
    {
      "sha": "4733ed8dd250c2f67bb3468a30e80455a258d12b",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/DraftsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 27,
      "deletions": 1,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FDraftsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FDraftsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FDraftsSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -65,9 +65,11 @@ trait DraftsSiteDaoMixin extends SiteTransaction {\n         post_id,\n         post_type,\n         to_user_id,\n+        post_as_id_c,\n+        new_anon_status_c,\n         title,\n         text)\n-      values (?, ?, ?, ?, ?, null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n+      values (?, ?, ?, ?, ?, null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n       on conflict (site_id, by_user_id, draft_nr)\n       do update set\n         -- Use the new version, it should be more recent. [5ABRQP0]\n@@ -87,6 +89,8 @@ trait DraftsSiteDaoMixin extends SiteTransaction {\n         post_id = excluded.post_id,\n         post_type = excluded.post_type,\n         to_user_id = excluded.to_user_id,\n+        post_as_id_c = excluded.post_as_id_c,\n+        new_anon_status_c = excluded.new_anon_status_c,\n         title = excluded.title,\n         text = excluded.text\n       \"\"\"\n@@ -107,6 +111,8 @@ trait DraftsSiteDaoMixin extends SiteTransaction {\n       locator.postId.orNullInt,\n       draft.postType.map(_.toInt).orNullInt,\n       locator.toUserId.orNullInt,\n+      draft.doAsAnon.flatMap(_.anySameAnonId.map(_.toInt)).orNullInt,\n+      draft.doAsAnon.flatMap(_.anyNewAnonStatus.map(_.toInt)).orNullInt,\n       draft.title,\n       draft.text))\n   }\n@@ -209,6 +215,7 @@ trait DraftsSiteDaoMixin extends SiteTransaction {\n \n     Draft(\n       byUserId = getInt(rs, \"by_user_id\"),\n+      doAsAnon = parseWhichAnon(rs),\n       draftNr = getInt(rs, \"draft_nr\"),\n       forWhat = draftLocator,\n       createdAt = getWhen(rs, \"created_at\"),\n@@ -220,4 +227,23 @@ trait DraftsSiteDaoMixin extends SiteTransaction {\n       text = getString(rs, \"text\"))\n   }\n \n+\n+  /** Sync w talkyard.server.parser.parseWhichAnonJson().\n+    */\n+  def parseWhichAnon(rs: js.ResultSet): Opt[WhichAnon] = {\n+    val sameAnonId = getOptInt(rs, \"post_as_id_c\")\n+    // PostgreSQL custom domain  anonym_status_d  has verified that the value is valid.\n+    val newAnonStatus = AnonStatus.fromOptInt(getOptInt(rs, \"new_anon_status_c\"))\n+    dieIf(sameAnonId.isDefined && newAnonStatus.isDefined, \"TyE6023RAKJ5\",\n+            \"Both  post_as_id_c  and  new_anon_status_c  non-null\")\n+    if (sameAnonId.isDefined) {\n+      Some(WhichAnon.SameAsBefore(sameAnonId.get))\n+    }\n+    else if (newAnonStatus.isDefined) {\n+      Some(WhichAnon.NewAnon(newAnonStatus.get))\n+    }\n+    else {\n+      None\n+    }\n+  }\n }"
    },
    {
      "sha": "b6e9133c3924bdbf358bc9f05eab62198e5bfc24",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/LinksSiteTxMixin.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FLinksSiteTxMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FLinksSiteTxMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FLinksSiteTxMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -116,7 +116,7 @@ trait LinksSiteTxMixin extends SiteTransaction {\n               is_external_c,\n               to_page_id_c,\n               to_post_id_c,\n-              to_pp_id_c,\n+              to_pat_id_c,\n               to_tag_id_c,\n               to_category_id_c)\n           values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n@@ -323,7 +323,7 @@ trait LinksSiteTxMixin extends SiteTransaction {\n           //to_staff_page: getOptBool(rs, \"to_staff_page\") is true,\n           toPageId = getOptString(rs, \"to_page_id_c\"),\n           toPostId = getOptInt(rs, \"to_post_id_c\"),\n-          toPpId = getOptInt(rs, \"to_pp_id_c\"),\n+          toPpId = getOptInt(rs, \"to_pat_id_c\"),\n           toTagId = getOptInt(rs, \"to_tag_id_c\"),\n           toCategoryId = getOptInt(rs, \"to_category_id_c\"))\n   }"
    },
    {
      "sha": "f780bee5f9475a4d3d984ded5ba3618cf3791703",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PageNotfPrefsSiteTxMixin.scala",
      "status": "modified",
      "additions": 29,
      "deletions": 29,
      "changes": 58,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageNotfPrefsSiteTxMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageNotfPrefsSiteTxMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageNotfPrefsSiteTxMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -29,21 +29,21 @@ import scala.collection.mutable.ArrayBuffer\n   *\n   * Tested here:  TyT8MKRD25\n   */\n-trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n+trait PageNotfPrefsSiteTxMixin extends SiteTransaction {  // RENAME  DiscNotPrefs...\n   self: RdbSiteTransaction =>\n \n \n   private def thingColumnNameValue(notfPref: PageNotfPref): (String, AnyRef) =\n     if (notfPref.pageId.isDefined)\n       \"page_id\" -> notfPref.pageId.get.asAnyRef\n     else if (notfPref.pagesInCategoryId.isDefined)\n-      \"pages_in_category_id\" -> notfPref.pagesInCategoryId.get.asAnyRef\n+      \"pages_in_cat_id_c\" -> notfPref.pagesInCategoryId.get.asAnyRef\n     else if (notfPref.wholeSite)\n-      \"pages_in_whole_site\" -> true.asAnyRef\n+      \"pages_in_whole_site_c\" -> true.asAnyRef\n     else if (notfPref.pagesPatCreated)\n-      \"pages_pat_created\" -> true.asAnyRef\n+      \"pages_pat_created_c\" -> true.asAnyRef\n     else if (notfPref.pagesPatRepliedTo)\n-      \"pages_pat_replied_to\" -> true.asAnyRef\n+      \"pages_pat_replied_to_c\" -> true.asAnyRef\n     else\n       die(\"TyE2ABK057\")\n \n@@ -62,19 +62,19 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n     val (thingColumnName, _) = thingColumnNameValue(notfPref)\n \n     val insertStatement = s\"\"\"\n-      insert into page_notf_prefs3 (\n+      insert into page_notf_prefs_t (\n         site_id,\n-        people_id,\n+        pat_id_c,\n         notf_level,\n         page_id,\n-        pages_pat_created,\n-        pages_pat_replied_to,\n-        pages_in_category_id,\n-        pages_in_whole_site)\n+        pages_pat_created_c,\n+        pages_pat_replied_to_c,\n+        pages_in_cat_id_c,\n+        pages_in_whole_site_c)\n         -- pages_with_tag_label_id,\n       values (?, ?, ?, ?, ?, ?, ?, ?)\n       -- There can be only one on-conflict clause.\n-      on conflict (site_id, $thingColumnName, people_id)\n+      on conflict (site_id, $thingColumnName, pat_id_c)\n       do update set\n         notf_level = excluded.notf_level\n       \"\"\"\n@@ -97,9 +97,9 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n   override def deletePageNotfPref(notfPref: PageNotfPref): Boolean = {\n     val (thingColumnName, thingColumnValue) = thingColumnNameValue(notfPref)\n     val deleteStatement = s\"\"\"\n-      delete from page_notf_prefs3\n+      delete from page_notf_prefs_t\n       where site_id = ?\n-        and people_id = ?\n+        and pat_id_c = ?\n         and $thingColumnName = ?\n       \"\"\"\n     val values = List(siteId.asAnyRef, notfPref.peopleId.asAnyRef, thingColumnValue)\n@@ -111,16 +111,16 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n         : PageNotfLevels = {\n     def selectNotfLevelWhere(what: Int) = s\"\"\"\n       select notf_level, $what as what\n-      from page_notf_prefs3\n+      from page_notf_prefs_t\n       where site_id = ?\n-        and people_id = ?\"\"\"\n+        and pat_id_c = ?\"\"\"\n \n     val query = s\"\"\"\n       ${selectNotfLevelWhere(111)} and page_id = ?\n       union\n-      ${selectNotfLevelWhere(222)} and pages_in_category_id = ?\n+      ${selectNotfLevelWhere(222)} and pages_in_cat_id_c = ?\n       union\n-      ${selectNotfLevelWhere(333)} and pages_in_whole_site\n+      ${selectNotfLevelWhere(333)} and pages_in_whole_site_c\n       \"\"\"\n \n     val values = List(\n@@ -155,11 +155,11 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n   }\n \n   def loadPageNotfPrefsOnCategory(categoryId: CategoryId): Seq[PageNotfPref] = {\n-    loadPageNotfPrefsOnSth(\"pages_in_category_id\", categoryId.asAnyRef)\n+    loadPageNotfPrefsOnSth(\"pages_in_cat_id_c\", categoryId.asAnyRef)\n   }\n \n   def loadPageNotfPrefsOnSite(): Seq[PageNotfPref] = {\n-    loadPageNotfPrefsOnSth(\"pages_in_whole_site\", true.asAnyRef)\n+    loadPageNotfPrefsOnSth(\"pages_in_whole_site_c\", true.asAnyRef)\n   }\n \n   private def loadPageNotfPrefsOnSth(thingColumnName: String, thingColumnValue: AnyRef)\n@@ -172,7 +172,7 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n         s\"and $thingColumnName = ?\"\n       }\n     val query = s\"\"\"\n-      select * from page_notf_prefs3\n+      select * from page_notf_prefs_t\n       where site_id = ? $andThingEq\n       \"\"\"\n     runQueryFindMany(query, values.toList, readNotfPref)\n@@ -205,17 +205,17 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n     val andPageIdClause = pageId match {\n       case None =>\n         if (pagesRepliedTo)\n-          \"and pages_pat_replied_to\"  // unimpl:  pages_pat_created\n+          \"and pages_pat_replied_to_c\"  // unimpl:  pages_pat_created_c\n         else\n           \"and page_id is null\"\n       case Some(id) =>\n         values.append(id)\n         \"and page_id = ?\"\n     }\n     val query = s\"\"\"\n-      select * from page_notf_prefs3\n+      select * from page_notf_prefs_t\n       where site_id = ?\n-        and people_id in (${makeInListFor(memberIds)})\n+        and pat_id_c in (${makeInListFor(memberIds)})\n         $andPageIdClause\n       \"\"\"\n     runQueryFindMany(query, values.toList, readNotfPref)\n@@ -224,13 +224,13 @@ trait PageNotfPrefsSiteTxMixin extends SiteTransaction {\n \n   private def readNotfPref(rs: js.ResultSet): PageNotfPref = {\n     PageNotfPref(\n-          peopleId = getInt(rs, \"people_id\"),\n+          peopleId = getInt(rs, \"pat_id_c\"),\n           notfLevel = NotfLevel.fromInt(getInt(rs, \"notf_level\")).getOrElse(NotfLevel.Normal),\n           pageId = getOptString(rs, \"page_id\"),\n-          pagesPatCreated = getOptBool(rs, \"pages_pat_created\").getOrElse(false),\n-          pagesPatRepliedTo = getOptBool(rs, \"pages_pat_replied_to\").getOrElse(false),\n-          pagesInCategoryId = getOptInt(rs, \"pages_in_category_id\"),\n-          wholeSite = getOptBool(rs, \"pages_in_whole_site\").getOrElse(false))\n+          pagesPatCreated = getOptBool(rs, \"pages_pat_created_c\").getOrElse(false),\n+          pagesPatRepliedTo = getOptBool(rs, \"pages_pat_replied_to_c\").getOrElse(false),\n+          pagesInCategoryId = getOptInt(rs, \"pages_in_cat_id_c\"),\n+          wholeSite = getOptBool(rs, \"pages_in_whole_site_c\").getOrElse(false))\n   }\n \n }"
    },
    {
      "sha": "8dc7af39761edf0571c196c671c29e62c7eea4db",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PageUsersSiteDaoMixin.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPageUsersSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -39,7 +39,7 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n         user_id,\n         joined_by_id,\n         kicked_by_id,\n-        notf_level,   -- will remove, use page_notf_prefs3 instead [036KRMP4]\n+        notf_level,   -- will remove, use page_notf_prefs_t instead [036KRMP4]\n         notf_reason,  --\n         incl_in_summary_email_at_mins,\n         num_seconds_reading,\n@@ -63,7 +63,7 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n       pp.userId.asAnyRef,\n       pp.addedById.orNullInt,\n       pp.removedById.orNullInt,\n-      NullInt,  // will remove, use page_notf_prefs3 instead [036KRMP4]\n+      NullInt,  // will remove, use page_notf_prefs_t instead [036KRMP4]\n       NullInt,  //\n       pp.inclInSummaryEmailAtMins.asAnyRef,\n       // Similar code: insert list items. [04RKJUMS2]\n@@ -163,7 +163,7 @@ trait PageUsersSiteDaoMixin extends SiteTransaction {\n           select distinct page_id\n           from posts3\n           where site_id = ?\n-            and created_by_id in (${ makeInListFor(patIds) })\n+            and created_by_id in (${ makeInListFor(patIds) })   -- + pat_node_rels_t [AuthorOf] !\n             and approved_at is not null\n             and deleted_status = 0\n             and hidden_at is null"
    },
    {
      "sha": "791a8a3518b6648b6d194d1de97a63398e06d55f",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -62,7 +62,7 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n           and page_id in (\n             select distinct page_id from posts3\n             where site_id = ?\n-              and created_by_id = ?\n+              and created_by_id = ?   -- + pat_node_rels_t [AuthorOf] !\n               and approved_at is not null\n               and deleted_status = 0\n               and hidden_at is null)"
    },
    {
      "sha": "42bc56e79ad8e8d2600a77738fcf7bd0dd38f4f2",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 446,
      "deletions": 130,
      "changes": 576,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -44,15 +44,55 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   override def loadPostsOnPage(pageId: PageId): Vec[Post] =\n     loadPostsOnPageImpl(pageId, postNr = None)\n \n+  private def select__posts_po__someJoin__patPostRels_pa(someJoin: St): St = s\"\"\"\n+        select po.*,\n+               -- Builds an array of arrays:\n+               --    [[rel-type, from-pat], [other-rel-type, other-pat], ...]\n+               array_agg(array[pa.rel_type_c, pa.from_pat_id_c])\n+                    filter (where pa.rel_type_c is not null)\n+                    pat_post_rels_array\n+        from posts3 po\n+        $someJoin post_actions3 pa\n+            on  pa.site_id = po.site_id\n+            and pa.to_post_id_c = po.unique_post_id  \"\"\"\n+\n+  private val and__pa_relType__in__aut_own_asg: St = s\"\"\"\n+            and pa.rel_type_c in (${\n+                PatNodeRelType.AuthorOf_later.toInt}, ${\n+                PatNodeRelType.OwnerOf_later.toInt}, ${\n+                PatNodeRelType.AssignedTo.toInt}) \"\"\"\n+\n+  private val select__posts_po__leftJoin__patPostRels_pa: St =\n+    select__posts_po__someJoin__patPostRels_pa(\"left outer join\") +\n+          and__pa_relType__in__aut_own_asg\n+\n+  private val select__posts_po__innerJoin__patPostRels_pa: St =\n+    select__posts_po__someJoin__patPostRels_pa(\"inner join\") +\n+          and__pa_relType__in__aut_own_asg\n+\n+  // It's enough to specify the posts3 primary key.\n+  private val groupBy__siteId_postId: St = s\"\"\"\n+          group by po.site_id, po.unique_post_id \"\"\"\n+\n+  private val groupBy_orderBy__siteId_postId: St = s\"\"\"\n+          $groupBy__siteId_postId\n+          order by po.site_id, po.unique_post_id \"\"\"\n \n   private def loadPostsOnPageImpl(pageId: PageId, postNr: Opt[PostNr]): Vec[Post] = {\n     // Similar to:  loadPostsByNrs(_: Iterable[PagePostNr])\n-    var query = \"select * from posts3 where SITE_ID = ? and PAGE_ID = ?\"\n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef, pageId)\n-    postNr foreach { id =>\n-      query += \" and post_nr = ?\"\n+    val andPostNrEq = postNr map { id =>\n       values.append(id.asAnyRef)\n-    }\n+      \"and po.post_nr = ?\"\n+    } getOrElse \"\"\n+\n+    val query = s\"\"\"\n+          $select__posts_po__leftJoin__patPostRels_pa\n+          where po.site_id = ? and\n+                po.page_id = ?\n+                $andPostNrEq\n+          $groupBy_orderBy__siteId_postId \"\"\"\n+\n     runQueryFindMany(query, values.toList, rs => {\n       readPost(rs, pageId = Some(pageId))\n     })\n@@ -64,14 +104,25 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     // Use post_nr, not created_at, because 1) if a post is moved from another page to page pageId,\n     // then its created_at might be long-ago, although its post_nr will become the highest\n     // on this page once it's been added. Also 2) there's an index on pageid, post_nr.\n-    val query = s\"\"\"\n-      select * from posts3 where site_id = ? and page_id = ? and\n-          post_nr in (${PageParts.TitleNr}, ${PageParts.BodyNr})\n-      union\n-      select * from (\n-        select * from posts3 where site_id = ? and page_id = ?\n-        order by post_nr desc limit $limit) required_subquery_alias\n-      \"\"\"\n+\n+    val query = s\"\"\" -- loadOrigPostAndLatestPosts\n+        -- Load title and orig post\n+        $select__posts_po__leftJoin__patPostRels_pa\n+        where po.site_id = ? and\n+              po.page_id = ? and\n+              po.post_nr in (${PageParts.TitleNr}, ${PageParts.BodyNr})\n+        $groupBy__siteId_postId\n+        union\n+        select * from (\n+            -- Load latest posts\n+            $select__posts_po__leftJoin__patPostRels_pa\n+            where po.site_id = ? and\n+                  po.page_id = ? and\n+                  po.post_nr not in (${PageParts.TitleNr}, ${PageParts.BodyNr})\n+            $groupBy__siteId_postId\n+            order by post_nr desc limit $limit\n+            ) required_subquery_alias  \"\"\"\n+\n     runQueryFindMany(query, List(siteId.asAnyRef, pageId.asAnyRef, siteId.asAnyRef,\n         pageId.asAnyRef), rs => {\n       readPost(rs, pageId = Some(pageId))\n@@ -83,15 +134,19 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     if (postIds.isEmpty)\n       return Nil\n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef)\n-    val queryBuilder = new StringBuilder(127, \"select * from posts3 where SITE_ID = ? and (\")\n+    val queryBuilder = new StringBuilder(1024, s\"\"\" -- loadPostsById\n+       $select__posts_po__leftJoin__patPostRels_pa\n+       where po.site_id = ? and (\"\"\")\n     var first = true\n     for (postId <- postIds) {\n       if (first) first = false\n       else queryBuilder.append(\" or \")\n-      queryBuilder.append(\"unique_post_id = ?\")\n+      queryBuilder.append(\"po.unique_post_id = ?\")\n       values.append(postId.asAnyRef)\n     }\n-    queryBuilder.append(\")\")\n+    queryBuilder.append(s\"\"\")\n+          $groupBy_orderBy__siteId_postId\n+          \"\"\")\n     var results = ArrayBuffer[Post]()\n     runQuery(queryBuilder.toString, values.toList, rs => {\n       while (rs.next()) {\n@@ -109,24 +164,33 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       return Nil\n \n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef)\n-    val queryBuilder = new StringBuilder(256,\n-          \"\"\" -- loadPostsByNrs\n-          select * from posts3 where SITE_ID = ? and (\"\"\")\n+    val queryBuilder = new StringBuilder(1024,\n+          s\"\"\" -- loadPostsByNrs\n+          $select__posts_po__leftJoin__patPostRels_pa\n+          where po.site_id = ? and (\"\"\")\n     var nr = 0\n     for (pagePostNr: PagePostNr <- pagePostNrs.toSet) {\n       if (nr >= 1) queryBuilder.append(\" or \")\n       nr += 1\n-      queryBuilder.append(\"(page_id = ? and post_nr = ?)\")\n+      queryBuilder.append(\"(po.page_id = ? and po.post_nr = ?)\")\n       values.append(pagePostNr.pageId, pagePostNr.postNr.asAnyRef)\n     }\n-    queryBuilder.append(\")\")\n+    queryBuilder.append(s\"\"\")\n+          $groupBy__siteId_postId\n+          \"\"\")\n \n     runQueryFindMany(queryBuilder.toString, values.toList, rs => {\n       readPost(rs)\n     })\n   }\n \n \n+  def loadPostsByIdKeepOrder(postIds: Iterable[PostId]): ImmSeq[Post] = {\n+    val byId = loadPostsByUniqueId(postIds)\n+    postIds.flatMap(byId.get).toVector\n+  }\n+\n+\n   def loadPostsByUniqueId(postIds: Iterable[PostId]): immutable.Map[PostId, Post] = {\n     loadPostsBySomeId(\"unique_post_id\", postIds, _.id)\n   }\n@@ -142,8 +206,13 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     if (someIds.isEmpty)\n       return Map.empty\n \n+    // Would need to join with pat_node_rels_t.\n+    dieIf(fieldName == \"created_by_id\", \"TyE603MRKJ\")\n+\n     val query = i\"\"\" -- loadPostsBySomeId\n-      select * from posts3 where site_id = ? and $fieldName in (${makeInListFor(someIds)})\n+      $select__posts_po__leftJoin__patPostRels_pa\n+      where po.site_id = ? and po.$fieldName in (${makeInListFor(someIds)})\n+      $groupBy__siteId_postId\n       \"\"\"\n     val values = siteId.asAnyRef :: someIds.map(_.asAnyRef).toList\n     runQueryBuildMap(query, values, rs => {\n@@ -153,11 +222,16 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  def loadAllPosts(): immutable.Seq[Post] = {\n-    val query = i\"\"\" -- loadAllPosts\n-      select * from posts3 where site_id = ?\n+  def loadAllPostsForExport(): immutable.Seq[Post] = {\n+    // Since this is for including in a site dump, we don't need the pat-to-node\n+    // relationships here. Instead, they'll be exported separately.\n+    val query = i\"\"\" -- loadAllPostsForExport\n+      select * from posts3 po\n+      where po.site_id = ?\n       \"\"\"\n-    runQueryFindMany(query, List(siteId.asAnyRef), rs => readPost(rs, pageId = None))\n+    runQueryFindMany(query, List(siteId.asAnyRef), rs => {\n+      readPost(rs, pageId = None, inclAggs = false)\n+    })\n   }\n \n \n@@ -174,21 +248,23 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   private def loadUnapprovedPostsImpl(pageId: PageId, by: Option[UserId], limit: Int)\n         : immutable.Seq[Post] = {\n     var query = s\"\"\" -- loadUnapprovedPostsImpl\n-      select * from posts3\n-      where site_id = ?\n-        and page_id = ?\n-        and approved_at is null\n-        and (type is null or type <> ${PostType.CompletedForm.toInt})\n+      $select__posts_po__leftJoin__patPostRels_pa\n+      where po.site_id = ?\n+        and po.page_id = ?\n+        and po.approved_at is null\n+        and (po.type is null or po.type <> ${PostType.CompletedForm.toInt})\n       \"\"\"\n \n     var values = ArrayBuffer[AnyRef](siteId.asAnyRef, pageId.asAnyRef)\n \n     if (by.isDefined) {\n-      query += \" and created_by_id = ? \"\n+      query += \" and po.created_by_id = ?  -- pat_node_rels_t [AuthorOf]\"\n       values += by.get.asAnyRef\n     }\n \n-    query += s\" order by created_at desc limit $limit\"\n+    query += s\"\"\"\n+          $groupBy__siteId_postId\n+          order by po.created_at desc limit $limit \"\"\"\n \n     runQueryFindMany(query, values.toList, rs => {\n       readPost(rs, pageId = Some(pageId))\n@@ -197,12 +273,13 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n \n   def loadCompletedForms(pageId: PageId, limit: Int): immutable.Seq[Post] = {\n-    val query = s\"\"\"\n-      select * from posts3\n-      where site_id = ?\n-        and page_id = ?\n-        and type = ${PostType.CompletedForm.toInt}\n-      order by created_at desc\n+    val query = s\"\"\" -- loadCompletedForms\n+      $select__posts_po__leftJoin__patPostRels_pa\n+      where po.site_id = ?\n+        and po.page_id = ?\n+        and po.type = ${PostType.CompletedForm.toInt}\n+      $groupBy__siteId_postId\n+      order by po.created_at desc\n       limit $limit\n       \"\"\"\n     runQueryFindMany(query, List(siteId.asAnyRef, pageId.asAnyRef), rs => {\n@@ -220,69 +297,149 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n     val andSkipTitles = includeTitles ? \"\" | s\"and post_nr <> $TitleNr\"\n     val andSkipChat = includeChatMessages ?\n-      \"\" | s\"and (type is null or type <> ${PostType.ChatMessage.toInt})\"\n-    val andOnlyUnapproved = onlyUnapproved ? \"curr_rev_nr > approved_rev_nr\" | \"\"\n+      \"\" | s\"and (po.type is null or po.type <> ${PostType.ChatMessage.toInt})\"\n+    val andOnlyUnapproved = onlyUnapproved ? \"po.curr_rev_nr > approved_rev_nr\" | \"\"\n \n     val andOnCertainPage = onPageId map { pageId =>\n       values.append(pageId)\n-      s\"and page_id = ?\"\n+      s\"and po.page_id = ?\"\n     } getOrElse \"\"\n \n     val query = i\"\"\"\n-      select * from posts3 where site_id = ? and created_by_id = ? $andSkipTitles\n+      -- pat_node_rels_t [AuthorOf]\n+      $select__posts_po__leftJoin__patPostRels_pa\n+      where po.site_id = ? and po.created_by_id = ? $andSkipTitles\n           $andSkipChat $andOnCertainPage $andOnlyUnapproved\n-      order by created_at ${descOrAsc(orderBy)} limit ?\n+      $groupBy__siteId_postId\n+      order by po.created_at ${descOrAsc(orderBy)} limit ?\n       \"\"\"\n     runQueryFindMany(query, List(siteId, authorId.asAnyRef, limit.asAnyRef), rs => {\n       readPost(rs)\n     })\n   } */\n \n \n-  def loadPostsByQuery(limit: Int, orderBy: OrderBy, byUserId: Option[UserId],\n+  def loadPostsByQuery(postQuery: PostQuery): /* limit: Int, orderBy: OrderBy, byUserId: Option[UserId],\n+        relatedToPat: Opt[(PatId, PatNodeRelType)] = None,\n         includeTitlePosts: Boolean, includeUnapproved: Boolean,\n-        inclUnlistedPagePosts_unimpl: Boolean): immutable.Seq[Post] = {\n-    dieIf(orderBy != OrderBy.MostRecentFirst, \"EdE1DRJ7Y\", \"Unimpl\")\n+        inclUnlistedPagePosts_unimpl: Boolean): */ immutable.Seq[Post] = {\n+    dieIf(postQuery.orderBy != OrderBy.MostRecentFirst, \"EdE1DRJ7Y\", \"Unimpl\")\n \n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef)\n \n-    val andAuthorEq = byUserId match {\n-      case None => \"\"\n-      case Some(authorId) =>\n-        values.append(authorId.asAnyRef)\n-        \"and created_by_id = ?\"\n+    val andAuthorEq = postQuery match {\n+      case q: PostQuery.PostsByAuthor =>\n+        // Including the author's anon posts, hasn't been implemented.\n+        unimplIf(postQuery.inclAnonPosts, \"TyEANONUNIMP04\") ; ANON_UNIMPL\n+        values.append(q.authorId.asAnyRef)\n+        \"and po.created_by_id = ?\"\n+      case _ => \"\"\n     }\n \n-    val andNotTitle = includeTitlePosts ? \"\" | s\"and post_nr <> $TitleNr\"\n-    val andSomeVersionApproved = includeUnapproved ?\n-          \"\" | \"and approved_at is not null\"\n+    val andNotTitle = postQuery.inclTitles ? \"\" | s\"and po.post_nr <> $TitleNr\"\n+\n+    val andSomeVersionApproved = postQuery.inclUnapproved ?\n+          \"\" | \"and po.approved_at is not null\"\n \n     // This'll require a join w pages3 and categories3.\n-    val andPageNotUnlisted_unimpl = !inclUnlistedPagePosts_unimpl ? \"\" | \"\"\n+    val andPageNotUnlisted_unimpl = !postQuery.inclUnlistedPagePosts ? \"\" | \"\"\n+\n+    val (andRelatedPatIdEq, andRelTypeEq, anyOrderByRelAddedAt)  = postQuery match {\n+      case q: PostQuery.PostsRelatedToPat[_] =>\n+        // Including tasks assigned to one's anonyms, hasn't been implemented.\n+        unimplIf(postQuery.inclAnonPosts, \"TyEANONUNIMP05\") ; ANON_UNIMPL\n+\n+        // Currently using  tx.loadPatPostRels()  instead, see [load_posts_by_rels],\n+        // and this match-case branch is dead code.\n+        unimpl(\"Would .not_load_all_post_rels [TyE602MRTL5]\")\n+        values.append(q.relatedPatId.asAnyRef)\n+        values.append(q.relType.toInt.asAnyRef)\n+        (\"and pa.from_pat_id_c = ?\"\n+        , \"and pa.rel_type_c = ?\"\n+        , Some(\n+            // Sort by most recent (max & desc) relevant relationship  (and unique_post_id,\n+            // just to always get the same order, also if same timestamp).\n+            // (Need sth like max() or min() because we array_agg rows from pa =\n+            // pat_node_rels_t.)\n+            \"order by max(pa.created_at) desc, po.unique_post_id desc\")) // [.same_time]\n+      case _ => (\"\", \"\", None)\n+    }\n \n-    val query = s\"\"\"\n-          select * from posts3\n-          where site_id = ?\n-              $andAuthorEq\n+    val select__posts_po__theJoin__patPostRels_pa =\n+          if (andRelatedPatIdEq.nonEmpty) {\n+            unimpl(\"Would .not_load_all_post_rels [TyE602MRTL6]\")\n+\n+            // Then we want only posts with at least one relationship to the pat id.\n+            // However, there might be *other* relationships, from other pats to\n+            // the posts. And we want those as well, so we'll get all authors and\n+            // all assigned-to etc. â€” We need to first find the relevant\n+            // `andRelatedPatIdEq` relationships, and then, for each post in those\n+            // relationships, look up that post and load *all* its relationships.\n+            //\n+            // So, first look at pat_node_rels_t (currently named post_actions3)\n+            // and then do an inner join with posts_t (posts3).\n+            /*  Too complicated!?  Instead,\n+                  1: look up rels, 2: filter posts, 3: get posts by id  ?\n+            s\"\"\"\n+            with p0 as (\n+                select site_id, unique_post_id,\n+                from posts3 po\n+                inner join post_actions3 pa\n+                    on  pa.site_id = po.site_id\n+                    and pa.to_post_id_c = po.unique_post_id\n+                    $and__pa_relType__in__aut_own_asg  ?\n+                where\n+                    pa.site_id = ? and\n+                    pa.from_pat_id_c = ? and\n+                       ** oops would need to update dormant_status_c **\n+                    (pa.dormant_status_c is null or pa.dormant_status_c = 0) and\n+                    po.closed_status = 0 and\n+                    po.deleted_status = 0 and   ... ? was there sth more ?\n+                )\n+            ${select__posts_po__innerJoin__patPostRels_pa(postsTableName = \"p0\")}  \"\"\"*/\n+\n+            // BU G\n+            // This works but finds only relationships from  postQuery.relatedPatId,\n+            // so we won't see e.g. all assignees, only pat `relatedPatId`.\n+            select__posts_po__innerJoin__patPostRels_pa\n+          }\n+          else {\n+            // Now we want posts also if there is no pat-post relationship.\n+            // So, a left outer join.\n+            select__posts_po__leftJoin__patPostRels_pa\n+          }\n+\n+    val sqlQuery = s\"\"\"\n+          $select__posts_po__theJoin__patPostRels_pa\n+          where po.site_id = ?\n+              $andAuthorEq  -- pat_node_rels_t [AuthorOf]  needs new sub query?\n               $andNotTitle\n               $andSomeVersionApproved\n               $andPageNotUnlisted_unimpl\n-          order by created_at desc,\n-             -- Page title and body have the same creation time.\n+              $andRelatedPatIdEq\n+              $andRelTypeEq\n+          $groupBy__siteId_postId ${\n+          anyOrderByRelAddedAt getOrElse s\"\"\"\n+          order by po.created_at desc,\n+             -- Page title and body have the same creation time.  [.same_time]\n              -- Consider the title created before the page body.\n-             page_id desc, post_nr desc\n-          limit $limit \"\"\"\n+             po.page_id desc, po.post_nr desc\n+             \"\"\" }\n+          limit ${postQuery.limit} \"\"\"\n \n-    runQueryFindMany(query, values.toList, rs => {\n+    runQueryFindMany(sqlQuery, values.toList, rs => {\n       readPost(rs)\n     })\n   }\n \n \n   def loadEmbeddedCommentsApprovedNotDeleted(limit: Int, orderBy: OrderBy): immutable.Seq[Post] = {\n     dieIf(orderBy != OrderBy.MostRecentFirst, \"TyE60RKTJF4\", \"Unimpl\")\n-    val query = s\"\"\"\n-      select po.* from posts3 po inner join pages3 pg using (site_id, page_id)\n+    COULD_OPTIMIZE // It would be better to inner-join posts3 and pages3 first, before\n+    // left-outer-joining with post_actions3?\n+    val query = s\"\"\" -- loadEmbeddedCommentsApprovedNotDeleted\n+      $select__posts_po__leftJoin__patPostRels_pa\n+      inner join pages3 pg using (site_id, page_id)\n       where pg.site_id = ?\n         and pg.page_role = ${PageType.EmbeddedComments.toInt}\n         and po.post_nr <> $TitleNr\n@@ -291,22 +448,26 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n         and po.deleted_at is null\n         and po.hidden_at is null\n         and po.approved_at is not null\n-        order by created_at desc limit $limit\n+      $groupBy__siteId_postId\n+      order by  po.created_at desc, po.unique_post_id desc  limit $limit\n       \"\"\"\n     runQueryFindMany(query, List(siteId.asAnyRef), rs => {\n       readPost(rs)\n     })\n   }\n \n \n-  def loadPopularPostsByPage(pageIds: Iterable[PageId], limitPerPage: Int, exclOrigPost: Boolean)\n-        : Map[PageId, immutable.Seq[Post]] = {\n+  /** Doesn't join with & aggregate pat_node_rels_t.\n+    */\n+  def loadPopularPostsByPageExclAggs(pageIds: Iterable[PageId], limitPerPage: Int,\n+          exclOrigPost: Bo): Map[PageId, immutable.Seq[Post]] = {\n     if (pageIds.isEmpty)\n       return Map.empty\n \n     // Finds the `limitPerPage` most like-voted replies on each page.\n-    val query = s\"\"\" -- loadPopularPostsByPage\n+    val query = s\"\"\" -- loadPopularPostsByPageExclAggs\n       select * from (\n+        -- select__posts_po__leftJoin__patPostRels_pa  â€” no, we're excluding relationships.\n         select\n           row_number() over (partition by page_id order by num_like_votes desc) as rownum,\n           p.*\n@@ -327,7 +488,7 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     val values = siteId.asAnyRef :: pageIds.toList\n \n     runQueryBuildMultiMap(query, values, rs => {\n-      val post = readPost(rs)\n+      val post = readPost(rs, inclAggs = false)\n       (post.pageId, post)\n     })\n   }\n@@ -338,20 +499,21 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     if (pageIds.isEmpty)\n       return Map.empty\n \n-    val query = s\"\"\"\n-      select * from posts3 p\n-        where p.site_id = ?\n-          and p.page_id in (${makeInListFor(pageIds)})\n-          and p.post_nr <> ${PageParts.TitleNr}\n-          and p.approved_at is not null\n-          and (p.type is null or p.type not in (\n+    val query = s\"\"\" -- loadApprovedOrigPostAndRepliesByPage\n+      $select__posts_po__leftJoin__patPostRels_pa\n+        where po.site_id = ?\n+          and po.page_id in (${makeInListFor(pageIds)})\n+          and po.post_nr <> ${PageParts.TitleNr}\n+          and po.approved_at is not null\n+          and (po.type is null or po.type not in (\n             ${PostType.BottomComment.toInt},  -- [2GYKFS4]\n             ${PostType.MetaMessage.toInt},\n             ${PostType.ChatMessage.toInt}))\n-          and p.closed_status = 0\n-          and p.hidden_at is null\n-          and p.deleted_status = 0\n-          and p.parent_nr = ${PageParts.BodyNr}\n+          and po.closed_status = 0\n+          and po.hidden_at is null\n+          and po.deleted_status = 0\n+          and po.parent_nr = ${PageParts.BodyNr}\n+      $groupBy__siteId_postId\n       \"\"\"\n     val values = siteId.asAnyRef :: pageIds.toList\n \n@@ -365,26 +527,30 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n   def loadPostsToReview(): immutable.Seq[Post] = {\n     val flaggedPosts = loadPostsToReviewImpl(\"\"\"\n-      deleted_status = 0 and\n-      num_pending_flags > 0\n+      po.deleted_status = 0 and\n+      po.num_pending_flags > 0\n       \"\"\")\n     val unapprovedPosts = loadPostsToReviewImpl(\"\"\"\n-      deleted_status = 0 and\n-      num_pending_flags = 0 and\n-      (approved_rev_nr is null or approved_rev_nr < curr_rev_nr)\n+      po.deleted_status = 0 and\n+      po.num_pending_flags = 0 and\n+      (po.approved_rev_nr is null or po.approved_rev_nr < po.curr_rev_nr)\n       \"\"\")\n     val postsWithSuggestions = loadPostsToReviewImpl(\"\"\"\n-      deleted_status = 0 and\n-      num_pending_flags = 0 and\n-      approved_rev_nr = curr_rev_nr and\n-      num_edit_suggestions > 0\n+      po.deleted_status = 0 and\n+      po.num_pending_flags = 0 and\n+      po.approved_rev_nr = curr_rev_nr and\n+      po.num_edit_suggestions > 0\n       \"\"\")\n     (flaggedPosts ++ unapprovedPosts ++ postsWithSuggestions).to[immutable.Seq]\n   }\n \n \n   private def loadPostsToReviewImpl(whereTests: String): ArrayBuffer[Post] = {\n-    val query = s\"select * from posts3 where site_id = ? and $whereTests\"\n+    val query = s\"\"\" -- loadPostsToReviewImpl\n+          $select__posts_po__leftJoin__patPostRels_pa\n+          where po.site_id = ? and $whereTests\n+          $groupBy__siteId_postId\n+          \"\"\"\n     val values = List(siteId.asAnyRef)\n     var results = ArrayBuffer[Post]()\n     runQuery(query, values, rs => {\n@@ -670,9 +836,47 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  private def readPost(rs: js.ResultSet, pageId: Option[PageId] = None): Post = {\n+  private def readPost(rs: js.ResultSet, pageId: Option[PageId] = None,\n+          inclAggs: Bo = true): Post = {\n+\n+    // (Simpler to debug, if can see this directly.)\n+    val postId = rs.getInt(\"UNIQUE_POST_ID\")\n+\n+    // An array of [PatPostRel.Type, from-pat-id].\n+    val anyVecOfPatRelVecs: Opt[Vec[Vec[Int]]] =\n+          if (!inclAggs) None\n+          else getOptArrayOfArrayOfInt32(rs, \"pat_post_rels_array\")\n+\n+    val (ownerIds: Vec[Int], authorIds: Vec[Int], assignedToIds: Vec[Int]) =\n+            anyVecOfPatRelVecs match {\n+      case None =>\n+         (Vec.empty, Vec.empty, Vec.empty)\n+      case Some(vecOfPatRelVecs: Vec[Vec[Int]]) =>\n+        val ownerIds = MutHashSet[Int]()  // why won't PatId work, it's just type = i32 = Int\n+        val authorIds = MutHashSet[Int]()\n+        val assignedToIds = MutHashSet[Int]()\n+        for (patRelVec: Vec[Int] <- vecOfPatRelVecs) {\n+          dieIf(patRelVec.size != 2, \"TyE50MTEAKR2\", s\"Pat rel vec len: ${patRelVec.size}\")\n+          val relTypeInt = patRelVec(0)\n+          val patId = patRelVec(1)\n+          // Or, hmm, move to object PatNodeRelType?\n+          relTypeInt match {\n+            case PatNodeRelType.OwnerOf_later.IntVal =>\n+              ownerIds.add(patId)\n+            case PatNodeRelType.AuthorOf_later.IntVal =>\n+              authorIds.add(patId)\n+            case PatNodeRelType.AssignedTo.IntVal =>\n+              assignedToIds.add(patId)\n+            case x =>\n+              // We load only those in: $and__pa_relType__in__aut_own_asg.\n+              die(\"TyE7MWJC21\", s\"Unexpected pat-to-node rel_type_c: $x\")\n+          }\n+        }\n+        (ownerIds.to[Vec], authorIds.to[Vec], assignedToIds.to[Vec])\n+    }\n+\n     Post(\n-      id = rs.getInt(\"UNIQUE_POST_ID\"),\n+      id = postId,\n       extImpId = getOptString(rs, \"ext_id\"),\n       pageId = pageId.getOrElse(rs.getString(\"PAGE_ID\")),\n       nr = rs.getInt(\"post_nr\"),\n@@ -681,6 +885,9 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       tyype = PostType.fromInt(rs.getInt(\"TYPE\")).getOrElse(PostType.Normal),\n       createdAt = getDate(rs, \"CREATED_AT\"),\n       createdById = rs.getInt(\"CREATED_BY_ID\"),\n+      ownerIds = ownerIds,\n+      authorIds = authorIds,\n+      assigneeIds = assignedToIds,\n       currentRevStaredAt = getDate(rs, \"curr_rev_started_at\"),\n       currentRevisionById = rs.getInt(\"curr_rev_by_id\"),\n       currentRevLastEditedAt = getOptionalDate(rs, \"curr_rev_last_edited_at\"),\n@@ -723,14 +930,16 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   }\n \n \n+  // Will return a set or list, later when there can be many authors per post.\n   def loadAuthorIdsByPostId(postIds: Set[PostId]): Map[PostId, UserId] = {\n     // Tested here: TyT5086XJW2 (the e2e test api-search-full-text.test.ts)\n     if (postIds.isEmpty)\n       return Map.empty\n \n     val query = s\"\"\"\n       select unique_post_id, created_by_id\n-      from posts3\n+      from posts3    -- + pat_node_rels_t [AuthorOf]\n+      -- select__posts_po__leftJoin__patPostRels_pa\n       where site_id = ?\n         and unique_post_id in(${makeInListFor(postIds)}) \"\"\"\n \n@@ -747,6 +956,7 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n   def deleteVote(pageId: PageId, postNr: PostNr, voteType: PostVoteType, voterId: UserId)\n         : Boolean = {\n+    REFACTOR // Break out fn, merge w deletePatNodeRels() below?\n     val statement = \"\"\"\n       delete from post_actions3\n       where site_id = ? and page_id = ? and post_nr = ? and rel_type_c = ? and from_pat_id_c = ?\n@@ -762,9 +972,10 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   def loadVoterIds(postId: PostId, voteType: PostVoteType): Seq[UserId] = {\n     TESTS_MISSING\n     val query = \"\"\"\n-      select from_pat_id_c\n+      select distinct from_pat_id_c\n       from post_actions3\n       where site_id = ? and to_post_id_c = ? and rel_type_c = ?\n+      order by from_pat_id_c\n       \"\"\"\n     val values = List[AnyRef](siteId.asAnyRef, postId.asAnyRef, voteType.toInt.asAnyRef)\n     runQueryFindMany(query, values, rs => {\n@@ -774,41 +985,103 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n \n   def loadActionsOnPage(pageId: PageId): immutable.Seq[PostAction] = {\n-    loadActionsOnPageImpl(Some(pageId), userId = None)\n+    loadActionsOnPageImpl(Some(pageId), userId = None,\n+          relTypes = Vec(), limit = Some(19001))\n   }\n \n \n   def loadActionsByUserOnPage(userId: UserId, pageId: PageId): immutable.Seq[PostAction] = {\n-    loadActionsOnPageImpl(Some(pageId), userId = Some(userId))\n+    loadActionsOnPageImpl(Some(pageId), userId = Some(userId),\n+          relTypes = Vec(), limit = Some(19001)) // hmm\n+  }\n+\n+\n+  def loadPatPostRels[T <: PatNodeRelType](forPatId: PatId, relType: T,\n+                                           onlyOpenPosts: Bo, limit: i32)\n+        : immutable.Seq[PatNodeRel[T]] = {\n+    loadActionsOnPageImpl(pageId = None, userId = Some(forPatId), relTypes = Vec(relType),\n+          onlyOpenPosts = onlyOpenPosts, limit = Some(limit)).map(_.asInstanceOf[PatNodeRel[T]])\n   }\n \n \n-  def loadAllPostActions(): immutable.Seq[PostAction] = {\n-    loadActionsOnPageImpl(pageId = None, userId = None)\n+  def loadAllPostActionsForExport(): immutable.Seq[PostAction] = {\n+    loadActionsOnPageImpl(pageId = None, userId = None,\n+          relTypes = Nil, limit = None)  // loads all\n   }\n \n \n-  private def loadActionsOnPageImpl(pageId: Option[PageId], userId: Option[UserId])\n+  // Later: Make generic: [T <: PatNodeRelType] and return a PatNodeRel[T]\n+  private def loadActionsOnPageImpl(pageId: Option[PageId], userId: Option[UserId],\n+        relTypes: ImmSeq[PostActionType], limit: Opt[i32], onlyOpenPosts: Bo = false)\n         : immutable.Seq[PostAction] = {\n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef)\n+\n     val andPageIdEq = pageId match {\n       case None => \"\"\n       case Some(id) =>\n         values.append(id)\n-        s\"and page_id = ?\"\n+        s\"and pa.page_id = ?\"\n     }\n+\n     val andCreatedBy = userId match {\n       case None => \"\"\n       case Some(id) =>\n         values.append(id.asAnyRef)\n-        \"and from_pat_id_c = ?\"\n+        \"and pa.from_pat_id_c = ?\"\n     }\n+\n+    val andRelTypeIn = {\n+      if (relTypes.isEmpty) \"\"\n+      else {\n+        values.appendAll(relTypes.map(_.toInt.asAnyRef))\n+        s\"and pa.rel_type_c in (${makeInListFor(relTypes)})\"\n+      }\n+    }\n+\n+    val orderByAndLimit = {\n+      // Order by primary key, just to avoid [flappy_tests].\n+      var ordAndLim = \"pa.to_post_id_c, pa.rel_type_c, pa.from_pat_id_c, pa.sub_type_c\"\n+      // But if we want the N last pat-post-rels, then, we currently want the most recent\n+      // ones. So order by time, desc. (But keep the pk order too, to avoid different item\n+      // order in case of identical timestamps â€” which could make e2e tests sometimes fail.)\n+      limit foreach { lim =>\n+        ordAndLim = s\"pa.created_at desc, $ordAndLim  limit $lim\"\n+      }\n+      s\"order by  $ordAndLim\"\n+    }\n+\n+    COULD // always incl deleted_status = 0, unless a specific pageId is specified? Hmm.\n+    COULD_OPTIMIZE // if \"\", includes deleted posts, are filtered out later?\n+    unimplIf(pageId.isDefined && onlyOpenPosts, o\"\"\"About to load only open posts on a\n+          specific page â€” but if page deleted, then what, ... nothing? [TyE5B2MJGPL0]\"\"\")\n+    val innerJoinOpenPosts: St = if (!onlyOpenPosts) \"\" else s\"\"\"\n+          inner join  posts3 po\n+             on  po.site_id = pa.site_id\n+            and  po.unique_post_id = pa.to_post_id_c\n+            and  po.closed_status = 0\n+            and  po.deleted_status = 0\n+          inner join  pages3 pg\n+             on  pg.site_id = po.site_id\n+            and  pg.page_id = po.page_id\n+            and  pg.closed_at is null\n+            and  pg.deleted_at is null  \"\"\"\n+\n     val query = s\"\"\"\n-      select to_post_id_c, page_id, post_nr, rel_type_c, created_at, from_pat_id_c\n-      from post_actions3\n-      where site_id = ? $andPageIdEq $andCreatedBy\n-      \"\"\"\n-    runQueryFindMany(query, values.toList, rs => {\n+          select  pa.to_post_id_c,\n+                  pa.page_id,\n+                  pa.post_nr,\n+                  pa.rel_type_c,\n+                  pa.sub_type_c,\n+                  pa.created_at,\n+                  pa.from_pat_id_c\n+          from  post_actions3 pa  $innerJoinOpenPosts\n+          where  pa.site_id = ?\n+                 $andPageIdEq\n+                 $andCreatedBy\n+                 $andRelTypeIn\n+          $orderByAndLimit  \"\"\"\n+\n+    val result = runQueryFindMany(query, values.toList, rs => {\n       val theUserId = rs.getInt(\"from_pat_id_c\")\n       PostAction(\n         uniqueId = rs.getInt(\"to_post_id_c\"),\n@@ -818,14 +1091,19 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n         doerId = theUserId,\n         actionType = fromActionTypeInt(rs.getInt(\"rel_type_c\")))\n     })\n+\n+    result\n   }\n \n \n   def loadActionsDoneToPost(pageId: PageId, postNr: PostNr): immutable.Seq[PostAction] = {\n     val query = \"\"\"\n-      select to_post_id_c, rel_type_c, created_at, from_pat_id_c\n-      from post_actions3\n-      where site_id = ? and page_id = ? and post_nr = ?\n+      select distinct  to_post_id_c, rel_type_c, created_at, from_pat_id_c\n+      from  post_actions3\n+      where  site_id = ?\n+        and  page_id = ?\n+        and  post_nr = ?\n+      order by  to_post_id_c, rel_type_c, from_pat_id_c  -- to avoid [flappy_tests]\n       \"\"\"\n     val values = List[AnyRef](siteId.asAnyRef, pageId, postNr.asAnyRef)\n     runQueryFindMany(query, values, rs => {\n@@ -861,7 +1139,10 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       queryBuilder.append(\"(page_id = ? and post_nr = ?)\")\n       values.append(pagePostNr.pageId, pagePostNr.postNr.asAnyRef)\n     }\n-    val query = queryBuilder.append(\")\").toString\n+    val query = queryBuilder.append(\n+          // Avoid [flappy_tests]:\n+          \")  order by  to_post_id_c, rel_type_c, from_pat_id_c\"\n+          ).toString\n     runQueryFindMany(query, values.toList, rs => {\n       val postAction = PostFlag(\n         uniqueId = rs.getInt(\"to_post_id_c\"),\n@@ -877,12 +1158,15 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n \n   def clearFlags(pageId: PageId, postNr: PostNr, clearedById: UserId) {\n-    BUG // Doesn't this delete votes and other things too? See deleteVote(), use instead?\n-    // Need to incl:  and rel_type_c = Flag?\n+    // Only soft-delete the flags. Might need later, for auditing purposes?\n     val statement = s\"\"\"\n       update post_actions3\n       set deleted_at = now_utc(), deleted_by_id = ?, updated_at = now_utc()\n-      where site_id = ? and page_id = ? and post_nr = ? and deleted_at is null\n+      where site_id = ? and\n+            page_id = ? and\n+            post_nr = ? and\n+            deleted_at is null and\n+            rel_type_c in ($FlagValueSpam, $FlagValueInapt, $FlagValueOther)\n       \"\"\"\n     val values = List(clearedById.asAnyRef, siteId.asAnyRef, pageId, postNr.asAnyRef)\n     runUpdate(statement, values)\n@@ -893,12 +1177,19 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n     postAction match {\n       case vote: PostVote =>\n         insertPostActionImpl(\n-          postId = vote.uniqueId, pageId = vote.pageId, postNr = vote.postNr,\n+              postId = vote.uniqueId, pageId = vote.pageId, postNr = vote.postNr,\n           actionType = vote.voteType, doerId = vote.doerId, doneAt = vote.doneAt)\n       case flag: PostFlag =>\n         insertPostActionImpl(\n-          postId = flag.uniqueId, pageId = flag.pageId, postNr = flag.postNr,\n+              postId = flag.uniqueId, pageId = flag.pageId, postNr = flag.postNr,\n           actionType = flag.flagType, doerId = flag.doerId, doneAt = flag.doneAt)\n+      case rel: PatNodeRel[_] =>\n+        // This covers owner-of  (or will owner-of be in pat_node_multi_rels_t?),\n+        // author-of and assigned-to.\n+        // (The other approach: PostVote and PostFlag, above, is deprecated.)\n+        insertPostActionImpl(\n+              postId = rel.uniqueId, pageId = rel.pageId, postNr = rel.postNr,\n+              actionType = rel.relType, doerId = rel.fromPatId, doneAt = rel.addedAt)\n     }\n   }\n \n@@ -922,6 +1213,24 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n   }\n \n \n+  def deletePatNodeRels(fromPatIds: Set[PatId], toPostId: PostId,\n+        relTypes: Set[PatNodeRelType]): i32 = {\n+    if (fromPatIds.isEmpty || relTypes.isEmpty) return 0\n+    val statement = s\"\"\"\n+          delete from post_actions3\n+          where site_id = ? and\n+                to_post_id_c = ? and\n+                from_pat_id_c in (${makeInListFor(fromPatIds)}) and\n+                rel_type_c in (${makeInListFor(relTypes)}) \"\"\"\n+    val values = ArrayBuffer[AnyRef](\n+          siteId.asAnyRef,\n+          toPostId.asAnyRef)\n+    values.appendAll(fromPatIds.map(_.asAnyRef))\n+    values.appendAll(relTypes.map(_.toInt.asAnyRef))\n+    runUpdate(statement, values.toList)\n+  }\n+\n+\n   def loadLastPostRevision(postId: PostId): Option[PostRevision] =\n     loadPostRevisionImpl(postId, PostRevision.LastRevisionMagicNr)\n \n@@ -976,23 +1285,23 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n \n   def insertPostRevision(revision: PostRevision) {\n     val statement = \"\"\"\n-      insert into post_revisions3(\n-        site_id, post_id,\n-        revision_nr, previous_nr,\n-        source_patch, full_source, title,\n+          insert into post_revisions3(\n+            site_id, post_id,\n+            revision_nr, previous_nr,\n+            source_patch, full_source, title,\n         composed_at, composed_by_id,\n-        approved_at, approved_by_id,\n-        hidden_at, hidden_by_id)\n+            approved_at, approved_by_id,\n+            hidden_at, hidden_by_id)\n       values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n       \"\"\"\n     val values = List[AnyRef](\n-      siteId.asAnyRef, revision.postId.asAnyRef,\n-      revision.revisionNr.asAnyRef, revision.previousNr.orNullInt,\n-      revision.sourcePatch.orNullVarchar, revision.fullSource.orNullVarchar,\n-      revision.title.orNullVarchar,\n+          siteId.asAnyRef, revision.postId.asAnyRef,\n+          revision.revisionNr.asAnyRef, revision.previousNr.orNullInt,\n+          revision.sourcePatch.orNullVarchar, revision.fullSource.orNullVarchar,\n+          revision.title.orNullVarchar,\n       revision.composedAt, revision.composedById.asAnyRef,\n-      revision.approvedAt.orNullTimestamp, revision.approvedById.orNullInt,\n-      revision.hiddenAt.orNullTimestamp, revision.hiddenById.orNullInt)\n+          revision.approvedAt.orNullTimestamp, revision.approvedById.orNullInt,\n+          revision.hiddenAt.orNullTimestamp, revision.hiddenById.orNullInt)\n     runUpdateExactlyOneRow(statement, values)\n   }\n \n@@ -1033,6 +1342,9 @@ object PostsSiteDaoMixin {\n \n \n   def toActionTypeInt(actionType: PostActionType): AnyRef = (actionType match {\n+    case PatNodeRelType.OwnerOf_later => PatNodeRelType.OwnerOf_later.IntVal\n+    case PatNodeRelType.AuthorOf_later => PatNodeRelType.AuthorOf_later.IntVal\n+    case PatNodeRelType.AssignedTo => PatNodeRelType.AssignedTo.IntVal\n     case PostVoteType.Like => VoteValueLike\n     case PostVoteType.Wrong => VoteValueWrong\n     case PostVoteType.Bury => VoteValueBury\n@@ -1043,11 +1355,15 @@ object PostsSiteDaoMixin {\n   }).asAnyRef\n \n \n-  REFACTOR // move to:  PostActionType.from(Int): PostActionType  [402KTHRNPQw]\n+  REFACTOR // move to:  PatNodeRelType.fromInt32(Int): PatNodeRelType  [402KTHRNPQw]\n   def fromActionTypeInt(value: Int, mab: MessAborter = IfBadDie): PostActionType =\n     fromAnyActionTypeInt(value).getOrAbort(mab, \"TyE0ACTTYPE\", s\"Not a post action type: $value\")\n \n+  // Move this one too.\n   def fromAnyActionTypeInt(value: Int): Opt[PostActionType] = Some(value match {\n+    case PatNodeRelType.OwnerOf_later.IntVal => PatNodeRelType.OwnerOf_later\n+    case PatNodeRelType.AuthorOf_later.IntVal => PatNodeRelType.AuthorOf_later\n+    case PatNodeRelType.AssignedTo.IntVal => PatNodeRelType.AssignedTo\n     case VoteValueLike => PostVoteType.Like\n     case VoteValueWrong => PostVoteType.Wrong\n     case VoteValueBury => PostVoteType.Bury"
    },
    {
      "sha": "e0f8f6d69eda2fc63483bd6104225f9ff9254e4f",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -290,7 +290,7 @@ object Rdb {\n     value\n   }\n \n-  def getOptInt(rs: js.ResultSet, column: String): Option[Int] =\n+  def getOptInt(rs: js.ResultSet, column: String): Option[i32] =\n     getOptInt32(rs, column)\n \n   def getOptInt16(rs: js.ResultSet, column: St): Opt[i16] =\n@@ -416,6 +416,43 @@ object Rdb {\n     Some(javaArray.to[Vec].map(_.toInt))\n   }\n \n+  /** Make sure no array contains any null â€” just because I then don't know what'll\n+    * happen. Will a SQL null integer in an array, become a Java null Integer, or 0,\n+    * or what?\n+    *\n+    * You can excl null, by using:  `array_agg(...) filter (where some_agg_col is not nuLL)`\n+    * â€” then, instead the whole field will be null (rather than an array that contains\n+    * null).  There's also:  array_remove(..., null).\n+    */\n+  def getOptArrayOfArrayOfInt32(rs: js.ResultSet, column: St): Opt[Vec[Vec[i32]]] = {\n+    val sqlArray: js.Array = rs.getArray(column)\n+    if (sqlArray eq null) return None\n+\n+    // System.out.println(s\"classNameOf(sqlArray.getArray): ${classNameOf(sqlArray.getArray)}\")\n+    // Oddly enough returns a java.lang.Object not a Java array.\n+    val javaArrayAsObj: Object = sqlArray.getArray\n+    val javaArrayAsArr: Array[_] = javaArrayAsObj.asInstanceOf[Array[_]]\n+    /*\n+    for (item <- javaArrayAsArr) {\n+      System.out.println(s\"classNameOf(item): ${classNameOf(item)}\")\n+    } */\n+    WOULD_OPTIMIZE // Can skip to[Vec], do that at the end instead? And skip toInt, or?\n+    val vecOfJavaArrays = javaArrayAsArr.to[Vec]\n+    val vecOfVec = vecOfJavaArrays.map(_.asInstanceOf[Array[_]].to[Vec].map(_.asInstanceOf[Int]))\n+    Some(vecOfVec)\n+  }\n+\n+  /*  Untested? Or?\n+  def getOptArrayOfStringsStrings(rs: js.ResultSet, column: St): Opt[ImmSeq[ImmSeq[St]]] = {\n+    val sqlArray: js.Array = rs.getArray(column)\n+    if (sqlArray eq null) return None\n+    val javaArrayOfArrays = sqlArray.getArray.asInstanceOf[Array[Array[St]]]\n+    val seqOfJavaArrays = javaArrayOfArrays.to[Vec]\n+    val seqOfSeq = seqOfJavaArrays.map(_.to[Vec])\n+    Some(seqOfSeq)\n+  } */\n+\n+\n   def getOptTrustLevel(rs: js.ResultSet, column: St): Opt[TrustLevel] = {\n     val asInt = rs.getInt(column)\n     if (rs.wasNull()) None"
    },
    {
      "sha": "be7d97eddde3c99b204ef2d532c1c77b8fc0a362",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSiteTransaction.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSiteTransaction.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -606,6 +606,9 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n       newMeta.layout.toInt.asAnyRef,\n       newMeta.comtOrder.map(_.toInt).orNullInt,\n       newMeta.comtNesting.orNullInt,\n+      newMeta.comtsStartHidden.map(_.toInt).orNullInt,\n+      newMeta.comtsStartAnon.map(_.toInt).orNullInt,\n+      newMeta.newAnonStatus.map(_.toInt).orNullInt,\n       newMeta.forumSearchBox.orNullInt,\n       newMeta.forumMainView.orNullInt,\n       newMeta.forumCatsTopics.orNullInt,\n@@ -662,6 +665,9 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n         layout = ?,\n         comt_order_c = ?,\n         comt_nesting_c = ?,\n+        comts_start_hidden_c = ?,\n+        comts_start_anon_c = ?,\n+        new_anon_status_c = ?,\n         forum_search_box_c = ?,\n         forum_main_view_c = ?,\n         forum_cats_topics_c = ?,\n@@ -1415,6 +1421,9 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n         layout,\n         comt_order_c,\n         comt_nesting_c,\n+        comts_start_hidden_c,\n+        comts_start_anon_c,\n+        new_anon_status_c,\n         forum_search_box_c,\n         forum_main_view_c,\n         forum_cats_topics_c,\n@@ -1455,7 +1464,7 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n         ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n         ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n         ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n-        ?, ?, ?, ?, ?)\"\"\"\n+        ?, ?, ?, ?, ?, ?, ?, ?)\"\"\"\n \n     // Dulp code, see the update query [5RKS025].\n     val values = List(\n@@ -1481,6 +1490,9 @@ class RdbSiteTransaction(var siteId: SiteId, val daoFactory: RdbDaoFactory, val\n       pageMeta.layout.toInt.asAnyRef,\n       pageMeta.comtOrder.map(_.toInt).orNullInt,\n       pageMeta.comtNesting.orNullInt,\n+      pageMeta.comtsStartHidden.map(_.toInt).orNullInt,\n+      pageMeta.comtsStartAnon.map(_.toInt).orNullInt,\n+      pageMeta.newAnonStatus.map(_.toInt).orNullInt,\n       pageMeta.forumSearchBox.orNullInt,\n       pageMeta.forumMainView.orNullInt,\n       pageMeta.forumCatsTopics.orNullInt,"
    },
    {
      "sha": "e16725a10982c68ad9d3bbc4b289d7d6829ab14e",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -224,17 +224,17 @@ class RdbSystemTransaction(\n     if (idCount == 0)\n       return Map.empty\n \n-    var usersByTenantAndId = Map[(SiteId, UserId), Participant]()\n+    var patsBySiteAndId = Map[(SiteId, PatId), Pat]()\n \n     runQuery(totalQuery.toString, allValsReversed.reverse, rs => {\n       while (rs.next) {\n         val siteId = rs.getInt(\"SITE_ID\")\n-        val user = getParticipant(rs)\n-        usersByTenantAndId = usersByTenantAndId + ((siteId, user.id) -> user)\n+        val pat = getParticipant(rs)\n+        patsBySiteAndId = patsBySiteAndId + ((siteId, pat.id) -> pat)\n       }\n     })\n \n-    usersByTenantAndId\n+    patsBySiteAndId\n   }\n \n \n@@ -1119,7 +1119,7 @@ class RdbSystemTransaction(\n       delete from upload_refs3\n       delete from uploads3\n       delete from page_users3\n-      delete from page_notf_prefs3\n+      delete from page_notf_prefs_t\n       delete from tag_notf_levels3\n       delete from post_tags3\n       delete from post_actions3"
    },
    {
      "sha": "b877164b341cd4399501c68f4a8a2370451813af",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbUtil.scala",
      "status": "modified",
      "additions": 74,
      "deletions": 32,
      "changes": 106,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -216,6 +216,7 @@ object RdbUtil {\n       why_may_not_mention_msg_me_html_c,\n       max_upload_bytes_c,\n       allowed_upload_extensions_c,\n+      can_see_others_email_adrs_c,\n       deactivated_at,\n       deleted_at\n       \"\"\"\n@@ -233,6 +234,9 @@ object RdbUtil {\n       |u.APPROVED_AT u_approved_at,\n       |u.APPROVED_BY_ID u_approved_by_id,\n       |u.SUSPENDED_TILL u_suspended_till,\n+      |u.anonym_status_c u_anonym_status_c,\n+      |u.true_id_c u_true_id_c,\n+      |u.anon_on_page_id_st_c u_anon_on_page_id_st_c,\n       |u.trust_level u_trust_level,\n       |u.locked_trust_level u_locked_trust_level,\n       |u.threat_level u_threat_level,\n@@ -255,6 +259,7 @@ object RdbUtil {\n       |u.why_may_not_mention_msg_me_html_c,\n       |u.max_upload_bytes_c,${\"\"          /* would excl  */}\n       |u.allowed_upload_extensions_c,${\"\" /* would excl  */}\n+      |u.can_see_others_email_adrs_c,${\"\" /* would excl */}\n       |u.is_owner u_is_owner,\n       |u.is_admin u_is_admin,\n       |u.is_moderator u_is_moderator,\n@@ -280,23 +285,38 @@ object RdbUtil {\n     val userId = rs.getInt(\"u_id\")\n     val anyExtId = getOptString(rs, \"u_ext_id\")\n     val isGroup = rs.getBoolean(\"u_is_group\")\n+    val anonStatus: Opt[AnonStatus] = getOptInt32(rs, \"u_anonym_status_c\")\n+          .flatMap(AnonStatus.fromInt)\n+\n     def createdAt = getWhen(rs, \"u_created_at\")\n     val emailNotfPrefs = {\n       if (isGuestId(userId))\n         _toEmailNotfs(rs.getString(\"g_email_notfs\"))\n       else\n         _toEmailNotfs(rs.getString(\"u_email_notfs\"))\n     }\n+\n     val lockedThreatLevel = getOptInt(rs, \"u_locked_threat_level\").flatMap(ThreatLevel.fromInt)\n     def theUsername = rs.getString(\"u_username\")\n     val name = Option(rs.getString(\"u_full_name\"))\n     def tinyAvatar = getAnyUploadRef(rs, \"avatar_tiny_base_url\", \"avatar_tiny_hash_path\")\n     def smallAvatar = getAnyUploadRef(rs, \"avatar_small_base_url\", \"avatar_small_hash_path\")\n     val anyTrustLevel = TrustLevel.fromInt(rs.getInt(\"u_trust_level\"))\n+\n       // Use dn2e not n2e. ((So works if joined w/ DW1_IDS_SIMPLE, which\n       // uses '-' instead of null to indicate absence of email address etc.\n       // See usage of this function in RdbSystemTransaction.loadUsers(). ))\n-    if (isGuestId(userId))\n+\n+    if (anonStatus.isDefined) {\n+      Anonym(\n+          id = userId,\n+          createdAt = createdAt,\n+          anonForPatId = getInt32(rs, \"u_true_id_c\"),\n+          anonStatus = anonStatus.get,\n+          anonOnPageId = getString(rs, \"u_anon_on_page_id_st_c\"),\n+      )\n+    }\n+    else if (isGuestId(userId)) {\n       Guest(\n         id = userId,\n         extId = anyExtId,\n@@ -309,10 +329,12 @@ object RdbUtil {\n         website = getOptString(rs, \"u_website\"),\n         country = dn2e(rs.getString(\"u_country\")).trimNoneIfEmpty,\n         lockedThreatLevel = lockedThreatLevel)\n+    }\n     else if (isGroup) {\n       val perms = PatPerms.create(IfBadDie,\n             maxUploadBytes = getOptInt(rs, \"max_upload_bytes_c\"),\n-            allowedUplExts = getOptString(rs, \"allowed_upload_extensions_c\"))\n+            allowedUplExts = getOptString(rs, \"allowed_upload_extensions_c\"),\n+            canSeeOthersEmailAdrs = getOptBool(rs, \"can_see_others_email_adrs_c\"))\n       Group(\n         id = userId,\n         extId = anyExtId,\n@@ -358,7 +380,8 @@ object RdbUtil {\n   def getGroup(rs: js.ResultSet): Group = {\n     val perms = PatPerms.create(IfBadDie,\n           maxUploadBytes = getOptInt(rs, \"max_upload_bytes_c\"),\n-          allowedUplExts = getOptString(rs, \"allowed_upload_extensions_c\"))\n+          allowedUplExts = getOptString(rs, \"allowed_upload_extensions_c\"),\n+          canSeeOthersEmailAdrs = getOptBool(rs, \"can_see_others_email_adrs_c\"))\n     Group(\n       id = rs.getInt(\"user_id\"),\n       extId = getOptString(rs, \"ext_id\"),\n@@ -395,6 +418,9 @@ object RdbUtil {\n     |is_owner,\n     |is_admin,\n     |is_moderator,\n+    |anonym_status_c,\n+    |true_id_c,\n+    |anon_on_page_id_st_c,\n     |deactivated_at,\n     |deleted_at,\n     |username,\n@@ -446,12 +472,13 @@ object RdbUtil {\n   val CompleteUserSelectListItemsWithUserId: St =\n     s\"user_id, $CompleteUserSelectListItemsNoUserId, \" +\n     \"max_upload_bytes_c, \" +\n-    \"allowed_upload_extensions_c\"\n+    \"allowed_upload_extensions_c, \" +\n+    \"can_see_others_email_adrs_c\"\n \n \n   def getParticipantInclDetails_wrongGuestEmailNotfPerf(rs: js.ResultSet): ParticipantInclDetails = {\n     val participantId = rs.getInt(\"user_id\")\n-    if (participantId <= MaxGuestId) {\n+    if (participantId <= MaxGuestOrAnonId) {\n       getGuestInclDetails_wrongGuestEmailNotfPerf(rs, participantId)\n     }\n     else {\n@@ -463,7 +490,7 @@ object RdbUtil {\n   def getUserInclDetails(rs: js.ResultSet): UserInclDetails = {\n     getMemberInclDetails(rs) match {\n       case m: UserInclDetails => m\n-      case g: Group => throw GotAGroupException(g.id)\n+      case g: Group => throw GotAGroupException(g.id, wantedWhat = \"a user\")\n     }\n   }\n \n@@ -479,11 +506,21 @@ object RdbUtil {\n \n \n   /** Currently there's no GuestInclDetails, just a Guest and it includes everything. */\n-  private def getGuestInclDetails_wrongGuestEmailNotfPerf(rs: js.ResultSet, theGuestId: UserId): Guest = {\n+  private def getGuestInclDetails_wrongGuestEmailNotfPerf(rs: js.ResultSet, patId: PatId): GuestOrAnon = {\n     // A bit dupl code. (703KWH4)\n     val name = Option(rs.getString(\"full_name\"))\n+    val anonStatus = getOptInt32(rs, \"anonym_status_c\") flatMap AnonStatus.fromInt\n+    if (anonStatus.isDefined) {\n+      return Anonym(\n+          id = patId,\n+          createdAt = getWhen(rs, \"created_at\"),\n+          anonForPatId = getInt32(rs, \"u_true_id_c\"),\n+          anonStatus = anonStatus.get,\n+          anonOnPageId = getString(rs, \"u_anon_on_page_id_st_c\"))\n+    }\n+\n     Guest(\n-      id = theGuestId,\n+      id = patId,\n       extId = getOptString(rs, \"ext_id\"),\n       createdAt = getWhen(rs, \"created_at\"),\n       guestName = dn2e(name.orNull),\n@@ -635,30 +672,29 @@ object RdbUtil {\n     val anyIsMisclassified = getOptBool(rs, \"is_misclassified\")\n \n     val result = SpamCheckTask(\n-      siteId = rs.getInt(\"site_id\"),\n-      createdAt = getWhen(rs, \"created_at\"),\n-      postToSpamCheck = anyPostToCheck,\n-      who = Who(\n-        id = rs.getInt(\"author_id\"),\n-        BrowserIdData(\n-          ip = rs.getString(\"req_ip\"),\n-          idCookie = getOptString(rs, \"browser_id_cookie\"),\n-          fingerprint = rs.getInt(\"browser_fingerprint\"))),\n-      requestStuff = SpamRelReqStuff(\n-        userAgent = getOptString(rs, \"req_user_agent\"),\n-        referer = getOptString(rs, \"req_referer\"),\n-        uri = rs.getString(\"req_uri\"),\n-        userName = getOptString(rs, \"author_name\"),\n-        userEmail = getOptString(rs, \"author_email_addr\"),\n-        userUrl = getOptString(rs, \"author_url\"),\n-        userTrustLevel = getOptInt(rs, \"author_trust_level\").flatMap(TrustLevel.fromInt)),\n-      resultsAt = getOptWhen(rs, \"results_at\"),\n-      resultsJson = getOptJsObject(rs, \"results_json\"),\n-      resultsText = getOptString(rs, \"results_text\"),\n-      numIsSpamResults = getOptInt(rs, \"num_is_spam_results\"),\n-      numNotSpamResults = getOptInt(rs, \"num_not_spam_results\"),\n-      humanSaysIsSpam = getOptBool(rs, \"human_says_is_spam\"),\n-      misclassificationsReportedAt = getOptWhen(rs, \"misclassifications_reported_at\"))\n+          siteId = rs.getInt(\"site_id\"),\n+          createdAt = getWhen(rs, \"created_at\"),\n+          postToSpamCheck = anyPostToCheck,\n+          reqrId = getInt(rs, \"author_id_c\"),\n+          requestStuff = SpamRelReqStuff(\n+              BrowserIdData(\n+                  ip = rs.getString(\"req_ip\"),\n+                  idCookie = getOptString(rs, \"browser_id_cookie\"),\n+                  fingerprint = rs.getInt(\"browser_fingerprint\")),\n+              userAgent = getOptString(rs, \"req_user_agent\"),\n+              referer = getOptString(rs, \"req_referer\"),\n+              uri = rs.getString(\"req_uri\"),\n+              userName = getOptString(rs, \"author_name\"),\n+              userEmail = getOptString(rs, \"author_email_addr\"),\n+              userUrl = getOptString(rs, \"author_url\"),\n+              userTrustLevel = getOptInt(rs, \"author_trust_level\").flatMap(TrustLevel.fromInt)),\n+          resultsAt = getOptWhen(rs, \"results_at\"),\n+          resultsJson = getOptJsObject(rs, \"results_json\"),\n+          resultsText = getOptString(rs, \"results_text\"),\n+          numIsSpamResults = getOptInt(rs, \"num_is_spam_results\"),\n+          numNotSpamResults = getOptInt(rs, \"num_not_spam_results\"),\n+          humanSaysIsSpam = getOptBool(rs, \"human_says_is_spam\"),\n+          misclassificationsReportedAt = getOptWhen(rs, \"misclassifications_reported_at\"))\n \n     dieIf(result.isMisclassified != anyIsMisclassified, \"TyE068TDGW2\")\n     result\n@@ -754,6 +790,9 @@ object RdbUtil {\n       |g.frequent_poster_3_id,\n       |g.layout,\n       |g.comt_order_c,\n+      |g.comts_start_hidden_c,\n+      |g.comts_start_anon_c,\n+      |g.new_anon_status_c,\n       |g.comt_nesting_c,\n       |g.forum_search_box_c,\n       |g.forum_main_view_c,\n@@ -831,6 +870,9 @@ object RdbUtil {\n       layout = PageLayout.fromInt(resultSet.getInt(\"layout\")) getOrElse PageLayout.Default,\n       comtOrder = PostSortOrder.fromOptVal(getOptInt32(resultSet, \"comt_order_c\")),\n       comtNesting = None, // later\n+      comtsStartHidden = NeverAlways.fromOptInt(getOptInt32(resultSet, \"comts_start_hidden_c\")),\n+      comtsStartAnon = NeverAlways.fromOptInt(getOptInt32(resultSet, \"comts_start_anon_c\")),\n+      newAnonStatus = AnonStatus.fromOptInt(getOptInt32(resultSet, \"new_anon_status_c\")),\n       forumSearchBox = getOptInt32(resultSet, \"forum_search_box_c\"),\n       forumMainView = getOptInt32(resultSet, \"forum_main_view_c\"),\n       forumCatsTopics = getOptInt32(resultSet, \"forum_cats_topics_c\"),"
    },
    {
      "sha": "aa709094f81079169b01fef8cf6fff09af4f174c",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/ReviewTasksSiteDaoMixin.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FReviewTasksSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FReviewTasksSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FReviewTasksSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -59,7 +59,7 @@ trait ReviewTasksSiteDaoMixin extends SiteTransaction {\n         invalidated_at,\n         decided_at,\n         decision,\n-        user_id,\n+        about_pat_id_c,\n         page_id,\n         post_id,\n         post_nr)\n@@ -76,7 +76,7 @@ trait ReviewTasksSiteDaoMixin extends SiteTransaction {\n         invalidated_at = excluded.invalidated_at,\n         decided_at = excluded.decided_at,\n         decision = excluded.decision,\n-        user_id = excluded.user_id,\n+        about_pat_id_c = excluded.about_pat_id_c,\n         page_id = excluded.page_id,\n         post_id = excluded.post_id,\n         post_nr = excluded.post_nr  \"\"\"\n@@ -113,7 +113,7 @@ trait ReviewTasksSiteDaoMixin extends SiteTransaction {\n \n   override def loadUndecidedPostReviewTask(postId: PostId, taskCreatedById: UserId)\n         : Option[ReviewTask] = {\n-    loadReviewTaskImpl(o\"\"\"\n+    loadReviewTaskImpl(s\"\"\"\n         completed_at is null and\n         decided_at is null and\n         invalidated_at is null and\n@@ -171,7 +171,9 @@ trait ReviewTasksSiteDaoMixin extends SiteTransaction {\n         : Seq[ReviewTask] = {\n     val desc = orderBy.isDescending ? \"desc\" | \"\"\n     val query = i\"\"\"\n-      select * from review_tasks3 where site_id = ? and user_id = ?\n+      select * from review_tasks3\n+      where site_id = ? and\n+            about_pat_id_c = ?\n       order by created_at $desc, id $desc limit ?\n       \"\"\"\n     runQueryFindMany(query, List(siteId.asAnyRef, userId.asAnyRef, limit.asAnyRef), rs => {\n@@ -247,7 +249,7 @@ trait ReviewTasksSiteDaoMixin extends SiteTransaction {\n       invalidatedAt = getOptionalDate(rs, \"invalidated_at\"),\n       decidedAt = getOptionalDate(rs, \"decided_at\"),\n       decision = getOptInt(rs, \"decision\").flatMap(ReviewDecision.fromInt),\n-      maybeBadUserId = getOptInt(rs, \"user_id\").getOrElse(UnknownUserId),\n+      maybeBadUserId = getOptInt(rs, \"about_pat_id_c\").getOrElse(UnknownUserId),\n       pageId = Option(rs.getString(\"page_id\")),\n       postId = getOptInt(rs, \"post_id\"),\n       postNr = getOptInt(rs, \"post_nr\"))"
    },
    {
      "sha": "5256faea734b765cace6db29478765de15329285",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/SpamCheckQueueDaoMixin.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FSpamCheckQueueDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FSpamCheckQueueDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FSpamCheckQueueDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -41,7 +41,7 @@ trait SpamCheckQueueDaoMixin extends SiteTransaction {\n         page_available_at,\n         html_to_spam_check,\n         language,\n-        author_id,\n+        author_id_c,\n         browser_id_cookie,\n         browser_fingerprint,\n         req_user_agent,\n@@ -68,12 +68,12 @@ trait SpamCheckQueueDaoMixin extends SiteTransaction {\n       // There's a constraint, spamcheckqueue_c_texttospamcheck_len, 20200 chars. Maybe 15 000 enough?\n       spamCheckTask.postToSpamCheck.map(_.htmlToSpamCheck.take(15*1000)).trimOrNullVarchar,\n       spamCheckTask.postToSpamCheck.map(_.language).orNullVarchar,\n-      spamCheckTask.who.id.asAnyRef,\n-      spamCheckTask.who.idCookie.trimOrNullVarchar,\n-      spamCheckTask.who.browserFingerprint.asAnyRef,\n+      spamCheckTask.reqrId.asAnyRef,\n+      spamCheckTask.requestStuff.browserIdData.idCookie.trimOrNullVarchar,\n+      spamCheckTask.requestStuff.browserIdData.fingerprint.asAnyRef,\n       spamCheckTask.requestStuff.userAgent.trimOrNullVarchar,\n       spamCheckTask.requestStuff.referer.trimOrNullVarchar,\n-      spamCheckTask.who.ip,\n+      spamCheckTask.requestStuff.browserIdData.ip,\n       spamCheckTask.requestStuff.uri,\n       spamCheckTask.requestStuff.userName.trimOrNullVarchar,\n       spamCheckTask.requestStuff.userEmail.trimOrNullVarchar,"
    },
    {
      "sha": "fdb72081e5417b5012a38f23f3af1d4a2b7cb420",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "status": "modified",
      "additions": 40,
      "deletions": 8,
      "changes": 48,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FUserSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -326,6 +326,10 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n \n   def insertGroup(group: Group) {\n+    dieIf(group.perms.canSeeOthersEmailAdrs.is(true) &&\n+            !group.isStaffOrMinTrustNotThreat(TrustLevel.CoreMember),\n+          \"TyEPATCONF3563\", \"Only >= core members may be configured to see others' emails\")\n+\n     val sql = \"\"\"\n           insert into users3(\n             site_id,\n@@ -343,8 +347,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n             may_dir_msg_me_tr_lv_c,\n             max_upload_bytes_c,\n             allowed_upload_extensions_c,\n+            can_see_others_email_adrs_c,\n             is_group)\n-          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true) \"\"\"\n+          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true) \"\"\"\n \n     val values = List(\n           siteId.asAnyRef,\n@@ -361,7 +366,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           group.privPrefs.mayMentionMeTrLv.map(_.toInt).orNullInt,\n           group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n           group.perms.maxUploadBytes.orNullInt,\n-          group.perms.allowedUplExts.orNullVarchar)\n+          group.perms.allowedUplExts.orNullVarchar,\n+          group.perms.canSeeOthersEmailAdrs.orNullBo,\n+          )\n \n     runUpdateExactlyOneRow(sql, values)\n   }\n@@ -386,7 +393,9 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n-  def updateGroup(group: Group) {\n+  def updateGroup(validGroup: ValidGroup) {\n+    val group = validGroup.get\n+\n     val statement = \"\"\"\n       update users3 set\n         updated_at = now_utc(),\n@@ -401,7 +410,8 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n         may_mention_me_tr_lv_c = ?,\n         may_dir_msg_me_tr_lv_c = ?,\n         max_upload_bytes_c = ?,\n-        allowed_upload_extensions_c = ?\n+        allowed_upload_extensions_c = ?,\n+        can_see_others_email_adrs_c = ?\n       where site_id = ?\n         and user_id = ?\n       \"\"\"\n@@ -419,6 +429,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           group.privPrefs.maySendMeDmsTrLv.map(_.toInt).orNullInt,\n           group.perms.maxUploadBytes.orNullInt,\n           group.perms.allowedUplExts.orNullVarchar,\n+          group.perms.canSeeOthersEmailAdrs.orNullBo,\n           siteId.asAnyRef,\n           group.id.asAnyRef)\n \n@@ -433,7 +444,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n   def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId] = {\n     val builtInGroups = ppt match {\n-      case _: Guest | UnknownParticipant => return Vector(Group.EveryoneId)\n+      case _: Guest | _: Anonym | UnknownParticipant => return Vector(Group.EveryoneId)\n       case u: User => getBuiltInGroupIdsForUser(u)\n       case u: UserInclDetails => getBuiltInGroupIdsForUser(u)\n       case _: UserBase => die(\"TyE26MP431\", \"Should see User or UserInclDetails before UserBase\")\n@@ -587,6 +598,25 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n   }\n \n \n+  def insertAnonym(anon: Anonym) {\n+    val stmt = s\"\"\"\n+          insert into users3(\n+            site_id,\n+            user_id,\n+            created_at,\n+            true_id_c,\n+            anonym_status_c,\n+            anon_on_page_id_st_c)\n+          values (?, ?, ?, ?, ?, ?)\n+          \"\"\"\n+    val values = List(\n+          siteId.asAnyRef, anon.id.asAnyRef,\n+          anon.createdAt.asTimestamp, anon.anonForPatId.asAnyRef,\n+          anon.anonStatus.toInt.asAnyRef, anon.anonOnPageId)\n+    runUpdateSingleRow(stmt, values)\n+  }\n+\n+\n   def insertMember(user: UserInclDetails) {\n     try {\n       runUpdate(\"\"\"\n@@ -680,6 +710,8 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n       \"\"\"\n     runQueryFindOneOrNone(query, values.toList, rs => {\n       val user = getParticipant(rs)\n+      // Use  pat.toMemberOrThrow instead of these dieIf?\n+      dieIf(user.isAnon, \"TyE2AKB7F2\")\n       dieIf(user.isGuest, \"TyE2AKB7F3\")\n       user.asInstanceOf[Member]\n     })\n@@ -739,7 +771,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n     unimplIf(!usersOnly, \"Must be usersOnly [TyE7AMT05MRKT]\")\n     val sql = s\"\"\"\n           select distinct $UserSelectListItemsNoGuests\n-          from posts3 p inner join users3 u\n+          from posts3 p inner join users3 u  -- + pat_node_rels_t [AuthorOf]\n             on p.site_id = u.site_id\n             and p.created_by_id = u.user_id\n             and not u.is_group\n@@ -1062,7 +1094,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n \n       val user = getMemberInclDetails(rs) match {\n         case m: UserInclDetails => m\n-        case g: Group => throw GotAGroupException(g.id)\n+        case g: Group => throw GotAGroupException(g.id, wantedWhat = \"a user\")\n       }\n \n       (user, anyStats)\n@@ -1204,7 +1236,7 @@ trait UserSiteDaoMixin extends SiteTransaction {  // RENAME; QUICK // to UserSit\n           u.USERNAME,\n           u.may_mention_me_tr_lv_c,\n           u.why_may_not_mention_msg_me_html_c\n-      from posts3 p inner join users3 u\n+      from posts3 p inner join users3 u    -- + pat_node_rels_t [AuthorOf]\n          on p.SITE_ID = u.SITE_ID\n         and p.CREATED_BY_ID = u.USER_ID\n         and u.USERNAME is not null"
    },
    {
      "sha": "5b4e5c8c78a1ff68a534cbdd8b48e7521736a409",
      "filename": "appsv/server/controllers/CloseCollapseController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FCloseCollapseController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FCloseCollapseController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FCloseCollapseController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -67,8 +67,7 @@ class CloseCollapseController @Inject()(cc: ControllerComponents, edContext: TyC\n     val pageId = (apiReq.body \\ \"pageId\").as[PageId]\n     val postNr = (apiReq.body \\ \"postNr\").as[PostNr]\n \n-    dao.changePostStatus(postNr, pageId = pageId, action, userId = apiReq.theUserId,\n-          apiReq.theBrowserIdData)\n+    dao.changePostStatus(postNr, pageId = pageId, action, apiReq.reqrIds)\n \n     OkSafeJson(dao.jsonMaker.postToJson2(postNr, pageId = pageId, // COULD stop including post in reply? It'd be annoying if other unrelated changes were loaded just because the post was toggled open?\n       includeUnapproved = true))"
    },
    {
      "sha": "f372c6f4896bc1aef674da901249b53fde0d767e",
      "filename": "appsv/server/controllers/CreateSiteController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FCreateSiteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FCreateSiteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FCreateSiteController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -256,7 +256,7 @@ class CreateSiteController @Inject()(cc: ControllerComponents, edContext: TyCont\n           }\n \n           val title = newSiteTitle getOrElse \"Your Site\"\n-          val newSiteWho = Who(SystemUserId, request.theBrowserIdData)\n+          val newSiteWho = Who(TrueId(SystemUserId), request.theBrowserIdData)\n           if (createForum) {\n             val options = debiki.dao.CreateForumOptions(\n                   isForEmbeddedComments = false,"
    },
    {
      "sha": "fca3609730e6f4643d84d7173d76e9278df042d8",
      "filename": "appsv/server/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FDraftsController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -114,9 +114,13 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n       }\n       else {\n+        val anyOtherAuthor =\n+              if (post.createdById == requester.id) None\n+              else dao.getParticipant(post.createdById)\n         throwNoUnless(Authz.mayEditPost(\n           request.theUserAndLevels, dao.getOnesGroupIds(requester),\n-          post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+          post, otherAuthor = anyOtherAuthor, pageMeta,\n+          dao.getAnyPrivateGroupTalkMembers(pageMeta),\n           inCategoriesRootLast = categoriesRootLast,\n           tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"TyEZBXK3M3\")\n       }"
    },
    {
      "sha": "e29a3033c8e2d9aa2a2a4476e07d2926032717b9",
      "filename": "appsv/server/controllers/EditController.scala",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FEditController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -21,9 +21,11 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n+import debiki.JsonUtils.asJsObject\n import talkyard.server.linkpreviews.{LinkPreviewRenderer, PreviewResult, LinkPreviewProblem}\n import talkyard.server.http._\n import talkyard.server.{TyContext, TyController}\n+import talkyard.server.parser\n import javax.inject.Inject\n import play.api.mvc.{Action, ControllerComponents}\n import play.api.libs.json._\n@@ -140,12 +142,15 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4JBR01\")\n     val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdE0DK9WY3\")\n     val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val anyOtherAuthor =\n+          if (post.createdById == requester.id) None\n+          else dao.getParticipant(post.createdById)\n \n     CHECK_AUTHN_STRENGTH\n \n     throwNoUnless(Authz.mayEditPost(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),\n-      post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+      post, otherAuthor = anyOtherAuthor, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n       tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXKSM2\")\n \n@@ -178,12 +183,16 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   def edit: Action[JsValue] = PostJsonAction(RateLimits.EditPost,\n         MinAuthnStrength.EmbeddingStorageSid12, maxBytes = MaxPostSize) {\n         request: JsonPostRequest =>\n-    import request.{dao, body}\n+    import request.{dao, theRequester => requester}\n+    val body = asJsObject(request.body, \"request body\")\n     val pageId = (body \\ \"pageId\").as[PageId]\n     val postNr = (body \\ \"postNr\").as[PostNr] ; SHOULD // change to id, in case moved to other page [idnotnr]\n     val anyPostId: Option[PostId] = (body \\ \"postId\").asOpt[PostId]\n     val newText = (body \\ \"text\").as[String]\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n+    val doAsAnon: Opt[WhichAnon] = parser.parseWhichAnonJson(body) getOrIfBad { prob =>\n+      throwBadReq(\"TyEANONPARED\", s\"Bad anon params: $prob\")\n+    }\n \n     if (postNr == PageParts.TitleNr)\n       throwForbidden(\"DwE5KEWF4\", \"Edit the title via /-/edit-title-save-settings instead\")\n@@ -209,9 +218,13 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     CHECK_AUTHN_STRENGTH\n \n+    val anyOtherAuthor =\n+          if (post.createdById == requester.id) None\n+          else dao.getParticipant(post.createdById)\n+\n     throwNoUnless(Authz.mayEditPost(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),\n-      post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+      post, otherAuthor = anyOtherAuthor, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n       inCategoriesRootLast = categoriesRootLast,\n       tooManyPermissions = dao.getPermsOnPages(categoriesRootLast)), \"EdE4JBTYE8\")\n \n@@ -227,7 +240,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       followLinks = postNr == PageParts.BodyNr && pageMeta.pageType.shallFollowLinks)\n \n     request.dao.editPostIfAuth(pageId = pageId, postNr = postNr, deleteDraftNr = deleteDraftNr,\n-      request.who, request.spamRelatedStuff, newTextAndHtml)\n+          request.who, request.spamRelatedStuff, newTextAndHtml, doAsAnon)\n \n     OkSafeJson(dao.jsonMaker.postToJson2(postNr = postNr, pageId = pageId,\n       includeUnapproved = true))\n@@ -328,8 +341,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val newTypeInt = (request.body \\ \"newType\").as[Int]\n     val newType = PostType.fromInt(newTypeInt) getOrElse throwBadArgument(\"DwE4EWL3\", \"newType\")\n \n-    request.dao.changePostType(pageId = pageId, postNr = postNr, newType,\n-      changerId = request.theUser.id, request.theBrowserIdData)\n+    request.dao.changePostType(pageId = pageId, postNr = postNr, newType, request.reqrIds)\n     Ok\n   }\n \n@@ -356,8 +368,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     CHECK_AUTHN_STRENGTH\n \n-    val result = dao.changePostStatus(postNr, pageId = pageId, action, userId = request.theUserId,\n-          request.theBrowserIdData)\n+    val result = dao.changePostStatus(postNr, pageId = pageId, action, request.reqrIds)\n \n     OkSafeJson(Json.obj(\n       \"answerGotDeleted\" -> result.answerGotDeleted,\n@@ -381,7 +392,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     CHECK_AUTHN_STRENGTH\n \n     val (_, storePatch) = request.dao.movePostIfAuth(PagePostId(pageId, postId),\n-      newParent = PagePostNr(newPageId, newParentNr), moverId = request.theMember.id,\n+      newParent = PagePostNr(newPageId, newParentNr), moverId = request.theReqerTrueId,\n       request.theBrowserIdData)\n \n     OkSafeJson(storePatch)"
    },
    {
      "sha": "215478738011ee645dbd6ef1b118edc9f365939b",
      "filename": "appsv/server/controllers/EmbeddedTopicsController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -120,8 +120,10 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ty\n               anyDiscussionId = discussionId, anyEmbeddingUrl = Some(embeddingUrl),\n               lazyCreatePageInCatId = Some(lazyCreateInCatId))\n         val htmlString = views.html.templates.page(tpi).body\n+        val renderedPage = RenderedPage(htmlString, \"NoJson-1WB4Z6\",\n+              unapprovedPostAuthorIds = Set.empty, anonsByRealId = Map.empty)\n \n-        (RenderedPage(htmlString, \"NoJson-1WB4Z6\", unapprovedPostAuthorIds = Set.empty), pageRequest)\n+        (renderedPage, pageRequest)\n \n       case Some(realId) =>\n         // (For now, ignore `category` here. Or, some time later, would an admin setting"
    },
    {
      "sha": "24b246c675e6cb1759d32f65ca8f079f843d9ee8",
      "filename": "appsv/server/controllers/ForumController.scala",
      "status": "modified",
      "additions": 28,
      "deletions": 4,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FForumController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -26,7 +26,7 @@ import debiki.JsonUtils.parseOptInt32\n import talkyard.server.http._\n import play.api.libs.json._\n import play.api.mvc._\n-import scala.collection.{immutable, mutable}\n+import scala.collection.{immutable, mutable => mut}\n import scala.collection.mutable.ArrayBuffer\n import talkyard.server.{TyContext, TyController}\n import javax.inject.Inject\n@@ -123,6 +123,7 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     import request.{dao, body, requester}\n     val categoryJson = (body \\ \"category\").as[JsObject]\n+    val catJo = categoryJson ; RENAME // to catJo\n     val permissionsJson = (body \\ \"permissions\").as[JsArray]\n \n     val sectionPageId = (categoryJson \\ \"sectionPageId\").as[PageId]\n@@ -138,9 +139,15 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     // For now, do-it-votes just on or off:  [do_it_on_off]\n     val doItVotesPopFirst = (categoryJson \\ \"doItVotesPopFirst\").asOpt[Bo] getOrElse false\n \n+    // Dupl code, will remove after [add_nodes_t].\n     val anyComtOrder = PostSortOrder.fromOptVal(parseOptInt32(categoryJson, \"comtOrder\"))\n     val anyComtNesting = None // later: parseOptInt32(\"comtNesting\").map(x => x.map(_.toShort)) ?\n \n+    val comtsStartHidden = NeverAlways.fromOptInt(parseOptInt32(catJo, \"comtsStartHidden\"))\n+    val comtsStartAnon = NeverAlways.fromOptInt(parseOptInt32(catJo, \"comtsStartAnon\"))\n+    val opStartsAnon = NeverAlways.fromOptInt(parseOptInt32(catJo, \"opStartsAnon\"))\n+    val newAnonStatus = AnonStatus.fromOptInt(parseOptInt32(catJo, \"newAnonStatus\"))\n+\n     val shallBeDefaultCategory = (categoryJson \\ \"isDefaultCategory\").asOpt[Boolean] is true\n     val categoryId = (categoryJson \\ \"id\").as[Int]\n     if (categoryId == NoCategoryId)\n@@ -164,6 +171,10 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n                   offset = None, TopTopicsPeriod.Year)),\n       comtOrder = anyComtOrder,\n       comtNesting = anyComtNesting,\n+      comtsStartHidden = comtsStartHidden,\n+      comtsStartAnon = comtsStartAnon,\n+      opStartsAnon = opStartsAnon,\n+      newAnonStatus = newAnonStatus,\n       doVoteStyle =\n             if (!doItVotesPopFirst) None\n             else Some(DoVoteStyle.Likes),\n@@ -390,13 +401,16 @@ object ForumController {\n   }\n \n \n-  // Vaguely similar code: ThingsFoundJson.makePagesFoundResponseImpl()  [406RKD2JB]\n+  // Vaguely similar code: ThingsFoundJson._makePagesFoundResponseImpl()  [406RKD2JB]\n   //\n   def makeTopicsResponse(topics: Seq[PagePathAndMeta], dao: SiteDao): Result = {\n     val pageStuffById = dao.getPageStuffById(topics.map(_.pageId))\n     val pageStuffList: Iterable[PageStuff] = pageStuffById.values\n \n-    val users = dao.getUsersAsSeq(pageStuffList.flatMap(_.userIds).toSet)\n+    // [incl_assignees]\n+    val patIdsNeeded = mut.Set[PatId]()\n+    pageStuffList.foreach(_.addVisiblePatIdsTo(patIdsNeeded))\n+    val users = dao.getUsersAsSeq(patIdsNeeded)\n \n     // In the topic list, we show only post tags (not author badges),\n     // so we don't need any pat tags (user badges).\n@@ -439,7 +453,9 @@ object ForumController {\n     // Try to remove 'page' or topicStuff.pageMeta? Don't need both.\n     dieIf(Globals.isDevOrTest && page != topicStuff.pageMeta, \"TyE305DRJ24\")\n \n-    Json.obj(\n+    COULD_OPTIMIZE; SAVE_BANDWIDTH // Exclude all zero (0) fields? E.g. 0 like votes.\n+    // And use an ArrayBuffer, pass to a JsObject.\n+    var result = Json.obj(\n       \"pageId\" -> page.pageId,\n       \"pageRole\" -> page.pageType.toInt,\n       // If a person may know a certain unapproved topic exists, it's ok to show\n@@ -480,6 +496,14 @@ object ForumController {\n       \"hiddenAtMs\" -> JsWhenMsOrNull(page.hiddenAt),\n       \"deletedAtMs\" -> JsDateMsOrNull(page.deletedAt))\n       // Could incl deletedById but only if requester is staff?\n+\n+    // Later: Also check permissions, once these features implemented:\n+    // - Don't incl any [private_pats] reqr may not see.\n+    // - Don't incl any, if cannot see assignees. [can_see_assigned]\n+    if (topicStuff.assigneeIds.nonEmpty)\n+      result += \"assigneeIds\" -> JsArray(topicStuff.assigneeIds.map(JsNumber(_)))\n+\n+    result\n   }\n \n }"
    },
    {
      "sha": "20c0a5bfcb524824b737023d638b0aef2bd9b138",
      "filename": "appsv/server/controllers/GroupTalkController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FGroupTalkController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FGroupTalkController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FGroupTalkController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -51,6 +51,7 @@ class GroupTalkController @Inject()(cc: ControllerComponents, edContext: TyConte\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n \n     throwBadRequestIf(!pageRole.isPrivateGroupTalk, \"EsE5PK0R\", s\"Not private group talk: $pageRole\")\n+    dieIf(request.user.exists(_.isAnon), \"TyE6PGKB1\", \"Anons cannot send HTTP requests\")\n     throwBadRequestIf(request.isGuest, \"EsE6PGKB2\", \"Guests may not send private messages\")\n     throwBadRequestIf(title.isEmpty, \"EsE2FKUp8\", \"No message title\")\n     throwBadRequestIf(text.trim.isEmpty, \"EsE5JGU8\", \"Empty message\")"
    },
    {
      "sha": "e0c3ea35c2b2b57b1a86b1c010302f27eb20f268",
      "filename": "appsv/server/controllers/InviteController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FInviteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FInviteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FInviteController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -273,7 +273,7 @@ class InviteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       val inviter = dao.getParticipant(invite.createdById) getOrDie \"DwE4KDEP0\"\n       val inviteAcceptedEmail = makeYourInviteWasAcceptedEmail(\n             request.host, newUser, inviter, langCode = settings.languageCode)\n-      globals.sendEmail(inviteAcceptedEmail, request.siteId)\n+      globals.sendEmail(inviteAcceptedEmail, request.siteId)  ; SHOULD // [save_email]\n       // COULD create a notification instead / too.\n     }\n "
    },
    {
      "sha": "e20b7beed6c6dc659612123c9a95409cbf92f280",
      "filename": "appsv/server/controllers/LoginAsGuestController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FLoginAsGuestController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -75,7 +75,7 @@ class LoginAsGuestController @Inject()(cc: ControllerComponents, edContext: TyCo\n       createdAt = globals.now(),\n       siteId = request.siteId,\n       postToSpamCheck = None,\n-      who = request.whoOrUnknown,\n+      reqrId = request.requesterOrUnknown.id,\n       requestStuff = request.spamRelatedStuff.copy(\n         userName = Some(name).noneIfBlank,\n         userEmail = Some(email).noneIfBlank,"
    },
    {
      "sha": "bd7ac093f5e5fe3aae29f0e1fe341f90ae648f13",
      "filename": "appsv/server/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FLoginWithOpenAuthController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -2056,7 +2056,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       createdAt = globals.now(),\n       siteId = request.siteId,\n       postToSpamCheck = None,\n-      who = request.whoOrUnknown,\n+      reqrId = request.requesterOrUnknown.id,\n       requestStuff = request.spamRelatedStuff.copy(\n         userName = Some((username + \" \" + fullName.getOrElse(\"\")).trim),\n         userEmail = Some(emailAddress),"
    },
    {
      "sha": "e18ee75b88155c2b4d0620e8c77c77a52a399b37",
      "filename": "appsv/server/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FLoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FLoginWithPasswordController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -200,7 +200,7 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n       createdAt = globals.now(),\n       siteId = request.siteId,\n       postToSpamCheck = None,\n-      who = request.whoOrUnknown,\n+      reqrId = request.requesterOrUnknown.id,\n       requestStuff = request.spamRelatedStuff.copy(\n         userName = Some((username + \" \" + fullName.getOrElse(\"\")).trim),\n         userEmail = Some(emailAddress),"
    },
    {
      "sha": "24c9614628e1c94df67bd31a4fd5fd549b8356de",
      "filename": "appsv/server/controllers/PageController.scala",
      "status": "modified",
      "additions": 56,
      "deletions": 11,
      "changes": 67,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FPageController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -21,13 +21,15 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n+import debiki.JsonUtils._\n import debiki.dao.SiteDao\n import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n import talkyard.server.http._\n+import talkyard.server.parser\n import java.{util => ju}\n import javax.inject.Inject\n-import play.api.libs.json.{JsArray, JsString, JsValue, Json}\n+import play.api.libs.json.{JsObject, JsArray, JsString, JsValue, Json}\n import play.api.mvc.{Action, ControllerComponents}\n import talkyard.server.JsX.JsLongOrNull\n \n@@ -41,10 +43,11 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n   def createPage: Action[JsValue] = PostJsonAction(RateLimits.CreateTopic, maxBytes = 20 * 1000) {\n         request =>\n-    import request.{body, dao, theRequester => requester}\n+    import request.{dao, theRequester => requester}\n \n     throwForbiddenIf(requester.isGroup, \"EdE3FDK7M6\", \"Groups may not create pages\")\n \n+    val body = asJsObject(request.body, \"request body\")\n     val anyCategoryId = (body \\ \"categoryId\").asOpt[CategoryId]\n     val pageRoleInt = (body \\ \"pageRole\").as[Int]\n     val pageRole = PageType.fromInt(pageRoleInt) getOrElse throwBadArgument(\"DwE3KE04\", \"pageRole\")\n@@ -56,6 +59,15 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val bodyText = (body \\ \"pageBody\").as[String]\n     val showId = (body \\ \"showId\").asOpt[Boolean].getOrElse(true)\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n+    val doAsAnon: Opt[WhichAnon] = parser.parseWhichAnonJson(body) getOrIfBad { prob =>\n+      throwBadReq(\"TyEANONPARCRPG\", s\"Bad anon params: $prob\")\n+    }\n+    val doAsNewAnon: Opt[WhichAnon.NewAnon] = doAsAnon map {\n+      case _new: WhichAnon.NewAnon => _new\n+      case _: WhichAnon.SameAsBefore => throwBadReq(\"TyE5MWE2J8\", o\"\"\"Cannot keep\n+            reusing an old anonym, when creating a new page. Anonyms are per page.\"\"\")\n+    }\n+    // val anonStatus = parseOptInt32(body, \"anonStatus\").flatMap(AnonStatus.fromInt)\n \n     val postRenderSettings = dao.makePostRenderSettings(pageRole)\n     val bodyTextAndHtml = dao.textAndHtmlMaker.forBodyOrComment(bodyText,\n@@ -88,8 +100,8 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       \"EdE5KW20A\")\n \n     val pagePath = dao.createPage(pageRole, pageStatus, anyCategoryId, anyFolder,\n-      anySlug, titleSourceAndHtml, bodyTextAndHtml, showId, deleteDraftNr = deleteDraftNr,\n-      request.who, request.spamRelatedStuff)\n+          anySlug, titleSourceAndHtml, bodyTextAndHtml, showId, deleteDraftNr = deleteDraftNr,\n+          request.who, request.spamRelatedStuff, doAsAnon = doAsNewAnon)\n \n     OkSafeJson(Json.obj(\"newPageId\" -> pagePath.pageId))\n   }\n@@ -230,20 +242,50 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   }\n \n \n+  MOVE // to UserController maybe?\n+  def changePatNodeRels: Action[JsValue] = PostJsonAction(RateLimits.JoinSomething,\n+          maxBytes = 200) { req =>\n+    import req.dao\n+    val bodyJo: JsObject = asJsObject(req.body, \"the request body\")\n+    val addPatIds = parseOptInt32Array(bodyJo, \"addPatIds\").getOrElse(Nil).toSet\n+    val removePatIds = parseOptInt32Array(bodyJo, \"removePatIds\").getOrElse(Nil).toSet\n+    val postId = parseInt32(bodyJo, \"postId\")\n+    val relType = parsePatPostRelType(bodyJo, \"relType\")\n+    val storePatch = dao.addRemovePatNodeRelsIfAuZ(\n+          addPatIds = addPatIds, removePatIds = removePatIds,\n+          postId = postId, relType = relType,\n+          generateMetaComt = true, notifyPats = true,\n+          req.who, IfBadAbortReq)\n+    OkSafeJson(storePatch)\n+  }\n+\n+  /* Later?:  For now, part of  DraftsController.listDrafts\n+  def listPatNodeRels: Action[JsValue] = ...\n+  */\n+\n+\n   def acceptAnswer: Action[JsValue] = PostJsonAction(RateLimits.TogglePage, maxBytes = 100) {\n         request =>\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val postUniqueId = (request.body \\ \"postId\").as[PostId]   // id not nr\n+\n+    ANON_UNIMPL /* If created a page as anon, would accept it as anon too?  [anon_pages] So need:\n+    val doAsAnon: Opt[WhichAnon.SameAsBefore] = parser.parseWhichAnonJson(body) ...\n+            case _new: WhichAnon.NewAnon => throwBadReq(..., o\"\"\"Cannot create\n+            a new anonym, when accepting an answer. Should instead use the anonym\n+            that posted the page in the first place.\"\"\")  */\n+\n     val acceptedAt: Option[ju.Date] = request.dao.ifAuthAcceptAnswer(\n-      pageId, postUniqueId, userId = request.theUserId, request.theBrowserIdData)\n+          pageId, postUniqueId, request.theReqerTrueId, request.theBrowserIdData)\n     OkSafeJsValue(JsLongOrNull(acceptedAt.map(_.getTime)))\n   }\n \n \n   def unacceptAnswer: Action[JsValue] = PostJsonAction(RateLimits.TogglePage, maxBytes = 100) {\n         request =>\n+    ANON_UNIMPL // Need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?   [anon_pages]\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n-    request.dao.ifAuthUnacceptAnswer(pageId, userId = request.theUserId, request.theBrowserIdData)\n+    request.dao.ifAuthUnacceptAnswer(pageId, request.theReqerTrueId, request.theBrowserIdData)\n     Ok\n   }\n \n@@ -252,23 +294,24 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         request =>\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val closedAt: Option[ju.Date] = request.dao.ifAuthTogglePageClosed(\n-      pageId, userId = request.theUserId, request.theBrowserIdData)\n+          pageId, request.reqrIds)\n+    ANON_UNIMPL // Need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?   [anon_pages]\n     OkSafeJsValue(JsLongOrNull(closedAt.map(_.getTime)))\n   }\n \n   def deletePages: Action[JsValue] = PostJsonAction(\n           RateLimits.TogglePage, maxBytes = 1000) { request =>\n     val pageIds = (request.body \\ \"pageIds\").as[Seq[PageId]]\n-    request.dao.deletePagesIfAuth(pageIds, deleterId = request.theUserId,\n-          request.theBrowserIdData, undelete = false)\n+    ANON_UNIMPL // Need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?   [anon_pages]\n+    request.dao.deletePagesIfAuth(pageIds, request.reqrIds, undelete = false)\n     Ok\n   }\n \n   def undeletePages: Action[JsValue] = PostJsonAction(\n           RateLimits.TogglePage, maxBytes = 1000) { request =>\n     val pageIds = (request.body \\ \"pageIds\").as[Seq[PageId]]\n-    request.dao.deletePagesIfAuth(pageIds, deleterId = request.theUserId,\n-          request.theBrowserIdData, undelete = true)\n+    ANON_UNIMPL // Need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?   [anon_pages]\n+    request.dao.deletePagesIfAuth(pageIds, request.reqrIds, undelete = true)\n     Ok\n   }\n \n@@ -277,6 +320,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         request =>\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val userIds = (request.body \\ \"userIds\").as[Set[UserId]]\n+    // Later, need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?  [anon_priv_msgs]\n     request.dao.addUsersToPage(userIds, pageId, request.who)\n     Ok\n   }\n@@ -286,6 +330,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         maxBytes = 100) { request =>\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val userIds = (request.body \\ \"userIds\").as[Set[UserId]]\n+    // Later, need:  doAsAnon: Opt[WhichAnon.SameAsBefore] ?  [anon_priv_msgs]\n     request.dao.removeUsersFromPage(userIds, pageId, request.who)\n     Ok\n   }"
    },
    {
      "sha": "25443ada8e7a1c49811fce0b54f6e0d89c4eb5ca",
      "filename": "appsv/server/controllers/PageTitleSettingsController.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FPageTitleSettingsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FPageTitleSettingsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FPageTitleSettingsController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -22,7 +22,7 @@ import com.debiki.core.Prelude._\n import com.debiki.core.PageParts.MaxTitleLength\n import debiki._\n import debiki.EdHttp._\n-import debiki.JsonUtils.parseOptInt32\n+import debiki.JsonUtils.{parseOptInt32, asJsObject}\n import debiki.JsonUtils.parseOptZeroSomeNone\n import talkyard.server.{TyContext, TyController}\n import talkyard.server.http._\n@@ -35,6 +35,9 @@ import talkyard.server.JsX.{JsStringOrNull, JsPageMeta}\n \n /** Edits the page title and changes settings like forum category, URL path,\n   * which layout to use, <html><head><title> and description.\n+  *\n+  * MOVE to PageController, right?  It's confusing to have 2 controllers that do\n+  * almost the same things.\n   */\n class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   extends TyController(cc, edContext) {\n@@ -45,6 +48,8 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n         request: JsonPostRequest =>\n     import request.{body, dao, theRequester => requester}\n \n+    val pageJo = asJsObject(request.body, \"the request body\")\n+    CLEAN_UP // use JsonUtils below, not '\\'.\n     val pageId = (request.body \\ \"pageId\").as[PageId]\n     val anyNewTitle = (request.body \\ \"newTitle\").asOptStringNoneIfBlank\n     val anyNewCategoryId = (request.body \\ \"categoryId\").asOpt[CategoryId]\n@@ -60,6 +65,7 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n     val anyForumMainView = parseOptInt32(body, \"forumMainView\")\n     val anyForumCatsTopics = parseOptInt32(body, \"forumCatsTopics\")\n \n+    // Dupl code, will remove after [add_nodes_t].\n     // If the requester isn't staff, these aren't sent, become None.  [onl_staff_set_comt_ord]\n     // If is staff, then can be Some(Some(value)), or Some(None) to clear and inherit instead\n     // from anc cats.\n@@ -68,6 +74,10 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n     val anyComtNesting: Opt[Opt[ComtNesting_later]] =\n           parseOptZeroSomeNone(request.body, \"comtNesting\")(x => x.map(_.toShort))\n \n+    val comtsStartHidden = NeverAlways.fromOptInt(parseOptInt32(pageJo, \"comtsStartHidden\"))\n+    val comtsStartAnon = NeverAlways.fromOptInt(parseOptInt32(pageJo, \"comtsStartAnon\"))\n+    val newAnonStatus = AnonStatus.fromOptInt(parseOptInt32(pageJo, \"newAnonStatus\"))\n+\n     val anyHtmlTagCssClasses = (request.body \\ \"htmlTagCssClasses\").asOptStringNoneIfBlank\n     val anyHtmlHeadTitle = (request.body \\ \"htmlHeadTitle\").asOptStringNoneIfBlank\n     val anyHtmlHeadDescription = (request.body \\ \"htmlHeadDescription\").asOptStringNoneIfBlank\n@@ -236,6 +246,9 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n           forumCatsTopics = anyForumCatsTopics.orElse(oldMeta.forumCatsTopics),\n           comtOrder = anyComtOrder getOrElse oldMeta.comtOrder,\n           comtNesting = anyComtNesting getOrElse oldMeta.comtNesting,\n+          comtsStartHidden = comtsStartHidden,\n+          comtsStartAnon = comtsStartAnon,\n+          newAnonStatus = newAnonStatus,\n           // A meta post about changing the doingStatus.\n           numPostsTotal = oldMeta.numPostsTotal + (addsNewDoingStatusMetaPost ? 1 | 0),\n           version = oldMeta.version + 1)"
    },
    {
      "sha": "6791b32c4f8f54b774b47c3c625b648b12bbf2d4",
      "filename": "appsv/server/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FReplyController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -21,12 +21,14 @@ import com.debiki.core._\n import com.debiki.core.Prelude._\n import debiki._\n import debiki.EdHttp._\n+import debiki.JsonUtils.asJsObject\n import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n import talkyard.server.http._\n+import talkyard.server.parser\n import javax.inject.Inject\n import play.api._\n-import play.api.libs.json.{JsObject, JsString, JsValue, Json}\n+import play.api.libs.json.{JsObject, JsValue, Json}\n import play.api.mvc._\n import talkyard.server.authn.MinAuthnStrength\n \n@@ -43,7 +45,8 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   def handleReply: Action[JsValue] = PostJsonAction(RateLimits.PostReply,\n         MinAuthnStrength.EmbeddingStorageSid12, maxBytes = MaxPostSize) {\n         request: JsonPostRequest =>\n-    import request.{body, dao, theRequester => requester}\n+    import request.{dao, theRequester => requester}\n+    val body = asJsObject(request.body, \"request body\")\n     val anyPageId = (body \\ \"pageId\").asOpt[PageId]\n     val anyDiscussionId = (body \\ \"discussionId\").asOpt[AltPageId] orElse (\n           body \\ \"altPageId\").asOpt[AltPageId] ; CLEAN_UP // deprecated name [058RKTJ64] 2020-06\n@@ -54,6 +57,9 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val postType = PostType.fromInt((body \\ \"postType\").as[Int]) getOrElse throwBadReq(\n       \"DwE6KG4\", \"Bad post type\")\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n+    val doAsAnon: Opt[WhichAnon] = parser.parseWhichAnonJson(body) getOrIfBad { prob =>\n+      throwBadReq(\"TyEANONPARRE\", s\"Bad anon params: $prob\")\n+    }\n \n     throwBadRequestIf(text.isEmpty, \"EdE85FK03\", \"Empty post\")\n     throwForbiddenIf(requester.isGroup, \"EdE4GKRSR1\", \"Groups may not reply\")\n@@ -95,7 +101,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       followLinks = false)\n \n     val result = dao.insertReply(textAndHtml, pageId = pageId, replyToPostNrs,\n-      postType, deleteDraftNr, request.who, request.spamRelatedStuff)\n+      postType, deleteDraftNr, request.who, request.spamRelatedStuff, doAsAnon)\n \n     var responseJson: JsObject = result.storePatchJson\n     if (newEmbPage.isDefined) {"
    },
    {
      "sha": "08fe20b5b0538654c3d0846eb543c181afe59293",
      "filename": "appsv/server/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FResetPasswordController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -131,7 +131,7 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: TyC\n           try dao.loadTheUserInclDetailsById(forUserId)\n           catch {\n             case _: GotAGroupException =>\n-              throwForbidden(\"TyE50AMWG5\", s\"User $forUserId a group not a user\")\n+              throwForbidden(\"TyE50AMWG5\", s\"User $forUserId is a group not a user\")\n           }\n \n     throwForbiddenIf(member.isAdmin && !requester.isAdmin,"
    },
    {
      "sha": "9a79a21cbd4ea1607debd75028fc0e77dc6e8881",
      "filename": "appsv/server/controllers/SpecialContentController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FSpecialContentController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FSpecialContentController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FSpecialContentController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -77,7 +77,7 @@ class SpecialContentController @Inject()(cc: ControllerComponents, edContext: Ty\n     val anyNewText = (request.body \\ \"anyCustomText\").asOptStringNoneIfBlank\n \n     request.dao.saveSpecialContent(rootPageId, contentId, anyNewText, useDefaultText,\n-      editorId = request.theUserId)\n+          request.reqrIds)\n     Ok\n   }\n "
    },
    {
      "sha": "de667713f6e5146d88fcead933dd474a235b3dd5",
      "filename": "appsv/server/controllers/UploadsController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUploadsController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -147,7 +147,7 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n     _throwForbiddenMaybe(Some(file.filename), sizeBytes = file.fileSize, request)\n \n     val uploadRef = dao.addUploadedFile(\n-      file.filename, file.ref.file, request.theUserId, request.theBrowserIdData)\n+      file.filename, file.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n \n     // Delete the temporary file. (It will be gone already, if we couldn't optimize it,\n     // i.e. make it smaller, because then we've moved it to the uploads dir (rather than\n@@ -160,7 +160,7 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n \n \n   def removeAvatar: Action[JsValue] = PostJsonAction(RateLimits.UploadFile, maxBytes = 200) { request =>\n-    request.dao.setUserAvatar(request.theUserId, tinyAvatar = None, smallAvatar = None,\n+    request.dao.setUserAvatar(request.theReqerId, tinyAvatar = None, smallAvatar = None,\n       mediumAvatar = None, request.theBrowserIdData)\n     Ok\n   }\n@@ -226,13 +226,13 @@ class UploadsController @Inject()(cc: ControllerComponents, edContext: TyContext\n     // (since they're unused) â€” deleting them is not yet implemented though [9YMU2Y].\n \n     val tinyAvatarRef = request.dao.addUploadedFile(\n-      tinyFile.filename, tinyFile.ref.file, request.theUserId, request.theBrowserIdData)\n+      tinyFile.filename, tinyFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n \n     val smallAvatarRef = request.dao.addUploadedFile(\n-      smallFile.filename, smallFile.ref.file, request.theUserId, request.theBrowserIdData)\n+      smallFile.filename, smallFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n \n     val mediumAvatarRef = request.dao.addUploadedFile(\n-      mediumFile.filename, mediumFile.ref.file, request.theUserId, request.theBrowserIdData)\n+      mediumFile.filename, mediumFile.ref.file, request.theReqerTrueId, request.theBrowserIdData)\n \n     // Delete the temporary files.\n     tinyFile.ref.delete()"
    },
    {
      "sha": "b5cce7fb152ad41c483fb2f26394305823be55ca",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 189,
      "deletions": 58,
      "changes": 247,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUserController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -30,6 +30,7 @@ import play.api.mvc\n import play.api.libs.json._\n import play.api.mvc.{Action, ControllerComponents}\n import scala.util.Try\n+import scala.collection.{mutable => mut}\n import debiki.RateLimits.TrackReadingActivity\n import talkyard.server.{TyContext, TyController}\n import talkyard.server.authz.Authz\n@@ -154,10 +155,15 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   //\n   private def loadPatJsonAnyDetailsById(userId: UserId, includeStats: Bo,\n         request: DebikiRequest[_]): (JsObject, JsValue, Pat) = {\n+    import request.dao\n+\n     val callerIsStaff = request.user.exists(_.isStaff)\n     val callerIsAdmin = request.user.exists(_.isAdmin)\n     val callerIsUserHerself = request.user.exists(_.id == userId)\n     val isStaffOrSelf = callerIsStaff || callerIsUserHerself\n+    val reqrPerms: EffPatPerms =\n+          dao.deriveEffPatPerms(request.authzContext.groupIdsEveryoneLast)\n+\n     request.dao.readOnlyTransaction { tx =>\n       val stats = includeStats ? tx.loadUserStats(userId) | None\n       val (pptJson, pat) =\n@@ -167,21 +173,27 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           val json = memberOrGroup match {\n             case m: UserInclDetails =>\n               JsUserInclDetails(m, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n-                callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself)\n+                    callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself,\n+                    reqrPerms = Some(reqrPerms))\n             case g: Group =>\n               jsonForGroupInclDetails(g, callerIsAdmin = callerIsAdmin,\n-                callerIsStaff = callerIsStaff)\n+                    callerIsStaff = callerIsStaff, reqrPerms = Some(reqrPerms))\n           }\n           (json, memberOrGroup)\n         }\n         else {\n-          val guest = tx.loadTheGuest(userId)\n-          val json = jsonForGuest(guest, Map.empty, callerIsStaff = callerIsStaff,\n-            callerIsAdmin = callerIsAdmin)\n-          (json, guest)\n+          val pat = tx.loadTheParticipant(userId)\n+          val json = pat match {\n+            case anon: Anonym => JsPat(anon, TagsAndBadges.None)\n+            case guest: Guest => jsonForGuest(guest, Map.empty, callerIsStaff = callerIsStaff,\n+                callerIsAdmin = callerIsAdmin, reqrPerms = Some(reqrPerms))\n+          }\n+          (json, pat.asInstanceOf[ParticipantInclDetails])\n         }\n       dieIf(pat.id != userId, \"TyE36WKDJ03\")\n-      (pptJson, stats.map(JsUserStats(_, isStaffOrSelf)).getOrElse(JsNull), pat.noDetails)\n+      (pptJson,\n+          stats.map(JsUserStats(_, isStaffOrSelf, Some(reqrPerms))).getOrElse(JsNull),\n+          pat.noDetails)\n     }\n   }\n \n@@ -190,8 +202,12 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n   private def loadMemberJsonInclDetailsByEmailOrUsername(emailOrUsername: String,\n         includeStats: Boolean, request: DebikiRequest[_])\n         : (JsObject, JsValue, Participant) = {\n+    import request.{dao}\n+\n     val callerIsStaff = request.user.exists(_.isStaff)\n     val callerIsAdmin = request.user.exists(_.isAdmin)\n+    val reqrPerms: EffPatPerms =\n+          dao.deriveEffPatPerms(request.authzContext.groupIdsEveryoneLast)\n \n     // For now, unless admin, don't allow emails, so cannot brut-force test email addresses.\n     if (emailOrUsername.contains(\"@\") && !callerIsAdmin)\n@@ -235,20 +251,27 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           val callerIsUserHerself = request.user.exists(_.id == user.id)\n           val isStaffOrSelf = callerIsStaff || callerIsUserHerself\n           val userJson = JsUserInclDetails(\n-            user, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n-            callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself)\n-          (userJson, stats.map(JsUserStats(_, isStaffOrSelf)).getOrElse(JsNull), user.noDetails)\n+                user, Map.empty, groups, callerIsAdmin = callerIsAdmin,\n+                callerIsStaff = callerIsStaff, callerIsUserHerself = callerIsUserHerself,\n+                reqrPerms = Some(reqrPerms))\n+          (userJson,\n+              stats.map(JsUserStats(_, isStaffOrSelf, Some(reqrPerms))).getOrElse(JsNull),\n+              user.noDetails)\n         case group: GroupVb =>\n           val groupJson = jsonForGroupInclDetails(\n-            group, callerIsAdmin = callerIsAdmin, callerIsStaff = callerIsStaff)\n+                group, callerIsAdmin = callerIsAdmin, callerIsStaff = callerIsStaff,\n+                reqrPerms = Some(reqrPerms))\n           (groupJson, JsNull, group)\n       }\n     }\n   }\n \n \n+  /** [Dupl_perms] Nowadays, could be enough with reqrPerms â€” and remove\n+    * callerIsAdmin/Staff?\n+    */\n   private def jsonForGroupInclDetails(group: Group, callerIsAdmin: Bo,\n-        callerIsStaff: Bo = false): JsObject = {\n+        callerIsStaff: Bo = false, reqrPerms: Opt[EffPatPerms] = None): JsObject = {\n     var json = Json.obj(   // hmm a bit dupl code [B28JG4]  also in JsGroup\n       \"id\" -> group.id,\n       \"isGroup\" -> JsTrue,\n@@ -266,17 +289,32 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     if (callerIsStaff) {\n       json += \"summaryEmailIntervalMins\" -> JsNumberOrNull(group.summaryEmailIntervalMins)\n       json += \"summaryEmailIfActive\" -> JsBooleanOrNull(group.summaryEmailIfActive)\n+\n       json += \"uiPrefs\" -> group.uiPrefs.getOrElse(JsEmptyObj)\n+\n       val perms = group.perms\n-      json += \"maxUploadBytes\" -> JsNumberOrNull(perms.maxUploadBytes)\n-      json += \"allowedUplExts\" -> JsStringOrNull(perms.allowedUplExts)\n+      var permsJo = Json.obj(\n+            \"maxUploadBytes\" -> JsNumberOrNull(perms.maxUploadBytes),\n+            \"allowedUplExts\" -> JsStringOrNull(perms.allowedUplExts))\n+      // Revealing which user accounts can see others' email addresses, might make\n+      // such accounts targets for hackers. So, only show to staff, for now.\n+      // [can_see_who_can_see_email_adrs]\n+      if (callerIsStaff) {  // already tested above, again here, oh well\n+        perms.canSeeOthersEmailAdrs.foreach(v =>\n+              permsJo += \"canSeeOthersEmailAdrs\" -> JsBoolean(v))\n+      }\n+      json += \"perms\" -> permsJo\n     }\n     json\n   }\n \n \n+  /** [Dupl_perms] Nowadays, could be enough with reqrPerms â€” and remove\n+    * callerIsAdmin/Staff?\n+    */\n   private def jsonForGuest(user: Guest, usersById: Map[UserId, Participant],\n-                           callerIsStaff: Boolean, callerIsAdmin: Boolean): JsObject = {\n+          callerIsStaff: Boolean, callerIsAdmin: Bo,\n+          reqrPerms: Opt[EffPatPerms] = None): JsObject = {\n     val safeEmail = callerIsAdmin ? user.email | hideEmailLocalPart(user.email)\n     var userJson = Json.obj(\n       \"id\" -> user.id,\n@@ -286,8 +324,8 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       \"location\" -> JsStringOrNull(user.country))\n       // += ipSuspendedTill\n       // += browserIdCookieSuspendedTill\n-    if (callerIsStaff) {\n-      userJson += \"email\" -> JsString(safeEmail)\n+    if (callerIsStaff || reqrPerms.exists(_.canSeeOthersEmailAdrs)) {\n+      userJson += \"email\" -> JsString(safeEmail) ; RENAME // to emailAdr?\n       // += ipSuspendedAt, ById, ByUsername, Reason\n       // += browserIdCookieSuspendedAt, ById, ByUsername, Reason\n     }\n@@ -305,70 +343,141 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     throwForbiddenIfActivityPrivate(userId, requester, dao)\n \n+    // Later, include, if reqr is the author henself. [list_anon_posts]\n+    val inclAnonPosts = false\n+\n     val topicsInclForbidden = dao.loadPagesByUser(\n-      userId, isStaffOrSelf = isStaffOrSelf, limit = 200)\n+      userId, isStaffOrSelf = isStaffOrSelf, inclAnonPosts = inclAnonPosts, limit = 200)\n     val topics = topicsInclForbidden filter { page: PagePathAndMeta =>\n       dao.maySeePageUseCache(page.meta, requester, maySeeUnlisted = isStaffOrSelf).maySee\n     }\n     ForumController.makeTopicsResponse(topics, dao)\n   }\n \n \n-  def listPostsByUser(authorId: UserId): Action[Unit] = GetAction { request: GetRequest =>\n-    listPostsImpl(authorId, all = false, request)\n+  def listPostsByUser(authorId: UserId, relType: Opt[Int], which: Opt[Int]): Action[U] =\n+          GetActionRateLimited() { req: GetRequest =>\n+    relType match {\n+      case None =>\n+        // Later, will use PostQuery here too, just like below (and this match-case\n+        // branch maybe then no longer needed).\n+        listPostsImpl(authorId, all = false, req)\n+      case Some(relTypeInt) =>\n+\n+        // Tests:\n+        //    - assign-to-basic.2br.d  TyTASSIGN01\n+\n+        RENAME // authorId param to: relToPatId, later.\n+        val relToPatId = authorId\n+        val relType = PatNodeRelType.fromInt(relTypeInt).getOrThrowBadRequest(\n+              \"TyE502SMJ\", \"Only Assigned-To has been implemented\")\n+\n+        val reqrIsStaff = req.requester.exists(_.isStaff)\n+        val reqrIsStaffOrSelf = reqrIsStaff || req.requester.exists(_.id == relToPatId)\n+\n+        val onlyOpen = which is 678321  // for now\n+        val query = PostQuery.PostsRelatedToPat(\n+              reqrInf = req.reqrInf,\n+              relatedPatId = relToPatId,\n+              relType = relType,\n+              onlyOpen = onlyOpen,\n+              // Later, incl anon posts, if is PatNodeRelType.AssignedTo? [list_anon_posts]\n+              inclAnonPosts = false,\n+              inclTitles = false,\n+              inclUnapproved = reqrIsStaffOrSelf,\n+              inclUnlistedPagePosts =\n+                    // Not listing pat's assignments, would be confusing? [.incl_unl]\n+                    relType == PatNodeRelType.AssignedTo || reqrIsStaffOrSelf,\n+              limit = 100,\n+              orderBy = OrderBy.MostRecentFirst)\n+\n+        _listPostsImpl2(query, req.dao)\n+    }\n   }\n \n \n   private def listPostsImpl(authorId: UserId, all: Boolean, request: GetRequest): mvc.Result = {\n+    import request.dao\n     import request.{dao, requester}\n \n-    request.context\n-\n     val requesterIsStaff = requester.exists(_.isStaff)\n     val requesterIsStaffOrAuthor = requesterIsStaff || requester.exists(_.id == authorId)\n+\n+     /*/ Later: Throw if the reqr may not see `authorId`. [private_pats]\n     val author = dao.getParticipant(authorId) getOrElse throwNotFound(\"EdE2FWKA9\", \"Author not found\")\n+     */\n \n     throwForbiddenIfActivityPrivate(authorId, requester, dao)\n \n     // For now. LATER: if really many posts, generate an archive in the background.\n     // And if !all, and > 100 posts, add a load-more button.\n     val limit = all ? 9999 | 100\n \n-    val LoadPostsResult(postsOneMaySee, pageStuffById) =\n-          dao.loadPostsMaySeeByQuery(\n-                requester, OrderBy.MostRecentFirst, limit = limit,\n+    _listPostsImpl2(\n+          PostQuery.PostsByAuthor(\n+                reqrInf = request.reqrInf,\n+                orderBy = OrderBy.MostRecentFirst,\n+                limit = limit,\n+                // Later, include, if reqr is the author henself. [list_anon_posts]\n+                inclAnonPosts = false,\n                 // One probably wants to see one's own not-yet-approved posts.\n-                inclUnapprovedPosts = requesterIsStaffOrAuthor,\n-                inclTitles = false, onlyEmbComments = false,\n+                inclUnapproved = requesterIsStaffOrAuthor,\n+                inclTitles = false,\n+                // Can this cause confusion? But unlisted posts aren't supposed\n+                // to be listed. Also see [.incl_unl] above.\n                 inclUnlistedPagePosts = requesterIsStaffOrAuthor,\n-                writtenById = Some(authorId))\n+                authorId = authorId), dao)\n+  }\n+\n+\n+  private def _listPostsImpl2(query: PostQuery, dao: SiteDao): mvc.Result = {\n+    val LoadPostsResult(postsOneMaySee, pageStuffById) =\n+          // This excludes any stuff the requester may not see. [downl_own_may_see]\n+          dao.loadPostsMaySeeByQuery(query)\n \n     val posts = postsOneMaySee\n-    COULD_OPTIMIZE // cache tags per post?\n+\n+    val patIds = mut.Set[PatId]()\n+    posts.foreach(_.addVisiblePatIdsTo(patIds))\n+\n+    // Bit dupl code. [pats_by_id_json]\n+    val patsById: Map[PatId, Pat] = dao.getParticipantsAsMap(patIds)\n+\n+\n+    COULD_OPTIMIZE // cache tags per post? And badges per pat?\n+    // What about [assignees_badges]? Currently not shown.\n     val tagsAndBadges: TagsAndBadges = dao.readTx(_.loadPostTagsAndAuthorBadges(posts.map(_.id)))\n     val tagTypes = dao.getTagTypes(tagsAndBadges.tagTypeIds)\n \n+    val patsJsArr = JsArray(patsById.values.toSeq map { pat =>\n+      JsPat(pat, tagsAndBadges,\n+            toShowForPatId = Some(query.reqr.id))  // Maybe use Opt[Pat] instead, hmm\n+    })\n+\n     val postsJson = posts flatMap { post =>\n       val pageStuff = pageStuffById.get(post.pageId) getOrDie \"EdE2KW07E\"\n       val pageMeta = pageStuff.pageMeta\n       var postJson = dao.jsonMaker.postToJsonOutsidePage(post, pageMeta.pageType,\n-            showHidden = true, includeUnapproved = requesterIsStaffOrAuthor, tagsAndBadges)\n+            showHidden = true,\n+            // Really need to specify this again?\n+            includeUnapproved = query.reqrIsStaffOrObject,\n+            tagsAndBadges)\n \n       pageStuffById.get(post.pageId) map { pageStuff =>\n         postJson += \"pageId\" -> JsString(post.pageId)\n         postJson += \"pageTitle\" -> JsString(pageStuff.title)\n         postJson += \"pageRole\" -> JsNumber(pageStuff.pageRole.toInt)\n-        if (requesterIsStaff && (post.numPendingFlags > 0 || post.numHandledFlags > 0)) {\n+        if (query.reqr.isStaff && (post.numPendingFlags > 0 || post.numHandledFlags > 0)) {\n           postJson += \"numPendingFlags\" -> JsNumber(post.numPendingFlags)\n           postJson += \"numHandledFlags\" -> JsNumber(post.numHandledFlags)\n         }\n         postJson\n       }\n     }\n \n-    OkSafeJson(Json.obj(\n-      \"author\" -> JsUser(author),\n+    OkSafeJson(Json.obj(  // Typescript: LoadPostsResponse\n       \"posts\" -> JsArray(postsJson),\n+      \"patsBrief\" -> patsJsArr,\n       \"tagTypes\" -> JsArray(tagTypes map JsTagType)))\n   }\n \n@@ -404,7 +513,8 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       }\n \n       val anyStats: Option[UserStats] = tx.loadUserStats(userId)\n-      val statsJson = anyStats.map(JsUserStats(_, isStaffOrSelf = true)) getOrElse JsNull\n+      val statsJson = anyStats.map(JsUserStats(_, isStaffOrSelf = true, reqrPerms = None)\n+            ) getOrElse JsNull\n \n       val otherEmailAddresses =\n         tx.loadUserEmailAddresses(userId).filterNot(_.emailAddress == member.primaryEmailAddress)\n@@ -487,6 +597,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     if (requester.exists(r => r.isStaff || r.id == userId))\n       return true\n \n+    COULD_OPTIMIZE // Use cache\n     val memberInclDetails = dao.loadTheMemberInclDetailsById(userId)\n     memberInclDetails.privPrefs.seeActivityMinTrustLevel match {\n       case None => true\n@@ -505,9 +616,14 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     import request.{dao, theRequester => requester}\n     // Could refactor and break out functions. Later some day maybe.\n \n-    throwForbiddenIf(requester.id != userId && !requester.isAdmin,\n+    val perms: EffPatPerms =\n+          dao.deriveEffPatPerms(request.authzContext.groupIdsEveryoneLast)\n+\n+    throwForbiddenIf(requester.id != userId && !perms.canSeeOthersEmailAdrs,\n       \"EdE5JKWTDY2\", \"You may not see someone elses email addresses\")\n \n+    val isSelfOrAdmin = requester.id == userId || requester.isAdmin\n+\n     val (memberInclDetails, emails, identities) = dao.readOnlyTransaction { tx =>\n       (tx.loadTheUserInclDetails(userId),\n         tx.loadUserEmailAddresses(userId),\n@@ -541,36 +657,50 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         case x =>\n           (classNameOf(x), None, None, None, None)\n       }\n-      Json.obj(  // Typescript: UserAccountLoginMethod\n-        // COULD instead use: JsIdentity  ?\n-        \"loginType\" -> classNameOf(identity),\n-        \"provider\" -> idpName,\n-        \"idpAuthUrl\" -> idpAuthUrl,\n-        \"idpUsername\" -> idpUsername,\n-        \"idpUserId\" -> idpUserId,\n-        \"idpEmailAddr\" -> JsStringOrNull(emailAddr))\n+\n+      // No need to show these details for moderators?  [granular_perms] ...\n+      // Typescript: UserAccountLoginMethod\n+      var methodJo = if (!isSelfOrAdmin) JsEmptyObj else Json.obj(\n+            // COULD instead use: JsIdentity  ?\n+            \"loginType\" -> classNameOf(identity),\n+            \"provider\" -> idpName,\n+            \"idpAuthUrl\" -> idpAuthUrl,\n+            \"idpUsername\" -> idpUsername,\n+            \"idpUserId\" -> idpUserId)\n+\n+      // ... but they do have permission to see email addresses:\n+      methodJo += \"idpEmailAddr\" -> JsStringOrNull(emailAddr)\n+      methodJo\n     })\n \n     if (memberInclDetails.passwordHash.isDefined) {\n-      loginMethodsJson :+= Json.obj(  // UserAccountLoginMethod\n-        \"loginType\" -> \"LocalPwd\",\n-        \"provider\" -> \"Password\",\n-        \"idpUsername\" -> memberInclDetails.username,\n-        \"idpEmailAddr\" -> memberInclDetails.primaryEmailAddress)\n+      // Non-admins need not know? [granular_perms]\n+      // Typescript: UserAccountLoginMethod\n+      var methodJo = if (!isSelfOrAdmin) JsEmptyObj else Json.obj(\n+            \"loginType\" -> \"LocalPwd\",\n+            \"provider\" -> \"Password\",\n+            \"idpUsername\" -> memberInclDetails.username)\n+\n+      methodJo += \"idpEmailAddr\" -> JsString(memberInclDetails.primaryEmailAddress)\n+      loginMethodsJson :+= methodJo\n     }\n \n     if (memberInclDetails.ssoId.isDefined) {\n       // Tests: sso-login-member  TyT5HNATS20P.TyTE2ESSOLGIMS\n-      loginMethodsJson :+= Json.obj(  // UserAccountLoginMethod\n-        \"loginType\" -> \"TySsoApi\",\n-        \"provider\" -> \"Talkyard Single Sign-On API\",\n-        \"idpEmailAddr\" -> memberInclDetails.primaryEmailAddress,\n-        \"idpUserId\" -> JsStringOrNull(memberInclDetails.ssoId))\n+      // Non-admins need not know? [granular_perms]\n+      // Typescript: UserAccountLoginMethod\n+      var methodJo = if (!isSelfOrAdmin) JsEmptyObj else Json.obj(\n+            \"loginType\" -> \"TySsoApi\",\n+            \"provider\" -> \"Talkyard Single Sign-On API\",\n+            \"idpUserId\" -> JsStringOrNull(memberInclDetails.ssoId))\n+\n+      methodJo += \"idpEmailAddr\" -> JsString(memberInclDetails.primaryEmailAddress)\n+      loginMethodsJson :+= methodJo\n     }\n \n     OkSafeJson(Json.obj(  // UserAccountResponse\n-      \"emailAddresses\" -> emailsJson,\n-      \"loginMethods\" -> loginMethodsJson))\n+        \"emailAddresses\" -> emailsJson,\n+        \"loginMethods\" -> loginMethodsJson))\n   }\n \n \n@@ -1038,8 +1168,8 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val res: MeAndStuff =\n       if (pageRequest.user.isDefined) {\n         val renderedPage = request.dao.renderWholePageHtmlMaybeUseMemCache(pageRequest)\n-        dao.jsonMaker.userDataJson(pageRequest, renderedPage.unapprovedPostAuthorIds).getOrDie(\n-          \"EdE4ZBXKG\")\n+        dao.jsonMaker.userDataJson(pageRequest, renderedPage.unapprovedPostAuthorIds,\n+              renderedPage.anonsByRealId).getOrDie(\"EdE4ZBXKG\")\n       }\n       else {\n         val everyonesPerms = request.dao.getPermsForEveryone()\n@@ -1112,6 +1242,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     import request.{siteId, dao, theRequester => requester}\n     import talkyard.server.{WhenFormat, OptWhenFormat}\n \n+    throwForbiddenIf(requester.isAnon, \"TyE8LUHE1\", \"Not tracking anonyms' reading progress\")\n     throwForbiddenIf(requester.isGuest, \"EdE8LUHE2\", \"Not tracking guests' reading progress\")\n     throwForbiddenIf(requester.isGroup, \"EdE5QFVB5\", \"Not tracking groups' reading progress\")\n \n@@ -1544,7 +1675,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         maxBytes = 1000) { request =>\n     import request.{body, dao, siteId}\n     val patId = parseI32(body, \"patId\")\n-    val perms: PatPerms = JsX.parsePatPerms(body, siteId)\n+    val perms: PatPerms = JsX.parsePatPerms(body, siteId)(IfBadAbortReq)\n     dao.savePatPerms(patId, perms, request.who)\n \n     // Try to reuse: [load_pat_stats_grps]"
    },
    {
      "sha": "c64ac3206483a2f3a66ee2d55b6b49e045db2c52",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -208,7 +208,8 @@ class ViewPageController @Inject()(cc: ControllerComponents, edContext: TyContex\n     COULD_OPTIMIZE // this loads some here unneeded data about the current user.\n     // we only need: watchbar and .myDataByPageId[].  [load_less_me_data]\n     val anyMeAndStuff: Opt[MeAndStuff] =\n-      dao.jsonMaker.userDataJson(pageRequest, renderedPage.unapprovedPostAuthorIds)\n+      dao.jsonMaker.userDataJson(pageRequest, renderedPage.unapprovedPostAuthorIds,\n+            renderedPage.anonsByRealId)\n \n     Future.successful(\n       OkSafeJson(\n@@ -332,7 +333,8 @@ class ViewPageController @Inject()(cc: ControllerComponents, edContext: TyContex\n           request, pageId = EmptyPageId, showId = false, pageRole = PageType.WebPage, globals.now())\n       val json = dao.jsonMaker.emptySiteJson(pageRequest).toString()\n       val html = views.html.specialpages.createSomethingHerePage(SiteTpi(pageRequest, Some(json))).body\n-      val renderedPage = RenderedPage(html, \"NoJson-2WBKCG7\", unapprovedPostAuthorIds = Set.empty)\n+      val renderedPage = RenderedPage(html, \"NoJson-2WBKCG7\",\n+            unapprovedPostAuthorIds = Set.empty, anonsByRealId = Map.empty)\n       return addVolatileJsonAndPreventClickjacking(renderedPage, pageRequest)\n     }\n \n@@ -403,6 +405,7 @@ object ViewPageController {\n         skipUsersOnline: Boolean = false, xsrfTokenIfNoCookies: Option[String] = None): Future[Result] = {\n     val pageHtml = renderedPage.html\n     addVolatileJsonAndPreventClickjacking2(pageHtml, renderedPage.unapprovedPostAuthorIds, request,\n+      anonsByRealId = renderedPage.anonsByRealId,\n       embeddingUrl = embeddingUrl, skipUsersOnline = skipUsersOnline,\n       xsrfTokenIfNoCookies = xsrfTokenIfNoCookies)\n   }\n@@ -411,6 +414,7 @@ object ViewPageController {\n   RENAME // to addVolatileJsonAndContentSecurityPolicy\n   def addVolatileJsonAndPreventClickjacking2(pageHtmlNoVolData: String,\n         unapprovedPostAuthorIds: Set[UserId], request: DebikiRequest[_],\n+        anonsByRealId: Map[PatId, Seq[Anonym]] = Map.empty,\n         embeddingUrl: Option[String] = None,\n         skipUsersOnline: Boolean = false, xsrfTokenIfNoCookies: Option[String] = None): Future[Result] = {\n     import request.{dao, requester}\n@@ -424,7 +428,7 @@ object ViewPageController {\n     val anyMeAndRestrStuff: Opt[MeAndStuff] =\n       request match {\n         case pageRequest: PageRequest[_] =>\n-          dao.jsonMaker.userDataJson(pageRequest, unapprovedPostAuthorIds)\n+          dao.jsonMaker.userDataJson(pageRequest, unapprovedPostAuthorIds, anonsByRealId)\n         case _: DebikiRequest[_] =>\n           dao.jsonMaker.userNoPageToJson(request)\n       }"
    },
    {
      "sha": "26b7870d77fca513a79d404b34861fb6992f1dae",
      "filename": "appsv/server/controllers/VoteController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FVoteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fcontrollers%2FVoteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FVoteController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -105,6 +105,9 @@ class VoteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     CHECK_AUTHN_STRENGTH\n \n+    ANON_UNIMPL // don't allow, if is anon post by oneself\n+    // val author = dao.getParticipantOrUnknown( the-post .createdById)\n+\n     if (delete) {\n       dao.deleteVoteIfAuZ(pageId, postNr, voteType, voterId = request.theUser.id)\n     }\n@@ -117,10 +120,8 @@ class VoteController @Inject()(cc: ControllerComponents, edContext: TyContext)\n     val updatedPost = dao.loadPost(pageId, postNr) getOrThrowForbidden(\n           \"TyE7M3MRSED5\", \"The post just got hard deleted?\")\n \n-    val author = dao.getParticipantOrUnknown(updatedPost.createdById)\n-\n     val storePatchJson = dao.jsonMaker.makeStorePatchForPost(\n-          updatedPost, author, showHidden = true)\n+          updatedPost, showHidden = true, reqerId = request.theReqerId)\n \n     val responseJson = storePatchJson ++\n           EmbeddedCommentsPageCreator.makeAnyNewPageJson(newEmbPage)"
    },
    {
      "sha": "e99d9bd5aedbc31606be78c81749d28e23a05871",
      "filename": "appsv/server/debiki/Globals.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FGlobals.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -260,7 +260,7 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n   }\n \n   // Could rename to \"rendererVersion\".\n-  val applicationVersion = \"0.00.77\"  // later, read from some build config file\n+  val applicationVersion = \"0.00.79\"  // later, read from some build config file\n \n   def applicationSecret: String = _appSecret\n "
    },
    {
      "sha": "98ceb689f7f024e08875c1d786bf5ab53595cbb4",
      "filename": "appsv/server/debiki/JsonUtils.scala",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FJsonUtils.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -143,6 +143,32 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n             \"TyE2YMP73T\", s\"'$fieldName' is not an object, but a ${classNameOf(bad)}\")\n     }\n \n+  def parseInt32Array(json: JsValue, fieldName: St): Vec[i32] = {\n+    parseOptInt32Array(json, fieldName) getOrElse {\n+      throwBadJson(\"TyEJSINTARRMISNG\", s\"Integer array $fieldName is missing\")\n+    }\n+  }\n+\n+  def parseOptInt32Array(json: JsValue, fieldName: St): Opt[Vec[i32]] = {\n+    parseOptJsArray(json, fieldName) map { arr: IndexedSeq[JsValue] =>\n+      var ix = 0\n+      def errPrefix = s\"Array '$fieldName', item $ix:\"\n+      arr.map({\n+        case JsNumber(num: BigDecimal) =>\n+          ix += 1\n+          try num.toIntExact catch {\n+            case ex: java.lang.ArithmeticException =>\n+              ix -= 1\n+              throwBadJson(\"TyEJSINTARRNUM\",\n+                    s\"$errPrefix Not a 32 bit integer: $num, exception: $ex\")\n+          }\n+        case bad =>\n+          throwBadJson(\"TyEJSINTARRELMTYP\",\n+                s\"$errPrefix Not a number, but a: ${classNameOf(bad)}\")\n+      }).toVector\n+    }\n+  }\n+\n   def parseJsArray(json: JsValue, fieldName: St, optional: Bo = false): Seq[JsValue] =\n     readJsArray(json, fieldName, optional).value\n \n@@ -310,6 +336,16 @@ object JsonUtils {   MOVE // to talkyard.server.parser.JsonParSer\n   }\n \n \n+  def parsePatPostRelType(jo: JsObject, fieldName: St): PatNodeRelType = {\n+    val relTypeInt = parseInt32(jo, fieldName)\n+    throwUnimplIf(relTypeInt != PatNodeRelType.AssignedTo.IntVal,\n+          \"Only AssignedTo has been implemented [TyEUNIMPLRELTYP]\")\n+    PatNodeRelType.fromInt(relTypeInt) getOrElse {\n+      throwBadJson(\"TyEPATPOSTRELTYP\", s\"$fieldName: Bad pat post rel type: '$relTypeInt'\")\n+    }\n+  }\n+\n+\n   def parseNotfLevel(json: JsObject, fieldName: St): NotfLevel = {\n     val whatLevelSt = parseSt(json, fieldName)\n     NotfLevel.fromSt_apiV0(whatLevelSt) getOrElse {"
    },
    {
      "sha": "11fbdecfe35cc6252487254c24e2e69441497297",
      "filename": "appsv/server/debiki/Nashorn.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FNashorn.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -496,6 +496,7 @@ class Nashorn(\n \n       // Sync w languages in /translations/, the admin UI language selector, and the Makefile. [5JUKQR2]\n       addTranslation(\"en_US\")\n+      addTranslation(\"zh_CN\")  // Chinese, PRC\n       addTranslation(\"es_CL\")  // Spanish, Chile\n       addTranslation(\"de_DE\")  // German\n       addTranslation(\"he_IL\")  // Hebrew"
    },
    {
      "sha": "bf4359bfaae0c926a96bf9171f669cae52951c21",
      "filename": "appsv/server/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FRateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FRateLimits.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -41,12 +41,15 @@ object MaxLimits {\n     maxPermsPerSite = 1000, // was: 200\n     maxCustomGroups = 21,\n     maxGroupsMemberCanJoin = 25,\n-    maxMembersPerCustomGroup = 1000)\n+    maxMembersPerCustomGroup = 1000,\n+    )\n \n   // There are many other limits but they're hardcoded here and there ...\n   // COULD move them all to here. A nice first step, to later on making it\n   // possible to bump the restrictions, per site.\n \n+  // (Most of) these limits don't make much sense to scale with site size?\n+\n   /** Db constr:  dw1_emlot_sentto__c_len.  But users3.primary_email_addr is max 100 anyway */\n   val MaxEmailSendToAdrLen_200_unused: i32 = 200 - 2\n \n@@ -55,6 +58,12 @@ object MaxLimits {\n \n   /** Max 20 000, db constr:  emailsout_c_bodyhtml_len. */\n   val MaXEmailBodyLength_20k: i32 = 20000 - 2\n+\n+  // Let's start with at most 5 â€” need to make changes to the UI, to allow more,\n+  // or the forum topic list would get messed up (the avatars colulmn would/could\n+  // get too vide, [pack_avatars_closer]).\n+  val MaxAssigneesPerPost: i32 = 5\n+\n }\n \n "
    },
    {
      "sha": "e5d3d7313ba03e4a74a2354026f4b43374af59cd",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 72,
      "deletions": 22,
      "changes": 94,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FReactJson.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -109,7 +109,8 @@ case class PageToJsonResult(\n   version: CachedPageVersion,\n   pageTitleUnsafe: Option[String],\n   customHeadTags: FindHeadTagsResult,\n-  unapprovedPostAuthorIds: Set[UserId])\n+  unapprovedPostAuthorIds: Set[UserId],\n+  anonsByRealId: Map[PatId, Seq[Anonym]])\n \n case class FindHeadTagsResult(\n   includesTitleTag: Boolean,\n@@ -333,7 +334,11 @@ class JsonMaker(dao: SiteDao) {\n \n     val userIdsToLoad = mut.Set[UserId]()\n     userIdsToLoad ++= pageMemberIds\n-    userIdsToLoad ++= relevantPosts.map(_.createdById)  // or relevantApprovedPosts? [iz01]\n+    for (post <- relevantPosts) {  // or relevantApprovedPosts? [iz01]\n+      // Later: Don't incl any private members. [private_pats]\n+      post.addVisiblePatIdsTo(userIdsToLoad)\n+    }\n+\n \n     val numPostsExclTitle = numPosts - (if (pageParts.titlePost.isDefined) 1 else 0)\n \n@@ -368,6 +373,7 @@ class JsonMaker(dao: SiteDao) {\n           val pageQuery = activePagesPerCatQuery\n           COULD_OPTIMIZE // Remember cats, so can skip lookup below?  [2_many_cat_queries]\n           val catsWithTopics = makeForumPageCatsAndTopicsJson(catsCanSee, pageQuery)\n+          // Topic assignees not needed here? How it works elsewhere: [incl_assignees]\n           catsWithTopics.catsAndTopicsJson\n         }\n     }) getOrElse JsArray()\n@@ -392,9 +398,11 @@ class JsonMaker(dao: SiteDao) {\n                   limit = ForumController.NumTopicsToList)\n         RACE // got an 1 version old page stuff. So, now looking up by id *and version*,\n         // instead.\n-        val topics = topicsCanSee.pages\n+        val topics: Vec[PagePathAndMeta] = topicsCanSee.pages\n         val pageStuffById = dao.getPageStuffsByIdVersion(topics.map(_.idAndVersion))\n-        topics.foreach(_.meta.addUserIdsTo(userIdsToLoad))\n+\n+        pageStuffById.values.foreach(_.addVisiblePatIdsTo(userIdsToLoad))\n+\n         for (stuff <- pageStuffById.values; tag <- stuff.pageTags) {\n           tagTypeIdsToLoad.add(tag.tagTypeId)\n         }\n@@ -408,11 +416,18 @@ class JsonMaker(dao: SiteDao) {\n       posts.find(_.id == postId).map(_.nr)\n     }\n \n+    // Bit dupl code. [pats_by_id_json]\n     val usersById = transaction.loadParticipantsAsMap(userIdsToLoad)\n     val usersByIdJson = JsObject(usersById map { idAndUser =>\n-      idAndUser._1.toString -> JsPat(idAndUser._2, tagsAndBadges)\n+      idAndUser._1.toString -> JsPat(idAndUser._2, tagsAndBadges,\n+            // Let anonyms stay anonymous; don't show their true ids on public pages:\n+            // (So specify no user here, meaning, a stranger, no permissions.)\n+            toShowForPatId = None)\n     })\n \n+    val anons: Seq[Anonym] = usersById.values.collect({ case a: Anonym => a }).toSeq\n+    val anonsByRealId = anons.groupBy(_.anonForPatId)\n+\n     // These don't change often, can use the cache.\n     val tagTypes = dao.getTagTypes(tagTypeIdsToLoad.toSet)\n \n@@ -439,6 +454,9 @@ class JsonMaker(dao: SiteDao) {\n       \"pageLayout\" -> JsNumber(page.meta.layout.toInt),\n       \"comtOrder\" -> JsNum32OrNull(page.meta.comtOrder.map(_.toInt)),\n       //\"comtNesting\" -> later\n+      \"comtsStartHidden\" -> JsNum32OrNull(page.meta.comtsStartHidden.map(_.toInt)),\n+      \"comtsStartAnon\" -> JsNum32OrNull(page.meta.comtsStartAnon.map(_.toInt)),\n+      \"newAnonStatus\" -> JsNum32OrNull(page.meta.newAnonStatus.map(_.toInt)),\n       \"forumSearchBox\" -> JsNum32OrNull(page.meta.forumSearchBox),\n       \"forumMainView\" -> JsNum32OrNull(page.meta.forumMainView),\n       \"forumCatsTopics\" -> JsNum32OrNull(page.meta.forumCatsTopics),\n@@ -522,10 +540,12 @@ class JsonMaker(dao: SiteDao) {\n       renderParams = renderParams,\n       storeJsonHash = hashSha1Base64UrlSafe(reactStoreJsonString))\n \n+    COULD_OPTIMIZE // cache unapproved posts too?\n     val unapprovedPosts = posts.filter(!_.isSomeVersionApproved)\n     val unapprovedPostAuthorIds = unapprovedPosts.map(_.createdById).toSet\n \n-    PageToJsonResult(reactStoreJsonString, version, pageTitleUnsafe, headTags, unapprovedPostAuthorIds)\n+    PageToJsonResult(reactStoreJsonString, version, pageTitleUnsafe, headTags,\n+          unapprovedPostAuthorIds, anonsByRealId = anonsByRealId)\n   }\n \n \n@@ -824,8 +844,10 @@ class JsonMaker(dao: SiteDao) {\n \n   RENAME // this function (i.e. userDataJson) so it won't come as a\n   // surprise that it updates the watchbar! But to what? Or reanme the class too? Or break out?\n-  def userDataJson(pageRequest: PageRequest[_], unapprovedPostAuthorIds: Set[UserId])\n+  def userDataJson(pageRequest: PageRequest[_], unapprovedPostAuthorIds: Set[UserId],\n+        anonsByRealId: Map[PatId, Seq[Anonym]])\n         : Opt[MeAndStuff] = Some {\n+\n     require(pageRequest.dao == dao, \"TyE4GKVRY3\")\n     val requester = pageRequest.user getOrElse {\n       return None\n@@ -866,7 +888,7 @@ class JsonMaker(dao: SiteDao) {\n     dao.readOnlyTransaction { tx =>\n       requestersJsonImpl(pageRequest.sid, requester, pageRequest.pageId, watchbarWithTitles,\n             restrTopicsCatsLinks, permissions, permsOnSiteTooMany,\n-            unapprovedPostAuthorIds, myGroupsEveryoneLast, site, tx)\n+            unapprovedPostAuthorIds, anonsByRealId, myGroupsEveryoneLast, site, tx)\n     }\n   }\n \n@@ -890,7 +912,9 @@ class JsonMaker(dao: SiteDao) {\n       requestersJsonImpl(request.sid, requester, anyPageId = None, watchbarWithTitles,\n             RestrTopicsCatsLinks(JsArray(), Nil, Nil, Nil, Set.empty),\n             permissions, permsOnSiteTooMany,\n-            unapprovedPostAuthorIds = Set.empty, myGroupsEveryoneLast, site, tx)\n+            unapprovedPostAuthorIds = Set.empty,\n+            anonsByRealId = Map.empty,\n+            myGroupsEveryoneLast, site, tx)\n     }\n   }\n \n@@ -899,7 +923,7 @@ class JsonMaker(dao: SiteDao) {\n         sid: SidStatus, requester: Participant, anyPageId: Option[PageId],\n         watchbar: WatchbarWithTitles, restrTopicsCatsLinks: RestrTopicsCatsLinks,\n         permissions: Seq[PermsOnPages], permsOnSiteTooMany: PermsOnSite,\n-        unapprovedPostAuthorIds: Set[UserId],\n+        unapprovedPostAuthorIds: Set[UserId], anonsByRealId: Map[PatId, Seq[Anonym]],\n         myGroupsEveryoneLast: Seq[Group], site: Opt[Site], tx: SiteTransaction)\n         : MeAndStuff = {\n \n@@ -990,6 +1014,10 @@ class JsonMaker(dao: SiteDao) {\n     val anyReadingProgress = anyPageId.flatMap(tx.loadReadProgress(requester.id, _))\n     val anyReadingProgressJson = anyReadingProgress.map(makeReadingProgressJson).getOrElse(JsNull)\n \n+    // later:  if (requester.isAdmin *and* wants to see who the anonyms are) ... hmm ..\n+    val ownAnons: Seq[Anonym] =\n+          anonsByRealId.getOrElse(requester.id, Nil)\n+\n     val ownDataByPageId = anyPageId match {\n       case None => Json.obj()\n       case Some(pageId) =>\n@@ -1005,6 +1033,9 @@ class JsonMaker(dao: SiteDao) {\n             // later: \"flags\" -> JsArray(...) [7KW20WY1]\n             \"unapprovedPosts\" -> unapprovedPosts,\n             \"unapprovedPostAuthors\" -> unapprovedAuthors,  // should remove [5WKW219] + search for elsewhere\n+            \"knownAnons\" -> JsArray(ownAnons map JsKnownAnonym),\n+            // later: JsArray(real-anon-authors.map(a => JsUser(a))), if is staff.\n+            \"patsBehindAnons\" -> JsArray(),\n             \"postNrsAutoReadLongAgo\" -> JsArray(Nil),      // should remove\n             \"postNrsAutoReadNow\" -> JsArray(Nil),\n             \"marksByPostId\" -> JsObject(Nil)))\n@@ -1151,11 +1182,12 @@ class JsonMaker(dao: SiteDao) {\n                   limit = ForumController.NumTopicsToList, inSubTree = Some(categoryId))\n         COULD_OPTIMIZE // reuse pageStuff in catsWithTopics.pageStuffById. [2_many_cat_queries]\n         val pageStuffById = dao.getPageStuffById(topicsInBaseCat.pageIds)\n+\n         (catsWithTopics.catsAndTopicsJson, topicsInBaseCat, pageStuffById, Nil)\n       }\n \n     val userIds = mut.Set[UserId]()\n-    pagesCanSee.pages.foreach(_.meta.addUserIdsTo(userIds))\n+    pageStuffById.values.foreach(_.addVisiblePatIdsTo(userIds))\n     val users = dao.getUsersAsSeq(userIds)\n \n     val tagTypeIdsNeeded = mut.Set[TagTypeId]()\n@@ -1379,37 +1411,39 @@ class JsonMaker(dao: SiteDao) {\n \n \n   def makeStorePatchForPostIds(postIds: Set[PostId], showHidden: Bo,\n-        inclUnapproved: Bo, maySquash: Bo, dao: SiteDao): JsObject = {\n+        inclUnapproved: Bo, maySquash: Bo, dao: SiteDao, reqerId: Opt[PatId] = None,\n+        ): JsObject = {\n     dieIf(Globals.isDevOrTest && dao != this.dao, \"TyE602MWJL43\") ; CLEAN_UP // remove dao param?\n     dao.readTx { tx =>\n       // This might render CommonMark, in a tx â€” slightly bad. [nashorn_in_tx]\n       makeStorePatchForPostIds(postIds, showHidden = showHidden,\n-            inclUnapproved = inclUnapproved, maySquash = maySquash, tx)\n+            inclUnapproved = inclUnapproved, maySquash = maySquash, tx, reqerId = reqerId)\n     }\n   }\n \n \n   private def makeStorePatchForPostIds(postIds: Set[PostId],\n           showHidden: Bo, inclUnapproved: Bo, maySquash: Bo,\n-          transaction: SiteTx): JsObject = {\n+          transaction: SiteTx, reqerId: Opt[PatId]): JsObject = {\n     val posts = transaction.loadPostsByUniqueId(postIds).values\n     val tagsAndBadges = transaction.loadPostTagsAndAuthorBadges(postIds)\n     val tagTypes = dao.getTagTypes(tagsAndBadges.tagTypeIds)\n     val pageIds = posts.map(_.pageId).toSet\n     val pageIdVersions = transaction.loadPageMetas(pageIds).map(_.idVersion)\n-    val authorIds = posts.map(_.createdById).toSet\n-    val authors = transaction.loadParticipants(authorIds)\n+    val patIds = MutHashSet[PatId]()\n+    posts.foreach(_.addVisiblePatIdsTo(patIds))\n+    val pats = transaction.loadParticipants(patIds)\n     makeStorePatch3(pageIdVersions, posts,\n           showHidden = showHidden, inclUnapproved = inclUnapproved,\n           maySquash = maySquash, tagsAndBadges, tagTypes,\n-          authors, appVersion = dao.globals.applicationVersion)(transaction)\n+          pats, reqerId = reqerId, appVersion = dao.globals.applicationVersion)(transaction)\n   }\n \n \n-  def makeStorePatchForPost(post: Post, author: Pat, showHidden: Bo): JsObject = {\n+  def makeStorePatchForPost(post: Post, showHidden: Bo, reqerId: PatId): JsObject = {\n     makeStorePatchForPostIds(\n           postIds = Set(post.id), showHidden = showHidden, inclUnapproved = true,\n-          maySquash = false, dao)\n+          maySquash = false, dao, reqerId = Some(reqerId))\n   }\n \n \n@@ -1424,9 +1458,9 @@ class JsonMaker(dao: SiteDao) {\n   private def makeStorePatch3(pageIdVersions: Iterable[PageIdVersion], posts: Iterable[Post],\n           showHidden: Bo, inclUnapproved: Bo, maySquash: Bo,\n           tagsAndBadges: TagsAndBadges, tagTypes: Seq[TagType],\n-          users: Iterable[Pat], appVersion: St)(\n+          pats: Iterable[Pat], reqerId: Opt[PatId] = None, appVersion: St)(\n           tx: SiteTx): JsObject = {\n-    require(posts.isEmpty || users.nonEmpty, \"Posts but no authors [EsE4YK7W2]\")\n+    require(posts.isEmpty || pats.nonEmpty, \"Posts but no authors [EsE4YK7W2]\")\n \n     val pageVersionsByPageIdJson =\n           JsObject(pageIdVersions.toSeq.map(p => p.pageId -> JsNumber(p.version)))\n@@ -1451,7 +1485,7 @@ class JsonMaker(dao: SiteDao) {\n     Json.obj(\n       \"appVersion\" -> appVersion,\n       \"pageVersionsByPageId\" -> pageVersionsByPageIdJson,\n-      \"usersBrief\" -> users.map(JsPat(_, tagsAndBadges)),\n+      \"usersBrief\" -> pats.map(JsPat(_, tagsAndBadges, toShowForPatId = reqerId)),\n       \"tagTypes\" -> tagTypes.map(JsTagType),\n       \"postsByPageId\" -> postsByPageIdJson)\n   }\n@@ -1931,6 +1965,7 @@ object JsonMaker {\n   def makeCategoryJson(categoryStuff: CategoryStuff, rootCategory: Cat,\n         topicsInTreeJson: Opt[Seq[JsObject]], includeDetails: Bo = false): JsObject = {\n     val category = categoryStuff.category\n+    COULD_OPTIMIZE; SAVE_BANDWIDTH // Exclude all zero (0)\n     var json = Json.obj(\n       \"id\" -> category.id,\n       \"parentId\" -> JsNumberOrNull(category.parentId),\n@@ -1943,6 +1978,10 @@ object JsonMaker {\n       \"newTopicTypes\" -> JsArray(category.newTopicTypes.map(t => JsNumber(t.toInt))),\n       \"comtOrder\" -> JsNum32OrNull(category.comtOrder.map(_.toInt)),\n       \"comtNesting\" -> JsNum32OrNull(category.comtNesting),\n+      \"comtsStartHidden\" -> JsNum32OrNull(category.comtsStartHidden.map(_.toInt)),\n+      \"comtsStartAnon\" -> JsNum32OrNull(category.comtsStartAnon.map(_.toInt)),\n+      \"opStartsAnon\" -> JsNum32OrNull(category.opStartsAnon.map(_.toInt)),\n+      \"newAnonStatus\" -> JsNum32OrNull(category.newAnonStatus.map(_.toInt)),\n       // For now, this cannot be configured in any more detail. [do_it_on_off]\n       \"doItVotesPopFirst\" -> JsBoolOrNull(category.doVoteStyle.map(_ => true)),\n       \"unlistCategory\" -> JsBoolean(category.unlistCategory),\n@@ -2056,6 +2095,8 @@ object JsonMaker {\n \n     val postTags: Seq[Tag] = tagsAndBadges.tags(post.id)\n \n+    COULD_OPTIMIZE; SAVE_BANDWIDTH // Exclude all zero (0) fields? E.g. 0 like votes.\n+    // And use an ArrayBuffer instead of a Vector.\n     var fields = Vector(\n       \"uniqueId\" -> JsNumber(post.id),\n       \"nr\" -> JsNumber(post.nr),\n@@ -2105,6 +2146,15 @@ object JsonMaker {\n     // For now. So can edit the title without extra loading the title post's source. [5S02MR4]\n     if (post.isTitle) fields :+= \"unsafeSource\" -> JsStringOrNull(unsafeSource)\n \n+    // Later: Don't incl any private members. [private_pats]\n+    if (post.authorIds.nonEmpty)\n+      fields :+= \"authorIds\" -> JsArray(post.authorIds.map(JsNumber(_)))\n+\n+    // Also check permissions â€” may one see who's assigned? [can_see_assigned]\n+    // And if one may see these people at all. [private_pats]\n+    if (post.assigneeIds.nonEmpty)\n+      fields :+= \"assigneeIds\" -> JsArray(post.assigneeIds.map(JsNumber(_)))\n+\n     JsObject(fields)\n   }\n "
    },
    {
      "sha": "0475d4f5e9538fd869ab5cbdc2fbbc87b4ac79d7",
      "filename": "appsv/server/debiki/dao/CategoriesDao.scala",
      "status": "modified",
      "additions": 30,
      "deletions": 1,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FCategoriesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FCategoriesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FCategoriesDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -190,7 +190,7 @@ case class CatsCanSee(\n   */\n case class CategoryToSave(\n   sectionPageId: PageId,\n-  parentId: CategoryId,   // RENAME to parentCategoryId ?\n+  parentId: CategoryId, // RENAME to parentCategoryId ?\n   name: String,\n   slug: String,\n   position: Int,\n@@ -199,6 +199,13 @@ case class CategoryToSave(\n   defaultSortOrder: Opt[PageOrderOffset],\n   comtOrder: Opt[PostSortOrder],\n   comtNesting: Opt[ComtNesting_later],\n+  // ---- These should be in  pat_node_multi_rels_t  instead (currently named perms_on_pages3)\n+  // Maybe comtOrder, comtNesting above too?\n+  comtsStartHidden: Opt[NeverAlways],\n+  comtsStartAnon: Opt[NeverAlways],\n+  opStartsAnon: Opt[NeverAlways],\n+  newAnonStatus: Opt[AnonStatus],\n+  // ---------------------------------\n   doVoteStyle: Opt[DoVoteStyle],\n   doVoteInTopicList: Opt[Bo],\n   shallBeDefaultCategory: Boolean,\n@@ -254,6 +261,10 @@ case class CategoryToSave(\n     defaultSortOrder = defaultSortOrder,\n     comtOrder = comtOrder,\n     comtNesting = comtNesting,\n+    comtsStartHidden = comtsStartHidden,\n+    comtsStartAnon = comtsStartAnon,\n+    opStartsAnon = opStartsAnon,\n+    newAnonStatus = newAnonStatus,\n     doVoteStyle = doVoteStyle,\n     doVoteInTopicList = doVoteInTopicList,\n     unlistCategory = unlistCategory,\n@@ -277,6 +288,10 @@ object CategoryToSave {\n           defaultSortOrder = cat.defaultSortOrder,\n           comtOrder = cat.comtOrder,\n           comtNesting = cat.comtNesting,\n+          comtsStartHidden = cat.comtsStartHidden,\n+          comtsStartAnon = cat.comtsStartAnon,\n+          opStartsAnon = cat.opStartsAnon,\n+          newAnonStatus = cat.newAnonStatus,\n           doVoteStyle = cat.doVoteStyle,\n           doVoteInTopicList = cat.doVoteInTopicList,\n           shallBeDefaultCategory = makeDefault,\n@@ -820,6 +835,10 @@ trait CategoriesDao {\n             defaultSortOrder = editsToDo.defaultSortOrder,\n             comtOrder = editsToDo.comtOrder,\n             comtNesting = editsToDo.comtNesting,\n+            comtsStartHidden = editsToDo.comtsStartHidden,\n+            comtsStartAnon = editsToDo.comtsStartAnon,\n+            opStartsAnon = editsToDo.opStartsAnon,\n+            newAnonStatus = editsToDo.newAnonStatus,\n             doVoteStyle = editsToDo.doVoteStyle,\n             doVoteInTopicList = editsToDo.doVoteInTopicList,\n             unlistCategory = editsToDo.unlistCategory,\n@@ -1048,6 +1067,16 @@ trait CategoriesDao {\n   def deleteUndelCategoryImpl(categoryId: CategoryId, delete: Boolean, who: Who)(\n         tx: SiteTx): Unit = {\n \n+    // What if one *is* admin, but has currently activated a non-admin pseudonym?\n+    // Then this error message (\"Not admin\") might be confusing.  [pseudonyms_later]\n+    // And if letting the pseudonym proceed, just because we know hen is actually\n+    // an admin â€” then, to others, it would look as if the category got deleted\n+    // by a non-admin, which could look like a security bug?  And/or could give away\n+    // the true identity of the pseudonym.\n+    // So, if is admin but non-admin pseudonym, should show a message like:\n+    // \"Not admin: The pseudonym you're using currently, is not and admin, and thus\n+    // doesn't have permission to do this. Switch back to your main account instead\n+    // (which is an admin), and try again.\"\n     throwForbiddenIf(!tx.isAdmin(who.id), \"EdEGEF239S\", \"Not admin\")\n \n     val categoryBefore = tx.loadCategory(categoryId) getOrElse throwNotFound("
    },
    {
      "sha": "870a31bcaded3ba41cecd2b9da8ecb99ad69bfa4",
      "filename": "appsv/server/debiki/dao/CreateSiteDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FCreateSiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FCreateSiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FCreateSiteDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -79,7 +79,8 @@ object CreateSiteDao {  RENAME // but to what. & move, but to where?\n       AllMembersId, \"all_members\", Some(\"All Members\"), createdAt = now, // , grantsTrustLevel = Some(TrustLevel.NewMember))\n       perms = PatPerms.create(IfBadDie,\n             maxUploadBytes = Some(1 * Mebibyte),\n-            allowedUplExts = Some(\"jpeg jpg png gif\")))\n+            allowedUplExts = Some(\"jpeg jpg png gif\"),\n+            canSeeOthersEmailAdrs = None))\n \n     val Basic = Group(\n       BasicMembersId, \"basic_members\", Some(\"Basic Members\"), createdAt = now) // , grantsTrustLevel = Some(TrustLevel.BasicMember))"
    },
    {
      "sha": "3bba4d7d88f9a5c1fd31d87a8ea6c4292082b471",
      "filename": "appsv/server/debiki/dao/FeedsDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FFeedsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FFeedsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FFeedsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -53,7 +53,7 @@ trait FeedsDao {\n     // So won't need to add complicated clear-cache code now.  (CACHHHEE)\n     if (anyRequester.exists(_.id != SysbotUserId)) {\n       self.context.rateLimiter.rateLimit(RateLimits.ExpensiveGetRequest, request)\n-      return loadAtomFeedXml(anyRequester, onlyEmbComments = onlyEmbeddedComments)\n+      return loadAtomFeedXml(request.reqrInf, onlyEmbComments = onlyEmbeddedComments)\n     }\n \n     // This'll be NoUserId or SysbotUserId, see above.\n@@ -67,20 +67,20 @@ trait FeedsDao {\n     val key = onlyEmbeddedComments ? commentsFeedKey(pptId) | siteFeedKey(pptId)\n \n     memCache.lookup[xml.Node](key, orCacheAndReturn = Some {\n-      loadAtomFeedXml(anyRequester, onlyEmbComments = onlyEmbeddedComments)\n+      loadAtomFeedXml(request.reqrInf, onlyEmbComments = onlyEmbeddedComments)\n     }) getOrDie \"TyE5KBR7JQ0\"\n   }\n \n \n-  def loadAtomFeedXml(anyRequester: Option[Participant], onlyEmbComments: Boolean)\n+  private def loadAtomFeedXml(reqrInf: ReqrInf, onlyEmbComments: Boolean)\n         : xml.Node = {\n     val LoadPostsResult(postsOneMaySee, pageStuffById) =\n-          loadPostsMaySeeByQuery(\n-                anyRequester, OrderBy.MostRecentFirst, limit = 25,\n-                inclUnapprovedPosts = false, inclTitles = false,\n+          loadPostsMaySeeByQuery(PostQuery.AllPosts(\n+                reqrInf, orderBy = OrderBy.MostRecentFirst, limit = 25,\n+                inclAnonPosts = true, // true authors not shown [list_anon_posts]\n+                inclUnapproved = false, inclTitles = false,\n                 onlyEmbComments = onlyEmbComments,\n-                inclUnlistedPagePosts = onlyEmbComments,\n-                writtenById = None)\n+                inclUnlistedPagePosts = onlyEmbComments))\n \n     if (postsOneMaySee.isEmpty)\n       throwNotFound(\"TyE0FEEDPOSTS\", \"No posts found, or they are private\")"
    },
    {
      "sha": "8cbc6560ee38547aef2909aa14485abdb798a368",
      "filename": "appsv/server/debiki/dao/ForumDao.scala",
      "status": "modified",
      "additions": 26,
      "deletions": 2,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -87,7 +87,7 @@ trait ForumDao {\n         siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.CreateForum,\n-        doerId = byWho.id,\n+        doerTrueId = byWho.trueId,\n         doneAt = tx.now.toJavaDate,\n         // Incl email, so will remember forever the created-by-email, even if the user\n         // changes hens email later.\n@@ -180,7 +180,7 @@ trait ForumDao {\n \n     val staffCategoryId = rootCategoryId + 1\n     val defaultCategoryId = rootCategoryId + 2\n-    val bySystem = Who(SystemUserId, byWho.browserIdData)\n+    val bySystem = Who(TrueId(SystemUserId), byWho.browserIdData)\n \n     // Create forum root category.\n     tx.insertCategoryMarkSectionPageStale(Category(\n@@ -196,6 +196,10 @@ trait ForumDao {\n       defaultSortOrder = None,\n       comtOrder = None,\n       comtNesting = None,\n+      comtsStartHidden = None,\n+      comtsStartAnon = None,\n+      opStartsAnon = None,\n+      newAnonStatus = None,\n       doVoteStyle = None,\n       doVoteInTopicList = None,\n       unlistCategory = false,\n@@ -219,6 +223,10 @@ trait ForumDao {\n         defaultSortOrder = None,\n         comtOrder = None,\n         comtNesting = None,\n+        comtsStartHidden = None,\n+        comtsStartAnon = None,\n+        opStartsAnon = None,\n+        newAnonStatus = None,\n         doVoteStyle = None,\n         doVoteInTopicList = None,\n         unlistCategory = false,\n@@ -259,6 +267,10 @@ trait ForumDao {\n         defaultSortOrder = None,\n         comtOrder = None,\n         comtNesting = None,\n+        comtsStartHidden = None,\n+        comtsStartAnon = None,\n+        opStartsAnon = None,\n+        newAnonStatus = None,\n         doVoteStyle = None,\n         doVoteInTopicList = None,\n         // Strangers may not list all topics, maybe blog owner wants to keep some of them private?\n@@ -316,6 +328,10 @@ trait ForumDao {\n         defaultSortOrder = None,\n         comtOrder = None,\n         comtNesting = None,\n+        comtsStartHidden = None,\n+        comtsStartAnon = None,\n+        opStartsAnon = None,\n+        newAnonStatus = None,\n         doVoteStyle = None,\n         doVoteInTopicList = None,\n         unlistCategory = false,\n@@ -348,6 +364,10 @@ trait ForumDao {\n           defaultSortOrder = None,\n           comtOrder = None,\n           comtNesting = None,\n+          comtsStartHidden = None,\n+          comtsStartAnon = None,\n+          opStartsAnon = None,\n+          newAnonStatus = None,\n           doVoteStyle = None,\n           doVoteInTopicList = None,\n           unlistCategory = false,\n@@ -379,6 +399,10 @@ trait ForumDao {\n               offset = None, period = TopTopicsPeriod.Year)),\n           comtOrder = None,\n           comtNesting = None,\n+          comtsStartHidden = None,\n+          comtsStartAnon = None,\n+          opStartsAnon = None,\n+          newAnonStatus = None,\n           doVoteStyle = Some(DoVoteStyle.Likes),\n           doVoteInTopicList = Some(true),\n           unlistCategory = false,"
    },
    {
      "sha": "1459e7018bb7a245440209faf03a5b18d0279017",
      "filename": "appsv/server/debiki/dao/MessagesDao.scala",
      "status": "modified",
      "additions": 31,
      "deletions": 9,
      "changes": 40,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FMessagesDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -43,16 +43,34 @@ trait MessagesDao {\n     if (toMemIds.contains(SystemUserId))\n       throwForbidden(\"EsE2WUY0\", \"Cannot send messages to the System user\")\n \n-    if (toMemIds.exists(_ <= MaxGuestId))\n-      throwForbidden(\"EsE6UPY2\", \"Cannot send messages to guests\")\n+    // Can actually make sense to send priv msgs to anonyms â€” why not? Why not talk privately\n+    // with someone who wrote something interesting, even if hen is anonymous?  On online\n+    // forums, you typically don't know who the people are anyway, even if you see their\n+    // online names.  [anon_priv_msgs]\n+    if (toMemIds.exists(_ <= MaxGuestOrAnonId))\n+      throwForbidden(\"EsE6UPY2\", \"Cannot send messages to guests or anonyms\")\n \n     val sentById = sentByWho.id\n-    if (sentById <= MaxGuestId)\n-      throwForbidden(\"EsE5JGKU9\", \"Guests cannot send messages\")\n-\n+    if (sentByWho.isAnon)  // [anon_priv_msgs]\n+      throwForbidden(\"TyE0ANONMSG\", s\"Anonymous private messages not yet implemented\")\n+\n+    if (sentByWho.isGuest)\n+      throwForbidden(\"EsE5JGKU9\", \"Guests cannot send private messages\")\n+\n+    dieIf(sentById <= MaxGuestOrAnonId, \"TyE5267JGKU9\",\n+          s\"Bad sentById: $sentById, it's <= $MaxGuestOrAnonId\")\n+\n+    // One cannot message oneself. However:\n+    // Sending anon messages to one's real user â€” yes can make sense. [anon_priv_msgs]\n+    // Let's say you're a group manager. You want to report something anonymously\n+    // to the other group managers. Then, if you couldn't message yourself (as one of\n+    // the others), you might need to list the other group managers, but exclude yourself\n+    //  â€” Then the others might guess that your anonym is actually you (when they see\n+    // that the anonym has messaged all managers except for one).\n+    // So, don't compare with trueId â€” it's fine for an anon to message hens true id.\n     if (toMemIds.contains(sentById))\n-      throwForbidden(\"EsE6GK0I2\", o\"\"\"Cannot send a message to yourself. You are: $sentById,\n-          sending to: ${ toMemIds.mkString(\", \") }\"\"\")\n+      throwForbidden(\"EsE6GK0I2\", o\"\"\"Cannot send a message to yourself. You are: ${\n+            sentByWho.id}, sending to: ${ toMemIds.mkString(\", \") }\"\"\")\n \n     throwForbiddenIf(toMemIds.exists(id => Group.EveryoneId <= id && id <= Group.FullMembersId),\n           \"TyEMSGMANY\", o\"\"\"Cannot direct-message groups Everyone, Basic and Full Members.\n@@ -102,7 +120,7 @@ trait MessagesDao {\n \n       // If this is a private topic, they'll get notified about all posts,\n       // by default, although no notf pref configured here. [PRIVCHATNOTFS]\n-      // Soome of toMemIds might be groups â€” then, the group members can see\n+      // Some of toMemIds might be groups â€” then, the group members can see\n       // the private topic, and get notified about replies.\n       (toMemIds + sentById) foreach { memId =>\n         tx.insertMessageMember(pagePath.pageId, memId, addedById = sentById)\n@@ -141,9 +159,13 @@ trait MessagesDao {\n       val senderAuthzCtx = getAuthzCtxOnPagesForPat(sender.user)\n       var watchbar: BareWatchbar = getOrCreateWatchbar(senderAuthzCtx)\n       watchbar = watchbar.addPage(pagePath.pageId, pageRole, hasSeenIt = true)\n+      // [pseudonyms_later] Should update the true user's watchbar, trueId.\n       saveWatchbar(sender.id, watchbar)\n       logger.debug(s\"s$siteId: Telling PubSubActor: ${\n             sender.nameHashId} created & starts watching page ${pagePath.pageId} [TyM50AKTG3]\")\n+      // Later, if anon private message: Send  trueId,  and announce\n+      // the precense of the anonym / pseudonym (but not the true user, if it's\n+      // anonymous!).  And send websocket messages to the true user.  [anon_priv_msgs]\n       pubSub.userWatchesPages(siteId, sentById, watchbar.watchedPageIds)\n     }\n \n@@ -152,7 +174,7 @@ trait MessagesDao {\n     // get lazy-added to their watchbar on creation. [lazy_watchbar]\n     for {\n       member: Member <- toMemsInclGroupMems\n-      // The sender might have messaged a group hen is in:\n+      // The sender might have messaged a group hen is in, so member might be == sender.\n       if member.id != sender.id\n       if !member.isGroup && !member.isBuiltIn\n     } {"
    },
    {
      "sha": "737820eb9e0998302422caea573a3e1856910bd3",
      "filename": "appsv/server/debiki/dao/PageStuffDao.scala",
      "status": "modified",
      "additions": 24,
      "deletions": 5,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPageStuffDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPageStuffDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPageStuffDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -24,6 +24,19 @@ import debiki._\n import scala.collection.immutable\n import scala.collection.mutable.ArrayBuffer\n \n+case class PatPostRelStuff[T <: PatNodeRelType](\n+  fromPatId: PatId, // or skip?\n+  toPost: Post,\n+  relType: PatNodeRel[T],\n+  //pageTitle: St,\n+  //pageMeta: St,\n+  //patsById: Map[PatId, Pat]\n+) {\n+  //def fromPat: Pat = patsById.getOrDie(patId, \"TyEPAPOREL0PAT\",\n+  //      s\"Pat missing: patsById($fromPatId)\")\n+  def pageId = toPost.pageId\n+}\n+\n \n /** Page stuff, e.g. title, body excerpt (for pinned topics), user ids.\n   */\n@@ -39,7 +52,9 @@ case class PageStuff(\n   bodyImageUrls: immutable.Seq[String],\n   pageTags: ImmSeq[Tag], // but not page author tags (badges)\n   popularRepliesImageUrls: immutable.Seq[String],\n+  //authorIds: Vec[...]  â€” later\n   authorUserId: UserId,  // RENAME to just authorId\n+  assigneeIds: Vec[MembId],\n   lastReplyerId: Option[UserId],\n   frequentPosterIds: Seq[UserId]) extends PageTitleRole {\n \n@@ -56,10 +71,13 @@ case class PageStuff(\n \n   def categoryId: Option[CategoryId] = pageMeta.categoryId\n \n-  def userIds: immutable.Seq[UserId] = {\n-    var ids = frequentPosterIds.toVector :+ authorUserId\n-    if (lastReplyerId.isDefined) ids :+= lastReplyerId.get\n-    ids\n+  def addVisiblePatIdsTo(set: MutSet[PatId]): U = {\n+    // Later, don't include [private_pats], once impl.\n+    set.add(authorUserId)   // or +=\n+    //ids ++= authorIds later, if many\n+    frequentPosterIds.foreach(set.add)   // or ++= ?\n+    lastReplyerId.foreach(set.add)\n+    assigneeIds.foreach(set.add)\n   }\n }\n \n@@ -147,7 +165,7 @@ trait PageStuffDao {\n     })\n \n     val popularRepliesByPageId: Map[PageId, immutable.Seq[Post]] =\n-      tx.loadPopularPostsByPage(pageIds, limitPerPage = 10, exclOrigPost = true)\n+      tx.loadPopularPostsByPageExclAggs(pageIds, limitPerPage = 10, exclOrigPost = true)\n \n     val tagsByPageId = tx.loadTagsForPages(pageIds)\n \n@@ -185,6 +203,7 @@ trait PageStuffDao {\n         pageTags = tagsByPageId.getOrElse(pageId, Nil),\n         popularRepliesImageUrls = popularImageUrls,\n         authorUserId = pageMeta.authorId,\n+        assigneeIds = anyBody.map(_.assigneeIds).getOrElse(Vec.empty),\n         lastReplyerId = pageMeta.lastApprovedReplyById,\n         frequentPosterIds = pageMeta.frequentPosterIds)\n "
    },
    {
      "sha": "fe0369d475eed0fc4ddb150124b523d84cbace56",
      "filename": "appsv/server/debiki/dao/PagesDao.scala",
      "status": "modified",
      "additions": 108,
      "deletions": 51,
      "changes": 159,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPagesDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -56,8 +56,10 @@ trait PagesDao {\n   self: SiteDao =>\n \n \n-  def loadPagesByUser(userId: UserId, isStaffOrSelf: Boolean, limit: Int): Seq[PagePathAndMeta] = {\n-    readOnlyTransaction(_.loadPagesByUser(userId, isStaffOrSelf = isStaffOrSelf, limit))\n+  def loadPagesByUser(userId: PatId, isStaffOrSelf: Bo, inclAnonPosts: Bo = false, limit: i32)\n+          : Seq[PagePathAndMeta] = {\n+    unimplIf(inclAnonPosts, \"inclAnonPosts [TyEANONUNIMPL01]\");  ANON_UNIMPL\n+    readTx(_.loadPagesByUser(userId, isStaffOrSelf = isStaffOrSelf, limit))\n   }\n \n   MOVE // loadMaySeePagesInCategory and listMaySeeTopicsInclPinned to here?  [move_list_pages]\n@@ -67,25 +69,31 @@ trait PagesDao {\n         anyFolder: Option[String], anySlug: Option[String], title: TitleSourceAndHtml,\n         bodyTextAndHtml: TextAndHtml, showId: Boolean, deleteDraftNr: Option[DraftNr], byWho: Who,\n         spamRelReqStuff: SpamRelReqStuff,\n+        doAsAnon: Opt[WhichAnon.NewAnon] = None, // make non-optional?\n         discussionIds: Set[AltPageId] = Set.empty, embeddingUrl: Option[String] = None,\n-        extId: Option[ExtId] = None): PagePathWithId = {\n+        extId: Option[ExtId] = None,\n+        ): PagePathWithId = {\n \n     createPage2(pageRole, pageStatus = pageStatus, anyCategoryId = anyCategoryId,\n           anyFolder = anyFolder, anySlug = anySlug, title = title,\n           bodyTextAndHtml = bodyTextAndHtml, showId = showId,\n           deleteDraftNr = deleteDraftNr, byWho = byWho,\n           spamRelReqStuff = spamRelReqStuff,\n+          doAsAnon = doAsAnon,\n           discussionIds = discussionIds, embeddingUrl = embeddingUrl,\n-          extId = extId).path\n+          extId = extId,\n+          ).path\n   }\n \n \n   def createPage2(pageRole: PageType, pageStatus: PageStatus, anyCategoryId: Option[CategoryId],\n         anyFolder: Option[String], anySlug: Option[String], title: TitleSourceAndHtml,\n         bodyTextAndHtml: TextAndHtml, showId: Boolean, deleteDraftNr: Option[DraftNr], byWho: Who,\n         spamRelReqStuff: SpamRelReqStuff,\n+        doAsAnon: Opt[WhichAnon.NewAnon] = None, // make non-optional?\n         discussionIds: Set[AltPageId] = Set.empty, embeddingUrl: Option[String] = None,\n-        extId: Option[ExtId] = None): CreatePageResult = {\n+        extId: Option[ExtId] = None,\n+        ): CreatePageResult = {\n \n     if (pageRole.isSection) {\n       // Should use e.g. ForumController.createForum() instead.\n@@ -128,6 +136,7 @@ trait PagesDao {\n                 pinWhere = None,\n                 byWho,\n                 Some(spamRelReqStuff),\n+                doAsAnon,\n                 discussionIds = discussionIds,\n                 embeddingUrl = embeddingUrl,\n                 extId = extId)(tx, staleStuff)\n@@ -145,6 +154,8 @@ trait PagesDao {\n \n \n   /** Returns (PagePath, body-post, any-review-task)\n+    *\n+    * @param doAsAnon â€” must be a new anonym, since anons are per page, and this page is new.\n     */\n   def createPageImpl(pageRole: PageType,\n       pageStatus: PageStatus,\n@@ -158,6 +169,7 @@ trait PagesDao {\n       pinWhere: Option[PinPageWhere] = None,\n       byWho: Who,\n       spamRelReqStuff: Option[SpamRelReqStuff],\n+      doAsAnon: Opt[WhichAnon.NewAnon] = None,\n       hidePageBody: Boolean = false,\n       layout: Option[PageLayout] = None,\n       bodyPostType: PostType = PostType.Normal,\n@@ -173,19 +185,20 @@ trait PagesDao {\n         (PagePathWithId, Post, Option[ReviewTask]) = {\n \n     val now = globals.now()\n-    val authorId = byWho.id\n-    val authorAndLevels = loadUserAndLevels(byWho, tx)\n-    val author = authorAndLevels.user\n+    val realAuthorId = byWho.id\n+    val realAuthorAndLevels = loadUserAndLevels(byWho, tx)\n+    // Currently is the real auhtor. But with [pseudonyms_later], then maybe not.\n+    val realAuthor = realAuthorAndLevels.user\n \n     val site = tx.loadSite() getOrDie \"TyE8MWNP247\"\n     val categoryPath = tx.loadCategoryPathRootLast(anyCategoryId, inclSelfFirst = true)\n-    val groupIds = tx.loadGroupIdsMemberIdFirst(author)\n+    val groupIds = tx.loadGroupIdsMemberIdFirst(realAuthor)\n     val permissions = tx.loadPermsOnPages()\n     //val authzCtx = ForumAuthzContext(Some(author), groupIds, permissions)  ?  [5FLK02]\n     val settings = loadWholeSiteSettings(tx)\n \n     dieOrThrowNoUnless(Authz.mayCreatePage(  // REFACTOR COULD pass a pageAuthzCtx instead [5FLK02]\n-      authorAndLevels, groupIds,\n+      realAuthorAndLevels, groupIds,\n       pageRole, bodyPostType, pinWhere, anySlug = anySlug, anyFolder = anyFolder,\n       inCategoriesRootLast = categoryPath,\n       permissions), \"EdE5JGK2W4\")\n@@ -205,12 +218,12 @@ trait PagesDao {\n     val (\n       reviewReasons: Seq[ReviewReason],\n       shallApprove: Boolean) =\n-        throwOrFindReviewNewPageReasons(authorAndLevels, pageRole, tx)\n+        throwOrFindReviewNewPageReasons(realAuthorAndLevels, pageRole, tx)\n \n     val approvedById =\n-      if (author.isStaff) {\n+      if (realAuthor.isStaff) {\n         dieIf(!shallApprove, \"EsE2UPU70\")\n-        Some(author.id)\n+        Some(realAuthor.id)\n       }\n       else if (shallApprove) Some(SystemUserId)\n       else None\n@@ -253,11 +266,31 @@ trait PagesDao {\n     val titleUniqueId = tx.nextPostId()\n     val bodyUniqueId = titleUniqueId + 1\n \n+    val authorMaybeAnon =\n+          if (doAsAnon.forall(!_.anonStatus.isAnon)) {\n+            realAuthor\n+          }\n+          else {\n+            // Dupl code. [mk_new_anon]\n+            val anonymId = tx.nextGuestId\n+            val anonym = Anonym(\n+                  id = anonymId,\n+                  createdAt = tx.now,\n+                  anonStatus = doAsAnon.getOrDie(\"TyE7MF26F\").anonStatus,\n+                  anonForPatId = realAuthorId,\n+                  anonOnPageId = pageId)\n+            // We'll insert the anonym before the page exists, but there's a\n+            // foreign key: pats_t.anon_on_page_id_st_c, so defer constraints:\n+            tx.deferConstraints()\n+            tx.insertAnonym(anonym)\n+            anonym\n+          }\n+\n     val titlePost = Post.createTitle(\n       uniqueId = titleUniqueId,\n       pageId = pageId,\n       createdAt = now.toJavaDate,\n-      createdById = authorId,\n+      createdById = authorMaybeAnon.id,\n       source = title.source,\n       htmlSanitized = title.safeHtml,\n       approvedById = approvedById)\n@@ -266,14 +299,14 @@ trait PagesDao {\n       uniqueId = bodyUniqueId,\n       pageId = pageId,\n       createdAt = now.toJavaDate,\n-      createdById = authorId,\n+      createdById = authorMaybeAnon.id,\n       source = body.source,\n       htmlSanitized = body.safeHtml,\n       postType = bodyPostType,\n       approvedById = approvedById)\n       .copy(\n         bodyHiddenAt = ifThenSome(hidePageBody, now.toJavaDate),\n-        bodyHiddenById = ifThenSome(hidePageBody, authorId),\n+        bodyHiddenById = ifThenSome(hidePageBody, authorMaybeAnon.id), \n         bodyHiddenReason = None) // add `hiddenReason` function parameter?\n \n     val uploadRefs = body.uploadRefs\n@@ -282,7 +315,10 @@ trait PagesDao {\n       dieIf(uploadRefs != uplRefs2, \"TyE7RTEGP04\", s\"uploadRefs: $uploadRefs, 2: $uplRefs2\")\n     }\n \n-    val pageMeta = PageMeta.forNewPage(pageId, pageRole, authorId,\n+    val pageMeta = PageMeta.forNewPage(\n+      pageId = pageId,\n+      pageRole,\n+      authorId = authorMaybeAnon.id,\n       extId = extId,\n       creationDati = now.toJavaDate,\n       deletedAt = if (createAsDeleted) Some(now) else None,\n@@ -310,14 +346,14 @@ trait PagesDao {\n         createdById = SystemUserId,\n         createdAt = now.toJavaDate,\n         createdAtRevNr = Some(bodyPost.currentRevisionNr),\n-        maybeBadUserId = authorId,\n+        maybeBadUserId = authorMaybeAnon.id,\n         pageId = Some(pageId),\n         postId = Some(bodyPost.id),\n         postNr = Some(bodyPost.nr)))\n \n     val anySpamCheckTask =\n       if (spamRelReqStuff.isEmpty || !globals.spamChecker.spamChecksEnabled) None\n-      else if (!SpamChecker.shallCheckSpamFor(authorAndLevels)) None\n+      else if (!SpamChecker.shallCheckSpamFor(realAuthorAndLevels)) None\n       else {\n         // The uri is now sth like /-/create-page. Change to the path to the page\n         // we're creating.\n@@ -335,12 +371,14 @@ trait PagesDao {\n               pageAvailableAt = When.fromDate(pageMeta.publishedAt getOrElse pageMeta.createdAt),\n               htmlToSpamCheck = body.safeHtml,\n               language = settings.languageCode)),\n-            who = byWho,\n+            reqrId = authorMaybeAnon.id,\n             requestStuff = spamStuffPageUri))\n       }\n \n     val stats = UserStats(\n-      authorId,\n+      // If is a pseudo/anonym, add stats to the pseudo/anon account only,\n+      // not to the true user â€” otherwise others might be able to guess who hen is.\n+      authorMaybeAnon.id,\n       lastSeenAt = now,\n       lastPostedAt = Some(now),\n       firstNewTopicAt = Some(now),\n@@ -355,9 +393,11 @@ trait PagesDao {\n \n     // By default, one follows all activity on a page one has created â€” unless this is some page\n     // that gets auto created by System. [EXCLSYS]\n-    if (author.id >= Participant.LowestNormalMemberId) {\n+    // Notfs need to get sent to the real author (not the anonym â€” it's just an\n+    // \"indirectin\" account).\n+    if (realAuthor.id >= Participant.LowestNormalMemberId) {\n       tx.upsertPageNotfPref(\n-          PageNotfPref(authorId, NotfLevel.WatchingAll, pageId = Some(pageId)))\n+          PageNotfPref(realAuthorId, NotfLevel.WatchingAll, pageId = Some(pageId)))\n     }\n \n     if (approvedById.isDefined) {\n@@ -367,11 +407,11 @@ trait PagesDao {\n       // Add links, and uncache linked pages â€” need to rerender them, with\n       // a backlink to this new page.\n       // Need not: staleStuff.addPageId(new-page-id) â€” page didn't exist before.\n-      saveDeleteLinks(bodyPost, body, authorId, tx, staleStuff, skipBugWarn = true)\n+      saveDeleteLinks(bodyPost, body, authorMaybeAnon.trueId2, tx, staleStuff, skipBugWarn = true)\n     }\n \n     uploadRefs foreach { hashPathSuffix =>\n-      tx.insertUploadedFileReference(bodyPost.id, hashPathSuffix, authorId)\n+      tx.insertUploadedFileReference(bodyPost.id, hashPathSuffix, authorMaybeAnon.id)\n     }\n \n     discussionIds.foreach(id => tx.insertAltPageId(\"diid:\" + id, realPageId = pageId))\n@@ -399,15 +439,16 @@ trait PagesDao {\n     if (!skipNotfsAndAuditLog) {\n       val notifications = notfGenerator(tx).generateForNewPost(\n             newPageDao(pagePath.pageId, tx), bodyPost,\n-            Some(body), anyNewModTask = anyReviewTask)\n+            Some(body), anyNewModTask = anyReviewTask,\n+            postAuthor = Some(authorMaybeAnon))\n \n       tx.saveDeleteNotifications(notifications)\n \n       insertAuditLogEntry(AuditLogEntry(\n             siteId = siteId,\n             id = AuditLogEntry.UnassignedId,\n             didWhat = AuditLogEntryType.NewPage,\n-            doerId = authorId,\n+            doerTrueId = authorMaybeAnon.trueId2,\n             doneAt = now.toJavaDate,\n             browserIdData = byWho.browserIdData,\n             pageId = Some(pageId),\n@@ -475,14 +516,16 @@ trait PagesDao {\n   }\n \n \n-  def ifAuthAcceptAnswer(pageId: PageId, postUniqueId: PostId, userId: UserId,\n+  def ifAuthAcceptAnswer(pageId: PageId, postUniqueId: PostId, reqerTrueId: TrueId,\n         browserIdData: BrowserIdData): Option[ju.Date] = {\n     val answeredAt = writeTx { (tx, staleStuff) =>\n-      val user = tx.loadTheParticipant(userId)\n+      val user = tx.loadTheParticipant(reqerTrueId.curId)\n       val oldMeta = tx.loadThePageMeta(pageId)\n       if (!oldMeta.pageType.canBeSolved)\n         throwBadReq(\"DwE4KGP2\", \"This page is not a question so no answer can be selected\")\n \n+      ANON_UNIMPL; BUG // This prevents anons from accepting answers to their own\n+      // questions? [anon_pages]\n       throwForbiddenIf(!user.isStaffOrCoreMember && user.id != oldMeta.authorId,\n             \"TyE8JGY3\", \"Only core members and the topic author can accept an answer\")\n \n@@ -516,7 +559,7 @@ trait PagesDao {\n             siteId = siteId,\n             id = AuditLogEntry.UnassignedId,\n             didWhat = AuditLogEntryType.PageAnswered,\n-            doerId = userId,\n+            doerTrueId = reqerTrueId,\n             doneAt = tx.now.toJavaDate,\n             browserIdData = browserIdData,\n             pageId = Some(pageId),\n@@ -550,10 +593,12 @@ trait PagesDao {\n   }\n \n \n-  def ifAuthUnacceptAnswer(pageId: PageId, userId: UserId, browserIdData: BrowserIdData): Unit = {\n+  def ifAuthUnacceptAnswer(pageId: PageId, reqerTrueId: TrueId,\n+          browserIdData: BrowserIdData): U = {\n     readWriteTransaction { tx =>\n-      val user = tx.loadTheParticipant(userId)\n+      val user = tx.loadTheParticipant(reqerTrueId.curId)\n       val oldMeta = tx.loadThePageMeta(pageId)\n+      ANON_UNIMPL; BUG // This prevents anons from un-accepting answers? [anon_pages]\n       throwForbiddenIf(!user.isStaffOrCoreMember && user.id != oldMeta.authorId,\n             \"TyE2GKUB4\", \"Only core members and the topic author can unaccept an answer\")\n \n@@ -568,7 +613,7 @@ trait PagesDao {\n             siteId = siteId,\n             id = AuditLogEntry.UnassignedId,\n             didWhat = AuditLogEntryType.PageUnanswered,\n-            doerId = userId,\n+            doerTrueId = reqerTrueId,\n             doneAt = tx.now.toJavaDate,\n             browserIdData = browserIdData,\n             pageId = Some(pageId),\n@@ -584,12 +629,12 @@ trait PagesDao {\n   }\n \n \n-  def ifAuthTogglePageClosed(pageId: PageId, userId: UserId, browserIdData: BrowserIdData)\n-        : Option[ju.Date] = {\n+  def ifAuthTogglePageClosed(pageId: PageId, reqr: ReqrId): Opt[ju.Date] = {\n     val now = globals.now()\n     val newClosedAt = readWriteTransaction { tx =>\n-      val user = tx.loadTheParticipant(userId)\n+      val user = tx.loadTheParticipant(reqr.id)\n       val oldMeta = tx.loadThePageMeta(pageId)\n+      ANON_UNIMPL // This prevents anons from closing their page? [anon_pages]\n       throwIfMayNotSeePage(oldMeta, Some(user))(tx)\n \n       throwBadRequestIf(oldMeta.isDeleted,\n@@ -616,9 +661,9 @@ trait PagesDao {\n             didWhat =\n                   if (newMeta.isClosed) AuditLogEntryType.PageClosed\n                   else AuditLogEntryType.PageReopened,\n-            doerId = userId,\n+            doerTrueId = reqr.trueId,\n             doneAt = tx.now.toJavaDate,\n-            browserIdData = browserIdData,\n+            browserIdData = reqr.browserIdData,\n             pageId = Some(pageId))\n \n       tx.updatePageMeta(newMeta, oldMeta = oldMeta, markSectionPageStale = true)\n@@ -632,29 +677,27 @@ trait PagesDao {\n   }\n \n \n-  def deletePagesIfAuth(pageIds: Seq[PageId], deleterId: UserId, browserIdData: BrowserIdData,\n-        undelete: Boolean): Unit = {\n+  def deletePagesIfAuth(pageIds: Seq[PageId], reqr: ReqrId, undelete: Bo): U = {\n     writeTx { (tx, staleStuff) =>\n       // SHOULD LATER: [4GWRQA28] If is sub community (= forum page), delete the root category too,\n       // so all topics in the sub community will get deleted.\n       // And remove the sub community from the watchbar's Communities section.\n       // (And if undeleting the sub community, undelete the root category too.)\n-      deletePagesImpl(pageIds, deleterId, browserIdData, undelete = undelete)(tx, staleStuff)\n+      deletePagesImpl(pageIds, reqr, undelete = undelete)(tx, staleStuff)\n     }\n     refreshPagesInMemCache(pageIds.toSet)\n   }\n \n \n-  def deletePagesImpl(pageIds: Seq[PageId], deleterId: UserId,\n-          browserIdData: BrowserIdData, undelete: Bo = false)(\n+  def deletePagesImpl(pageIds: Seq[PageId], reqr: ReqrId, undelete: Bo = false)(\n           tx: SiteTx, staleStuff: StaleStuff): U = {\n \n     BUG; SHOULD // delete notfs or mark deleted?  [notfs_bug]  [nice_notfs]\n     // But don't delete any review tasks â€” good if staff reviews, if a new\n     // member posts something trollish, people react, then hen deletes hens page.\n     // Later, if undeleting, then restore the notfs? [undel_posts]\n \n-    val deleter = tx.loadTheParticipant(deleterId)\n+    val deleter = tx.loadTheParticipant(reqr.id)\n \n     for {\n       pageId <- pageIds\n@@ -668,15 +711,17 @@ trait PagesDao {\n \n       // Ordinary members may only delete their own pages, before others have replied.\n       // Sync with client side. [who_del_pge]\n+      ANON_UNIMPL // This prevents anons from deleting their pages? [anon_pages]  (authorId\n+      // is the anon, reqr.id is the true id != the anon.)\n       if (!deleter.isStaff) {\n-        throwForbiddenIf(pageMeta.authorId != deleterId,\n+        throwForbiddenIf(pageMeta.authorId != reqr.id,\n                 \"TyEDELOTRSPG_\", \"May not delete other people's pages\")\n \n         // Shouldn't have been allowed to see sbd else's deleted page.\n-        val deletedOwn = pageMeta.deletedById.is(deleterId) &&\n-                pageMeta.authorId == deleterId\n+        val deletedOwn = pageMeta.deletedById.is(reqr.id) &&\n+                pageMeta.authorId == reqr.id\n         dieIf(undelete && !deletedOwn, \"TyEUNDELOTRS\",\n-              s\"s$siteId: User $deleterId may not undelete sbd else's page $pageId\")\n+              s\"s$siteId: User ${reqr.id} may not undelete sbd else's page $pageId\")\n \n         // When there are replies, the UX should send a request to delete the\n         // orig post only â€” but not the whole page. (Unless is staff, then can delete\n@@ -695,9 +740,9 @@ trait PagesDao {\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.DeletePage,\n-        doerId = deleterId,\n+        doerTrueId = reqr.trueId,\n         doneAt = tx.now.toJavaDate,\n-        browserIdData = browserIdData,\n+        browserIdData = reqr.browserIdData,\n         pageId = Some(pageId),\n         pageType = Some(pageMeta.pageType))\n \n@@ -766,7 +811,8 @@ trait PagesDao {\n \n \n   REFACTOR // Move to PostsDao? This fn creates a post, not a whole page operation.\n-  def addMetaMessage(doer: Participant, message: String, pageId: PageId, tx: SiteTransaction): Unit = {\n+  def addMetaMessage(doer: Participant, message: String, pageId: PageId,\n+                     tx: SiteTransaction, notifyMentioned: Bo = false): Post = {\n     // Some dupl code [3GTKYA02]\n     val page = newPageDao(pageId, tx)\n     val postId = tx.nextPostId()\n@@ -795,9 +841,20 @@ trait PagesDao {\n     dieIf(pageMeta.numPostsTotal > postNr + 1, \"EdE3PFK2W0\", o\"\"\"pageMeta.numPostsTotal\n         is ${pageMeta.numPostsTotal} but should be <= postNr + 1 = ${postNr + 1}\"\"\")\n \n+    // (Later: How handle [private_pats]?)\n     tx.insertPost(metaMessage)\n \n     SHOULD // send back json so the satus message gets shown, without reloading the page. [2PKRRSZ0]\n+\n+    if (notifyMentioned) {\n+      // For now. Later, somehow use  NotificationType.PostAssigneesChanged.\n+      notfGenerator(tx).generateForNewPost(\n+            page, metaMessage, sourceAndHtml = None,\n+            postAuthor = None, // Some(doer) â€” but `doer` might be from another tx?\n+            anyNewModTask = None)\n+    }\n+\n+    metaMessage\n   }\n \n "
    },
    {
      "sha": "ecb270b145b51f3779b866a1902f93a408cdea46",
      "filename": "appsv/server/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 458,
      "deletions": 147,
      "changes": 605,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FPostsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -67,7 +67,8 @@ trait PostsDao {\n \n   def insertReply(textAndHtml: TextAndHtml, pageId: PageId, replyToPostNrs: Set[PostNr],\n         postType: PostType, deleteDraftNr: Option[DraftNr],\n-        byWho: Who, spamRelReqStuff: SpamRelReqStuff)\n+        byWho: Who, spamRelReqStuff: SpamRelReqStuff,\n+        anonHow: Opt[WhichAnon] = None)\n         : InsertPostResult = {\n \n     val authorId = byWho.id\n@@ -91,15 +92,17 @@ trait PostsDao {\n     val (newPost, author, notifications, anyReviewTask) = writeTx { (tx, staleStuff) =>\n       deleteDraftNr.foreach(nr => tx.deleteDraft(byWho.id, nr))\n       insertReplyImpl(textAndHtml, pageId, replyToPostNrs, postType,\n-            byWho, spamRelReqStuff, now, authorId, tx, staleStuff)\n+            byWho, spamRelReqStuff, now, authorId, tx, staleStuff, anonHow)\n     }\n \n     refreshPageInMemCache(pageId)\n \n-    val storePatchJson = jsonMaker.makeStorePatchForPost(newPost, author, showHidden = true)\n+    val storePatchJson = jsonMaker.makeStorePatchForPost(\n+          newPost, showHidden = true, reqerId = byWho.id)\n \n     // (If reply not approved, this'll send mod task notfs to staff [306DRTL3])\n     pubSub.publish(StorePatchMessage(siteId, pageId, storePatchJson, notifications),\n+          // This can be an anonym's id â€” fine. (Right?)\n           byId = author.id)\n \n     InsertPostResult(storePatchJson, newPost, anyReviewTask)\n@@ -108,22 +111,53 @@ trait PostsDao {\n \n   def insertReplyImpl(textAndHtml: TextAndHtml, pageId: PageId, replyToPostNrs: Set[PostNr],\n         postType: PostType, byWho: Who, spamRelReqStuff: SpamRelReqStuff,\n-        now: When, authorId: UserId, tx: SiteTx, staleStuff: StaleStuff,\n+        now: When,\n+        // Rename authorId to what? realAuthorId?  or rename  author  to  authorMaybeAnon?\n+        authorId: UserId,\n+        tx: SiteTx, staleStuff: StaleStuff,\n+        doAsAnon: Opt[WhichAnon] = None,\n         skipNotfsAndAuditLog: Boolean = false)\n         : (Post, Participant, Notifications, Option[ReviewTask]) = {\n \n     require(textAndHtml.safeHtml.trim.nonEmpty, \"TyE25JP5L2\")\n \n-    val authorAndLevels = loadUserAndLevels(byWho, tx)\n+    val realAuthorAndLevels = loadUserAndLevels(byWho, tx)\n     val page = newPageDao(pageId, tx)\n     val replyToPosts = page.parts.getPostsAllOrError(replyToPostNrs) getOrIfBad  { missingPostNr =>\n       throwNotFound(s\"Post nr $missingPostNr not found\", \"EdE4JK2RJ\")\n     }\n \n-    val author = authorAndLevels.user\n-    val authorAndGroupIds = tx.loadGroupIdsMemberIdFirst(author)\n+    // Might be a [pseudonyms_later] though, if ever implemented.\n+    val realAuthor = realAuthorAndLevels.user\n+    val realAuthorAndGroupIds = tx.loadGroupIdsMemberIdFirst(realAuthor)\n+\n+    // Dupl code. [get_anon]\n+    // Hmm, rename to  otherAuthor,  and None by default.  And set  createdById\n+    // to the real account, always,  and  author_id_c  to any anonym's id.   [mk_new_anon]\n+    val authorMaybeAnon: Pat =\n+          if (doAsAnon.isEmpty) {\n+            realAuthor\n+          }\n+          else doAsAnon.get match {\n+            case WhichAnon.SameAsBefore(anonId) =>\n+              tx.loadTheParticipant(anonId).asAnonOrThrow\n+            case WhichAnon.NewAnon(anonStatus) =>\n+              // Dupl code. [mk_new_anon]\n+              val anonymId = tx.nextGuestId\n+              val anonym = Anonym(\n+                    id = anonymId,\n+                    createdAt = tx.now,\n+                    anonStatus = anonStatus,\n+                    anonForPatId = realAuthor.id,\n+                    anonOnPageId = pageId)\n+              // We'll insert the anonym before the page exists, but there's a\n+              // foreign key: pats_t.anon_on_page_id_st_c, so defer constraints:\n+              tx.deferConstraints()\n+              tx.insertAnonym(anonym)\n+              anonym\n+          }\n \n-    dieOrThrowNoUnless(Authz.mayPostReply(authorAndLevels, authorAndGroupIds,\n+    dieOrThrowNoUnless(Authz.mayPostReply(realAuthorAndLevels, realAuthorAndGroupIds,\n       postType, page.meta, replyToPosts, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n       tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n       tx.loadPermsOnPages()), \"EdEMAY0RE\")\n@@ -137,7 +171,7 @@ trait PostsDao {\n     val uniqueId = tx.nextPostId()\n     val postNr = page.parts.highestReplyNr.map(_ + 1).map(max(FirstReplyNr, _)) getOrElse FirstReplyNr\n     val commonAncestorNr = page.parts.findCommonAncestorNr(replyToPostNrs.toSeq)\n-    val anyParent =\n+    val anyParent: Opt[Post] =\n       if (commonAncestorNr == PageParts.NoNr) {\n         // Flat chat comments might not reply to anyone in particular.\n         // On embedded comments pages, there's no Original Post, so top level comments\n@@ -167,12 +201,12 @@ trait PostsDao {\n     // then in a corrupt import file the posts on a page might form cycles. [ck_po_ckl])\n \n     val (reviewReasons: Seq[ReviewReason], shallApprove) =\n-      throwOrFindNewPostReviewReasons(page.meta, authorAndLevels, tx)\n+          throwOrFindNewPostReviewReasons(page.meta, realAuthorAndLevels, tx)\n \n     val approverId =\n-      if (author.isStaff) {\n+      if (realAuthor.isStaff) {\n         dieIf(!shallApprove, \"EsE5903\")\n-        Some(author.id)\n+        Some(realAuthor.id)\n       }\n       else if (shallApprove) Some(SystemUserId)\n       else None\n@@ -185,7 +219,7 @@ trait PostsDao {\n       multireplyPostNrs = (replyToPostNrs.size > 1) ? replyToPostNrs | Set.empty,\n       postType = postType,\n       createdAt = now.toJavaDate,\n-      createdById = authorId,\n+      createdById = authorMaybeAnon.id,\n       source = textAndHtml.text,\n       htmlSanitized = textAndHtml.safeHtml,\n       approvedById = approverId)\n@@ -195,15 +229,15 @@ trait PostsDao {\n     val newFrequentPosterIds: Seq[UserId] =\n       if (shallApprove)\n         PageParts.findFrequentPosters(page.parts.allPosts, // skip newPost, since we ignore ...\n-          ignoreIds = Set(page.meta.authorId, authorId))   // ... the author here anyway [3296KGP]\n+          ignoreIds = Set(page.meta.authorId, authorMaybeAnon.id))   // ... the author here anyway [3296KGP]\n       else\n         page.meta.frequentPosterIds\n \n     val oldMeta = page.meta\n     val newMeta = oldMeta.copy(\n       bumpedAt = shallBumpPage ? Option(now.toJavaDate) | oldMeta.bumpedAt,\n       lastApprovedReplyAt = shallApprove ? Option(now.toJavaDate) | oldMeta.lastApprovedReplyAt,\n-      lastApprovedReplyById = shallApprove ? Option(authorId) | oldMeta.lastApprovedReplyById,\n+      lastApprovedReplyById = shallApprove ? Option(authorMaybeAnon.id) | oldMeta.lastApprovedReplyById,\n       frequentPosterIds = newFrequentPosterIds,\n       numRepliesVisible = page.parts.numRepliesVisible + (shallApprove ? 1 | 0),\n       numRepliesTotal = page.parts.numRepliesTotal + 1,\n@@ -220,11 +254,16 @@ trait PostsDao {\n       dieIf(uploadRefs != uplRefs2, \"TyE503SKH5\", s\"uploadRefs: $uploadRefs, 2: $uplRefs2\")\n     }\n \n+    val anyParentOrigAuthor: Opt[Pat] = anyParent.map(parentPost =>\n+                                          tx.loadTheParticipant(parentPost.createdById))\n+\n     lazy val auditLogEntry = AuditLogEntry(\n       siteId = siteId,\n       id = AuditLogEntry.UnassignedId,\n       didWhat = AuditLogEntryType.NewReply,\n-      doerId = authorId,\n+      doerTrueId = authorMaybeAnon.trueId2,\n+      // And add:\n+      // doer_false_id = ...\n       doneAt = now.toJavaDate,\n       browserIdData = byWho.browserIdData,\n       pageId = Some(pageId),\n@@ -236,7 +275,7 @@ trait PostsDao {\n       targetPageId = anyParent.map(_.pageId),\n       targetUniquePostId = anyParent.map(_.id),\n       targetPostNr = anyParent.map(_.nr),\n-      targetUserId = anyParent.map(_.createdById))\n+      targetPatTrueId = anyParentOrigAuthor.map(_.trueId2))\n \n     val anyReviewTask = if (reviewReasons.isEmpty) None\n     else Some(ReviewTask(\n@@ -245,13 +284,13 @@ trait PostsDao {\n       createdById = SystemUserId,\n       createdAt = now.toJavaDate,\n       createdAtRevNr = Some(newPost.currentRevisionNr),\n-      maybeBadUserId = authorId,\n+      maybeBadUserId = authorMaybeAnon.id,\n       postId = Some(newPost.id),\n       postNr = Some(newPost.nr)))\n \n     val anySpamCheckTask =\n       if (!globals.spamChecker.spamChecksEnabled) None\n-      else if (!SpamChecker.shallCheckSpamFor(authorAndLevels)) None\n+      else if (!SpamChecker.shallCheckSpamFor(realAuthorAndLevels)) None\n       else Some(\n         SpamCheckTask(\n           createdAt = globals.now(),\n@@ -265,11 +304,11 @@ trait PostsDao {\n             pageAvailableAt = When.fromDate(newMeta.publishedAt getOrElse newMeta.createdAt),\n             htmlToSpamCheck = textAndHtml.safeHtml,\n             language = settings.languageCode)),\n-          who = byWho,\n+          reqrId = authorMaybeAnon.id,\n           requestStuff = spamRelReqStuff))\n \n     val stats = UserStats(\n-      authorId,\n+      authorMaybeAnon.id,\n       lastSeenAt = now,\n       lastPostedAt = Some(now),\n       firstDiscourseReplyAt = Some(now),\n@@ -291,10 +330,10 @@ trait PostsDao {\n       updatePagePopularity(pagePartsInclNewPost, tx)\n \n       staleStuff.addPageId(pageId)\n-      saveDeleteLinks(newPost, textAndHtml, authorId, tx, staleStuff)\n+      saveDeleteLinks(newPost, textAndHtml, authorMaybeAnon.trueId2, tx, staleStuff)\n     }\n     uploadRefs foreach { uploadRef =>\n-      tx.insertUploadedFileReference(newPost.id, uploadRef, authorId)\n+      tx.insertUploadedFileReference(newPost.id, uploadRef, addedById = authorMaybeAnon.id)\n     }\n     if (!skipNotfsAndAuditLog) {\n       insertAuditLogEntry(auditLogEntry, tx)\n@@ -307,14 +346,19 @@ trait PostsDao {\n     // on the Moderation page too.\n     // Test:  modn-from-disc-page-review-after  TyTE2E603RKG4\n     replyToPosts foreach { replyToPost =>\n-      maybeReviewAcceptPostByInteracting(replyToPost, moderator = author,\n+      RENAME // moderator to maybeMod ?\n+      // Use authorMaybeAnon, so won't accidentally reveal one's true id,\n+      // by approving exactly at the same time as replying. (Then, if is anon,\n+      // the replied-to post won't get approved by replying.)\n+      maybeReviewAcceptPostByInteracting(replyToPost, moderator = authorMaybeAnon,\n             ReviewDecision.InteractReply)(tx, staleStuff)\n     }\n \n     val notifications =\n       if (skipNotfsAndAuditLog) Notifications.None\n       else notfGenerator(tx).generateForNewPost(\n-            page, newPost, Some(textAndHtml), anyNewModTask = anyReviewTask)\n+            page, newPost, Some(textAndHtml), postAuthor = Some(authorMaybeAnon),\n+            anyNewModTask = anyReviewTask)\n     tx.saveDeleteNotifications(notifications)\n \n     // Could save the poster's topics-replied-to notf pref as  [interact_notf_pref]\n@@ -327,15 +371,16 @@ trait PostsDao {\n     val ownPageNotfPrefs = tx.loadNotfPrefsForMemberAboutPage(pageId, authorAndGroupIds)\n     val interactedNotfPrefs = tx.loadNotfPrefsAboutPagesInteractedWith(authorAndGroupIds)\n     ... derive prefs, looking at own and groups ...\n-    val oldPostsByAuthor = page.parts.postByAuthorId(authorId)\n+    val oldPostsByAuthor = page.parts.postByAuthorId(author.id)\n+          where:  postByAuthorId(authorId)  was:  allPosts.filter(_.createdById == authorId)\n     if (oldPostsByAuthor.isEmpty) {\n       savePageNotfPrefIfAuZ(PageNotfPref(\n             peopleId = authorId,\n             NotfLevel.WatchingAll,\n             pageId = Some(pageId)), byWho = Who.System)\n     } */\n \n-    (newPost, author, notifications, anyReviewTask)\n+    (newPost, authorMaybeAnon, notifications, anyReviewTask)\n   }\n \n \n@@ -355,6 +400,10 @@ trait PostsDao {\n     if (author.isStaff)\n       return (Nil, true)\n \n+    // When posting anonymously, one's real account (not the anon account) is used\n+    // to find out if one's anon posts need to get reviewed.\n+    dieIf(author.user.isAnon, \"TyE7MW40GM\")\n+\n     // Don't review direct messages â€” then all staff would see them. Instead, only non-threat\n     // users with level >= Basic may post private messages to non-staff people.\n     if (pageMeta.map(_.pageType).contains(PageType.FormalMessage))\n@@ -628,7 +677,8 @@ trait PostsDao {\n \n     refreshPageInMemCache(pageId)\n \n-    val storePatchJson = jsonMaker.makeStorePatchForPost(post, author, showHidden = true)\n+    val storePatchJson = jsonMaker.makeStorePatchForPost(\n+          post, showHidden = true, reqerId = byWho.id)\n     pubSub.publish(StorePatchMessage(siteId, pageId, storePatchJson, notifications),\n       byId = author.id)\n \n@@ -643,9 +693,13 @@ trait PostsDao {\n \n     require(textAndHtml.safeHtml.trim.nonEmpty, \"TyE592MWP2\")\n \n+    // Chat messages currently cannot be anonymous. [anon_chats]\n     // Note: Farily similar to insertReply() a bit above. [4UYKF21]\n-    val authorId = who.id\n     val authorAndLevels = loadUserAndLevels(who, tx)\n+    val author: Pat = authorAndLevels.user\n+\n+    // This'd be a bug? [anon_chats]\n+    throwForbiddenIf(author.isAnon, \"TyE5982sKTYNJ4\", \"Anons cannot post chat messages\")\n \n     val settings = loadWholeSiteSettings(tx)\n \n@@ -654,9 +708,6 @@ trait PostsDao {\n     if (!page.pageType.isChat)\n       throwForbidden(\"EsE6JU04\", s\"Page '${page.id}' is not a chat page\")\n \n-    // This is better than some database foreign key error.\n-    tx.loadParticipant(authorId) getOrElse throwNotFound(\"EsE2YG8\", \"Bad user\")\n-\n     val newPost = Post.create(\n       uniqueId = uniqueId,\n       pageId = page.id,\n@@ -665,7 +716,7 @@ trait PostsDao {\n       multireplyPostNrs = Set.empty,\n       postType = PostType.ChatMessage,\n       createdAt = tx.now.toJavaDate,\n-      createdById = authorId,\n+      createdById = author.id,\n       source = textAndHtml.text,\n       htmlSanitized = textAndHtml.safeHtml,\n       // Chat messages are currently auto approved. [7YKU24]\n@@ -674,7 +725,7 @@ trait PostsDao {\n     // COULD find the most recent posters in the last 100 messages only, because is chat.\n     val newFrequentPosterIds: Seq[UserId] =\n       PageParts.findFrequentPosters(page.parts.allPosts,  // skip newPost since we ignore ...\n-        ignoreIds = Set(page.meta.authorId, authorId))    // ...the author here anyway [3296KGP]\n+        ignoreIds = Set(page.meta.authorId, author.id))    // ...the author here anyway [3296KGP]\n \n     val oldMeta = page.meta\n     val newMeta = oldMeta.copy(\n@@ -685,7 +736,7 @@ trait PostsDao {\n       numPostsTotal = oldMeta.numPostsTotal + 1,\n       //numOrigPostRepliesVisible <â€” leave as is â€” chat messages aren't orig post replies.\n       lastApprovedReplyAt = Some(tx.now.toJavaDate),\n-      lastApprovedReplyById = Some(authorId),\n+      lastApprovedReplyById = Some(author.id),\n       frequentPosterIds = newFrequentPosterIds,\n       version = oldMeta.version + 1)\n \n@@ -713,7 +764,7 @@ trait PostsDao {\n             pageAvailableAt = When.fromDate(newMeta.publishedAt getOrElse newMeta.createdAt),\n             htmlToSpamCheck = textAndHtml.safeHtml,\n             language = settings.languageCode)),\n-          who = who,\n+          reqrId = author.id,\n           requestStuff = spamRelReqStuff))\n \n     val anyModTask =\n@@ -724,29 +775,30 @@ trait PostsDao {\n                 createdById = SystemUserId,\n                 createdAt = tx.now.toJavaDate,\n                 createdAtRevNr = Some(newPost.currentRevisionNr),\n-                maybeBadUserId = authorId,\n+                maybeBadUserId = author.id,\n                 postId = Some(newPost.id),\n                 postNr = Some(newPost.nr)))\n \n     val auditLogEntry = AuditLogEntry(\n       siteId = siteId,\n       id = AuditLogEntry.UnassignedId,\n       didWhat = AuditLogEntryType.NewChatMessage,\n-      doerId = authorId,\n+      doerTrueId = author.trueId2,\n       doneAt = tx.now.toJavaDate,\n       browserIdData = who.browserIdData,\n       pageId = Some(page.id),\n       uniquePostId = Some(newPost.id),\n       postNr = Some(newPost.nr),\n       // The chat is flat, one doesn't choose anyone to reply to â€” but it'd be nice\n       // to know if someone was *mentioned*?  [events_mentions]\n+      // Later: [threaded_chat]?\n       targetPageId = None,  // or se to page.id?\n       targetUniquePostId = None,\n       targetPostNr = None,\n-      targetUserId = None)\n+      targetPatTrueId = None)\n \n     val userStats = UserStats(\n-      authorId,\n+      author.id,\n       lastSeenAt = tx.now,\n       lastPostedAt = Some(tx.now),\n       firstChatMessageAt = Some(tx.now),\n@@ -758,11 +810,12 @@ trait PostsDao {\n     tx.updatePageMeta(newMeta, oldMeta = oldMeta, markSectionPageStale = true)\n     updatePagePopularity(page.parts, tx)\n     uploadRefs foreach { uploadRef =>\n-      tx.insertUploadedFileReference(newPost.id, uploadRef, authorId)\n+      AUDIT_LOG // uploaded files? (And elsewhere too then)\n+      tx.insertUploadedFileReference(newPost.id, uploadRef, addedById = author.id)\n     }\n \n     staleStuff.addPageId(page.id)\n-    saveDeleteLinks(newPost, textAndHtml, authorId, tx, staleStuff)\n+    saveDeleteLinks(newPost, textAndHtml, author.trueId2, tx, staleStuff)\n \n     anySpamCheckTask.foreach(tx.insertSpamCheckTask)\n     anyModTask.foreach(tx.upsertReviewTask)\n@@ -774,7 +827,8 @@ trait PostsDao {\n \n     // If anyModTask: TyTIT50267MT\n     val notfs = notfGenerator(tx).generateForNewPost(\n-          page, newPost, sourceAndHtml = Some(textAndHtml), anyNewModTask = anyModTask)\n+          page, newPost, postAuthor = Some(author), sourceAndHtml = Some(textAndHtml),\n+          anyNewModTask = anyModTask)\n     tx.saveDeleteNotifications(notfs)\n \n     (newPost, notfs)\n@@ -791,14 +845,17 @@ trait PostsDao {\n         : (Post, Notifications) = {\n \n     // Note: Farily similar to editPostIfAuth() just below. [2GLK572]\n-    val authorId = byWho.id\n     val authorAndLevels = loadUserAndLevels(byWho, tx)\n+    val author = authorAndLevels.user\n+\n+    // This'd be a bug? [anon_chats]\n+    throwForbiddenIf(author.isAnon, \"TyE5982sKTYNJ5\", \"Anons cannot post chat messages\")\n \n     require(textAndHtml.safeHtml.trim.nonEmpty, \"TyE8FPZE2P\")\n     require(lastPost.tyype == PostType.ChatMessage, o\"\"\"Post id ${lastPost.id}\n           is not a chat message, it is: ${lastPost.tyype} [TyE6YUW28]\"\"\")\n \n-    require(lastPost.currentRevisionById == authorId, \"EsE5JKU0\")\n+    require(lastPost.currentRevisionById == author.id, \"EsE5JKU0\")\n     require(lastPost.currentRevSourcePatch.isEmpty, \"EsE7YGKU2\")\n     require(lastPost.currentRevisionNr == FirstRevisionNr, \"EsE2FWY2\")\n     require(lastPost.isCurrentVersionApproved, \"EsE4GK7Y2\")\n@@ -833,7 +890,7 @@ trait PostsDao {\n       // Leave approvedById = SystemUserId and approvedRevisionNr = FirstRevisionNr unchanged.\n       currentRevLastEditedAt = Some(tx.now.toJavaDate),\n       lastApprovedEditAt = Some(tx.now.toJavaDate),\n-      lastApprovedEditById = Some(authorId))\n+      lastApprovedEditById = Some(author.id))\n \n     // For now, don't generate any ModTask here.  [03RMDl6J]\n     // (But we do, when starting a new chat message.)\n@@ -854,23 +911,23 @@ trait PostsDao {\n             pageAvailableAt = When.fromDate(pageMeta.publishedAt getOrElse pageMeta.createdAt),\n             htmlToSpamCheck = combinedTextAndHtml.safeHtml,\n             language = settings.languageCode)),\n-          who = byWho,\n+          reqrId = author.id,\n           requestStuff = spamRelReqStuff))\n \n     tx.updatePost(editedPost)\n     tx.indexPostsSoon(editedPost)\n     anySpamCheckTask.foreach(tx.insertSpamCheckTask)\n     saveDeleteUploadRefs(lastPost, editedPost = editedPost, textAndHtml,\n-          isAppending = true, isEditing = false, authorId, tx)\n+          isAppending = true, isEditing = false, author.trueId2, tx)\n \n     staleStuff.addPageId(editedPost.pageId)\n-    saveDeleteLinks(editedPost, combinedTextAndHtml, authorId, tx, staleStuff)\n+    saveDeleteLinks(editedPost, combinedTextAndHtml, author.trueId2, tx, staleStuff)\n \n     val oldMeta = tx.loadThePageMeta(lastPost.pageId)\n     val newMeta = oldMeta.copy(version = oldMeta.version + 1)\n     tx.updatePageMeta(newMeta, oldMeta = oldMeta, markSectionPageStale = true)\n \n-    // COULD create audit log entry that shows that this ip appended to the chat message.\n+    AUDIT_LOG // that this ip appended to the chat message.\n \n     val notfs = notfGenerator(tx).generateForEdits(lastPost, editedPost, Some(combinedTextAndHtml))\n     tx.saveDeleteNotifications(notfs)\n@@ -888,8 +945,9 @@ trait PostsDao {\n   /** Edits the post, if authorized to edit it.\n     */\n   def editPostIfAuth(pageId: PageId, postNr: PostNr, deleteDraftNr: Option[DraftNr],\n-        who: Who, spamRelReqStuff: SpamRelReqStuff, newTextAndHtml: SourceAndHtml): Unit = {\n-    val editorId = who.id\n+        who: Who, spamRelReqStuff: SpamRelReqStuff, newTextAndHtml: SourceAndHtml,\n+        doAsAnon: Opt[WhichAnon] = None): U = {\n+    val realEditorId = who.id\n \n     // Note: Farily similar to appendChatMessageToLastMessage() just above. [2GLK572]\n \n@@ -903,8 +961,8 @@ trait PostsDao {\n     }\n \n     val anyEditedCategory = writeTx { (tx, staleStuff) =>\n-      val editorAndLevels = loadUserAndLevels(who, tx)\n-      val editor = editorAndLevels.user\n+      val realEditorAndLevels = loadUserAndLevels(who, tx)\n+      val realEditor = realEditorAndLevels.user\n       val page = newPageDao(pageId, tx)\n       val settings = loadWholeSiteSettings(tx)\n \n@@ -916,11 +974,41 @@ trait PostsDao {\n       if (postToEdit.currentSource == newTextAndHtml.text)\n         return\n \n+      val anyOtherAuthor =\n+            if (postToEdit.createdById == realEditor.id) None\n+            else Some(tx.loadTheParticipant(postToEdit.createdById))\n+\n+      // Dupl code. [get_anon]\n+      val editorMaybeAnon =\n+            if (doAsAnon.isEmpty) {\n+              realEditor\n+            }\n+            else doAsAnon.get match {\n+              case WhichAnon.SameAsBefore(anonId) =>\n+                tx.loadTheParticipant(anonId).asAnonOrThrow\n+              case WhichAnon.NewAnon(anonStatus) =>\n+                // Dupl code. [mk_new_anon]\n+                val anonymId = tx.nextGuestId\n+                val anonym = Anonym(\n+                      id = anonymId,\n+                      createdAt = tx.now,\n+                      anonStatus = anonStatus,\n+                      anonForPatId = realEditor.id,\n+                      anonOnPageId = pageId)\n+                // We'll insert the anonym before the page exists, but there's a\n+                // foreign key: pats_t.anon_on_page_id_st_c, so defer constraints:\n+                tx.deferConstraints()\n+                tx.insertAnonym(anonym)\n+                anonym\n+            }\n+\n       dieOrThrowNoUnless(Authz.mayEditPost(\n-        editorAndLevels, tx.loadGroupIdsMemberIdFirst(editor),\n-        postToEdit, page.meta, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n-        inCategoriesRootLast = tx.loadCategoryPathRootLast(page.meta.categoryId, inclSelfFirst = true),\n-        tooManyPermissions = tx.loadPermsOnPages()), \"EdE6JLKW2R\")\n+            realEditorAndLevels, tx.loadGroupIdsMemberIdFirst(realEditor),\n+            postToEdit, otherAuthor = anyOtherAuthor,\n+            page.meta, tx.loadAnyPrivateGroupTalkMembers(page.meta),\n+            inCategoriesRootLast = tx.loadCategoryPathRootLast(\n+                  page.meta.categoryId, inclSelfFirst = true),\n+            tooManyPermissions = tx.loadPermsOnPages()), \"EdE6JLKW2R\")\n \n       // COULD don't allow sbd else to edit until 3 mins after last edit by sbd else?\n       // so won't create too many revs quickly because 2 edits.\n@@ -953,7 +1041,7 @@ trait PostsDao {\n           // Auto approve chat messages. Always SystemUserId for chat.\n           Some(SystemUserId)  // [7YKU24]\n         }\n-        else if (editor.isStaff) {\n+        else if (realEditor.isStaff) {\n           if (!postToEdit.isSomeVersionApproved) {\n             // Staff won't approve a not yet approved post, just by editing it.\n             // Instead, they need to click a button to explicitly approve it  [in_pg_apr]\n@@ -966,14 +1054,14 @@ trait PostsDao {\n           else {\n             // Older revision already approved and post already published.\n             // Then, continue approving it.\n-            Some(editor.id)\n+            Some(realEditor.id)\n           }\n         }\n         else {\n           // Let people continue editing a post that has been approved already â€” unless\n           // they're a moderate threat. A bit further below (7ALGJ2), we'll create\n           // a review task (also for mild threat edits).\n-          if (editorAndLevels.threatLevel.toInt >= ThreatLevel.ModerateThreat.toInt) {\n+          if ( realEditorAndLevels.threatLevel.toInt >= ThreatLevel.ModerateThreat.toInt) {\n             None  // [TyT7UQKBA2]\n           }\n           else if (postToEdit.isCurrentVersionApproved) {\n@@ -999,7 +1087,7 @@ trait PostsDao {\n           (true,\n           None,\n           Some(tx.now.toJavaDate),\n-          Some(editorId),\n+          Some(editorMaybeAnon.id),\n           Some(newTextAndHtml.text),\n           Some(newTextAndHtml.safeHtml),\n           Some(tx.now.toJavaDate))\n@@ -1022,7 +1110,7 @@ trait PostsDao {\n       }\n \n       val isNinjaEdit = {\n-        val sameAuthor = postToEdit.currentRevisionById == editorId\n+        val sameAuthor = postToEdit.currentRevisionById == editorMaybeAnon.id\n         val ninjaHardEndMs = postToEdit.currentRevStaredAt.getTime + HardMaxNinjaEditWindowMs\n         val isInHardWindow = tx.now.millis < ninjaHardEndMs\n         // If the current version has been approved, and one does an unapproved edit â€” then, shouldn't\n@@ -1053,7 +1141,7 @@ trait PostsDao {\n       var editedPost = postToEdit.copy(\n         currentRevStaredAt = newStartedAt,\n         currentRevLastEditedAt = Some(tx.now.toJavaDate),\n-        currentRevisionById = editorId,\n+        currentRevisionById = editorMaybeAnon.id,\n         currentRevSourcePatch = newCurrentSourcePatch,\n         currentRevisionNr = newRevisionNr,\n         previousRevisionNr = newPrevRevNr,\n@@ -1065,7 +1153,7 @@ trait PostsDao {\n         approvedById = anyNewApprovedById orElse postToEdit.approvedById,\n         approvedRevisionNr = newApprovedRevNr)\n \n-      if (editorId != editedPost.createdById) {\n+      if (editorMaybeAnon.id != editedPost.createdById) {\n         editedPost = editedPost.copy(numDistinctEditors = 2)  // for now\n       }\n \n@@ -1098,7 +1186,7 @@ trait PostsDao {\n           AllSettings.PostRecentlyCreatedLimitMs\n \n       val reviewTask: Option[ReviewTask] =    // (7ALGJ2)\n-        if (editor.isStaffOrTrustedNotThreat) {\n+        if (realEditor.isStaffOrTrustedNotThreat) {\n           // This means staff has had a look at the post, even edited it â€” so resolve\n           // mod tasks about this posts. So staff won't be asked to review this post,\n           // on the Moderation page.\n@@ -1112,14 +1200,14 @@ trait PostsDao {\n                   tx.loadTheOrigPost(postToEdit.pageId)\n                 }\n \n-          maybeReviewAcceptPostByInteracting(postWithModTasks, moderator = editor,\n+          maybeReviewAcceptPostByInteracting(postWithModTasks, moderator = realEditor,\n                 ReviewDecision.InteractEdit)(tx, staleStuff)\n \n           // Don't review late edits by trusted members â€” trusting them is\n           // the point with the >= TrustedMember trust levels. TyTLADEETD01\n           None\n         }\n-        else if (postRecentlyCreated && !editorAndLevels.threatLevel.isThreat) {\n+        else if (postRecentlyCreated && ! realEditorAndLevels.threatLevel.isThreat) {\n           // Need not review a recently created post: it's new and the edits likely\n           // happened before other people read it, so they'll notice any weird things\n           // later when they read it, and can flag it. This is not totally safe,\n@@ -1146,7 +1234,7 @@ trait PostsDao {\n             // their old posts and change to spam links, undetected.\n             reviewReasons :+= ReviewReason.LateEdit\n           }\n-          if (editorAndLevels.threatLevel.isThreat) {\n+          if (realEditorAndLevels.threatLevel.isThreat) {\n             reviewReasons :+= ReviewReason.Edit\n             reviewReasons :+= ReviewReason.IsByThreatUser\n           }\n@@ -1157,7 +1245,7 @@ trait PostsDao {\n \n       val anySpamCheckTask =\n         if (!globals.spamChecker.spamChecksEnabled) None\n-        else if (!SpamChecker.shallCheckSpamFor(editor)) None\n+        else if (!SpamChecker.shallCheckSpamFor(realEditor)) None\n         else Some(\n           // This can get same prim key as earlier spam check task, if is ninja edit. [SPMCHKED]\n           // Solution: Give each spam check task its own id field.\n@@ -1173,27 +1261,27 @@ trait PostsDao {\n               pageAvailableAt = When.fromDate(page.meta.publishedAt getOrElse page.meta.createdAt),\n               htmlToSpamCheck = newTextAndHtml.safeHtml,\n               language = settings.languageCode)),\n-            who = who,\n+            reqrId = editorMaybeAnon.id,\n             requestStuff = spamRelReqStuff))\n \n       val auditLogEntry = AuditLogEntry(\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.EditPost,\n-        doerId = editorId,\n+        doerTrueId = editorMaybeAnon.trueId2,\n         doneAt = tx.now.toJavaDate,\n         browserIdData = who.browserIdData,\n         pageId = Some(pageId),\n         uniquePostId = Some(postToEdit.id),\n         postNr = Some(postNr),\n-        targetUserId = Some(postToEdit.createdById))\n+        targetPatTrueId = anyOtherAuthor.map(_.trueId2))\n \n       tx.updatePost(editedPost)\n       tx.indexPostsSoon(editedPost)\n       anySpamCheckTask.foreach(tx.insertSpamCheckTask)\n       newRevision.foreach(tx.insertPostRevision)\n       saveDeleteUploadRefs(postToEdit, editedPost = editedPost, newTextAndHtml,\n-            isAppending = false, isEditing = true, editorId, tx)\n+            isAppending = false, isEditing = true, editorMaybeAnon.trueId2, tx)\n \n       insertAuditLogEntry(auditLogEntry, tx)\n \n@@ -1216,14 +1304,14 @@ trait PostsDao {\n \n       if (editedPost.isCurrentVersionApproved) {\n         staleStuff.addPageId(editedPost.pageId)\n-        saveDeleteLinks(editedPost, newTextAndHtml, editorId, tx, staleStuff)\n+        saveDeleteLinks(editedPost, newTextAndHtml, editorMaybeAnon.trueId2, tx, staleStuff)\n         TESTS_MISSING // notf not sent until after ninja edit window ended?  TyTNINJED02\n         val notfs = notfGenerator(tx).generateForEdits(\n               postToEdit, editedPost, Some(newTextAndHtml))\n         tx.saveDeleteNotifications(notfs)\n       }\n \n-      deleteDraftNr.foreach(nr => tx.deleteDraft(editorId, nr))\n+      deleteDraftNr.foreach(nr => tx.deleteDraft(realEditorId, nr))\n \n       val oldMeta = page.meta\n       var newMeta = oldMeta.copy(version = oldMeta.version + 1)\n@@ -1272,7 +1360,7 @@ trait PostsDao {\n     *\n     * staleStuff must include post.pageId already.\n     */\n-  def saveDeleteLinks(post: Post, sourceAndHtml: SourceAndHtml, writerId: PatId,\n+  def saveDeleteLinks(post: Post, sourceAndHtml: SourceAndHtml, writerTrueId: TrueId,\n           tx: SiteTx, staleStuff: StaleStuff, skipBugWarn: Bo = false): U = {\n     // Some e2e tests: backlinks-basic.2browsers.test.ts  TyTINTLNS54824\n \n@@ -1299,11 +1387,11 @@ trait PostsDao {\n       return\n     }\n \n-    COULD // remove param writerId? It's in the post already, right?:\n+    // Could remove param writerTrueId, but maybe nice with this bug check:\n     // (Or use  post.currentRevisionById â€” no, a new lastApprovedRevisionById ?)\n-    if (post.lastApprovedEditById.getOrElse(post.createdById) != writerId) {\n-      bugWarn(\"TyE63WKDJ356\", s\"s$siteId: post last writer id != writerId = ${\n-            writerId}:  $post\")\n+    if (post.lastApprovedEditById.getOrElse(post.createdById) != writerTrueId.curId) {\n+      bugWarn(\"TyE63WKDJ356\", s\"s$siteId: post last writer id != writerId, ${\n+            writerTrueId}:  $post\")\n       return\n     }\n \n@@ -1329,7 +1417,7 @@ trait PostsDao {\n         Link(fromPostId = post.id,\n               linkUrl = linkUrl,\n               addedAt = approvedAt,\n-              addedById = writerId,\n+              addedById = writerTrueId.curId,\n               isExternal = false,\n               toPageId = Some(path.pageId))\n       }\n@@ -1360,12 +1448,14 @@ trait PostsDao {\n               (pageIdsLinkedAfter -- pageIdsLinkedBefore)\n       staleStuff.addPageIds(stalePageIds, pageModified = false, backlinksStale = true)\n     }\n+\n+    AUDIT_LOG // new links? Or is that unnecessarily verbose, if are internal links.\n   }\n \n \n   private def saveDeleteUploadRefs(postToEdit: Post, editedPost: Post,\n         sourceAndHtml: SourceAndHtml, isAppending: Boolean, isEditing: Boolean,\n-        editorId: UserId, tx: SiteTransaction): Unit = {\n+        editorTrueId: TrueId, tx: SiteTransaction): Unit = {\n     // Use findUploadRefsInPost (not ...InText) so we'll find refs both in the hereafter\n     // 1) approved version of the post, and 2) the current possibly unapproved version.\n     // Because if any of the approved or the current version links to an uploaded file,\n@@ -1378,13 +1468,14 @@ trait PostsDao {\n     }\n \n     if (isEditing && editedPost.isCurrentVersionApproved &&\n-          editedPost.lastApprovedEditById.isNot(editorId)) {\n-      bugWarn(\"TyE205AKT3\", s\"s$siteId: editedPost last editor id != editorId = ${\n-            editorId}:  $editedPost\")\n+          editedPost.lastApprovedEditById.isNot(editorTrueId.curId)) {\n+      bugWarn(\"TyE205AKT3\", o\"\"\"s$siteId: editedPost last editor != editorTrueId.curId,\n+            editorTrueId: $editorTrueId,  editedPost: $editedPost\"\"\")\n       // Don't return, didn't before (2020-07).\n     }\n     // Or use  post.currentRevisionById?:\n-    dieIf(Globals.isDevOrTest && editedPost.currentRevisionById != editorId, \"TyE3056KTD\")\n+    dieIf(Globals.isDevOrTest && editedPost.currentRevisionById != editorTrueId.curId,\n+          \"TyE3056KTD\")\n \n     val oldUploadRefs = tx.loadUploadedFileReferences(postToEdit.id)\n \n@@ -1460,7 +1551,8 @@ trait PostsDao {\n     val uploadRefsRemoved = oldUploadRefs -- currentUploadRefs\n \n     uploadRefsAdded foreach { hashPathSuffix =>\n-      tx.insertUploadedFileReference(postToEdit.id, hashPathSuffix, editorId)\n+      tx.insertUploadedFileReference(\n+            postToEdit.id, hashPathSuffix, addedById = editorTrueId.curId)\n     }\n \n     uploadRefsRemoved foreach { hashPathSuffix =>\n@@ -1470,6 +1562,8 @@ trait PostsDao {\n             ${postToEdit.id} [TyE7UJRH03M]\"\"\")\n       }\n     }\n+\n+    AUDIT_LOG // refs added, removed? So can see in the audit log who linked to a bad file?\n   }\n \n \n@@ -1554,25 +1648,33 @@ trait PostsDao {\n     // to jsonMaker.makeStorePatchForPostIds().\n     // This branch-sideways code was for 2D mind maps, which are disabled nowadays,\n     // so this fn isn't currently in use.\n+    //\n+    // Later: Security: Mods might not be allowed to see everything, some pages\n+    // might be admin-only. Some perms checks missing here, right.\n+    //\n     throwUntested(\"TyEBRANCHSIDEW\")\n \n     val post /* patch*/ = readWriteTransaction { tx =>\n       val postBefore = tx.loadPostsByUniqueId(Seq(postId)).headOption.getOrElse({\n         throwNotFound(\"EsE5KJ8W2\", s\"Post not found: $postId\")\n       })._2\n       val postAfter = postBefore.copy(branchSideways = branchSideways)\n+      val otherOrigAuthor: Opt[Pat] =\n+            if (me.id == postBefore.createdById) None\n+            else Some(\n+                  tx.loadTheParticipant(postBefore.createdById))\n \n       val auditLogEntry = AuditLogEntry(\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.ChangePostSettings,\n-        doerId = me.id,\n+        doerTrueId = me.trueId,\n         doneAt = tx.now.toJavaDate,\n         browserIdData = me.browserIdData,\n         pageId = Some(postBefore.pageId),\n         uniquePostId = Some(postBefore.id),\n         postNr = Some(postBefore.nr),\n-        targetUserId = Some(postBefore.createdById))\n+        targetPatTrueId = otherOrigAuthor.map(_.trueId2))\n \n       val oldMeta = tx.loadThePageMeta(postAfter.pageId)\n       val newMeta = oldMeta.copy(version = oldMeta.version + 1)\n@@ -1596,12 +1698,11 @@ trait PostsDao {\n   }\n \n \n-  def changePostType(pageId: PageId, postNr: PostNr, newType: PostType,\n-        changerId: UserId, browserIdData: BrowserIdData): Unit = {\n+  def changePostType(pageId: PageId, postNr: PostNr, newType: PostType, reqr: ReqrId): U = {\n     writeTx { (tx, staleStuff) =>\n       val page = newPageDao(pageId, tx)\n       val postBefore = page.parts.thePostByNr(postNr)\n-      val Seq(author, changer) = tx.loadTheParticipants(postBefore.createdById, changerId)\n+      val Seq(postOrigAuthor, changer) = tx.loadTheParticipants(postBefore.createdById, reqr.id)\n       throwIfMayNotSeePage(page, Some(changer))(tx)\n \n       val postAfter = postBefore.copy(tyype = newType)\n@@ -1619,6 +1720,7 @@ trait PostsDao {\n       var anyModDecision: Option[ModDecision] = None\n \n       // Test if the changer is allowed to change the post type in this way.\n+      REFACTOR // Move this to new fn Authz.mayAlterPost(..., Alter.PostType)  ? [alterPage]\n       if (changer.isStaffOrCoreMember) {\n         (postBefore.tyype, postAfter.tyype) match {\n           case (before, after) if before == PostType.Normal && after.isWiki =>\n@@ -1638,12 +1740,16 @@ trait PostsDao {\n         // Hmm, there could be a new permission: May wikify own posts, [new_perms][wiki_perms]\n         // and May-wikify-others'-posts?\n         if (postBefore.isWiki && postAfter.tyype == PostType.Normal) {\n-          if (changer.id != author.id)\n-            throwForbidden(\"DwE5KGPF2\", o\"\"\"You are not the author and not staff,\n-                so you cannot remove the Wiki status of this post\"\"\")\n+          val isOwn =  changer.id == postOrigAuthor.id || (\n+                getTheParticipant(postOrigAuthor.id) match {\n+                  case anon: Anonym => anon.anonForPatId == changer.id\n+                  case _ => false\n+                })\n+          throwForbiddenIf(!isOwn, \"TyE0OWN6MR\", o\"\"\"You are not the author and not\n+                staff, so you cannot change the Wiki status of this post\"\"\")\n         }\n         else {\n-            throwForbidden(\"DwE4KXB2\", s\"\"\"Cannot change post type from\n+            throwForbidden(\"DwE4KXB2\", o\"\"\"Cannot change post type from\n                 ${postBefore.tyype} to ${postAfter.tyype}\"\"\")\n         }\n       }\n@@ -1652,13 +1758,14 @@ trait PostsDao {\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.ChangePostSettings,\n-        doerId = changerId,\n+        doerTrueId = reqr.trueId,\n         doneAt = tx.now.toJavaDate,\n-        browserIdData = browserIdData,\n+        browserIdData = reqr.browserIdData,\n         pageId = Some(pageId),\n         uniquePostId = Some(postBefore.id),\n         postNr = Some(postNr),\n-        targetUserId = Some(postBefore.createdById))\n+        // If same as doer, maybe then leave out here?  [audit_log_tgt_self]\n+        targetPatTrueId = Some(postOrigAuthor.trueId2))\n \n       val oldMeta = page.meta\n       val newMeta = oldMeta.copy(version = oldMeta.version + 1)\n@@ -1689,12 +1796,10 @@ trait PostsDao {\n   }\n \n \n-  def changePostStatus(postNr: PostNr, pageId: PageId, action: PostStatusAction, userId: UserId,\n-        browserIdData: BrowserIdData)\n+  def changePostStatus(postNr: PostNr, pageId: PageId, action: PostStatusAction, reqr: ReqrId)\n         : ChangePostStatusResult = {\n     val result = writeTx { (tx, staleStuff) =>\n-      changePostStatusImpl(postNr, pageId = pageId, action, userId = userId,\n-            browserIdData = Some(browserIdData), tx, staleStuff)\n+      changePostStatusImpl(postNr, pageId = pageId, action, reqr, tx, staleStuff)\n     }\n     refreshPageInMemCache(pageId)\n     result\n@@ -1709,8 +1814,7 @@ trait PostsDao {\n     * and UI buttons? [deld_post_mod_tasks]\n     */\n   def changePostStatusImpl(postNr: PostNr, pageId: PageId, action: PostStatusAction,\n-        userId: UserId, browserIdData: Opt[BrowserIdData],\n-        tx: SiteTransaction, staleStuff: StaleStuff)\n+         reqr: ReqrId, tx: SiteTx, staleStuff: StaleStuff)\n         : ChangePostStatusResult =  {\n     import com.debiki.core.{PostStatusAction => PSA}\n     import context.security.throwIndistinguishableNotFound\n@@ -1719,17 +1823,27 @@ trait PostsDao {\n     if (!page.exists)\n       throwIndistinguishableNotFound(\"TyE05KSRDM3\")\n \n+    val userId: UserId = reqr.id\n     val user = tx.loadParticipant(userId) getOrElse throwForbidden(\"DwE3KFW2\", \"Bad user id\")\n \n     SECURITY; COULD // check if may see post, not just the page?  [priv_comts] [staff_can_see]\n+    // If doing that, then: TESTS_MISSING â€” namely deleting an anon post on may not see.\n     throwIfMayNotSeePage(page, Some(user))(tx)\n \n     val postBefore = page.parts.thePostByNr(postNr)\n     lazy val postAuthor = tx.loadTheParticipant(postBefore.createdById)\n+    ANON_UNIMPL // Cannot do this as an anonym, although looks as if one can change\n+    // one's own anon posts (using one's real account).\n+    // Need:  doAsAnon: Opt[WhichAnon.SameAsBefore]  [anon_pages]\n \n     // Authorization.\n     if (!user.isStaff) {\n-      if (postBefore.createdById != userId)\n+      val isOwn =  postBefore.createdById == userId || (postAuthor match {\n+        case anon: Anonym => anon.anonForPatId == userId\n+        case _ => false\n+      })\n+\n+      if (!isOwn)\n         throwForbidden(\"DwE0PK24\", \"You may not modify that post, it's not yours\")\n \n       if (!action.isInstanceOf[PSA.DeletePost] && action != PSA.CollapsePost)\n@@ -1885,11 +1999,13 @@ trait PostsDao {\n               siteId = siteId,\n               id = AuditLogEntry.UnassignedId,\n               didWhat = AuditLogEntryType.PageUnanswered,\n-              doerId = userId,\n+              doerTrueId = user.trueId2,\n               doneAt = tx.now.toJavaDate,\n-              browserIdData = browserIdData getOrElse BrowserIdData.Missing,\n+              browserIdData = reqr.browserIdData,\n               pageId = Some(pageId),\n               uniquePostId = Some(answerPostId))\n+        AUDIT_LOG // targetPatTrueId = Some(the author of the answer),  and, another row\n+        // about the question: it got unanswered. And target pat = the question asker?\n \n         tx.insertAuditLogEntry(auditLogEntry)\n \n@@ -1927,6 +2043,7 @@ trait PostsDao {\n     if (postsDeleted.exists(_.id == postBefore.id)) {\n       dieIf(!action.isInstanceOf[PostStatusAction.DeletePost] &&\n           action != PostStatusAction.DeleteTree, \"TyE205MKSD\")\n+      // + true_pat_id_c?\n       updateSpamCheckTaskBecausePostDeleted(postBefore, postAuthor, deleter = user, tx)\n     }\n \n@@ -1977,6 +2094,7 @@ trait PostsDao {\n     }\n \n     val approver = tx.loadTheParticipant(approverId)\n+    val author = tx.loadTheParticipant(postBefore.createdById)\n \n     // For now. Later, let core members approve posts too.\n     if (!approver.isStaff)\n@@ -2033,7 +2151,7 @@ trait PostsDao {\n \n \n     staleStuff.addPageId(pageId, memCacheOnly = true) // page version bumped below\n-    saveDeleteLinks(postAfter, sourceAndHtml, postAfter.createdById, tx, staleStuff)\n+    saveDeleteLinks(postAfter, sourceAndHtml, author.trueId2, tx, staleStuff)\n \n \n     // ------ The page\n@@ -2086,6 +2204,7 @@ trait PostsDao {\n       }\n       else if (isApprovingNewPost) {\n         notfGenerator(tx).generateForNewPost(page, postAfter, Some(sourceAndHtml),\n+              postAuthor = Some(author),\n               anyNewModTask = None, doingModTasks = doingModTasks)\n       }\n       else {\n@@ -2155,13 +2274,14 @@ trait PostsDao {\n       tx.updatePost(postAfter)\n       tx.indexPostsSoon(postAfter)\n \n-      saveDeleteLinks(postAfter, sourceAndHtml, post.createdById, tx, staleStuff)\n+      val author = tx.loadTheParticipant(post.createdById)\n+      saveDeleteLinks(postAfter, sourceAndHtml, author.trueId2, tx, staleStuff)\n \n       // ------ Notifications\n \n       if (!post.isTitle) {\n         val notfs = notfGenerator(tx).generateForNewPost(page, postAfter,\n-              Some(sourceAndHtml),\n+              Some(sourceAndHtml), postAuthor = Some(author),\n               anyNewModTask = None,\n               // But approver might get notfd about post! [notfs_bug]\n               // However this whole cascade-approval idea should be deleted.\n@@ -2202,22 +2322,19 @@ trait PostsDao {\n   }\n \n \n-  def deletePost(pageId: PageId, postNr: PostNr, deletedById: UserId,\n-        browserIdData: BrowserIdData): Unit = {\n+  def deletePost(pageId: PageId, postNr: PostNr, deletedBy: ReqrId): U = {\n     writeTx { (tx, staleStuff) =>\n-      deletePostImpl(pageId, postNr = postNr, deletedById = deletedById,\n-            browserIdData, tx, staleStuff)\n+      deletePostImpl(pageId, postNr = postNr, deletedBy, tx, staleStuff)\n     }\n     refreshPageInMemCache(pageId)  ; REMOVE // auto do via [staleStuff]\n   }\n \n \n-  def deletePostImpl(pageId: PageId, postNr: PostNr, deletedById: UserId,\n-        browserIdData: BrowserIdData,\n+  def deletePostImpl(pageId: PageId, postNr: PostNr, deletedBy: ReqrId,\n         tx: SiteTx, staleStuff: StaleStuff): ChangePostStatusResult = {\n     val result = changePostStatusImpl(pageId = pageId, postNr = postNr,\n-          action = PostStatusAction.DeletePost(clearFlags = false), userId = deletedById,\n-          browserIdData = Some(browserIdData), tx = tx, staleStuff = staleStuff)\n+          action = PostStatusAction.DeletePost(clearFlags = false), reqr = deletedBy,\n+          tx = tx, staleStuff = staleStuff)\n \n     BUG; SHOULD // delete notfs or mark deleted?  [notfs_bug]  [nice_notfs]\n     // But don't delete any mod tasks â€” good if staff reviews, if a new member\n@@ -2300,6 +2417,8 @@ trait PostsDao {\n       if (voteType == PostVoteType.Unwanted && !voter.isStaffOrCoreMember)  // [4DKWV9J2]\n         throwForbidden(\"DwE5JUK0\", \"Only staff and core members may Unwanted-vote\")\n \n+      ANON_UNIMPL // Don't let people upvote their own anonymous/pseudonymous posts.\n+\n       if (voteType == PostVoteType.Like) {\n         if (post.createdById == voterId)\n           throwForbidden(\"DwE84QM0\", \"Cannot like own post\")\n@@ -2373,8 +2492,154 @@ trait PostsDao {\n   }\n \n \n+  def addRemovePatNodeRelsIfAuZ(addPatIds: Set[PatId], removePatIds: Set[PatId],\n+        postId: PostId, relType: PatNodeRelType, generateMetaComt: Bo,\n+        notifyPats: Bo, reqrInf: Who, mab: MessAborter): StorePatch = {\n+    import context.security.throwIndistinguishableNotFound\n+\n+    val metaComt = writeTx { (tx, staleStuff) =>\n+      val postBef = tx.loadPost(postId) getOrElse {\n+        // mab.abortIf( ... , MessType.NotFound, ... )  ?\n+        throwIndistinguishableNotFound(s\"TyEASGN0POST\")\n+      }\n+\n+      // ----- Check permissions\n+\n+      // Currently only AssignedTo has been implemented â€” and only for the orig post.\n+      // Later, it'll be possible to [assign_comments] too.\n+      throwForbiddenIf(!postBef.isOrigPost, \"TyEASG0OP\", o\"\"\"Can only assign the orig post,\n+            but you tried to assign post nr ${postBef.nr}.\"\"\")\n+\n+      val reqr: Pat = tx.loadTheParticipant(reqrInf.id)\n+\n+      // Access check 1/3.\n+      // Later:  throwIfMayNotChangePostRels(postBef, relType, reqr)(tx)\n+      // For now:\n+      throwIfMayNotSeePost(postBef, Some(reqr))(tx)\n+      dieIf(relType != PatNodeRelType.AssignedTo, \"TyE6X0WMSHUW5\")\n+      throwForbiddenIf(!reqr.isStaffOrTrustedNotThreat,\n+            \"TyECAN0ASGN\", s\"You cannot assign people (min trust level is TrustedMember).\")\n+\n+      // Only works for type AssignedTo (since we look at assigneeIds).\n+      dieIf(relType != PatNodeRelType.AssignedTo, \"TyE6X0WMSHUW6\") // again, yes\n+      val idsToAdd = addPatIds -- postBef.assigneeIds\n+      val idsToRemove = removePatIds intersect postBef.assigneeIds.toSet\n+      if (idsToAdd.isEmpty && idsToRemove.isEmpty)\n+        return JsObject.empty\n+\n+      // mab.abortIf( ... , MessType.Forbidden, ... )\n+      val numAfter = postBef.assigneeIds.size + idsToAdd.size - idsToRemove.size\n+      // What should other limits be? (for OwnerOf and AuthorOf)\n+      dieIf(relType != PatNodeRelType.AssignedTo, \"TyE603MRG5\") // 3rd time, yes\n+      throwForbiddenIf(numAfter > MaxLimits.MaxAssigneesPerPost,\n+            \"TyEASGNMAX\", s\"Cannot assign more than ${MaxLimits.MaxAssigneesPerPost\n+              } people to a post â€” would have assigned $numAfter people.\")\n+\n+      // Check 2/3: For now, don't allow assigning anons. And never guests. Or System.\n+      // (But unassigning is ok, although theoretically there cannot be any to remove.)\n+      val anyBadIdToAdd = idsToAdd.find(_ < Pat.LowestTalkToMemberId)\n+      throwForbiddenIf(anyBadIdToAdd.nonEmpty,\n+            \"TyEASGID392\", s\"Bad assignee id: $anyBadIdToAdd, is < ${Pat.LowestTalkToMemberId}\")\n+\n+      // Currently, if some pats aren't found, then we just ignore them here. Hmm.\n+      val patsByIdMaybeSomeNotFound = tx.loadParticipantsAsMap(idsToAdd ++ idsToRemove)\n+      val patsToAdd = idsToAdd.flatMap(patsByIdMaybeSomeNotFound.get)\n+      //  patsToRemove = idsToRemove.flatMap(patsById.get)\n+\n+      // Access check 3/3:  May the pats getting connected to the post, see it?\n+      // This check makes it possible for someone who can assign others, to find out\n+      // if another member can access a certain page. That's similar to having the upcoming\n+      // perms_on_pages3.can_see_who_can_see_c  permission?\n+      // Maybe if one *doesn't* have that permission, one can only assign people who are\n+      // already part of the current discussion (on the current page), *or* if the page\n+      // is public (so everyone can see it)?\n+      for (patToAdd <- patsToAdd) {\n+        val (result, debugCode) =\n+              maySeePost(postBef, Some(patToAdd), maySeeUnlistedPages = true)(tx)\n+        TESTS_MISSING // Trigger this 403 Forbidden.  TyTASGN0SEEPG\n+        throwForbiddenIf(!result.may, \"TyERELPAT0SEEPOST_\", o\"\"\"User ${\n+              patToAdd.atUsernameOrFullName} cannot access that post, therefore you\n+              cannot connect him/her to it.\"\"\")\n+      }\n+\n+      // ----- Upd assignees\n+\n+      tx.deletePatNodeRels(fromPatIds = idsToRemove, toPostId = postId,\n+            relTypes = Set(relType))\n+\n+      for (patToAdd <- patsToAdd) {\n+        WOULD_OPTIMIZE // Could batch insert.\n+        tx.insertPostAction(PatNodeRel(\n+              toNodeId = postBef.id,\n+              fromPatId = patToAdd.id,\n+              pageId = postBef.pageId,\n+              postNr = postBef.nr,\n+              addedAt = tx.now,\n+              relType = relType))\n+      }\n+\n+      // ----- Generate a meta comment\n+\n+      UX; SHOULD // gen meta comt about post un/assigned.\n+      // Skip, for now. Need to fix:\n+      // 1) Use HTML source but verify cannot be xss'ed. Or, no, instead: In slim-bundle\n+      // or more-bundle, incl code that shows:\n+      //    \"sbd assigned this to sbd-2 and sbd-3\".  But should Ty remember a list of ids?\n+      // â€” then, need another table, so foreign keys will work. Or a list of usernames?\n+      // But then, incorrect if names changed. And,\n+      // 2) Use new NotificationType.PostAssigneesAdded/Removed ... or Changed?\n+      // 3) Generate i18n emails for those notifications (or, can wait).\n+      // 4) What if some assignees, or the assignor, are [private_pats]?\n+      val metaComt: Opt[Post] =  None  /* if (!generateMetaComt) None else Some {\n+        val assignedUsernames: St = patsToAdd.map(_.atUsernameOrFullName).mkString(\", \")\n+        val assignedSbd = if (assignedUsernames.isEmpty) \"\"\n+                          else s\" assigned $assignedUsernames\"\n+\n+        val unassignedUsernames: St = patsToRemove.map(_.atUsernameOrFullName).mkString(\", \")\n+        val unassignedSbd = if (unassignedUsernames.isEmpty) \"\"\n+                            else s\" unassigned <b> $unassignedUsernames </b>\"\n+\n+        val and = if (assignedSbd.isEmpty || unassignedSbd.isEmpty) \"\"\n+                  else \", and\"\n+\n+        addMetaMessage(reqr,  NO: message = assignedSbd + and + unassignedSbd,\n+              pageId = postBef.pageId, tx,  NO:  notifyMentioned = true,\n+              Instead:  NotificationType.PostAssigneesChanged ?)\n+      } */\n+\n+      // ----- Notify assignees\n+\n+      if (notifyPats) {\n+        UX; SHOULD // notify pats who got assigned / unassigned.\n+        // Can derive the NotificationType, from the  e.g. PatNodeRelType.AssignedTo â€”>\n+        // NotificationType.PostAssigneesChanged?\n+      }\n+\n+      AUDIT_LOG\n+\n+      // ----- Refresh cache\n+\n+      REFACTOR // somehow let this update any topic list page too â€” see [2F5HZM7].  For now,\n+      // calling uncacheForums() manually below  (after '}').  [make_salestuff_uncache_forums]\n+      staleStuff.addPageId(postBef.pageId)\n+\n+      metaComt\n+    }\n+\n+    uncacheForums(siteId)\n+\n+    // ----- Generate response\n+\n+    val storePatchJo: JsObject = jsonMaker.makeStorePatchForPostIds(\n+          metaComt.map(_.id).toSet + postId,\n+          showHidden = true, inclUnapproved = true, maySquash = false, dao = this)\n+\n+    storePatchJo\n+  }\n+\n+\n   RENAME // all ... IfAuth to IfAuZ (if authorized)\n-  def movePostIfAuth(whichPost: PagePostId, newParent: PagePostNr, moverId: UserId,\n+  def movePostIfAuth(whichPost: PagePostId, newParent: PagePostNr, moverId: TrueId,\n         browserIdData: BrowserIdData): (Post, JsObject) = {\n \n     if (newParent.postNr == PageParts.TitleNr)\n@@ -2383,14 +2648,18 @@ trait PostsDao {\n     val now = globals.now()\n \n     val postAfter = writeTx { (tx, staleStuff) =>\n-      val mover = tx.loadTheUser(moverId)\n+      UX; SHOULD // let people move their own posts. Also, think about anons,\n+      // so an anon can move their own post, but only elsewhere *on the same page*.\n+      val mover = tx.loadTheUser(moverId.curId)\n       if (!mover.isStaff)\n         throwForbidden(\"EsE6YKG2_\", \"Only staff may move posts\")\n \n       val postToMove = tx.loadThePost(whichPost.postId)\n       if (postToMove.nr == PageParts.TitleNr || postToMove.nr == PageParts.BodyNr)\n         throwForbidden(\"EsE7YKG25_\", \"Cannot move page title or body\")\n \n+      val postAuthor = tx.loadTheUser(postToMove.createdById)\n+\n       val newParentPost = tx.loadPost(newParent) getOrElse throwForbidden(\n         \"EsE7YKG42_\", \"New parent post not found\")\n \n@@ -2435,12 +2704,23 @@ trait PostsDao {\n         // Note that moving the post to one of its ancestors (instead of descendants),\n         // cannot create a cycle.\n       }\n+      else {\n+        // If moving anonymous posts, it's higher risk that someone accidentally\n+        // reveals who hen is, e.g. by making all posts by an anonym of hens,\n+        // public, supposedly on a single page â€” but having forgotten / not-knowing-that\n+        // others will be able to see / might-deduce-that hen also wrote [the post that got\n+        // moved to another page].\n+        // So, for now, disallow this. (Could allow, if the author deanonymizes the post.)\n+        ANON_UNIMPL; TESTS_MISSING // Verify this not allowed.  TyTMOVANONCOMT\n+        throwForbiddenIf(postAuthor.isAnon, \"TyE4MW2LR5\",\n+              \"Cannot move an anonymous post to another page\")\n+      }\n \n       val moveTreeAuditEntry = AuditLogEntry(\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.MovePost,\n-        doerId = moverId,\n+        doerTrueId = moverId,\n         doneAt = now.toJavaDate,\n         browserIdData = browserIdData,\n         pageId = Some(postToMove.pageId),\n@@ -2491,7 +2771,7 @@ trait PostsDao {\n               siteId = siteId,\n               id = AuditLogEntry.UnassignedId,\n               didWhat = AuditLogEntryType.MovePost,\n-              doerId = moverId,\n+              doerTrueId = moverId,\n               doneAt = now.toJavaDate,\n               browserIdData = browserIdData,\n               pageId = Some(descendant.pageId),\n@@ -2545,7 +2825,7 @@ trait PostsDao {\n \n       // Would be good to [save_post_lns_mentions], so wouldn't need to recompute here.\n       val notfs = notfGenerator(tx).generateForNewPost(\n-            toPage, postAfter, sourceAndHtml = None,\n+            toPage, postAfter, sourceAndHtml = None, postAuthor = Some(postAuthor),\n             anyNewModTask = None, skipMentions = true)\n       SHOULD // tx.saveDeleteNotifications(notfs) â€” but would cause unique key errors\n \n@@ -2708,9 +2988,23 @@ trait PostsDao {\n       // (The whole page gets hidden by hidePostsOnPage() below, if all posts get hidden.)\n       val postsToMaybeHide =\n         if (user.isMember) {\n-          tx.loadPostsByQuery(limit = numThings, OrderBy.MostRecentFirst,\n-                byUserId = Some(userId), includeTitlePosts = false,\n-                inclUnapprovedPosts = true, inclUnlistedPagePosts_unimpl = true)\n+          tx.loadPostsByQuery(\n+              PostQuery.PostsByAuthor(\n+                reqrInf = ReqrInf(Participant.SystemUserBr, BrowserIdData.System),\n+                authorId = userId,\n+                // Don't hide the person's anonymous posts? Because if doing that,\n+                // it'd be possible to guess that hen wrote them?  [list_anon_posts]\n+                // It's more important that people get to stay anon, if they expect to\n+                // stay anon. And if new users often post spam etc as anons, then,\n+                // it's better to solve that by requiring users to have been members\n+                // for a while, before they can post anonymously (?).\n+                inclAnonPosts = false,\n+                inclTitles = false,\n+                inclUnapproved = true,\n+                inclUnlistedPagePosts = true,\n+                limit = numThings,\n+                orderBy = OrderBy.MostRecentFirst,\n+                ))\n                 .filter(!_.isBodyHidden)\n         }\n         else {\n@@ -2894,39 +3188,56 @@ trait PostsDao {\n     }\n \n \n-  def loadPostsMaySeeByQuery(\n-          requester: Option[Participant], orderBy: OrderBy, limit: Int,\n-          inclTitles: Boolean, onlyEmbComments: Boolean, inclUnapprovedPosts: Boolean,\n-          inclUnlistedPagePosts: Boolean,\n-          writtenById: Option[UserId]): LoadPostsResult = {\n+  def loadPostsMaySeeByQuery(query: PostQuery): LoadPostsResult = {\n \n-    unimplementedIf(orderBy != OrderBy.MostRecentFirst,\n+    unimplementedIf(query.orderBy != OrderBy.MostRecentFirst,\n           \"Only most recent first supported [TyE403RKTJ]\")\n \n     val postsInclForbidden: ImmSeq[Post] = readTx { tx =>\n-      if (onlyEmbComments) {\n-        dieIf(inclTitles, \"TyE503RKDP5\", \"Emb cmts have no titles\")\n-        dieIf(inclUnapprovedPosts, \"TyE503KUTRT\", \"Emb cmts + unapproved\")\n-        dieIf(writtenById.isDefined, \"TyE703RKT3M\", \"Emb cmts + writtenBy unimpl\")\n+      if (query.onlyEmbComments) {\n+        dieIf(query.inclTitles, \"TyE503RKDP5\", \"Emb cmts have no titles\")\n+        dieIf(query.inclUnapproved, \"TyE503KUTRT\", \"Emb cmts + unapproved\")\n+\n+        // Remove !query.inclAnonPosts below, if accepting != AllPosts here:\n+        // (But this if branch will probably disappear completely, instead, later.)\n+        dieIf(!query.isInstanceOf[PostQuery.AllPosts],\n+              \"TyE703RKT3M\", s\"Emb comts query must be of type PostQuery.AllPosts but is type ${\n+                  classNameOf(query)}\")\n+        // Currently we want anon posts. The author stays anon. [list_anon_posts]\n+        unimplIf(!query.inclAnonPosts, \"TyEANONUINMP03\")\n+\n         // Embedded discussions are typically unlisted, so strangers\n         // cannot super easily list all discussions over at the Talkyard site\n         // (but via the Atom feed, it's ok to list the most recent comments).\n-        dieIf(!inclUnlistedPagePosts, \"TyE520ATJ3\", \"Emb cmts + *no* unlisted\")\n+        dieIf(!query.inclUnlistedPagePosts, \"TyE520ATJ3\", \"Emb cmts + *no* unlisted\")\n \n-        tx.loadEmbeddedCommentsApprovedNotDeleted(limit = limit, orderBy)\n+        tx.loadEmbeddedCommentsApprovedNotDeleted(limit = query.limit, query.orderBy)\n       }\n       else {\n-        tx.loadPostsByQuery(\n-              limit = limit, orderBy, byUserId = writtenById,\n-              includeTitlePosts = inclTitles, inclUnapprovedPosts = inclUnapprovedPosts,\n-              // inclUnlistedPagePosts_unimpl here has no effect, not implemented,\n-              // but there's a filter below in the for { ... }.\n-              inclUnlistedPagePosts_unimpl = inclUnlistedPagePosts)\n+        query match {\n+          case q: PostQuery.PostsRelatedToPat[_] =>  // [load_posts_by_rels]\n+            // Tests incl:\n+            //    - assign-to-basic.2br.d  TyTASSIGN01\n+\n+            COULD_OPTIMIZE // Load distinct post ids. Instead of relationships\n+            // â€” pointless to transfer them over the network, and there can be\n+            // many, per pat and post (is possible, if sub_type_c is different. So might\n+            // also get fewer posts, than `limit`, harmless BUG).\n+            val rels: ImmSeq[PatNodeRel[_]] = tx.loadPatPostRels(\n+                  forPatId = q.relatedPatId, relType = q.relType,\n+                  onlyOpenPosts = q.onlyOpen, limit = q.limit)\n+            val postIds = rels.map(_.toNodeId)\n+            tx.loadPostsByIdKeepOrder(postIds.distinct)\n+          case _ =>\n+            tx.loadPostsByQuery(query)\n+        }\n       }\n     }\n \n     filterMaySeeAddPages(\n-          requester, postsInclForbidden, inclUnlistedPagePosts = inclUnlistedPagePosts)\n+          Some(query.reqr),\n+          postsInclForbidden,\n+          inclUnlistedPagePosts = query.inclUnlistedPagePosts)\n   }\n \n "
    },
    {
      "sha": "eb688252c3fc02b7f3f0c50895c1ecdd78e992ff",
      "filename": "appsv/server/debiki/dao/RenderedPageHtmlDao.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -88,7 +88,9 @@ trait RenderedPageHtmlDao {\n       // and the html content.\n       val pageHtml: St = views.html.templates.page(tpi).body\n \n-      RenderedPage(pageHtml, jsonResult.reactStoreJsonString, jsonResult.unapprovedPostAuthorIds)\n+\n+      RenderedPage(pageHtml, jsonResult.reactStoreJsonString, jsonResult.unapprovedPostAuthorIds,\n+            jsonResult.anonsByRealId)\n     }\n   }\n \n@@ -295,9 +297,11 @@ trait RenderedPageHtmlDao {\n   /** Forums list other pages sorted by modification time, so whenever any\n     * page is modified, it's likely that a forum page should be rerendered.\n     * Also, if a new category is added, the parent forum should be rerendered.\n-    * For simplicity, we here uncache all forums.\n+    * For simplicity, we here uncache all forums in this site (there's currently\n+    * just one per site, until [sub_communities] implemented).\n+    * [make_salestuff_uncache_forums]\n     */\n-  private def uncacheForums(siteId: SiteId): Unit = {\n+  def uncacheForums(siteId: SiteId): Unit = {\n     val forumIds = memCache.lookup[List[String]](forumsKey(siteId)) getOrElse Nil\n     forAllAccessedOrigins { origin =>\n       forumIds foreach { forumId =>"
    },
    {
      "sha": "307e2742e25078b66d7061dd0cfd31de250bd606",
      "filename": "appsv/server/debiki/dao/ReviewsDao.scala",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FReviewsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -89,7 +89,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.MakeReviewDecision,\n-        doerId = requester.id,\n+        doerTrueId = requester.trueId,\n         doneAt = globals.now().toJavaDate,\n         browserIdData = requester.browserIdData,\n         pageId = pageId,\n@@ -139,7 +139,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.UndoReviewDecision,\n-        doerId = requester.id,\n+        doerTrueId = requester.trueId,\n         doneAt = globals.now().toJavaDate,\n         browserIdData = requester.browserIdData,\n         pageId = pageId,\n@@ -407,8 +407,14 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n             UX; TESTS_MISSING; BUG // ? will this un-hide the whole page if needed?\n \n             changePostStatusImpl(postNr = post.nr, pageId = post.pageId,\n-                  PostStatusAction.UnhidePost, userId = decidedById,\n-                  browserIdData = None, tx, staleStuff).updatedPost\n+                  PostStatusAction.UnhidePost,\n+                  Who(TrueId.forMember(decidedById),\n+                        // When called from SystemDao.executePendingReviewTasks(),\n+                        // we don't have any info about the browser available.\n+                        // So it's missing [save_mod_br_inf]. But not missing when called\n+                        // from this.moderatePostInstantly(). Oh well.\n+                        browserIdData = BrowserIdData.Missing),\n+                  tx, staleStuff).updatedPost\n           }\n           else {\n             None\n@@ -502,6 +508,7 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n         (tx: SiteTx, staleStuff: StaleStuff): ModResult = {\n \n     val taskIsForBothTitleAndBody = isPageModTask(post, modTasks)\n+    val reqr = Who(TrueId.forMember(decidedById), browserIdData)\n \n     dieIf(modTasks.exists(_.postId isSomethingButNot post.id), \"TyE50WKDL6\")\n \n@@ -518,16 +525,14 @@ trait ReviewsDao {   // RENAME to ModerationDao,  MOVE to  talkyard.server.modn\n             // If staff deletes many posts by this user, mark it as a moderate threat?\n             // That'll be done from inside update-because-deleted fn below. [DETCTHR]\n             else if (taskIsForBothTitleAndBody) {\n-              deletePagesImpl(Seq(pageId), deleterId = decidedById,\n-                    browserIdData)(tx, staleStuff)\n+              deletePagesImpl(Seq(pageId), reqr)(tx, staleStuff)\n               // Posts not individually deleted, instead, whole page gone // [62AKDN46]\n               (Seq.empty, Some(pageId))\n             }\n             else {\n               val updPost =\n-                    deletePostImpl(post.pageId, postNr = post.nr, deletedById = decidedById,\n-                        browserIdData, tx, staleStuff)\n-                      .updatedPost\n+                    deletePostImpl(pageId = post.pageId, postNr = post.nr, deletedBy = reqr,\n+                          tx, staleStuff).updatedPost\n \n               // It's annoying if [other review tasks for the same post] would\n               // need to be handled too."
    },
    {
      "sha": "5dafdcfc8dcb568f9a21995cf8b45774b782450f",
      "filename": "appsv/server/debiki/dao/SettingsDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSettingsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSettingsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSettingsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -190,7 +190,7 @@ trait SettingsDao {\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.SaveSiteSettings,\n-        doerId = byWho.id,\n+        doerTrueId = byWho.trueId,\n         doneAt = tx.now.toJavaDate,\n         browserIdData = byWho.browserIdData))\n "
    },
    {
      "sha": "ef6748dad364f27bd8dba942bf483d0eed92e5b5",
      "filename": "appsv/server/debiki/dao/SpecialContentDao.scala",
      "status": "modified",
      "additions": 33,
      "deletions": 20,
      "changes": 53,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSpecialContentDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSpecialContentDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSpecialContentDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -23,6 +23,7 @@ import debiki._\n import debiki.EdHttp._\n import SpecialContentPages._\n import org.owasp.encoder.Encode\n+import talkyard.server.dao.StaleStuff\n \n \n /** Loads special content pages, e.g. a page with a user-content-license text\n@@ -59,8 +60,8 @@ trait SpecialContentDao {\n   }\n \n \n-  def saveSpecialContent(rootPageId: PageId, contentId: PageId, anyNewSource: Option[String],\n-        resetToDefaultContent: Boolean, editorId: UserId): Unit = {\n+  def saveSpecialContent(rootPageId: PageId, contentId: PageId, anyNewSource: Opt[St],\n+        resetToDefaultContent: Bo, reqr: ReqrId): U = {\n \n     if (contentId != SpecialContentPages.StylesheetId &&\n         contentId != SpecialContentPages.JavascriptId)\n@@ -79,35 +80,36 @@ trait SpecialContentDao {\n     // This is currently either Javascript or CSS. Show it verbatim.\n     val approvedHtmlSanitized = s\"<pre>${Encode.forHtmlContent(newSource)}</pre>\"\n \n-    readWriteTransaction { transaction =>\n+    writeTx { (tx, staleStuff) =>\n       // BUG: Race condition, lost update bug -- but it's mostly harmless,\n       // admins will be active only one at a time? Solve by passing body version to server,\n       // so we can detect if someone else has changed it in between.\n \n       // Verify that root page id exists and is a section.\n       if (rootPageId.nonEmpty) {\n         def theRootPage = s\"Root page '$rootPageId', site '$siteId',\"\n-        val meta = transaction.loadPageMeta(rootPageId) getOrElse\n+        val meta = tx.loadPageMeta(rootPageId) getOrElse\n           throwForbidden(\"Dw0FfR1\", s\"$theRootPage does not exist\")\n         if (!meta.pageType.isSection)\n           throwForbidden(\"Dw7GBR8\", s\"$theRootPage is not a section\")\n       }\n \n-      transaction.loadPost(pageId, PageParts.BodyNr) match {\n+      tx.loadPost(pageId, PageParts.BodyNr) match {\n         case None =>\n-          createSpecialContentPage(pageId, authorId = editorId, newSource,\n-            htmlSanitized = approvedHtmlSanitized, transaction)\n+          createSpecialContentPage(pageId, reqr, newSource,\n+                htmlSanitized = approvedHtmlSanitized, tx, staleStuff)\n         case Some(oldPost) =>\n           updateSpecialContentPage(oldPost, newSource, htmlSanitized = approvedHtmlSanitized,\n-            editorId, transaction)\n+                reqr, tx, staleStuff)\n       }\n     }\n   }\n \n \n-  protected def createSpecialContentPage(pageId: PageId, authorId: UserId,\n-      source: String, htmlSanitized: String, transaction: SiteTransaction): Unit = {\n-    val pageMeta = PageMeta.forNewPage(pageId, PageType.SpecialContent, authorId,\n+  private def createSpecialContentPage(pageId: PageId, reqr: ReqrId,\n+        source: St, htmlSanitized: St, transaction: SiteTx, staleStuff: StaleStuff): U = {\n+\n+    val pageMeta = PageMeta.forNewPage(pageId, PageType.SpecialContent, reqr.id,\n       transaction.now.toJavaDate,\n       numPostsTotal = 1, // no title post, only body\n       categoryId = None, embeddingUrl = None, publishDirectly = true)\n@@ -118,27 +120,31 @@ trait SpecialContentDao {\n       uniqueId = uniqueId,\n       pageId = pageId,\n       createdAt = transaction.now.toJavaDate,\n-      createdById = authorId,\n+      createdById = reqr.id,\n       source = source,\n       htmlSanitized = htmlSanitized,\n-      approvedById = Some(authorId))\n+      approvedById = Some(reqr.id))\n \n     transaction.insertPageMetaMarkSectionPageStale(pageMeta)(IfBadDie)\n     transaction.insertPost(bodyPost)\n \n+    AUDIT_LOG\n+\n     val dummyPagePath = PagePathWithId(\n           \"/\", pageId = pageId, showId = true, pageSlug = \"dummy\", canonical = true)\n+\n     if (affectsWholeSite(pageId)) {\n-      emptyCacheImpl(transaction)\n+      staleStuff.addAllPages()\n     }\n     else {\n+      CLEAN_UP // Can skip this?\n       memCache.firePageCreated(siteId, dummyPagePath)\n     }\n   }\n \n \n-  protected def updateSpecialContentPage(oldPost: Post, newSource: String, htmlSanitized: String,\n-        editorId: UserId, transaction: SiteTransaction): Unit = {\n+  private def updateSpecialContentPage(oldPost: Post, newSource: String, htmlSanitized: St,\n+        reqr: ReqrId, transaction: SiteTx, staleStuff: StaleStuff): U = {\n     if (oldPost.currentSource == newSource)\n       return\n \n@@ -156,22 +162,29 @@ trait SpecialContentDao {\n       approvedSource = Some(newSource),\n       approvedHtmlSanitized = Some(htmlSanitized),\n       approvedAt = Some(transaction.now.toJavaDate),\n-      approvedById = Some(editorId),\n+      approvedById = Some(reqr.id),\n       approvedRevisionNr = Some(nextRevisionNr))\n \n     transaction.updatePost(editedPost)\n \n+    AUDIT_LOG\n+\n     if (affectsWholeSite(oldPost.pageId)) {\n-      emptyCacheImpl(transaction)\n+      staleStuff.addAllPages()\n     }\n     else {\n+      CLEAN_UP // Can skip this?\n       memCache.firePageSaved(SitePageId(siteId = siteId, pageId = oldPost.pageId))\n     }\n   }\n \n \n-  private def affectsWholeSite(pageId: PageId) =\n-    true // currently always\n+  private def affectsWholeSite(pageId: PageId) = {\n+    // Currently always.\n+    // .. Because an asset-versioned link to custom js and css, is included on each page?\n+    // Or what was the reason.\n+    true\n+  }\n \n }\n "
    },
    {
      "sha": "cff1fd9b16e1ea5e99d733f2d0e629bdaa987c48",
      "filename": "appsv/server/debiki/dao/SystemDao.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSystemDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -424,7 +424,7 @@ class SystemDao(\n           siteId = oldSiteId,\n           id = AuditLogEntry.UnassignedId,\n           didWhat = AuditLogEntryType.CreateSite,\n-          doerId = creatorId,\n+          doerTrueId = TrueId(creatorId),\n           doneAt = oldSiteTx.now.toJavaDate,\n           browserIdData = browserIdData,\n           browserLocation = None,\n@@ -484,7 +484,7 @@ class SystemDao(\n         siteId = newSite.id,\n         id = AuditLogEntry.FirstId,\n         didWhat = AuditLogEntryType.ThisSiteCreated,\n-        doerId = SystemUserId, // no admin account yet created\n+        doerTrueId = TrueId(SystemUserId), // no admin account yet created\n         doneAt = newSiteTx.now.toJavaDate,\n         browserIdData = browserIdData,\n         browserLocation = None,\n@@ -753,6 +753,7 @@ class SystemDao(\n \n   def executePendingReviewTasks(): U =  {\n     val taskIdsBySite: Map[SiteId, immutable.Seq[ReviewTaskId]] = readTx { tx =>\n+      // Browser info not saved, not loaded here. [save_mod_br_inf]\n       tx.loadReviewTaskIdsToExecute()\n     }\n     taskIdsBySite foreach { case (siteId, taskIds) =>"
    },
    {
      "sha": "cd26fd01a5f362a0c6f308e3c6c289515744b8d6",
      "filename": "appsv/server/debiki/dao/TagsDao.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FTagsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FTagsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FTagsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -254,6 +254,7 @@ trait TagsDao {\n \n       throwForbiddenIf(post.nr == PageParts.TitleNr, \"EsE5JK8S4\", \"Cannot tag page titles\")\n \n+      // [pseudonyms_later] Better err msg if one's true user may do this.\n       throwForbiddenIf(post.createdById != me.id && !me.isStaff,\n         \"EsE2GKY5\", \"Not your post and you're not staff, so you may not edit tags\")\n \n@@ -285,7 +286,7 @@ trait TagsDao {\n \n     refreshPageInMemCache(post.pageId)\n \n-    val storePatch = jsonMaker.makeStorePatchForPost(post, postAuthor, showHidden = true)\n+    val storePatch = jsonMaker.makeStorePatchForPost(post, showHidden = true, reqerId = who.id)\n     pubSub.publish(\n       StorePatchMessage(siteId, pageId, storePatch, notifications), byId = postAuthor.id)\n     storePatch"
    },
    {
      "sha": "b85e6a8d3323b9b88140ee2b532e8ec2d8c76f36",
      "filename": "appsv/server/debiki/dao/UploadsDao.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUploadsDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -49,7 +49,7 @@ trait UploadsDao {\n     * directory, if stored on localhost (some file systems don't want 99999 files in a\n     * single directory).\n     */\n-  def addUploadedFile(uploadedFileName: String, tempFile: jio.File, uploadedById: UserId,\n+  def addUploadedFile(uploadedFileName: String, tempFile: jio.File, uploadedById: TrueId,\n         browserIdData: BrowserIdData): UploadRef = {\n \n     // Over quota? [fs_quota]\n@@ -151,7 +151,7 @@ trait UploadsDao {\n     }\n \n     // We check if the whole site is over quota, above. [fs_quota]\n-    throwIfUploadedTooMuchRecently(uploadedById, sizeBytes = sizeBytes)\n+    _throwIfUploadedTooMuchRecently(uploadedById, sizeBytes = sizeBytes)\n \n     val hashPathSuffix = makeHashPath(optimizedFile, optimizedDotSuffix)\n     val destinationFile = new java.io.File(s\"$publicUploadsDir$hashPathSuffix\")\n@@ -170,7 +170,7 @@ trait UploadsDao {\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.UploadFile,\n-        doerId = uploadedById,\n+        doerTrueId = uploadedById,\n         doneAt = transaction.now.toJavaDate,\n         browserIdData = browserIdData,\n         uploadHashPathSuffix = Some(hashPathSuffix),\n@@ -253,7 +253,18 @@ trait UploadsDao {\n   }\n \n \n-  private def throwIfUploadedTooMuchRecently(uploaderId: UserId, sizeBytes: Int): Unit = {\n+  /** If is an anonym or pseudonym, we'll first verify that the real user is allowed\n+    * to upload anything, and then check the ano/pseudonym too.\n+    */\n+  private def _throwIfUploadedTooMuchRecently(uploaderId: TrueId, sizeBytes: Int): U = {\n+    uploaderId.anyTrueId.foreach { trueId: MembId =>\n+      _throwIfUploadedTooMuchImpl(trueId, sizeBytes = sizeBytes)\n+    }\n+    _throwIfUploadedTooMuchImpl(uploaderId.curId, sizeBytes = sizeBytes)\n+  }\n+\n+\n+  private def _throwIfUploadedTooMuchImpl(uploaderId: PatId, sizeBytes: Int): U = {\n     readOnlyTransaction { transaction =>\n       val user = transaction.loadParticipant(uploaderId) getOrElse throwForbidden(\n         \"EsE7KMW2\", \"Strangely enough, your user account just disappeared\")"
    },
    {
      "sha": "0c1b0912a7f947e0ecd1698bee981a973d9a6046",
      "filename": "appsv/server/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 40,
      "deletions": 20,
      "changes": 60,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FUserDao.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -205,6 +205,7 @@ trait UserDao {\n       val byMember = tx.loadTheUser(byWho.id)\n       val memberBefore = tx.loadTheUserInclDetails(memberId)\n \n+      // (Later: Better err msg if is in fact staff. [pseudonyms_later])\n       throwForbiddenIf(!byMember.isStaff,\n             \"TyENSTFF5026\", \"Only staff can do this\")\n \n@@ -247,12 +248,12 @@ trait UserDao {\n           // Noop.\n       }\n \n-      SHOULD /* val auditLogEntry = AuditLogEntry(\n+      AUDIT_LOG /* val auditLogEntry = AuditLogEntry(\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.   ... what? new AuditLogEntryType enums, or one single EditUser enum,\n                                               with an int val = the EditMemberAction int val ?\n-        doerId = byWho.id,\n+        doerTrueId = byWho.trueId,\n         doneAt = now.toJavaDate,\n         browserIdData = byWho.browserIdData,\n         browserLocation = None)*/\n@@ -549,8 +550,10 @@ trait UserDao {\n   }\n \n \n+  /** Loads the true user, which might be a pseudonym (but never an anonym).\n+    */\n   def loadUserAndLevels(who: Who, tx: SiteTransaction): UserAndLevels = {\n-    val user = tx.loadTheParticipant(who.id)\n+    val user: Pat = tx.loadTheParticipant(who.id)\n     val trustLevel = user.effectiveTrustLevel\n     val threatLevel = user match {\n       case member: User => member.effectiveThreatLevel\n@@ -564,6 +567,10 @@ trait UserDao {\n         ThreatLevel.fromInt(levelInt) getOrDie \"EsE8GY2511\"\n       case group: Group =>\n         ThreatLevel.HopefullySafe // for now\n+      case _ : Anonym =>\n+        // Should never do things directly as an anonym, only via one's real account.\n+        // Higher up the stack, we should have replied Forbidden already.\n+        die(\"TyE206MRAKG\", s\"Got an anon: $who\")\n     }\n     UserAndLevels(user, trustLevel, threatLevel)\n   }\n@@ -713,7 +720,7 @@ trait UserDao {\n       siteId = siteId,\n       id = AuditLogEntry.UnassignedId,\n       didWhat = AuditLogEntryType.CreateUser,\n-      doerId = member.id,\n+      doerTrueId = member.trueId2,\n       doneAt = now.toJavaDate,\n       browserIdData = browserIdData,\n       browserLocation = None)\n@@ -906,11 +913,12 @@ trait UserDao {\n \n \n   def getUser(userId: UserId): Option[User] = {\n-    require(userId >= Participant.LowestMemberId, \"EsE4GKX24\")\n+    dieIf(userId < Participant.LowestMemberId, \"TyE2LOWUID\", s\"Too low user id: $userId < ${\n+          Participant.LowestMemberId}\")\n     getParticipant(userId).map(_ match {\n       case user: User => user\n-      case _: Group => throw GotAGroupException(userId)\n-      case _: Guest => die(\"TyE2AKBP067\")\n+      case _: Group => throw GotAGroupException(userId, wantedWhat = \"a user\")\n+      case _ => die(\"TyE2AKBP067\")\n     })\n   }\n \n@@ -1009,6 +1017,7 @@ trait UserDao {\n   }\n \n \n+  RENAME // to getPatBySessionId\n   /**\n     * Loads a user from the database.\n     * Verifies that the loaded id match the id encoded in the session identifier,\n@@ -1183,10 +1192,14 @@ trait UserDao {\n         // [ck_grp_ckl]\n         throwForbidden(\"TyEGRINGR\", s\"Cannot add groups to groups. Is a group: ${group.nameParaId}\")\n       }\n-      newMembers.find(_.isGuest) foreach { guest =>\n-        throwForbidden(\"TyEGSTINGR\", s\"Cannot add guests to groups. Is a guest: ${guest.nameParaId}\")\n+\n+      newMembers.find(_.isGuestOrAnon) foreach { guest =>\n+        throwForbidden(\"TyEGSTINGR\", s\"Cannot add guests or anons to groups; this pat: ${\n+              guest.nameParaId} is a ${guest.accountType}.\")\n       }\n \n+      // & !system or sysbot\n+\n       val maxLimits = getMaxLimits(UseTx(tx))\n \n       // For now. Don't let a group become too large.\n@@ -1260,7 +1273,7 @@ trait UserDao {\n \n   def getOnesGroupIds(ppt: Participant): Vector[UserId] = {\n     ppt match {\n-      case _: Guest | UnknownParticipant => Vector(Group.EveryoneId)\n+      case _: Guest | _: Anonym | UnknownParticipant => Vector(Group.EveryoneId)\n       case _: Member =>\n         memCache.lookup[Vector[UserId]](\n           onesGroupIdsKey(ppt.id),\n@@ -1274,8 +1287,9 @@ trait UserDao {\n \n \n   def joinOrLeavePageIfAuth(pageId: PageId, join: Bo, who: Who): Opt[BareWatchbar] = {\n-    if (Participant.isGuestId(who.id))\n-      throwForbidden(\"EsE3GBS5\", \"Guest users cannot join/leave pages\")\n+    // (Later, maybe optionally allow anons (conf val). [anon_priv_msgs])\n+    if (who.isGuestOrAnon)\n+      throwForbidden(\"EsE3GBS5\", \"Guest and anonymous users cannot join/leave pages\")\n \n     val joinOrLeave = if (join) Join else Leave\n \n@@ -1377,8 +1391,9 @@ trait UserDao {\n           joinOrLeave: JoinOrLeave, byWho: Who, anyTx: Opt[(SiteTx, StaleStuff)])  // REFACTOR use TxCtx\n           : JoinLeavePageDbResult = {\n \n-    if (byWho.isGuest)\n-      throwForbidden(\"EsE2GK7S\", \"Guests cannot add/remove people to pages\")\n+    // (Later, maybe allow anons (conf val). [anon_priv_msgs])\n+    if (byWho.isGuestOrAnon)\n+      throwForbidden(\"EsE2GK7S\", \"Guests and anons cannot add/remove people to pages\")\n \n     if (userIds.size > 50)\n       throwForbidden(\"EsE5DKTW02\", \"Cannot add/remove more than 50 people at a time\")\n@@ -2162,11 +2177,13 @@ trait UserDao {\n \n \n   def savePatPerms(patId: PatId, perms: PatPerms, byWho: Who): U = {\n-    _editMemberThrowUnlessSelfStaff(patId, byWho, \"TyE3ASHW6703\", \"edit pat perms\") {\n+    _editMemberThrowUnlessSelfStaff(patId, byWho, \"TyE3ASHW6703\", \"edit pat perms\",\n+                                      mustBeAdmin = true) {\n           case EditMemberCtx(tx, staleStuff, memberInclDetails, _) =>\n       val groupBef: Group = memberInclDetails.asGroupOr(IfBadAbortReq)\n       val groupAft = groupBef.copy(perms = perms)\n-      tx.updateMemberInclDetails(groupAft)\n+      val validGroup = groupAft.checkValid(IfBadAbortReq)\n+      tx.updateGroup(validGroup)\n       staleStuff.addPatIds(Set(patId))\n     }\n     memCache.remove(allGroupsKey) ; CLEAN_UP // use staleStuff instead, new fn needed?\n@@ -2367,10 +2384,10 @@ trait UserDao {\n         siteId = siteId,\n         id = AuditLogEntry.UnassignedId,\n         didWhat = AuditLogEntryType.DeleteUser,\n-        doerId = byWho.id,\n+        doerTrueId = byWho.trueId,\n         doneAt = tx.now.toJavaDate,\n         browserIdData = byWho.browserIdData,\n-        targetUserId = Some(userId))\n+        targetPatTrueId = Some(memberBefore.trueId2))\n \n       // Right now, members must have email addresses. Later, don't require this, and\n       // skip inserting any dummy email here. [no-email]\n@@ -2474,7 +2491,7 @@ trait UserDao {\n     * @param block â€” EditMemberCtx(tx, staleStuff, member-to-edit, reqer) => side effects...  .\n     */\n   private def _editMemberThrowUnlessSelfStaff[R](userId: UserId, byWho: Who, errorCode: St,\n-        mayNotWhat: St)(block: EditMemberCtx => U): MemberVb = {\n+        mayNotWhat: St, mustBeAdmin: Bo = false)(block: EditMemberCtx => U): MemberVb = {\n     SECURITY // review all fns in UserDao, and in UserController, and use this helper fn?\n     // Also create a helper fn:  readMemberThrowUnlessSelfStaff2 ...\n \n@@ -2487,9 +2504,12 @@ trait UserDao {\n \n     writeTx { (tx, staleStuff) =>\n       val me = tx.loadTheUser(byWho.id)\n+      throwForbiddenIf(mustBeAdmin && !me.isAdmin, \"TyE0ADM0536\",\n+            s\"Only admins may $mayNotWhat\")\n+      // Split mods into \"moderator\" and \"[power_mod]erator\" trust levels â€” only\n+      // the latter will be able to do this:  (so current mods = power mods)\n       throwForbiddenIf(me.id != userId && !me.isStaff,\n           errorCode + \"-ISOTR\", s\"May not $mayNotWhat for others\")\n-\n       // [pps] load MemberInclDetails instead, and hand to the caller? (user or group incl details)\n       // Would be more usable; sometimes loaded anyway [7FKFA20]\n       val member = tx.loadTheMemberInclDetails(userId)"
    },
    {
      "sha": "e23d8c01054ce3881207f912cb79dd4170beb8c5",
      "filename": "appsv/server/debiki/settings.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fsettings.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Fdebiki%2Fsettings.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fsettings.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -134,7 +134,7 @@ trait AllSettings extends DiscProps {\n \n \n   // UX settings (could add a UserId column so people can override\n-  // some (not all) of these?) â€” Yes, in the distant future, see:  [disc_props_view_stats]\n+  // some (not all) of these?), see:  [disc_props_view_stats]\n   // -----------------------------\n   def forumMainView: String\n   def forumTopicsSortButtons: String"
    },
    {
      "sha": "e22f181328af7286b520710d1fefc37f7c02e314",
      "filename": "appsv/server/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 111,
      "deletions": 22,
      "changes": 133,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -163,14 +163,42 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  def JsKnownAnonym(anon: Anonym): JsObject = {  // ts: KnownAnonym\n+    // Bit hacky: Pretend we're showing this anonym for the person behind the anonym.\n+    // Later, maybe incl a boolean flag instead?\n+    JsPat(anon, TagsAndBadges.None, toShowForPatId = Some(anon.anonForPatId))\n+  }\n+\n+\n+  /*  rm\n+  def JsAnon(anon: Anonym, inclRealId: Bo = false): JsObject = {  // ts: Anonym\n+    var json = Json.obj(\n+          \"id\" -> JsNumber(anon.id),\n+          \"isAnon\" -> JsTrue,\n+          \"isEmailUnknown\" -> JsTrue,  // or skip?\n+          )\n+    if (inclRealId) {\n+      json += \"anonForId\" -> JsNumber(anon.anonForPatId)\n+      //json += \"anonOnPageId\" -> JsString(anon.anonOnPageId),\n+      json += \"anonStatus\" -> JsNumber(anon.anonStatus.toInt)\n+    }\n+    if (anon.isGone) {\n+      json += \"isGone\" -> JsTrue\n+    }\n+    json\n+  } */\n+\n+\n   def JsUserOrNull(user: Option[Participant]): JsValue =  // RENAME to JsParticipantOrNull\n     user.map(JsUser(_)).getOrElse(JsNull)\n \n \n-  def JsPat(pat: Pat, tagAndBadges: TagsAndBadges): JsObject = {  // Typescript: Pat\n-    JsUser(pat, tagAndBadges.badges.getOrElse(pat.id, Nil))\n+  def JsPat(pat: Pat, tagAndBadges: TagsAndBadges,  // Typescript: Pat\n+        toShowForPatId: Opt[PatId] = None): JsObject = {\n+    JsUser(pat, tagAndBadges.badges.getOrElse(pat.id, Nil), toShowForPatId = toShowForPatId)\n   }\n \n+\n   /// As little info about someone as possible â€” just name and tiny avatar. Currently\n   /// used for showing in the forum topic list.\n   ///\n@@ -185,18 +213,40 @@ object JsX {   RENAME // to JsonPaSe\n     json\n   }\n \n-  def JsUser(user: Pat, tags: Seq[Tag] = Nil): JsObject = {  //RENAME to JsPat, ts: Pat\n+  /** If 'user' is an anonym or pseudonym, then, hens true id is *not* included, unless\n+    * toShowForPatId is hens true id  (or, later, if toShowForPatId has permission to\n+    * see anonyms ANON_UNIMPL).  That is, if the person requesting to see a page,\n+    * is the the same the ano/pseudony, then, the ano/pseudonym's true id is included\n+    * so that that person can see hens own anonym(s).\n+    */\n+  def JsUser(user: Pat, tags: Seq[Tag] = Nil, toShowForPatId: Opt[PatId] = None): JsObject = {  //RENAME to JsPat, ts: Pat\n     var json = JsPatNameAvatar(user)\n     user.smallAvatar foreach { uploadRef =>\n       json += \"avatarSmallHashPath\" -> JsString(uploadRef.hashPath)\n     }\n \n-    if (user.isGuest) {\n+    if (user.isAnon) {\n+      json += \"isAnon\" -> JsTrue\n+      // If this anonym is user `toShowForPatId`s own anonym, include details â€” so\n+      // that user can see it's hens own anonym.\n+      toShowForPatId foreach { showForPatId: PatId =>\n+        user match {\n+          case anon: Anonym =>\n+            if (anon.anonForPatId == showForPatId) {\n+              json += \"anonForId\" -> JsNumber(anon.anonForPatId)\n+              //on += \"anonOnPageId\" -> JsString(anon.anonOnPageId),\n+              json += \"anonStatus\" -> JsNumber(anon.anonStatus.toInt)\n+            }\n+          case x => die(s\"An isAnon pat isn't an Anonym, it's an: ${classNameOf(x)}\")\n+        }\n+      }\n+    }\n+    else if (user.isGuest) {\n       json += \"isGuest\" -> JsTrue\n     }\n     else {\n       require(user.isAuthenticated, \"EdE8GPY4\")\n-      json += \"isAuthenticated\" -> JsTrue  // COULD remove this, client side, use !isGuest instead\n+      json += \"isAuthenticated\" -> JsTrue  // COULD_OPTIMIZE remove this, client side, use !isGuest instead\n     }\n \n     if (user.email.isEmpty) {\n@@ -237,10 +287,14 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  /** [Dupl_perms] Nowadays, could be enough with reqrPerms â€” and remove\n+    * callerIsAdmin/Staff?\n+    */\n   def JsUserInclDetails(user: UserInclDetails,\n         usersById: Map[UserId, User], // CLEAN_UP remove, send back a user map instead\n         groups: immutable.Seq[Group],\n         callerIsAdmin: Bo, callerIsStaff: Bo = false, callerIsUserHerself: Bo = false,\n+        reqrPerms: Opt[EffPatPerms] = None,\n         anyStats: Option[UserStats] = None, inclPasswordHash: Bo = false)\n       : JsObject = {\n     def callerIsStaff_ = callerIsAdmin || callerIsStaff\n@@ -275,32 +329,47 @@ object JsX {   RENAME // to JsonPaSe\n     userJson = userJson.addAnyInt32(\"maySendMeDmsTrLv\", user.privPrefs.maySendMeDmsTrLv)\n     userJson = userJson.addAnyInt32(\"mayMentionMeTrLv\", user.privPrefs.mayMentionMeTrLv)\n \n-    if (callerIsStaff_ || callerIsUserHerself) {\n-      val anyReviewer = user.reviewedById.flatMap(usersById.get)\n+    val reqrIsStaffOrSelf = callerIsStaff_ || callerIsUserHerself\n+    val maySeeEmailAdrs = reqrPerms.exists(_.canSeeOthersEmailAdrs)\n+\n+    if (reqrIsStaffOrSelf || maySeeEmailAdrs) {\n+      // May see local part is tested here:\n+      //      - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTHIDELOCALEMLPART\n       val safeEmail =\n-        if (callerIsAdmin || callerIsUserHerself) user.primaryEmailAddress\n+        if (callerIsAdmin || callerIsUserHerself || maySeeEmailAdrs) user.primaryEmailAddress\n         else hideEmailLocalPart(user.primaryEmailAddress)\n \n       userJson += \"email\" -> JsString(safeEmail)   // REMOVE\n-      userJson += \"emailAddress\" -> JsString(safeEmail)\n-      userJson += \"emailVerifiedAtMs\" -> JsDateMsOrNull(user.emailVerifiedAt)  // RENAME emailAddr...\n+      userJson += \"emailAddress\" -> JsString(safeEmail)  // RENAME to emailAdr\n+      userJson += \"emailVerifiedAtMs\" -> JsDateMsOrNull(user.emailVerifiedAt)  // RENAME to emailAdr...\n       userJson += \"emailVerifiedAt\" -> JsDateMsOrNull(user.emailVerifiedAt)\n-      userJson += \"hasPassword\" -> JsBoolean(user.passwordHash.isDefined)\n-      if (inclPasswordHash)\n-        userJson += \"passwordHash\" -> JsStringOrNull(user.passwordHash)\n       userJson += \"emailNotfPrefs\" -> JsNumber(user.emailNotfPrefs.toInt)\n+    }\n+\n+    if (reqrIsStaffOrSelf) {\n+      // Don't incl these though, even if the reqr may see pats email adr.\n+      // These are partly about the group(s), not just pat, and it's possible that\n+      // the reqr shouldn't know anything about these groups?\n       userJson += \"summaryEmailIntervalMinsOwn\" -> JsNumberOrNull(user.summaryEmailIntervalMins)\n       if (groups.nonEmpty) userJson += \"summaryEmailIntervalMins\" ->\n         JsNumberOrNull(user.effectiveSummaryEmailIntervalMins(groups))\n       userJson += \"summaryEmailIfActiveOwn\" -> JsBooleanOrNull(user.summaryEmailIfActive)\n       if (groups.nonEmpty) userJson += \"summaryEmailIfActive\" ->\n         JsBooleanOrNull(user.effectiveSummaryEmailIfActive(groups))\n+\n+      userJson += \"hasPassword\" -> JsBoolean(user.passwordHash.isDefined)\n+      if (inclPasswordHash)\n+        userJson += \"passwordHash\" -> JsStringOrNull(user.passwordHash)\n+\n       userJson += \"uiPrefs\" -> user.uiPrefs.getOrElse(JsEmptyObj)\n       userJson += \"isApproved\" -> JsBooleanOrNull(user.isApproved)\n       userJson += \"approvedAtMs\" -> JsDateMsOrNull(user.reviewedAt)\n       userJson += \"approvedAt\" -> JsDateMsOrNull(user.reviewedAt)\n       userJson += \"approvedById\" -> JsNumberOrNull(user.reviewedById)\n+\n+      val anyReviewer = user.reviewedById.flatMap(usersById.get)\n       userJson += \"approvedByName\" -> JsStringOrNull(anyReviewer.flatMap(_.fullName))\n+\n       userJson += \"approvedByUsername\" -> JsStringOrNull(anyReviewer.flatMap(_.username))\n       userJson += \"suspendedAtEpoch\" -> DateEpochOrNull(user.suspendedAt)\n       userJson += \"suspendedAtMs\" -> DateEpochOrNull(user.suspendedAt)\n@@ -317,7 +386,7 @@ object JsX {   RENAME // to JsonPaSe\n       userJson += \"lockedThreatLevel\" -> JsNumberOrNull(user.lockedThreatLevel.map(_.toInt))\n \n       anyStats foreach { stats =>\n-        userJson += \"anyUserStats\" -> JsUserStats(stats, isStaffOrSelf = true)\n+        userJson += \"anyUserStats\" -> JsUserStats(stats, isStaffOrSelf = true, reqrPerms)\n       }\n     }\n \n@@ -339,7 +408,7 @@ object JsX {   RENAME // to JsonPaSe\n \n \n   /// ts: Session\n-  def JsSession(sess: TySessionInDbMaybeBad, inclPart1: Bo = true): JsObject = {\n+  def JsSession(sess: TySessionInDbMaybeBad, inclPart1: Bo): JsObject = {\n     // Don't include the actual session id. (That is, exclude parts 2 â€“ 5. *Could* maybe\n     // theoretically include them, since they're hashes, but bad idea, and not needed.)\n     var json = Json.obj(\n@@ -356,7 +425,10 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n-  def JsUserStats(stats: UserStats, isStaffOrSelf: Boolean): JsObject = {\n+  /** [Dupl_perms] Nowadays, could be enough with reqrPerms â€” and remove\n+    * callerIsAdmin/Staff?\n+    */\n+  def JsUserStats(stats: UserStats, isStaffOrSelf: Bo, reqrPerms: Opt[EffPatPerms]): JsObject = {\n     val tourTipsIds: immutable.Seq[String] = stats.tourTipsSeen getOrElse Nil\n     var result = Json.obj(\n       \"userId\" -> stats.userId,\n@@ -381,8 +453,14 @@ object JsX {   RENAME // to JsonPaSe\n       \"numLikesGiven\" -> stats.numLikesGiven,\n       \"numLikesReceived\" -> stats.numLikesReceived,\n       \"numSolutionsProvided\" -> stats.numSolutionsProvided,\n-      \"tourTipsSeen\" -> JsArray(tourTipsIds.map(JsString)))\n+      )\n+\n     if (isStaffOrSelf) {\n+      result += \"tourTipsSeen\" -> JsArray(tourTipsIds.map(JsString))\n+      // Be careful with revealing this â€” in a small forum, could reveal who\n+      // an anonym is (if you reply, and immediately lastEmailedAt changes,\n+      // for a person you suspected was the anonym â€” indicating that hen got\n+      // a reply notification). [deanon_risk]\n       result += \"lastEmailedAt\" -> JsWhenMsOrNull(stats.lastEmailedAt)\n       result += \"lastSummaryEmailAt\" -> JsWhenMsOrNull(stats.lastSummaryEmailAt)\n       result += \"nextSummaryEmailAt\" -> JsWhenMsOrNull(stats.nextSummaryEmailAt)\n@@ -467,7 +545,9 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n-  def JsGroupInclDetails(group: Group, inclEmail: Boolean): JsObject = {\n+  // If ever using for sth else than exporting dump files, then,\n+  // sometimes exclude  canSeeOthersEmailAdrs  below.  [can_see_who_can_see_email_adrs]\n+  def JsGroupInclDetailsForExport(group: Group): JsObject = {\n     var json = JsGroup(group)\n     json += \"extId\" -> JsStringOrNull(group.extId)\n     json += \"createdAt\" -> JsWhenMs(group.createdAt)\n@@ -481,19 +561,24 @@ object JsX {   RENAME // to JsonPaSe\n     val perms = group.perms\n     json += \"maxUploadBytes\" -> JsNumberOrNull(perms.maxUploadBytes)\n     json += \"allowedUplExts\" -> JsStringOrNull(perms.allowedUplExts)\n+\n+    perms.canSeeOthersEmailAdrs.foreach(v =>\n+          json += \"canSeeOthersEmailAdrs\" -> JsBoolean(v))\n+\n     json\n   }\n \n \n \n-  def parsePatPerms(jsVal: JsValue, siteId: SiteId): PatPerms = {\n+  def parsePatPerms(jsVal: JsValue, siteId: SiteId)(mab: MessAborter): PatPerms = {\n     val jsob = asJsObject(jsVal, \"pat perms\")\n     val anyMaxUplBytes = parseOptI32(jsob, \"maxUploadBytes\")\n     val anyExts = parseOptSt(jsob, \"allowedUplExts\")\n-    // IfBadAbortReq should be a param. Have a look at all parse fns? [mess_aborter]\n-    PatPerms.create(IfBadAbortReq,\n+    PatPerms.create(mab,\n           maxUploadBytes = anyMaxUplBytes,\n-          allowedUplExts = anyExts)\n+          allowedUplExts = anyExts,\n+          canSeeOthersEmailAdrs = parseOptBo(jsob, \"canSeeOthersEmailAdrs\"),\n+          )\n   }\n \n \n@@ -562,6 +647,9 @@ object JsX {   RENAME // to JsonPaSe\n       \"frequentPosterIds\" -> pageMeta.frequentPosterIds,\n       \"layout\" -> pageMeta.layout.toInt,\n       \"comtOrder\" -> JsNum32OrNull(pageMeta.comtOrder.map(_.toInt)),\n+      \"comtsStartHidden\" -> JsNum32OrNull(pageMeta.comtsStartHidden.map(_.toInt)),\n+      \"comtsStartAnon\" -> JsNum32OrNull(pageMeta.comtsStartAnon.map(_.toInt)),\n+      \"newAnonStatus\" -> JsNum32OrNull(pageMeta.newAnonStatus.map(_.toInt)),\n       //\"comtNesting\" -> pageMeta.comtNesting,\n       \"forumSearchBox\" -> JsNum32OrNull(pageMeta.forumSearchBox),\n       \"forumMainView\" -> JsNum32OrNull(pageMeta.forumMainView),\n@@ -601,6 +689,7 @@ object JsX {   RENAME // to JsonPaSe\n   }\n \n \n+  RENAME // add suffix:  JsPostVb_butNoPatRels  ?\n   def JsPostInclDetails(post: Post): JsObject = {\n     COULD_OPTIMIZE // Skip null / false fields, so less json.\n     // E.g. excl currRevSourcePatch, instead of 'currRevSourcePatch: null'."
    },
    {
      "sha": "0d00b1571a288dbec5ba188a56ba26fd1e51181c",
      "filename": "appsv/server/talkyard/server/api/ActionParser.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FActionParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FActionParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FActionParser.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -43,7 +43,11 @@ case class ActionParser(dao: SiteDao) {\n     // For now\n     if (pat.isBuiltIn)\n       return Bad(o\"\"\"Currently built-in users cannot do things via\n-            the API. Set asWho to a human's user account instead [TyEAPIUSRGST]\"\"\")\n+            the API. Set asWho to a human's user account instead [TyEAPIUSRBLTIN]\"\"\")\n+\n+    if (pat.isAnon)\n+      return Bad(o\"\"\"Anonyms don't call the API â€” instead, the real user does,\n+            and specifies that the actions should be done anonymously. [TyEAPIUSRANON]\"\"\")\n \n     // Guests may not do lots of things.\n     if (pat.isGuest) {\n@@ -52,7 +56,8 @@ case class ActionParser(dao: SiteDao) {\n         // case ActionType.SetVote =>\n         //   // Fine, guests may Like vote.\n         case _ =>\n-          return Bad(s\"Participant $asWhoSt is a guest and therefore may not: $doWhatSt\")\n+          return Bad(s\"Participant $asWhoSt is a guest and therefore may not: ${\n+                doWhatSt} [TyEAPIUSRGGST]\")\n       }\n     }\n "
    },
    {
      "sha": "4d248c5727788580b1d80367256a0e6d24090f92",
      "filename": "appsv/server/talkyard/server/api/ListController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -46,7 +46,7 @@ class ListController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n \n   private def listThingsImpl(request: JsonPostRequest): Result = {\n-    import request.{body, dao, requester}\n+    import request.{body, dao, requester, reqrInf}\n \n     val pretty = (body \\ \"pretty\").asOpt[Bo].getOrElse(false)\n     val listQueryJson = (body \\ \"listQuery\").as[JsObject]\n@@ -235,17 +235,19 @@ class ListController @Inject()(cc: ControllerComponents, edContext: TyContext)\n               topicsFiltered, dao, JsonConf.v0_0(pretty = pretty), authzCtx)\n \n       case Posts =>\n-        val result: LoadPostsResult = dao.loadPostsMaySeeByQuery(\n-              requester, OrderBy.MostRecentFirst, limit = 25,\n+        val result: LoadPostsResult = dao.loadPostsMaySeeByQuery(PostQuery.AllPosts(\n+              reqrInf, orderBy = OrderBy.MostRecentFirst, limit = 25,\n+              // The true authors aren't shown. [list_anon_posts]\n+              inclAnonPosts = true,\n               // API consumers probably want only approved posts. [4946RKTT2]\n-              inclUnapprovedPosts = false,\n+              inclUnapproved = false,\n               // But they do want unlisted post, probably? Only if is staff.\n               inclUnlistedPagePosts = requester.map(_.isStaff) is true,\n               // Or maybe not include title posts? The fact that titles are posts, is an\n               // implementation detail? Not impossible this'll change, and there'll\n               // be a posts3 title field, instead. [DONTLISTTTL]\n               inclTitles = true, onlyEmbComments = false,\n-              writtenById = None)\n+              ))\n \n         PostsListFoundJson.makePostsListFoundResponse(result, dao,\n               JsonConf.v0_0(pretty = pretty), authzCtx)"
    },
    {
      "sha": "bff7e7ae31829e0b6b9a774207c248777e5d8667",
      "filename": "appsv/server/talkyard/server/api/PostsListFoundJson.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FPostsListFoundJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FPostsListFoundJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FPostsListFoundJson.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -60,6 +60,8 @@ object PostsListFoundJson {\n \n     // --- Load authors\n \n+    // Later also load assignees, not just authors?  [incl_assignees]\n+    // For that, use  addVisiblePatIdsTo().  Should that be a param?\n     val authorIds = postsFound.map(_.createdById).toSet\n     val authorsById: Map[UserId, Participant] = dao.getParticipantsAsMap(authorIds)\n "
    },
    {
      "sha": "a4e8e9cdf0cf897fa1a890808d0aaf78619a282e",
      "filename": "appsv/server/talkyard/server/api/ThingsFoundJson.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FThingsFoundJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FThingsFoundJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FThingsFoundJson.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -102,6 +102,8 @@ object ThingsFoundJson {  RENAME // to  PagesFoundJson ?\n \n     // --- Load authors\n \n+    COULD // also [incl_assignees], not just authors.\n+\n     val pageAuthorIds = pageFoundStuffs.map(_.pageStuff.authorUserId).toSet\n \n     val postIdsFound: Set[PostId] =\n@@ -255,6 +257,7 @@ object ThingsFoundJson {  RENAME // to  PagesFoundJson ?\n \n     if (pat.isGroup) json += \"isGroup\" -> JsTrue\n     if (pat.isGuest) json += \"isGuest\" -> JsTrue\n+    if (pat.isAnon) json += \"isAnon\" -> JsTrue\n \n     avatarUrlPrefix foreach { avUrlPerf =>\n       pat.tinyAvatar foreach { tinyAv =>\n@@ -270,5 +273,3 @@ object ThingsFoundJson {  RENAME // to  PagesFoundJson ?\n   }\n \n }\n-\n-"
    },
    {
      "sha": "8baecd80b7ecd6a1a75c8d3abce919335f319909",
      "filename": "appsv/server/talkyard/server/authz/Authz.scala",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthz.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -51,8 +51,11 @@ sealed trait AuthzCtx {\n     if (requester.exists(_.isGroup)) {\n       die(\"TyEs024HRS25\", \"Trying to authz as a group\")  // [imp-groups]\n     }\n+    else if (requester.exists(_.isAnon)) {\n+      die(\"TyEs024HRS28\", \"Trying to authz as an anonym\")\n+    }\n     else if (groupIdsUserIdFirst.length >= 2) {\n-      dieIf(requester.map(_.id) isNot groupIdsUserIdFirst(0), \"TyE2AKBR05\")\n+      dieIf(requester.map(_.id) isNot groupIdsUserIdFirst.head, \"TyE2AKBR05\")\n       groupIdsUserIdFirst.tail\n     }\n     else {\n@@ -178,17 +181,20 @@ object Authz {\n \n     var maxUpl: Opt[i32] = Some(0)\n     val uplExts = MutHashSet[St]()\n+    var canSeeOthersEmailAdrs = false\n     for (group <- groupsAnyOrder) {\n       val perms = group.perms\n       maxUpl = maxOfAnyInt32(maxUpl, perms.maxUploadBytes)\n       uplExts ++= perms.allowedUplExtensionsAsSet\n+      canSeeOthersEmailAdrs ||= perms.canSeeOthersEmailAdrs.is(true) || group.isAdmin\n     }\n \n     maxUpl = minOfAnyInt32(maxUpl, Some(permsOnSite.maxUploadSizeBytes))\n \n     EffPatPerms(\n           maxUploadSizeBytes = maxUpl.get,\n-          allowedUploadExtensions = uplExts.toSet)\n+          allowedUploadExtensions = uplExts.toSet,\n+          canSeeOthersEmailAdrs = canSeeOthersEmailAdrs)\n   }\n \n \n@@ -390,10 +396,19 @@ object Authz {\n   }\n \n \n+  /* Maybe later:\n+  def mayAlterPost((    [alterPage]\n+        ...\n+        ): MayMaybe = {\n+  }\n+  */\n+\n+\n   def mayEditPost(\n     userAndLevels: UserAndLevels,\n     groupIds: immutable.Seq[GroupId],\n     post: Post,\n+    otherAuthor: Opt[Pat],\n     pageMeta: PageMeta,\n     privateGroupTalkMemberIds: Set[UserId],\n     inCategoriesRootLast: immutable.Seq[Category],\n@@ -411,7 +426,11 @@ object Authz {\n     if (mayWhat.maySee isNot true)\n       return NoNotFound(s\"TyEM0ED0SEE-${mayWhat.debugCode}\")\n \n-    val isOwnPost = user.id == post.createdById  // [8UAB3WG2]\n+    val isOwnPost = user.id == post.createdById || otherAuthor.exists({ // [8UAB3WG2]\n+      case anon: Anonym => anon.anonForPatId == user.id\n+      case _ => false\n+    })\n+\n     if (isOwnPost) {\n       // Fine, may edit.\n       // But shouldn't:  isOwnPost && mayWhat[.mayEditOwn] ?  (2020-07-17)"
    },
    {
      "sha": "f4da469e968c099d3e78a8dc2dea558a7aee80f1",
      "filename": "appsv/server/talkyard/server/authz/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fauthz%2FAuthzSiteDaoMixin.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -332,6 +332,9 @@ trait AuthzSiteDaoMixin {\n     TESTS_MISSING // add security test, not e2e test?\n     val postId = task.postId getOrElse { return }\n     val post = loadPostByUniqueId(postId) getOrDie \"TyE5WKBGP\"  // there's a foreign key\n+    // If one has activated a pseudonym, one might need to activate one's main user account\n+    // instead, to get to review this. â€” But won't the access-denied error message confusing?\n+    // Should also lookup one's true account and check if it has access. [pseudonyms_later]\n     val requester = getTheParticipant(forWho.id)\n     val (result, debugCode) =\n       maySeePostImpl(post.pageId, postNr = PageParts.NoNr, Some(requester), anyPost = Some(post),"
    },
    {
      "sha": "67a373a786854b78647611eb22610f2ec984e2a8",
      "filename": "appsv/server/talkyard/server/dao/StaleStuff.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fdao%2FStaleStuff.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -145,6 +145,10 @@ class StaleStuff {\n     stalePages.filter(p => p.pageModified).map(_.pageId).toSet\n \n   /**\n+    * Currently doesn't uncache any topic list page where this page is shown. You might\n+    * need to call:  RenderedPageHtmlDao.uncacheForums()  [make_salestuff_uncache_forums]\n+    * if somehting visible in a topic list page, changes.\n+    *\n     * @param memCacheOnly If page_meta_t.version_c (pages3.version) got bumped,\n     *   that's enough â€” then it's different from page_html_t.version_c already\n     *   and the database \"knows\" the cached html is out-of-date."
    },
    {
      "sha": "8a779f75b2995afc214100c71eb35f4e99a74bb3",
      "filename": "appsv/server/talkyard/server/emails/in/EmailsInController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Femails%2Fin%2FEmailsInController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Femails%2Fin%2FEmailsInController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Femails%2Fin%2FEmailsInController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -274,7 +274,7 @@ class EmailsInController @Inject()(cc: ControllerComponents, edContext: TyContex\n       return Bad(s\"s$siteId: Page ${post.pageId} missing for AboutPost notf ${notf.id}\")\n     }\n \n-    val anyAuthor = dao.getUser(post.createdById)\n+    val anyAuthor = dao.getParticipant(post.createdById)\n     val byAuthorName = anyAuthor map { a => s\"by ${a.usernameOrGuestName},\" } getOrElse \"\"\n     val notfRenderer = NotfHtmlRenderer(dao, Some(origin))\n     val url = notfRenderer.postUrl(pageMeta, post)"
    },
    {
      "sha": "6bd3b965972ccee27cb267a1b3735646c67e5ebc",
      "filename": "appsv/server/talkyard/server/events/EventsParSer.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fevents%2FEventsParSer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fevents%2FEventsParSer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fevents%2FEventsParSer.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -30,7 +30,8 @@ import play.api.libs.json._\n case class EventAndJson(event: Event, json: JsObject)\n \n \n-/** Parses and serializes JSON for events.\n+/** Parses and serializes JSON for events  (software events, e.g. a new comment,\n+  * or a user joined etc. Not in-real-life events).\n   */\n object EventsParSer {\n "
    },
    {
      "sha": "a66d9046b8bfadbc308c041ec33b5e4385e9f413",
      "filename": "appsv/server/talkyard/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -99,7 +99,6 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   def reqer: Opt[Pat] = user  // shorter, nicer. \"Req\" = request, + \"er\" = \"requester\"\n                         RENAME // to  anyReqer?\n   def requesterOrUnknown: Participant = user getOrElse UnknownParticipant\n-  def requesterIdOrUnknown: UserId = user.map(_.id) getOrElse UnknownUserId\n   def theRequester: Participant = theUser\n   def theReqer: Pat = theUser  // shorter, better\n \n@@ -111,11 +110,17 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n \n   lazy val siteSettings: EffectiveSettings = dao.getWholeSiteSettings()\n \n+  @deprecated(\"use reqrInf instead\")\n+  def reqrIds: ReqrId = who  // better to end w 's'? Since incl many ids: pat id, session id.\n+  @deprecated(\"use reqrInf instead\")\n   def reqrId: ReqrId = who\n-  @deprecated(\"use reqrId: ReqrId instead\", \"now\")\n-  def who = Who(theUserId, theBrowserIdData)\n+  @deprecated(\"use reqrId: ReqrId instead. No, use reqrInf\", \"now\")\n+  def who = Who(theUser.trueId2, theBrowserIdData)\n \n-  def whoOrUnknown: Who = Who(requesterIdOrUnknown, theBrowserIdData)\n+  def whoOrUnknown: Who = Who(requesterOrUnknown.trueId2, theBrowserIdData)\n+\n+  // Better than Who â€” the latter just discards requesterOrUnknown, why?\n+  def reqrInf: ReqrInf = ReqrInf(requesterOrUnknown, theBrowserIdData)\n \n   def authzCtxWithReqer: AuthzCtxWithReqer = dao.getAuthzCtxWithReqer(theRequester)\n   lazy val authzContext: ForumAuthzContext = dao.getForumAuthzContext(requester)\n@@ -128,6 +133,7 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   // Hmm will need this also for WebSocket? [WSSPAM] Remember this, from\n   // the initial HTTP upgrade request?\n   def spamRelatedStuff = SpamRelReqStuff(\n+    browserIdData = theBrowserIdData,\n     userAgent = headers.get(\"User-Agent\"),\n     referer = request.headers.get(\"referer\"),\n     uri = uri,\n@@ -142,6 +148,7 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n   def theUserId: UserId = theUser.id\n   def theRequesterId: UserId = theUser.id\n   def theReqerId: PatId = theRequesterId // shorter, nice\n+  def theReqerTrueId: TrueId = theUser.trueId2\n \n   def userAndLevels: AnyUserAndThreatLevel = {\n     val threatLevel = user match {\n@@ -165,14 +172,14 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n \n   def theMember: User = theUser match {\n     case m: User => m\n+    case _: Anonym => throwForbidden(\"TyE5YKJ36\", \"Not a user, but an anonym\")\n     case _: Guest => throwForbidden(\"EsE5YKJ37\", \"Not authenticated\")\n     case _: Group => throwForbidden(\"TyE5YKJ38\", \"Not a user, but a group\")\n     case UnknownParticipant => throwForbidden(\"TyE5YKJ39\", \"Unknown participant\")\n   }\n \n   def anyRoleId: Option[UserId] = user.flatMap(_.anyMemberId)\n   def theRoleId: UserId = anyRoleId getOrElse throwForbidden(\"DwE86Wb7\", \"Not authenticated\")\n-\n   def isGuest: Boolean = user.exists(_.isGuest)\n   def isStaff: Boolean = user.exists(_.isStaff)\n "
    },
    {
      "sha": "4ac9418a8ece5c61ecc90c1271b8d4e24a5a6797",
      "filename": "appsv/server/talkyard/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPlainApiActions.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -346,8 +346,14 @@ class PlainApiActions(\n \n       throwForbiddenIf(user.id == SystemUserId,\n         \"TyEAPISYSUSR_\", s\"Call the API as Sysbot (id 2), not System (id 1)\")\n+\n+      // It's ok to show the user's name â€” the requester has an API secret. More likely,\n+      // it's a software bug in the requester's code.\n+      // (However, if per pat API secrets, then, maybe don't show the name here.\n+      // [per_pat_api_secrets])\n       throwForbiddenIf(user.id < Group.EveryoneId && user.id != SysbotUserId,\n-        \"TyEAPIBADUSR_\", s\"Not allowed to call the API as user ${user.usernameOrGuestName}\")\n+        \"TyEAPIBADUSR_\", s\"Not allowed to call the API as user ${user.usernameOrGuestName\n+              } of type ${user.accountType}\")\n \n       // See: [non_adm_api_usr] for code that does slightly different things\n       // if isn't sysbot.\n@@ -493,6 +499,12 @@ class PlainApiActions(\n           xsrfOk: XsrfOk, browserId: Option[BrowserId], block: ApiRequest[A] => Future[Result])\n           : Future[Result] = {\n \n+      if (anyUserMaybeSuspended.exists(_.isAnon)) {\n+        // Client side bug?\n+        return Future.successful(\n+              ForbiddenResult(\"TyEUSRANON\", \"Anonyms cannot call the server themselves\"))\n+      }\n+\n       // Maybe the user was logged in in two different browsers, and deleted hens account\n       // in one browser and got logged out, when this request was going on already?\n       if (anyUserMaybeSuspended.exists(_.isDeleted)) {\n@@ -664,6 +676,9 @@ class PlainApiActions(\n           goToHomepageOrIfApiReqThen(throwForbidden(\n                 \"TyE0APPRVD2\", \"Your user account has not yet been approved\"))\n \n+        // Already rejected at the start of this fn..\n+        dieIf(anyUser.exists(_.isAnon), \"TyE4J3MRG5\")\n+\n         if (anyUser.exists(_.isGuest) && !siteSettings.isGuestLoginAllowed) {\n           throwForbiddenIf(isApiReq,\n                 \"TyE7JYK4\", o\"\"\"Guest access has been disabled, but you're logged in"
    },
    {
      "sha": "6472e56655cc4d7b9903a8b6ebc45339b11a2823",
      "filename": "appsv/server/talkyard/server/notf/NotificationGenerator.scala",
      "status": "modified",
      "additions": 105,
      "deletions": 21,
      "changes": 126,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotificationGenerator.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -17,13 +17,15 @@\n \n package talkyard.server.notf\n \n+import com.debiki.core\n import com.debiki.core.Prelude._\n import com.debiki.core._\n import debiki._\n import debiki.Globals.isDevOrTest\n import debiki.EdHttp.throwForbiddenIf\n import talkyard.server.notf.NotificationGenerator._\n import talkyard.server.rendr.NashornParams\n+\n import scala.collection.{immutable, mutable}\n import scala.util.matching.Regex\n \n@@ -76,9 +78,12 @@ case class NotificationGenerator(\n   // a mod task notf), so the post appears in hens notification list, in case\n   // hen wants to find it again some time later (since it was a reply to hen).\n   //\n+  RENAME // to skipPatIds or patIdsDone? Because also for aoviding notifying\n+  // one's own anons.\n   private var avoidDuplEmailToUserIds = new mutable.HashSet[UserId]()\n \n   private var nextNotfId: Option[NotificationId] = None\n+  // Might be an anon.  ANON_UNIMPL. Make sure won't get notf to henself.\n   private var anyAuthor: Option[Participant] = None\n   private def author: Participant = anyAuthor getOrDie \"TyE5RK2WAG8\"\n   private def siteId = tx.siteId\n@@ -90,13 +95,27 @@ case class NotificationGenerator(\n       toCreate = notfsToCreate.toVector,\n       toDelete = notfsToDelete.toVector)\n \n-\n-  def generateForNewPost(page: Page, newPost: Post, sourceAndHtml: Option[SourceAndHtml],\n-        anyNewModTask: Option[ModTask], doingModTasks: Seq[ModTask] = Nil,\n-        skipMentions: Boolean = false): Notifications = {\n+  /**\n+    * @param page\n+    * @param newPost\n+    * @param sourceAndHtml\n+    * @param anyNewModTask\n+    * @param doingModTasks\n+    * @param skipMentions\n+    * @param postAuthor â€” If this is a new anonym's first post, the db tx inserting the anonym,\n+    *    is still ongoing â€” then, it's good to get the author.\n+    * @return\n+    */\n+  def generateForNewPost(page: Page, newPost: Post, sourceAndHtml: Opt[SourceAndHtml],\n+        anyNewModTask: Opt[ModTask], doingModTasks: Seq[ModTask] = Nil,\n+        skipMentions: Bo = false,\n+        postAuthor: Opt[Pat] = None): Notifications = {\n \n     require(page.id == newPost.pageId, \"TyE74KEW9\")\n     require(anyNewModTask.isEmpty || doingModTasks.isEmpty, \"TyE056KWH5\")\n+    require(postAuthor.forall(_.id == newPost.createdById),\n+          o\"\"\"s$siteId: Wrong postAuthor id: ${postAuthor.map(_.id)}, but\n+          newPost.createdById is ${newPost.createdById}) [TyEAUTID69256]\"\"\")\n \n     if (newPost.isTitle)\n       return generatedNotifications  // [no_title_notfs]\n@@ -108,6 +127,14 @@ case class NotificationGenerator(\n         return generatedNotifications\n     })\n \n+    anyAuthor = postAuthor orElse Some(tx.loadTheParticipant(newPost.createdById))\n+\n+    if (core.isDevOrTest) postAuthor foreach { postAuthorArg =>\n+      val postAuthorInDb = tx.loadTheParticipant(newPost.createdById)\n+      dieIf(postAuthorArg != postAuthorInDb, \"TyEAUTHORARGTX\", o\"\"\"\n+           postAuthorArg: $postAuthorArg  !=  postAuthorInDb: $postAuthorInDb\"\"\")\n+    }\n+\n     // A new embedded discussions page shouldn't generate a notification, [new_emb_pg_notf]\n     // because those pages are lazy auto created â€“ and uninteresting event.\n     // Instead, *the first reply* generates a new page notification.\n@@ -127,6 +154,7 @@ case class NotificationGenerator(\n         genOneNotfMaybe(\n               NotificationType.NewPostReviewTask,\n               to = staffUser,\n+              from = anyAuthor,\n               about = newPost,\n               isAboutModTask = true)\n       }\n@@ -148,8 +176,6 @@ case class NotificationGenerator(\n           newPost.id, NotificationType.NewPostReviewTask)\n     avoidDuplEmailToUserIds ++= oldNotfsToStaff.map(_.toUserId)\n \n-    anyAuthor = Some(tx.loadTheParticipant(newPost.createdById))\n-\n     anyNewTextAndHtml foreach { textAndHtml =>\n       require(newPost.approvedSource is textAndHtml.text,\n         s\"approvedSource: ${newPost.approvedSource}, textAndHtml.text: ${textAndHtml.text} [TyE3WASC2]\")\n@@ -166,15 +192,18 @@ case class NotificationGenerator(\n           : Unit = {\n       for {\n         replyingToPost <- ancestorsCloseFirst\n+        // ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n         if replyingToPost.createdById != newPost.createdById // not replying to oneself\n+        // ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n         if approverId != replyingToPost.createdById // the approver has already read newPost\n         replyingToUser <- tx.loadParticipant(replyingToPost.createdById)\n       } {\n         // (If the replying-to-post is by a group (currently cannot happen), and someone in the group\n         // replies to that group, then hen might get a notf about hens own reply. Fine, not much to\n         // do about that.)\n         _makeAboutPostNotfs(\n-              notfType, about = newPost, inCategoryId = page.categoryId, replyingToUser)\n+              notfType, about = newPost, inCategoryId = page.categoryId, replyingToUser,\n+              sentFrom = anyAuthor)\n       }\n     }\n \n@@ -198,7 +227,8 @@ case class NotificationGenerator(\n             anyNewTextAndHtml.map(_.usernameMentions) getOrElse findMentions(  // [nashorn_in_tx] [save_post_lns_mentions]\n                 newPost.approvedSource getOrDie \"DwE82FK4\", site, nashorn)\n \n-      var mentionedMembers: Set[MemberVb] = tx.loadMembersVbByUsername(mentionedUsernames).toSet\n+      var mentionedMembers: Set[MemberVb] =\n+            tx.loadMembersVbByUsername(mentionedUsernames).toSet\n \n       // Can create more mention aliases, like @new-members (= trust levels new & basic only),\n       // and @guests and @here-now and @everyone (= all members)\n@@ -225,6 +255,7 @@ case class NotificationGenerator(\n         // Then would have to remove a db constraint. Could do later. Right now feels best\n         // to keep it so it'll catch bugs.\n         // If mentioning a group that one is a member of, one shouldn't and won't be notified (5ABKRW2).\n+        // ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n         if userOrGroup.id != newPost.createdById  // poster mentions henself?\n         if !notfCreatedAlreadyTo(userOrGroup.id)\n         // Authz checks that we won't notify people outside a private chat\n@@ -356,7 +387,7 @@ case class NotificationGenerator(\n     //\n     val pageRepliersPrefsOnPage: Set[PageNotfPrefAndWhy] = {  // [interact_notf_pref]\n       if (page.meta.pageType.isChat) {\n-        // Chats tend to be chatty? Maybe better let the pages_pat_replied_to\n+        // Chats tend to be chatty? Maybe better let the pages_pat_replied_to_c\n         // setting skip chats. And not impossible it'd be bad for performance\n         // to notify / email hundreds of people in a chat \"all the time\"?\n         Set.empty\n@@ -465,15 +496,34 @@ case class NotificationGenerator(\n   /** Direct messages are sent to all toUserIds, but not to any user mentioned in the\n     * message.\n     */\n-  def generateForMessage(sender: Participant, pageBody: Post, toUserIds: Set[UserId])\n+  def generateForMessage(sender: Pat, pageBody: Post, toUserIds: Set[UserId])\n         : Notifications = {\n+\n+    warnDevDieIf(sender.id != pageBody.createdById, \"TyESENDR0AUTR\", o\"\"\"Priv msg sender\n+          != pageBody author: sender.trueId2: ${sender.trueId2},\n+          pageBody.createdById: ${pageBody.createdById}\"\"\")\n+\n     unimplementedIf(pageBody.approvedById.isEmpty, \"Unapproved private message? [EsE7MKB3]\")\n+    ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n     anyAuthor = Some(tx.loadTheParticipant(pageBody.createdById))\n-    tx.loadParticipants(toUserIds.filter(_ != sender.id)) foreach { user =>\n-      _makeAboutPostNotfs(\n-          // But what if is 2 ppl chat â€” then would want to incl 1st message instead? Because\n-          // the first (the Orig Post) is just an auto gen \"this is a chat\" or sth text.\n-          NotificationType.Message, about = pageBody, inCategoryId = None, sendTo = user)\n+    val patIdsToLoad = toUserIds.filter(id =>\n+          // Normally enough.\n+          id != sender.id &&\n+          // But if is an anonym, compare true id too.  ANON_UNIMPL, review elsewhere this file\n+          id != sender.trueId2.trueId)\n+    val patsToMaybeNotify = tx.loadParticipants(patIdsToLoad)\n+    patsToMaybeNotify foreach { user =>\n+      if (user.trueId2.trueId == sender.trueId2.trueId) {\n+        // `user` is sender's own anonym.  Don't notify the sender â€” hen is\n+        // apparently replying to a comment by hens own anonym, or sth like that.\n+      }\n+      else {\n+        _makeAboutPostNotfs(\n+            // But what if is 2 ppl chat â€” then would want to incl 1st message instead? Because\n+            // the first (the Orig Post) is just an auto gen \"this is a chat\" or sth text.\n+            NotificationType.Message, about = pageBody, inCategoryId = None, sendTo = user,\n+                    sentFrom = Some(sender))\n+      }\n     }\n     generatedNotifications\n   }\n@@ -488,7 +538,15 @@ case class NotificationGenerator(\n         minNotfLevel: NotfLevel = NotfLevel.Hushed): Unit = {\n \n     // legacy variable names CLEAN_UP but not now\n-    val toUserMaybeGroup = sendTo\n+    val toUserMaybeGroup = sendTo match {\n+      case a: Anonym =>\n+        // Race, ok: The anon might just have been altered somehow, but doesn't matter\n+        // if e.g. hens preferences are 0.01 seconds out of date. (Since we're notifying\n+        // `a`, hen already exists, so we cannot not find `a`. (Until maybe [hard_deletes])\n+        dao.getTheParticipant(a.anonForPatId)\n+      case o => o\n+    }\n+\n     val newPost = about\n \n     if (sentToUserIds.contains(toUserMaybeGroup.id))\n@@ -559,13 +617,16 @@ case class NotificationGenerator(\n         genOneNotfMaybe(\n               notfType,\n               to = toGroup,\n+              from = sentFrom,\n               about = newPost)\n \n         // Find ids of group members to notify, and excl the sender henself:  (5ABKRW2)\n \n+        ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n         var groupMembers = tx.loadGroupMembers(groupId).filter(_.id != newPost.createdById)\n \n-        dieIf(groupMembers.exists(_.isGuest), \"TyE7ABK402\")\n+        // Only users and groups can be gruop members.\n+        dieIf(groupMembers.exists(_.isGuestOrAnon), \"TyE7ABK402\")\n \n         // If loading e.g. the AllMembers group, all higher trust level groups get loaded too,\n         // because they're members of the AllMembers group. But later, if [sub_groups] supported,\n@@ -663,6 +724,10 @@ case class NotificationGenerator(\n       maySee.may\n     }\n \n+    // Later, [private_pats]: Load privacy settings for `sentFrom` (incl for hens\n+    // groups), so we'll know if hens name should be included in the notification\n+    // texts or not. â€” Do elsewhere in this file too, not just here.\n+\n     // Individual users' preferences override group preferences, on the same\n     // specificity level (prefs per page,  or per category,  or whole site).\n     for {\n@@ -757,12 +822,14 @@ case class NotificationGenerator(\n         return ()\n       }\n \n+      ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n       if (member.id == newPost.createdById)\n         return ()\n \n       UX; COULD // NotificationType.NewPage instead? Especially if: isEmbDiscFirstReply.\n       genOneNotfMaybe(\n             NotificationType.NewPost,\n+            from = Some(sentFrom),\n             to = member,\n             about = newPost,\n             generatedWhy = notfPref.why)\n@@ -808,6 +875,7 @@ case class NotificationGenerator(\n         return Notifications.None  // or: return generatedNotifications? the same?\n     }\n \n+    // ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n     anyAuthor = Some(tx.loadTheParticipant(newPost.createdById))\n \n     anyNewTextAndHtml foreach { textAndHtml =>\n@@ -926,6 +994,7 @@ case class NotificationGenerator(\n     anyAuthor = Some(tx.loadTheParticipant(post.createdById))\n     for {\n       user <- usersToNotify\n+      // ANON_UNIMPL // excl real author id â€” newPost.createdById might be an anon.\n       if user.id != post.createdById\n     } {\n       // This is about the new (from the notf recipient's point of view) post,\n@@ -940,6 +1009,9 @@ case class NotificationGenerator(\n   }\n \n \n+  /**\n+    * @param from â€” From who. Default is ${about.createdById}.\n+    */\n   private def genOneNotfMaybe(\n         notfType: NotfType,\n         to: Pat,\n@@ -953,11 +1025,19 @@ case class NotificationGenerator(\n \n     val aboutPost = about\n     val toPat = to\n-    val fromPatId = from.map(_.id) getOrElse aboutPost.createdById\n+    val fromPat: Pat = from getOrElse tx.loadTheParticipant(aboutPost.createdById)\n+    val fromPatTrueId: TrueId = fromPat.trueId2\n \n-    dieIf(toPat.id == fromPatId, \"TyE4S602MRD5\",\n+    dieIf(toPat.id == fromPat.id, \"TyE4S602MRD5\",\n           s\"s$siteId: Notf to self, id: ${toPat.id}, about post id ${aboutPost.id}\")\n \n+    // If the notification is to or from an anon, the anon(s) might be the sender's\n+    // own anonym(s). Then, don't generate any notf.\n+    if (toPat.trueId2.trueId == fromPatTrueId.trueId) {\n+      avoidDuplEmailToUserIds += toPat.id\n+      return ()\n+    }\n+\n     // One cannot talk with deactivated or deleted pats, or System or Sysbot.\n     // (But one can mention e.g. @admins or @core_members â€” built-in pats.)\n     if (toPat.isGone || toPat.isSystemOrSysbot)\n@@ -987,8 +1067,12 @@ case class NotificationGenerator(\n     notfsToCreate += Notification.NewPost(\n           notfType,\n           id = newNotfId,\n-          toUserId = toPat.id,\n-          byUserId = fromPatId,\n+          // Need to send notf to one's true account, not to any anonym. So use trueId.\n+          // But if is pseudonym, then, send to the pseudonym? [pseudonyms_later]\n+          toUserId = toPat.trueId2.trueId,\n+          // Do *not* use trueId here though, because then any anonymous sender,\n+          // would get revealed.  TESTS_MISSING  ANON_UNIMPL  TyTNOTFFROMANON\n+          byUserId = fromPat.id,\n           createdAt = aboutPost.createdAt,\n           uniquePostId = aboutPost.id,\n           smtpMsgIdPrefix = aboutPost.smtpMsgIdPrefix.map(_ + s\".${toPat.id}.$newNotfId\"),"
    },
    {
      "sha": "9b43877f77f47215b4932ae643791ac5bf3df1f4",
      "filename": "appsv/server/talkyard/server/package.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -206,7 +206,8 @@ package object server {\n   case class RenderedPage(\n     html: String,\n     reactStoreJsonString: String,\n-    unapprovedPostAuthorIds: Set[UserId])\n+    unapprovedPostAuthorIds: Set[UserId],\n+    anonsByRealId: Map[PatId, Seq[Anonym]])\n \n \n   REMOVE // ?"
    },
    {
      "sha": "6bb63f1344007c3212ef519df35770d7ae9e720d",
      "filename": "appsv/server/talkyard/server/parser/package.scala",
      "status": "modified",
      "additions": 43,
      "deletions": 2,
      "changes": 45,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fparser%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fparser%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fparser%2Fpackage.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -2,6 +2,9 @@ package talkyard.server\n \n import com.debiki.core._\n import com.debiki.core.Prelude.dieIf\n+import debiki.JsonUtils.parseOptJsObject\n+import org.scalactic.{Bad, Good, Or}\n+import play.api.libs.json.JsObject\n \n \n /** Parsers and serializers, e.g. from-to JSON or from PASETO token claims.\n@@ -24,8 +27,8 @@ package object parser {\n     override def getMessage: St = message\n   }\n \n-  // How to serialize things to JSON â€” different flags, for backw compat.\n-  /**\n+\n+  /** How to serialize things to JSON â€” different flags, for backw compat.\n     *\n     * @param v0_1 â€” just \"id\" instead of \"pageId\" and \"ppId\".\n     */\n@@ -50,4 +53,42 @@ package object parser {\n       if (!pretty) _v0_1\n       else _v0_1.copy(pretty = pretty)\n   }\n+\n+\n+\n+  /** Sync w  parseWhichAnon(..)  in com.debiki.dao.rdb. */\n+  def parseWhichAnonJson(jsOb: JsObject): Opt[WhichAnon] Or ErrMsg = {\n+    import debiki.JsonUtils.parseOptInt32\n+\n+    val doAsJsOb = parseOptJsObject(jsOb, \"doAsAnon\") getOrElse {\n+      return Good(None)\n+    }\n+\n+    val sameAnonId: Opt[AnonId] = parseOptInt32(doAsJsOb, \"sameAnonId\")\n+\n+    val newAnonStatus: Opt[AnonStatus] = parseOptInt32(doAsJsOb, \"newAnonStatus\") map { int =>\n+      AnonStatus.fromInt(int) getOrElse {\n+        return Bad(s\"Invalid newAnonStatus: $int\")\n+      }\n+    }\n+\n+    if (sameAnonId.isDefined && newAnonStatus.isDefined)\n+      return Bad(\"Both sameAnonId and newAnonStatus specified\")\n+\n+    Good {\n+      if (sameAnonId.isDefined) {\n+        val id = sameAnonId.get\n+        if (id > Pat.MaxAnonId)\n+          return Bad(s\"Bad anon id: $id, it's > MaxAnonId = ${Pat.MaxAnonId} [TyEBADANIDJSN]\")\n+\n+        Some(WhichAnon.SameAsBefore(id))\n+      }\n+      else if (newAnonStatus.isDefined) {\n+        Some(WhichAnon.NewAnon(newAnonStatus.get))\n+      }\n+      else {\n+        None\n+      }\n+    }\n+  }\n }"
    },
    {
      "sha": "3c0351b3650b42e7aceb663da73d9de65880941b",
      "filename": "appsv/server/talkyard/server/pop/PagePopularityCalculator.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -242,6 +242,8 @@ object PagePopularityCalculator {\n     } {\n       // No visit might have been recorded, if the visitor didn't stay long enough (a few seconds).\n       // COULD load those users explicitly.\n+      // ANON_UNIMPL â€” look at the true id instead? So one cannot vote many times,\n+      // by using different anons. Then, visitsByUserId needs to include the true pats too?\n       val visit = visitsByUserId.getOrElse(action.doerId, VisitTrust.UnknownMember)\n       val isOrigPost = action.postNr == PageParts.BodyNr\n       val isByTrusted = visit.trustLevelInt >= TrustLevel.TrustedMember.toInt"
    },
    {
      "sha": "b47993a87f7c59f3b84f0ae9c421a0d94540aef7",
      "filename": "appsv/server/talkyard/server/sess/SessionController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsess%2FSessionController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsess%2FSessionController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsess%2FSessionController.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -38,7 +38,8 @@ class SessionController @Inject()(cc: ControllerComponents, edContext: TyContext\n     import req.{dao, theRequester => reqer}\n     throwForbiddenIfMayNot(\"view\", dao, reqer, patId)\n     val activeSessions = dao.listPatsSessions(patId)\n-    val json = Json.obj(\"sessions\" -> JsArray(activeSessions.map(s => JsSession(s))))\n+    val json = Json.obj(\"sessions\" -> JsArray(activeSessions.map(s =>\n+          JsSession(s, inclPart1 = reqer.isAdmin))))\n     OkApiJson(json)\n   }\n \n@@ -72,8 +73,9 @@ class SessionController @Inject()(cc: ControllerComponents, edContext: TyContext\n           forPatId, thoseStartedAt = startTimesMs, allButNot)\n \n     val json = Json.obj(\n-        \"terminatedSessions\" -> JsArray(terminatedSessions.map(s => JsSession(s))))\n-\n+        \"terminatedSessions\" -> JsArray(terminatedSessions.map(s =>\n+            // Now it's ok to incl part 1 (these sessions no longer work).\n+            JsSession(s, inclPart1 = true))))\n     OkApiJson(json)\n   }\n "
    },
    {
      "sha": "7e3bba15300c2df91231575497d2b03cd983e3fe",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatch.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatch.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -403,7 +403,7 @@ case class SimpleSitePatch(\n       pageExtId: Option[ExtId],\n       pageType: PageType,\n       pageSlug: String,\n-      authorId: UserId,\n+      authorId: PatId,\n       pageMemberRefs: Seq[ParsedRef],\n       categoryId: Option[CategoryId],\n       titleHtmlUnsafe: String,\n@@ -531,6 +531,7 @@ case class SimpleSitePatch(\n         val pp: Participant = dao.getParticipantByParsedRef(ref) getOrElse {\n           return Bad(s\"No member matching ref $ref, for page extId '$pageExtId' [TyE40QMSJV3]\")\n         }\n+        throwForbiddenIf(pp.isAnon, \"TyE502QK4J2\", \"Cannot add anonyms to page\")\n         throwForbiddenIf(pp.isGuest, \"TyE502QK4JV\", \"Cannot add guests to page\")\n         throwForbiddenIf(pp.isBuiltIn, \"TyE7WKCT24GT\", \"Cannot add built-in users to page\")\n         // For now at least:"
    },
    {
      "sha": "792f42ab9a697252a2a8900486848a04134026a0",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchMaker.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchMaker.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchMaker.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchMaker.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -72,9 +72,9 @@ case class SitePatchMaker(context: TyContext) {\n \n       val drafts = tx.loadAllDrafts()\n \n-      val posts = tx.loadAllPosts().sortBy(_.id)\n+      val posts = tx.loadAllPostsForExport().sortBy(_.id)\n \n-      val postActions: immutable.Seq[PostAction] = tx.loadAllPostActions()\n+      val postActions: immutable.Seq[PostAction] = tx.loadAllPostActionsForExport()\n \n       // val links = later\n \n@@ -160,7 +160,7 @@ object SitePatchMaker {\n       val groups: Seq[Group] =\n         anyDump.map(_.groups) getOrElse tx.loadAllGroupsAsSeq()\n       fields(\"groups\") = JsArray(\n-        groups.map(JsGroupInclDetails(_, inclEmail = true)))\n+        groups.map(JsGroupInclDetailsForExport(_)))\n \n       val groupPps: Seq[GroupParticipant] =\n         anyDump.map(_.groupPps) getOrElse tx.loadGroupParticipantsAllCustomGroups()\n@@ -173,7 +173,7 @@ object SitePatchMaker {\n           _, groups = Nil, usersById = Map.empty, callerIsAdmin = true, inclPasswordHash = true)))\n \n       val pptStats: Seq[UserStats] = anyDump.map(_.pptStats) getOrElse tx.loadAllUserStats()\n-      fields(\"ppStats\") = JsArray(pptStats.map(JsUserStats(_, isStaffOrSelf = true)))\n+      fields(\"ppStats\") = JsArray(pptStats.map(JsUserStats(_, isStaffOrSelf = true, reqrPerms = None)))\n \n       val pptVisitStats: Seq[UserVisitStats] =\n         anyDump.map(_.pptVisitStats) getOrElse tx.loadAllUserVisitStats()\n@@ -269,7 +269,7 @@ object SitePatchMaker {\n       val drafts: Seq[Draft] = anyDump.map(_.drafts) getOrElse tx.loadAllDrafts()\n       fields(\"drafts\") = JsArray(drafts map JsDraft)\n \n-      val posts: Seq[Post] = anyDump.map(_.posts) getOrElse tx.loadAllPosts()\n+      val posts: Seq[Post] = anyDump.map(_.posts) getOrElse tx.loadAllPostsForExport()\n       fields(\"posts\") = JsArray(\n         posts.map((post: Post) => {\n           var json = JsPostInclDetails(post)\n@@ -285,7 +285,7 @@ object SitePatchMaker {\n         }))\n \n       val postsActions: Seq[PostAction] =\n-        anyDump.map(_.postActions) getOrElse tx.loadAllPostActions()\n+        anyDump.map(_.postActions) getOrElse tx.loadAllPostActionsForExport()\n       fields(\"postActions\") = JsArray(postsActions map JsPostAction)\n \n       val links: ImmSeq[Link] = anyDump.map(_.links) getOrElse tx.loadAllLinks()"
    },
    {
      "sha": "04e997e75c4cbf8b1555244931eb8b53715d7d8f",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1140,6 +1140,9 @@ case class SitePatchParser(context: TyContext) {\n         layout = layout,\n         comtOrder = PostSortOrder.fromOptVal(parseOptInt32(jsObj, \"comtOrder\")),\n         comtNesting = None, // ...later\n+        comtsStartHidden = NeverAlways.fromOptInt(parseOptInt32(jsObj, \"comtsStartHidden\")),\n+        comtsStartAnon = NeverAlways.fromOptInt(parseOptInt32(jsObj, \"comtsStartAnon\")),\n+        newAnonStatus = AnonStatus.fromOptInt(parseOptInt32(jsObj, \"newAnonStatus\")),\n         forumSearchBox = parseOptInt32(jsObj, \"forumSearchBox\"),\n         forumMainView = parseOptInt32(jsObj, \"forumMainView\"),\n         forumCatsTopics = parseOptInt32(jsObj, \"forumCatsTopics\"),\n@@ -1402,11 +1405,17 @@ case class SitePatchParser(context: TyContext) {\n         return Bad(s\"Bad DraftLocator json: ${ex.getMessage} [TyE603KUTDGJ]\")\n       }\n \n+      UNTESTED; TESTS_MISSING // exp imp anons?  True ids are incl in json dumps?\n+      val doAsAnon: Opt[WhichAnon] = parser.parseWhichAnonJson(jsObj) getOrIfBad { prob =>\n+        return Bad(s\"Bad anon params: $prob [TyEANONPARDFT]\")\n+      }\n+\n       Draft(\n         byUserId = readInt(jsObj, \"byUserId\",\n           // For now, because currently not always incl when upserting from editor.\n           // Gets filled in by the server anyway [602KDGRE20]\n           default = Some(NoUserId)),\n+        doAsAnon = doAsAnon,\n         draftNr = draftNr,\n         forWhat = draftLocator,\n         createdAt ="
    },
    {
      "sha": "2c8d960e5a5f8afaf3b9384cd50af1ae813e16fd",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatcher.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatcher.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1047,7 +1047,10 @@ case class SitePatcher(globals: debiki.Globals) {\n           // via /-/v0/upsert-simple.\n           // And, everyone should [use_the_Do_API] instead â€” so, never need to fix this.\n           val page = dao.newPageDao(post.pageId, tx)\n-          notfGenerator.generateForNewPost(page, post,\n+          val doer: Pat = tx.loadTheParticipant(post.createdById)\n+\n+          // (These notfs are inserted into the db, furhter below.)\n+          notfGenerator.generateForNewPost(page, post, postAuthor = Some(doer),\n                 sourceAndHtml = None, anyNewModTask = None)\n \n           // ----- Webhooks\n@@ -1060,7 +1063,7 @@ case class SitePatcher(globals: debiki.Globals) {\n                     siteId = siteId,\n                     id = AuditLogEntry.UnassignedId,\n                     didWhat = AuditLogEntryType.NewPage,\n-                    doerId = post.createdById,\n+                    doerTrueId = doer.trueId2,\n                     doneAt = tx.now.toJavaDate,\n                     browserIdData = BrowserIdData.Missing,\n                     pageId = Some(page.id),\n@@ -1071,17 +1074,20 @@ case class SitePatcher(globals: debiki.Globals) {\n             else if (post.tyype.isComment || post.tyype.isChat) {\n               // Skip finding common ancestors â€” multi replies disabled.  [3GTKYA02]\n               // Just look up the parent directly.\n-              val anyParent =\n+              val anyParent: Opt[Post]  =\n                     if (post.tyype.isChat) None\n                     else page.parts.postByNr(post.parentNr)\n \n+              val anyParentOrigAuthor: Opt[Pat] =\n+                    anyParent.map(post => tx.loadTheParticipant(post.createdById))\n+\n               Some(AuditLogEntry(\n                     siteId = siteId,\n                     id = AuditLogEntry.UnassignedId,\n                     didWhat =\n                           if (post.tyype.isChat) AuditLogEntryType.NewChatMessage\n                           else AuditLogEntryType.NewReply,\n-                    doerId = post.createdById,\n+                    doerTrueId = doer.trueId2,\n                     doneAt = tx.now.toJavaDate,\n                     browserIdData = BrowserIdData.Missing,\n                     pageId = Some(post.pageId),\n@@ -1091,7 +1097,7 @@ case class SitePatcher(globals: debiki.Globals) {\n                     targetPageId = anyParent.map(_.pageId),\n                     targetUniquePostId = anyParent.map(_.id),\n                     targetPostNr = anyParent.map(_.nr),\n-                    targetUserId = anyParent.map(_.createdById)))\n+                    targetPatTrueId = anyParentOrigAuthor.map(_.trueId2)))\n             }\n             else {\n               // Don't generate any event. This \"cannot\" happen anyway, since\n@@ -1134,6 +1140,8 @@ case class SitePatcher(globals: debiki.Globals) {\n \n       // Fix later.  Need to remap webhook ids and next event ids, and\n       // events-to-retry ids.\n+      //\n+      // ... NO, don't send webhooks from here. But yes, do, from the Do API.\n \n \n       // ----- Consistency checks"
    },
    {
      "sha": "6223c72a7cea5e329fc837a0a0ba228e2787848b",
      "filename": "appsv/server/talkyard/server/spam/SpamCheckActor.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -94,7 +94,7 @@ class SpamCheckActor(\n \n     val manyFutureResults: Seq[(SpamCheckTask, Future[SpamCheckResults])] = spamCheckTasks flatMap {\n         task =>\n-      val key = task.key\n+      val key: SpamCheckTask.Key = task.taskKey\n       if (checkingNowCache.getIfPresent(key) ne null) None   // [205FKPJ096]\n       else {\n         checkingNowCache.put(key, DummyObject)"
    },
    {
      "sha": "f6335ea4ed072acd8bfeca83a1453b167aab3d51",
      "filename": "appsv/server/talkyard/server/spam/SpamChecker.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamChecker.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamChecker.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamChecker.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -374,7 +374,7 @@ class SpamChecker(\n \n       if (spamFoundResults.nonEmpty) {\n         logger.debug(i\"\"\"Text spam detected [TyM8YKF0]:\n-            | - who: ${spamCheckTask.who}\n+            | - reqrId: ${spamCheckTask.reqrId}\n             | - post: $postToSpamCheck\n             | - req: ${spamCheckTask.requestStuff}\n             | - siteId: ${spamCheckTask.siteId}\n@@ -395,7 +395,7 @@ class SpamChecker(\n   def checkViaStopForumSpam(spamCheckTask: SpamCheckTask): Future[SpamCheckResult] = {\n     // StopForumSpam doesn't support ipv6.\n     // See: https://www.stopforumspam.com/forum/viewtopic.php?id=6392\n-    val ipAddr = spamCheckTask.who.ip\n+    val ipAddr = spamCheckTask.requestStuff.browserIdData.ip\n     val anyIpParam =\n       if (ipAddr.startsWith(\"[\") || ipAddr.contains(\":\")) \"\"\n       else  \"&ip=\" + encode(ipAddr)\n@@ -845,7 +845,7 @@ class SpamChecker(\n     body.append(\"blog=\" + encode(siteOrigin))\n \n     // (required) IP address of the comment submitter.\n-    body.append(\"&user_ip=\" + encode(spamCheckTask.who.ip))\n+    body.append(\"&user_ip=\" + encode(spamCheckTask.requestStuff.browserIdData.ip))\n \n     // (required) User agent string of the web browser submitting the comment - typically\n     // the HTTP_USER_AGENT cgi variable. Not to be confused with the user agent"
    },
    {
      "sha": "db55c5bd3b5262105dd6355dbb75e0342d4e83f1",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 119,
      "deletions": 5,
      "changes": 124,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -16,6 +16,7 @@\n  */\n \n /// <reference path=\"../editor-prelude.editor.ts\" />\n+/// <reference path=\"./oop.editor.ts\" />\n \n //------------------------------------------------------------------------------\n    namespace debiki2.editor {\n@@ -133,6 +134,10 @@ interface EditorState {\n   visible: boolean;\n   replyToPostNrs: PostNr[];\n   anyPostType?: PostType;\n+  doAsAnon?: WhichAnon;\n+  myAnonsHere?: MyPatsOnPage;\n+  discProps?: DiscPropsDerived;\n+  authorId?: PatId; // remove?\n   editorsCategories?: Category[];\n   editorsPageId?: PageId;\n   editingPostNr?: PostNr;\n@@ -956,16 +961,42 @@ export const Editor = createFactory<any, EditorState>({\n       eds.lazyCreatePageInCatId = inFrame.eds.lazyCreatePageInCatId;\n     }\n \n+    const editorsPageId = discStore.currentPageId || eds.embeddedPageId;\n+\n+    // Annoying! Try to get rid of eds.embeddedPageId? So can remove discStore2.\n+    const discStore2: DiscStore = { ...discStore, currentPageId: editorsPageId };\n+\n+    const discProps: DiscPropsDerived = page_deriveLayout(\n+            discStore.currentPage, discStore, LayoutFor.PageNoTweaks);\n+\n+    const myAnonsHere: MyPatsOnPage = disc_findAnonsToReuse(discStore2, {\n+            forWho: discStore.me, startAtPostNr: postNrs[0] });\n+    const lastAnon: KnownAnonym | U =\n+            myAnonsHere.byThreadLatest.find(p => p.isAnon) as KnownAnonym | U;\n+\n+    // Continue replying using the same anon as last time in the same thread.\n+    // If none, then, depending on the page / cat settings, use a new anonym,\n+    // or use your real account [.use_which_anon].\n+    const doAsAnon: WhichAnon | U = lastAnon\n+        ? { sameAnonId: lastAnon.id, anonStatus: lastAnon.anonStatus } as SameAnon\n+        : (discProps.comtsStartAnon >= NeverAlways.Recommended\n+            ? { newAnonStatus: discProps.newAnonStatus } as NewAnon\n+            : undefined);\n+\n     const newState: Partial<EditorState> = {\n       inFrame,\n       inFrameStore,\n       anyPostType: postType,\n       editorsCategories: discStore.currentCategories,\n-      editorsPageId: discStore.currentPageId || eds.embeddedPageId,\n+      editorsPageId,\n       // [editorsNewLazyPageRole] = PageRole.EmbeddedComments if eds.isInEmbeddedEditor?\n       replyToPostNrs: postNrs,\n       text: state.text || makeDefaultReplyText(discStore, postNrs),\n+      myAnonsHere,\n+      doAsAnon,\n+      discProps,\n     };\n+\n     this.showEditor(newState);\n \n     if (!postNrs.length) {\n@@ -1039,6 +1070,23 @@ export const Editor = createFactory<any, EditorState>({\n       // gets a new postNr. Then do what? Show a \"this post was moved to: ...\" dialog?\n       dieIf(postNr !== response.postNr, 'TyE23GPKG4');\n \n+      const editorsDiscStore: DiscStore = { ...discStore, currentPageId: response.pageId };\n+      const discProps: DiscPropsDerived = page_deriveLayout(\n+              discStore.currentPage, discStore, LayoutFor.PageNoTweaks);\n+\n+      const myAnonsHere = disc_findAnonsToReuse(editorsDiscStore, {\n+              forWho: discStore.me, startAtPostNr: postNr });\n+      const lastAnon: KnownAnonym | U =\n+            myAnonsHere.byThreadLatest.find(p => p.isAnon) as KnownAnonym | U;\n+\n+      // See [.use_which_anon] above.\n+      const doAsAnon: WhichAnon | U = draft && draft.doAsAnon || (\n+          lastAnon\n+            ? { sameAnonId: lastAnon.id, anonStatus: lastAnon.anonStatus } as SameAnon\n+            : (discProps.comtsStartAnon >= NeverAlways.Recommended\n+                ? { newAnonStatus: discProps.newAnonStatus } as NewAnon\n+                : undefined));\n+\n       const newState: Partial<EditorState> = {\n         anyPostType: null,\n         editorsCategories: discStore.currentCategories, // [many_embcom_iframes]\n@@ -1050,6 +1098,9 @@ export const Editor = createFactory<any, EditorState>({\n         onDone: onDone,\n         draftStatus: DraftStatus.NothingHappened,\n         draft,\n+        myAnonsHere,\n+        doAsAnon,\n+        discProps,\n       };\n \n       this.showEditor(newState);\n@@ -1090,6 +1141,20 @@ export const Editor = createFactory<any, EditorState>({\n \n     const text = state.text || '';\n \n+    const futurePage: PageDiscPropsSource = {\n+      categoryId,\n+      pageRole: newPageRole,\n+    };\n+\n+    const discProps: DiscPropsDerived = page_deriveLayout(\n+            futurePage, store, LayoutFor.PageNoTweaks);\n+\n+    // Also see [.use_which_anon] above.\n+    const doAsAnon: WhichAnon | U =\n+        discProps.comtsStartAnon >= NeverAlways.Recommended\n+            ? { newAnonStatus: discProps.newAnonStatus } as NewAnon\n+            : undefined;\n+\n     const newState: Partial<EditorState> = {\n       anyPostType: null,\n       editorsCategories: store.currentCategories,\n@@ -1100,6 +1165,8 @@ export const Editor = createFactory<any, EditorState>({\n       text: text,\n       showSimilarTopics: true,\n       searchResults: null,\n+      // Skip: myAnonsHere â€” cannot yet be any anons; page not yet created.\n+      doAsAnon,\n     };\n \n     this.showEditor(newState);\n@@ -1237,7 +1304,7 @@ export const Editor = createFactory<any, EditorState>({\n         pageRole?: PageRole, inFrameStore?: DiscStore) {\n \n     const setDraftAndGuidelines = (anyDraft?, anyGuidelines?) => {\n-      let draft = anyDraft ||\n+      let draft: Draft | U = anyDraft ||\n             // BUG harmleess: Use BrowserStorage.forEachDraft(page-id) instead?\n             // So same algorithm for finding drafts to show in-page, as to load\n             // in the editor.  [find_br_drafts]\n@@ -1300,6 +1367,10 @@ export const Editor = createFactory<any, EditorState>({\n         // and maybe are annoying?\n         guidelines: eds.isInIframe ? undefined : anyGuidelines,\n       };\n+      if (draft && draft.doAsAnon) {\n+        // TESTS_MISSING  TyTANONDFLOAD\n+        newState.doAsAnon = draft.doAsAnon;\n+      }\n       this.setState(newState, () => {\n         this.focusInputFields();\n         this.scrollToPreview = true;\n@@ -1500,6 +1571,7 @@ export const Editor = createFactory<any, EditorState>({\n           scrollToPreview,\n           safeHtml,\n           editorsPageId: state.editorsPageId,\n+          doAsAnon: state.doAsAnon,\n         };\n         const postNrs: PostNr[] = state.replyToPostNrs;\n         if (postNrs.length === 1) {\n@@ -1799,7 +1871,12 @@ export const Editor = createFactory<any, EditorState>({\n     }\n \n     const me: Myself = this.getDiscStore().me;\n-    const draftToSave: Draft = { ...draftOldOrEmpty, text, title };\n+    const draftToSave: Draft = {\n+      ...draftOldOrEmpty,\n+      doAsAnon: state.doAsAnon,\n+      text,\n+      title,\n+    };\n \n     // If this is an embedded comments discussion, and the discussion page hasn't\n     // yet been created, there's no page id to use as draft locator key. Then,\n@@ -1901,7 +1978,7 @@ export const Editor = createFactory<any, EditorState>({\n     this.throwIfBadTitleOrText(null, t.e.PleaseDontDeleteAll);\n     const state: EditorState = this.state;\n     Server.saveEdits(state.editorsPageId, state.editingPostNr, state.text,\n-          this.anyDraftNr(), () => {\n+          this.anyDraftNr(), state.doAsAnon, () => {\n       // BUG (harmless) poor UX: [JMPBCK] If we're no longer on the same page as\n       // the post we were editing (e.g. because keeping the editor open and\n       // navigating away) then, one won't see the edits appear. Probably should\n@@ -1917,7 +1994,7 @@ export const Editor = createFactory<any, EditorState>({\n     this.throwIfBadTitleOrText(null, t.e.PleaseWriteSth);\n     const state: EditorState = this.state;\n     ReactActions.saveReply(state.editorsPageId, state.replyToPostNrs, state.text,\n-          state.anyPostType, state.draft, () => {\n+          state.anyPostType, state.draft, state.doAsAnon, () => {\n       // BUG (harmless) poor UX: See [JMPBCK] aboe.\n       // Also, if we've navigaated away, seems any draft won't get deleted.\n       this.callOnDoneCallback(true);\n@@ -1935,6 +2012,7 @@ export const Editor = createFactory<any, EditorState>({\n       pageTitle: state.title,\n       pageBody: state.text,\n       deleteDraftNr: this.anyDraftNr(),\n+      doAsAnon: state.doAsAnon,\n     };\n     // [DRAFTS_BUG] This doesn't delete the draft? (if any)\n     Server.createPage(data, (newPageId: string) => {\n@@ -1947,6 +2025,7 @@ export const Editor = createFactory<any, EditorState>({\n \n   postChatMessage: function() {\n     const state: EditorState = this.state;\n+    // ANON_UNIMPL: send state.doAsAnon,\n     ReactActions.insertChatMessage(state.text, state.draft, () => {\n       this.callOnDoneCallback(true);\n       this.clearAndCloseFineIfGone();\n@@ -2474,6 +2553,40 @@ export const Editor = createFactory<any, EditorState>({\n           ':');\n     }\n \n+    // ----- Anon comments\n+\n+    // By default, anon posts are disabled, and the \"post as ...\" dropdown left out.\n+\n+    let maybeAnonymously: RElm | U;\n+    if (!me.isAuthenticated) {\n+      // Only logged in users can post anonymously. (At least for now.)\n+    }\n+    else if (state.discProps?.comtsStartAnon >= NeverAlways.Allowed ||\n+          // If pat 1) is already talking, using an anonym, or 2) has started composing\n+          // a draft, as anon, but then an admin changed the settings, so cannot\n+          // be anon any more.  Then it's nevertheless ok to continue, anonymously.\n+          // (That's what \"continue\" in NeverAlways.NeverButCanContinue means.)\n+          // ANON_UNIMPL, UNPOLITE, SHOULD add some server side check, so no one toggles\n+          // this in the browser only, and the server accepts?  [derive_node_props_on_server]\n+          // But pretty harmless.\n+          state.doAsAnon) {\n+      maybeAnonymously =\n+          Button({ className: 'c_AnonB', ref: 'anonB', onClick: () => {\n+            const atRect = reactGetRefRect(this.refs.anonB);\n+            anon.openAnonDropdown({ atRect, open: true, curAnon: state.doAsAnon, me,\n+                discProps: state.discProps,\n+                saveFn: (doAsAnon: WhichAnon) => {\n+                  const newState: Partial<EditorState> = { doAsAnon };\n+                  this.setState(newState);\n+                  // The avatar we're showing, might need to change.\n+                  // (WOULD_OPTIMIZE: Only do if in-page preview, otherwise one's\n+                  // avatar & name isn't shown anyway.)\n+                  this.updatePreviewSoon();\n+                } });\n+          } },\n+          anon.whichAnon_titleShort(state.doAsAnon, { me }),\n+          ' ', r.span({ className: 'caret' }));\n+    }\n \n     // ----- Save button\n \n@@ -2720,6 +2833,7 @@ export const Editor = createFactory<any, EditorState>({\n                 r.div({ className: 's_E_DoingRow' },\n                   state.placeLeft ? topbar.OpenWatchbarButton() : null,\n                   r.span({ className: 's_E_DoingWhat' }, doingWhatInfo),\n+                  maybeAnonymously,\n                   showGuidelinesBtn,\n                   scrollToPreviewBtn,\n                   draftStatusText),"
    },
    {
      "sha": "4b3c240cb6fb56197a6b83245fd55048b9ec5ef9",
      "filename": "client/app-editor/editor/editor.styl",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -348,7 +348,7 @@ html.es-watchbar-open.es-forum #debiki-editor-controller\n       text-shadow: 0 0 3px black;\n       font-size: 20px;\n       position: relative;\n-      top: -5px;\n+      // top: -5px; â€” why?\n       padding-left: 5px;\n       &:hover\n         text-decoration: none;\n@@ -508,6 +508,9 @@ html.mouse .rta__entity\n     padding-left: 7px;\n     padding-right: 7px;\n \n+.c_AnonB\n+  margin-left: 1ex;\n+\n .esE_SaveB_Verbose\n   display: none;\n   @media (min-width: $spacyButtonsMinWidth)"
    },
    {
      "sha": "513d841c4e5b7d8f6b8df8c84442b84e7bf7b95c",
      "filename": "client/app-editor/editor/oop.editor.ts",
      "status": "added",
      "additions": 172,
      "deletions": 0,
      "changes": 172,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Foop.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-editor%2Feditor%2Foop.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Foop.editor.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../editor-prelude.editor.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.editor {\n+//------------------------------------------------------------------------------\n+\n+\n+/// disc_findAnonsToReuse()\n+///\n+/// If pat is posting a reply anonymously, then, if hen has posted earlier\n+/// anonymously on the same page, usually hen wants hens new reply, to be\n+/// by the same anonym, so others see they're talking with the same person\n+/// (although they don't know who it is, just that it's the same).\n+///\n+/// This fn finds anonyms a pat has used, so the pat can reuse them. First it\n+/// looks for anonyms-to-reuse in the sub thread where pats reply will appear,\n+/// thereafter anywhere on the same page.\n+///\n+/// Returns sth like this, where 200 is pat's id, and 2001, 2002, 2003, 2004 are\n+/// anons pat has used on the current page:  (just nice looking numbers)\n+/// {\n+///   // Just an example\n+///   byId: {\n+///     2001: patsAnon2001,  // = { id: 2001, forPatId: 200, ... }\n+///     2002: patsAnon2002,  // = { id: 2002, forPatId: 200, ... }\n+///     2003: patsAnon2003,  // = { id: 2003, forPatId: 200, ... }\n+///     2004: patsAnon2004,  // = { id: 2004, forPatId: 200, ... }\n+///   },\n+///   byThreadLatest: [\n+///     patsAnon2002,  // pat's anon (or pat henself) who made pat's last comment\n+//                     // in the path from  startAtPostNr, back to the orig post.\n+///     patHenself,    // here pat posted using hens real account (not anonymously)\n+///     patsAnon2001,  // pat also commented using anon 2001, along this path\n+///\n+///     // If pat has posted earlier in the thread (closer to the orig post), using\n+///     // any of the above (anon 2002, 2001, or as henself), those comments are\n+///     // ignored: we don't add an anon more than once to the list.)\n+///\n+///     patsAnon2004, // Pat replied elsewhere on the page using hens anon 2004\n+///     patsAnon2003, // ... and before that, hen posted as anon 2003, also\n+///                   //     elsewhere on the same page.\n+///\n+///     // The caller cannot tell if the anons were used in the thread (the first 3)\n+///     // or elsewhere on the page (the last 2) â€” currently doesn't matter,\n+///     // as long as the order is right.\n+///   ]\n+/// }\n+///\n+/// In the above example, patsAnon2003 didn't post anything in the thread from\n+/// startAtPostNr up to the orig post â€” but that anon did post something,\n+/// *elsewhere* in the same discussion. So that anon is still in the list of anons\n+/// pat might want to use again, on this page.\n+///\n+export function disc_findAnonsToReuse(discStore: DiscStore, ps: {\n+            forWho: Pat | Me | U, startAtPostNr?: PostNr }): MyPatsOnPage {\n+  const forWhoId: PatId = ps.forWho && ps.forWho.id;\n+  const curPage: Page | U = discStore.currentPage;\n+  const result: MyPatsOnPage = { byThreadLatest: [], byId: {} };\n+  if (!forWhoId || !curPage)\n+    return result;\n+\n+  // ----- Same thread\n+\n+  // Find out if pat was henself, or was anonymous, in any earlier posts by hen,\n+  // in the path from ps.startAtPostNr and back towards the orig post.\n+  // (patsAnon2002, patHenself, and patsAnon2001 in the example above (i.e. in\n+  // the docs comment to this fn)).\n+\n+  const startAtPost: Post | U = ps.startAtPostNr && curPage.postsByNr[ps.startAtPostNr];\n+  const nrsSeen = {};\n+  let nextPost: Post | U = startAtPost;\n+  const myPatsInThread = [];\n+\n+  for (let i = 0; i < StructsAndAlgs.TooLongPath && nextPost; ++i) {\n+    // Cycle? (Would be a bug somewhere.)\n+    if (nrsSeen[nextPost.nr])\n+      break;\n+    nrsSeen[nextPost.nr] = true;\n+\n+    // Bit dupl code:  [.find_anons]\n+\n+    // We might have added this author, already.\n+    if (result.byId[nextPost.authorId])\n+      continue;\n+\n+    const author: Pat | U = discStore.usersByIdBrief[nextPost.authorId];\n+    if (!author)\n+      continue; // would be a bug somewhere, or a rare & harmless race? Oh well.\n+\n+    const postedAsSelf = author.id === forWhoId;\n+    const postedAnonymously = author.anonForId === forWhoId;\n+\n+    if (postedAsSelf || postedAnonymously) {\n+      // This places pat's most recently used anons first.\n+      myPatsInThread.push(author);\n+      result.byId[author.id] = author;\n+    }\n+    else {\n+      // This comment is by someone else.\n+    }\n+\n+    nextPost = curPage.postsByNr[nextPost.parentNr];\n+  }\n+\n+  // ----- Same page\n+\n+  // If pat posted outside [the thread from the orig post to ps.startAtPostNr],\n+  // then include any anons pat used, so Pat can choose to use those anons, now\n+  // when being active in sub thread startAtPostNr.  (See patsAnon2003 and patsAnon2004\n+  // in this fn's docs above.)\n+\n+  const myPostsOutsideThread: Post[] = [];\n+\n+  _.forEach(curPage.postsByNr, function(post: Post) {\n+    if (nrsSeen[post.nr])\n+      return;\n+\n+    // Bit dupl code:  [.find_anons]\n+\n+    // Each anon pat has used, is to be included at most once.\n+    if (result.byId[post.authorId])\n+      return;\n+\n+    const author: Pat | U = discStore.usersByIdBrief[post.authorId];\n+    if (!author)\n+      return;\n+\n+    const postedAsSelf = author.id === forWhoId;\n+    const postedAnonymously = author.anonForId === forWhoId;\n+\n+    if (postedAsSelf || postedAnonymously) {\n+      myPostsOutsideThread.push(post);\n+      result.byId[author.id] = author;\n+    }\n+  });\n+\n+  // Sort, most recent first.\n+  myPostsOutsideThread.sort((p: Post) => -p.createdAtMs);\n+  const myPatsOutside = myPostsOutsideThread.map(p => discStore.usersByIdBrief[p.authorId]);\n+\n+  // ----- Join results\n+\n+  // This places [anons for pat's most recent comments in the thread] first, followed\n+  // by pat's other anons, by time (more recent first).\n+  result.byThreadLatest = [...myPatsInThread, ...myPatsOutside];\n+\n+  return result;\n+}\n+\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "a7dbadc63afddd20850cca4c925136dbe364daa7",
      "filename": "client/app-more/forum/create-category-dialog.more.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fforum%2Fcreate-category-dialog.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -399,6 +399,16 @@ const CatSettings = createClassAndFactory({\n               this.props.updateCategory(newLayout);\n             }}));\n \n+    const anonymsAllowed =\n+      r.div({ className: 'form-group' },\n+        r.label({ className: 'control-label', style: { display: 'block' }},\n+          \"Anonymous comments:\"),\n+        debiki2.pagedialogs.AnonsAllowedDropdownBtn({ cat: category, store,\n+            layoutFor: LayoutFor.PageNoTweaks,\n+            onSelect: (newProps: DiscPropsSource) => {\n+              this.props.updateCategory(newProps);\n+            }}));\n+\n     const parentCatDropdown =\n         r.div({ className: 'form-group' },\n           r.label({ className: 'control-label', style: { display: 'block' }},\n@@ -533,6 +543,7 @@ const CatSettings = createClassAndFactory({\n             defaultTopicTypeInput,\n             doItVotes,\n             commentOrder,\n+            anonymsAllowed,\n             parentCatDropdown,\n             isDefaultInput,\n             slugInput,"
    },
    {
      "sha": "28b647c2be1b7382064178128d7b51513330a27e",
      "filename": "client/app-more/more-bundle-already-loaded.d.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fmore-bundle-already-loaded.d.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -64,7 +64,8 @@ declare namespace debiki2 {\n \n declare namespace debiki2.pagedialogs {\n \n-  function openAddPeopleDialog(alreadyAddedIds: UserId[], onDone: (newIds: UserId[]) => void);\n+  function openAddPeopleDialog(ps: { curPatIds?: PatId[], curPats?: Pat[],\n+        mayClear?: Bo, onChanges: (PatsToAddRemove) => Vo });\n   function openDeletePostDialog(post: Post, at: Rect);\n   function openFlagDialog(postId: PostId, at: Rect);\n   function openMovePostsDialog(store: Store, post: Post, closeCaller, at: Rect);\n@@ -79,6 +80,13 @@ declare namespace debiki2.pagedialogs {\n   function getProgressBarDialog();\n }\n \n+declare namespace debiki2.anon {\n+  function openAnonDropdown(ps: any); //AnonStatusState);\n+  function whichAnon_titleShort(doAsAnon: WhichAnon | U, ps: { me: Me, pat?: Pat }): St | RElm;\n+  function whichAnon_title(doAsAnon: WhichAnon | U, ps: { me: Me, pat?: Pat }): St | RElm;\n+  function whichAnon_descr(doAsAnon: WhichAnon | U, ps: { me: Me, pat?: Pat }): St | RElm;\n+}\n+\n declare namespace debiki2.subcommunities {\n   function joinOrCreateSubCommunity(store: Store);\n }"
    },
    {
      "sha": "c205390fd8ee5810161c063d49ce203e3b05feb9",
      "filename": "client/app-more/page-dialogs/ChangePageModal.more.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 1,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2FChangePageModal.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -79,13 +79,15 @@ const ChangePageDialog = createComponent({\n     const me: Myself = store.me;\n     const isOwnPage = store_thisIsMyPage(store);  // [.store_or_state_pg]\n     const isOwnOrStaff = isOwnPage || isStaff(me);\n+    const isOwnOrTrusted = isOwnOrStaff || user_isTrustMinNotThreat(me, TrustLevel.Trusted);\n \n     let anyViewAnswerButton;\n     let changeStatusTitle;\n     let setNewListItem;\n     let setPlannedListItem;\n     let setStartedListItem;\n     let setDoneListItem;\n+    let assignBtn: RElm | U;\n     let changeCategoryListItem;\n     let changeTopicTypeListItem;\n     let changeComtOrderListItem;\n@@ -114,6 +116,8 @@ const ChangePageDialog = createComponent({\n       dieIf(page !== store.currentPage, 'TyE50MSED257');\n       // @endif\n \n+      const origPost = page.postsByNr[BodyNr];\n+\n       // Ideas and Problems can be solved [tpc_typ_solv], and then\n       // pat cannot change their doing status, unless un-selecting\n       // the solution post.\n@@ -124,6 +128,8 @@ const ChangePageDialog = createComponent({\n           store.currentCategories.length;\n       const canChangePageType = isOwnOrStaff && page_mayChangeRole(page.pageRole) &&\n           settings_selectTopicType(settings, me);\n+      const alreadyDoneOrAnswered =\n+          page.doingStatus === PageDoingStatus.Done || page.pageAnswerPostUniqueId;\n \n       anyViewAnswerButton = !page.pageAnsweredAtMs || !state.showViewAnswerButton ? null :\n           r.div({ className: 's_ExplDrp_ActIt' },\n@@ -165,6 +171,28 @@ const ChangePageDialog = createComponent({\n             text: page.pageRole === PageRole.Problem ? t.d.TooltipProblFixed : t.d.TooltipDone,\n             onSelect: () => savePage({ doingStatus: PageDoingStatus.Done }) });\n \n+      // If it can be closed, it can also be assigned?\n+      const canAssign = page_canToggleClosed(page) &&\n+          // Also if it's been colsed already? â€” To show who was previously assigned?\n+          // So don't:  `!alreadyDoneOrAnswered ||`\n+          // (Later, will use the permission system: can_assign_pats_c, can_assign_self_c.)\n+          isOwnOrTrusted;\n+      assignBtn = !canAssign ? null : rFr({},\n+          r.div({ className: 's_ExplDrp_Ttl' }, \"Assigned to: \"),   // I18N\n+          r.div({ className: 's_ExplDrp_ActIt' },\n+            !origPost.assigneeIds\n+                ? r.span({ className: 'esP_By e_Asg20' }, `(None)`)  // I18N\n+                : r.ul({ className: 'c_AsgsL' }, origPost.assigneeIds.map(patId =>\n+                    r.li({ key: patId },\n+                      UserName({ patId, store, avoidFullName: true })))),\n+            Button({ className: 'e_AsgB', onClick: () => {\n+                openAddPeopleDialog({\n+                      curPats: origPost.assigneeIds?.map(id => store.usersByIdBrief[id]),\n+                      onChanges: (res: PatsToAddRemove) => {\n+                  Server.changeAssignees({ ...res, postId: origPost.uniqueId }, this.close);\n+                }}) }}, t.ChangeDots),\n+              ));\n+\n       changeCategoryListItem = !canChangeCategory ? null : rFragment({},\n           r.div({ className: 's_ExplDrp_Ttl' }, t.cpd.ChangeCatC),\n           r.div({ className: 's_ExplDrp_ActIt' },\n@@ -197,7 +225,7 @@ const ChangePageDialog = createComponent({\n \n       // Show a Close button for unanswered questions and not-yet-done ideas/problems,\n       // and a Reopen button if closed already.\n-      if (page.doingStatus === PageDoingStatus.Done || page.pageAnswerPostUniqueId) {\n+      if (alreadyDoneOrAnswered) {\n         // Page already done / has-an-accepted-answer; then, it's closed already. [5AKBS2]\n       }\n       else if (!page_canToggleClosed(page)) {\n@@ -274,6 +302,7 @@ const ChangePageDialog = createComponent({\n         setPlannedListItem,\n         setStartedListItem,\n         setDoneListItem,\n+        assignBtn,\n         changeCategoryListItem,\n         changeTopicTypeListItem,\n         reopenListItem,"
    },
    {
      "sha": "196f910bfe1a4d1640b46fc9b6bd6108d6dfff1e",
      "filename": "client/app-more/page-dialogs/__dialog-template__.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2F__dialog-template__.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2F__dialog-template__.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2F__dialog-template__.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -7,4 +7,8 @@ Almost, look at:  client/app-more/page-dialogs/disc-layout-dialog.more.ts\n \n    and do in that way, for now.\n \n+Panels that load data template?  Maybe:\n+\n+  export const ListGroupsComponent = React.createFactory<RouteChildProps>(function ...\n+\n */\n\\ No newline at end of file"
    },
    {
      "sha": "88a12b6f48c5d2ec4430ef9f3304fb6bb286b015",
      "filename": "client/app-more/page-dialogs/about-user-dialog.more.ts",
      "status": "modified",
      "additions": 29,
      "deletions": 5,
      "changes": 34,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fabout-user-dialog.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -93,6 +93,7 @@ const AboutPatDialog = createComponent({\n       ...newState,\n     };\n     this.setState(newState2);\n+    // Needs [loadTheGuestOrAnon] server side.  ANON_UNIMPL\n     this.loadPat(idOrUsername);\n   },\n \n@@ -169,6 +170,9 @@ const AboutPatDialog = createComponent({\n       if (!user) {\n         content = r.p({}, t.Loading);\n       }\n+      else if (user.isAnon) {\n+        content = AboutAnon({ anon: user as Anonym });\n+      }\n       else if (isGuest(user)) {\n         content = AboutGuest(childProps);\n       }\n@@ -283,6 +287,8 @@ const AboutUser = createComponent({\n     const extraInfoNewline =\n         props.extraInfo ? r.div({ className: 's_UD_ExtrInf' }, props.extraInfo) : null;\n \n+    // See goup list tests:\n+    //      - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTSEEPATSGROUPS\n     const groupList = userDetailed && GroupList(\n         userDetailed, groupsMaySee, 's_UP_Ab_Stats_Stat_Groups_Group',  // COULD rename css class\n         // `false`: Use r.a() not a Link() because we're not inside a React Router.\n@@ -306,7 +312,7 @@ const AboutUser = createComponent({\n           isGoneInfo,\n           pubTags),\n         r.div({ className: 's_UD_BelwAv' },  // \"below avatar\"\n-          userDetailed && AnyUserEmail(userDetailed, me),\n+          userDetailed && AnyUserEmail(userDetailed),\n           r.div({ className: 's_UP_Gs' },\n             t.GroupsC, groupList))\n         ));\n@@ -315,6 +321,22 @@ const AboutUser = createComponent({\n \n \n \n+interface AboutAnonymProps {\n+  anon: Anonym;\n+}\n+\n+\n+const AboutAnon = React.createFactory<AboutAnonymProps>(function(props) {\n+  const anon: Anonym = props.anon;\n+  return (\n+    r.div({ className: 'clearfix' },\n+      r.div({ className: 'dw-about-user-actions' },\n+        LinkButton({ href: linkToUserProfilePage(anon) }, t.aud.ViewComments)),\n+      r.p({},\n+        t.Anonym)));\n+});\n+\n+\n \n interface AboutGuestProps {\n   store: Store;\n@@ -414,7 +436,7 @@ const AboutGuest = createComponent({\n         r.p({},\n           t.NameC + ' ' + guest.fullName, r.br(),\n           t.aud.ThisIsGuest,\n-          AnyUserEmail(guest, me)),\n+          AnyUserEmail(guest)),\n         anyCannotBeContactedMessage,\n         blockedInfo));\n   }\n@@ -499,14 +521,16 @@ const BlockGuestDialog = createComponent({\n \n \n \n-function AnyUserEmail(user: { email?: string }, me: Myself) {\n-  return !me.isAdmin || !user.email ? null : (\n+function AnyUserEmail(user: { email?: St }) {\n+  // Email included or not test:\n+  //      - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTABOUTBOXEML\n+  return !user.email ? r.span({ className: 'e_0Em' }) : (\n       r.div({ className: 's_UD_Em' },\n         t.EmailC || (t.cud.EmailC + ' '),\n         // Don't use an <a href=\"mailto:...\"> â€” it's better to encourage people\n         // to use the built-in messaging system? And also annoying when some\n         // email program starts, if clicking the email just to copy it.\n-        r.samp({}, user.email),\n+        r.samp({ className: 'e_EmAdr' }, user.email),  // rename, [email_2_emailAdr]\n         OnlyAdminsSee));\n }\n "
    },
    {
      "sha": "74e5fcb72c00a2b867458c5b6e7eaae40d60e064",
      "filename": "client/app-more/page-dialogs/add-remove-people-dialogs.more.ts",
      "status": "modified",
      "additions": 81,
      "deletions": 18,
      "changes": 99,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fadd-remove-people-dialogs.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -34,35 +34,54 @@ const ModalFooter = rb.ModalFooter;\n let addPeopleDialog;\n \n \n-export function openAddPeopleDialog(alreadyAddedIds: UserId[],\n-      onDone: (newIds: UserId[]) => void) {\n+interface SelectListLabelValue {\n+  label: St;\n+  value: PatId;\n+  disabled?: true;\n+}\n+\n+\n+/// Specify either:\n+///   ps.curPats â€” If specified, those pats are shown in the list, and can\n+///       then be removed.\n+/// Or:\n+///   curPatsIds â€” If specified, no pats are shown in the list. You can then\n+///       only *add* pats. (But pats in `curPatsIds` will be disabled in the list\n+///       to choose from.)\n+/// Maybe a bit odd? Could some day instead add a `showCurPatsInList: Bo` param?\n+///\n+export function openAddPeopleDialog(ps: { curPatIds?: PatId[], curPats?: Pat[],\n+        onChanges: (res: PatsToAddRemove) => Vo }) {\n   if (!addPeopleDialog) {\n     addPeopleDialog = ReactDOM.render(AddPeopleDialog(), utils.makeMountNode());\n   }\n-  addPeopleDialog.open(alreadyAddedIds, onDone);\n+  addPeopleDialog.open(ps);\n }\n \n \n const AddPeopleDialog = createComponent({\n   displayName: 'AddPeopleDialog',\n \n   getInitialState: function () {\n-    return {\n-      isOpen: false,\n-      selectedLabelValues: [],\n-    };\n+    return {};\n   },\n \n   componentWillUnmount: function() {\n     this.isGone = true;\n   },\n \n-  open: function(alreadyAddedIds: UserId[], onDone: (newIds: UserId[]) => void) {\n+  open: function(ps: { curPatIds?: PatId[], curPats?: Pat[],\n+            onChanges: (PatsToAddRemove) => Vo }) {\n+    const selectedLabelValues = !ps.curPats ? [] :\n+            ps.curPats.map((p: Pat) => {\n+              return { label: pat_name(p), value: p.id };\n+            });\n     this.setState({\n       isOpen: true,\n-      alreadyAddedIds,\n-      selectedLabelValues: [],\n-      onDone,\n+      alreadyAddedIds: ps.curPatIds || ps.curPats && ps.curPats.map(p => p.id) || [],\n+      selectedLabelValues,\n+      initialPats: ps.curPats,\n+      onChanges: ps.onChanges,\n     });\n   },\n \n@@ -74,35 +93,77 @@ const AddPeopleDialog = createComponent({\n         // is now gone.\n         return;\n       }\n-      const options = makeLabelValues(users, this.state.alreadyAddedIds);\n+\n+      // If `initialPats`, then React-Select will automatically hide those pats\n+      // from the options list (since they've been added already), so it works\n+      // fine for us to leave `alreadyAddedIds` empty â€” and we have to, because\n+      // there's no way to tell React-Select to update the options list,\n+      // when adding/removing a pat. (With the (a bit old) version of\n+      // React-Select we're using.)\n+      // However if it's only possible to add *more* pats, then, we don't shown any\n+      // initially in the selected-items list, and React-Select would show them\n+      // in the options list (although already added) â€” then, we need to disable\n+      // any pats already added.\n+      const alreadyAddedIds = this.state.initialPats ? [] : this.state.alreadyAddedIds;\n+\n+      const options = makeLabelValues(users, alreadyAddedIds);\n       callback(null, { options });\n     });\n   },\n \n   close: function() {\n-    this.setState({ isOpen: false, alreadyAddedIds: null, onDone: null });\n+    this.setState({\n+        isOpen: false, alreadyAddedIds: null, selectedLabelValues: null, onChanges: null });\n   },\n \n-  onSelectChange: function(labelsAndValues: any) {\n+  onSelectChange: function(labelsAndValuesOrNull: SelectListLabelValue[] | N) {\n     // labelsAndValues is null if the clear-all [x] button pressed\n-    this.setState({ selectedLabelValues: labelsAndValues || [] });\n+    const selectedLabelValues = labelsAndValuesOrNull || [];\n+    // React-Select will remove any newly selected items from the options list;\n+    // no need for us to update `state.alreadyAddedIds`.\n+    this.setState({ selectedLabelValues });\n   },\n \n   save: function() {\n-    const userIds = this.state.selectedLabelValues.map(entry => entry.value);\n-    this.state.onDone(userIds);\n+    const state = this.state;\n+    const userIds: PatId[] = state.selectedLabelValues.map(entry => entry.value);\n+\n+    const initialPats: Pat[] | U = state.initialPats;\n+    const initialPatIds: PatId[] | U = initialPats && initialPats.map(p => p.id);\n+\n+    // If we showed old pats in the list, don't add them again.\n+    const addPatIds = !initialPatIds ? userIds :\n+              userIds.filter(id => initialPatIds.indexOf(id) === -1);  // [On2]\n+\n+    // If we did'nt show old pats, then, wasn't possible to remove any. (Can only add.)\n+    const removePatIds = !initialPatIds ? [] :\n+              initialPatIds.filter(id => userIds.indexOf(id) === -1);  // [On2]\n+\n+    const result: PatsToAddRemove = {\n+      addPatIds,\n+      removePatIds,\n+    };\n+    this.state.onChanges(result);\n     this.close();\n   },\n \n   render: function () {\n     let content;\n+    let nothingChanged: Bo | U;\n+    let initialPats: Pat[] = [];\n     if (this.state.isOpen) {\n       content =\n         r.div({ id: 'e2eAddUsD'},\n           rb.ReactSelectAsync({ multi: true, value: this.state.selectedLabelValues,\n             placeholder: t.sud.SelectUsers,\n             loadOptions: this.loadUsernameOptions,\n             onChange: this.onSelectChange }));\n+      const idsSorted: PatId[] = this.state.selectedLabelValues.map(entry => entry.value);\n+      idsSorted.sort();\n+      initialPats = this.state.initialPats || [];\n+      const initialIdsSorted: PatId[] = initialPats.map(p => p.id);\n+      initialIdsSorted.sort();\n+      nothingChanged = _.isEqual(idsSorted, initialIdsSorted);\n     }\n \n     return (\n@@ -111,7 +172,9 @@ const AddPeopleDialog = createComponent({\n         ModalBody({}, content),\n         ModalFooter({},\n           PrimaryButton({ onClick: this.save, id: 'e2eAddUsD_SubmitB',\n-              disabled: !this.state.selectedLabelValues.length }, t.sud.AddUsers),\n+              disabled: nothingChanged },\n+            // If we can remove users, use \"Save\" as button title, instead of \"Add users\".\n+            !initialPats.length ? t.sud.AddUsers : t.Save),\n           Button({ onClick: this.close }, t.Cancel))));\n   }\n });"
    },
    {
      "sha": "38892df1be9014caa6d02b6cd33d1993a2e68d1b",
      "filename": "client/app-more/page-dialogs/anons-allowed-btn.more.ts",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-btn.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-btn.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-btn.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+/// //eference path=\"../more-bundle-already-loaded.d.ts\" />\n+/// <reference path=\"./anons-allowed-diag.more.ts\" />\n+\n+\n+// Buttons that open lazy loaded dialogs.\n+//\n+//------------------------------------------------------------------------------\n+   namespace debiki2.pagedialogs {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+\n+\n+\n+export const AnonsAllowedDropdownBtn = React.createFactory<DiscLayoutDropdownBtnProps>(\n+        function(props: DiscLayoutDropdownBtnProps) {\n+\n+  const derived: NodePropsDerivedAndDefault = node_deriveLayout(props);\n+\n+  // Bit dupl code. [node_props_btn]\n+  return (\n+      Button({ className: 'e_ComtAnoB', onClick: (event) => {\n+          const atRect = cloneEventTargetRect(event);\n+          openAnonsAllowedDiag({\n+              atRect,\n+              // This is what's being edited.\n+              layout: derived.layoutSource,\n+              // This is the defaults, e.g. parent category settings, will get used\n+              // if layoutSource settings cleared (gets set to Inherit).\n+              default: derived.parentsLayout,\n+              // These forSth just affect the dialog title.\n+              forCat: !!props.cat,\n+              forEveryone: props.forEveryone, // not needed actually\n+              onSelect: props.onSelect });\n+        }},\n+        neverAlways_title(derived.actualLayout.comtsStartAnon),\n+            ' ', r.span({ className: 'caret' })));\n+        // + Deanonymize after:\n+            //    N mins / N hours / N days / N weeks /\n+            //       first NNN-day N weeks later /\n+            //       first NNN-day N months later / Never\n+});\n+\n+\n+\n+// Move to where?\n+export function neverAlways_title(neverAlways: NeverAlways): St {\n+  switch (neverAlways) {\n+    // case PostSortOrder.Inherit:\n+    //  Not supposed to happen. Instead the DiscLayoutDiag constructs a list item\n+    //  for the admins. [def_disc_layout_title]\n+    //  Using `default:` case, below.\n+    case NeverAlways.NeverButCanContinue: return \"Never\";  // I18N here and below\n+    case NeverAlways.Allowed: return \"Allowed\";\n+    case NeverAlways.Recommended: return \"Recommended\";\n+    case NeverAlways.AlwaysButCanContinue: return \"Always\";\n+    default:\n+      return `Bad: ${neverAlways} TyENEVRALW`;\n+  }\n+}\n+\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "865559424957b4fd55bf67f320ebfbc2c6eb7111",
      "filename": "client/app-more/page-dialogs/anons-allowed-diag.more.ts",
      "status": "added",
      "additions": 156,
      "deletions": 0,
      "changes": 156,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-diag.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-diag.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fanons-allowed-diag.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+/// <reference path=\"../utils/utils.more.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.pagedialogs {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+const DropdownModal = utils.DropdownModal;\n+const ExplainingListItem = util.ExplainingListItem;\n+\n+\n+let setDiagStateFromOutside: (_: DiscLayoutDiagState) => Vo;\n+\n+export function openAnonsAllowedDiag(ps: DiscLayoutDiagState) {\n+  if (!setDiagStateFromOutside) {\n+    ReactDOM.render(AnonsAllowedDiag(), utils.makeMountNode());  // or [use_portal] ?\n+  }\n+  setDiagStateFromOutside(ps);\n+}\n+\n+\n+/// Some dupl code? [6KUW24]  but this with React hooks.\n+///\n+const AnonsAllowedDiag = React.createFactory<{}>(function() {\n+  //displayName: 'DiscLayoutDiag',\n+\n+  // Dupl code [node_props_diag], similar to  ./disc-layout-dialog.more.ts .\n+\n+  const [diagState, setDiagState] =\n+      React.useState<DiscLayoutDiagState | N>(null);\n+\n+  setDiagStateFromOutside = setDiagState;\n+\n+  const layout: DiscPropsSource | NU = diagState && diagState.layout;\n+  const atRect: Rect = (diagState?.atRect || {}) as Rect;\n+  const isOpen = !!layout;\n+\n+  function close() {\n+    setDiagState(null);\n+  }\n+\n+  let forCat: Bo | U;\n+  let inheritItem: RElm | U;\n+  let neverItem: RElm | U;\n+  let allowItem: RElm | U;\n+  let recommendItem: RElm | U;\n+  let alwaysItem: RElm | U;\n+\n+  if (isOpen) {\n+    forCat = diagState.forCat;\n+\n+    const makeItem = (comtsStartAnon: NeverAlways, e2eClass: St): RElm => {\n+      let active: Bo;\n+      let title: St | RElm;\n+      const isInherit = comtsStartAnon === NeverAlways.Inherit;\n+      if (!isInherit) {\n+        active = comtsStartAnon === layout.comtsStartAnon;\n+        title = neverAlways_title(comtsStartAnon);\n+      }\n+      else {   // [def_disc_layout_title]\n+        // Inheriting is the default, so unlss we've choosen sth else, this\n+        // item is the active one.\n+        active = !layout.comtsStartAnon;\n+        title = rFr({},\n+                  \"Default: \",\n+                  r.span({ className: 'c_CmtOrdIt_InhDef_Val' },\n+                    neverAlways_title(diagState.default.comtsStartAnon)));\n+      }\n+      return ExplainingListItem({\n+            active,\n+            title: r.span({ className: e2eClass  }, title),\n+            text: anonNeverAlways_descr(comtsStartAnon, diagState.default.from.comtsStartAnon),\n+            onSelect: () => {\n+              if (active) {\n+                // Noop. Already using this setting.\n+              }\n+              else {\n+                diagState.onSelect({ ...layout, comtsStartAnon });\n+              }\n+              close();\n+            } });\n+    }\n+\n+    inheritItem = makeItem(NeverAlways.Inherit, 'e_Inh');\n+    neverItem = makeItem(NeverAlways.NeverButCanContinue, 'e_Nevr');\n+    allowItem = makeItem(NeverAlways.Allowed, 'e_Alw');\n+    recommendItem = makeItem(NeverAlways.Recommended, 'e_Rec');\n+    alwaysItem = makeItem(NeverAlways.AlwaysButCanContinue, 'e_Alw');\n+  }\n+\n+  return (\n+      DropdownModal({ show: isOpen, onHide: close, atX: atRect.left, atY: atRect.top,\n+            pullLeft: true, showCloseButton: true, dialogClassName2: 'e_AnonComtsD c_NevAlwD' },\n+        r.div({ className: 's_ExplDrp_Ttl' },\n+          forCat\n+              ? rFr({}, `Anonymous comments, in this category: `, // 0I18N, is for staff\n+                  r.small({ style: { marginLeft: '1ex' }},\n+                    `(and subcategories)`))\n+              : `Anonymous comments, on this page`),\n+        inheritItem,\n+        neverItem,\n+        allowItem,\n+        recommendItem,\n+        alwaysItem,\n+        ));\n+});\n+\n+\n+function anonNeverAlways_descr(nevAlw: NeverAlways, inheritedFrom: Ref | Cat): St | RElm | N {\n+  // 0I18N here; this is for staff.\n+  switch (nevAlw) {\n+    case NeverAlways.Inherit:\n+      return utils.showDefaultFrom(inheritedFrom);\n+\n+    case NeverAlways.NeverButCanContinue:\n+      return \"People cannot post anonymously here.\";\n+\n+    case NeverAlways.Allowed:\n+      return `If anyone wants, they can choose to be anonymous. By default, ` +\n+              `though, one's real account is used.`;\n+\n+    case NeverAlways.Recommended:\n+      return `People are anonymous, by default. ` +\n+              `One can still chooose to use one's real account.`;\n+\n+    case NeverAlways.AlwaysButCanContinue:\n+      return \"Everyone is anonymous.\";\n+\n+    default:\n+      return null;\n+  }\n+}\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "7b0867dfb057d04863447e985d54f5a3d19133ee",
      "filename": "client/app-more/page-dialogs/choose-author-owner.more.ts",
      "status": "added",
      "additions": 204,
      "deletions": 0,
      "changes": 204,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fchoose-author-owner.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fchoose-author-owner.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fchoose-author-owner.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.anon {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+const DropdownModal = utils.DropdownModal;\n+const ExplainingListItem = util.ExplainingListItem;\n+\n+\n+let setStateExtFn: (_: ChooseAnonDlgPs) => Vo;\n+\n+export function openAnonDropdown(ps: ChooseAnonDlgPs) {\n+  if (!setStateExtFn) {\n+    ReactDOM.render(ChooseAnonModal(), utils.makeMountNode());  // or [use_portal] ?\n+  }\n+  setStateExtFn(ps);\n+}\n+\n+\n+/// Some dupl code? [6KUW24]  but this with React hooks.\n+///\n+///  Or use instead:  client/app-more/page-dialogs/add-remove-people-dialogs.more.ts  ?\n+///  Or maybe have this dialog, use that dialog,\n+///       via a  As someone else ...   button â€” and then one could use one's pen name,\n+///       if any?\n+///\n+///\n+const ChooseAnonModal = React.createFactory<{ChooseAnonDlgPs}>(function() {\n+  //displayName: 'ChooseAnonModal',\n+\n+  // TESTS_MISSING\n+\n+  const [state, setState] = React.useState<ChooseAnonDlgPs | N>(null);\n+\n+  setStateExtFn = setState;\n+\n+  const atRect: Rect = (state?.atRect || {}) as Rect;\n+  const isOpen = state && state.open;\n+\n+  function close() {\n+    setState(null);\n+  }\n+\n+  let asYourName: RElm | U;\n+  let anonymously: RElm | U;\n+\n+  if (isOpen) {\n+    const me: Me = state.me;\n+    const pat: Pat | U = state.pat;\n+    const makeItem = (whichAnon: WhichAnon, e2eClass: St): RElm => {\n+      const title = r.span({ className: e2eClass }, whichAnon_title(whichAnon, { me, pat }));\n+      const text = whichAnon_descr(whichAnon, { me, pat });\n+      return (\n+          ExplainingListItem({\n+            title, text,\n+            active: obj_isDeepEqIgnUndef(whichAnon, state.curAnon),\n+            onSelect: () => {\n+              state.saveFn(whichAnon);\n+              close();\n+            },\n+          }));\n+    }\n+\n+    // Later: True if one has already posted something on the current page,\n+    // using one's real account.\n+    const alreadyTalkingAsSelf = false;  // ANON_UNIMPL\n+    const mustBeAnon = state.discProps.comtsStartAnon >= NeverAlways.AlwaysButCanContinue;\n+    // It's ok to *continue* posting, using one's real account, on\n+    // this page, because:  Comments start anon  Always-**But-Can-Continue**  posting\n+    // using one's real name.\n+    const canContinueAsSelf =\n+            state.discProps.comtsStartAnon <= NeverAlways.AlwaysButCanContinue;\n+    const mayUseRealName = !mustBeAnon || (canContinueAsSelf && alreadyTalkingAsSelf);\n+\n+    if (mayUseRealName) {\n+      asYourName = makeItem({ newAnonStatus: AnonStatus.NotAnon }, 'e_AtrSelf');\n+    }\n+    anonymously = makeItem({ newAnonStatus: AnonStatus.IsAnonCanAutoDeanon }, 'e_AtrAnon');\n+\n+    // Distant future: [pseudonyms_later]\n+    // usingPseudonym = ...\n+    // and also a way to: openAddPseudonymsDialog(alreadyAddedIds, onDone) ?\n+  }\n+\n+  return (\n+      DropdownModal({ show: isOpen, onHide: close, atX: atRect.left, atY: atRect.top,\n+          pullLeft: true, showCloseButton: true },\n+        r.div({ className: 's_ExplDrp_Ttl' }, \"Post ...\"),  // I18N\n+        asYourName,\n+        anonymously));\n+});\n+\n+\n+export function whichAnon_titleShort(doAs: WhichAnon | U, ps: { me: Me, pat?: Pat })\n+      : St | RElm {\n+  return whichAnon_titleDescrImpl(doAs, ps, TitleDescr.TitleShort);\n+};\n+\n+\n+export function whichAnon_title(doAs: WhichAnon | U, ps: { me: Me, pat?: Pat }): St | RElm {\n+  return whichAnon_titleDescrImpl(doAs, ps, TitleDescr.TitleLong);\n+};\n+\n+\n+export function whichAnon_descr(doAs: WhichAnon | U, ps: { me: Me, pat?: Pat }): St | RElm {\n+  return whichAnon_titleDescrImpl(doAs, ps, TitleDescr.DescrLong);\n+};\n+\n+\n+const enum TitleDescr {\n+  TitleShort = 1,\n+  TitleLong = 2,\n+  DescrShort = 3,\n+  DescrLong = 4,\n+}\n+\n+\n+function whichAnon_titleDescrImpl(doAs: WhichAnon | U, ps: { me: Me, pat?: Pat },  // I18N\n+        what: TitleDescr): St | RElm {\n+  const anonStatus = doAs ? doAs.anonStatus || doAs.newAnonStatus : AnonStatus.NotAnon;\n+  // UX SHOULD if doAs.sameAnonId, then, show which anon (one might have > 1 on the\n+  // same page) pat will continue posting as / using.\n+  // But not a hurry? Right now one cannot have more than one anon per\n+  // page? [many_anons_per_page]\n+\n+  switch (anonStatus) {\n+    case AnonStatus.IsAnonCanAutoDeanon: {\n+      switch (what) {\n+        case TitleDescr.TitleShort:\n+        case TitleDescr.TitleLong:\n+          return rFr({},\n+              // To capitalize via CSS, where needed.\n+              r.span({ className: 'n_TtlCap',\n+                  // It's good to never let this be bold â€” so \"temporarily\" below\n+                  // becomes more prominent.\n+                  style: { fontWeight: 'normal' }}, \"anonymously, \"),\n+              // It's important (I think) to incl \"temporarily\", if the anon\n+              // can/will get deanonymized later.\n+              r.b({}, \"temporarily\"));\n+        default:\n+          // TitleDescr.DescrShort and Long:\n+          return rFr({}, r.i({}, \"For a while: \"), nameNotShownEtc,\n+              r.b({}, \" Later\"), \", everyone's \", r.b({}, \"real\"), \" user \",\n+              r.b({}, \"names\"), \" will (might) get \", r.b({}, \"shown\"), \".\");\n+      }\n+    }\n+\n+    case AnonStatus.IsAnonOnlySelfCanDeanon: {\n+      switch (what) {\n+        case TitleDescr.TitleShort:\n+        case TitleDescr.TitleLong:\n+          return r.span({ className: 'n_TtlCap' }, \"anonymously\");\n+        default:\n+          // TitleDescr.DescrShort and Long:\n+          return nameNotShownEtc;\n+      }\n+    }\n+\n+    default: {\n+      // Not anonymously.\n+      switch (what) {\n+        case TitleDescr.TitleShort:\n+          return \"as \" + pat_name(ps.pat || ps.me);\n+        case TitleDescr.TitleLong:\n+          const pat = ps.pat;\n+          return pat ? \"As \" + pat_name(pat)\n+                    : \"As you, \" + pat_name(ps.me);\n+        default:\n+          // TitleDescr.DescrShort and Long:\n+          return \"Others can see who you are â€” they'll see your username and picture.\";\n+      }\n+    }\n+  }\n+}\n+\n+\n+const nameNotShownEtc =  // I18N\n+        \"Your name and picture won't be shown. \" +\n+        \"Admins and moderators can still check who you are, though.\";\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "8b6e777d40baa961971aede712e21e00f9652c64",
      "filename": "client/app-more/page-dialogs/disc-layout-dialog.more.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fdisc-layout-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fpage-dialogs%2Fdisc-layout-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fpage-dialogs%2Fdisc-layout-dialog.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -41,6 +41,8 @@ export function openDiscLayoutDiag(ps: DiscLayoutDiagState) {\n const DiscLayoutDiag = React.createFactory<{}>(function() {\n   //displayName: 'DiscLayoutDiag',\n \n+  // Dupl code [node_props_diag], similar to  ./anons-allowed-diag.more.ts .\n+\n   const [diagState, setDiagState] =\n       React.useState<DiscLayoutDiagState | N>(null);\n \n@@ -87,7 +89,7 @@ const DiscLayoutDiag = React.createFactory<{}>(function() {\n       return ExplainingListItem({\n             active,\n             title: r.span({ className: e2eClass  }, title),\n-            text: comtOrder_descr(itemComtOrder, diagState.default.comtOrderFrom),\n+            text: comtOrder_descr(itemComtOrder, diagState.default.from.comtOrder),\n             onSelect: () => {\n               if (active) {\n                 // Noop. Already using this comment sort order.\n@@ -114,7 +116,9 @@ const DiscLayoutDiag = React.createFactory<{}>(function() {\n           forCat\n               ? // Need not mention that this is for everyone â€” everything in\n                 // the category edit dialog affects everyone.\n-                `Comments sort order, in this category:` // 0I18N, is for staff\n+                rFr({}, `Comments sort order, in this category: `, // 0I18N, is for staff\n+                  r.small({ style: { marginLeft: '1ex' }},\n+                    `(and subcategories)`))\n               : (\n                 // But when changing sort order, on a specific page, then,\n                 // one button is for everyone â€”Â the [Change...] page button.\n@@ -131,18 +135,11 @@ const DiscLayoutDiag = React.createFactory<{}>(function() {\n });\n \n \n-function comtOrder_descr(comtOrder: PostSortOrder, inheritedFrom: Ref): St | RElm | N {\n+function comtOrder_descr(comtOrder: PostSortOrder, inheritedFrom: Ref | Cat): St | RElm | N {\n   // 0I18N here; this is for staff.\n   switch (comtOrder) {\n     case PostSortOrder.Inherit:\n-      let fromWhere = '';\n-      if (inheritedFrom.startsWith('pageid:')) fromWhere = \", for this page\";\n-      if (inheritedFrom.startsWith('catid:')) fromWhere = \", inherited from a category\";\n-      if (inheritedFrom.startsWith('sstg:')) fromWhere = \", inherited from the site settings\";\n-      if (inheritedFrom.startsWith('BuiltIn')) fromWhere = '';\n-      // UX COULD write \"Category [Cat Name]\" instead of just `cat:1234`.\n-      return rFr({},\n-              `The default${fromWhere}. `, r.small({}, `(${inheritedFrom})`));\n+      return utils.showDefaultFrom(inheritedFrom);\n \n     case PostSortOrder.BestFirst:\n       return \"Comments many have liked, in comparison to how many have read them, \" +"
    },
    {
      "sha": "a7575488edf5f89e543584699bd0b20e8e342bdb",
      "filename": "client/app-more/users/group-members.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fgroup-members.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fgroup-members.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fgroup-members.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -65,10 +65,11 @@ export const GroupMembers = React.createFactory<GroupMembersProps>(function(prop\n \n   function showAddMembersDialog() {\n     const currentMemberIds = members.map(m => m.id);\n-    pagedialogs.openAddPeopleDialog(currentMemberIds, (newIds: UserId[]) => {\n+    pagedialogs.openAddPeopleDialog({ curPatIds: currentMemberIds,\n+          onChanges: (res: PatsToAddRemove) => {\n       if (myId.current !== me.id) return;\n-      Server.addGroupMembers(group.id, newIds, listAndSetMembers);\n-    });\n+      Server.addGroupMembers(group.id, res.addPatIds, listAndSetMembers);\n+    }});\n   }\n \n   function removeMember(memberId: UserId) {"
    },
    {
      "sha": "5bdf413065b617023519201eb6b53ba935b6d867",
      "filename": "client/app-more/users/pat-perms.more.ts",
      "status": "modified",
      "additions": 52,
      "deletions": 20,
      "changes": 72,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fpat-perms.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fpat-perms.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fpat-perms.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -33,7 +33,7 @@ interface PatPermsProps {\n \n \n interface DiagState {\n-  groupNow: GroupVb;\n+  permsNow: GroupPerms;\n   savingStatus?: St;\n   maxUplBytesErr?: St;\n }\n@@ -43,57 +43,87 @@ export const PatPerms = React.createFactory<PatPermsProps>(function(props) {\n   //displayName: 'PatPerms',\n \n   const groupBef: GroupVb = props.user; // weird name, could fix\n+  if (!groupBef.perms)\n+    return r.p({ className: 'e_May0' },\n+        `May not access this group's permission settings. [TyE0SEEGRPPRMS]`);\n+\n   const store: Store = props.store;\n   const me = store.me;\n+  const isModsOrCoreMembsGroup =\n+          groupBef.id === Groups.ModeratorsId ||\n+          groupBef.id === Groups.CoreMembersId;\n+  const isAdminsGroup =\n+          groupBef.id === Groups.AdminsId;\n+\n+  const [state, setState] = React.useState<DiagState>({ permsNow: groupBef.perms });\n \n-  const [state, setState] = React.useState<DiagState>({ groupNow: groupBef });\n-  const groupNow = state.groupNow;\n+  const permsNow = state.permsNow;\n \n   // Break out hook? [my_cur_id]\n   const myId = React.useRef(me.id);\n   React.useEffect(() => {\n     myId.current = me.id;\n-    // Clear changes if one logs out? Hmm maybe redirect to other profile tab?\n-    setState({ groupNow: groupBef });\n+    // Clear changes if one logs out? (Might still be allowed to see the group.)\n+    setState({ permsNow: groupBef.perms }); // satisfies DiagState);\n     return () => myId.current = null;\n   }, [me.id]);\n \n   function savePerms(event) {\n     event.preventDefault();\n-    const g = state.groupNow;\n-    const perms: GroupPerms = {\n-      allowedUplExts: g.allowedUplExts,\n-      maxUploadBytes: g.maxUploadBytes,\n-    };\n-    setState({ ...state, savingStatus: 'Saving ...' });\n-    Server.savePatPerms(g.id, perms, (r: { patNoStatsNoGroupIds: PatVb }) => {\n+    setState({ ...state, savingStatus: 'Saving ...' }); // satisfies DiagState);\n+    Server.savePatPerms(groupBef.id, permsNow, (r: { patNoStatsNoGroupIds: PatVb }) => {\n       if (myId.current !== me.id) return;\n-      setState({ ...state, savingStatus: 'Saved' });\n+      setState({ ...state, savingStatus: 'Saved' }); // satisfies DiagState);\n       props.updatePat(r.patNoStatsNoGroupIds);\n     });\n   }\n \n+  const grantOrView = me.isAdmin ? \"grant\" : \"view\";\n+  const toOrOf = me.isAdmin ? \"to\" : \"of\";\n   return r.div({ className: 's_PP_PrmsTb' },\n       r.h3({}, \"Group Permissions\"),   // 0I18N, this is for staff only\n       r.p({},\n-        \"Here you can grant permissions to members of this group. \" +\n+        `Here you can ${grantOrView} permissions ${toOrOf} members of this group. ` +\n         \"Permissions are additive: if any group you're in \" +\n         \"lets you do something, then you can do it.\"),\n       groupBef.id !== Groups.EveryoneId ? null : r.p({},\n         r.b({}, \"Note! \"), \"This group grants persmissions to everyone, \" +\n         \"including strangers, e.g. anonymous blog commenters.\"\n         ),\n-      groupBef.id !== Groups.AllMembersId ? null : r.p({},\n+      groupBef.id !== Groups.AllMembersId || !me.isAdmin ? null : r.p({},\n         r.b({}, \"Note! \"),\n         \"Permissions you grant here, are granted to all members. \" +\n         \"(But not guests / anonymous blog commenters.\"\n         ),\n \n       r.form({ role: 'form', onSubmit: savePerms },\n+        !isModsOrCoreMembsGroup && !isAdminsGroup ? null :\n+        Input({ type: 'checkbox', label: \"Can see everyone's email addresses\",\n+            className: 'c_PP_PrmsTb_SeeEmls  e_SeeEmls',\n+            // UX COULD show ticked but disabled, if inherited from ancestor group?\n+            // And, a link to that group, so can jump there to edit?\n+            checked: isAdminsGroup || permsNow.canSeeOthersEmailAdrs,\n+            disabled: !me.isAdmin || !isModsOrCoreMembsGroup,\n+            onChange: (event: CheckboxEvent) => {\n+              // Don't set to false â€” negative perms not implemented. [may_not_perms]\n+              const canSeeOthersEmailAdrs = event.target.checked || undefined;\n+              setState({\n+                    permsNow: { ...permsNow, canSeeOthersEmailAdrs }, savingStatus: '' });\n+                    // satisfies DiagState);\n+            },\n+            help:\n+                isAdminsGroup ? `Admins can always see others' email addresses.` : (\n+                `Lets ${groupBef.id === Groups.CoreMembersId ? `core members and ` : ''\n+                        } moderators see everyone's email addresses.`)\n+                        // if mods, and core members ticked, could show\n+                        // + sth like:  \"(Inherited from the Core Members group)\"  ?\n+             }),\n+\n         Input({ label: \"Max upload size, MiB:\",\n             className: 's_PP_PrmsTb_UplMiB',\n-            defaultValue: !_.isNumber(groupNow.maxUploadBytes) ? 0 :\n-                  (groupNow.maxUploadBytes * 1.0 / Sizes.Mebibyte).toFixed(2),\n+            defaultValue: !_.isNumber(permsNow.maxUploadBytes) ? 0 :\n+                  (permsNow.maxUploadBytes * 1.0 / Sizes.Mebibyte).toFixed(2),\n+            disabled: !me.isAdmin,\n             onChange: (event) => {\n               const value = event.target.value;\n               const maxUploadMiB = parseFloat(value);\n@@ -102,7 +132,7 @@ export const PatPerms = React.createFactory<PatPermsProps>(function(props) {\n                 return;\n               }\n               const maxUploadBytes = Math.floor(maxUploadMiB * Sizes.Mebibyte);\n-              setState({ groupNow: { ...groupNow, maxUploadBytes }, savingStatus: '' });\n+              setState({ permsNow: { ...permsNow, maxUploadBytes }, savingStatus: '' });\n             } }),\n         !state.maxUplBytesErr ? null :\n           r.p({ style: { color: '#d00' } }, state.maxUplBytesErr),\n@@ -118,12 +148,14 @@ export const PatPerms = React.createFactory<PatPermsProps>(function(props) {\n             help: rFr({}, \"Space separated. Don't include dots, e.g. do this: \",\n                 r.kbd({}, 'jpg'), \", but not: \", r.kbd({}, '.jpg'),\n                 \".\"),\n-            value: groupNow.allowedUplExts || '',\n+            value: permsNow.allowedUplExts || '',\n+            disabled: !me.isAdmin,\n             onChange: (event) => {\n               const allowedUplExts = event.target.value;\n-              setState({ groupNow: { ...groupNow, allowedUplExts }, savingStatus: ''});\n+              setState({ permsNow: { ...permsNow, allowedUplExts }, savingStatus: ''});\n             } }),\n \n+        !me.isAdmin ? null :\n         InputTypeSubmit({ className: 'e_SvPerms', style: { marginTop: '11px' },\n               value: \"Save\", disabled: !!state.maxUplBytesErr }),  // 0I18N\n         r.span({}, ' ', state.savingStatus)));"
    },
    {
      "sha": "042dd79778a8903d797b7091e678f013597d1900",
      "filename": "client/app-more/users/user-activity.more.ts",
      "status": "modified",
      "additions": 48,
      "deletions": 31,
      "changes": 79,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-activity.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -27,20 +27,22 @@ const Post = page.Post;\n const SlashActivitySlash = '/activity/';\n \n \n-export const UsersActivity = createFactory<any, any>({\n+export const UsersActivity = createFactory<PatStatsPanelProps, any>({\n   displayName: 'UsersActivity',\n \n   render: function() {\n-    const store: Store = this.props.store;\n-    const user: UserInclDetails = this.props.user;\n+    const props: PatStatsPanelProps = this.props;\n+    const store: Store = props.store;\n+    const user: UserDetailsStatsGroups = props.user;\n     const me: Myself = store.me;\n \n-    const childProps = {\n+    const childProps: PatStatsPanelProps = {\n       store,\n       user,\n       me,\n-      stats: this.props.stats, // for the Summary page\n-      reloadUser: this.props.loadCompleteUser,\n+      stats: props.stats, // for the Summary page (UserSummary() below)\n+      // CLEAN_UP, REMOVE, not needed here?\n+      //reloadUser: props.loadCompleteUser,\n     };\n \n     const childRoute = Switch({},\n@@ -62,6 +64,7 @@ export const UsersActivity = createFactory<any, any>({\n \n     const uap = pathTo(user) + SlashActivitySlash;\n \n+    // REFACTOR, break out fn, dupl code. [post_list_dupl_html]  SMALLER_BUNDLE\n     return (\n       // Without table-layout: fixed, the table can become 5000 px wide, because otherwise the\n       // default layout is width = as wide as the widest cell wants to be.\n@@ -114,52 +117,62 @@ function makeMaybeHiddenInfo(me: Myself, user: UserInclDetails) {\n \n \n \n-const UsersPosts = createFactory<any, any>({\n+interface UsersPostsState {\n+  posts?: PostWithPage[];\n+}\n+\n+\n+// MOVE to new file: PostList, which takes a PostQuery.\n+//\n+export const UsersPosts = createFactory<any, any>({\n   displayName: 'UsersPosts',\n \n   getInitialState: function() {\n-    return { posts: null };\n+    return {}; // satisfies UsersPostsState;\n   },\n \n   componentDidMount: function() {\n-    const me: Myself = this.props.store.me;\n-    const user: UserInclDetails = this.props.user;\n-    this.loadPosts(me, user);\n+    this.loadPosts();\n   },\n \n   componentWillUnmount: function() {\n     this.isGone = true;\n   },\n \n-  UNSAFE_componentWillReceiveProps: function(nextProps) {\n+  componentDidUpdate: function(prevProps: PatPostsPanelProps) {\n     // a bit dupl code [5AWS2E9]\n-    const store: Store = this.props.store;\n+    const nextProps: PatPostsPanelProps = this.props;\n     const nextStore: Store = nextProps.store;\n-    const me: Myself = this.props.me;  // not store.me, it's been modif in-place [redux]\n-    const user: UserInclDetails = this.props.user;\n-    const nextMe: Myself = nextStore.me;\n-    const nextUser: UserInclDetails = nextProps.user;\n+    const prevMe: Myself = prevProps.me;  // not store.me, it's been modif in-place [redux]\n+    const prevPat: UserInclDetails = prevProps.user;\n+    const nextMe: Myself = nextStore.me;   // (... would be the same as this `me`?)\n+    const nextPat: UserInclDetails = nextProps.user;\n     // If we log in as someone else, which posts we may see might change.\n-    if (me.id !== nextMe.id || user.id !== nextUser.id) {\n-      this.loadPosts(nextMe, nextUser);\n+    if (prevMe.id !== nextMe.id ||\n+        prevPat.id !== nextPat.id ||\n+        prevProps.onlyOpen !== nextProps.onlyOpen) {\n+      this.loadPosts();\n     }\n   },\n \n-  loadPosts: function(me: Myself, user: UserInclDetails) {\n+  loadPosts: function() {\n+    const props: PatPostsPanelProps = this.props;\n+    const me: Myself = props.store.me;\n+    const user: UserInclDetails = props.user;\n     // a bit dupl code [5AWS2E8]\n     const [isStaffOrSelf, hiddenForMe] = isHiddenForMe(me, user);\n     if (hiddenForMe) {\n-      this.setState({ posts: [], author: null });\n+      this.setState({ posts: [] });  // satisfies UsersPostsState\n       return;\n     }\n     if (this.nowLoading === user.id) return;\n     this.nowLoading = user.id;\n-    Server.loadPostsByAuthor(user.id, (response: any) => {\n+    Server.loadPostsByAuthor(user.id, props.showWhat, props.onlyOpen,\n+            (response: LoadPostsResponse) => {\n       this.nowLoading = null;\n       if (this.isGone) return;\n-      this.setState({\n+      this.setState({  // satisfies UsersPostsState\n         posts: response.posts,\n-        author: response.author,\n       }, () => {\n         // BUG but rather harmless. Runs processPosts (e.g. MathJax) also on topic titles,\n         // although that's not done in the forum topic list or full page title.\n@@ -173,28 +186,32 @@ const UsersPosts = createFactory<any, any>({\n   },\n \n   render: function() {\n-    const store: Store = this.props.store;\n-    const me: Myself = this.props.me;\n-    const user: UserInclDetails = this.props.user;\n-    const posts: PostWithPage[] = this.state.posts;\n-    const author: BriefUser = this.state.author;\n+    const props: PatPostsPanelProps = this.props;\n+    const state: UsersPostsState = this.state;\n+    const store: Store = props.store;\n+    const me: Myself = props.me;\n+    const user: UserInclDetails = props.user;\n+    const posts: PostWithPage[] = state.posts;\n     if (!_.isArray(posts))\n       return (\n         r.p({}, t.Loading));\n \n     const noPostsClass = _.isEmpty(posts) ? ' e_NoPosts' : '';\n \n     const postElems = posts.map((post: PostWithPage) => {\n+      const author = store.usersByIdBrief[post.authorId];\n       return (\n         r.li({ key: post.uniqueId, className: 's_UP_Act_Ps_P' },\n           Link({ to: linkToPostNr(post.pageId, post.nr),\n+              // UX SHOULD use  makeTitle() from forum.ts  instead, [same_title_everywhere]\n+              // so planned-doing-done/answerded/closed icons are shown.\n               className: 's_UP_Act_Ps_P_Link ' + pageRole_iconClass(post.pageRole) },\n             post.pageTitle),\n           avatar.Avatar({ user: author, origins: store, size: AvatarSize.Small }),\n           Post({ post, store, author, live: false }))); // author: [4WKA8YB]\n     });\n \n-    return rFragment({},\n+    return rFr({},\n       makeMaybeHiddenInfo(me, user),\n       r.ol({ className: 's_UP_Act_Ps' + noPostsClass }, postElems));\n   }\n@@ -220,7 +237,7 @@ const UsersTopics = createFactory<any, any>({\n   },\n \n   UNSAFE_componentWillReceiveProps: function(nextProps) {\n-    // a bit dupl code [5AWS2E9]\n+    // a bit dupl code [5AWS2E9]  (UNSAFE_.. fixed above)\n     const store: Store = this.props.store;\n     const nextStore: Store = nextProps.store;\n     const me: Myself = this.props.me;  // not store.me, it's been modif in-place [redux]"
    },
    {
      "sha": "7163e0b0afd687548206c8ffc54d90afa5f95b36",
      "filename": "client/app-more/users/user-drafts-etc.more.ts",
      "status": "modified",
      "additions": 39,
      "deletions": 23,
      "changes": 62,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-drafts-etc.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-drafts-etc.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-drafts-etc.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -24,16 +24,27 @@\n \n const r = ReactDOMFactories;\n \n+interface UserDraftProps {\n+  user: UserInclDetails;\n+  store: Store;\n+}\n+\n+interface UserDraftState {\n+  error?: St | true;\n+  work?: ListDraftsResponse;\n+}\n+\n \n export const UserDrafts = createFactory({\n   displayName: 'UserDrafts',\n \n   getInitialState: function() {\n-    return { drafts: null, error: null };\n+    return {};\n   },\n \n   componentDidMount: function() {\n-    const user: UserInclDetails = this.props.user;\n+    const props: UserDraftProps = this.props;\n+    const user: UserInclDetails = props.user;\n     this.listDrafts(user.id);\n   },\n \n@@ -42,10 +53,11 @@ export const UserDrafts = createFactory({\n   },\n \n   // SHOULD Switch to componentDidUpdate instead, see  users-page.more.ts  for how.\n-  UNSAFE_componentWillReceiveProps: function(nextProps: any) {\n+  UNSAFE_componentWillReceiveProps: function(nextProps: UserDraftProps) {\n     // Dupl code, also in view notfs. [7WUBKZ0]\n-    const me: Myself = this.props.store.me;\n-    const user: UserInclDetails = this.props.user;\n+    const props: UserDraftProps = this.props;\n+    const me: Myself = props.store.me;\n+    const user: UserInclDetails = props.user;\n     const nextLoggedInUser: Myself = nextProps.store.me;\n     const nextUser: UserInclDetails = nextProps.user;\n     if (me.id !== nextLoggedInUser.id || user.id !== nextUser.id) {\n@@ -55,42 +67,46 @@ export const UserDrafts = createFactory({\n \n   listDrafts: function(userId: UserId) {\n     // Dupl code, also in view notfs. [7WUBKZ0]\n-    const me: Myself = this.props.store.me;\n+    const props: UserDraftProps = this.props;\n+    const me: Myself = props.store.me;\n+\n     if (me.id !== userId && !isStaff(me)) {\n       this.setState({\n         error: \"May not list an other user's drafts. [TyE5ARBK2]\",\n-        drafts: null,\n-      });\n+        work: null,\n+      }); // satisfies UserDraftState);\n       return;\n     }\n+\n     Server.listDrafts(userId, (response: ListDraftsResponse) => {\n       if (this.isGone) return;\n       this.setState({\n         error: null,\n-        drafts: response.drafts,\n-        pageTitlesById: response.pageTitlesById,\n-        pagePostNrsByPostId: response.pagePostNrsByPostId,\n-      });\n+        work: response,\n+      }); // satisfies UserDraftState);\n     }, () => {\n-      // Clear state.drafts, in case we're no longer allowed to view the drafts.\n-      this.setState({ error: true, drafts: null });\n+      // Clear drafts, in case we're no longer allowed to view the drafts.\n+      this.setState({ error: true, work: null }); // satisfies UserDraftState);\n     });\n   },\n \n   render: function() {\n+    const props: UserDraftProps = this.props;\n+    const state: UserDraftState = this.state;\n+\n     // Dupl code, also in view notfs. [7WUBKZ0]\n-    if (this.state.error)\n+    if (state.error)\n       return (\n         r.p({ className: 'e_Dfs-Err' },\n-          _.isString(this.state.error) ? this.state.error : \"Error [EsE7YKW2].\"));\n-\n-    const drafts: Draft[] = this.state.drafts;\n+          _.isString(state.error) ? state.error : \"Error [EsE7YKW2].\"));\n \n-    if (!drafts)\n+    const work: ListDraftsResponse | NU = state.work;\n+    if (!work)\n       return r.p({}, t.Loading);\n \n-    const user: UserInclDetails = this.props.user;\n-    const store: Store = this.props.store;\n+    const drafts: Draft[] = work.drafts;\n+    const user: UserInclDetails = props.user;\n+    const store: Store = props.store;\n     const me: Myself = store.me;\n     const isMe = user.id === me.id;\n \n@@ -99,8 +115,8 @@ export const UserDrafts = createFactory({\n \n     const draftElems = drafts.map((draft: Draft) =>\n         r.li({ key: draft.draftNr },\n-          Draft({ draft, pageTitlesById: this.state.pageTitlesById,\n-            pagePostNrsByPostId: this.state.pagePostNrsByPostId })));\n+          Draft({ draft, pageTitlesById: work.pageTitlesById,\n+            pagePostNrsByPostId: work.pagePostNrsByPostId })));\n \n     return (\n       r.div({ className: 'c_Dfs' },"
    },
    {
      "sha": "8ed64875a1000552d29c473151d57a84249798a9",
      "filename": "client/app-more/users/user-invites.more.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-invites.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-invites.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-invites.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -82,10 +82,10 @@ export const UserInvites = createFactory({\n     const user: UserInclDetails = this.props.user;\n \n     if (isGuest(me))\n-      return r.p({}, \"You are logged in as a guest. They may not see invites.\");\n+      return r.p({}, \"You are logged in as a guest. They may not see invites.\"); // I18N\n \n     if (!isMember(me))\n-      return r.p({}, \"You are not logged in.\");\n+      return r.p({}, \"You are not logged in.\"); // I18N [not_logged_in_err_msg]\n \n     if (this.state.errorMessage)\n       return r.p({}, this.state.errorMessage);"
    },
    {
      "sha": "5acd53744e4c48c81165407f889984c8bf09daa6",
      "filename": "client/app-more/users/user-notifications.more.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-notifications.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-notifications.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-notifications.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -43,7 +43,8 @@ export const UserNotifications = createFactory({\n \n   // SHOULD Switch to componentDidUpdate instead, see  users-page.more.ts  for how.\n   UNSAFE_componentWillReceiveProps: function(nextProps: any) {\n-    // Dupl code, also in view drafts. [7WUBKZ0]\n+    // Dupl code, also in view drafts. [7WUBKZ0]  The drafts code is better â€”\n+    // more type safe.\n     const me: Myself = this.props.store.me;\n     const user: UserInclDetails = this.props.user;\n     const nextLoggedInUser: Myself = nextProps.store.me;\n@@ -59,7 +60,7 @@ export const UserNotifications = createFactory({\n     const me: Myself = this.props.store.me;\n     if (me.id !== userId && !isStaff(me)) {\n       this.setState({\n-        error: \"May not list an other user's notifications. [EdE7WK2L_]\",\n+        error: \"May not list an other user's notifications. [EdE7WK2L]\",\n         notfs: null,\n       });\n       return;"
    },
    {
      "sha": "3c835ee9f2b5508e909bf5f408e86a22858db2ec",
      "filename": "client/app-more/users/user-preferences.more.ts",
      "status": "modified",
      "additions": 70,
      "deletions": 34,
      "changes": 104,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-preferences.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -52,8 +52,10 @@ export const UserPreferences = createFactory({\n     const location = this.props.location;\n     const store: Store = this.props.store;\n     const me: Myself = store.me;\n+    const isSelf = me.isAuthenticated && me.id === user.id;\n+    const isSelfOrAdmin = isSelf || me.isAdmin;\n \n-    const mayViewPrefs = isStaff(me) || (me.isAuthenticated && me.id === user.id);\n+    const mayViewPrefs = isStaff(me) || isSelf || user.email;\n     if (!mayViewPrefs)\n       return null;\n \n@@ -86,6 +88,7 @@ export const UserPreferences = createFactory({\n     const isBuiltInUser = member_isBuiltIn(user);\n     const isGuestOrBuiltIn = isGuest || isBuiltInUser;\n     const isGroupGuestOrBuiltIn = user.isGroup || isGuestOrBuiltIn;\n+    const isSelfOrStaff = isSelfOrAdmin || isStaff(me);\n \n     return (\n       // Without table-layout: fixed, the table can become 5000 px wide, because otherwise the\n@@ -95,15 +98,20 @@ export const UserPreferences = createFactory({\n           r.div({ className: 's_UP_Act_Nav' },\n             r.ul({ className: 'dw-sub-nav nav nav-pills nav-stacked' },\n               LiNavLink({ to: aboutPath, className: 's_UP_Prf_Nav_AbtL' }, t.upp.About),\n+\n               // It's possible to configure built-in groups (which are \"normal\" members).\n-              !isNormalMember ? null: LiNavLink({\n+              !isNormalMember || !isSelfOrAdmin ? null: LiNavLink({\n                   to: prefsPathSlash + notfsPathSeg, className: 's_UP_Prf_Nav_NtfsL' }, t.Notifications),\n+\n               !isNormalMember ? null : LiNavLink({\n                   to: privacyPath, className: 'e_UP_Prf_Nav_PrivL' }, t.upp.Privacy),\n-              isGroupGuestOrBuiltIn ? null : LiNavLink({\n+\n+              isGroupGuestOrBuiltIn || !isSelfOrStaff ? null : LiNavLink({\n                   to: securityPath, className: 'e_UP_Prf_Nav_SecL' }, t.upp.Security),\n-              isGuestOrBuiltIn ? null : LiNavLink({\n+\n+              isGuestOrBuiltIn || !(isSelfOrAdmin || user.email) ? null : LiNavLink({\n                   to: emailsLoginsPath, className: 's_UP_Prf_Nav_EmLgL' }, t.upp.Account),\n+\n               !isNormalMember ? null : LiNavLink({\n                   to: uiPath, className: 'e_UP_Prf_Nav_UiL' }, t.upp.Interface))),\n          r.div({ className: 's_UP_Act_List' },\n@@ -124,11 +132,16 @@ export const AboutTab = createFactory({\n \n     let anyNotYourPrefsInfo;\n     if (me.id !== user.id && !isSystemUser) {\n-      // (This is for admins, don't translate. [5JKBWS2])\n-      const prefsAndCanBecause = \" preferences. You can do that, because you're an administrator.\";\n+      // (This is for admins, don't translate. [5JKBWS2]  0I18N)\n+      const prefs = \" preferences.\";\n+      const YouCanBecause = me.isAdmin\n+              ? \" You can do that, because you're an administrator.\"\n+              : '';  // mod or core member, but which\n+      const youAreWhat = me.isAdmin ? \"You are editing \" : \"You are viewing \";\n+\n       anyNotYourPrefsInfo = user.isGroup\n-        ? r.p({}, \"You are editing a \", r.b({}, \"group's\"), prefsAndCanBecause)\n-        : r.p({}, \"You are editing \", r.b({}, \"another\"), \" user's\" + prefsAndCanBecause);\n+        ? r.p({}, youAreWhat + \"a \", r.b({}, \"group's\"), prefs + YouCanBecause)\n+        : r.p({}, youAreWhat, r.b({}, \"another\"), \" user's\" + prefs + YouCanBecause);\n     }\n \n     const preferences = isGuest(user)\n@@ -335,6 +348,8 @@ const AboutMember = createComponent({\n     const isBuiltInUser = user.id < LowestAuthenticatedUserId;\n     const isBuiltInOrGroup = isBuiltInUser || user.isGroup;\n     const isSystemUser = pat_isSys(user);\n+    const isSelf = me.id === user.id;\n+    const isSelfOrAdmin = isSelf || me.isAdmin;\n \n     // Dupl Saving... code [7UKBQT2]\n     let savingInfo = null;\n@@ -421,24 +436,27 @@ const AboutMember = createComponent({\n           r.div({ className: 'form-group' },\n             r.label({}, t.EmailAddress),\n             r.div({},\n-              r.samp({}, user.email),\n+              r.samp({ className: 'e_PrimEmAdr' }, user.email),\n               NavLink({ to: this.props.emailsLoginsPath,\n-                  className: 'btn s_UP_Prefs_ChangeEmailB' }, t.ChangeDots)),\n+                  className: 'btn s_UP_Prefs_ChangeEmailB' },\n+                isSelfOrAdmin ? t.ChangeDots : t.MoreDots)),\n             r.p({ className: 'help-block' }, t.upp.NotShown)),\n-          r.div({ className: 'form-group' },\n-            r.label({}, \"Get emails: \"),  // I18N\n-            Button({ className: 's_UP_Ab_EmPfB', onClick: (event: MouseEvent) => {\n-                // TESTS_MISSING  TyTE2E693RTMPG\n-                const atRect = cloneEventTargetRect(event);\n-                notification.openEmailNotfPrefs({ atRect,\n-                    pat: patPlusChanges,\n-                    saveFn: (emailPref: EmailNotfPrefs) => {\n-                      this.setState({ emailPref });\n-                    } });\n-              }},\n-              emailPref_title(patPlusChanges.emailNotfPrefs), ' ',\n-                    r.span({ className: 'caret' }))),\n-          ),\n+\n+          // Is absent if reqr cannot see pat's email addr.\n+          patPlusChanges.emailNotfPrefs ? null :\n+            r.div({ className: 'form-group' },\n+              r.label({}, \"Get emails: \"),  // I18N\n+              Button({ className: 's_UP_Ab_EmPfB', onClick: (event: MouseEvent) => {\n+                  // TESTS_MISSING  TyTE2E693RTMPG\n+                  const atRect = cloneEventTargetRect(event);\n+                  notification.openEmailNotfPrefs({ atRect,\n+                      pat: patPlusChanges,\n+                      saveFn: (emailPref: EmailNotfPrefs) => {\n+                        this.setState({ emailPref });\n+                      } });\n+                }},\n+                emailPref_title(patPlusChanges.emailNotfPrefs), ' ',\n+                      r.span({ className: 'caret' })))),\n \n         // [oidc_missing] SHOULD hide this, if SSO or only-custom-IDP since then\n         // there's no pwd login anyway.\n@@ -1025,6 +1043,9 @@ const AccountTab = createFactory<any, any>({\n   },\n \n   componentDidMount: function() {\n+    const me: Myself = this.props.store.me;\n+    if (!me.isAuthenticated)\n+      return;\n     const user: UserInclDetails = this.props.user;\n     this.loadEmailsLogins(user.id);\n   },\n@@ -1034,7 +1055,7 @@ const AccountTab = createFactory<any, any>({\n   },\n \n   UNSAFE_componentWillReceiveProps: function(nextProps) {\n-    // a bit dupl code [5AWS2E9]\n+    // a bit dupl code [5AWS2E9]  (UNSAFE_.. fixed in one of the other occurrences)\n     const me: Myself = this.props.store.me;\n     const user: UserInclDetails = this.props.user;\n     const nextMe: Myself = nextProps.store.me;\n@@ -1131,10 +1152,12 @@ const AccountTab = createFactory<any, any>({\n   render: function() {\n     const me: Myself = this.props.store.me;\n     const user: UserInclDetails = this.props.user;\n-    const isMe = me.id === user.id;\n+    const isSelf = me.id === user.id;\n+    const isSelfOrAdmin = isSelf || me.isAdmin;\n \n     if (!this.state.emailAddresses)\n-      return r.p({}, t.Loading);\n+      return r.p({}, me.isAuthenticated ?\n+                          t.Loading : \"Not logged in\"); // I18N [not_logged_in_err_msg]\n \n     const emailAddrs: UserAccountEmailAddr[] = this.state.emailAddresses;\n     const loginMethods: UserAccountLoginMethod[] = this.state.loginMethods;\n@@ -1157,7 +1180,9 @@ const AccountTab = createFactory<any, any>({\n           _.each(loginMethods, (method: UserAccountLoginMethod) => {\n             if (method.idpEmailAddr === addr.emailAddress) {\n               isLoginMethod = true;\n-              status += t.upp.ForLoginWithDot(method.provider);\n+              // Provider name not incl, if !isSelf or admin, e.g. if is moderator.\n+              status += method.provider ?\n+                          t.upp.ForLoginWithDot(method.provider) : `For login. `; // I18N\n             }\n           });\n \n@@ -1171,8 +1196,9 @@ const AccountTab = createFactory<any, any>({\n           return r.li({ className: 's_UP_EmLg_EmL_It',  key: addr.emailAddress },\n             r.div({ className: 's_UP_EmLg_EmL_It_Em' + testClasses }, addr.emailAddress),\n             r.div({}, status),\n-            r.div({},\n+            !isSelfOrAdmin ? null : r.div({},\n               isVerified ? null : (\n+                  // I18N, for \"verif email sent\"\n                   this.state.verifEmailsSent[addr.emailAddress] ? \"Verification email sent. \" :\n                 Button({ onClick: () => this.resendEmailAddrVerifEmail(addr.emailAddress),\n                     className: 'e_SendVerifEmB' }, t.upp.SendVerifEmail)),\n@@ -1186,7 +1212,7 @@ const AccountTab = createFactory<any, any>({\n \n     // Don't show the Add button again after one email added. Then it's harder to see\n     // the \"check your inbox\" message.\n-    const showAddEmailInputButton = this.state.doneAddingEmail ? null : (\n+    const showAddEmailInputButton = this.state.doneAddingEmail || !isSelfOrAdmin ? null : (\n         emailAddrs.length >= MaxEmailsPerUser\n           ? r.span({}, t.upp.MaxEmailsInfo(MaxEmailsPerUser))\n           : (this.state.showAddEmailInput || this.state.isAddingEmail\n@@ -1223,11 +1249,14 @@ const AccountTab = createFactory<any, any>({\n \n           return r.li({ className: 's_UP_EmLg_LgL_It',\n                       key: `${method.provider}:${method.idpUserId}` },\n+\n             r.span({ className: 's_UP_EmLg_LgL_It_How' }, method.provider),\n-            t.upp.commaAs,\n+            method.provider ? t.upp.commaAs : null,\n+\n             r.span({ className: 's_UP_EmLg_LgL_It_Un' }, method.idpUsername),\n             comma,\n             r.span({ className: 's_UP_EmLg_LgL_It_Em' }, method.idpEmailAddr),\n+\n             maybeIdpUserId,\n             maybeIdpAuthUrl)\n             // r.div({}, Button({}, \"Remove\")))  â€” fix later\n@@ -1237,10 +1266,17 @@ const AccountTab = createFactory<any, any>({\n       r.h3({}, t.upp.YourContent),\n \n       Button({ onClick: this.downloadMyContent }, t.upp.DownloadPosts),\n-      r.p({ className: 'help-block' }, t.upp.DownloadPostsHelp),\n+      r.p({ className: 'help-block' },\n+        isSelf ? t.upp.DownloadPostsHelp\n+            : `Creates a JSON file with topics and comments by ${pat_name(user)}.` // I18N\n+              // Private stuff is filtered out here: [downl_own_may_see]\n+              + (!isSelfOrAdmin ? ` Private posts are not included.` : '')\n+        ),\n \n-      Button({ onClick: this.downloadPersonalData }, t.upp.DownloadPersData),\n-      r.p({ className: 'help-block' }, t.upp.DownloadPersDataHelp));\n+      !isSelfOrAdmin ? null : rFr({},\n+          Button({ onClick: this.downloadPersonalData },\n+              t.upp.DownloadPersData),\n+          r.p({ className: 'help-block' }, t.upp.DownloadPersDataHelp)));\n \n     // Later:\n     //const deactivateButton = user.deletedAt ? null : ("
    },
    {
      "sha": "81f7b7fed72cc2c3830c407e0fbee16b66f34fc5",
      "filename": "client/app-more/users/user-tasks.more.ts",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-tasks.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fuser-tasks.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fuser-tasks.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+/// <reference path=\"user-activity.more.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.users {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+\n+\n+export const UserTasks = React.createFactory<PatPanelProps>(function(props: PatPanelProps) {\n+  // displayName: 'UsersTasks',\n+\n+  const [state, setState] = React.useState({ onlyOpen: true });\n+  const store: Store = props.store;\n+  const user: UserDetailsStatsGroups = props.user;\n+  const me: Myself = store.me;\n+\n+  const childProps: PatPostsPanelProps = {\n+    store,\n+    user,\n+    me,\n+    showWhat: 'Tasks',\n+    onlyOpen: state.onlyOpen,\n+  };\n+\n+  // REFACTOR, break out fn, dupl code. [post_list_dupl_html]\n+  return rFr({},\n+      Input({ type: 'checkbox', className: 'e_InclCloTsks',\n+        label: `Include closed tasks (e.g. because they got done)`,\n+        checked: !state.onlyOpen, onChange: (event: CheckboxEvent) => {\n+          setState({ onlyOpen: !event.target.checked });\n+        } }),\n+\n+    // Without table-layout: fixed, the table can become 5000 px wide, because otherwise the\n+    // default layout is width = as wide as the widest cell wants to be.\n+    r.div({ style: { display: 'table', width: '100%', tableLayout: 'fixed' }},\n+      r.div({ style: { display: 'table-row' }},\n+        r.div({ className: 's_UP_Act_Nav' },\n+          r.ul({ className: 'dw-sub-nav nav-stacked nav nav-pills' },\n+            // LiNavLink({ to: ... },\n+            )),\n+        r.div({ className: 's_UP_Act_List e_UP_TskL' },\n+          UsersPosts(childProps)))));\n+});\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "c14a99bcde9c40f7bdabe83057fd617a2a3003bc",
      "filename": "client/app-more/users/users-page.more.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 29,
      "changes": 83,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fusers-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fusers-page.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -22,6 +22,7 @@\n /// <reference path=\"user-drafts-etc.more.ts\" />\n /// <reference path=\"user-preferences.more.ts\" />\n /// <reference path=\"user-activity.more.ts\" />\n+/// <reference path=\"user-tasks.more.ts\" />\n /// <reference path=\"groups-page.more.ts\" />\n \n //------------------------------------------------------------------------------\n@@ -197,10 +198,12 @@ const UserPageComponent = createReactClass(<any> {\n   },\n \n   render: function() {\n-    const store: Store = this.state.store;\n+    const props = this.props;\n+    const state = this.state;\n+    const store: Store = state.store;\n     const me: Myself = store.me;\n-    const user: UserDetailsStatsGroups = this.state.user;  // ParticipantAnyDetails = better class?\n-    const usernameOrId = this.props.match.params.usernameOrId;\n+    const user: UserDetailsStatsGroups = state.user;  // ParticipantAnyDetails = better class?\n+    const usernameOrId = props.match.params.usernameOrId;\n \n     // Wait until url updated to show username, instead of id, to avoid mounting & unmounting\n     // sub comoponents, which could result in duplicated load-data requests.  (5GKWS20)\n@@ -211,7 +214,9 @@ const UserPageComponent = createReactClass(<any> {\n     const userGone = user_isGone(user);\n     const pathToUser = pathTo(user);\n \n-    const showPrivateStuff = imStaff || (!userGone && me.isAuthenticated && me.id === user.id);\n+    const showSelfAdmins = me.isAdmin || (!userGone && me.isAuthenticated && me.id === user.id);\n+    const showSelfMods = showSelfAdmins || imStaff;\n+    const showSelfTrusted = showSelfMods || user_trustLevel(me) >= TrustLevel.Trusted;\n     const linkStart = pathToUser + '/';\n \n     const membersNavItem = !user.isGroup ? null :\n@@ -220,28 +225,35 @@ const UserPageComponent = createReactClass(<any> {\n     const activityNavItem = user.isGroup ? null :\n       LiNavLink({ to: linkStart + 'activity', className: 'e_UP_ActivityB' }, t.Activity);\n \n-    const notificationsNavItem = !showPrivateStuff || user.isGroup ? null :\n+    const notificationsNavItem = !showSelfMods || user.isGroup ? null :\n       LiNavLink({ to: linkStart + 'notifications', className: 'e_UP_NotfsB' }, t.Notifications);\n \n-    const draftsEtcNavItem = !showPrivateStuff || user.isGroup ? null :\n+    const draftsEtcNavItem = !showSelfAdmins || user.isGroup ? null :\n       LiNavLink({ to: linkStart + 'drafts-etc', className: 'e_UP_DrftsB' }, t.upp.DraftsEtc);\n \n-    const preferencesNavItem = !showPrivateStuff ? null :\n+    const tasksNavItem = !showSelfTrusted || user.isGroup ? null :\n+      LiNavLink({ to: linkStart + 'tasks', className: 'e_UP_TsksB' }, \"Tasks\"); // I18N\n+\n+    // If included or not, tested here:\n+    //      - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyT0ACSPREFS01\n+    const preferencesNavItem = !showSelfMods && !user.email ? null :\n       LiNavLink({ to: linkStart + 'preferences', id: 'e2eUP_PrefsB' }, t.upp.Preferences);\n \n-    const invitesNavItem = !showPrivateStuff || !store_maySendInvites(store, user).value ? null :\n+    const invitesNavItem = !showSelfMods || !store_maySendInvites(store, user).value ? null :\n       LiNavLink({ to: linkStart + 'invites', className: 'e_InvTabB' }, t.upp.Invites);\n \n+    // Tests:\n+    //      - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyT0ACCESSPERMS04\n     const patPermsNavItem = !user.isGroup || !imStaff ? null :\n         LiNavLink({ to: linkStart + 'permissions', className: 'e_PermsTabB' },\n           \"Permissions\"); // I18N\n \n-    const childProps: PatTopPanelProps = {\n+    const childProps: PatTopPanelProps & PatStatsPanelProps = {\n       store: store,\n       me: me, // CLEAN_UP try to remove, incl already in `store`\n       user: user,\n-      groupsMaySee: this.state.groupsMaySee,\n-      stats: this.state.stats,\n+      groupsMaySee: state.groupsMaySee,\n+      stats: state.stats,\n       reloadUser: this.loadUserAnyDetails,\n     };\n \n@@ -253,25 +265,43 @@ const UserPageComponent = createReactClass(<any> {\n         const hash = this.props.location.hash;\n         return Redirect({ to: pathToUser + '/activity/posts' + hash });\n       }}),\n+\n+      !membersNavItem ? null :\n       Route({ path: u + 'members', render: (ps) => GroupMembers({ ...childProps, ...ps }) }),\n+\n+      !activityNavItem ? null :\n       Route({ path: u + 'activity', render: (ps) => UsersActivity({ ...childProps, ...ps }) }),\n+\n+      !notificationsNavItem ? null :\n       Route({ path: u + 'notifications', render: () => UserNotifications(childProps) }),\n+\n+      !draftsEtcNavItem ? null :\n       Route({ path: u + 'drafts-etc', render: () => UserDrafts(childProps) }),\n \n+      !tasksNavItem ? null :\n+      Route({ path: u + 'tasks', render: (ps) => UserTasks({ ...childProps, ...ps }) }),\n+\n+      !preferencesNavItem ? null :\n       Route({ path: u + 'preferences', render: (ps) => {\n         return UserPreferences({ ...childProps, updatePat: this.updatePat, ...ps });\n       } }),\n \n+      !invitesNavItem ? null :\n       Route({ path: u + 'invites', render: () => {\n         return UserInvites(childProps);\n       } }),\n \n+      !patPermsNavItem ? null :\n       Route({ path: u + 'permissions', render: (ps) => {\n-        // @ifdef DEBUG\n-        dieIf(!user.isGroup, `TyE052MW5: Not a group: ${JSON.stringify(user)}`)\n-        // @endif\n         return PatPerms({ user: user as GroupVb, store, updatePat: this.updatePat });\n-      } }));\n+      } }),\n+\n+      Route({ path: u + '*', render: () => {\n+        return r.p({ className: 'c_BadRoute' },\n+              `You're at: `, r.samp({}, props.location.pathname),  // I18N\n+              ` â€” nothing here to see.`);\n+      } }),\n+      );\n \n     return (\n       r.div({ className: 'container esUP' },\n@@ -281,6 +311,7 @@ const UserPageComponent = createReactClass(<any> {\n           activityNavItem,\n           notificationsNavItem,\n           draftsEtcNavItem,\n+          tasksNavItem,\n           invitesNavItem,\n           preferencesNavItem,\n           patPermsNavItem),\n@@ -290,16 +321,6 @@ const UserPageComponent = createReactClass(<any> {\n \n \n \n-interface PatTopPanelProps {\n-  me: Me;\n-  store: Store;\n-  user: UserDetailsStatsGroups;\n-  stats: UserStats | U;\n-  groupsMaySee: Group[];\n-  reloadUser: () => Vo;\n-}\n-\n-\n interface PatTopPanelState {\n   isUploadingProfilePic?: Bo;\n   uploadCancelled?: Bo;\n@@ -428,16 +449,20 @@ const PatTopPanel = createComponent({\n       isAGroup = t.upp.isGroup;\n     }\n \n-    let isWhatInfo = null;\n-    if (isGuest(user)) {\n+    let isWhatInfo: St | N = null;\n+    if (user.isAnon) {\n+      isWhatInfo = t.Anonym || \"Anonym\";\n+    }\n+    else if (isGuest(user)) {\n       isWhatInfo = t.upp.isGuest;\n     }\n-    if (user.isModerator) {\n+    else if (user.isModerator) {\n       isWhatInfo = t.upp.isMod;\n     }\n-    if (user.isAdmin) {\n+    else if (user.isAdmin) {\n       isWhatInfo = t.upp.isAdmin;\n     }\n+\n     if (isWhatInfo) {\n       isWhatInfo = r.span({ className: 'dw-is-what' }, isWhatInfo);\n     }"
    },
    {
      "sha": "ee138f183677f378937ff6b549ad36ce8636d277",
      "filename": "client/app-more/users/users-page.styl",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fusers-page.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Fusers%2Fusers-page.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Fusers%2Fusers-page.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -192,6 +192,13 @@ a.s_Dfs_Df\n     visibility: visible;\n \n \n+// Panels, common\n+// -------------------------\n+\n+.esUP .form-group\n+  margin: 19px 0 15px;\n+\n+\n // Activity, summary\n // -------------------------\n \n@@ -304,9 +311,6 @@ a.s_Dfs_Df\n     text-decoration: underline;\n     font-weight: bold;\n \n-.s_UP_Prefs .form-group\n-  margin-bottom: 19px;\n-\n .s_UP_Prefs .input-group\n   width: 100%;\n "
    },
    {
      "sha": "f89d9846a41df1bca37751078faf845f2ac80b8e",
      "filename": "client/app-more/utils/utils.more.ts",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Futils%2Futils.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-more%2Futils%2Futils.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futils%2Futils.more.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../more-prelude.more.ts\" />\n+\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.utils {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+\n+\n+export function showDefaultFrom(inheritedFrom: Ref | Cat): St | RElm {\n+  // 0I18N here; this is for staff.\n+  let fromWhere: St | RElm = '';\n+  if (_.isString(inheritedFrom)) {\n+    // Then it's a ref str, e.g. `pageid:1234`.\n+    if (inheritedFrom.startsWith('pageid:')) fromWhere = \", for this page \";\n+    if (inheritedFrom.startsWith('catid:')) fromWhere = \", inherited from a category \";\n+    if (inheritedFrom.startsWith('sstg:')) fromWhere = \", inherited from the site settings \";\n+    if (inheritedFrom.startsWith('BuiltIn')) fromWhere = ' ';\n+    fromWhere = rFr({}, fromWhere, r.small({}, `(`, inheritedFrom, `)`));\n+  }\n+  else if (inheritedFrom.defaultTopicType) {\n+    // Then `inheritedFrom` is a category.\n+    const cat: Cat = inheritedFrom;\n+    fromWhere =\n+          rFr({}, `, inherited from category `, r.i({}, cat.name), `. `);\n+  }\n+  else {\n+    // \"Cannot\" happen.\n+    fromWhere = `, from where? TyEUNKORG`;\n+  }\n+\n+  return rFr({},\n+          `The default`, fromWhere);\n+}\n+\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "10f1ab8058a5bf6866c3f673a426dbb10aa50c82",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FReactActions.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -323,7 +323,7 @@ export function unacceptAnswerClientSideOnly() {\n }\n \n \n-// RENAME to alterPage\n+// RENAME to [alterPage]\n export function editTitleAndSettings(changes: EditPageRequestData, onDone: () => void,\n       error?: () => void) {\n   Server.savePageTitleAndSettings(changes, (response: EditPageResponse) => {\n@@ -1010,6 +1010,7 @@ let origPostBeforeEdits: Post | undefined;\n let lastFlashPostNr: PostNr | undefined;\n \n \n+// SMALLER_BUNDLE: Move to the editor.editor.ts bundle? (Maybe move some other fns too?)\n export function showEditsPreviewInPage(ps: ShowEditsPreviewParams, inFrame?: DiscWin) {\n   // @ifdef DEBUG\n   dieIf(ps.replyToNr && ps.editingPostNr, 'TyE73KGTD02');\n@@ -1081,7 +1082,7 @@ export function showEditsPreviewInPage(ps: ShowEditsPreviewParams, inFrame?: Dis\n     const postType = ps.anyPostType || PostType.ChatMessage;\n     // Show an inline preview, where the reply will appear.\n     patch = store_makeNewPostPreviewPatch(\n-        store, page, ps.replyToNr, ps.safeHtml, postType);\n+        store, page, ps.replyToNr, ps.safeHtml, postType, ps.doAsAnon);\n     patch.replyingToPostNr = ps.replyToNr;\n   }\n \n@@ -1388,10 +1389,10 @@ export function composeReplyTo(parentNr: PostNr, replyPostType: PostType) {\n \n \n export function saveReply(editorsPageId: PageId, postNrs: PostNr[], text: string,\n-      anyPostType: Nr, draftToDelete: Draft | U, onOk?: () => Vo,\n+      anyPostType: Nr, draftToDelete: Draft | U, doAsAnon: WhichAnon | U, onOk?: () => Vo,\n       sendToWhichFrame?: MainWin) {\n   Server.saveReply(editorsPageId, postNrs, text, anyPostType, draftToDelete?.draftNr,\n-      (storePatch) => {\n+        doAsAnon, (storePatch) => {\n     handleReplyResult(storePatch, draftToDelete, onOk, sendToWhichFrame);\n   });\n }"
    },
    {
      "sha": "bdf1cfd04f35e5f1e340372dacf3c7242efb1ed5",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 7,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FReactStore.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -272,6 +272,11 @@ ReactDispatcher.register(function(payload) {\n       currentPage.comtOrder = newMeta.comtOrder;\n       currentPage.comtNesting = newMeta.comtNesting;\n \n+      currentPage.comtsStartHidden = newMeta.comtsStartHidden;\n+      currentPage.comtsStartAnon = newMeta.comtsStartAnon;\n+      currentPage.opStartsAnon = newMeta.opStartsAnon;\n+      currentPage.newAnonStatus = newMeta.newAnonStatus;\n+\n       // Clear any page tweaks, e.g. if pat has temporarily canged the comment sort order.\n       // Otherwise it can look as if the changes pat saved, have no effect.\n       if (store.curPageTweaks) {\n@@ -680,7 +685,7 @@ ReactStore.activateMyself = function(anyNewMe: Myself | NU, stuffForMe?: StuffFo\n   watchbar_markAsRead(store.me.watchbar, store.currentPageId);\n \n   // Show the user's own unapproved posts, or all, for admins.\n-  store_addUnapprovedPosts(store, myPageData);  // TyTE2E603SKD\n+  store_addAnonsAndUnapprovedPosts(store, myPageData);  // TyTE2E603SKD\n \n   if (_.isArray(store.topics)) {\n     const currentPage: Page = store.currentPage;\n@@ -735,14 +740,15 @@ ReactStore.activateMyself = function(anyNewMe: Myself | NU, stuffForMe?: StuffFo\n };\n \n \n-function store_addUnapprovedPosts(store: Store, myPageData: MyPageData) {\n+function store_addAnonsAndUnapprovedPosts(store: Store, myPageData: MyPageData) {\n   // Test:  modn-from-disc-page-approve-before  TyTE2E603RTJ\n   _.each(myPageData.unapprovedPosts, (post: Post) => {\n     updatePost(post, store.currentPageId);\n     // COULD_FREE_MEM if other user was logged in before?\n   });\n \n   store_patchPatsInPl(store, myPageData.unapprovedPostAuthors);\n+  store_patchPatsInPl(store, myPageData.knownAnons);\n };\n \n \n@@ -1016,8 +1022,8 @@ function updatePost(post: Post, pageId: PageId, isCollapsing?: boolean) {\n     }\n   }\n \n-  // Insert into progress reply list, if needed.\n-  if (post.postType === PostType.BottomComment) {\n+  // Insert into progress reply list, if needed.  BREAK OUT [comt_isForTimeline]  FN\n+  if (post.postType === PostType.BottomComment || post.postType === PostType.MetaMessage) {\n     const alreadyIncl = _.find(page.progressPostNrsSorted, nr => nr === post.nr);\n     if (!alreadyIncl) {\n       page.progressPostNrsSorted.push(post.nr);\n@@ -1038,10 +1044,16 @@ function updatePost(post: Post, pageId: PageId, isCollapsing?: boolean) {\n   }\n \n   rememberPostsToQuickUpdate(post.nr);\n+\n   stopGifsPlayOnClick();\n   setTimeout(() => {\n     debiki2.page.Hacks.processPosts();\n-    if (!oldVersion && post.authorId === store.me.id && !post.isPreview) {\n+    if (!oldVersion && post.authorId === store.me.id && !post.isPreview &&\n+        // Need not flash these â€” if one does sth that results in a meta comment,\n+        // then one is aware about that already (since one did it oneself).\n+        // And if sbd else did â€” then I think that's typically not that interesting,\n+        // would be distracting to scroll-and-flash-&-show?\n+        post.postType !== PostType.MetaMessage) {\n       // Scroll to and highligt this new / edited post.\n       // BUG (harmless) skip if we just loaded it because we're staff or the author,\n       // and it's deleted so only we can see it\n@@ -1818,7 +1830,7 @@ function patchTheStore(storePatch: StorePatch) {  // REFACTOR just call directly\n     return;\n   }\n \n-  // ----- Posts, edited?\n+  // ----- Posts, new or edited?\n \n   _.each(store.pagesById, patchPage);\n \n@@ -1841,6 +1853,7 @@ function patchTheStore(storePatch: StorePatch) {  // REFACTOR just call directly\n \n     const patchedPosts = storePatch.postsByPageId[page.pageId];\n     _.each(patchedPosts || [], (patchedPost: Post) => {\n+      // RENAME to  upsertPost?\n       updatePost(patchedPost, page.pageId);\n     });\n \n@@ -1971,7 +1984,7 @@ function showNewPage(ps: ShowNewPageParams) {\n   // restr things? [merge_pub_restr]\n \n   if (myData) {\n-    store_addUnapprovedPosts(store, myData);  // TyTE2E603SKD\n+    store_addAnonsAndUnapprovedPosts(store, myData);  // TyTE2E603SKD\n   }\n \n   // And more things needed for rendering things the current user can see,"
    },
    {
      "sha": "4993097fd7478169a12d922d80c1ffcb53ca1834",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 25,
      "deletions": 6,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FServer.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2FServer.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FServer.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1850,7 +1850,8 @@ export function loadVoters(postId: PostId, voteType: PostVoteType,\n \n \n export function saveEdits(editorsPageId: PageId, postNr: PostNr, text: St,\n-      deleteDraftNr: DraftNr, onOK: () => Vo, sendToWhichFrame?: MainWin) {\n+      deleteDraftNr: DraftNr, doAsAnon: WhichAnon | U, onOK: () => Vo,\n+      sendToWhichFrame?: MainWin) {\n   postJson('/-/edit', {\n     data: {\n       pageId: editorsPageId ||\n@@ -1859,6 +1860,7 @@ export function saveEdits(editorsPageId: PageId, postNr: PostNr, text: St,\n       postNr: postNr,\n       text: text,\n       deleteDraftNr,\n+      doAsAnon,\n     },\n     success: (editedPost) => {\n       // This hides the editor and places back the orig post [6027TKWAPJ5]\n@@ -1871,7 +1873,7 @@ export function saveEdits(editorsPageId: PageId, postNr: PostNr, text: St,\n }\n \n \n-// RENAME to alterPage.\n+// RENAME to [alterPage].\n // Alter = change in character or composition, typically in a small but significant way.\n // Modify = make partial or minor changes.\n // But \"change\" can mean replace. So \"alter\" is more clear.\n@@ -1927,7 +1929,7 @@ export function unpinPage(success: () => void) {\n \n \n export function saveReply(editorsPageId: PageId, postNrs: PostNr[], text: string,\n-      anyPostType: number, deleteDraftNr: DraftNr | undefined,\n+      anyPostType: number, deleteDraftNr: DraftNr | undefined, doAsAnon: WhichAnon | U,\n       success: (storePatch: StorePatch) => void) {\n   postJson('/-/reply', {\n     data: {\n@@ -1943,6 +1945,7 @@ export function saveReply(editorsPageId: PageId, postNrs: PostNr[], text: string\n       postType: anyPostType || PostType.Normal,\n       text: text,\n       deleteDraftNr,\n+      doAsAnon,\n     },\n     success\n   });\n@@ -2102,9 +2105,14 @@ export function loadPostByNr(postNr: PostNr, success: (patch: StorePatch) => voi\n \n \n // SMALLER_BUNDLE, a tiny bit smaller: Use getAndPatchStore() instead.  [.get_n_patch]\n-export function loadPostsByAuthor(authorId: UserId, onOk: (resp) => Vo) {\n-  get(`/-/list-posts?authorId=${authorId}`, function (resp) {\n-    ReactActions.patchTheStore({ tagTypes: resp.tagTypes });\n+export function loadPostsByAuthor(authorId: UserId, showWhat: 'Tasks' | U,\n+          onlyOpen: Bo, onOk: (resp) => Vo) {\n+  const showWhatParam = showWhat ? `&relType=${PatPostRelType.AssignedTo}` : '';\n+  const onlyOpenParam = onlyOpen ? '&which=678321' : '';  // for now.\n+  // RENAME 'authorId' to 'relToPatId'?\n+  const url = `/-/list-posts?authorId=${authorId}${showWhatParam}${onlyOpenParam}`\n+  get(url, function (resp: LoadPostsResponse) {\n+    ReactActions.patchTheStore({ tagTypes: resp.tagTypes, usersBrief: resp.patsBrief });\n     onOk(resp);\n   });\n }\n@@ -2119,6 +2127,17 @@ export function makeDownloadPersonalDataUrl(authorId: UserId) {\n }\n \n \n+// SMALLER_BUNDLE, a tiny bit smaller: Use postAndPatchStore() instead.  [.get_n_patch]\n+export function changeAssignees(ps: { addPatIds: PatId[], removePatIds: PatId[],\n+          postId: PostId }, onOk: () => Vo) {\n+  postJsonSuccess('/-/change-pat-node-rels', (storePatch: StorePatch) => {\n+    ReactActions.patchTheStore(storePatch);\n+    onOk();\n+  }, { ...ps, relType: PatPostRelType.AssignedTo });\n+\n+}\n+\n+\n export function flagPost(postNr: string, flagType: string, reason: string, success: () => void) {\n   postJsonSuccess('/-/flag', (storePatch: StorePatch) => {\n     ReactActions.patchTheStore(storePatch);"
    },
    {
      "sha": "e70bfa24773c0ee071b77cdebc11e0026b03a3c8",
      "filename": "client/app-slim/avatar/avatar.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Favatar%2Favatar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Favatar%2Favatar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Favatar%2Favatar.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -69,6 +69,9 @@ export const Avatar = createComponent({\n     else if (user.fullName) {\n       firstLetterInName = user.fullName[0].toUpperCase();  // [7ED8A2M]\n     }\n+    else if (user.isAnon) {\n+      firstLetterInName = '?';\n+    }\n     else {\n       debiki2.die(\"Name missing: \" + JSON.stringify(user) + \" [EdE7UMYP3]\");\n     }\n@@ -105,15 +108,18 @@ export const Avatar = createComponent({\n       isGuestClass = ' esAvtr-sys';\n     }\n     else {\n-      // Give all guest users the same boring gray color.\n+      // Give all guests and anonyms the same boring gray color.\n       isGuestClass = ' esAvtr-gst';\n     }\n \n     // Append a number to make the letters unique on this page.\n     // Possibly different numbers on different pages, for the same user.\n-    const isUnknownHiddenOrGone = user.id === UnknownUserId || hidden || user_isGone(user);\n+    const isUnknownHiddenOrGone =\n+            user.id === UnknownUserId || user.id == Pats.FutureAnonId ||\n+            hidden || user_isGone(user);\n     let number = 1;\n-    let text = isUnknownHiddenOrGone ? '?' : firstLetterInName;\n+    let text = user.id == Pats.FutureAnonId ? 'A?' : (\n+                  isUnknownHiddenOrGone ? '?' : firstLetterInName);\n     let textAndColor = text + colorIndex;\n     let alreadyInUse = !isUnknownHiddenOrGone && textAvatarsTaken[textAndColor];\n     while (alreadyInUse) {"
    },
    {
      "sha": "63404ea44449206e23d56a459ce756caeb6f244b",
      "filename": "client/app-slim/forum/forum.styl",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fforum%2Fforum.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fforum%2Fforum.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fforum%2Fforum.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -421,6 +421,14 @@ html.js:not(.dw-react-started) #dw-topic-list tbody\n   padding-left: 0 !important;\n   padding-right: 0 !important;\n \n+  .n_AvsL_AsgSep\n+    display: inline-block;\n+    vertical-align: middle;\n+    font-size: 20px;\n+    color: hsl(0 0% 72%);\n+    line-height: 0;\n+    padding: 0 0 0 2px;\n+\n th.dw-tpc-replies\n   padding-left: 0;  // is bug? Remove?\n "
    },
    {
      "sha": "6d645727428fd2f42eceb8e7b291dda5eb9212b2",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fforum%2Fforum.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1111,13 +1111,21 @@ export const TopicsList = createComponent({\n     const isLoading = !props.topics;\n     const topics: Topic[] = props.topics || [];\n     const activeCategory: Cat | U = props.activeCategory;\n+    let slashAssigned = '';\n \n     const useTable: Bo = props.useTable;\n     const orderOffset: OrderOffset = props.orderOffset;\n \n     const doItVotesPopFirst = activeCategory && activeCategory.doItVotesPopFirst;\n \n     const topicElems = topics.map((topic: Topic) => {\n+      // If this is an a bit more \"technical\" or work oriented forum, where people\n+      // get assigned to do stuff, show \"Users / Assigned\" instead of only \"Users\".\n+      // Otherwise, excl \"/ Assigned\", since maybe mildly confusing.\n+      if (topic.assigneeIds)\n+        slashAssigned = ` / Assigned`;  // I18N. What about rtl? Maybe two I18N\n+                                        // strings: \"Users\" and \"Users / Assigned\"?\n+\n       const topicRowProps: TopicRowProps = {\n           store, topic,\n           activeCatId: activeCategory?.id, orderOffset,\n@@ -1218,7 +1226,7 @@ export const TopicsList = createComponent({\n               doItVotesPopFirst ? r.th({ className: 'c_F_TsT_T_DvoTH' }, \"Votes\") : null,    // I18N\n               r.th({}, topicsHeaderText),\n               categoryHeader,\n-              r.th({ className: 's_F_Ts_T_Avs' }, t.Users),\n+              r.th({ className: 's_F_Ts_T_Avs' }, t.Users + slashAssigned),\n               r.th({ className: 'num dw-tpc-replies' }, t.Replies),\n               r.th({ className: 'num' }, activityHeaderText))),\n               // skip for now:  r.th({ className: 'num' }, \"Feelings\"))),  [8PKY25]\n@@ -1626,6 +1634,19 @@ const TopicRow = createComponent({\n             title: t.ft.mostRecentPoster }));\n     }\n \n+    // If there are many, could create & activate some CSS that moves the avatars closer,\n+    // could even slightly overlap, so won't need more than NNN pixels. [pack_avatars_closer]\n+    if (topic.assigneeIds) {\n+      // UX SHOULD change to \"assigned:\" instead of '/', on small screens, since then\n+      // there's no \"Users / Assigned\" table column.\n+      userAvatars.push(r.span({ key: '/', className: 'n_AvsL_AsgSep' }, '/'));\n+      for (let id of topic.assigneeIds)  {\n+        const assignee = store_getUserOrMissing(store, id, 'TyE0PATASG');\n+        userAvatars.push(avatar.Avatar({ key: 'a' + id, user: assignee, origins: store,\n+              title: \"assigned\" })); // t.ft.assigned  I18N\n+      }\n+    }\n+\n     // DO_AFTER 2021-12-01: CLEAN_UP: Nowadays always Link and r.div, can move into makeTitle;\n     // and contentLinkUrl no longer in use.\n     let titleLinkTag = Link;\n@@ -1944,6 +1965,7 @@ function CatLink(props: { category: Category, forumPath: string, location,\n }\n \n \n+// [same_title_everywhere]\n function makeTitle(topic: Topic, className: string, settings: SettingsVisibleClientSide,\n       me: Myself, reactTag?) {\n   let title: any = topic.title;"
    },
    {
      "sha": "4db1fcfc5f0c94e412b7f51abce935db29fab5f3",
      "filename": "client/app-slim/links.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Flinks.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Flinks.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Flinks.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -191,6 +191,9 @@ export function linkToPatsProfile(patOrStore: Me | Pat | Store): St {\n \n // --- / CLEAN_UP  --------------------------------------------\n \n+/// COULD_OPTIMIZE, SMALLER_BUNDLE: Move to more-bundle?\n+/// And many other link fns?\n+///\n export function linkToDraftSource(draft: Draft, pageId?: PageId, postNr?: PostNr): string {\n   const locator = draft.forWhat;\n "
    },
    {
      "sha": "f911e0881a17634cffdca48edab62e8fd01baf6d",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 194,
      "deletions": 20,
      "changes": 214,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -275,6 +275,7 @@ interface DraftDeletor {\n \n interface Draft {\n   byUserId: UserId;\n+  doAsAnon?: U | WhichAnon;  // not yet impl [doAsAnon_draft]\n   draftNr: DraftNr;\n   forWhat: DraftLocator;\n   createdAt: WhenMs;\n@@ -298,6 +299,7 @@ interface ShowEditsPreviewParams extends EditorIframeHeight {\n   anyPostType?: PostType;\n   replyToNr?: PostNr;\n   editingPostNr?: PostNr;\n+  doAsAnon?: WhichAnon;\n   highlightPreview?: boolean; // default: true\n }\n \n@@ -367,7 +369,17 @@ interface Post {\n   parentNr?: PostNr; // undefined, for chat messages and sometimes embedded comments [CHATPRNT]\n   multireplyPostNrs: PostNr[];\n   postType?: PostType;\n+  // Would be set to  pats_t.autohr_id_c, rather than  created_by_id_c?\n+  // Then, maybe \"just works\" for anonyms?\n+  // But the post creator or owner â€” if the requester is any of those or staff,\n+  // that field can be included too?\n   authorId: UserId;\n+  // --- Only included when loading, not saving, a post: -----\n+  ownerIds?: PatId[];\n+  authorIds?: PatId[];\n+  assigneeIds?: PatId[];\n+  // ---------------------------------------------------------\n+\n   createdAtMs: WhenMs;\n   approvedAtMs?: WhenMs;\n   lastApprovedEditAtMs?: WhenMs;\n@@ -458,6 +470,8 @@ interface MyPageData {\n   internalBacklinks?: Topic[];\n   unapprovedPosts: { [id: number]: Post };\n   unapprovedPostAuthors: Participant[];\n+  knownAnons?: KnownAnonym[];\n+  patsBehindAnons?: Pat[];\n   postNrsAutoReadLongAgo: number[];\n   postNrsAutoReadNow: number[];\n \n@@ -587,6 +601,7 @@ interface Session {\n interface GroupPerms {\n   maxUploadBytes?: Nr;\n   allowedUplExts?: St;\n+  canSeeOthersEmailAdrs?: true;\n }\n \n \n@@ -836,6 +851,8 @@ interface Topic {\n   authorId: UserId;\n   lastReplyerId?: UserId;\n   frequentPosterIds: UserId[];\n+  /// Not empty, undefined instead.\n+  assigneeIds?: PatId[];\n   pinOrder?: number;\n   pinWhere?: PinPageWhere;\n   excerpt?: string;\n@@ -958,6 +975,14 @@ interface AutoPage {\n   pagePath: {};\n }\n \n+\n+interface PageDiscPropsSource extends DiscPropsSource {\n+  pageId?: PageId;\n+  categoryId?: number;\n+  pageRole: PageRole;\n+}\n+\n+\n // A page with real user written content, e.g. a discussion, chat, info page or homepage.\n // (Should Page instead extend PageMeta? There's lots of dupl fields!\n // Or should Page have a PageMeta field (delegation)? Let's wait.)\n@@ -967,7 +992,7 @@ interface Page\n     // So we can see from where a setting comes â€” is it from some ancestor category\n     // or group? Or the whole forum? Otherwise, hard to troubleshoot unexpected\n     // effective settings.\n-    extends TopicInterfaceSettings, DiscPropsSource {\n+    extends TopicInterfaceSettings, PageDiscPropsSource {\n   dbgSrc: string;\n   pageId: PageId;\n   pageVersion: PageVersion;\n@@ -984,6 +1009,7 @@ interface Page\n                             // no, let's have Page and Cat extend DiscLayout\n                             // instead, I mean extend DiscPropsSource, â€” done, see above.\n       // Or rather, split into different objs and fields [disc_props_view_stats] [PAGETYPESETTNG]\n+      // No, instead, everything wil be in  nodes_t ?\n   forumSearchBox?: ShowSearchBox;\n   forumMainView?: Nr;\n   forumCatsTopics?: Nr;\n@@ -1263,39 +1289,62 @@ interface SettingsVisibleClientSide extends TopicInterfaceSettings, SettingsDisc\n }\n \n \n+\n // Move some things from above to DiscLayout?\n //\n // Currently configured for all categories, and(optionally) per category and page.\n // Maybe later: disc_layout_t.\n // RENAME to DiscLayoutSource?\n-interface DiscPropsSource {\n-  comtOrder?: PostSortOrder;\n-  comtNesting?: NestingDepth;\n+type DiscPropsSource = Partial<DiscPropsBase>;\n+\n+\n+// Says what thing (e.g. the current page, or the parent category) the comtOrder\n+// layout setting is from, so the edit-layout dialog can tell the admin\n+// from where the comment order is getting inherited, in case the admin would want\n+// to go there and change it.  And makes it simpler for the Ty devs to troubleshoot\n+// any inheritance bugs.\n+type DiscPropsComesFrom = PropsFromRefs<DiscPropsBase>;\n+\n+/// So we won't need to repeat all field names in DiscPropsDerived.\n+type PropsFromRefs<Type> = {\n+  [Property in keyof Type]: Ref | Cat;\n+};\n+\n+\n+// RENAME to DiscLayoutDerived?  There's an interface Layout_not_in_use too (below) merging all layouts.\n+interface DiscPropsDerived extends DiscPropsBase {\n+  from: DiscPropsComesFrom;\n+}\n+\n+\n+interface DiscPropsBase {\n+  comtOrder: PostSortOrder;\n+  comtNesting: NestingDepth;   // not yet in use [max_nesting]\n+  comtsStartHidden: NeverAlways;\n+  comtsStartAnon: NeverAlways;\n+  opStartsAnon: NeverAlways;\n+  newAnonStatus: AnonStatus;\n \n   // Later: [sum_squash_lims]\n   // summarizeLimit;\n   // squashLimit;\n   // horizontalLayout;  // move to here\n }\n \n-// RENAME to DiscLayoutDerived?  There's an interface Layout_not_in_use too (below) merging all layouts.\n-interface DiscPropsDerived {\n-  comtOrder: PostSortOrder;\n-  // Says what thing (e.g. the current page, or the parent category) the comtOrder\n-  // layout setting is from, so the edit-layout dialog can tell the admin\n-  // from where the comment order is getting inherited, in case the admin would want\n-  // to go there and change it.  And makes it simpler for the Ty devs to troubleshoot\n-  // any inheritance bugs.\n-  comtOrderFrom: Ref;\n-  comtNesting: NestingDepth;   // not yet in use [max_nesting]\n-  comtNestingFrom: Ref;        //\n+\n+interface NodePropsDerivedAndDefault {\n+  layoutSource: DiscPropsSource;\n+  parentsLayout: DiscPropsDerived;\n+  actualLayout: DiscPropsDerived; \n }\n \n+\n // And extends TopicListLayout, KnowledgeBaseLayout etc, all layouts.\n-interface Layout_not_in_use extends DiscPropsDerived {\n+interface Layout_not_in_use extends DiscPropsBase {\n }\n \n \n+\n interface SettingsDiscPropsOldNames {\n   discussionLayout?: DiscussionLayout;  // default: threaded\n   // Rename to comtNesting and comtOrder, and then use DiscPropsSource instead.\n@@ -1412,6 +1461,11 @@ interface Pat extends PatNameAvatar {   // Guest or Member, and Member = group o\n   isAdmin?: boolean;\n   isModerator?: boolean;\n \n+  isAnon?: Bo;\n+  anonForId?: PatId;\n+  anonStatus?: AnonStatus;\n+  anonOnPageId?: PageId;\n+\n   isGuest?: boolean;  // = !isAuthenticated\n   isAuthenticated?: Bo;  // = !isGuest, if is a user (but absent, if is a group)\n \n@@ -1426,16 +1480,68 @@ interface Pat extends PatNameAvatar {   // Guest or Member, and Member = group o\n type PpsById = { [ppId: number]: Participant };  // RENAME to PatsById\n \n \n-interface Guest extends Participant {\n+interface Anonym extends GuestOrAnon {\n+  isAnon: true;\n+  isGuest?: false;  // = !isAuthenticated â€” no!  BUG RISK ensure ~isGuest isn't relied on\n+                                         // anywhere, to \"know\" it's a user / group\n+}\n+\n+\n+interface KnownAnonym extends Anonym {\n+  isAnon: true;\n+  anonForId: PatId;\n+  anonStatus: AnonStatus;\n+  anonOnPageId: PageId;\n+}\n+\n+\n+// For choosing an anonym. Maybe rename to ChooseAnon? Or ChoosenAnon / SelectedAnon?\n+interface WhichAnon {\n+  sameAnonId?: PatId;  // Either this ...\n+  anonStatus?: AnonStatus; // and this,\n+  newAnonStatus?: AnonStatus; // ... or this.\n+}\n+\n+interface SameAnon extends WhichAnon {\n+  sameAnonId: PatId;\n+  anonStatus: AnonStatus.IsAnonOnlySelfCanDeanon | AnonStatus.IsAnonCanAutoDeanon;\n+  newAnonStatus?: U;\n+}\n+\n+interface NewAnon extends WhichAnon {\n+  sameAnonId?: U;\n+  newAnonStatus: AnonStatus.IsAnonOnlySelfCanDeanon | AnonStatus.IsAnonCanAutoDeanon;\n+}\n+interface NotAnon extends WhichAnon {\n+  sameAnonId?: U;\n+  newAnonStatus?: U;\n+  anonStatus: AnonStatus.NotAnon;\n+}\n+\n+interface MyPatsOnPage {\n+  // Each item can be an anonym or pseudonym of pat, or pat henself. No duplicates.\n+  byThreadLatest: Pat[];\n+  byId: { [patId: number] : Pat }\n+}\n+\n+\n+interface Guest extends GuestOrAnon {\n   fullName: string;\n   username?: undefined;\n   email: string;\n   isEmailUnknown?: boolean;\n   isGuest: true;\n+  isAnon?: false;\n+}\n+\n+\n+interface GuestOrAnon extends Pat {\n   isAdmin?: false;\n   isModerator?: false;\n+  isAuthenticated?: false;\n   avatarTinyHashPath?: undefined;\n   avatarSmallHashPath?: undefined;\n+  pubTags?: [];\n }\n \n \n@@ -1479,6 +1585,7 @@ interface GroupStats {\n type ParticipantAnyDetails = MemberInclDetails | GuestDetailed;\n \n \n+/// RENAME to MembVb?\n interface MemberInclDetails extends Member {\n   avatarMediumHashPath?: string;\n   // Only if requester is staff:\n@@ -1490,21 +1597,23 @@ interface MemberInclDetails extends Member {\n \n \n type GroupInclDetails = GroupVb;\n-interface GroupVb extends MemberInclDetails, Group, GroupPerms {\n+interface GroupVb extends MemberInclDetails, Group {\n   isGroup: true;\n   //\"createdAtEpoch\" -> JsWhen(group.createdAt),\n+  perms: GroupPerms;\n }\n \n type UserInclDetails = PatVb; // old name, remove\n // Split into PatVb, PatVbStaff, PaVbAdmin â€” with fields only staff/admins may see?\n // (\"Thin\" and \"Fat\"? Maybe \"PatFatStaff\" isn't the best interface name\n // \"PatVbStaff\" better?)\n /// A Participant including verbose details, for the pat profile pages.\n+// RENAME to UserVb? Isn't this alaways a user â€” not a group or guest.\n interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n   externalId?: string;\n   createdAtEpoch: number;  // change to millis\n   fullName?: string;\n-  email: string;\n+  email: string; // RENAME to emailAdr  [email_2_emailAdr]\n   emailVerifiedAtMs?: WhenMs;\n   emailNotfPrefs: EmailNotfPrefs,\n   // mailingListMode: undefined | true;  // default false  â€” later\n@@ -1538,13 +1647,14 @@ interface PatVb extends MemberInclDetails, BioWebsiteLocation {\n   deletedAt?: number;\n }\n \n-interface UserInclDetailsWithStats extends PatVb {   // REMOVE, instead, use PatVvb?\n+interface UserInclDetailsWithStats extends PatVb {   // REMOVE, instead, use PatVvb? no UserVvb?\n   // Mabye some old accounts lack stats?\n   anyUserStats?: UserStats;\n }\n \n // A participant, Very VerBose: all fields, badges, stats and groups.\n interface PatVvb extends UserInclDetailsWithStats {\n+  perms: GroupPerms;\n   groupIdsMaySee: UserId[];\n }\n type UserDetailsStatsGroups = PatVvb; // old name\n@@ -2137,6 +2247,31 @@ interface ShowNewPageParams {\n }\n \n \n+interface PatPanelProps {\n+  me: Me;\n+  store: Store;\n+  user: UserDetailsStatsGroups;\n+}\n+\n+\n+interface PatStatsPanelProps extends PatPanelProps {\n+  stats?: UserStats; // for the Summary page\n+}\n+\n+\n+interface PatPostsPanelProps extends PatPanelProps {\n+  showWhat?: 'Posts' | 'Tasks';  // Posts is the default\n+  /// If true, tasks that's been done or closed, are excluded.\n+  onlyOpen?: Bo;\n+}\n+\n+\n+interface PatTopPanelProps extends PatStatsPanelProps {\n+  groupsMaySee: Group[];\n+  reloadUser: () => Vo;\n+}\n+\n+\n /// Authentication dialog\n interface AuthnDlgIf {\n   openToLogIn: (loginReason: LoginReason,\n@@ -2148,6 +2283,20 @@ interface AuthnDlgIf {\n }\n \n \n+/// A dropdown for choosing which anonym to use (e.g. if posting anonymous comments).\n+/// DlgPs = dialog parameters, hmm.\n+///\n+interface ChooseAnonDlgPs {\n+  atRect: Rect;\n+  open?: Bo;\n+  pat?: Pat;\n+  me: Me,\n+  curAnon?: WhichAnon;\n+  discProps: DiscPropsDerived;\n+  saveFn: (_: WhichAnon) => Vo ;\n+}\n+\n+\n /// For rendering category trees.\n interface CatsTree {\n   rootCats: CatsTreeCat[];\n@@ -2252,6 +2401,22 @@ interface DiscLayoutDiagState {\n }\n \n \n+interface AnonsAllowedDropdownBtnProps {\n+  page?: Page;  // either...\n+  cat?: Cat;    // ...or.\n+  store: Store;\n+  allowed: NeverAlways;\n+  onSelect: (newLayout: DiscPropsSource) => Vo;\n+}\n+\n+\n+/// For showing a list of people, and adding and removing.\n+interface PatsToAddRemove {\n+  addPatIds?: PatId[];\n+  removePatIds?: PatId[];\n+}\n+\n+\n interface ExplainingTitleText {\n   iconUrl?: St;\n   title: St;\n@@ -2573,6 +2738,14 @@ type LoadPageIdsUrlsResponse = PageIdsUrls[];\n \n type TagTypesById = { [tagTypeId: number]: TagType };\n \n+\n+interface LoadPostsResponse {\n+  posts: Post[];\n+  patsBrief: Pat[];\n+  tagTypes: TagType[];\n+}\n+\n+\n interface LoadTopicsResponse {\n   topics: Topic[];\n   storePatch: TagTypesStorePatch & PatsStorePatch;\n@@ -2660,6 +2833,7 @@ interface LoadDraftAndTextResponse {\n   draft?: Draft;\n }\n \n+\n interface ListDraftsResponse {\n   drafts: Draft[];\n   pagePostNrsByPostId: { [postId: string]: [PageId, PostNr] };"
    },
    {
      "sha": "13898ed54a370c54a03f07a25562bc96cbee29e2",
      "filename": "client/app-slim/more-bundle-not-yet-loaded.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fmore-bundle-not-yet-loaded.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fmore-bundle-not-yet-loaded.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmore-bundle-not-yet-loaded.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -62,9 +62,10 @@ export function openAboutUserDialogForAuthor(post: Post, at) {\n }\n \n \n-export function openAddPeopleDialog(alreadyAddedIds: UserId[], onDone: (newIds: UserId[]) => void) {\n+export function openAddPeopleDialog(ps: { curPatIds?: PatId[], curPats?: Pat[],\n+          onChanges: (res: PatsToAddRemove) => Vo }) {\n   Server.loadMoreScriptsBundle(() => {\n-    debiki2.pagedialogs.openAddPeopleDialog(alreadyAddedIds, onDone);\n+    debiki2.pagedialogs.openAddPeopleDialog(ps);\n   });\n }\n "
    },
    {
      "sha": "888181f53b3fd6515633afd6a69cd01c515c89f7",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 133,
      "deletions": 51,
      "changes": 184,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Foop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Foop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Foop-methods.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -680,6 +680,8 @@ export function member_isBuiltIn(member: Member): Bo {\n \n // Dupl code [disp_name]\n export function pat_name(pat: Me | Pat): St {\n+  // Or prioritize username? Did, in the annon posts branch:\n+  // if (pat.username) return '@' + pat.username;\n   return pat.fullName || (pat.username ? '@' + pat.username : \"_no_name_\");\n }\n \n@@ -759,6 +761,7 @@ export function pat_mayEditTags(me: Me, ps: { forPost?: Post, forPat?: Pat,\n //----------------------------------\n \n \n+/// CLEAN_UP, try to remove.\n /// Needed (only?) because SettingsVisibleClientSide uses old legacy\n /// field names: `discPostSortOrder` and `discPostNesting`, will rename.\n /// And uses different field names for embedded comments pages,\n@@ -771,8 +774,9 @@ export function discProps_pluckFrom(source: DiscPropsSource): DiscPropsSource {\n   // @endif\n   // Don't set any field to undefined. [unintened_undefined_bug]\n   const result: DiscPropsSource = {};\n-  if (source.comtOrder) result.comtOrder = source.comtOrder;\n-  if (source.comtNesting) result.comtNesting = source.comtNesting;\n+  for (const prop of DiscPropNames) {\n+    if (source[prop]) result[prop] = source[prop];\n+  }\n   return result;\n }\n \n@@ -788,6 +792,17 @@ export function discProps_pluckFromSettings(settings: SettingsVisibleClientSide,\n   // Don't set any field to undefined. [unintened_undefined_bug]\n   const result: DiscPropsSource = {};\n \n+  // Some settings have the same names as the cat props. They will get moved\n+  // to the root category instead? Or to  pat_node_multi_rels_t?  [add_nodes_t].\n+  // But for now: (those with different names, won't be found in this loop â€”\n+  // they're handled below instead)\n+  for (const prop of DiscPropNames) {\n+    if (settings[prop]) result[prop] = settings[prop];\n+  }\n+\n+  // Other setings have different names than the corresponding cat props.\n+  // They should get renamed (to the same names) and moved to the root cat\n+  // or to  pat_node_multi_rels_t.  But for now, we have to:  [per_page_type_props]\n   const comtOrder = pageType === PageRole.EmbeddedComments ?\n           settings.embComSortOrder : settings.discPostSortOrder;\n \n@@ -801,19 +816,6 @@ export function discProps_pluckFromSettings(settings: SettingsVisibleClientSide,\n }\n \n \n-/// Merges other into self; mutates self (_inPl = in-place).\n-///\n-export function discProps_addMissing_inPl(self: DiscPropsSource, other: DiscPropsSource) {\n-  // Same as: DiscPropsMerged.addMissing() in Scala.  [disc_props_js_scala]\n-  // Don't set any field to undefined. [unintened_undefined_bug]\n-  if (!self.comtOrder && other.comtOrder) {\n-    self.comtOrder = other.comtOrder;\n-  }\n-  if (!self.comtNesting && other.comtNesting) {\n-    self.comtNesting = other.comtNesting;\n-  }\n-}\n-\n export function settings_showCategories(settings: SettingsVisibleClientSide, me: Myself) {\n   // Later: by default, do as 'settings' say, but let user preferences override. [8WK4SD7]\n   return settings.showCategories !== false;\n@@ -1047,7 +1049,7 @@ function store_mayIEditImpl(store: Store, post: Post, isEditPage: boolean): bool\n   const isMindMap = page.pageRole === PageRole.MindMap;\n   const isWiki = post_isWiki(post);\n   const isOwnPage = store_thisIsMyPage(store);\n-  const isOwnPost = post.authorId === me.id;\n+  const isOwnPost = pat_isAuthorOf(me, post, store.usersByIdBrief);\n   let isOwn = isEditPage ? isOwnPage :\n       isOwnPost ||\n         // In one's own mind map, one may edit all nodes, even if posted by others. [0JUK2WA5]\n@@ -1201,7 +1203,7 @@ export function store_ancestorCatsCurLast(store: Store, catId: CatId): Cat[] {\n /// things: the parent cat, grandparent, root cat, and, lastly,\n /// whole site settings.\n ///\n-export function store_ancestorCatsCurFirst(store: Store, catId: CatId): Cat[] {\n+export function store_ancestorCatsCurFirst(store: DiscStore, catId: CatId): Cat[] {\n   const ancestors = [];\n   const cats: Cat[] = store.currentCategories;\n   let nextCatId = catId;\n@@ -1280,9 +1282,14 @@ export function store_makeDraftPostPatch(store: Store, page: Page, draft: Draft)\n \n export function store_makeNewPostPreviewPatch(store: Store, page: Page,\n       parentPostNr: PostNr | undefined, safePreviewHtml: string,\n-      newPostType?: PostType): StorePatch {\n+      newPostType?: PostType, doAsAnon?: WhichAnon): StorePatch {\n+  // If this is an anon post, and one's first on this page, then, the anonym\n+  // who will be used in place of oneself, hasn't yet been created.\n+  // Then use the magic built-in id Pats.FutureAnonId which will\n+  // make an anonym with '?' as sequence number appear.\n+  const authorId = doAsAnon ? doAsAnon.sameAnonId || Pats.FutureAnonId : store.me.id;\n   const previewPost = store_makePreviewPost({\n-      authorId: store.me.id, parentPostNr, safePreviewHtml, newPostType, isEditing: true });\n+      authorId, parentPostNr, safePreviewHtml, newPostType, isEditing: true });\n   return page_makePostPatch(page, previewPost);\n }\n \n@@ -1678,18 +1685,77 @@ export function layout_sortOrderForChildsOf(layout: DiscPropsDerived, post: { nr\n //----------------------------------\n \n \n+// Sync w interface DiscPropsSource and ...?  in Scala.\n+// Also: [derive_node_props_on_server], later.\n+const DiscPropDefaults: DiscPropsBase = {\n+  comtOrder: PostSortOrder.OldestFirst,\n+  comtNesting: -1,\n+  comtsStartHidden: NeverAlways.NeverButCanContinue,\n+  comtsStartAnon: NeverAlways.NeverButCanContinue,\n+  opStartsAnon: NeverAlways.NeverButCanContinue,\n+  // For now. Later: OnlySelfCanDeanon.\n+  newAnonStatus: AnonStatus.IsAnonCanAutoDeanon,\n+};\n+\n+const DiscPropNames = Object.keys(DiscPropDefaults);\n+\n+\n+export function node_deriveLayout(props: DiscLayoutDropdownBtnProps)\n+        : NodePropsDerivedAndDefault {\n+\n+  // This is either for a specific page, or a category (and all pages therein).\n+  dieIf(!!props.cat == !!props.page, 'TyE604MWJJ34');\n+\n+  let layoutSource: DiscPropsSource;\n+  if (props.cat) {\n+    layoutSource = discProps_pluckFrom(props.cat);\n+  }\n+  else {\n+    layoutSource = discProps_pluckFrom(props.page);\n+    // Apply any current page temp layout tweaks (disappear on page reload).\n+    if (props.layoutFor === LayoutFor.PageWithTweaks && props.store.curPageTweaks) {\n+      const tempLayoutTweaks = discProps_pluckFrom(props.store.curPageTweaks);\n+      layoutSource = { ...layoutSource, ...tempLayoutTweaks };\n+    }\n+  }\n+\n+  // If we're A) altering the page layout, e.g. the comments sort order,\n+  // but not saving server side, then:  layoutFor === PageWithTweaks,\n+  // and the default layout is the page *without* tweaks,\n+  // that is:  PageNoTweaks = PageWithTweaks + 1.\n+  //\n+  // And if we're B) saving server side, then:  layoutFor === PageNoTweaks,\n+  // and the defaults would be the parent category's layout props\n+  // that is,  LayoutFor.Ancestors = PageNoTweaks + 1.\n+  //\n+  // So, the \"parent\" layout is +1:\n+  //\n+  const layoutForParent = props.layoutFor + 1;\n+\n+  const actualLayout: DiscPropsDerived = props.page\n+          ? page_deriveLayout(props.page, props.store, props.layoutFor)\n+          : cat_deriveLayout(props.cat, props.store, props.layoutFor);\n+  const parentsLayout: DiscPropsDerived = props.page\n+          ? page_deriveLayout(props.page, props.store, layoutForParent)\n+          : cat_deriveLayout(props.cat, props.store, layoutForParent);\n+\n+  return { layoutSource, parentsLayout, actualLayout };\n+}\n+\n+\n /// Discussion properties. For each unspecified page property, e.g. sort order,\n /// looks at the ancestor categories, to find out what value to use.\n /// And if unspecified everywhere, uses the global site settings.\n ///\n-/// RENAME to page_deriveLayout ?\n-export function page_deriveLayout(page: Page, store: Store, layoutFor: LayoutFor)\n+/// RENAME to page_deriveLayout ?  no to page_deriveDiscProps?\n+export function page_deriveLayout(page: Page, store: DiscStore, layoutFor: LayoutFor)\n       : DiscPropsDerived {   // RENAME to DiscLayoutDerived?\n   return deriveLayoutImpl(page, null, store, layoutFor);\n }\n \n \n-export function cat_deriveLayout(cat: Cat, store: Store, layoutFor: LayoutFor)\n+/// RENAME to  cat_deriveDiscProps?\n+export function cat_deriveLayout(cat: Cat, store: DiscStore, layoutFor: LayoutFor)\n       : DiscPropsDerived {\n   return deriveLayoutImpl(null, cat, store, layoutFor);\n }\n@@ -1703,8 +1769,8 @@ export function cat_deriveLayout(cat: Cat, store: Store, layoutFor: LayoutFor)\n /// page or cat itself, override parent cat props and site settings.\n /// If unspecified everywhere, Ty's built-in defaults gets used.\n ///\n-function deriveLayoutImpl(page: Page, cat: Cat, store: Store, layoutFor: LayoutFor)\n-      : DiscPropsDerived {\n+function deriveLayoutImpl(page: PageDiscPropsSource, cat: Cat, store: DiscStore,\n+      layoutFor: LayoutFor): DiscPropsDerived {\n \n   // ----- The page/cat itself\n \n@@ -1713,11 +1779,18 @@ function deriveLayoutImpl(page: Page, cat: Cat, store: Store, layoutFor: LayoutF\n \n   const selfRef = () => page ? `pageid:${page.pageId}` : `catid:${cat.id}`;\n \n+  // Some time later, can use  ts-transformer-keys\n+  // instead of the repetitive code below?\n+\n   // These says from where each effective setting is.  For example, if comtOrder\n   // is set directly on a page, then, the comment order is from the page,\n   // and comtOrderFrom becomes 'pageid:that-page's-id`.\n-  let comtOrderFrom   = discProps.comtOrder && selfRef();\n-  let comtNestingFrom = discProps.comtNesting && selfRef();\n+  let propsFrom: Partial<DiscPropsComesFrom> = {};\n+\n+  for (const prop of DiscPropNames) {\n+    if (discProps[prop]) propsFrom[prop] = selfRef();\n+  }\n+\n \n   // ----- Ancestor cats\n \n@@ -1730,59 +1803,68 @@ function deriveLayoutImpl(page: Page, cat: Cat, store: Store, layoutFor: LayoutF\n   const ancCats: Cat[] = store_ancestorCatsCurFirst(store, ancCatId);\n \n   for (const cat of ancCats) {\n-    discProps_addMissing_inPl(discProps, cat);\n-    const catRef = () => `catid:${cat.id}`;\n-    if (!comtOrderFrom && discProps.comtOrder) comtOrderFrom = catRef();\n-    if (!comtNestingFrom && discProps.comtNesting) comtNestingFrom = catRef();\n+    // Same as: DiscPropsMerged.addMissing() in Scala.  [disc_props_js_scala]\n+    // Don't set any field to undefined. [unintened_undefined_bug]\n+    for (const prop of DiscPropNames) {\n+      if (!discProps[prop] && cat[prop]) {\n+        discProps[prop] = cat[prop];\n+        propsFrom[prop] = cat;\n+      }\n+    }\n   }\n \n   // ----- Site settings\n \n   const anyPageType: PageType | U = page?.pageRole;\n   const isEmbedded = anyPageType === PageRole.EmbeddedComments;\n-  const embSuffix = isEmbedded ? 'Emb' : '';\n \n   // BUG, harmless: This'll be wrong, if configuring sort order for embedded comments\n-  // in a category â€” because then we don't have anyPageType, and the sort order for\n-  // non-embedded discussions will be shown.  Harmless corner case. [per_page_type_props]\n-  const settingsDiscProps: DiscPropsSource =\n-          discProps_pluckFromSettings(store.settings, anyPageType);\n+  // in a category â€” because then we don't have `anyPageType` (edit: what?), and\n+  // the sort order for non-embedded discussions will be shown. Harmless corner\n+  // case.  See: [per_page_type_props]  (incl just below).\n+  const settings: SettingsVisibleClientSide | U = (store as Store).settings || undefined;\n+  const settingsDiscProps: DiscPropsSource = !settings ? {} :\n+          discProps_pluckFromSettings(settings, anyPageType);\n   discProps = { ...settingsDiscProps, ...discProps };\n \n-  // sstg = setting, see docs/abbreviations.txt.\n-  if (!comtOrderFrom && discProps.comtOrder) comtOrderFrom = 'sstg:comtOrder' + embSuffix;\n-  if (!comtNestingFrom && discProps.comtNesting) comtNestingFrom = 'sstg:comtNesting';\n+  // (sstg = setting, see docs/abbreviations.txt.)\n+  for (const prop of DiscPropNames) {\n+    if (!propsFrom[prop] && discProps[prop]) propsFrom[prop] = `sstg:${prop}`;\n+  }\n \n   // ----- Hardcoded defaults\n \n-  // For blog comments, the default is best first, otherwise, oldest first.\n-\n-  if (!discProps.comtOrder) {\n-    discProps.comtOrder = isEmbedded ? PostSortOrder.BestFirst : PostSortOrder.OldestFirst;\n-    comtOrderFrom = `BuiltIn` + embSuffix;\n+  // Backw comp hack, until [per_page_type_props]:  For blog comments, the default\n+  // is BestFirst, otherwise (see DiscPropDefaults) OldestFirst.\n+  const BuiltIn = `BuiltIn`;\n+  if (!discProps.comtOrder && isEmbedded) {\n+    discProps.comtOrder = PostSortOrder.BestFirst;\n+    propsFrom.comtOrder = BuiltIn + `Emb`;\n   }\n \n-  if (!discProps.comtNesting) {\n-    discProps.comtNesting = -1;\n-    comtNestingFrom = `BuiltIn`;\n+  // Apply defaults.\n+  discProps = { ...DiscPropDefaults, ...discProps };\n+\n+  for (const prop of DiscPropNames) {\n+    if (!propsFrom[prop] && discProps[prop]) propsFrom[prop] = BuiltIn;\n   }\n \n   // ----- Temp tweaks\n \n   const anyTweaks = layoutFor === LayoutFor.PageWithTweaks\n                     && page && page.pageId === store.currentPageId ?\n-          store.curPageTweaks : undefined;\n+          (store as Store).curPageTweaks : undefined;\n \n   if (anyTweaks) {\n     discProps = { ...discProps, ...anyTweaks };\n-    if (anyTweaks.comtOrder) comtOrderFrom = `CurPageTweaks`;\n-    if (anyTweaks.comtNesting) comtNestingFrom = `CurPageTweaks`;\n+    for (const prop of DiscPropNames) {\n+      if (anyTweaks[prop]) propsFrom[prop] = `CurPageTweaks`;\n+    }\n   }\n \n   const result = {\n     ...discProps,\n-    comtOrderFrom,\n-    comtNestingFrom,\n+    from: propsFrom,\n   };\n \n   return result as DiscPropsDerived;"
    },
    {
      "sha": "9206670967b2c3bdd4ef15940938b49aa8e58ffb",
      "filename": "client/app-slim/page-methods.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage-methods.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -80,6 +80,7 @@ export function page_canToggleClosed(page: Page): boolean {\n }\n \n \n+// REMOVE, use  makeTitle() from forum.ts  instead. [same_title_everywhere]\n export function pageRole_iconClass(pageRole: PageRole): string {\n   switch (pageRole) {\n     case PageRole.CustomHtmlPage: return '';"
    },
    {
      "sha": "b8526759f51c2ad9cb7ce60e7485a508c6cf4526",
      "filename": "client/app-slim/page/discussion.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 5,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fdiscussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fdiscussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fdiscussion.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -757,7 +757,7 @@ const RootPostAndComments = createComponent({\n       const child: Post = postsByNr[childNr];\n       if (!child)\n         return; // deleted\n-      const isProgrPost =\n+      const isProgrPost =  // break out:  [comt_isForTimeline]  ?\n           child.postType === PostType.BottomComment || child.postType === PostType.MetaMessage;\n       if (isProgrPost !== inProgrSect) {\n         return;\n@@ -1532,7 +1532,7 @@ export const Post = createComponent({\n     let replyReceivers;\n     if (!this.props.abbreviate && !isFlat && (\n           this.props.index > 0 || post.multireplyPostNrs.length)) {\n-      replyReceivers = ReplyReceivers({ store: store, post: post });\n+      replyReceivers = ReplyReceivers({ store, post });\n     }\n \n     const mark = me.marksByPostId[post.nr];\n@@ -1623,6 +1623,7 @@ const ReplyReceivers = createComponent({\n     const elem = this.props.comma ? 'span' : 'div';\n     return (\n       r[elem]({ className: 'dw-rrs' + multireplyClass }, // rrs = reply receivers\n+        // This'll look like:  \"In reply to @memah:\"  followed by the reply, below.\n         this.props.comma ? t.d.repliesTo : t.d.InReplyTo, receivers, ':'));\n   }\n });\n@@ -1668,19 +1669,34 @@ export const PostHeader = createComponent({\n     const me: Myself = store.me;\n     const post: Post = this.props.post;\n     const abbreviate = this.props.abbreviate;\n+\n     if (!post)\n       return r.p({}, '(Post missing [DwE7IKW2])');\n \n+    const assignees = (capitalizeClass: St = '') => !post.assigneeIds ? null :\n+        r.span({ className: 'n_Asgd2' },\n+          r.span({ className: 'n_Asgd2_Ttl' + capitalizeClass }, \"assigned to \"),  // I18N\n+          r.ul({ className: 'c_AsgsL' },\n+            post.assigneeIds.map(patId =>\n+              r.li({ key: patId },\n+                UserName({ patId, store, avoidFullName: true })))));\n+\n     if (isWikiPost(post)) {\n+      const anyAssigneesCaps = assignees(' n_1stCap');\n       if (abbreviate) {\n-        return r.div({ className: 'dw-p-hd' }, t.Wiki);\n+        return r.div({ className: 'dw-p-hd' }, t.Wiki,\n+              // How does this look? Currently always null â€” cannot yet [assign_comments].\n+              anyAssigneesCaps);\n       }\n       if (this.props.is2dTreeColumn || post.isTreeCollapsed || post.nr === BodyNr) {\n-        return null;\n+        return anyAssigneesCaps;\n       }\n       // Show a collapse button for this wiki post, but no author name because this is\n       // a wiki post contributed to by everyone.\n-      return r.span({ className: 'dw-a-clps icon-up-open', onClick: this.onCollapseClick });\n+      return rFr({},\n+            r.span({ className: 'dw-a-clps icon-up-open', onClick: this.onCollapseClick }),\n+              // How does this look? Currently null â€” cannot [assign_comments].\n+            anyAssigneesCaps);\n     }\n \n     const linkFn = abbreviate ? 'span' : 'a';\n@@ -1788,6 +1804,7 @@ export const PostHeader = createComponent({\n                 timeExact(post.createdAtMs, timeClass) : timeAgo(post.createdAtMs, timeClass)),\n             editInfo),\n           inReplyTo,\n+          assignees(),\n           toggleCollapsedButton,\n           bookmark,\n           unreadMark,"
    },
    {
      "sha": "c283d99134de94b1a1e7dc1ba3f691b379c5c0e2",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fpost-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fpost-actions.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -230,16 +230,16 @@ export const PostActions = createComponent({\n   },\n \n   render: function() {\n-    const post: Post = this.props.post;\n     const store: Store = this.props.store;\n+    const post: Post = this.props.post;\n     const page: Page = store.currentPage;\n     const isThisPageDeleted = !!page.pageDeletedAtMs;  // ignore deleted categories\n     const canBeSolved = page_canBeSolved(page);\n     const isEmbeddedComments = page.pageRole === PageRole.EmbeddedComments;\n \n     const me: Myself = store.me;\n     const myPageData: MyPageData = me.myCurrentPageData;\n-    const isOwnPost = me.id === post.authorId;\n+    const isOwnPost = pat_isAuthorOf(me, post, store.usersByIdBrief);\n     const isOwnPage = store_thisIsMyPage(store);\n     const isPageBody = post.nr === BodyNr;\n     const votes = myPageData.votes[post.nr] || [];\n@@ -798,7 +798,7 @@ const MoreDropdownModal = createComponent({\n     const isPageDeleted = page.pageDeletedAtMs;\n \n     const moreLinks = [];\n-    const isOwnPost = post.authorId === me.id;\n+    const isOwnPost = pat_isAuthorOf(me, post, store.usersByIdBrief);\n     const isMindMap = page.pageRole === PageRole.MindMap;\n \n     // ----- Report"
    },
    {
      "sha": "dc579929e5f9794628ed7acdce9f0b3056b24e6f",
      "filename": "client/app-slim/page/posts.styl",
      "status": "modified",
      "additions": 39,
      "deletions": 2,
      "changes": 41,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fposts.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fpage%2Fposts.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fposts.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -566,6 +566,8 @@ html:not(.mouse) .dw-rr\n   margin-right: 12px;\n .dw-p-hd .dw-ago\n   margin-right: 7px;\n+.dw-p-hd:has(.icon-edit) .dw-ago  // ... but if there's an edit pencil icon just after,\n+  margin-right: 3px; // ... then, less magin (so the icon won't be far away)\n .dw-p-hd .n_EdAt\n   white-space: nowrap;\n .esP_viewHist\n@@ -579,21 +581,39 @@ html:not(.mouse) .dw-rr\n   font-weight: bold;\n   color: hsl(0, 0%, 15%);\n \n+\n+.c_P_By_AnonYou\n+  color: #333;\n+  font-weight: bold;\n+\n+.c_P_By_AnonYou::before\n+  content: ' (';\n+  margin: 0 2px 0 1px;\n+\n+.c_P_By_AnonYou::after\n+  content: ')';\n+  margin-left: 1px;\n+\n+\n .esP_By_F-G\n   font-weight: normal;\n   color: hsl(0, 0%, 11%);\n   // Append a \"?\" to show that the user might be anyone, e.g. email not verified.\n   // But ... (435465490)\n+  /*\n   &::after\n     content: ' ?';\n+    */\n \n // ... (435465490) But not for the Unknown user â€” currently, that'd be oneself,\n // when composing a new post without having logged in [305KGWGH2].\n .s_P_By-Unk .esP_By_F-G\n   font-weight: bold;\n   color: hsl(0, 0%, 8%);\n+  /*\n   &::after\n     content: none;\n+    */\n \n .esP_By_U\n   font-weight: normal;\n@@ -710,15 +730,32 @@ html:not(.mouse) .dw-rr\n .DW .dw-ar-p-hd\n   border: none\n   background-color: transparent\n-  // Dim username and date (but not the post tags â€” the text therein is already gray).\n+  // Dim username, date and assignees.\n+  // (But not the post tags â€” the text therein is already gray.)\n   .n_ByAt\n     opacity: 0.8;\n   // \"By\" is an uninteresting word.\n-  .n_By\n+  .n_By,\n+  .n_Asgd2_Ttl\n     color: hsl(0 0% 31%);\n   font-size: $postFontSize;\n   margin: 6px 0 0;\n \n+// Add ',' before \"Assigned to ...\".\n+.dw-p-hd:has(.n_Asgd2):not(:has(.esP_viewHist)) .esP_H_At.dw-ago,\n+.dw-p-hd:has(.n_Asgd2)                    .esP_viewHist  .dw-ago-ltr\n+  &::after\n+    content: ', ';\n+\n+.dw-p-hd:has(.n_Asgd2) .esP_viewHist\n+  margin-right: 0.8ex;  // don't push \"assigned to ...\" too far away\n+\n+.n_Asgd2_Ttl\n+  // Some space between \"Assigned to\" and the username.\n+  margin-right: 1.1ex;\n+  // n_1stCap (text-transform uppercase) needs a block or inline-block elem.\n+  display: inline-block;\n+\n .dw-ar-p-hd:hover\n   opacity: 1\n "
    },
    {
      "sha": "92c70f67b591d99bda7781c87eead487f18ad577",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fprelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fprelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fprelude.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -525,6 +525,49 @@ export function firstValOf(x, y, z?) {\n }\n \n \n+/** Says if `a` and `b` are the same, ignoring keys with `undefined` values,\n+  * and ignoring key order. Uses _.isEqual() under the hood.\n+  * Avoids the: [unintened_undefined_bug].\n+  */\n+export function obj_isDeepEqIgnUndef(a: Object, b: Object): Bo {\n+  // @ifdef DEBUG\n+  dieIf(isVal(a) && !_.isObject(a), \"a is not an object [TyE502RMH6A]\");\n+  dieIf(isVal(b) && !_.isObject(b), \"b is not an object [TyE502RMH6B]\");\n+  dieIf(!a && !b && (a === null) != (b === null),\n+        \"One of a and b is null, the other is undefined, \" +\n+        \"this'll evaluate to not-equal â€” is that what we want?  [TyE502RMH6U]\");\n+  // @endif\n+\n+  function findUndefKeys(obj: Object) {\n+    const undefKeys = [];\n+    for (const key in obj) {\n+      const val = obj[key];\n+      if (isUndef(val)) undefKeys.push(key);\n+    }\n+    return undefKeys;\n+  }\n+\n+  const undefKeysInA = findUndefKeys(a);\n+  const undefKeysInB = findUndefKeys(b);\n+\n+  // Small optimization for the common case when there're no undef values,\n+  // to avoid { ... } spread-copying a and b (further below).\n+  if (_.isEqual(undefKeysInA, undefKeysInB))\n+    return _.isEqual(a, b);\n+\n+  const a2 = { ...a };\n+  const b2 = { ...b };\n+\n+  for (const key of undefKeysInA)\n+    delete a2[key];\n+\n+  for (const key of undefKeysInB)\n+    delete b2[key];\n+\n+  return _.isEqual(a2, b2);\n+}\n+\n+\n /** Like _.groupBy but keeps just one value per key.\n     RENAME to arr_groupByKeepOne ?\n   */"
    },
    {
      "sha": "e5de7c3f255f8ae3e000b4c5cb503c11442dd38f",
      "filename": "client/app-slim/sidebar/sidebar.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fsidebar%2Fsidebar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fsidebar%2Fsidebar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fsidebar%2Fsidebar.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -548,12 +548,13 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n \n     const addMorePeopleButton = !page_isGroupTalk(page.pageRole) || !isStaffOrMyPage ? null :\n         r.button({ className: 'btn btn-default', onClick: () => {\n-              morebundle.openAddPeopleDialog(page.pageMemberIds, (newIds: UserId[]) => {\n-                Server.addUsersToPage(newIds, () => {\n+              morebundle.openAddPeopleDialog({ curPatIds: page.pageMemberIds,\n+                      onChanges: (res: PatsToAddRemove) => {\n+                Server.addUsersToPage(res.addPatIds, () => {\n                   util.openDefaultStupidDialog({ body: \"Now I've added him/her/them. Currently you need \" +\n                     \"to reload the page (hit F5) to see them in the users list.\" }); // [5FKE0WY2] also in e2e\n                 });\n-              });\n+              }});\n             },\n             id: 'e2eCB_AddPeopleB' },\n           t.cb.AddPeople);"
    },
    {
      "sha": "28a0ac5a1459f392a75c21fab9716ea48bb63d69",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fslim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fslim-bundle.d.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -189,6 +189,7 @@ declare namespace debiki2 {\n   var createClassAndFactory: any; // don't use â€” I'm renaming to createFactory\n   function createFactory<P, S = any>(compSpec: React.ComponentSpec<P, S>): React.Factory<any>;\n \n+  // (Move to obj_* elsewhere in this file?)\n   function arr_replaceMany<Item>(arr: Item[],\n         newerItems: Item[], isSame: ArrItemIsSameFn<Item>): Item[];\n \n@@ -353,6 +354,8 @@ declare namespace debiki2 {\n   function prettyNum(num: number, digits?: Nr): number;\n   function isBlank(x: string): boolean;\n \n+  function obj_isDeepEqIgnUndef(a: Object, b: Object): Bo;\n+\n   function whenMsToIsoDate(whenMs: WhenMs): string;\n \n   function seemsSelfHosted(): boolean;\n@@ -420,6 +423,7 @@ declare namespace debiki2 {\n   function store_canDeletePage(store: Store): boolean;\n   function store_canUndeletePage(store: Store): boolean;\n   function store_canPinPage(store: Store): boolean;\n+\n   function siteStatusToString(siteStatus: SiteStatus);\n   var cloneRect;\n   var cloneEventTargetRect;\n@@ -470,6 +474,11 @@ declare namespace debiki2 {\n   function page_canChangeCategory(page: Page): boolean;\n   function page_mostRecentPostNr(page: Page): number;\n \n+  function node_deriveLayout(props: DiscLayoutDropdownBtnProps): NodePropsDerivedAndDefault;\n+  function discProps_pluckFrom(source: DiscPropsSource): DiscPropsSource;\n+  function page_deriveLayout(page: PageDiscPropsSource, store: DiscStore, layoutFor: LayoutFor): DiscPropsDerived;\n+  function cat_deriveLayout(cat: Cat, store: DiscStore, layoutFor: LayoutFor): DiscPropsDerived;\n+\n   function settings_showCategories(settings: SettingsVisibleClientSide, me: Myself): boolean;\n   function settings_showFilterButton(settings: SettingsVisibleClientSide, me: Myself): boolean;\n   function settings_showTopicTypes(settings: SettingsVisibleClientSide, me: Myself): boolean;\n@@ -546,8 +555,10 @@ declare namespace debiki2 {\n       user: Pat, store: Store, onClick?: Ay, avoidFullName?: Bo });\n \n   function UserName(props: {\n-      user: Pat, store?: Store, settings?: SettingsVisibleClientSide,\n-      makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo });\n+      user?: Pat, patId?: PatId, // either or\n+      store?: Store, settings?: SettingsVisibleClientSide,\n+      makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo,\n+      key?: St | Nr });\n \n   function TagListLive(ps: TagListLiveProps): RElm | U;\n   function TagList(ps: TagListProps): RElm | U;"
    },
    {
      "sha": "c488489ebee0c0e2d2f8a6424add44e84f0d81cf",
      "filename": "client/app-slim/store-getters.ts",
      "status": "modified",
      "additions": 33,
      "deletions": 3,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fstore-getters.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fstore-getters.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fstore-getters.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -31,12 +31,31 @@\n //------------------------------------------------------------------------------\n \n \n+export function pat_isAuthorOf(pat: Me | Pat, post: Post, patsById: PpsById): Bo {\n+  // @ifdef DEBUG\n+  dieIf(!post, 'TyE2065MRTJ3');\n+  // @endif\n+  // If pat typeof Me, and not logged in, .id is undefined.\n+  if (!pat.id || !post) return false;\n+  // If pat used hens real account (or if pat is an anonym and the post author too).\n+  if (pat.id === post.authorId) return true;\n+  // Is pat used an anonym or [pseudonyms_later].\n+  const author: Pat | U = patsById[post.authorId];\n+  return !!author && author.anonForId === pat.id;\n+}\n+\n+\n export function store_thisIsMyPage(store: Store): boolean {\n   const page: Page = store.currentPage;\n   if (!page || !store.me.id) return false;\n-  const bodyOrTitle = page.postsByNr[BodyNr] || page.postsByNr[TitleNr];\n-  // If !bodyOrTitle, is an auto page, e.g. user profile or admin area.\n-  return bodyOrTitle && store.me.id === bodyOrTitle.authorId;\n+  const me: Me = store.me;\n+  const bodyOrTitle: Post | U = page.postsByNr[BodyNr] || page.postsByNr[TitleNr];\n+\n+  // If !bodyOrTitle, we're on an auto page, e.g. a user profile page, or in the admin area.\n+  if (!bodyOrTitle)\n+    return false;\n+\n+  return pat_isAuthorOf(me, bodyOrTitle, store.usersByIdBrief);\n }\n \n \n@@ -55,6 +74,17 @@ export function store_getAuthorOrMissing(store: DiscStore, post: Post): Pat {\n     };\n   }\n \n+  // If replying using a new anonym, its future id is not yet konw:\n+  if (post.authorId === Pats.FutureAnonId) {\n+    return {\n+       id: Pats.FutureAnonId,\n+       // We don't know for sure what name sequence number this anonym will get,\n+       // so let's use '?' instead of A1 or A2 etc.\n+       fullName: \"Anonym (you)\",\n+       isAnon: true,\n+    };\n+  }\n+\n   const user = store_getUserOrMissing(store, post.authorId);\n   if (user.isMissing) {\n     logError(\"Author \" + post.authorId + \" missing, page: \" +"
    },
    {
      "sha": "af39faa334cdda88d56f14e2db3336dc62011f4a",
      "filename": "client/app-slim/theme.styl",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Ftheme.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Ftheme.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Ftheme.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -126,6 +126,10 @@ small code {\n   font-size: inherit;\n }\n \n+// For this to work, the elem also needs to be  display: block  or inline-block.\n+.n_1stCap::first-letter {\n+  text-transform: uppercase;\n+}\n \n ins\n   text-decoration: none"
    },
    {
      "sha": "196597c11788de3fcba534bc7b6fa43bdda68a62",
      "filename": "client/app-slim/translations.d.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Ftranslations.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Ftranslations.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Ftranslations.d.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -26,6 +26,7 @@ interface TalkyardTranslations {\n   AddComment?: string;\n   Admin: string;\n   AdvSearch: string;\n+  Anonym?: string;\n   Away: string;\n   Back: string;\n   BlogN: string;"
    },
    {
      "sha": "5665fecbc307d6b56e0228f84fd31bddc11354eb",
      "filename": "client/app-slim/util/ExplainingDropdown.styl",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Futil%2FExplainingDropdown.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -18,7 +18,9 @@ $sideSpace = 20px;\n .s_ExplDrp_ActIt   // action item, e.g. button\n   list-style: none;\n   margin: 0;\n+\n   button,\n+  .esP_By,\n   .esExplDrp_ActIt_Expl\n     margin: 0 0 7px $sideSpace;\n \n@@ -60,6 +62,8 @@ $sideSpace = 20px;\n   color: #222;\n   font-weight: bold;\n   font-size: 15px;\n+  .n_TtlCap\n+    text-transform: capitalize;\n \n .esExplDrp_ActIt_Expl,\n .esExplDrp_entry_expl"
    },
    {
      "sha": "e4927e95dbcd14a042f90bb55142d371ad73477f",
      "filename": "client/app-slim/utils/react-utils.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Futils%2Freact-utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Futils%2Freact-utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Futils%2Freact-utils.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -56,22 +56,27 @@ export function whenMsToIsoDate(whenMs: WhenMs): string {\n  * the fixed ISO date with something like \"5 hours ago\" â€” see processTimeAgo\n  * just below.  The server inculdes only ISO dates, not \"x time ago\", in its HTML,\n  * so that it can be cached.\n+ *\n+ * CLEAN_UP: Nowadays, jQuery is gone.\n  */\n-export function timeAgo(whenMs: number, clazz?: string) {\n-  var isoDate = whenMsToIsoDate(whenMs);\n+export function timeAgo(whenMs: Nr, clazz?: St) {\n+  const isoDate = whenMsToIsoDate(whenMs);\n   return r.span({ className: 'dw-ago ' + (clazz || '') }, isoDate);\n }\n \n /**\n  * Like timeAgo(isoDate) but results in just \"5h\" instead of \"5 hours ago\".\n  * That is, uses only one single letter, instead of many words.\n+ *\n+ * CLEAN_UP: For whatever reason, this fn is nowadays the same as timeAgo()\n+ * just above, minus the '-ltr' CSS class suffix.\n  */\n-export function prettyLetterTimeAgo(whenMs: number, clazz?: string) {\n-  var isoDate = whenMsToIsoDate(whenMs);\n+export function prettyLetterTimeAgo(whenMs: Nr, clazz?: St) {\n+  const isoDate = whenMsToIsoDate(whenMs);\n   return r.span({ className: 'dw-ago-ltr ' + (clazz || '') }, isoDate);\n }\n \n-export function timeExact(whenMs: number, clazz?: string) {\n+export function timeExact(whenMs: Nr, clazz?: St) {\n   return timeAgo(whenMs, clazz); /*\n   // This no longer works, because moment.js was moved to more-bundle.js, so    [E5F29V]\n   // cannot convert to e.g. \"Yesterday 05:30 PM\". Instead, show \"4 hours ago\" or sth like that."
    },
    {
      "sha": "12ff52e010f753e2ca16782a38b2aebb6f6608cf",
      "filename": "client/app-slim/widgets.styl",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fwidgets.styl?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -35,6 +35,8 @@\n .c_CmtOrdIt_InhDef_Val\n   font-weight: normal;\n \n+.c_BadRoute samp\n+  margin: 0 0.45ex 0 1ex;\n \n .s_NotHttpsErr\n   font-weight: bold;\n@@ -47,6 +49,12 @@\n   background: $errorBackground;\n \n \n+.c_AsgsL\n+  display: inline;\n+  li\n+    display: inline;\n+    margin: 0;\n+\n // Effects (Fx)\n \n "
    },
    {
      "sha": "17a0ed0caa5dc3896e28a2e6edfcb49ab8323c27",
      "filename": "client/app-slim/widgets.ts",
      "status": "modified",
      "additions": 41,
      "deletions": 8,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fwidgets.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -98,9 +98,14 @@ export function RedirAppend({ path, append }) {\n }\n \n // Use an icon with on-hover instead?\n+// Was: \"Only *admins*\", but now also mods and core members can see others'\n+// email addresses, *if* this has been configured, by an admin.\n+// UX WOULD send permission info to here, and show \"Only admins\" or\n+// \"Only admins and moderators\" etc, as appropriate. But is it that important,\n+// let's wait.\n export const OnlyAdminsSee =\n     r.span({ className: 's_OnlAdmTxt' },\n-      \" (only admins can see)\");\n+      \" (only staff can see)\");  // or \"admins\" or \"core-members and moderators\", hmm.  I18N\n \n \n // UX: Click on space? If 'btn'?  [sch_b_space]\n@@ -273,12 +278,13 @@ export function UserNameLink(props: {\n \n \n export function UserName(props: {\n-    user: BriefUser, store?: Store, settings?: SettingsVisibleClientSide,\n-    makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo }) {\n+    user?: Pat, patId?: PatId, // either or\n+    store?: Store, settings?: SettingsVisibleClientSide,\n+    makeLink?: Bo, onClick?: Ay, avoidFullName?: Bo, key?: St | Nr }) {\n \n   // Some dupl code, see discussion.ts, edit-history-dialog.ts & avatar.ts [88MYU2]\n   const settings: SettingsVisibleClientSide = props.settings || props.store.settings;\n-  const user: BriefUser = props.user;\n+  const user: Pat = props.user || props.store.usersByIdBrief[props.patId];\n   const showHow: ShowAuthorHow = settings.showAuthorHow;\n \n   // (All StackExchange demo sites use ShowAuthorHow.FullNameThenUsername, so\n@@ -289,10 +295,34 @@ export function UserName(props: {\n \n   const guestClass = user_isGuest(user) ? ' esP_By_F-G' : '';\n \n-  let namePartOne;\n-  let namePartTwo;\n-\n-  if (showHow === ShowAuthorHow.UsernameOnly) {\n+  let namePartOne: St | RElm | U;\n+  let namePartTwo: St | RElm | U;\n+\n+  if (user.isAnon) {\n+    // There's already \"By\" before, and \"anonym\" isn't a name, so use lowercase.\n+    namePartOne = r.span({className: 'esP_By_F esP_By_F-G' }, t.Anonym);\n+    if (props.store && user.anonForId) {  // maybe always take a DiscStore as fn props?\n+      const store = props.store;\n+      if (store.me.id === user.anonForId) {\n+        // For now: ...\n+        namePartTwo = rFr({}, \" \", r.span({ className: 'c_P_By_AnonYou' }, \"you\"));  // I18N\n+      }\n+      else {\n+        // ... Later: show \"you\" if it's oneself. But otherwise, set `user = the-real-user`\n+        // and generate namePartOne & namePartTwo as usual, as if wasn't anon?\n+        // And prefix with \"anonym, namely: ...\" and let \"anonym\" link to\n+        // the anonym's profile page. â€” This is only for admins, who can, if they want,\n+        // see who the anonyms are â€” can be needed to stop bad behavior.\n+        const anyRealAuthor = store.usersByIdBrief[user.anonForId];\n+        if (anyRealAuthor) {\n+          // ...\n+          // user = anyRealAuthor?  + do the if{} below as usual (remove the 'else') ?\n+          // ...\n+        }\n+      }\n+    }\n+  }\n+  else if (showHow === ShowAuthorHow.UsernameOnly) {\n     // CLEAN_UP rename these CSS classes from ...By_F to By_1 and By_2 for part 1 (bold font)\n     // and 2 (normal font) instead?\n     // But for now, use By_F for the *username* just because it's bold, and By_U for the full name,\n@@ -336,6 +366,9 @@ export function UserName(props: {\n   const newProps: any = {\n     className: 'dw-p-by esP_By' + (isUnknown ? ' s_P_By-Unk' : ''),\n   };\n+  if (isVal(props.key)) {\n+    newProps.key = props.key;\n+  }\n \n   // Talkyard demo hack: usernames that starts with '__sx_' are of the form    [2QWGRC8P]\n   // '__sx_[subdomain]_[user-id]' where [subdomain] is a StackExchange subdomain, and"
    },
    {
      "sha": "91d1f64c6bd7c050fa2f839f69bdcbf9287ff3eb",
      "filename": "client/app-slim/widgets/widget-open-buttons.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 38,
      "changes": 44,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets%2Fwidget-open-buttons.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-slim%2Fwidgets%2Fwidget-open-buttons.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fwidgets%2Fwidget-open-buttons.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -31,58 +31,26 @@ const r = ReactDOMFactories;\n export const DiscLayoutDropdownBtn = React.createFactory<DiscLayoutDropdownBtnProps>(\n         function(props: DiscLayoutDropdownBtnProps) {\n \n-  // The dialog is either for a specific page, or a category (and all pages therein).\n-  dieIf(!!props.cat == !!props.page, 'TyE604MWJJ34');\n-\n-  let layoutSource: DiscPropsSource;\n-  if (props.cat) {\n-    layoutSource = discProps_pluckFrom(props.cat);\n-  }\n-  else {\n-    layoutSource = discProps_pluckFrom(props.page);\n-    // Apply any current page temp layout tweaks (disappear on page reload).\n-    if (props.layoutFor === LayoutFor.PageWithTweaks && props.store.curPageTweaks) {\n-      const tempLayoutTweaks = discProps_pluckFrom(props.store.curPageTweaks);\n-      layoutSource = { ...layoutSource, ...tempLayoutTweaks };\n-    }\n-  }\n-\n-  // If we're A) altering the page layout, e.g. the comments sort order,\n-  // but not saving server side, then:  layoutFor === PageWithTweaks,\n-  // and the default layout is the page *without* tweaks,\n-  // that is:  PageNoTweaks = PageWithTweaks + 1.\n-  //\n-  // And if we're B) saving server side, then:  layoutFor === PageNoTweaks,\n-  // and the defaults would be the parent category's layout props\n-  // that is,  LayoutFor.Ancestors = PageNoTweaks + 1.\n-  //\n-  // So, the \"parent\" layout is +1:\n-  //\n-  const layoutForParent = props.layoutFor + 1;\n-\n-  const actualLayout: DiscPropsDerived = props.page\n-          ? page_deriveLayout(props.page, props.store, props.layoutFor)\n-          : cat_deriveLayout(props.cat, props.store, props.layoutFor);\n-  const parentsLayout: DiscPropsDerived = props.page\n-          ? page_deriveLayout(props.page, props.store, layoutForParent)\n-          : cat_deriveLayout(props.cat, props.store, layoutForParent);\n+  const derived: NodePropsDerivedAndDefault = node_deriveLayout(props);\n \n+  // Bit dupl code. [node_props_btn]\n   return (\n       Button({ className: 'e_DscLayB', onClick: (event) => {\n           const atRect = cloneEventTargetRect(event);\n           morebundle.openDiscLayoutDiag({\n               atRect,\n               // This is what's being edited.\n-              layout: layoutSource,\n+              layout: derived.layoutSource,\n               // This is the defaults, e.g. parent category settings, will get used\n               // if layoutSource settings cleared (gets set to Inherit).\n-              default: parentsLayout,\n+              default: derived.parentsLayout,\n               // These forSth just affect the dialog title.\n               forCat: !!props.cat,\n               forEveryone: props.forEveryone,\n               onSelect: props.onSelect });\n         }},\n-        comtOrder_title(actualLayout.comtOrder), ' ', r.span({ className: 'caret' })));\n+        comtOrder_title(derived.actualLayout.comtOrder),\n+            ' ', r.span({ className: 'caret' })));\n });\n \n "
    },
    {
      "sha": "ed0d500a55ada9ce67395e9460f4101bab190335",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fadmin%2Fadmin-app.staff.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -2544,21 +2544,23 @@ const LanguageSettings = createFactory({\n       // Don't mention this is en-US, people might then want -GB too and -AU (for the UK and Australia)?\n       value: 'en_US', label: \"English\"\n     }, {\n-      value: 'es_CL', label: \"Spanish (Chile)\"\n+      value: 'zh_CN', label: \"Chinese (PRC)\"\n+    }, {\n+      value: 'nl_NL', label: \"Dutch\"\n     }, {\n       value: 'de_DE', label: \"German\"\n     }, {\n       value: 'he_IL', label: \"Hebrew\"\n     }, {\n       value: 'lv_LV', label: \"Latvian\"\n-    }, {\n-      value: 'nl_NL', label: \"Dutch\"\n     }, {\n       value: 'pl_PL', label: \"Polish\"\n     }, {\n       value: 'pt_BR', label: \"Portuguese (Brazilian)\"\n     }, {\n       value: 'ru_RU', label: \"Russian\"\n+    }, {\n+      value: 'es_CL', label: \"Spanish (Chile)\"\n     }, {\n       value: 'sv_SE', label: \"Swedish\"\n     }, {"
    },
    {
      "sha": "2ea1890a9c5437c2238c6f12f1461a84fa3e51f9",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Ftypes-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/client%2Ftypes-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Ftypes-and-const-enums.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -208,6 +208,26 @@ const enum No {\n   TagId = 0,\n }\n \n+\n+/// Sync w Scala class [NeverAlways] and the PostgreSQL custom domain 'never_always_d'.\n+///\n+const enum NeverAlways {\n+  /// Inherit from parent category or site settings or built-in default.\n+  /// (Not saved in the database, instead, field set to null.)\n+  Inherit = 0,\n+\n+  //Never = 1,\n+  NeverButCanContinue = 2,\n+  Allowed = 3,\n+  //AllowedMustChoose = 4,\n+  //MustChoose = 5,\n+  //RecommendedMustChoose = 6,\n+  Recommended = 7,\n+  AlwaysButCanContinue = 8,\n+  //Always = 9,\n+}\n+\n+\n const enum ReviewDecision {\n   // 1nnn = Accept.\n   Accept = 1001,\n@@ -280,6 +300,11 @@ const enum PostType {   // sync with test code [26BKA01]\n }\n \n \n+const enum PatPostRelType {\n+  AssignedTo = 11,\n+}\n+\n+\n const enum PostVoteType {\n   Like = 41,\n   Disagree = 42,\n@@ -288,6 +313,14 @@ const enum PostVoteType {\n }\n \n \n+/// See, and sync with, AnonStatus in Scala.\n+const enum AnonStatus {\n+  NotAnon = 0,\n+  IsAnonOnlySelfCanDeanon = 65535,\n+  IsAnonCanAutoDeanon = 2097151,\n+}\n+\n+\n const enum PageNotfLevel {\n   EveryPostAllEdits = 9,\n   EveryPost = 8,\n@@ -583,6 +616,7 @@ const enum BlockedReason {  // [auto_block]\n \n \n const enum Pats {\n+  FutureAnonId = -4,\n   MaxGuestId = -2,\n   NoPatId = 0,\n   MinNotSysMemberId = 10,\n@@ -679,5 +713,9 @@ const enum WinDims {\n   MinEditorLeftWidth = 1000,\n }\n \n+/// Data structures and algorithms help constants.\n+const enum StructsAndAlgs {\n+  TooLongPath = 250,\n+}\n \n // vim: et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "ea366499f95cab18e322dd29ac747cfb5bcaed5b",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/conf%2Froutes",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/conf%2Froutes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf%2Froutes?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -116,7 +116,7 @@ GET   /-/groups/                controllers.UserController.viewUserPage(whatever\n GET   /-/groups/*whatever       controllers.UserController.viewUserPage(whatever)\n GET   /-/load-my-page-data      controllers.UserController.loadMyPageData(pageIds)\n GET   /-/list-topics-by-user    controllers.UserController.listTopicsByUser(userId: Int)\n-GET   /-/list-posts             controllers.UserController.listPostsByUser(authorId: Int)\n+GET   /-/list-posts             controllers.UserController.listPostsByUser(authorId: Int, relType: Option[Int], which: Option[Int])\n GET   /-/download-my-content    controllers.UserController.downloadUsersContent(authorId: Int)\n GET   /-/download-personal-data controllers.UserController.downloadPersonalData(userId: Int)\n POST  /-/track-reading          controllers.UserController.trackReadingProgress\n@@ -213,6 +213,7 @@ POST  /-/remove-users-from-page controllers.PageController.removeUsersFromPage\n POST  /-/join-page              controllers.PageController.joinPage\n POST  /-/leave-page             controllers.PageController.leavePage\n POST  /-/config-watchbar        controllers.PageController.configWatchbar\n+POST  /-/change-pat-node-rels   controllers.PageController.changePatNodeRels\n \n POST  /-/reply                  controllers.ReplyController.handleReply\n POST  /-/chat                   controllers.ReplyController.handleChatMessage\n@@ -230,9 +231,9 @@ POST  /-/submit-custom-form-as-new-topic  controllers.CustomFormController.handl\n POST  /-/submit-usability-testing-form    talkyard.server.plugins.utx.UsabilityTestingExchangeController.handleUsabilityTestingForm\n GET   /-/utx-pick-a-task        talkyard.server.plugins.utx.UsabilityTestingExchangeController.pickTask(categorySlug)\n \n+# Merge with CloseCollapseController into PostController?\n POST  /-/vote                   controllers.VoteController.handleVotes\n GET   /-/load-voters            controllers.VoteController.loadVoters(postId: Int, voteType: Int)\n-\n POST  /-/flag                   controllers.FlagController.flagPost\n \n GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: Int, categoryId: Option[Int], toUserId: Option[Int], pageId: Option[String], postNr: Option[Int])"
    },
    {
      "sha": "8537277d69ca04bc05441e5d9ce36ac2081c5239",
      "filename": "decisions.adoc",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/decisions.adoc",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/decisions.adoc",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/decisions.adoc?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -501,15 +501,24 @@ This has worked out fine â€” e.g. can toggle settings on both a user and group l\n \n Change-rename tables `post_actions3` to `pat_rels_t` and create a new `post_rels_t`\n table (\"rel\" for relationship, graph db terminology: nodes and relationships).\n-See `[graph_database]` in <./docs/tyworld.adoc>.\n+See `[graph_database]` in <./docs/tyworld.adoc>,\n+and, edit, 2023: `[add_nodes_t]` and <./docs/everything-is-a-node.txt>.\n+\n+Edit: Not `pat_rels_t`, instead: `pat_node_rels_t`?\n+And rename `group_participants3` to `pat_pat_rels_t`\n+â€” relationships between pats and other pats.\n+E.g. member of group. Or follows, or friends, or ... what more? `PseudonymOf`?\n+And add `PatPatRelType` with value e.g. `MemberOf`, or `ManagerOf` etc,\n+of relevance for groups. And `SubscribedTo`, if one wants to know about\n+new posts by someone or by anyone in a group. â€” But most of this will\n+be in `pat_node_rels_t` so can be per category (e.g. following someone but\n+only in a specific category).\n \n Using these links tables will make it possible for e.g. a single flag to flag\n many things, e.g. all astroturfing accounts the flagger thinks belong to the same\n real world person. Or a post can be PostRelType.AssignedTo more than one person.\n Or a private comments sub thread can be made visible to more than one other group\n or person.  Or having two people listed as co-authors of an article.\n-[Edit] Private comments and post owner(s) and many-authors will be implemented\n-differently: Post.* fields pointing by id to a person/group/list-of-people. [/Edit]\n â€” Instead of, as in most other software, always just one of whatever it is.\n \n \n@@ -518,7 +527,7 @@ differently: Post.* fields pointing by id to a person/group/list-of-people. [/Ed\n Use Debian as Docker base image, instead of Alpine. Debian is more widely\n used, that's good for security, e.g. Debian at Google: gLinux, and libc means\n no exotic musl-not-libc bug risk.  And most official images are based on\n-Debian â€”Â we'd be downloading a Debian base image anyway.  [alp_2_deb]\n+Debian â€” we'd be downloading a Debian base image anyway.  [alp_2_deb]\n \n \n === Kubernetes, Skaffold, Minikube\n@@ -559,3 +568,6 @@ the \"official\" operators language â€” see the Rust K8s Operators links above.\n == Year 2023\n \n \n+=== Anonyms and Pseudonyms\n+\n+See tyworld.adoc: \n\\ No newline at end of file"
    },
    {
      "sha": "81f5aa2750b0ac3fea7b1b32eb9046bf46dc2b60",
      "filename": "docs/abbreviations.txt",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fabbreviations.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fabbreviations.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fabbreviations.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -61,19 +61,22 @@ t_ = the_Whatever (for ids)  NO (because looks like \"test\"), instead:\n i_ = id\n n_ = a class with No styles unless there's another selector before.\n      They're widget layout helpers, e.g. n_Row1 or n_Col1, 2, 3.\n-     This is ok:\n+     These CSS styles are ok:\n         .c_Widget .n_Row1 { ... styles ... }   // other selector before\n-     but this is not :\n-        .n_Row1 { ... styles ... }\n+     but these are not:\n+        .n_Row1 { ... styles ... }             // n_... is first / the-only. Don't.\n         .n_Row1 .c_Something { ... styles ... }\n+\n      Should *not* be included in Ty's BEM block names.\n-     So, *not*:  c_Widget_Row2_Part\n-     instead: c_Widegt .n_Row2 .c_Widegt_Part\n-     But why? Because otherwise the BEM block names can get annoyingly long.\n+     So, *not*:   .c_Widget_Row2_SomePart\n+       Instead:  (.c_Widget) .n_Row2 .c_Widegt_SomePart\n+       Or just:   .c_Widegt_SomePart  â€” if that works.\n+     But why?  Because otherwise the BEM block names can get annoyingly long.\n      It's nice to have a *safe* way to arrange the parts of a widget in rows and columns,\n      without then having to rename all parts of the widget â€” just adding, say,\n      n_Row1 and n_Row2, and editing the .c_Sth .n_Row1/2 CSS, but nothing else\n      (not having to rename c_Sth_...Sub... to c_Sth_Row1_...Sub... everywhere).\n+\n e_ = end-to-end-test_Whatever (classes only, for widgets to click in End-to-End tests)\n p_ = public api (classes only, not ids)\n \n@@ -89,6 +92,9 @@ Adm = admin\n Aft = after\n Alw = allow(ed)\n Ann, An = announcement, also see SAn: Server Announcement\n+Asg  = assign\n+Asgd = assigned, Asgd2 assigned to\n+Asgs = assignees\n AuD = authentication dialog (create account / log in / just type a name)\n Bef = before\n Bitf = bitfield\n@@ -140,6 +146,7 @@ Hz  = horizontal, also Vl: vertical\n Ifr = iframe\n It  = item\n Inh = inherit\n+Jo  = Javascipt or json object: { ... } or (in Scala) JsObject\n L   = list, when at the end, e.g.:  '..._IdpsL' for Identity Providers list, ..T = table\n Lay = layout\n Ls  = list, when not at the end, e.g LsPgsB = list pages button"
    },
    {
      "sha": "edd032bd3b59c4f07528f54197febcfc8c9de602",
      "filename": "docs/e2e-tests-readme.md",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fe2e-tests-readme.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fe2e-tests-readme.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fe2e-tests-readme.md?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -162,6 +162,26 @@ On Linux, do this: (other platforms? no idea)\n     s/run-e2e-tests.sh --all  #  -3 --secretsPath /your/path/to/e2e-secrets.json\n \n \n+### Flappy tests `[flappy_tests]`\n+\n+When running e2e tests, there're many things happening in parallel\n+(browser threads, the browser layout engine and redraws, HTTP requests,\n+server request processing, server background threads, Webdriver.io threads,\n+Webdriver.io HTTP requests), and there can be race conditions that\n+make tests fail, but fail only infrequently so it's hard to reproduce and fix.\n+It's pretty pointless to try to elliminate all such races; instead, we retry\n+any failed test a few times. Only if a test fails somehwat often,\n+its flappiness becomes a problem.\n+\n+But there's one source of flappy tests that can be elliminated. Namely fetching\n+things from the databse, in undefined order. `[flappy_order]` Typically PostgreSQL\n+gives us the stuff we're querying for, in always the same order â€” except for\n+sometimes, and then a test that compares e.g. actual assignees, with expected\n+assignees, could fail.  (Or it would have to be written to work with any order.)\n+Therefore, it's good to include `order by` in, hmm, all? or at least most\n+database queries that return many things (even if we're loading all the things).\n+\n+\n ### Typescript\n \n The tests are written in Typescript. When you run `docker-compose start` (see above), a Docker container"
    },
    {
      "sha": "6e59633a5035af01f8357c73412f883c26d4404a",
      "filename": "docs/everything-is-a-node.txt",
      "status": "added",
      "additions": 792,
      "deletions": 0,
      "changes": 792,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Feverything-is-a-node.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Feverything-is-a-node.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Feverything-is-a-node.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,792 @@\n+[add_nodes_t]\n+\n+alter table posts3 rename to nodes_t\n+\n+alter table post_actions3 rename to  pat_node_rels_t\n+â€” if it's interesting to know when and by who a relationship was added, e.g.:\n+Assigned to Alice by Bob on 2023-04-05. Or post revision nr, or any rel specific\n+value (pat_node_rels_t.val_i32_c).\n+\n+alter table perms_on_pages3 rename to  pat_node_multi_rels_t\n+\n+Move from  categories_t, pages3, posts3  to pat_node_multi_rels_t:\n+    comts_start_hidden_c  never_always_d\n+    comts_start_anon_c    never_always_d\n+    op_starts_anon_c      never_always_d\n+    new_anon_status_c     anonym_status_d\n+    -- alreade there: (but maybe rename to: private_comts_c ?)\n+    can_post_private_c    never_always_d  -- if always, then, may_post_comment has\n+                                          -- no effect, meaning, cannot post publ comts.\n+\n+Because, just like  may_post_comment, may_edit_comment etc,  it's sometimes\n+good to let those be per person.  Consider a university & class & students:\n+Sometimes, it can be good if the students by default post private comments,\n+so only the teacher can see.  Whilst the teacher by default posts public comments,\n+so all students in the class can see  (unless of course if the teacher replies to\n+a private comment â€” then that reply is private too).\n+\n+Older thoughts follow:\n+\n+\n+Change  site settings, categories, pages and posts  to  *nodes*:\n+\n+Site node (id 1? But it's already in use everyywhere :-/\n+            namely the 1st root cat about page title?  Maybe 0  (or null or -1?)  instead)\n+  Root category node  (for sub communities, a la subreddits)\n+   *  Base category node\n+              can use the About page title post & id as category node & id,\n+              and orig post nr 1 = optional descr?\n+\n+     (*  Sub, subsub category nodes)\n+\n+          *  Page node\n+                  can use the title post?  Which will remain the page title:\n+                      nodes_t.approved_source_c = posts3.approved_source, renamed.\n+                  page node id = title post id.  Title post nr stays 0?\n+            1  Orig Post node,  node nr 1  (but a different *id*)\n+            *  Comment nodes,  node nr 2, 3, 4\n+\n+Categories:\n+  - NodeType.Category\n+  - Node text = category title, nr = 0.\n+  - Child node nr 1  = category description.\n+  - Child node nr 2, 3, 4: N/A.\n+  - Page child nodes = pages in that category.\n+  - Category child nodes = sub cats.\n+\n+Pages:\n+  - NodeType.Page\n+  - Node text = page title, nr = 0.\n+  - Child node nr 1  = orig post text.\n+  - Child node nr 2, 3, 4: Comments.\n+  - *Page* child nodes = typially sub tasks or comment trees important enough\n+      to be moved to their own child page?\n+      (That is, pages with sub pages â€” or, you could say: tasks with sub tasks.)\n+  - Category child nodes: Sub tasks grouped in categories?\n+      For really big projects?\n+    Don't appear on any category list page. Instead, only if clicking [+]\n+    to expand the page (in any list of pages where it appears).\n+\n+Comments:\n+  - NodeType.Comment.\n+  - Node text = comment text.\n+  - Child nodes = replies.\n+  And, helpful for a bookmarks tree or to specify sidebar contents?:\n+  - Page child nodes: Show as a list below the comment? (When would that be useful?)\n+  - Category child nodes: Show as a list, too?\n+  Hmm but it's all a tree, currently â€” can't have many parent nodes.\n+  Need new table, maybe node_node_rels_t with column  other_parent_id_c  ?\n+\n+Then can:\n+  - Delete duplicated settings in:\n+      settings3,  cats_t (categories3),  pages_t (pages3),\n+      posts_t (posts3)  <â€”â€” but will get renamed to  nodes_t.\n+\n+  - Comment owners:  One owns comments one has posted, and can make\n+    them anonymous (change to an anon author). Or make them private,\n+    and then add others who can then see the private comment and\n+    comment sub tree starting at that comment (at that node).\n+\n+  - Page owners:  A person who creates an ideation page with different\n+    steps, by default manages that ideation page:  asks people to\n+    submitt ideas (as comment repiles)  decides when that's been done\n+    and makes the replies visible.  Decides if replies are anonymous and for\n+    how long.   Can add sbd else as page manager â€” then that person\n+    can add/remove people from that particular ideation page.\n+\n+  - Projects: Hybrid page-category nodes â€” project pages\n+    which have their own sub pages. The project main page, is sort of\n+    both a category and a page.\n+\n+  - Project owners. Owners make sense, not only for orig-posts and comments,\n+    but also for project pages.  The person who creates a new project,\n+    by default is the project owner.  And can add a node manager = project manager,\n+    who can in turn assign people to the node (project) or sub nodes (project\n+    sub tasks)?\n+  \n+  - Project (& page & category) managers.\n+    See just above (the end of the above paragraph).\n+\n+  - Category owners. Makes sense too. A Talkyard community has members who\n+    create packages for the related software, and each such package\n+    gets its own sub category, and the package author replies to questions\n+    there. It'd be nice if the package author, was the category owner?\n+    So hen could edit the category description, maybe rename the category,\n+    if the package gets renamed? Without having to aske the forum admins.\n+    And add others who can help out with answering questions? light weight moderation?,\n+    in that catepory only.\n+\n+  - Root category / sub community owners. Makes sense â€” would correspond to\n+    sbd who creates & moderators a subreddit (over at Reddit).\n+    And can grant Manage & delete-comments pemrission to sbd else\n+    who then starts functioning as a moderator of that sub community.\n+\n+  - Site node owners.  That'd be the person who created the forum (unless\n+    hen removes henself and adds sbd else as site owner).\n+\n+  - Permissions don't need to link to either a category, page or post,\n+    or the whole-site boolean.  Instead, there's just nodes.\n+\n+  - Fields dupl in  settings3, cats_t, pages_t, posts_t  disappear.\n+\n+  - If you add a feature to a category, it automatically works also\n+    for pages and comment sub trees â€” which starts looking nice/important,\n+    now with hidden and anonymous comments, where you'd often want\n+    the person who created, say, an ideation page, to manage that page\n+    and discussion (e.g. decide when to move on to the next step in an\n+    ideation process).\n+    But that'd be a bit more work, as things look now,  when permissions\n+    would have to be dupl between cats, pages,  comment trees.\n+    Instead, with nodes,  it'd just work: Add settings for cats,\n+    and they'd be there also for pages  â€” since both are the same thing: nodes.\n+\n+  - Already did this for groups and users: they're the same thing, in the\n+    same table, pats_t (currently named users3), just different account types:\n+    a participant of type User, or type Group, or Guest etc.\n+    And this was a good (!) idea. (Thanks PostgreSQL for the idea â€” they once\n+    merged users and groups into one thing, \"roles\" they call it.)\n+    Seems this would be the right thing not only for people (pats_t) but\n+    also for content (nodes_t currently posts3, categories3, pages3), in Ty.\n+\n+\n+Below are thoughts about what'll happen with each relevant table & column.\n+(Some of the thoughts are old & out-of-date?)\n+\n+\n+perms_on_pages3  â€”â€”> perms_on_nodes_t (& perms_on_pats_t)  NO,  pat_node_multi_rels_t  instead.\n+--------------------------------------------------------------------------\n+ site_id                 | integer           |           | not null | \n+ perm_id                 | integer           |           | not null | \n+ for_people_id           | integer           |           | not null | \n+ on_whole_site           | boolean           |           |          | \n+ on_category_id          | integer       ^^^\\\n+ on_page_id              | character varying >â€”â€”>  on_node_id  â€”>  nodes_t  (currently \"posts3\")\n+ on_post_id              | integer       ___/\n+ on_tag_id               | integer           |           |          | \n+ may_edit_page           | boolean           |           |          | \n+ may_edit_comment        | boolean           |           |          | \n+ may_edit_wiki           | boolean           |           |          | \n+ may_edit_own            | boolean           |           |          | \n+ may_delete_page         | boolean           |           |          | \n+ may_delete_comment      | boolean           |           |          | \n+ may_create_page         | boolean           |           |          | \n+ may_post_comment        | boolean           |           |          | \n+ may_see                 | boolean           |           |          | \n+ may_see_own             | boolean           |           |          | \n+ may_see_private_flagged | boolean           |           |          | \n+\n+NEXT: Add these fields to perms_on_pages3  (to be renamed to  pat_node_multi_rels_t):\n+\n+  - is_owner_c bool:  DONE, added  â€” May add managers and granters/revokers,\n+                     and edit the node and ... what about child nodes\n+                     of the same type?\n+       (but is-author stored in:  pat_node_rels_t.rel_type = AuthorOf)\n+\n+    Private comments:\n+        may_see,  may_see_own,  may_post_comment,  may_edit_own,  may_edit_wiki\n+        and root comt owner  can add more people,\n+        and those with  can_manage_c  or  can_grant  on the private root,\n+           can add more people (with fewer or as much perms as themselves).\n+\n+        but  nodes_t (posts3) .private_status_c  says if a comment tree is private.\n+        Hmm, need to look at all ancestor comments, pages and cats. (that's fine)\n+\n+  - can_assign_c   DONE, added\n+       (but is-assigned stored in:  pat_node_rels_t.rel_type = AssignedTo)\n+\n+  - can_see_assigned_c   DONE, added\n+\n+  - can_alter_c  DONE, added  â€” may open/close, change doing status?\n+                     (but not change owner, author, private-status, delete).\n+\n+  - can_manage_c bool:  May grant & revoke others' perms, on a content node\n+                          and descendant nodes.  // *of the same type* (e.g. child cats).\n+           (later?: bitfield that says  *what* perms?\n+            All perms could be a bitfield too actually?\n+            But for now, one can grant only the perms one has oneself?\n+            And revoke ... What?  Perms one granted oneself?)\n+  - can_grant_c bool, or  can_invite_c â€” invite to join a category / group?\n+          May grant permissions to others, but only those hen\n+          has henself already.  And may undo, until the grantee\n+          has used the new perms for a while or until some time has elapsed.\n+\n+          Some bits could say if the grantee first needs to accept?\n+          So e.g. not auto added to a cat or group you don't want to be in.\n+\n+  - can_revoke_c bool,  or  can_suspend_c â€” can suspend/ban pats from a cat?\n+                                1: can prevent editing others' stuff e.g. wikis,\n+                                2: can prevent posting,\n+                                3: can prevent seeing others' posts (only one's own)\n+                                4: can prevent seeing others' and own posts.\n+          may revoke permissions, and undo, but not add new people.\n+\n+ (- granted_by_id_c  ? so a manager can un-grant perms or un-invite someone hen\n+                        granted-perms-to or invited, recently?\n+  - granted_at_c  ?   Or is it better to look up in the audit log ?\n+  )\n+\n+\n+ (s = site)\n+\n+group_participants3  â€”â€”>  pat_rels_t   (or  pat_pat_rels_t ?)\n+--------------------------------------------------------------------------\n+        site_id        | integer\n+        group_id       | integer\n+        participant_id | integer\n+       (true_id_c ?)\n+\n+ pat    is_member      | boolean\n+        â€”> member_status_c?:  null/0 = not member, 1 = invited, 2 = member,\n+                              3 = suspended, 4 = banned?\n+                (or better keep in separate columns, or the invites_t (invites3).)\n+\n+ pat    is_manager     | boolean   REN to  can_manage ?\n+ pat    is_adder       | boolean   REN to  can_invite ?\n+ pat    is_bouncer     | boolean   REN to  can_suspend (from group) ?\n+\n+\n+invites3\n+--------------------------------------------------------------------------\n+          site_id         | integer\n+          secret_key      | character varying\n+          email_address   | character varying\n+          created_by_id   | integer\n+          created_at      | timestamp without time zone\n+          accepted_at     | timestamp without time zone\n+          user_id         | integer\n+          (true_id_c ?)\n+          deleted_at      | timestamp without time zone\n+          deleted_by_id   | integer\n+          invalidated_at  | timestamp without time zone\n+          start_at_url    | character varying\n+          add_to_group_id | integer\n+\n+\n+notifications3\n+--------------------------------------------------------------------------\n+          site_id              | integer\n+          notf_type            | smallint\n+          created_at           | timestamp without time zone\n+          about_page_id_str_c  | character varying\n+          by_user_id           | integer\n+          to_user_id           | integer\n+             for anons:  to_user_id = one's true id.\n+             for pseudonyms, then what?\n+             Will want to look up sometimes by pseudonym, sometimes by true id and see all notfs.\n+             add: to_ false_id_c/ If to an anon or pseudonym?\n+             or:  via_pat_id_c = ... this'd be the anon or pseudonym id\n+                      â€” or group id? (if got a notf because of being a member of a group)\n+             But what if the notf is to one's pseudonym which has been added to a group?\n+             Therefore, maybe:\n+                  to_ true_id_c = __    â€” one's main account\n+                  to_false_id_c (or \"to_pseudonym_id_c\"?) = __    â€” one's anon/pseudonym account\n+                  via_group_id_c =      â€” if got it e.g. because in a group that was @mentioned?\n+\n+                  (\"Via\"? â€”Â \"'Sender Name' via Group-Name\"  is standard terminology, used by Gmail\n+                  e.g. if there's some sender email domain mismatch:\n+                  https://support.google.com/mail/answer/1311182?hl=en#zippy=%2Ci-see-via-and-a-website-name-next-to-the-senders-name\n+                  )\n+\n+          email_id             | character varying\n+          email_status         | smallint\n+          seen_at              | timestamp without time zone\n+          about_post_id_c      | integer\n+          action_type          | smallint\n+          action_sub_id        | smallint\n+          notf_id              | integer\n+          smtp_msg_id_prefix_c | smtp_msg_id_out_prefix_d\n+          about_page_id_int_c  | page_id_d__later\n+          about_pat_id_c       | pat_id_d\n+          about_cat_id_c       | cat_id_d\n+          about_tag_id_c       | tag_id_d\n+          about_thing_type_c   | thing_type_d\n+          about_sub_type_c     | sub_type_d\n+\n+\n+\n+users3 â€”â€”> pats_t\n+--------------------------------------------------------------------------\n+ s      is_admin                              | boolean\n+ s      is_owner                              | boolean\n+ server is_superadmin                         | boolean\n+ rm     email_for_every_new_post              | boolean\n+ s,c?   is_approved                           | boolean\n+ s,c?   suspended_at                          | timestamp\n+        is_moderator â€”> trust_level: mod\n+        locked_trust_level\n+ s,c    knowledle_level_c â€” how much hen knows about whatever is in a category or sub community.\n+            trust_level is different: the combo of good judgement (sometimes\n+            saying \"I don't know\") and good intentions.\n+            Trust level is a personality trait, whilst knowledle_level_c\n+            can be knowledge area specific.\n+        threat_level,  locked_threat_level  â€”  lack-of-a-good-judgement + bad-intentions combo.\n+                                               site wide / personality trait.\n+        tech_level_c â€” personal, site wide.\n+\n+ s,c    may_see_my_activity_tr_lv_c           | integer\n+\n+ s,c    max_upload_bytes_c                    | integer\n+ s,c    allowed_upload_extensions_c           | character\n+\n+ s      may_search_engines_index_me_c         | boolean\n+ s,g+c? may_see_my_username_tr_lv_c           | trust_level_or_staff_d\n+ s,g+c? may_see_my_full_name_tr_lv_c          | trust_level_or_staff_d\n+ s,g+c? may_see_my_tiny_avatar_tr_lv_c        | trust_level_or_staff_d\n+ s,g+c? may_see_my_medium_avatar_tr_lv_c      | trust_level_or_staff_d\n+ s,g    may_see_my_brief_bio_tr_lv_c          | trust_level_or_staff_d\n+ s,g    may_see_my_full_bio_tr_lv_c           | trust_level_or_staff_d\n+ s,g    may_see_my_memberships_tr_lv_c        | trust_level_or_staff_d\n+ s,g    may_see_my_profile_tr_lv_c            | trust_level_or_staff_d\n+ s,g+c? may_see_me_in_lists_tr_lv_c           | trust_level_or_staff_d\n+ s      may_see_if_im_online_tr_lv_c          | trust_level_or_staff_d\n+ s,g+c? may_see_my_visit_stats_tr_lv_c        | trust_level_or_staff_d\n+ s,g+c? may_see_my_post_stats_tr_lv_c         | trust_level_or_staff_d\n+ s,g+c? may_see_my_approx_stats_tr_lv_c       | trust_level_or_staff_d\n+ s,g+c? may_see_my_exact_stats_tr_lv_c        | trust_level_or_staff_d\n+ s      may_find_me_by_email_tr_lv_c          | trust_level_or_staff_d\n+ s,g+c? may_follow_me_tr_lv_c                 | trust_level_or_staff_d\n+ s,g+c? may_mention_me_tr_lv_c                | trust_level_or_staff_d\n+ s,g+c? may_mention_me_same_disc_tr_lv_c      | trust_level_or_staff_d\n+ s      may_dir_msg_me_tr_lv_c                | trust_level_or_staff_d\n+ s      why_may_not_mention_msg_me_html_c     | text_nonempty_ste500_trimmed_d\n+ s      may_see_my_account_email_adrs_tr_lv_c | trust_level_or_staff_d\n+ s      may_see_my_contact_email_adrs_tr_lv_c | trust_level_or_staff_d\n+ g+c    may_assign_me_tr_lv_c                 | trust_level_or_staff_d\n+ g+c    may_see_my_assignments_tr_lv_c        | trust_level_or_staff_d\n+ s      email_threading_c                     | i16_gz_lt1024_d\n+ s,c?   email_notf_details_c                  | i16_gz_lt1024_d\n+ s      true_id_c                             | member_id_d\n+ s      pseudonym_status_c                    | pseudonym_status_d\n+ page   anonym_status_c                       | anonym_status_d\n+ page   anon_on_page_id_st_c                  | page_id_st_d\n+ page   anon_on_page_id_c                     | page_id_d__later\n+\n+\n+Åµ  Å—  Åµ  Åµ  Â¯Ì…     â€¾â€¾â€¾â€¾â€¾â€¾Â¯â€¾ â€¾   aâ€¾bÂ¯  Â¯\n+â€¾  = ctrl+shift+u203e\n+\n+\n+perms_on_pages3  â€”â€”>  perms_on_nodes_t\n+--------------------------------------------------------------------------\n+         site_id                 | integer\n+         perm_id                 | integer\n+         for_people_id    (? rename to `for_ true_id_c` ?)\n+       + as_pseudonym_id  (permission to do sth, iff one has this pseudonym activated)\n+\n+       /â€¾on_whole_site           | boolean\n+ node /  on_category_id          | integer\n+  id? \\  on_page_id              | character varying\n+       \\_on_post_id              | integer\n+         on_tag_id               | integer\n+\n+ c,p     may_edit_page           | boolean\n+ c,p,po  may_edit_comment        | boolean\n+ c,p,po  may_edit_wiki           | boolean\n+ c,p,po  may_edit_own            | boolean\n+ c,p     may_delete_page         | boolean\n+ c,p,po  may_delete_comment      | boolean\n+ c,proj  may_create_page         | boolean\n+ c,p     may_post_comment        | boolean\n+ c,p,po  may_see                 | boolean\n+ c,p,po  may_see_own             | boolean\n+ c,p,po  may_see_private_flagged | boolean\n+\n+\n+\n+settings3\n+--------------------------------------------------------------------------\n+        site_id                               | integer not null\n+        category_id                           | integer\n+        page_id                               | character\n+ s      user_must_be_auth                     | boolean\n+ s      user_must_be_approved                 | boolean\n+ s      allow_guest_login                     | boolean\n+ s,c?   num_first_posts_to_review             | smallint\n+ s,c?   num_first_posts_to_approve            | smallint\n+ s,c?   max_posts_pend_appr_before            | smallint\n+ s,c?   head_styles_html                      | character\n+ s,c?   head_scripts_html                     | character\n+ s,c?   end_of_body_html                      | character\n+ s,c?   header_html                           | character\n+ s,c?   footer_html                           | character\n+ s,cat  horizontal_comments                   | boolean\n+ s,c?   social_links_html                     | character\n+ s      logo_url_or_html                      | character\n+ s      org_domain                            | character\n+ s      org_full_name                         | character\n+ s      org_short_name                        | character\n+ s      contrib_agreement                     | smallint\n+ s      content_license                       | smallint\n+ s      google_analytics_id                   | character\n+ s      experimental                          | boolean\n+ s      many_sections                         | boolean\n+ s,c?   html_tag_css_classes                  | character\n+ s,c?   num_flags_to_hide_post                | integer\n+ s      cooldown_minutes_after_flagged_hidden | integer\n+ s      num_flags_to_block_new_user           | integer\n+ s      num_flaggers_to_block_new_user        | integer\n+ s      notify_mods_if_user_blocked           | boolean\n+ rm     regular_member_flag_weight            | real\n+ rm     core_member_flag_weight               | real\n+ s      invite_only                           | boolean\n+ s      allow_signup                          | boolean\n+ s      allow_local_signup                    | boolean\n+ s,c?   show_categories                       | boolean\n+ s,c?   show_topic_filter                     | boolean\n+ s,c?   show_topic_types                      | boolean\n+ s,c?   select_topic_type                     | boolean\n+ s,cat  forum_main_view                       | character\n+ s,cat  forum_topics_sort_buttons             | character\n+ s,cat  forum_category_links                  | character\n+ s,cat  forum_topics_layout                   | integer\n+ s,cat  forum_categories_layout               | integer\n+ s      require_verified_email                | boolean\n+ s      may_compose_before_signup             | boolean\n+ s      may_login_before_email_verified       | boolean\n+ s      double_type_email_address             | boolean\n+ s      double_type_password                  | boolean\n+ s      beg_for_email_address                 | boolean\n+ s      allow_embedding_from                  | character\n+ s      show_sub_communities                  | boolean\n+ s      language_code                         | character\n+ s      enable_google_login                   | boolean\n+ s      enable_facebook_login                 | boolean\n+ s      enable_twitter_login                  | boolean\n+ s      enable_github_login                   | boolean\n+ s      email_domain_blacklist                | character\n+ s      email_domain_whitelist                | character\n+ s      show_author_how                       | smallint\n+ s,c?   watchbar_starts_open                  | boolean\n+ s      favicon_url                           | character\n+ s,c?   enable_chat                           | boolean\n+ s      enable_direct_messages                | boolean\n+ s      feature_flags                         | character\n+ s      enable_sso                            | boolean\n+ s      sso_url                               | character\n+ s      sso_not_approved_url                  | character\n+ s      expire_idle_after_mins                | integer\n+ s      enable_gitlab_login                   | boolean\n+ s      enable_linkedin_login                 | boolean\n+ s      enable_vk_login                       | boolean\n+ s      enable_instagram_login                | boolean\n+ s      enable_forum                          | boolean\n+ s      enable_api                            | boolean\n+ s      enable_tags                           | boolean\n+ rm     embedded_comments_category_id         | integer\n+ s      terms_of_use_url                      | character\n+ s      privacy_url                           | character\n+ s,subc rules_url                             | character\n+ s      contact_email_addr                    | character\n+ s      contact_url                           | character\n+ s,c?   enable_stop_forum_spam                | boolean\n+ s      send_email_to_stop_forum_spam         | boolean\n+ s      enable_akismet                        | boolean\n+ s      send_email_to_akismet                 | boolean\n+ s      akismet_api_key                       | character\n+ s,c?   enable_similar_topics                 | boolean\n+ s      sso_login_required_logout_url         | character\n+ s,cat  discussion_layout                     | integer        pers_pref: layout\n+ s,cat  disc_post_nesting                     | integer        pers_pref: layout\n+ s,cat  disc_post_sort_order                  | integer        pers_pref: layout\n+ s,cat  progress_layout                       | integer\n+ s,cat  progr_post_nesting                    | integer\n+ s,cat  progr_post_sort_order                 | integer\n+ s,cat  orig_post_reply_btn_title             | character\n+ s,cat  orig_post_votes                       | integer\n+ s      enable_cors                           | boolean\n+ s      allow_cors_from                       | character\n+ s      allow_cors_creds                      | boolean\n+ s      cache_cors_prefl_secs                 | integer\n+ s,c?   nav_conf                              | jsonb\n+ s,c?   start_of_body_html                    | character\n+ s,c?   appr_before_if_trust_lte              | smallint\n+ s,c?   review_after_if_trust_lte             | smallint\n+ s,c?   max_posts_pend_revw_aftr              | smallint\n+ s      enable_custom_idps                    | boolean\n+ s      use_only_custom_idps                  | boolean\n+ s,c?   emb_com_sort_order_c                  | integer\n+ s,c?   emb_com_nesting_c                     | integer\n+ s,c?   enable_disagree_vote_c                | boolean\n+ s      sso_logout_redir_url_c                | http_url_d\n+ s      sso_show_emb_authn_btns_c             | i16_gez_d\n+ s      sso_paseto_v2_loc_secret_c            | key_hex_b64us_d\n+ s      sso_paseto_v2_pub_pub_key_c           | key_hex_b64us_d\n+ s      sso_refresh_authn_token_url_c         | http_url_d\n+ s      remember_emb_sess_c                   | i16_gez_d        pers_pref: security. Move to  pats_t?\n+ s      expire_idle_emb_sess_after_mins_c     | i32_gez_d\n+ s      outbound_emails_from_name_c           | email_name_d\n+ s      outbound_emails_from_addr_c           | email_d\n+ s      outbound_emails_reply_to_c            | email_d\n+ s      outbound_emails_smtp_conf_c           | jsonb\n+ s      commonmark_conf_c                     | jsonb_ste4000_d\n+ s,cat  enable_anon_posts_c                   | boolean\n+        Indexes:\n+            \"settings3_site_category\" UNIQUE, btree (site_id, category_id) WHERE category_id IS NOT NULL\n+            \"settings3_site_page\" UNIQUE, btree (site_id, page_id) WHERE page_id IS NOT NULL\n+            \"settings3_siteid__u\" UNIQUE, btree (site_id) WHERE page_id IS NULL AND category_id IS NULL\n+            \"settings3_site__i\" btree (site_id)\n+\n+\n+categories3\n+--------------------------------------------------------------------------\n+        site_id                      | integer\n+        id                           | integer\n+        page_id                      | character varying\n+        parent_id                    | integer\n+        name                         | character varying\n+        slug                         | character varying\n+        position                     | integer\n+        description                  | character varying\n+ cat    new_topic_types              | character varying\n+        created_at                   | timestamp\n+        updated_at                   | timestamp\n+ s,c,p  locked_at                    | timestamp\n+ s,c,p  frozen_at                    | timestamp\n+ c,p    deleted_at                   | timestamp\n+ c,p    unlist_category              | boolean\n+ rm     staff_only                   | boolean\n+ rm     only_staff_may_create_topics | boolean\n+ c,proj default_topic_type           | smallint\n+ c,proj default_category_id          | integer\n+ c,p    incl_in_summaries            | smallint            pers_pref: excl/incl cat in summaries\n+ c,proj unlist_topics                | boolean\n+        ext_id                       | character varying\n+ c,proj def_sort_order_c             | page_sort_order_d   pers_pref: layout\n+ c,proj def_score_alg_c              | i16_gez_d\n+ c,proj def_score_period_c           | trending_period_d\n+ c,proj do_vote_style_c              | do_vote_style_d\n+ c,proj do_vote_in_topic_list_c      | boolean\n+ c,p    comt_order_c                 | comt_order_d        pers_pref: layout\n+ c,p    comt_nesting_c               | max_nesting_d       pers_pref: layout\n+ x      anon_ops_c                   | never_alowd_recd_always_d\n+ x      anon_comts_c                 | never_alowd_recd_always_d\n+ x      deanon_pages_aft_mins_c      | i16_gz_d\n+ x      deanon_posts_aft_mins_c      | i16_gz_d\n+\n+\n+\n+pages3\n+--------------------------------------------------------------------------\n+          site_id                | integer\n+          page_id                | character varying(32)\n+          page_role              | smallint\n+ s,c,p    category_id            | integer\n+          created_at             | timestamp\n+          updated_at             | timestamp\n+ c?,p     published_at           | timestamp\n+          bumped_at              | timestamp\n+          author_id              | integer\n+ c-,proj  -stat  num_child_pages | integer\n+ p        embedding_page_url     | character varying\n+ pstat    num_likes              | integer\n+ pstat    num_wrongs             | integer\n+ c,p      deleted_at             | timestamp\n+ pstat    num_replies_visible    | integer\n+ pstat    num_replies_to_review  | integer\n+ pstat    num_replies_total      | integer\n+ c,p      num-replies-last-NN-days\n+ pstat    num_bury_votes         | integer\n+ pstat    num_unwanted_votes     | integer\n+ pstat    last_reply_at          | timestamp\n+ c,p      pin_order              | smallint\n+ c,p      pin_where              | smallint          pers_pref: unpin\n+ pstat    num_op_like_votes      | integer\n+ pstat    num_op_wrong_votes     | integer\n+ pstat    num_op_bury_votes      | integer\n+ pstat    num_op_unwanted_votes  | integer\n+ pstat    num_op_replies_visible | integer\n+ pstat    answered_at            | timestamp\n+ pstat    answer_post_id         | integer\n+ c,p      done_at                | timestamp\n+ c,p      closed_at              | timestamp\n+ c,p      locked_at              | timestamp\n+ c,p      frozen_at              | timestamp\n+ p        unwanted_at            | timestamp\n+ p        planned_at             | timestamp\n+ p        version                | integer\n+ pstat    last_reply_by_id       | integer\n+ pstat    frequent_poster_1_id   | integer\n+ pstat    frequent_poster_2_id   | integer\n+ pstat    frequent_poster_3_id   | integer\n+ pstat    frequent_poster_4_id   | integer\n+ c,p      html_tag_css_classes   | character varying\n+ c,p      html_head_title        | character varying\n+ c,p      html_head_description  | character varying\n+ c,p      layout                 | bigint              pers_pref: layout\n+ p        hidden_at              | timestamp\n+ c,p      incl_in_summaries      | smallint            pers_pref: emails\n+ p        started_at             | timestamp\n+ p        postponed_til_c        | timestamp\n+ p        num_posts_total        | integer\n+ c,p      ext_id                 | character varying\n+ pstat    num_op_do_it_votes_c   | i32_gez_d\n+ pstat    num_op_do_not_votes_c  | i32_gez_d\n+ p,po     answered_by_id_c       | integer  â€”> solved_status_c: solved_status_d\n+ p,po     published_by_id_c      | integer  â€” change to  not_yet_published_c: bool ?\n+ p,po     postponed_by_id_c      | integer\n+ p,po     planned_by_id_c â€¾â€¾\\\n+ p,po     started_by_id_c    >  doing_status_c: planned, started, paused, done?\n+ p,po     paused_by_id_c    /\n+ p,po     done_by_id_c   __/\n+ c?,p,po  closed_by_id_c â€¾â€¾â€¾\\\n+ c?,p,po  locked_by_id_c     >  closed_status_c:  colsed, locked, frozen\n+ c?,p,po  frozen_by_id_c ___/\n+ p        unwanted_by_id_c       | integer\n+ p        hidden_by_id_c         | integer\n+ c,p      deleted_by_id_c        | integer\n+ s,c,p    forum_search_box_c     | i16_gz_d\n+ s,c,p    forum_main_view_c      | i16_gz_d\n+ s,c,p    forum_cats_topics_c    | i32_gz_d\n+ s,c,p    comt_order_c           | comt_order_d\n+ s,c,p    comt_nesting_c         | max_nesting_d\n+\n+\n+page_users3\n+--------------------------------------------------------------------------\n+           site_id                       | integer\n+           page_id                       | character varying\n+           user_id                       | integer\n+ rm:c,p,po joined_by_id â€” instead, perms_on_nodes_t.can_see_c = true\n+ rm        kicked_by_id                  | integer\n+ rm        notf_level                    | smallint      pers_pref: notf\n+ rm        notf_reason                   | smallint      pers_pref: notf\n+ stat      num_seconds_reading           | integer\n+ stat      num_low_posts_read            | smallint\n+ stat      first_visited_at_mins         | integer\n+ stat      last_visited_at_mins          | integer\n+ stat      last_viewed_post_nr           | integer\n+ stat      last_read_at_mins             | integer\n+ stat      last_read_post_nr             | integer\n+ stat      recently_read_nrs             | bytea\n+ stat      low_post_nrs_read             | bytea\n+ c,p,po    incl_in_summary_email_at_mins | integer       pers_pref: emails\n+\n+\n+posts3\n+--------------------------------------------------------------------------\n+        site_id                  | integer\n+        unique_post_id           | integer\n+        page_id                  | character varying\n+ po     post_nr                  | integer\n+ po     parent_nr                | integer\n+ po     multireply               | character varying\n+        created_at               | timestamp\n+        created_by_id            | integer\n+ jn     curr_rev_started_at      | timestamp\n+ jn     curr_rev_last_edited_at  | timestamp\n+ po     curr_rev_by_id           | integer\n+ jn     last_approved_edit_at    | timestamp\n+ po     last_approved_edit_by_id | integer\n+ postat num_distinct_editors     | integer\n+ postat num_edit_suggestions     | smallint\n+ jn     last_edit_suggestion_at  | timestamp\n+ po     safe_rev_nr              | integer\n+ po     approved_source          | text\n+ po     approved_html_sanitized  | text\n+ jn     approved_at              | timestamp\n+ po     approved_by_id           | integer\n+ po     approved_rev_nr          | integer\n+ po     curr_rev_source_patch    | text\n+ po     curr_rev_nr              | integer\n+ po     collapsed_status         | smallint           pers_pref\n+ jn     collapsed_at             | timestamp\n+ jn     collapsed_by_id          | integer\n+ c,p,po closed_status            | smallint\n+ jn     closed_at                | timestamp\n+ jn     closed_by_id             | integer\n+ jn     hidden_at                | timestamp\n+ jn     hidden_by_id             | integer\n+ p,po   hidden_reason            | character varying\n+ p,po   deleted_status           | smallint\n+ jn     deleted_at               | timestamp\n+ jn     deleted_by_id            | integer\n+ c,p,po pinned_position          | smallint           pers_pref: unpin?\n+ jn     pinned_at                | timestamp\n+ jn     pinned_by_id             | integer\n+ postat num_pending_flags        | smallint\n+ postat num_handled_flags        | smallint\n+ postat num_like_votes           | integer\n+ postat num_wrong_votes          | integer\n+ postat num_times_read           | integer\n+ postat num_bury_votes           | integer\n+ postat num_unwanted_votes       | integer\n+ po     type                     | post_type_d\n+ po     prev_rev_nr              | integer\n+ po     branch_sideways          | smallint           pers_pref: layout. But depends on one's device\n+        ext_id                   | character varying\n+ po     smtp_msg_id_prefix_c     | smtp_msg_id_out_prefix_d\n+ rm     owners_id_c              | pat_id_d\n+ rm     authors_id_c             | pat_id_d\n+ rm     private_pats_id_c        | pat_id_d\n+ po     sub_type_c               | sub_type_d\n+ p?,po  val_i32_c                | i32_d\n+ p,po   postponed_status_c       | postponed_status_d\n+ p,po   answered_status_c        | answered_status_d\n+ p,po   doing_status_c           | doing_status_d\n+ p,po   review_status_c          | review_status_d\n+ p,po   unwanted_status_c        | unwanted_status_d\n+ p,po   flagged_status_c         | flagged_status_d\n+ p,po   hidden_status_c          | hidden_status_d\n+ c,p,po index_prio_c             | index_prio_d\n+\n+\n+ c,p,po anon:  pers_pref   privacy\n+\n+\n+\n+post_actions3\n+--------------------------------------------------------------------------\n+          site_id          | integer\n+ rm       action_id        | integer\n+ rel      to_post_id_c     | integer\n+ rel      page_id          | character varying\n+ rel      post_nr          | integer\n+ rel      rel_type_c       | pat_rel_type_d\n+ rel      sub_type_c       | smallint\n+ rel      from_pat_id_c    | integer\n+ rename   created_at  to  added_at_c\n+ jn       updated_at       | timestamp\n+ *        deleted_at       | timestamp\n+ jn       deleted_by_id    | integer\n+ rel      to_post_rev_nr_c | rev_nr_d\n+ p,po,rel dormant_status_c | dormant_status_d\n+          val_i32_c        | i32_d\n+ p,rel    show_pat_id_c    | pat_id_d\n+ rel      added_by_id_c    | pat_id_d\n+\n+\n+\n+tagtypes_t  â€” better of staying in their own table? (don't incl in nodes_t)\n+--------------------------------------------------------------------------\n+              site_id_c                | integer\n+              id_c                     | i32_gz_d\n+ tty          can_tag_what_c           | thing_types_d\n+ tty          scoped_to_pat_id_c       | integer\n+ tty          is_personal              | boolean\n+ tty,cat,page url_slug_c               | url_slug_60_d\n+ tty,cat      disp_name_c              | tag_name_60_d\n+ tty          long_name_c              | tag_name_120_d\n+ tty,cat?     abbr_name_c              | tag_name_15_d\n+ self         descr_page_id_c          | text\n+ self         descr_url_c              | http_url_d\n+ tty,cat,pat  text_color_c             | color_d\n+ tty          handle_color_c           | color_d\n+ tty,cat,pat  background_color_c       | color_d\n+ tty,cat,pat  css_class_suffix_c       | html_class_suffix_30_d\n+ tty,cat      sort_order_c             | i16_d\n+ tty,jn       created_by_id_c          | integer\n+ tty,jn       deleted_by_id_c          | integer\n+ tty          merged_into_tagtype_id_c | integer\n+ tty          merged_by_id_c           | integer\n+\n+\n+tags_t\n+--------------------------------------------------------------------------\n+            site_id_c       | integer\n+            id_c            | i32_gz_d\n+ tag,post   tagtype_id_c    | integer\n+ tag,post   parent_tag_id_c | integer\n+ tag        on_pat_id_c     | integer\n+ tag        on_post_id_c    | integer\n+\n+"
    },
    {
      "sha": "369c6724cc916e714642cc59eff4b213cd66e7b3",
      "filename": "docs/integration-tests-map.txt",
      "status": "removed",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/706b2161759ff1b81dc8f2a598d3e32c3fac8611/docs%2Fintegration-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/706b2161759ff1b81dc8f2a598d3e32c3fac8611/docs%2Fintegration-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fintegration-tests-map.txt?ref=706b2161759ff1b81dc8f2a598d3e32c3fac8611",
      "patch": "@@ -1,6 +0,0 @@\n-\n-single sign-on:\n-\n-\n-upsert api:\n-  create chat, two people chat:  \n\\ No newline at end of file"
    },
    {
      "sha": "d0bbc9696995262bd25a3da1eebbc87dffb145d2",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 71,
      "deletions": 1,
      "changes": 72,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -78,11 +78,21 @@ access restricted topics.\n Make site specific errors visible to site admins â€” so no need\n to have Linux root access.\n \n+[logger_everywhere]\n+Pass loggers to the models and rdb Scala modules, so they don't need to use\n+System.stdout/stderr directly.\n+\n [immutable]\n Make all js objs \"light weight immutable\", via Typescript's 'readonly' properties:\n https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties\n (React wants immutable.)\n \n+[add_nodes_t]\n+Merge  posts3, pages3, categories3 and some settings3 columns into:  nodes_t\n+(which will actually be posts3 but renamed, and with some new columns).\n+But most such settings should instead be in:  pat_node_multi_rels_t  (!).\n+See: ./everything-is-a-node.txt\n+\n [subcats] [sub_cats]\n DONE: Implement sub categories.\n But missing: Search in sub cats, if searching in base cat.\n@@ -102,12 +112,15 @@ Also make this work for the root cat? So one can get an overview of permission\n settings for *all* base cats and sub cats in the whole forum â€”Â a cat permissions\n table-tree, somehow. [incl_root_cat]\n \n-[may_not_perms]\n+[may_not_perms] (negative_perms, neg_perms)\n Currently permissions are additive. Maybe, though, in some cases it'd be good\n with \"negative\" permissions â€” e.g. a group that may Not something.\n Then, everyone in that group, would be forbidden from doing that something,\n regardless of how they inherited permissions from other groups.\n \n+[granular_perms]\n+E.g. may-see-others'-sessions. Currently only amdins may, but sometimes, good if mods could too?\n+\n [tags]\n Nice props / tags in Gerrit: https://chromium-review.googlesource.com/c/v8/v8/+/2537690\n \n@@ -163,6 +176,13 @@ Ty joins a new forum. Then, although a New Member, hen can up hens tech level an\n access to features the software otherwise would have thought were too complicated.\n Store in pats_t.tech_level_c.\n \n+[new_trust_levels]\n+[mods_are_core_membs]\n+Let trust level of mods & admins be CoreMember â€” or maybe add higher trust levels?\n+Can start at 21 = lightweight mod, 22 = mod, 23 = admin, 24 = owner?\n+\n+[power_mod]\n+\n [inherit_group_priv_prefs]\n One should inherit privacy and noise settings from one's closest trust level group,\n and from any custom group one is in? But one's own settings should override.\n@@ -259,6 +279,8 @@ And when logging in via email, one gets to choose which account to login to.\n Refactor a bit.\n Search for:  [4KDPREU2], break out fn.\n \n+[save_email]\n+Save invitation emails sent (and other types I forgot?), & any SMTP erors.\n \n [reenable-akismet]:\n For some reason I disabled Akismet (why? when refactoring to save time?). Enable it again.\n@@ -291,10 +313,16 @@ Need an approvalStatus [ApprovedStatus] field?\n Or:  0,1,2 = undec, apr, rej by sys.  4,8,16 by trusted,  core member,  32,64,128 by staff  ?\n    bits 1,2                           3,4                 5,6           7,8\n \n+[7YKU24] UNPOLITE SHOULD stop auto approving chat messages.\n+\n [flat-comments]:\n Change layout of problem type topics to traditional forum flat comments layout.\n & use for formal messages too, or maybe repl w chat?\n \n+[threaded_chat]\n+A chat with indentation depth  > 1, would be threaded? Not yet supported, but why would be\n+interesting to try.\n+\n [editor-drafts]:\n When starting a new topic, or editing a post, ask \"Continue editing draft? [Yes, resume draft] [No, ignore draft (but keep it)]\"\n instead of always opening the old draft. Because otherwise sometimes old edits I didn't want, reappears.\n@@ -320,6 +348,28 @@ discovery of pages & people by iterating through all ids in the url.\n [custom-groups]\n Search for that tag.\n \n+[pseudonyms_later][pseudonyms_trust]\n+\n+[auto_deanon]\n+[auto_show_replies]\n+Needs: [add_triggers_t]\n+\n+[deanon_risk]\n+\n+[anon_pages]\n+\n+[anon_priv_msgs][anon_chats]\n+Not now.\n+\n+[many_anons_per_page]\n+\n+[sql_true_id_eq]\n+Look at later, realted to anonyms and pseudonyms (looking up on both true id & anon id).\n+\n+[assign_anon]\n+\n+[assign_comments]\n+\n [subcomms] [sub_communities]\n Improve sub communities, e.g. selecting a category across all sub communities,\n not only the current one.\n@@ -508,6 +558,12 @@ Assign topics and posts to people. (Not only whole topics, but also comments/sub\n Why assign a post? Because someone might ask a good question, in a longer discussion, and nice\n to know & remember who will try to answer it, later.\n \n+[assignees_badges]\n+If listing assignees, should any badges of theirs be shown too? (Currently aren't.)\n+\n+[can_see_assigned_c]\n+New permission.\n+\n [priv_comts] Private comments:\n (Aka \"whispers\" in Discourse and \"private items\" in Basecamp long ago, and \"private comments\"\n in other software.)\n@@ -662,6 +718,11 @@ Let people combine both custom OIDC IDPs with Ty SSO â€”Â that's just\n fine, some time large organization have more than one authn system,\n or they invite external collaborators with other authn systems.\n \n+[paseto_broken]\n+Now paseto.js has stopped working, so the related e2e tests fail. Switch to another\n+PASETO lib. See:\n+    ../tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt\n+\n DONE [blog_comments_sso]  emb_sso\n Use PASTEO https://news.ycombinator.com/item?id=17877332\n  http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-fo...\n@@ -793,6 +854,8 @@ Do outside tx.\n [double_tx]  COULD_OPTIMIZE\n Read-only tx in tx is ok but unnecessary, a tiny bit slower & more mem.\n \n+[cache in tx] USE_StaleStuff_INSTEAD\n+\n [update_warmup_json]\n \n COULD_OPTIMIZE\n@@ -814,6 +877,8 @@ Migrate unnecessary Route({ ... render: ({ match }) => ...) to hooks:\n https://reacttraining.com/blog/react-router-v5-1/\n But rename useParams to useUrlParams !?\n \n+[react_components]\n+Migrate from se https://mantine.dev/?\n \n [webhooks_todo]\n If endpoint seems broken, send emails to admins, after a while. [notf_adm_broken_webhook]\n@@ -826,6 +891,8 @@ Sign.\n [improve_imp_exp]\n Remove fk from notfs_t to emails_out_t?\n \n+[per_pat_api_secrets]\n+Optional per ordinary user API secrets, e.g. personal bot?\n \n [extensions] [themes]\n Needs new table: t_extensions\n@@ -950,6 +1017,9 @@ So, it'll be OK to make changes in Ty that otherwise would have been deemed too\n Ty v1 removes some deprecated things, e.g.: Remove class ed.server.EdAppLoader (everyone\n needs to remove `play.application.loader= ed.server.EdAppLoader` from the Play conf file)\n \n+Docker volumes instead of bind mounts, see e.g.:\n+  https://stackoverflow.com/questions/23544282/what-is-the-best-way-to-manage-permissions-for-docker-shared-volumes\n+\n Rename Silhouette authn settings to talkyard.authn.____  instead?\n Require that the old conf vals be removed (log helpful errors.)\n "
    },
    {
      "sha": "7ea97b623f840d2455bfd573a838b22a1f389bb6",
      "filename": "docs/maybe-refactor.txt",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fmaybe-refactor.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Fmaybe-refactor.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-refactor.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -21,3 +21,8 @@ or category access permissions change (less access) or trust level demoted.)\n \n [flags_as_posts]\n Move flags from post_actions_t to posts_t instead, with PostType.Flag.\n+\n+Everything is a node: Comments, pages, categories, root categories,\n+and category 0, the site itself.\n+\n+See ./everything-is-a-node.txt ."
    },
    {
      "sha": "2839107a5a43de404f1b237669bcabecde675d28",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 79,
      "deletions": 3,
      "changes": 82,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -253,6 +253,21 @@ impersonate:\n           - impersonate-post-as-other.2browsers  TyT502KNG24\n           - impersonate-restricted-areas.test.ts  TyT6502PKSNR57\n \n+anonymous comments,\n+anons:\n+  partly impl:\n+            - tests/app/debiki/dao/AnonymAppSpec.scala\n+  TESTS_MISSING:\n+            - Anons for drafts, UNTSETED.\n+            - Load anon drafts, restore as anon. TyTANONDFLOAD\n+            - Cannot move anon post to other page.  TyTMOVANONCOMT\n+            - Notfs from anons, don't include real user name  TyTNOTFFROMANON\n+            - UNTESTED; TESTS_MISSING // exp imp anons?  True ids are incl in json dumps?\n+            - Different anon statuses: Comts start anon / NeverAlways.AlwaysButCanContinue / etc\n+            - Edit & update the draft.  TyTEDUPDDFT04\n+            - Save anon draft, reuse an anon.  TyTDFTREUSEANON.\n+            - ... and more\n+\n different users -\n   login, logout, switch user:  almost all tests\n \n@@ -307,6 +322,14 @@ navigation:\n   from page to one's active sessions list:\n             - d.sessions-logout-elsewhere.4br  TyTESESLGOSELF\n \n+about user dialog,\n+about pat box:\n+  see groups:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTSEEPATSGROUPS\n+  see email addr:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTABOUTBOXEML\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTHIDELOCALEMLPART\n+\n profile page, user:\n   upload photo:  (8PK2)\n   edit full name:\n@@ -328,12 +351,24 @@ profile page, user:\n   list login methods:\n           - create-site-github-oauth-uppercase-email.test.ts  TyT4AR8GFAH\n \n+  configure who can see email addrs:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTCANCONFSEEML\n+  see email addresses:\n+    can/not see email addr\n+      in about box,\n+      on profile page,\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01\n+    can navigate to email addrs tab, iff can see pat's emails:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyT0ACSPREFS01\n+\n   add email address, send verification email:\n           - user-profile-change-email.test.ts  TyT305MHPJ25\n   add gmail addr:\n \n   rename guest:\n           - TESTS_MISSING\n+  see (parts of) task list:\n+            - assign-to-basic.2br.d  TyTASSIGN01.TyTASGNPERMS01\n   delete pat:\n     delete guest:\n     delete user:\n@@ -354,6 +389,10 @@ profile page, a group:\n           - group-mentions-custom-group.2browsers.test.ts  TyT5BMRP2058\n           - user-self-delete-upd-groups.2browsers.test.ts  TyT6DMSNW3560\n           - permissions-edit-wiki-posts.2browsers.test.ts  TyT603RKDEJ46\n+  see permission settings:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyT0ACCESSPERMS04\n+    settings disabled, unless is admin:\n+            - may-see-email-adrs.2br.d  TyTSEEEMLADRS01.TyTCANCONFSEEML\n \n groups:\n   list members:\n@@ -384,10 +423,10 @@ groups:\n security:\n   access denied,\n   not found page, 404:\n-          - group-permissions-similar-topics.2browsers.test.ts  TyT05BMRSH2J TyT406AK24\n-          - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n+            - group-permissions-similar-topics.2browsers.test.ts  TyT05BMRSH2J TyT406AK24\n+            - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n   api get topics in restr cat:\n-          - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n+            - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n   api list restriceted category:\n             - api-list-query-for-topics-popular-first.test.ts  TyT603AKSL25.TyT502RKDJ46\n   api search restricted categories and private topics:\n@@ -410,6 +449,11 @@ security:\n             - embcom.comment-counts.2br.cors.test.ts   TyTE2ECOMCOUNTS\n             - embcom.manyframes.comment-counts.2br.cors  TyTE2EMNYFRCOMCNTS\n   categories: see (1QRY7)\n+  see other's tasks:\n+            - assign-to-basic.2br.d  TyTASSIGN01.TyTASGNPERMS01\n+  task list won't show tasks (pages) one can't see,\n+  can't assign a task to sbd who can't see it:\n+            - assign-can-see.2br.d  TyTASSIGNCANSEE\n \n deleted users:  [.del_susp_usr]\n             - SEC_TEST_MISSING\n@@ -1312,6 +1356,8 @@ draft: [7WKABZP2]\n   works also if not logged in:\n             - forum-drafts-not-logged-in.2browsers.test.ts  TyT2ABSD73\n             - embcom.drafts-previews-not-logged-in.2br  TyT2ZBKPW048\n+  anonymous drafts: \n+            - TESTS_MISSING\n \n   draft previews, resume and delete: [.dft_pvs]\n     - some TESTS_MISSING if [many_ifr_my_page_data]\n@@ -1329,6 +1375,8 @@ draft: [7WKABZP2]\n     - go to drafts page w editor open, try open other draft:\n     - edit post, save draft, submit edits from other page â€” draft not deleted?\n     - â€“\"\"â€“ but for new reply\n+    - anonymous author preview: \n+            - TESTS_MISSING\n \n   # (reply, chat message, new topic, new(private/publ chat, edits, direct message.)\n   # EditController.edit\n@@ -1341,6 +1389,28 @@ draft: [7WKABZP2]\n   # PagesDao.createPage\n   # PostsDao.insertReply, insertChatMessage, editPostIfAuth\n \n+\n+tasks,\n+assign posts:\n+  basic functionality:\n+            - assign-to-basic.2br.d  TyTASSIGN01\n+  can't assigning sbd who can't see the page,\n+  tasks in cats one can't see, are excluded if viewing sbd's task list:\n+            - assign-can-see.2br.d  TyTASSIGNCANSEE\n+  notifications:\n+            - TESTS_MISSING  TyTASGN0SEEPG\n+  not notified about tasks one can't see:\n+      Expl: if sbd has subscribed to a task page, or\n+      if an assignee can't see hens task (maybe the task got moved to a private cat),\n+      then, if that task gets completed (by sbd else),\n+      they do *not* get any notification email about that.\n+            - TESTS_MISSING\n+  if one has created, or is subscribed to a page, but one may not\n+      see who is assigned (if any), then, one won't get notfications\n+      that show who's assigned:\n+            - TESTS_MISSING\n+\n+\n superadmin -\n   ... lots of stuff ...\n \n@@ -1380,6 +1450,9 @@ notifications:\n             - private-chat.3br.d  TyT2ABKR045\n   about like votes:\n             - notfs-like-votes.2browsers.test.ts  TyTE2E703KDH\n+  about tasks,\n+  about assigned:\n+            - assign-to-basic.2br.d  TESTS_MISSING  TyTASSIGN01\n   via email:  (5ABKR024)\n   mute topic:\n   mute category:\n@@ -1484,6 +1557,9 @@ email notifications:  (5ABKR024)\n             - ... more, which?\n   like votes:\n             - notfs-like-votes.2browsers.test.ts  TyTE2E703KDH\n+  tasks,\n+  assigned:\n+            - TESTS_MISSING\n   unsubscribe:\n             -  (7ABKR023)\n   cannot reply via email to email notifications:"
    },
    {
      "sha": "2092f7c14f2e364c971d5fc7490622cd64ea0d4c",
      "filename": "docs/tyworld.adoc",
      "status": "modified",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Ftyworld.adoc",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/docs%2Ftyworld.adoc",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftyworld.adoc?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -129,6 +129,121 @@ A new post gets a new id and can work as the new id for a new flag of the same t\n (But a person's id stays the same.)\n \n \n+\n+\n+== Anonyms and Pseudonyms\n+\n+=== Anonyms posts\n+\n+When you anonymously, then, a new anonym (anonymous user) is created, for you,\n+to use on that particular page. You can't use it outside that page\n+(instead, another then gets created).  Anon comments cannot be moved to\n+other pages, and aren't visible to others (only to yourself) in the activity\n+list on your user profile page, or in your posts counts. [list_anon_posts]\n+\n+The software remembers if you want to be anonymous or not, per\n+discussion page, by looking at your previous comments in that discussion\n+and sub thread you're replying in â€” because maybe you're using using your\n+real account, in one sub thread, but replying anonymously in another\n+(on the same page).\n+\n+So, you're unlikely to accidentally post using the wrong anonymous account\n+since the software does the right thing automatically.\n+\n+=== Anonymous votes\n+\n+If you've commented anonymously on a page, or the page is anon-by default,\n+then, your votes on that page are anon by default, too\n+(using the same anon account).\n+\n+[anon_votes]\n+\n+=== Anonymous categories\n+\n+Categories can be 1) always-anonymous, or 2) anon by default, or\n+3) real account by default but anon posts allowed. Or 4) anon posts\n+not allowed (only real accounts). Edit: See `[NeverAlways]`.\n+\n+A category can be configured to get _de-anonymized_ after a while (!).\n+That is, say two weeks after a new page has been posted in that category,\n+the real usernames are shown so everyone can see who wrote what.\n+\n+In such categories, before posting, there's an obtrusive info box about this,\n+so everyone will know how it works.\n+\n+=== For the workplace\n+\n+Anonymous categories and de-anonymizing be helpful in the workplace: Posts can\n+start anonymous, for better decision making (when people judge an idea more for\n+what it is, not knowing if it's from a new hire, a friend, their boss or the CEO).\n+\n+And the posts can get deanonymized after some weeks,\n+when the discussion has ended â€” so people can get recognized, eventually,\n+for good ideas they had. (Optionally only posts that got some Like-votes.)\n+\n+=== Pseudonyms\n+\n+Pseudonyms (not implemented `[pseudonyms_later]`) will work differently:\n+\n+You can have only a few pseudonym account, and you switch to one of them,\n+and use it, until you switch back to your real user account.\n+Not so different from signing up using different email addresses\n+â€” however, you don't need to create lots of email addresses and sign up\n+many times and log in and out \"all the time\". Instead, you just click your\n+username menu, and choose \"Switch to pseudonym\".\n+\n+And you get to see notifications for all your pseudonyms, at once\n+(and if you click one, the software suggests that you switch to the related\n+pseudonym, if you want to reply).\n+\n+A pseudonym of yours, can have a different reputation (= trust? knowledge? level)\n+than your main account. Consider a large community, with sub communities and\n+moderators. If you use a pseudonym in one sub community, and the people there\n+are unreasonably happy or angry with what your pseudonym writes, and upvotes\n+your pseudonym's comments surprisingly often or infrequently â€” then, your pseudonym\n+could get a different reputation than your main account. Although you're\n+the same person.  `[pseudonyms_trust]`\n+\n+=== Tech notes\n+\n+Implementation wise, to show notifications from all one's pseudonyms,\n+Talkyard does one lookup per pseudonym. So that's why you cannot\n+have hundereds of pseudonyms (because then this'd be slow).\n+But one's anon comments point directly to your real account, only the\n+`author_id_c` field points to the anonym. Then it's just one lookup,\n+to list all one's anon posts. Hence, no need to restrict how many anon users\n+one can have.\n+\n+Anon posts are implemented by assigning authorship to your anonym user account,\n+for the page in question. But your main account remains the owner, and keeps\n+getting notified of replies.\n+\n+\n+\n+\n+== Post Owners and Authors\n+\n+(Not implemented.)\n+\n+You can assign authorship of a post to someone else.\n+Then, that person's (or people's, or group's) name is shown as the author,\n+and no one sees you originally wrote that post.\n+When doing this, you get to choose if you still want to get notified of replies or not.\n+\n+You can also assign ownership of a post of yours, to someone else.\n+Thereafter, you cannot edit or delete or do anything with the post â€” it's as\n+if that other person had posted it, originally.\n+When doing this, you get to choose if you want to keep getting notified of replies.\n+\n+But when assigning authorship or ownership to someone else,\n+then, for this to take effect, first that other person needs to agree:\n+hen gets a notification, and gets to click a Yes or No button,\n+and gets to choose if hen wants to start getting notified of replies\n+(by default, yes).\n+\n+\n+\n+\n == Forum post statuses\n \n "
    },
    {
      "sha": "ccb23ca518d4f07411afeecad93f0e198c45581b",
      "filename": "modules/ty-translations",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules%2Fty-translations?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1 +1 @@\n-Subproject commit 6a577b80eb147b044e42b11a97b618fe4f764cd5\n+Subproject commit ccb23ca518d4f07411afeecad93f0e198c45581b"
    },
    {
      "sha": "732f3227a3b63e73264261c1eea5de7d9db9b5be",
      "filename": "old/db-skip.sql",
      "status": "modified",
      "additions": 359,
      "deletions": 2,
      "changes": 361,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/old%2Fdb-skip.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/old%2Fdb-skip.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/old%2Fdb-skip.sql?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1,4 +1,4 @@\n-\n+alter table post_actions3\n -- Private comments, don't do like this:\n -- [ EDIT:  ... Actually, yes â€” for private comments but *not* assigned-to.\n --   Because they're different: for private comments, there's just one list of people,\n@@ -65,6 +65,77 @@\n   case object OwnerOf extends PatRelType_later(-1)\n \n \n+-- Don't do like this:\n+--     instead,  this'll be in  perms_on_pages3  = perms_on_nodes_t ?\n+-- 0b0001 = Member / has-it-henself,\n+-- 0b0010 = Bouncer,  *no*,  Revoker, instead?\n+-- 0b0100 = Adder,    *no*,  Granter, instead?\n+-- 0b1000 = Manager,\n+-- create domain rel_perms_d i32_d;\n+-- alter  domain rel_perms_d add\n+--    constraint rel_perms_d_c_bitfield check (value between 1 and 9);\n+      --   1,   -- member / has rel henself\n+      --   2,   -- bouncer  (can remove members)\n+      --   3,   -- bouncer and member\n+      --   4,   -- adder  (can add members)\n+      --   5,   -- adder and member\n+      --   6,   -- adder and bouncer\n+      --   7,   -- adder, bouncer and member\n+      --   8,   -- manager  (can add & remove members)\n+      --   9);  -- manager and member\n+\n+      --   ?    -- group mod? Can moderate comments by others in the group\n+      --   ?    -- group admin? That is, can change group settigns\n+\n+      --   ?    -- see relationship, e.g. see group members?\n+      --   ?    -- see anons? No, cat perm instead?\n+\n+-- Pat-post-rels ex\n+--   Can see private.\n+--     Is private = posts_t (!) status flag.\n+--     Adder/remover = adds private comments thread participants.\n+--\n+--   VotedOn\n+--     Cat perms and page perms determines who can vote?\n+--\n+--   AssignedTo\n+--     Cat perms determines who may assign?\n+--\n+--   AuthorOf\n+--     Adder/remover N/A, instead,  OwnerOf  decides?\n+--\n+--   OwnerOf  *No*. Instead in:  perms_on_pages3 (later renamed to: perms_on_nodes_t)\n+--     No,  perms_on_conts_t â€” for \"content\".  Content? Too long. Let's use \"cont\"\n+--                           short enough, and is a standard abbreviation for content.\n+--         No, \"cont\" is so hard to read, I get confused.\n+--         Instead, \"node\" directly makes me think of a node in the tree structure\n+--         formed by the categories, pages and discussins. Good name. I think. As of now.\n+--         So,  nodes_t.\n+--     Compare:\n+--           pat_node_rels_t   pat_pat_rels_t\n+--         with:\n+--           participant_node_relationships_t   participant_participant_relationships_t\n+--         I think the latter is too long! Takes 3 eye movements to read each of those\n+--         long table names Abbreviations are needed.  And, when abbreviating, why not\n+--         keep it really short? People need to look up the abbreviations once anyway\n+--         in any case (probably not more, since these words are \"everywhere\", hard to\n+--         forget, when getting reminded constantly). So let's go with \"pat\" for\n+--         \"participant\" (already done, in use)  and \"node\" is short already.\n+--         Now, just 1 eye movement needed :- ) (for you too?)\n+--         (I mean, you see the whole table name, if glancing just once in the middle.\n+--         of the table name.)\n+--     Can change author, close, delete, change post type, edit, etc.\n+--     Or should this be in  perms_on_pages3? No, is *per post* always,\n+--     not cat or page or whole site?\n+--     Or, hmm, actually makes sense for those others too? Yes.\n+--     E.g. a package maintainer, being the owner of a cat about that package?\n+--     and free to grant permissions in that cat?\n+--     Or a project page, with sub pages representing tasks â€” the page\n+--     owners could be the project owners.\n+--\n+--\n+\n+\n \n -- skip:\n -- alter table notifications3 rename column page_id to init_page_id_st_c;\n@@ -189,6 +260,15 @@ alter table posts3 add column parent_id_c post_id_d;\n alter table post_actions3 add column  added_by_other_id_c  pat_id_d;  -- + fk & ix\n \n \n+-- No:\n+alter table post_actions3 add column  rel_perms_c    rel_perms_d;\n+--\n+-- Instead: perms_on_nodes_t  node_id_c = _  pat_id_c = _\n+--                              .may_grant_c: bool for now, later: perms bitfield?\n+--                              .may_revoke_c: bool\n+\n+\n+\n -- Don't, we're using  pat_rels_t  instead:\n create table post_pats_t (\n   site_id_c,\n@@ -248,6 +328,14 @@ create index postpats_i_patid_postid_how_subhow on post_pats_t (\n -- alter table perms_on_pages3 add column  can_make_less_private_c  bool; \n -- alter table perms_on_pages3 add column  can_new_see_history_c    bool;\n \n+-- So can have categories with stricter requirements?  DON'T DO NOW!\n+alter table perms_on_pages3 add column  num_first_posts_to_review   i16_gz_d;\n+alter table perms_on_pages3 add column  num_first_posts_to_approve  i16_gz_d;\n+alter table perms_on_pages3 add column  max_posts_pend_appr_before  i16_gz_lt100_d;\n+\n+alter table perms_on_pages3 add column  appr_before_if_trust_lte    trust_level;\n+alter table perms_on_pages3 add column  review_after_if_trust_lte   trust_level;\n+alter table perms_on_pages3 add column  max_posts_pend_revw_aftr    i16_gz_lt128_d;\n \n \n \n@@ -333,4 +421,273 @@ create index postlinks_i_frompost on links_t (site_id_c, from_post_id_c);\n -- \n -- -- For looking up links from-to posts of which none has been deleted. But is this needed?\n -- create index postlinks_i_frompost_linktype_isup on links_t (\n---     site_id, post_id_c, link_type_c, created_at) where down_bits_c is null;\n\\ No newline at end of file\n+--     site_id, post_id_c, link_type_c, created_at) where down_bits_c is null;\n+\n+\n+\n+-- Skip, too complicated. Use pseudonyms insetad, if one wants to reuse the same\n+-- \"anonymous\" account accross different pages and categories.\n+--\n+comment on domain  anon_level_d  is $_$\n+\n+10: Not anon, even if would have been by default. For example, a moderator\n+or maybe a school teacher who wants to say something more officially.\n+\n+(20, not impl: Anon post, by an a bit traceable \"virtual anon account\":\n+The poster would use the same account accross different categories and pages,\n+during anon_incarnation_ttl_mins_c minutes. Then hen gets a new anon acct.\n+Except for when posting more on the same page â€” then hen will reuse hen's\n+last annon acct on that page.)\n+\n+(30, not impl: Anon account, less traceable: The same in the same category only;\n+it cannot follow accross categories. After anon_incarnation_ttl_mins_c,\n+the poster will get a new virtual annon acct. Except for when posting more on\n+the same page; see above.  â€” Maybe skip forever? Things get complicated,\n+if moving a page to a different category, and continuing posting there.)\n+\n+(40, not impl: Anon account, less traceable: The same in the same category,\n+excl sub categories.)\n+\n+50: Anon account: Same on the same page only.\n+\n+(60: Anon account, even less less traceable: Same on the same page only,\n+and only during anon_incarnation_ttl_mins_c.)\n+\n+(70: Anon account, unique per post / same-for-all-users-and-posts.)\n+$_$;  -- '\n+\n+\n+-- Never needed? Instead, pats_t.anon_status_c and a value < -N\n+-- check: pats_c_anonid_ltem10\n+create domain anon_or_guest_id_d pat_id_d;\n+alter  domain anon_or_guest_id_d add\n+   constraint anon_or_guest_id_d_c_ltm10 check (value <= -10);\n+\n+\n+---------------------------------------------------------------\n+-- Skip, instead will use  perms_on_pages3.{may_post_comment, may_see},\n+-- so can look up posts directly by  pat id, perm type (e.g. added to priv comt tree)\n+-- and sort by time.\n+-- Rather than having to do this once per pat lis one is in.\n+--\n+alter table users3 add column  is_pat_list_c  bool;  -- no.\n+alter table users3 add constraint  pats_c_patlist_is_group check (\n+    (is_pat_list_c is not true) or (is_group is true));\n+alter table users3 add constraint  pats_c_not_patlist_circle check (\n+    (is_pat_list_c is not true) or (is_circle_c is not true));\n+alter table users3 add constraint  pats_c_private_is_patlist check (\n+    (how_private_c is null) or (is_pat_list_c is true));\n+-- Lists don't have any username, so need to drop this constraint, was:\n+--    check (user_id < 0 or created_at is not null and username is not null)\n+-- OR let lists have ids < 0, is that better?\n+alter table users3 drop constraint people_member_c_nn;\n+alter table users3 add constraint pats_c_members_have_username check (\n+    (user_id < 0) or is_pat_list_c or (username is not null));\n+\n+alter table users3 add column is_pat_list_c  bool;\n+comment on column  users3.is_pat_list_c  is $_$\n+If non-null, this pats_t row is not a real group, but a help construction\n+that lists users or groups, and wherever this list-of-pats appear, the pats\n+are to be listed. For example, if  posts_t.author_id_c  is a list,\n+and Alice and Bob are in the list, then Alice's and Bob's usernames are shown\n+instead of the lists username (it has none), e.g.:\n+\"By Alice and Bob on 2022-03-04: ....\", if authors_id_c points to\n+that list with Alice and Bob. But if authors_id_c is a non-list group,\n+e.g. Support Team, then the text would read \"By Support Team\", instead\n+of listing all members.\n+$_$;\n+---------------------------------------------------------------\n+\n+\n+-- Skip:  New  anon_id_c  or true_id_c  everywhere.\n+-- Instead:\n+-- Let's add a  pat_rels_t.rel_type_c = AuthorOf from the anon to the anon posts?\n+-- Whilst created_by_id_c would keep pointing to the true author.\n+-- Then, looking up all one's posts, that just works.\n+-- And anon posts can easily be filtered away, by checking anon_status_c (because\n+-- other)\n+--\n+-- But skip the below:\n+-------------------------------------------------------------------------\n+-- I think this is too error prone â€” I will or have already forgotten\n+-- some columns below, or will forget to always update all columns when needed.\n+-- Also, importing patches gets more complicated. Instead of the below,\n+-- the anon/pseudo user account's id will be stored. And one would use the\n+-- event / audit log to ... audit what the real people behind the anon/pseudonyms,\n+-- have done. (Or lookup the true id in the users table, pats_t, but the audit log\n+-- should be enough.)\n+--\n+-- Actually, can be better to add  post_actions3 [pat_rels_t]  rows of type:\n+--    AuhtorOf, with val_i32_c being a type-of-author bitfield? (anon, pseudonym, co-author),\n+-- linking to one's anon & pseudonym posts,\n+-- when and only when  posts_t.created_by_id  doesn't point directly to one's\n+-- true id (but instead points to an anon/pseudonym/user-list-pats_t row).\n+-- No! Skip. Instead, let  created_by_id  be the real id.\n+--                 and \"just\" add a   pat_rels_t.rel_type_c = AuthorOf for the anon?\n+--                 and excl such posts everywhere, as long as the anon is anon.\n+--      Also, can have a\n+--         pat_rels_t.show_pats_id  to show an anonym as voter,\n+--                                     instead of the real user account.\n+\n+alter table post_actions3    add column true_id_c             member_id_d;\n+alter table links_t          add column added_by_true_id_c    member_id_d;\n+alter table link_previews_t  add column first_linked_by_id_c  member_id_d;\n+alter table post_revisions3  add composed_by_true_id_c        member_id_d;\n+alter table posts3           add created_by_true_id_c         member_id_d;\n+\n+-- But I've added  author_id_c  already!\n+-- Now removing. Instead:   pat_rels_t.rel_type_c = AuthorOf\n+\n+alter table posts3           add author_id_c                  pat_id_d;\n+alter table posts3           add author_true_id_c             member_id_d;\n+alter table post_read_stats3 add true_id_c                    member_id_d;\n+alter table review_tasks3    add true_id_c\n+alter table upload_refs3     add added_by_true_id_c ?\n+\n+user_stats3, hmm?\n+\n+pages_t â€” no, instead, the orig post in posts_t?  Old:\n+alter table pages3           add author_true_id_c             member_id_d;\n+-- But leave last_reply_by_id as is â€”Â don't add any  last_reply_by_true_id,\n+-- not that interesting.\n+\n+alter table upload_refs3     add  added_by_true_id_c          member_id_d;\n+\n+alter table user_visit_stats3 add true_user_id_c              member_id_d;\n+-------------------------------------------------------------------------\n+\n+\n+\n+---------------------------------------------------------------\n+-- Skip: Bookmarks table\n+--\n+-- Don't create a separate bookmarks or menu or tree table,  [bookmarks]\n+-- like below. Instead,  posts in posts3 already for a tree, and include\n+-- almost all that's needed for bookmarks â€” just a links field, or\n+-- entries in node_node_rels_t needed too?\n+-- (It'll all will be in [add_nodes_t] instead?)\n+--\n+create table trees_t (\n+      --\n+      -- Such an odd, & good!?, idea.\n+      -- Posts & bookmarks, the same table?\n+      -- Just like persons and groups, same table? (Which worked out great.)\n+      --\n+      -- A new page & post type:  PageType.Linkbar / Bookmarks?\n+      -- And type Linkbar, for Everyone, appears in the linkbar,\n+      -- and post_t.visible_only_to_id can hide some links.\n+      --\n+      -- And  posts_t.doing_status_c then automatically works\n+      -- for bookmarks too! And one can create a bookmark,\n+      -- and transfer it to someone else's personal bookmarks page,\n+      -- maybe continue seeing it, via visible_only_to_c?\n+      -- and have it linked from one's own bookmarks page?\n+\n+\n+  -- Pk: (these 4 cols)\n+  site_id_c,\n+  for_pat_id_c,   -- Everyone + TreeType.Linkbar => appears in the linkbar (watchbar)\n+  tree_type_c,    -- TreeType.Linkbar or Bookmarks\n+  node_id_c,\n+\n+  parent_id_c,    -- Null unless nested? FK to:\n+                  --    (site_id_c, for_pat_id_c, tree_type_c, node_id_c).\n+  created_by_id_c, -- An admin might give a bookmark \"task\" to sbd else?\n+  owner_id_c,     -- Who may edit this tree, if different from for_pat_id_c.\n+  visible_to_id_c, --- gah gets complicated\n+\n+  node_title_c,   -- To override title of page or category or tag below.\n+  node_descr_c,   -- Optional personal comment about an assignment?\n+  node_order_c,\n+  -- A node can be collapsed by default.\n+  -- And a pat can collapse or hide a default node: (site_id, pat_id, node_id, hide = true)\n+  node_collapsed_c,\n+  node_hidden_c\n+\n+  -- At most one of these:\n+  node_page_id_c,  -- shows assignees, doing status\n+  node_post_id_c,  --       â€”\"\"â€”\n+  node_cat_id_c,\n+  node_tag_id_c,\n+  node_pat_id_c,\n+  node_url_c,\n+\n+  -- To insert another tree node into one's own bookmarks?\n+  -- (It cannot link back, because parent_id_c must be to the same tree.)\n+  other_tree_for_pat_id_c,\n+  other_tree_type_c,\n+  other_tree_node_id_c,\n+\n+  -- Optional:\n+  children_order_c,\n+  children_what_c,  -- e.g. top 3 pages in cat, if this is a cat\n+\n+  created_at_c,   -- If sorting children by date\n+  archived_c,      -- then not loaded by default\n+  reminder_at_c,\n+  reminder_interval_c,\n+  my_doing_status_c, -- if someone wants hens own task related to a post,\n+                     -- not visible to others (assuming TreeType is Bookmarks).\n+);\n+\n+\n+\n+-- Maybe later: ----------------------------------------\n+-- But unlikely? So better keep here in db-skip.sql not -wip.\n+-- Denormalized tags?\n+alter table page_notf_prefs_t add column pages_with_tag_a_id_c tagtype_id_d;\n+alter table page_notf_prefs_t add column pages_with_tag_b_id_c tagtype_id_d;\n+alter table page_notf_prefs_t add column pages_with_tag_c_id_c tagtype_id_d;\n+\n+-- ix pagenotfprefs_i_tagaid\n+alter table page_notf_prefs_t add constraint pagenotfprefs_withtaga_r_tags\n+    foreign key (site_id, pages_with_tag_a_id_c)\n+    references tagtypes_t (site_id_c, id_c) deferrable;\n+\n+-- ix pagenotfprefs_i_tagbid\n+alter table page_notf_prefs_t add constraint pagenotfprefs_withtagb_r_tags\n+    foreign key (site_id, pages_with_tag_b_id_c)\n+    references tagtypes_t (site_id_c, id_c) deferrable;\n+\n+  -- ix pagenotfprefs_i_tagcid\n+alter table page_notf_prefs_t add constraint pagenotfprefs_withtagc_r_tags\n+    foreign key (site_id, pages_with_tag_c_id_c)\n+    references tagtypes_t (site_id_c, id_c) deferrable;\n+\n+create index pagenotfprefs_i_tagaid on page_notf_prefs_t (site_id, pages_with_tag_a_id_c);\n+create index pagenotfprefs_i_tagbid on page_notf_prefs_t (site_id, pages_with_tag_b_id_c);\n+create index pagenotfprefs_i_tagcid on page_notf_prefs_t (site_id, pages_with_tag_c_id_c);\n+-- / Maybe later ---------------------------------------\n+\n+\n+-- Skip, instead there'll be a table, triggers_t, with conditions, [add_triggers_t]\n+-- e.g. a date-time, or everyone-in-a-group-has-replied, or 90%-has-replied,\n+-- which makes things like reveal-the-replies or deanon-comments happen.\n+alter table posts3 & categories3\n+    add column  auto_show_replies_how_c            i32_gz_d,  -- e.g when everyone in a group has replied\n+                                                              -- or at YYMMDD HH:MM\n+    add column  auto_show_replies_mins_c           i32_gz_d,\n+\n+    add column  auto_show_replies_mins_aft_publ_c  i32_gz_d,\n+    add column  auto_show_replies_at_c             timestamp,\n+\n+    add column  auto_deanon_mins_aft_first_c       i32_gz_d,\n+    add column  auto_deanon_mins_aft_last_c        i32_gz_d,\n+    add column  auto_deanon_tree_mins_aft_first_c  i32_gz_d,\n+    add column  auto_deanon_tree_mins_aft_last_c   i32_gz_d,\n+    add column  auto_deanon_only_score_gte_c       f32_d,\n+\n+    add column  auto_deanon_tree_at_c              timestamp;\n+\n+\n+create index nodes_i_autoshowrepliesat on posts3 (site_id, auto_show_replies_at_c)\n+    where auto_show_replies_at_c is not null;\n+\n+create index nodes_i_autodeanontreeat on posts3 (site_id, auto_deanon_tree_at_c)\n+    where auto_deanon_tree_at_c is not null;\n+\n+\n+alter table users3\n+    add column auto_deanon_at_c          timestamp,\n+create index pats_i_autodeanonat on users3 (site_id, auto_deanon_at_c)\n+    where auto_deanon_at_c is not null;"
    },
    {
      "sha": "e227d1748b8ee56b33c80fcebcab118100a8cb77",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1 +1 @@\n-Subproject commit 556bc14b9e6fa59815e03daebc907e5d35f174cf\n+Subproject commit e227d1748b8ee56b33c80fcebcab118100a8cb77"
    },
    {
      "sha": "db26cc19263bf6b0d17095b27e980f6b3d2177de",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-regular?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1 +1 @@\n-Subproject commit be58fd6cdfe6fb8f1b4ba09be34d84c682c27b0a\n+Subproject commit db26cc19263bf6b0d17095b27e980f6b3d2177de"
    },
    {
      "sha": "09f8887273db6d07345590adec3246dd40cbbd4c",
      "filename": "s/impl/tyd-e2e-tests.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/s%2Fimpl%2Ftyd-e2e-tests.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/s%2Fimpl%2Ftyd-e2e-tests.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Fimpl%2Ftyd-e2e-tests.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -243,7 +243,11 @@ function runE2eTests(): U | ExitCode | 'TestsCancelled' {\n \n \n \n-  const skipAlways = ['!UNIMPL', '!-impl.', '!imp-exp-imp-exp-site'];\n+  const skipAlways = ['!UNIMPL', '!-impl.', '!imp-exp-imp-exp-site',\n+          // Temporarily broken: [paseto_broken]\n+          '!embcom.sso.token-direct-w-logout-url.2br',\n+          '!embcom.sso.token-in-cookie.2br',\n+          ];\n   const skipEmbAndAlways = ['!embcom', '!embedded-', '!embforum.', ...skipAlways]\n   const skip2And3Browsers = ['!.2br', '!.3br', '!.4br'];  // and skip 4 as well\n "
    },
    {
      "sha": "90efa5b372831926cc8cc2672aede9c0bc4b8266",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -511,10 +511,15 @@ function runAllE2eTests {\n \n   $r s/wdio --only slow-3g-navigate-edit-drafts.2browsers $args\n \n+  $r s/wdio-7 --only assign-to-basic.2br.d --cd -i $args\n+  $r s/wdio-7 --only assign-can-see.2br.d --cd -i $args\n+\n \n   # Moderation   (4862065)\n   # ------------\n \n+  $r s/wdio-7 --only may-see-email-adrs.2br.d --cd -i $args\n+\n \n   # API\n   # ------------\n@@ -664,7 +669,7 @@ function runAllE2eTests {\n   $r s/wdio       --only embcom.comment-counts.2br.cors $args\n \n   # Single Sign-On, embedded comments:\n-  # Crypto problem! SHOULD fix, TESTS_MISSING, See:\n+  # Crypto problem! SHOULD fix, TESTS_MISSING [paseto_broken], See:\n   #   ../tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt\n   #$r s/wdio       --only embcom.sso.token-direct-w-logout-url.2br $args\n   #$r s/wdio       --only embcom.sso.token-in-cookie.2br $args"
    },
    {
      "sha": "3e9a73e943e48e35d5126ba58ef5e9c76c897c2c",
      "filename": "tests/app/debiki/dao/AnonymAppSpec.scala",
      "status": "added",
      "additions": 123,
      "deletions": 0,
      "changes": 123,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FAnonymAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FAnonymAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FAnonymAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2021 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package debiki.dao\n+\n+import com.debiki.core._\n+import com.debiki.core.Prelude._\n+import debiki.EdHttp.ResultException\n+import java.{util => ju}\n+\n+\n+class AnonymAppSpec extends DaoAppSuite(\n+        disableScripts = true, disableBackgroundJobs = true) {\n+\n+  val site1 = new TestSiteAndDao(1, this)\n+  val site2 = new TestSiteAndDao(2, this)\n+\n+  var createForumOneResult: CreateForumResult = _\n+  var createForumTwoResult: CreateForumResult = _\n+\n+  var forumOneId: PageId = _\n+  var forumTwoId: PageId = _\n+\n+  var createCatAResult: CreateCategoryResult = _\n+  var catA: Cat = _\n+\n+  var ownerS1: Participant = _\n+  var userOneS1: Participant = _\n+  var userTwoS1: Participant = _\n+\n+  var createPageResult: CreatePageResult = _\n+  var pageId: St = _\n+\n+  \"Something can do it\" - {\n+\n+    \"Prepare\" in {\n+      createForumOneResult = site1.dao.createForum(\n+            title = \"Forum One\", folder = \"/forum1/\", isForEmbCmts = false,\n+            Who(SystemUserId, browserIdData)).get\n+\n+      createForumTwoResult = site1.dao.createForum(\n+            title = \"Forum Two\", folder = \"/forum2/\", isForEmbCmts = false,\n+            Who(SystemUserId, browserIdData)).get\n+\n+      forumOneId = createForumOneResult.pagePath.pageId\n+      forumTwoId = createForumTwoResult.pagePath.pageId\n+\n+      createCatAResult = createCategory(\n+            slug = \"cat-a\",\n+            forumPageId = createForumOneResult.pagePath.pageId,\n+            parentCategoryId = createForumOneResult.rootCategoryId,\n+            authorId = SystemUserId,\n+            browserIdData,\n+            site1.dao)\n+\n+      catA = createCatAResult.category\n+\n+      ownerS1 = createPasswordOwner(\"6mwe2tr0\", site1.dao)\n+      userOneS1 = createPasswordUser(\"ff6622zz\", site1.dao, trustLevel = TrustLevel.BasicMember)\n+      userTwoS1 = createPasswordUser(\"mm33ww77\", site1.dao, trustLevel = TrustLevel.BasicMember)\n+    }\n+\n+    \"Try post anonymously â€” but anon posts are disabled, by default\" in {\n+      val dao = site1.dao\n+      createPageResult = createPage2(PageType.Discussion, dao.textAndHtmlMaker.forTitle(\"Anon Test\"),\n+            bodyTextAndHtml = dao.textAndHtmlMaker.forBodyOrComment(\"Test anon post.\"),\n+            authorId = userOneS1.id, browserIdData, dao, anyCategoryId = Some(catA.id),\n+            doAsAnon = Some(WhichAnon.NewAnon(AnonStatus.IsAnonOnlySelfCanDeanon)))\n+      pageId = createPageResult.id\n+    }\n+\n+    \"Load an anon user\" in {\n+      val dao = site1.dao\n+      dao.readTx { tx =>\n+        val page = dao.newPageDao(pageId, tx)\n+        val pageParts = page.parts\n+        val relevantPosts = pageParts.allPosts // loads all posts, if needed\n+        //val userIdsToLoad = mut.Set[UserId]()\n+        //userIdsToLoad ++= relevantPosts.map(_.createdById)  // or relevantApprovedPosts? [iz01]\n+        val userIdsToLoad = relevantPosts.map(_.createdById)\n+\n+        // Will this work\n+        val usersById = tx.loadParticipantsAsMap(userIdsToLoad)\n+      }\n+    }\n+\n+    /*\n+    \"Create test sites and things, try to fail fast\" in {\n+      // This will lazy init. Do in order, so db transactions happen in the right order,\n+      // and so any init problems get noticed here.\n+      site1.dao\n+      site2.dao\n+      forumOneId\n+      catA\n+    }\n+\n+    \"Something\" in {\n+      intercept[ResultException] {\n+      }.getMessage must include(\"\")\n+    }\n+\n+    \"The thing happens\" in {\n+      // ...\n+      site1.daoStale = true\n+    }\n+    */\n+  }\n+\n+}"
    },
    {
      "sha": "e29b20896d75e9486747037464bcedc19d47a3d6",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -131,8 +131,9 @@ class DaoAppSuite(\n   def browserIdData: BrowserIdData =\n     BrowserIdData(\"1.2.3.4\", idCookie = Some(\"dummy_id_cookie\"), fingerprint = 334455)\n \n-  def dummySpamRelReqStuff: SpamRelReqStuff =\n-    SpamRelReqStuff(userAgent = None, referer = None, uri = \"/dummy\",\n+  def dummySpamRelReqStuff: SpamRelReqStuff = SpamRelReqStuff(\n+          browserIdData,\n+          userAgent = None, referer = None, uri = \"/dummy\",\n           userName = None, userEmail = None, userUrl = None, userTrustLevel = None)\n \n \n@@ -322,6 +323,10 @@ class DaoAppSuite(\n           defaultSortOrder = None,\n           comtOrder = None,\n           comtNesting = None,\n+          comtsStartHidden = None,\n+          comtsStartAnon = None,\n+          opStartsAnon = None,\n+          newAnonStatus = None,\n           doVoteStyle = None,\n           doVoteInTopicList = None,\n           shallBeDefaultCategory = false,\n@@ -367,12 +372,14 @@ class DaoAppSuite(\n   def createPage2(pageRole: PageType, titleTextAndHtml: TitleSourceAndHtml,\n         bodyTextAndHtml: TextAndHtml, authorId: UserId, browserIdData: BrowserIdData,\n         dao: SiteDao, anyCategoryId: Option[CategoryId] = None,\n+        doAsAnon: Opt[WhichAnon.NewAnon] = None,\n         extId: Option[ExtId] = None, discussionIds: Set[AltPageId] = Set.empty): CreatePageResult = {\n     dao.createPage2(\n       pageRole, PageStatus.Published, anyCategoryId = anyCategoryId,\n       anyFolder = Some(\"/\"), anySlug = Some(\"\"),\n       title = titleTextAndHtml, bodyTextAndHtml = bodyTextAndHtml,\n       showId = true, deleteDraftNr = None, Who(authorId, browserIdData), dummySpamRelReqStuff,\n+      doAsAnon = doAsAnon,\n       discussionIds = discussionIds, extId = extId)\n   }\n \n@@ -384,7 +391,7 @@ class DaoAppSuite(\n       else textAndHtmlMaker.forBodyOrComment(text)\n     dao.insertReply(textAndHtml, pageId,\n       replyToPostNrs = Set(parentNr getOrElse PageParts.BodyNr), PostType.Normal, deleteDraftNr = None,\n-      Who(memberId, browserIdData), dummySpamRelReqStuff).post\n+      Who(TrueId(memberId), browserIdData), dummySpamRelReqStuff).post\n   }\n \n "
    },
    {
      "sha": "d7991d271c711ce1f64c5c728d99cd5057c8f617",
      "filename": "tests/app/debiki/dao/DeletePageAppSpec.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDeletePageAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDeletePageAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FDeletePageAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -56,7 +56,7 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n \n       // Delete all pages.\n       dao.deletePagesIfAuth(Seq(discussionId, forumId, htmlPageId),\n-        admin.id, browserIdData, undelete = false)\n+            Who(admin.trueId2, browserIdData), undelete = false)\n \n       // Verify marked as deleted.\n       dao.getPageMeta(discussionId).get.deletedAt mustBe defined\n@@ -66,7 +66,7 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n \n       // Undelete, verify no longer marked as deleted.\n       dao.deletePagesIfAuth(Seq(discussionId, forumId, htmlPageId),\n-        admin.id, browserIdData, undelete = true)\n+            Who(admin.trueId2, browserIdData), undelete = true)\n       dao.getPageMeta(discussionId).get.deletedAt mustBe None\n       dao.getPageMeta(forumId).get.deletedAt mustBe None\n       dao.getPageMeta(htmlPageId).get.deletedAt mustBe None\n@@ -79,7 +79,7 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n       for (pageId <- Seq(discussionId, htmlPageId, otherPageId)) {\n         intercept[ResultException] {\n           dao.deletePagesIfAuth(\n-                Seq(pageId), moderator.id, browserIdData, undelete = false)\n+                Seq(pageId), Who(moderator.trueId2, browserIdData), undelete = false)\n           dao.getPageMeta(discussionId).get.deletedAt mustBe defined\n         }.getMessage must include(\"TyEM0SEEPG_\")\n       }\n@@ -89,7 +89,8 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n \n     \"non-staff also may not delete pages they cannot see\" in {\n       intercept[ResultException] {\n-        dao.deletePagesIfAuth(Seq(discussionId), user.id, browserIdData, undelete = false)\n+        dao.deletePagesIfAuth(\n+              Seq(discussionId), Who(user.trueId2, browserIdData), undelete = false)\n       }.getMessage must include(\"TyEM0SEEPG_\")\n     }\n \n@@ -112,48 +113,49 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n     \"now mods can delete discussions â€” they may now see them\" - {\n       \"delete page\" in {\n         dao.deletePagesIfAuth(\n-              Seq(discussionId), moderator.id, browserIdData, undelete = false)\n+              Seq(discussionId), Who(moderator.trueId2, browserIdData), undelete = false)\n         dao.getPageMeta(discussionId).get.deletedAt mustBe defined\n       }\n \n       \"undelete page\" in {\n         dao.deletePagesIfAuth(\n-              Seq(discussionId), moderator.id, browserIdData, undelete = true)\n+              Seq(discussionId), Who(moderator.trueId2, browserIdData), undelete = true)\n         dao.getPageMeta(discussionId).get.deletedAt mustBe None\n       }\n \n       \"still cannot delete the *other* page, it's still not in the forum\" in {\n         intercept[ResultException] {\n           dao.deletePagesIfAuth(\n-                Seq(otherPageId), moderator.id, browserIdData, undelete = false)\n+                Seq(otherPageId), Who(moderator.trueId2, browserIdData), undelete = false)\n         }.getMessage must include(\"TyEM0SEEPG_\")\n       }\n \n       \"cannot delete forum\" in {\n         intercept[ResultException] {\n           dao.deletePagesIfAuth(\n-                Seq(forumId), moderator.id, browserIdData, undelete = false)\n+                Seq(forumId), Who(moderator.trueId2, browserIdData), undelete = false)\n         }.getMessage must include(\"EsE5GKF23_\")\n       }\n \n       \"cannot delete custom html page\" in {\n         intercept[ResultException] {\n           dao.deletePagesIfAuth(\n-                Seq(htmlPageId), moderator.id, browserIdData, undelete = false)\n+                Seq(htmlPageId), Who(moderator.trueId2, browserIdData), undelete = false)\n         }.getMessage must include(\"EsE5GKF23_\")\n       }\n     }\n \n     \"do nothing if page doesn't exist\" in {\n       val admin = createPasswordOwner(s\"dltr_adm2\", dao)\n       val badPageId = \"zzwwffpp\"\n-      dao.deletePagesIfAuth(Seq(badPageId), admin.id, browserIdData, undelete = false)\n+      dao.deletePagesIfAuth(Seq(badPageId), Who(admin.trueId2, browserIdData), undelete = false)\n       dao.getPageMeta(badPageId) mustBe None\n     }\n \n     \"non-staff users still cannot see the pages â€” they're in the staff cat\" in {\n       intercept[ResultException] {\n-        dao.deletePagesIfAuth(Seq(discussionId), user.id, browserIdData, undelete = false)\n+        dao.deletePagesIfAuth(\n+              Seq(discussionId), Who(user.trueId2, browserIdData), undelete = false)\n       }.getMessage must include(\"TyEM0SEEPG_\")\n     }\n \n@@ -163,7 +165,8 @@ class DeletePageAppSpec extends DaoAppSuite(disableScripts = true, disableBackgr\n \n     \"non-staff can now see it â€” but still may not delete it\" in {\n       intercept[ResultException] {\n-        dao.deletePagesIfAuth(Seq(discussionId), user.id, browserIdData, undelete = false)\n+        dao.deletePagesIfAuth(\n+              Seq(discussionId), Who(user.trueId2, browserIdData), undelete = false)\n       }.getMessage must include(\"TyEDELOTRSPG_\")\n     }\n "
    },
    {
      "sha": "dd4bad60536f74af96a2e8b3fdf510499d0d2a08",
      "filename": "tests/app/debiki/dao/DraftsDaoAppSpec.scala",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDraftsDaoAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FDraftsDaoAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FDraftsDaoAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -41,6 +41,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n   var draftThreeNewest: Draft = _\n   var draftFourNewTopic: Draft = _\n   var draftFiveForEdits: Draft = _\n+  var draftSixAnonReply: Draft = _\n \n   val DraftOneText = \"DraftOneText\"\n   val DraftTwoTitleOrig = \"DraftTwoTitleOrig\"\n@@ -50,6 +51,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n   val DraftThreeText = \"DraftThreeText\"\n   val DraftFourText = \"DraftFourText\"\n   val DraftFiveTextForEdits = \"DraftFiveTextForEdits\"\n+  val DraftSixAnonReplyText = \"DraftSixAnonReplyText\"\n \n   lazy val now: When = globals.now()\n \n@@ -93,6 +95,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         createdAt = now,\n         forWhat = locator,\n         postType = Some(PostType.Normal),\n+        doAsAnon = None,\n         title = \"\",\n         text = DraftOneText)\n \n@@ -131,6 +134,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         forWhat = locator,\n         createdAt = now.plusMillis(1000),  // newer\n         topicType = Some(PageType.Discussion),\n+        doAsAnon = None,\n         title = \"New topic title\",\n         text = DraftTwoTextOrig)\n \n@@ -150,6 +154,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         forWhat = locator,\n         createdAt = now.minusMillis(1000),  // older\n         topicType = Some(PageType.Discussion),\n+        doAsAnon = None,\n         title = \"Direct message title\",\n         text = DraftThreeText)\n \n@@ -328,6 +333,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         forWhat = locator,\n         createdAt = now.plusMillis(9000),  // newest, but older than the edits (4BKARE2)\n         topicType = Some(PageType.Question),\n+        doAsAnon = None,\n         title = \"Is this a good question to ask?\",\n         text = DraftTwoTextOrig)\n \n@@ -367,6 +373,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         createdAt = now,\n         forWhat = locator,\n         postType = Some(PostType.Normal),\n+        doAsAnon = None,\n         title = \"\",\n         text = DraftFiveTextForEdits)\n \n@@ -395,6 +402,39 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       }\n     }\n \n+    \"save a draft for an anonymous reply, as a new anon\" in {\n+      val post = dao.loadPost(pageId, PageParts.BodyNr) getOrDie \"TyE2ABKS40L\"\n+      val locator = DraftLocator(\n+            DraftType.Reply,\n+            pageId = Some(pageId),\n+            postNr = Some(PageParts.BodyNr),\n+            postId = Some(post.id))\n+\n+      draftSixAnonReply = Draft(\n+            byUserId = userOne.id,\n+            draftNr = 6,\n+            createdAt = now,\n+            forWhat = locator,\n+            postType = Some(PostType.Normal),\n+            doAsAnon = Some(WhichAnon.NewAnon(AnonStatus.IsAnonCanAutoDeanon)),\n+            title = \"\",\n+            text = DraftSixAnonReplyText)\n+\n+      dao.writeTx { (tx, _) =>\n+        tx.upsertDraft(draftSixAnonReply)\n+      }\n+    }\n+\n+    \"find the anon reply draft nr â€” and one's old true id reply too (draftOne)\" in {\n+      dao.readOnlyTransaction { tx =>\n+        tx.loadDraftsByLocator(userOne.id, draftOne.forWhat) mustBe Vec(\n+              draftOne, draftSixAnonReply)\n+      }\n+    }\n+\n+    TESTS_MISSING // Edit & update the anon draft too.  TyTEDUPDDFT04\n+\n+    TESTS_MISSING // Save anon draft, reuse an anon.    TyTDFTREUSEANON\n   }\n \n }"
    },
    {
      "sha": "83b6723bb31291bf91258643ae36466853da7216",
      "filename": "tests/app/debiki/dao/MovePostsAppSpec.scala",
      "status": "modified",
      "additions": 30,
      "deletions": 20,
      "changes": 50,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FMovePostsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FMovePostsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FMovePostsAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -52,12 +52,12 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       info(\"non-staff may not move the post\")\n       intercept[ResultException] {\n         dao.movePostIfAuth(\n-          postToMove.pagePostId, secondParent.pagePostNr, theMember.id, browserIdData)\n+              postToMove.pagePostId, secondParent.pagePostNr, theMember.trueId2, browserIdData)\n       }.getMessage must include(\"EsE6YKG2_\")\n \n       info(\"staff may move it\")\n       val postAfter = dao.movePostIfAuth(\n-        postToMove.pagePostId, secondParent.pagePostNr, theModerator.id, browserIdData)._1\n+            postToMove.pagePostId, secondParent.pagePostNr, theModerator.trueId2, browserIdData)._1\n       postAfter.parentNr mustBe Some(secondParent.nr)\n       val reloadedPost = dao.readOnlyTransaction(_.loadThePost(postToMove.id))\n       reloadedPost.parentNr mustBe Some(secondParent.nr)\n@@ -80,33 +80,36 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       info(\"refuses to move orig post title\")\n       intercept[ResultException] {\n         dao.movePostIfAuth(\n-          PagePostId(thePageId, titleId), secondReply.pagePostNr, theModerator.id, browserIdData)\n+              PagePostId(thePageId, titleId), secondReply.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7YKG25_\")\n \n       info(\"refuses to move orig post body\")\n       intercept[ResultException] {\n         dao.movePostIfAuth(\n-          PagePostId(thePageId, bodyId), secondReply.pagePostNr, theModerator.id, browserIdData)\n+              PagePostId(thePageId, bodyId), secondReply.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7YKG25_\")\n \n       info(\"refuses to place reply below title\")\n       intercept[ResultException] {\n         dao.movePostIfAuth(\n-          PagePostId(thePageId, secondReply.id), PagePostNr(thePageId, TitleNr),\n-          theModerator.id, browserIdData)\n+              PagePostId(thePageId, secondReply.id), PagePostNr(thePageId, TitleNr),\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE4YKJ8_\")\n \n       info(\"won't try to move a post that doesn't exist\")\n       intercept[PostNotFoundByIdException] {\n         dao.movePostIfAuth(\n-          PagePostId(thePageId, 9999), secondReply.pagePostNr, theModerator.id, browserIdData)\n+              PagePostId(thePageId, 9999), secondReply.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }\n \n       info(\"refuses to place reply below non-existing post\")\n       intercept[ResultException] {\n         dao.movePostIfAuth(\n-          PagePostId(thePageId, secondReply.id), PagePostNr(thePageId, 9999),\n-          theModerator.id, browserIdData)\n+              PagePostId(thePageId, secondReply.id), PagePostNr(thePageId, 9999),\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7YKG42_\")\n     }\n \n@@ -121,31 +124,37 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n       info(\"won't create A â€”> A\")\n       intercept[ResultException] {\n-        dao.movePostIfAuth(postA.pagePostId, postA.pagePostNr, theModerator.id, browserIdData)\n+        dao.movePostIfAuth(postA.pagePostId, postA.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"TyE7SRJ2MG_\")\n \n       info(\"won't create A â€”> B â€”> A\")\n       intercept[ResultException] {\n-        dao.movePostIfAuth(postA.pagePostId, postB.pagePostNr, theModerator.id, browserIdData)\n+        dao.movePostIfAuth(postA.pagePostId, postB.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7KCCL_\")\n \n       info(\"won't create A â€”> B â€“> C â€”> A\")\n       intercept[ResultException] {\n-        dao.movePostIfAuth(postA.pagePostId, postC.pagePostNr, theModerator.id, browserIdData)\n+        dao.movePostIfAuth(postA.pagePostId, postC.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7KCCL_\")\n \n       info(\"agrees to move D from C to C2, fine\")\n-      dao.movePostIfAuth(postD.pagePostId, postC2.pagePostNr, theModerator.id, browserIdData)\n+      dao.movePostIfAuth(postD.pagePostId, postC2.pagePostNr,\n+            theModerator.trueId2, browserIdData)\n       val reloadedD = dao.readOnlyTransaction(_.loadThePost(postD.id))\n       reloadedD.parentNr mustBe Some(postC2.nr)\n \n       info(\"won't create C2 â€”> D â€”> C2\")\n       intercept[ResultException] {\n-        dao.movePostIfAuth(postC2.pagePostId, postD.pagePostNr, theModerator.id, browserIdData)\n+        dao.movePostIfAuth(postC2.pagePostId, postD.pagePostNr,\n+              theModerator.trueId2, browserIdData)\n       }.getMessage must include(\"EsE7KCCL_\")\n \n       info(\"but agrees to move C from to D, fine\")\n-      dao.movePostIfAuth(postC.pagePostId, postD.pagePostNr, theModerator.id, browserIdData)\n+      dao.movePostIfAuth(postC.pagePostId, postD.pagePostNr,\n+            theModerator.trueId2, browserIdData)\n       val reloadedC = dao.readOnlyTransaction(_.loadThePost(postC.id))\n       reloadedC.parentNr mustBe Some(postD.nr)\n     }\n@@ -160,7 +169,8 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       val postX = reply(theModerator.id, thePageId, \"X\")(dao)\n       val postY = reply(theModerator.id, thePageId, \"Y\", parentNr = Some(postX.nr))(dao)\n \n-      dao.movePostIfAuth(postA.pagePostId, postY.pagePostNr, theModerator.id, browserIdData)\n+      dao.movePostIfAuth(\n+            postA.pagePostId, postY.pagePostNr, theModerator.trueId2, browserIdData)\n \n       dao.readOnlyTransaction { transaction =>\n         val pageParts = dao.newPageDao(thePageId, transaction).parts\n@@ -190,8 +200,8 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       val toPageMetaBefore = dao.readOnlyTransaction(_.loadThePageMeta(pageTwoId))\n \n       info(\"move it\")\n-      val postAfter = dao.movePostIfAuth(post.pagePostId, postOnPageTwo.pagePostNr,\n-        theModerator.id, browserIdData)._1\n+      val postAfter = dao.movePostIfAuth(\n+            post.pagePostId, postOnPageTwo.pagePostNr, theModerator.trueId2, browserIdData)._1\n \n       postAfter.pageId mustBe pageTwoId\n       postAfter.parentNr mustBe Some(postOnPageTwo.nr)\n@@ -252,7 +262,7 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n       info(\"can move the tree\")\n       val postAfterMove = dao.movePostIfAuth(postA.pagePostId, postOnPageTwo.pagePostNr,\n-        theModerator.id, browserIdData)._1\n+            theModerator.trueId2, browserIdData)._1\n       postAfterMove.pageId mustBe pageTwoId\n       postAfterMove.parentNr mustBe Some(postOnPageTwo.nr)\n \n@@ -327,7 +337,7 @@ class MovePostsAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n       info(\"move a post\")\n       val postAfter = dao.movePostIfAuth(postToMove.pagePostId, postOnPageTwo.pagePostNr,\n-        theModerator.id, browserIdData)._1\n+            theModerator.trueId2, browserIdData)._1\n       postAfter.pageId mustBe pageTwoId\n       postAfter.parentNr mustBe Some(postOnPageTwo.nr)\n "
    },
    {
      "sha": "079eb527fe8be4e310dbca07e2530e83f234fb6d",
      "filename": "tests/app/debiki/dao/PageNotfPrefTxSpec.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FPageNotfPrefTxSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FPageNotfPrefTxSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FPageNotfPrefTxSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -69,6 +69,10 @@ class PageNotfPrefTxSpec extends DaoAppSuite() {\n           defaultSortOrder = None,\n           comtOrder = None,\n           comtNesting = None,\n+          comtsStartHidden = None,\n+          comtsStartAnon = None,\n+          opStartsAnon = None,\n+          newAnonStatus = None,\n           doVoteStyle = None,\n           doVoteInTopicList = None,\n           shallBeDefaultCategory = false,"
    },
    {
      "sha": "0947dd49c2ba29338babda7be4d2aa17da62bdbb",
      "filename": "tests/app/debiki/dao/UploadsDaoSpec.scala",
      "status": "modified",
      "additions": 25,
      "deletions": 25,
      "changes": 50,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FUploadsDaoSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2FUploadsDaoSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FUploadsDaoSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -210,9 +210,9 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n         browserIdData)\n \n       info(\"upload avatar images, no quota used\")\n-      dao.addUploadedFile(tinyAvatar.name, tinyAvatar.file, user.id, browserIdData)\n-      dao.addUploadedFile(smallAvatar.name, smallAvatar.file, user.id, browserIdData)\n-      dao.addUploadedFile(mediumAvatar.name, mediumAvatar.file, user.id, browserIdData)\n+      dao.addUploadedFile(tinyAvatar.name, tinyAvatar.file, user.trueId2, browserIdData)\n+      dao.addUploadedFile(smallAvatar.name, smallAvatar.file, user.trueId2, browserIdData)\n+      dao.addUploadedFile(mediumAvatar.name, mediumAvatar.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 0\n       resourceUsage.numUploadBytes mustBe 0\n@@ -255,19 +255,19 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       resourceUsage.numUploadBytes mustBe 0\n \n       info(\"upload tiny image\")\n-      dao.addUploadedFile(tinyAvatar.name, tinyAvatar.file, user.id, browserIdData)\n+      dao.addUploadedFile(tinyAvatar.name, tinyAvatar.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 1\n       resourceUsage.numUploadBytes mustBe 1020\n \n       info(\"upload small image\")\n-      dao.addUploadedFile(smallAvatar.name, smallAvatar.file, user.id, browserIdData)\n+      dao.addUploadedFile(smallAvatar.name, smallAvatar.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 2\n       resourceUsage.numUploadBytes mustBe (1020 + 2030)\n \n       info(\"upload medium image\")\n-      dao.addUploadedFile(mediumAvatar.name, mediumAvatar.file, user.id, browserIdData)\n+      dao.addUploadedFile(mediumAvatar.name, mediumAvatar.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 3\n       resourceUsage.numUploadBytes mustBe (1020 + 2030 + 3040)\n@@ -295,8 +295,8 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n         browserIdData)\n \n       info(\"upload files, no quota used\")\n-      dao.addUploadedFile(sunImage.name, sunImage.file, user.id, browserIdData)\n-      dao.addUploadedFile(moonImage.name, moonImage.file, user.id, browserIdData)\n+      dao.addUploadedFile(sunImage.name, sunImage.file, user.trueId2, browserIdData)\n+      dao.addUploadedFile(moonImage.name, moonImage.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 0\n       resourceUsage.numUploadBytes mustBe 0\n@@ -307,7 +307,7 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       val pagePath = dao.createPage(PageType.Discussion, PageStatus.Published,\n         anyCategoryId = None, anyFolder = None, anySlug = None,\n         title = titleSourceAndHtml, bodyTextAndHtml = bodyTextAndHtml,\n-        showId = true, deleteDraftNr = None, Who(user.id, browserIdData), dummySpamRelReqStuff)\n+        showId = true, deleteDraftNr = None, Who(user.trueId2, browserIdData), dummySpamRelReqStuff)\n \n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 1\n@@ -316,7 +316,7 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       info(\"edit page: add second file, more quota used\")\n       val newTextAndHtml = bodyTextAndHtml.append(s\"\\n[The moon](${moonImage.ref.url})\")\n       dao.editPostIfAuth(pagePath.pageId, PageParts.BodyNr, deleteDraftNr = None,\n-        Who(user.id, browserIdData),\n+        Who(user.trueId2, browserIdData),\n         dummySpamRelReqStuff, newTextAndHtml)\n \n       resourceUsage = dao.loadResourceUsage()\n@@ -325,7 +325,7 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n \n       info(\"edit page: remove second file, quota freed\")\n       dao.editPostIfAuth(pagePath.pageId, PageParts.BodyNr, deleteDraftNr = None,\n-        Who(user.id, browserIdData),\n+        Who(user.trueId2, browserIdData),\n         dummySpamRelReqStuff, bodyTextAndHtml)\n \n       resourceUsage = dao.loadResourceUsage()\n@@ -334,7 +334,7 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n \n       info(\"edit page: remove the first file, remaining quota freed\")\n       dao.editPostIfAuth(pagePath.pageId, PageParts.BodyNr, deleteDraftNr = None,\n-        Who(user.id, browserIdData),\n+        Who(user.trueId2, browserIdData),\n         dummySpamRelReqStuff, textAndHtmlMaker.forBodyOrComment(\"empty\"))\n \n       resourceUsage = dao.loadResourceUsage()\n@@ -361,21 +361,21 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       val pagePath = dao.createPage(PageType.Discussion, PageStatus.Published,\n         anyCategoryId = None, anyFolder = None, anySlug = None,\n         title = titleSourceAndHtml, bodyTextAndHtml = bodyTextAndHtml,\n-        showId = true, deleteDraftNr = None, Who(user.id, browserIdData), dummySpamRelReqStuff)\n+        showId = true, deleteDraftNr = None, Who(user.trueId2, browserIdData), dummySpamRelReqStuff)\n \n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 0\n       resourceUsage.numUploadBytes mustBe 0\n \n       info(\"upload the file, now quota gets used\")\n-      dao.addUploadedFile(sunImage.name, sunImage.file, user.id, browserIdData)\n+      dao.addUploadedFile(sunImage.name, sunImage.file, user.trueId2, browserIdData)\n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 1\n       resourceUsage.numUploadBytes mustBe 1060\n \n       info(\"edit page: remove link, quota freed\")\n       dao.editPostIfAuth(pagePath.pageId, PageParts.BodyNr, deleteDraftNr = None,\n-        Who(user.id, browserIdData),\n+        Who(user.trueId2, browserIdData),\n         dummySpamRelReqStuff, textAndHtmlMaker.forBodyOrComment(\"empty\"))\n \n       resourceUsage = dao.loadResourceUsage()\n@@ -419,9 +419,9 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n \n       info(\"upload files, no quota used\")\n \n-      dao.addUploadedFile(sharedFile.name, sharedFile.file, user.id, browserIdData)\n-      dao.addUploadedFile(site1File.name, site1File.file, user.id, browserIdData)\n-      dao2.addUploadedFile(site2File.name, site2File.file, user2.id, browserIdData)\n+      dao.addUploadedFile(sharedFile.name, sharedFile.file, user.trueId2, browserIdData)\n+      dao.addUploadedFile(site1File.name, site1File.file, user.trueId2, browserIdData)\n+      dao2.addUploadedFile(site2File.name, site2File.file, user2.trueId2, browserIdData)\n \n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 0\n@@ -444,12 +444,12 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       val pagePath1 = dao.createPage(PageType.Discussion, PageStatus.Published,\n         anyCategoryId = None, anyFolder = None, anySlug = None,\n         title = titleSourceAndHtml, bodyTextAndHtml = bodyTextAndHtmlSite1,\n-        showId = true, deleteDraftNr = None, Who(user.id, browserIdData), dummySpamRelReqStuff)\n+        showId = true, deleteDraftNr = None, Who(user.trueId2, browserIdData), dummySpamRelReqStuff)\n \n       dao2.createPage(PageType.Discussion, PageStatus.Published,\n         anyCategoryId = None, anyFolder = None, anySlug = None,\n         title = titleSourceAndHtml, bodyTextAndHtml = bodyTextAndHtmlSite2,\n-        showId = true, deleteDraftNr = None, Who(user2.id, browserIdData), dummySpamRelReqStuff)\n+        showId = true, deleteDraftNr = None, Who(user2.trueId2, browserIdData), dummySpamRelReqStuff)\n \n       resourceUsage = dao.loadResourceUsage()\n       resourceUsage.numUploads mustBe 2\n@@ -462,7 +462,7 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n       info(\"edit site 1 page: remove links, remaining quota freed, site 1 only\")\n \n       dao.editPostIfAuth(pagePath1.pageId, PageParts.BodyNr, deleteDraftNr = None,\n-        Who(user.id, browserIdData),\n+        Who(user.trueId2, browserIdData),\n         dummySpamRelReqStuff, textAndHtmlMaker.forBodyOrComment(\"empty\"))\n \n       resourceUsage = dao2.loadResourceUsage()\n@@ -493,8 +493,8 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n         browserIdData)\n \n       info(\"upload files, as long as haven't uploaded too much\")\n-      dao.addUploadedFile(fileOne.name, fileOne.file, user.id, browserIdData)\n-      dao.addUploadedFile(fileTwo.name, fileTwo.file, user.id, browserIdData)\n+      dao.addUploadedFile(fileOne.name, fileOne.file, user.trueId2, browserIdData)\n+      dao.addUploadedFile(fileTwo.name, fileTwo.file, user.trueId2, browserIdData)\n \n       // The audit log is used to detect too-many-big-files-uploaded. Not the quota system.\n       resourceUsage = dao.loadResourceUsage()\n@@ -503,12 +503,12 @@ class UploadsDaoAppSpec extends DaoAppSuite(disableScripts = false) {\n \n       info(\"not be allowed to upload too much data\")\n       val exception = intercept[ResultException] {\n-        dao.addUploadedFile(fileThree.name, fileThree.file, user.id, browserIdData)\n+        dao.addUploadedFile(fileThree.name, fileThree.file, user.trueId2, browserIdData)\n       }\n       exception.statusCode mustBe play.api.http.Status.REQUEST_ENTITY_TOO_LARGE\n \n       info(\"but may upload one more file, if it's small enough\")\n-      dao.addUploadedFile(fileTiny.name, fileTiny.file, user.id, browserIdData)\n+      dao.addUploadedFile(fileTiny.name, fileTiny.file, user.trueId2, browserIdData)\n     }\n   }\n "
    },
    {
      "sha": "a569b685bad99ddee21f22ed32e6537466cb6468",
      "filename": "tests/app/debiki/dao/__DaoAppSpecTemplate__.scala",
      "status": "modified",
      "additions": 34,
      "deletions": 17,
      "changes": 51,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2F__DaoAppSpecTemplate__.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Fdebiki%2Fdao%2F__DaoAppSpecTemplate__.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2F__DaoAppSpecTemplate__.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -31,30 +31,47 @@ class __DaoAppSpecTemplate__ extends DaoAppSuite(\n   val site1 = new TestSiteAndDao(1, this)\n   val site2 = new TestSiteAndDao(2, this)\n \n+  var createForumOneResult: CreateForumResult = _\n+  var createForumTwoResult: CreateForumResult = _\n \n-  lazy val forumOneId: PageId = createForumOneResult.pagePath.pageId\n-  lazy val catA: Cat = createCatAResult.category\n+  var forumOneId: PageId = _\n+  var forumTwoId: PageId = _\n \n-  lazy val forumTwoId: PageId = createForumTwoResult.pagePath.pageId\n+  var createCatAResult: CreateCategoryResult = _\n+  var catA: Cat = _\n \n-  lazy val createForumOneResult: CreateForumResult = site1.dao.createForum(\n-        title = \"Forum One\", folder = \"/forum1/\", isForEmbCmts = false,\n-        Who(SystemUserId, browserIdData)).get\n+  var ownerS1: Participant = _\n+  var userOneS1: Participant = _\n+  var userTwoS1: Participant = _\n \n-  lazy val createForumTwoResult: CreateForumResult = site1.dao.createForum(\n-        title = \"Forum Two\", folder = \"/forum2/\", isForEmbCmts = false,\n-        Who(SystemUserId, browserIdData)).get\n+  \"Something can do it\" - {\n \n-  lazy val createCatAResult: CreateCategoryResult = createCategory(\n-        slug = \"cat-a\",\n-        forumPageId = createForumOneResult.pagePath.pageId,\n-        parentCategoryId = createForumOneResult.rootCategoryId,\n-        authorId = SystemUserId,\n-        browserIdData,\n-        site1.dao)\n+    \"Prepare\" in {\n+      createForumOneResult = site1.dao.createForum(\n+            title = \"Forum One\", folder = \"/forum1/\", isForEmbCmts = false,\n+            Who(SystemUserId, browserIdData)).get\n \n+      createForumTwoResult = site1.dao.createForum(\n+            title = \"Forum Two\", folder = \"/forum2/\", isForEmbCmts = false,\n+            Who(SystemUserId, browserIdData)).get\n \n-  \"Something can do it\" - {\n+      forumOneId = createForumOneResult.pagePath.pageId\n+      forumTwoId = createForumTwoResult.pagePath.pageId\n+\n+      createCatAResult = createCategory(\n+            slug = \"cat-a\",\n+            forumPageId = createForumOneResult.pagePath.pageId,\n+            parentCategoryId = createForumOneResult.rootCategoryId,\n+            authorId = SystemUserId,\n+            browserIdData,\n+            site1.dao)\n+\n+      catA = createCatAResult.category\n+\n+      ownerS1 = createPasswordOwner(\"6mwe2tr0\", site1.dao)\n+      userOneS1 = createPasswordUser(\"ff6622zz\", site1.dao, trustLevel = TrustLevel.BasicMember)\n+      userTwoS1 = createPasswordUser(\"mm33ww77\", site1.dao, trustLevel = TrustLevel.BasicMember)\n+    }\n \n     /*\n     \"Create test sites and things, try to fail fast\" in {"
    },
    {
      "sha": "71b16ff43685788ecf34ba3d78c0236499d842cb",
      "filename": "tests/app/talkyard/server/dao/SiteTxLoadParticipantsAppSpec.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Fdao%2FSiteTxLoadParticipantsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Fdao%2FSiteTxLoadParticipantsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Ftalkyard%2Fserver%2Fdao%2FSiteTxLoadParticipantsAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -77,6 +77,10 @@ class SiteTxLoadParticipantsAppSpec extends DaoAppSuite {\n       userBDetails = dao.loadTheUserInclDetailsById(userB.id)\n       guest = dao.loginAsGuest(GuestLoginAttempt(ip = \"2.2.2.2\", globals.now().toJavaDate,\n         name = \"Guestellina\", guestBrowserId = \"guestellinacookie\"))\n+      TESTS_MISSING // Create an anonym too? And load, below.\n+      // Already done here: debiki/dao/AnonymAppSpec.scala  but makes sense\n+      // in this spec too. And that other spec, AnonymAppSpec, could do more anon\n+      // specific things (whilst this spec, just creates & loads).\n     }\n \n "
    },
    {
      "sha": "a8138b68af7e4201af1693f24ade18cee3eca7e3",
      "filename": "tests/app/talkyard/server/links/LinksAppSpec.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Flinks%2FLinksAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Flinks%2FLinksAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Ftalkyard%2Fserver%2Flinks%2FLinksAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -64,6 +64,7 @@ class LinksAppSpec extends DaoAppSuite {\n   lazy val userMmm: User = createPasswordUser(\"u_mmm234\", daoSite1)\n   lazy val userOoo: User = createPasswordOwner(\"u_ooo567\", daoSite1)\n \n+  lazy val systemWho: Who = Who(TrueId(SystemUserId), browserIdData)\n \n \n   // ----- External links, oEmbed\n@@ -400,7 +401,7 @@ class LinksAppSpec extends DaoAppSuite {\n     \"Links from deleted *pages* are ignored  TyT7RD3LM5\" - {\n       \"Delete page A\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n         daoSite1.deletePagesImpl(\n-              Seq(pageA.id), SystemUserId, browserIdData)(tx, staleStuff)\n+              Seq(pageA.id), systemWho)(tx, staleStuff)\n       }\n \n       \"Now only pages B, C and D links to Z\".inReadTx(daoSite1) { tx =>\n@@ -416,8 +417,7 @@ class LinksAppSpec extends DaoAppSuite {\n       \"Delete page C's category\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n         pageC.anyCategoryId mustBe Some(defCatId) // page C will get deleted, implicitly, ttt\n         pageB.anyCategoryId mustBe Some(category2.id) // page B not affected, ttt\n-        daoSite1.deleteUndelCategoryImpl(defCatId, delete = true,\n-              Who(SystemUserId, browserIdData))(tx)\n+        daoSite1.deleteUndelCategoryImpl(defCatId, delete = true, systemWho)(tx)\n       }\n \n       \"Now only page B and D links to Z\".inReadTx(daoSite1) { tx =>\n@@ -433,12 +433,11 @@ class LinksAppSpec extends DaoAppSuite {\n \n     \"Undelete page A\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n       daoSite1.deletePagesImpl(\n-            Seq(pageA.id), SystemUserId, browserIdData, undelete = true)(tx, staleStuff)\n+            Seq(pageA.id), systemWho, undelete = true)(tx, staleStuff)\n     }\n \n     \"Undelete category\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n-      daoSite1.deleteUndelCategoryImpl(defCatId, delete = false,\n-            Who(SystemUserId, browserIdData))(tx)\n+      daoSite1.deleteUndelCategoryImpl(defCatId, delete = false, systemWho)(tx)\n     }\n \n     \"Now page A and C link to Z again, and B and D link too\".inReadTx(daoSite1) { tx =>\n@@ -468,7 +467,7 @@ class LinksAppSpec extends DaoAppSuite {\n \n     \"Delete page Z\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n       daoSite1.deletePagesImpl(\n-            Seq(pageZ.id), SystemUserId, browserIdData, undelete = true)(tx, staleStuff)\n+            Seq(pageZ.id), systemWho, undelete = true)(tx, staleStuff)\n     }\n \n     \"Can find links to deleted page Z\".inReadTx(daoSite1) { tx =>\n@@ -537,8 +536,7 @@ class LinksAppSpec extends DaoAppSuite {\n \n       \"Delete reply One\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n         daoSite1.deletePostImpl(\n-              pageEReplyOne.pageId, pageEReplyOne.nr, deletedById = SystemUserId,\n-              browserIdData, tx, staleStuff)\n+              pageEReplyOne.pageId, pageEReplyOne.nr, systemWho, tx, staleStuff)\n       }\n \n       \"Reply Two links to Q, and Re One too although post deleted\".inReadTx(daoSite1) { tx =>\n@@ -550,8 +548,7 @@ class LinksAppSpec extends DaoAppSuite {\n \n       \"Delete reply Two too\".inWriteTx(daoSite1) { (tx, staleStuff) =>\n         daoSite1.deletePostImpl(\n-              pageEReplyTwo.pageId, pageEReplyTwo.nr, deletedById = SystemUserId,\n-              browserIdData, tx, staleStuff)\n+              pageEReplyTwo.pageId, pageEReplyTwo.nr, systemWho, tx, staleStuff)\n       }\n \n       \"Now the posts still link to Q\".inReadTx(daoSite1) { tx =>"
    },
    {
      "sha": "34bb1b95e528d436f95f1bbf2893f26aa3081f1e",
      "filename": "tests/app/talkyard/server/summaryemails/SummaryEmailsAppSpec.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fapp%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsAppSpec.scala?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -158,6 +158,10 @@ class SummaryEmailsAppSpec extends DaoAppSuite(\n         defaultSortOrder = None,\n         comtOrder = None,\n         comtNesting = None,\n+        comtsStartHidden = None,\n+        comtsStartAnon = None,\n+        opStartsAnon = None,\n+        newAnonStatus = None,\n         doVoteStyle = None,\n         doVoteInTopicList = None,\n         shallBeDefaultCategory = false,"
    },
    {
      "sha": "6fd0a536bcf4842c9042ac9b14dfb826503b5540",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fpackage.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fpackage.json?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -14,7 +14,7 @@\n     \"@wdio/spec-reporter\": \"^7.20.3\",\n     \"@wdio/types\": \"^7.20.3\",\n     \"axios\": \"^0.26.1\",\n-    \"chromedriver\": \"^111.0.0\",\n+    \"chromedriver\": \"^112.0.0\",\n     \"paseto.js\": \"^0.1.7\",\n     \"ts-node\": \"^10.9.1\",\n     \"wdio-chromedriver-service\": \"^7.3.2\""
    },
    {
      "sha": "66956f4af477d5321647148bd5b411937ee4592b",
      "filename": "tests/e2e-wdio7/specs/assign-can-see.2br.d.e2e.ts",
      "status": "added",
      "additions": 344,
      "deletions": 0,
      "changes": 344,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fassign-can-see.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fassign-can-see.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fassign-can-see.2br.d.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,344 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let alice: Member;\n+let mons: Member;\n+let mons_brB: TyE2eTestBrowser;\n+let corax: Member;\n+let corax_brB: TyE2eTestBrowser;\n+let trillian: Member;\n+let trillian_brB: TyE2eTestBrowser;\n+let maja: Member;\n+let maja_brB: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+let coraxPubPrivPagePath = '/corax-pub-priv-page';\n+let alicesPubPrivPagePath = '/alices-pub-priv-page';\n+let privatePagePath = '/priv-page';\n+\n+\n+\n+describe(`assign-can-see.2br.d  TyTASSIGNCANSEE`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Assign-To Can See or Not E2E Test\",\n+      members: ['owen', 'alice', 'mons', 'corax', 'trillian', 'maja']\n+    });\n+\n+    builder.addPage({\n+      id: 'coraxPubThenPrivPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: coraxPubPrivPagePath.substring(1),\n+      role: c.TestPageRole.Idea,\n+      title: \"Corax Public then Private Task\",\n+      body: \"This is Corax_task, starts public, but is moved to the Staff-Only category.\",\n+      categoryId: forum.categories.catA.id,\n+      authorId: forum.members.maja.id,\n+    });\n+\n+    builder.addPage({\n+      id: 'alicesPubThenPrivPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: alicesPubPrivPagePath.substring(1),\n+      role: c.TestPageRole.Idea,\n+      title: \"Alice's Public then Private Task\",\n+      body: \"This is Alices_task, also starts public, but is moved to the Staff-Only category.\",\n+      categoryId: forum.categories.catA.id,\n+      authorId: forum.members.maja.id,\n+    });\n+\n+    builder.addPage({\n+      id: 'privatePageId',\n+      folder: '/',\n+      showId: false,\n+      slug: privatePagePath.substring(1),\n+      role: c.TestPageRole.Discussion,\n+      title: \"Private Task\",\n+      body: \"This is the Starts_Private task.\",\n+      categoryId: forum.categories.staffCat.id,\n+      authorId: forum.members.maja.id,\n+    });\n+\n+    // Disable notifications, or notf email counts will be off\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      //maxPostsPendApprBefore: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }];\n+\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+\n+    alice = forum.members.alice;\n+    mons = forum.members.mons;\n+    mons_brB = brB;\n+    corax = forum.members.corax;\n+    corax_brB = brB;\n+    trillian = forum.members.trillian;\n+    trillian_brB = brB;\n+    maja = forum.members.maja;\n+    maja_brB = brB;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Corax logs in to see his task list`, async () => {\n+    await corax_brB.userProfilePage.tasks.goHere(corax.username, { origin: site.origin });\n+    await corax_brB.complex.loginWithPasswordViaTopbar(corax);\n+  });\n+  it(`... it's empty`, async () => {\n+    await corax_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+\n+  // ----- Owen assigns tasks\n+\n+  it(`Owen goes to Corax topic, logs in ... `, async () => {\n+    await owen_brA.go2(site.origin + coraxPubPrivPagePath);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`... assigns it to Croax`, async () => {\n+    await owen_brA.topic.openAssignToDiag();\n+    await owen_brA.addUsersToPageDialog.addOneUser(corax.username);\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... sees Corax listed as assignee`, async () => {\n+    assert.deepEq(await owen_brA.topic.getAssigneesUsernamesNoAt(c.BodyNr), [corax.username]);\n+  });\n+\n+\n+  it(`Owen goes to Admin Alice's topic`, async () => {\n+    await owen_brA.go2(alicesPubPrivPagePath);\n+  });\n+  it(`... assigns it to Alice`, async () => {\n+    await owen_brA.topic.openAssignToDiag();\n+    await owen_brA.addUsersToPageDialog.addOneUser(alice.username);\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... sees Alice listed as assignee`, async () => {\n+    assert.deepEq(await owen_brA.topic.getAssigneesUsernamesNoAt(c.BodyNr), [alice.username]);\n+  });\n+\n+\n+  // ----- ttt: Corax sees his task\n+\n+  // Verify that Corax sees the task he's been assigned â€” so, when later he can't\n+  // see it, we know that he could, before (that there's no bug making it never show).\n+\n+  it(`Corax reloads his task list`, async () => {\n+    await corax_brB.refresh2();\n+  });\n+  it(`... sees the task Owen just gave him`, async () => {\n+    // (userProfilePage.activity.posts will later be its own page object. [post_list_e2e_obj])\n+    await corax_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Corax_task/);\n+    await corax_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... it's assigned to him (Corax)`, async () => {\n+    assert.deepEq(await corax_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'coraxPubThenPrivPageId' }), [corax.username]);\n+  });\n+\n+\n+  // ----- Core members can see others' tasks\n+\n+  // .Trusted_can_see too, tested further below.\n+\n+  it(`Corax looks at Alice's task list`, async () => {\n+    await corax_brB.userProfilePage.tasks.goHere(alice.username);\n+  });\n+  it(`... sees Alice's task`, async () => {\n+    await corax_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Alices_task/);\n+    await corax_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... it's assigned to Alice`, async () => {\n+    assert.deepEq(await corax_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'alicesPubThenPrivPageId' }), [alice.username]);\n+  });\n+\n+\n+  // ----- Move tasks to Staff-Only\n+\n+  it(`Owen moves Alice's task to the Staff-Only cat  (Corax then won't see it)`, async () => {\n+    assert.eq(await owen_brA.urlPath(), alicesPubPrivPagePath);\n+    await owen_brA.topic.movePageToOtherCategory(forum.categories.staffCat.name);\n+  });\n+  it(`... and moves Corax' task too  (Corax won't see it, althoug it's his)`, async () => {\n+    await owen_brA.go2(coraxPubPrivPagePath);\n+    await owen_brA.topic.movePageToOtherCategory(forum.categories.staffCat.name);\n+  });\n+\n+\n+  // ----- Corax now can't see assignees\n+\n+  it(`Corax reloads Alice's task list`, async () => {\n+    await corax_brB.refresh2();\n+  });\n+  it(`... it's empty â€” the task got moved to Staff-Only, but Corax isn't staff`, async () => {\n+    await corax_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+\n+  it(`Corax goes to his own task list`, async () => {\n+    await corax_brB.userProfilePage.tasks.goHere(corax.username);\n+  });\n+  it(`... it's empty too â€” his own task got moved to a category he can't see`, async () => {\n+    await corax_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+\n+\n+  // ----- Can't assign someone who can't see the task\n+\n+  it(`Owen goes to the already staff-only page`, async () => {\n+    await owen_brA.go2(site.origin + privatePagePath);\n+  });\n+  it(`... opens the Assign-To dialog`, async () => {\n+    await owen_brA.topic.openAssignToDiag();\n+  });\n+  it(`... adds Corax`, async () => {\n+    await owen_brA.addUsersToPageDialog.addOneUser(corax.username);\n+  });\n+  it(`... submits`, async () => {\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... there's an error â€” Corax cannot see this page. So cannot assign him`, async () => {\n+    await owen_brA.serverErrorDialog.waitAndAssertTextMatches(\n+            /@Corax cannot access .+TyERELPAT0SEEPOST_/);\n+    await owen_brA.serverErrorDialog.close();\n+  });\n+\n+  it(`Owen assigns Alice instead, and Mons â€” they're staff, can see the page`, async () => {\n+    // The Change dialog is already open, so only need to click the assign button.\n+    await owen_brA.waitAndClick('.e_AsgB');\n+    await owen_brA.addUsersToPageDialog.addOneUser(alice.username);\n+    await owen_brA.addUsersToPageDialog.addOneUser(mons.username);\n+  });\n+  it(`... submits, now works fine`, async () => {\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... Owen sees Alice and Mons listed as assignees`, async () => {\n+    assert.deepEq(await owen_brA.topic.getAssigneesUsernamesNoAt(c.BodyNr),\n+            [alice.username, mons.username]);\n+  });\n+\n+\n+  // ----- Corax still can't see (bit redundant test)\n+\n+  it(`Corax goes to Alice's task list`, async () => {\n+    await corax_brB.userProfilePage.tasks.goHere(alice.username);\n+  });\n+  it(`... he still can't see Alice's tasks â€” the list is empty`, async () => {\n+    await corax_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+\n+  it(`Corax leaves`, async () => {\n+    await corax_brB.topbar.clickLogout();\n+  });\n+\n+  it(`Strangers can't see Alice's tasks list at all`, async () => {\n+    await stranger_brB.userProfilePage.waitForBadRoute();\n+  });\n+\n+\n+  // ----- Moderators can see Staff-Only tasks\n+\n+  it(`Moderator Mons arrives`, async () => {\n+    await mons_brB.complex.loginWithPasswordViaTopbar(mons);\n+  });\n+  it(`Mons sees Alice's tasks â€” he can access the Staff-Only category`, async () => {\n+    await mons_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Starts_Private/);\n+    await mons_brB.userProfilePage.activity.posts.assertExactly(2);\n+  });\n+  it(`... they're assigned to Alice`, async () => {\n+    assert.deepEq(await mons_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'alicesPubThenPrivPageId' }), [alice.username]);\n+  });\n+  it(`... and to Alice and him (Mons)`, async () => {\n+    assert.deepEq(await mons_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'privatePageId' }), [alice.username, mons.username]);\n+  });\n+\n+\n+  // ----- Others can't see tasks, if can't see cat\n+\n+  it(`Trillian arrives`, async () => {\n+    await mons_brB.topbar.clickLogout();\n+    await trillian_brB.complex.loginWithPasswordViaTopbar(trillian);\n+  });\n+  it(`... she can't see any of Alices' tasks â€” they're in the Staff-Only cat`, async () => {\n+    await trillian_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+\n+\n+  // ----- Can't see own tasks, if can't see cat\n+  /*\n+  TESTS_MISSING, can impl right now, only trusted members can see others tasks, for now.\n+  it(`Maja arrives â€” she created the tasks`, async () => {\n+    await mons_brB.topbar.clickLogout();\n+    await maja_brB.complex.loginWithPasswordViaTopbar(maja);\n+  });\n+  */\n+\n+  // ----- Tasks become visible, if moved to publ cat.  &  .Trusted_can_see tasks\n+\n+  it(`Owen moves the private task to a public category`, async () => {\n+    assert.eq(await owen_brA.urlPath(), privatePagePath);\n+    await owen_brA.topic.movePageToOtherCategory(forum.categories.catA.name);\n+  });\n+\n+  it(`Trillian can now see that task (but not Alice's other task, still private)`, async () => {\n+    await trillian_brB.refresh2();\n+    await trillian_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Starts_Private/);\n+    await trillian_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+\n+  // Maybe good to test moving sth to private cat, and moving it back to a publ cat:\n+  it(`Owen moves Alice's other task back to the publ cat, too`, async () => {\n+    await owen_brA.go2(alicesPubPrivPagePath);\n+    await owen_brA.topic.movePageToOtherCategory(forum.categories.catA.name);\n+  });\n+\n+  it(`Trillian now sees both tasks`, async () => {\n+    await trillian_brB.refresh2();\n+    await trillian_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Starts_Private/);\n+\n+    // TESTS_MISSING: This won't work, finds the text in the first post instead (and fails).\n+    // Need to [match_specific_post]?\n+    // await trillian_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/Alices_task/);\n+\n+    // But at least this works:\n+    await trillian_brB.userProfilePage.activity.posts.assertExactly(2);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "2fcd6cee6b4374ba6897c0719ad7d88cb84169b3",
      "filename": "tests/e2e-wdio7/specs/assign-to-basic.2br.d.e2e.ts",
      "status": "added",
      "additions": 371,
      "deletions": 0,
      "changes": 371,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fassign-to-basic.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fassign-to-basic.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fassign-to-basic.2br.d.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,371 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+import c from '../test-constants';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let mons: Member;\n+let mons_brA: TyE2eTestBrowser;\n+let maja: Member;\n+let maria: Member;\n+let maria_brB: TyE2eTestBrowser;\n+let memah: Member;\n+let memah_brB: TyE2eTestBrowser;\n+let michael: Member;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoCatsTestForum;\n+\n+let buyCreamPagePath = '/buy-cream';\n+let buyMilkPagePath = '/buy-milk';\n+\n+\n+\n+describe(`assign-to-basic.2br.d  TyTASSIGN01`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoCatsForum({\n+      title: \"Assign-To E2E Test\",\n+      members: ['owen', 'mons', 'maja', 'maria', 'memah', 'michael']\n+    });\n+\n+    builder.addPage({\n+      id: 'buyCreamPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: buyCreamPagePath.substring(1),\n+      role: c.TestPageRole.Idea,\n+      title: \"Buy cream\",\n+      body: \"We have milk but we need cream too. Can we buy cream or take from our neighbor?\",\n+      categoryId: forum.categories.categoryA.id,\n+      authorId: forum.members.maja.id,\n+    });\n+\n+    builder.addPage({\n+      id: 'buyMilkPageId',\n+      folder: '/',\n+      showId: false,\n+      slug: buyMilkPagePath.substring(1),\n+      role: c.TestPageRole.Discussion,\n+      title: \"Buy milk also\",\n+      body: \"We have lots of milk and it's always good with more. Hence, buy more milk?\",\n+      categoryId: forum.categories.categoryA.id,\n+      authorId: forum.members.maja.id,\n+    });\n+\n+    // Disable notifications, or notf email counts will be off\n+    // (since Owen would get emails).\n+    builder.settings({\n+      numFirstPostsToApprove: 0,\n+      //maxPostsPendApprBefore: 0,\n+      numFirstPostsToReview: 0,\n+    });\n+    builder.getSite().pageNotfPrefs = [{\n+      memberId: forum.members.owen.id,\n+      notfLevel: c.TestPageNotfLevel.Muted,\n+      wholeSite: true,\n+    }];\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    mons = forum.members.mons;\n+    mons_brA = brA;\n+\n+    maja = forum.members.maja;\n+    maria = forum.members.maria;\n+    maria_brB = brB;\n+    memah = forum.members.memah;\n+    memah_brB = brB;\n+    michael = forum.members.michael;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+  });\n+\n+\n+  it(`Owen goes to Maja's milk topic, logs in ... `, async () => {\n+    await owen_brA.go2(site.origin + buyMilkPagePath);\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+\n+  it(`Memah goes to the milk topic too, logs in`, async () => {\n+    await memah_brB.go2(site.origin + buyMilkPagePath);\n+    await memah_brB.complex.loginWithPasswordViaTopbar(memah);\n+  });\n+\n+\n+  // ----- Admins can assign\n+\n+  it(`Memah doesn't see any Change or Assign buttons`, async () => {\n+    await memah_brB.assertNotExists(brB.topic.changePageBtnSel);\n+  });\n+  it(`... but Owen does. He opens the Assign-To dialog`, async () => {\n+    await owen_brA.topic.openAssignToDiag();\n+  });\n+  it(`... assigns the buy-milk topic to Memah`, async () => {\n+    await owen_brA.addUsersToPageDialog.addOneUser(memah.username);\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... sees Memah now listed as assignee`, async () => {\n+    assert.deepEq(await owen_brA.topic.getAssigneesUsernamesNoAt(c.BodyNr), [memah.username]);\n+  });\n+\n+\n+  // ----- Assignees get notified, & others\n+\n+  it(`Memah gets a notification   UNIMPL  TESTS_MISSING`, async () => {\n+  });\n+  it(`Maja also â€” it's her page, she wants to know   UNIMPL  TESTS_MISSING`, async () => {\n+  });\n+\n+\n+  // ----- Task list\n+\n+  it(`Memah looks at her task list`, async () => {\n+    await memah_brB.topbar.clickGoToProfile();\n+    await memah_brB.userProfilePage.tabs.switchToTasks({ wait: false });\n+  });\n+  it(`... the topic is listed there`, async () => {\n+    // (userProfilePage.activity.posts will later be its own page object. [post_list_e2e_obj])\n+    await memah_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await memah_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... assigned to her (Memah)`, async () => {\n+    assert.deepEq(await memah_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [memah.username]);\n+  });\n+\n+  it(`Memah leaves`, async () => {\n+    await memah_brB.topbar.clickLogout();\n+  });\n+\n+\n+  // ----- Strangers can't see one's tasks\n+\n+  it(`A stranger cannot see Memah's task list  TyTASGNPERMS01`, async () => {\n+    await stranger_brB.userProfilePage.waitForBadRoute();\n+  });\n+\n+  it(`Maria arrives`, async () => {\n+    await maria_brB.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+  it(`Maria can see Memah's task list â€” by default, members can see others' tasks\n+                OOOPS NO THEY CANNOT, fix?  Or allow trusted members?`, async () => {\n+    /*\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(1);\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [memah.username]);\n+    */\n+  });\n+\n+\n+  // ----- Change assignees\n+\n+  it(`Maria goes to the buy-milk page`, async () => {\n+    await maria_brB.go2(buyMilkPagePath);\n+  });\n+  it(`... sees it's assigned to Memah`, async () => {\n+    assert.deepEq(await maria_brB.topic.getAssigneesUsernamesNoAt(c.BodyNr),\n+            [memah.username]); // fok\n+  });\n+\n+  it(`Owen opens the assignees dialog again ...`, async () => {\n+    await owen_brA.topic.openAssignToDiag();\n+  });\n+  it(`... clears current assignees (Memah)`, async () => {\n+    await owen_brA.addUsersToPageDialog.clear();\n+  });\n+  it(`... assigns Maria and Michael instead`, async () => {\n+    await owen_brA.addUsersToPageDialog.addOneUser(maria.username);\n+    await owen_brA.addUsersToPageDialog.addOneUser(michael.username);\n+    await owen_brA.addUsersToPageDialog.submit();\n+  });\n+  it(`... sees Maria and Michael now listed as assignees`, async () => {\n+    assert.deepEq(await owen_brA.topic.getAssigneesUsernamesNoAt(c.BodyNr),\n+            [maria.username, michael.username]);\n+  });\n+\n+\n+  // ----- Notifications about changes\n+\n+  it(`Memah gets a notification about no longer being assigned   UNIMPL TESTS_MISSING`, async () => {\n+  });\n+  it(`Maria gets a notification about having been assigned   UNIMPL TESTS_MISSING`, async () => {\n+  });\n+  it(`Michael too   UNIMPL TESTS_MISSING`, async () => {\n+  });\n+  it(`Maja also â€” it's her page   UNIMPL TESTS_MISSING`, async () => {\n+  });\n+\n+  it(`Maria reloads the page again ...`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+  it(`... sees it's assigned to her and Michael`, async () => {\n+    assert.deepEq(await maria_brB.topic.getAssigneesUsernamesNoAt(c.BodyNr),\n+            [maria.username, michael.username]);   // SORT ORDER? else, flaky test\n+  });\n+\n+\n+  // ----- All assignees shown in task list\n+\n+  // (Not just oneself.)\n+\n+  it(`Maria looks at her task list`, async () => {\n+    await maria_brB.topbar.clickGoToProfile();\n+    await maria_brB.userProfilePage.tabs.switchToTasks({ wait: false });\n+  });\n+  it(`... the topic is listed, there`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... assigned to her (Maria) and Michael`, async () => {\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);  // fok\n+  });\n+\n+\n+  // ----- Admins can se everyone's task lists\n+\n+  it(`Owen looks at Maria's task list too`, async () => {\n+    await owen_brA.userProfilePage.tasks.goHere(maria.username);\n+  });\n+  it(`... sees the more-milk topic is listed as a task`, async () => {\n+    await owen_brA.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await owen_brA.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... assigned to Maria and Michael`, async () => {\n+    assert.deepEq(await owen_brA.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);  // fok\n+  });\n+\n+\n+  // ----- Moderators can also see others' task lists\n+\n+  // And core members & trusted members can too â€” that's tested in:\n+  // assign-can-see.2br.d  TyTASSIGNCANSEE\n+\n+  it(`Owen leaves, moderator Mons arrives`, async () => {\n+    await owen_brA.topbar.clickLogout();\n+    await mons_brA.complex.loginWithPasswordViaTopbar(mons);\n+  });\n+  it(`Mons too sees the more-milk topic is listed as a task`, async () => {\n+    await mons_brA.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await mons_brA.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... assigned to Maria and Michael`, async () => {\n+    assert.deepEq(await mons_brA.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);\n+  });\n+\n+\n+  // ----- Moderators can assign\n+\n+  it(`Mons likes cream. He goes to the buy-cream topic`, async () => {\n+    await mons_brA.go2(buyCreamPagePath);\n+  });\n+\n+  it(`... assigns the buy-cream topic to Maria`, async () => {\n+    await mons_brA.topic.openAssignToDiag();\n+    await mons_brA.addUsersToPageDialog.addOneUser(maria.username);\n+    await mons_brA.addUsersToPageDialog.submit();\n+  });\n+\n+  it(`... Maria reloads, sees two tasks in her task list`, async () => {\n+    await maria_brB.refresh2();\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/buy cream/);\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(2);\n+  });\n+  it(`... namely buy-cream, assigned to her`, async () => {\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyCreamPageId' }), [maria.username]);\n+  });\n+  it(`... and buy-milk, assigned to her and Michael`, async () => {\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);\n+  });\n+\n+\n+\n+  it(`Mons marks the buy-cream task (i.e. the page) as Done`, async () => {\n+    await mons_brA.topic.setDoingStatus('Done');\n+  });\n+\n+  it(`Assignees can change Doing status: Maria changes back to Doing  UNIMPL TESTS_MISSING`, async () => {\n+    // And says \"I'm not done yet\"?\n+  });\n+\n+  it(`Maria buys cream. Unimplemented`, async () => {\n+    // How do this? I websearched for Milk-as-a-Service, but found no\n+    // free and open source price plan\n+  });\n+\n+  it(`... Maria changes to Done  UNIMPL TESTS_MISSING`, async () => {\n+  });\n+\n+  it(`The cream task disappears from Maria's task list`, async () => {\n+    await maria_brB.refresh2();\n+    await maria_brB.userProfilePage.activity.posts.waitForPostTextsVisible(/buy more milk/);\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+\n+  it(`... but if she ticks the Include-closed checkbox ...`, async () => {\n+    await maria_brB.userProfilePage.tasks.setIncludeClosed(true);\n+  });\n+\n+  it(`... it appears again, with her as assignee`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(2);\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyCreamPageId' }), [maria.username]);\n+  });\n+  it(`... it's status is Done (and done topics, are implicitly closed)  UNIMPL  TESTS_MISSING`, async () => {\n+    // Should break out show-title code, reuse in profile page posts  [same_title_everywhere]\n+    // so titles shown as done/closed/etc,  before can add this test?\n+  });\n+  it(`The other task â€” buy milk â€” is there too`, async () => {\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);\n+  });\n+\n+  it(`... she un-ticks Include-closed â€” and buy-cream get hidden`, async () => {\n+    await maria_brB.userProfilePage.tasks.setIncludeClosed(false);\n+    await maria_brB.userProfilePage.activity.posts.assertExactly(1);\n+  });\n+  it(`... the buy-milk task is still listed`, async () => {\n+    assert.deepEq(await maria_brB.userProfilePage.activity.posts.getAssigneeUsernamesNoAt({\n+            forPageId: 'buyMilkPageId' }), [maria.username, michael.username]);\n+  });\n+\n+  it(`Mons says \"Cream is better\", and closes the milk topic`, async () => {\n+    await mons_brA.go2(buyMilkPagePath);\n+    await mons_brA.topic.closeTopic();\n+  });\n+\n+  it(`Maria reloads her task list page`, async () => {\n+    await maria_brB.refresh2();\n+  });\n+  it(`... all tasks are gone: done or closed`, async () => {\n+    await maria_brB.userProfilePage.activity.posts.waitForNoPosts();\n+  });\n+});\n+"
    },
    {
      "sha": "e8b4e33c3e3a64ee0158fd9fe39873e9cca7a173",
      "filename": "tests/e2e-wdio7/specs/cannot-reply-via-email.2br.e2e.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fcannot-reply-via-email.2br.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fcannot-reply-via-email.2br.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fcannot-reply-via-email.2br.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -165,6 +165,10 @@ describe(`cannot-reply-via-email.2br  TyTE0REVIAEML`, () => {\n     await memah_brB.complex.replyToOrigPost(memahsReplyToOwen);\n   });\n   it(`... Owen gets a reply notification`, async () => {\n+    // Ooops, instead he gets a notf of his own reply as anon!\n+    // ANON_UNIMPL, TESTS_MISSING: Won't get notified about reply to own anon reply,\n+    // or own anon reply to own real-id reply.\n+    //\n     replyNotfEmailToOwen = await server.getLastEmailSenTo(site.id, owen.emailAddress);\n     const body = replyNotfEmailToOwen.bodyHtmlText;\n     assert.includes(body, memahsReplyToOwen);"
    },
    {
      "sha": "a67ba80678f06d5b84d0f9ee9947607a0e46500f",
      "filename": "tests/e2e-wdio7/specs/direct-messages-notfs.3br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fdirect-messages-notfs.3br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fdirect-messages-notfs.3br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fdirect-messages-notfs.3br.d.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -325,7 +325,7 @@ describe(`direct-messages-notfs.3br.d  TyT602RKDL42`, () => {\n \n   it(\"not via profile page\", async () => {\n     await maria.userProfilePage.openNotfsFor(maria.username, idAddress.origin);\n-    await maria.userProfilePage.notfs.assertMayNotSeeNotfs();\n+    await maria.userProfilePage.waitForBadRoute();\n   });\n \n   it(\"not when searching\", async () => {"
    },
    {
      "sha": "22269d07342ea5c0d5c6bdf57ec96060f5e90c38",
      "filename": "tests/e2e-wdio7/specs/embcom.expimpjson.import-tests-impl.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.expimpjson.import-tests-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.expimpjson.import-tests-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fembcom.expimpjson.import-tests-impl.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -297,7 +297,7 @@ function constructEmbCommentsImportTest(testName: string, variants: {\n     });\n \n \n-    it(`Maria goes to ${embPages.slugs.guestReplyPageSlug}`, async () => {\n+    it(`Maria goes to ${embPages.slugs.guestReplyPageSlug}  (not logged in)`, async () => {\n       await mariasBrowser.go2(embeddingOrigin + embPages.slugs.guestReplyPageSlug);\n     });\n \n@@ -360,7 +360,7 @@ function constructEmbCommentsImportTest(testName: string, variants: {\n     });\n \n \n-    it(`... sees a Like vote`, async () => {\n+    it(`... sees a Like vote  (still not logged in)`, async () => {\n       await mariasBrowser.switchToEmbeddedCommentsIrame();\n       await mariasBrowser.topic.waitForLikeVote(c.BodyNr);\n     });"
    },
    {
      "sha": "77565eed043d78147919b8fb374aa03b02446a8a",
      "filename": "tests/e2e-wdio7/specs/link-previews-all-others.1br.d.extln.e2e.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Flink-previews-all-others.1br.d.extln.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Flink-previews-all-others.1br.d.extln.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Flink-previews-all-others.1br.d.extln.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -22,6 +22,8 @@ let forumTitle = \"Link Previews Forum\";\n \n interface LinkPreviewProvider2 extends LinkPreviewProvider {\n   name: St;\n+  skipBecause?: St;\n+\n   inSandboxedIframe?: Bo;\n   inDoubleIframe?: Bo;\n \n@@ -80,6 +82,13 @@ let providersToTest: ProvidersMap = {\n   },  */\n \n   reddit: {\n+    // There's a \"Cannot connect\" or \"Connection refused\" error or sth like that,\n+    // apparently because of Ty's iframe â€” the preview works if not wrapping\n+    // the Reddit iframe in Ty's iframe. But not wrapping, is risky? In case Reddit's\n+    // iframe is configured to allow scripts in the iframe, to reach outside the iframe?\n+    // And if Reddit gets hacked, their scripts or iframes get compromized.\n+\n+    skipBecause: `Reddit's iframe in Ty's iframe has stopped working`,\n     name: \"Reddit\",\n     inSandboxedIframe: true,\n     // Reddit sometimes wraps their embeds in their own sandboxed iframe â€”Â Ty does too;\n@@ -138,7 +147,7 @@ let providersToTest: ProvidersMap = {\n     // \"You shall not pass.\"\n     linkInReply: 'https://www.youtube.com/watch?v=S7znI_Kpzbs',\n   }\n-}\n+};\n \n \n if (settings.only3rdParty) {\n@@ -178,6 +187,11 @@ describe(\"'All other' link previews  TyT550RMHJ25\", () => {\n     const previewOkSelector = utils.makePreviewOkSelector(provider);\n     const previewBrokenSelector = utils.makePreviewBrokenSelector(provider);\n \n+    if (provider.skipBecause) {\n+      console.warn(`Skipping ${provider.name} previews, because: ${provider.skipBecause}.`);\n+      return;\n+    }\n+\n     it(`\\n\\n*** Testing ${provider.name} ***\\n\\n` +\n           `Owen goes to the topic list page`, async () => {\n       await owensBrowser.go2('/');"
    },
    {
      "sha": "8fd9a093bfe8f9e29f83e49c76e38c3fc2fea2b3",
      "filename": "tests/e2e-wdio7/specs/may-see-email-adrs.2br.d.e2e.ts",
      "status": "added",
      "additions": 306,
      "deletions": 0,
      "changes": 306,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fmay-see-email-adrs.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fspecs%2Fmay-see-email-adrs.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fmay-see-email-adrs.2br.d.e2e.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1,306 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert from '../utils/ty-assert';\n+import server from '../utils/server';\n+import { buildSite } from '../utils/site-builder';\n+import { TyE2eTestBrowser, TyAllE2eTestBrowsers } from '../utils/ty-e2e-test-browser';\n+\n+let allBrowsers: TyAllE2eTestBrowsers;\n+let brA: TyE2eTestBrowser;\n+let brB: TyE2eTestBrowser;\n+let owen: Member;\n+let owen_brA: TyE2eTestBrowser;\n+let modya: Member;\n+let modya_brB: TyE2eTestBrowser;\n+let corax: Member;\n+let corax_brB: TyE2eTestBrowser;\n+let regina: Member;\n+let regina_brB: TyE2eTestBrowser;\n+let michael: Member;\n+let stranger_brA: TyE2eTestBrowser;\n+let stranger_brB: TyE2eTestBrowser;\n+\n+let site: IdAddress;\n+let forum: TwoPagesTestForum;\n+\n+let michaelsTopicUrl: St;\n+\n+\n+\n+describe(`may-see-email-adrs.2br.d  TyTSEEEMLADRS01`, () => {\n+\n+  it(`Construct site`, async () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"May see email addrs E2E Test\",\n+      members: ['owen', 'modya', 'corax', 'regina', 'maria', 'michael'],\n+    });\n+\n+    allBrowsers = new TyE2eTestBrowser(allWdioBrowsers, 'brAll');\n+    brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');\n+    brB = new TyE2eTestBrowser(wdioBrowserB, 'brB');\n+\n+    owen = forum.members.owen;\n+    owen_brA = brA;\n+    stranger_brA = brA;\n+\n+    modya = forum.members.modya;\n+    modya_brB = brB;\n+    corax = forum.members.corax;\n+    corax_brB = brB;\n+    regina = forum.members.regina;\n+    regina_brB = brB;\n+    michael = forum.members.michael;\n+    stranger_brB = brB;\n+\n+    assert.refEq(builder.getSite(), forum.siteData);\n+  });\n+\n+  it(`Import site`, async () => {\n+    site = await server.importSiteData(forum.siteData);\n+    await server.skipRateLimits(site.id);\n+    michaelsTopicUrl = site.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n+  });\n+\n+\n+  // ----- Strangers can't see others' email addrs\n+\n+  it(`A stranger goes to Michael's page`, async () => {\n+    await stranger_brB.go2(michaelsTopicUrl);\n+  });\n+\n+  addSeeEmailAdrTestSteps(`The stranger`, `can't`, function() { return {\n+          br: stranger_brB, expectedAdr: () => null }});\n+\n+\n+  // ----- Strangers can't access permission tabs\n+\n+  it(`The stranger tries to view the moderators' permission settings, ... `, async () => {\n+    await stranger_brB.userProfilePage.openPermissionsFor('moderators', site.origin);\n+  });\n+  it(`... but sees nothing  TyT0ACCESSPERMS04`, async () => {\n+    await stranger_brB.userProfilePage.waitForBadRoute();\n+    assert.not(await stranger_brB.isDisplayed('.s_PP_PrmsTb'));\n+  });\n+\n+\n+  // ----- Moderators can access, but not edit\n+\n+  it(`Moderator Modya logs in`, async () => {\n+    await modya_brB.complex.loginWithPasswordViaTopbar(modya);\n+  });\n+  it(`... can access the perms tab (since is moderator)  TyT0ACCESSPERMS04`, async () => {\n+    await modya_brB.userProfilePage.waitForBadRouteGone();\n+    await modya_brB.userProfilePage.assertOkRoute();\n+  });\n+  it(`... but all settings are disabled  TyTCANCONFSEEML`, async () => {\n+    assert.that(await modya_brB.userProfilePage.permissions.canGrantMaySeeEmailAdrs({\n+          butIsDisabled: true }));\n+    // CLEAN_UP break out fn?\n+    //  [canSeeAllowedUploadSizeInput]\n+    //  [canSeeAllowedUploadExtensionsInput]\n+    await modya_brB.waitForDisplayed('.s_PP_PrmsTb_UplMiB input:disabled');\n+    await modya_brB.waitForDisplayed('.s_PP_PrmsTb_UplExts textarea:disabled');\n+  });\n+\n+\n+  // ----- Admins can access & edit\n+\n+  it(`Owen logs in`, async () => {\n+    await owen_brA.userProfilePage.permissions.goHere('moderators', {\n+            origin: site.origin, wait: false });\n+    await owen_brA.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+  it(`... he's admin, can see the permissions tab  TyT0ACCESSPERMS04`, async () => {\n+    await owen_brA.userProfilePage.permissions.waitUntilLoaded({ withSaveBtn: true });\n+    await owen_brA.userProfilePage.assertOkRoute();\n+  });\n+  it(`... and can configure may-see-email-addrs  TyTCANCONFSEEML`, async () => {\n+    assert.that(await owen_brA.userProfilePage.permissions.canGrantMaySeeEmailAdrs(), \n+            `!canGrantMaySeeEmailAdrs`);\n+  });\n+\n+\n+  // ----- Moderators can see others' email domains\n+\n+  // But not the local part.\n+\n+  it(`Modya goes to Michael's page`, async () => {\n+    await modya_brB.go2(michaelsTopicUrl);\n+  });\n+\n+  addSeeEmailAdrTestSteps(`Modya`, 'can', function() { return {\n+          br: modya_brB, expectedAdr: () => michael.emailAddress, localPartIsDots: true }});\n+\n+\n+  // ----- Admins can let Mods see whole addresses\n+\n+  it(`Owen grants mods permission to see everyone's email addrs  TyTCANCONFSEEML`, async () => {\n+    await owen_brA.userProfilePage.permissions.setMaySeeEmailAdrs(true);\n+    await owen_brA.userProfilePage.permissions.save();\n+  });\n+\n+  it(`Modya reloads the page ...`, async () => {\n+    await modya_brB.refresh2();\n+  });\n+\n+  addSeeEmailAdrTestSteps(`Modya`, `can now`, function() { return {\n+          br: modya_brB, expectedAdr: () => michael.emailAddress }});\n+\n+\n+  // ----- Admins can let Core Members see whole addresses\n+\n+  it(`Modya leaves, Corax logs in`, async () => {\n+    await modya_brB.topbar.clickLogout();\n+    await corax_brB.complex.loginWithPasswordViaTopbar(corax);\n+  });\n+\n+  // By default, core members can't see others' email addrs.\n+  addSeeEmailAdrTestSteps(`Corax`, `cannot `, function() { return {\n+          br: corax_brB, expectedAdr: () => null }});\n+\n+  it(`Owen navigates to the Core Members' permissions tab  TyT0ACCESSPERMS04`, async () => {\n+    await owen_brA.topbar.clickBackToGroups();\n+    await owen_brA.groupListPage.openGroupWithUsername('core_members');\n+    await owen_brA.userProfilePage.tabs.switchToPermissions();\n+  });\n+\n+  it(`Owen grants core members the view email addrs permission, too`, async () => {\n+    await owen_brA.userProfilePage.permissions.setMaySeeEmailAdrs(true);\n+    await owen_brA.userProfilePage.permissions.save();\n+  });\n+  it(`Corax reloads the page ...`, async () => {\n+    await corax_brB.refresh2();\n+  });\n+\n+  addSeeEmailAdrTestSteps(`Corax`, `can now `, function() { return {\n+          br: corax_brB, expectedAdr: () => michael.emailAddress }});\n+\n+\n+  // ----- Others can never see others' email addrs\n+\n+  it(`Corax leaves, Regina logs in`, async () => {\n+    await corax_brB.topbar.clickLogout();\n+    await regina_brB.complex.loginWithPasswordViaTopbar(regina);\n+  });\n+\n+  addSeeEmailAdrTestSteps(`Regina isn't a core member, `, `cannot `, function() { return {\n+          br: regina_brB, expectedAdr: () => null }});\n+\n+  it(`Owen navigates to the Regular Members group, permissions tab`, async () => {\n+    await owen_brA.topbar.clickBackToGroups();\n+    await owen_brA.groupListPage.openGroupWithUsername('regular_members');\n+    await owen_brA.userProfilePage.tabs.switchToPermissions();\n+  });\n+  it(`... he can *not* grant the see-email-adrs permission â€”   TyTCANCONFSEEML\n+            only Core Members and Moderators can be granted that permission`, async () => {\n+    assert.not(await owen_brA.userProfilePage.permissions.canGrantMaySeeEmailAdrs(),\n+            `Can grant see-email-addrs to non-core members`);\n+  });\n+\n+\n+  // ----- /End.\n+\n+\n+  function addSeeEmailAdrTestSteps(who: St, canOrNot: St,\n+          ps: () => { br: TyE2eTestBrowser, expectedAdr: () => St | N, localPartIsDots?: true }) {\n+\n+    const expectedAdr = () => {\n+      let adr = ps().expectedAdr();\n+      // This'll be like:  '...@example.com' because mods can always see the email domain.\n+      if (ps().localPartIsDots) return adr.replace(/.*@/, '...@');  // TyTHIDELOCALEMLPART\n+      else return adr;\n+    }\n+\n+    // (Ok although ps().br is still undefined)\n+    const butNotTheLocalPart = ps().localPartIsDots ?\n+            ` â€” but not the local part, it's been replaced by '...'` : '';\n+\n+    // ((We're looking at *Michael*'s groups, which is Basic Members always, regardless\n+    // of who the currently logged in user is.))\n+    it(`${who} sees that Michaels is in the Basic Members group  TyTSEEPATSGROUPS`, async () => {\n+      await ps().br.pageTitle.openAboutAuthorDialog();\n+      assert.deepEq(await ps().br.aboutUserDialog.getGroupNames(), [\"Basic Members\"]);\n+    });\n+\n+    it(`${who} ${canOrNot} see Michaels email addr in the about user dialog  TyTABOUTBOXEML` +\n+            butNotTheLocalPart, async () => {\n+      assert.eq(await ps().br.aboutUserDialog.getEmailAdrOrNull(), expectedAdr());\n+      if (expectedAdr() === null) {\n+        // Make sure there won't be any email addr, by waiting for this .e_0Em class.\n+        // Otherwise maybe maybe the browser just wasn't done rendering,\n+        // or a HTTP response hadn't arrived, or sth like that.\n+        await ps().br.waitForExist('.s_UD .e_0Em');\n+      }\n+    });\n+\n+    // One's email address is shown on one's profile page, at two places, as well\n+    // (in addition to in the about-user box, tested above).\n+    // The first is /-/users/michael/preferences/about:   [.two_places]\n+    it(`... goes to Michael's profile page`, async () => {\n+      await ps().br.aboutUserDialog.clickViewProfile();\n+    });\n+\n+    it(`... ${canOrNot} see Michael's preferences tab link  TyT0ACSPREFS01`, async () => {\n+      // Ttt, and wait until loaded:\n+      assert.eq(await ps().br.userProfilePage.waitAndGetUsername(), 'michael');\n+\n+      // If can't see, there's nothing this user can see in the preferences tab, and\n+      // the switch-to-tab nav should be gone.\n+      assert.eq(await ps().br.userProfilePage.tabs.isPreferencesTabDisplayed(),\n+              expectedAdr() !== null);\n+    });\n+    it(`... ${canOrNot} see Michael's email addr in that tab`, async () => {\n+      if (expectedAdr() === null) {\n+        // If going there anyway (manually editing the browser URL), there should be an error.\n+        await ps().br.userProfilePage.preferences.goHere('michael');\n+        await ps().br.userProfilePage.waitForBadRoute();\n+      }\n+      else {\n+        // If we may see the email addr, we can click the Preferences tab\n+        // (rather than editing the browser URL).\n+        await ps().br.userProfilePage.tabs.switchToPreferences();\n+        const primaryAdr = await ps().br.userProfilePage.preferences.getPrimaryEmailAdr();\n+        assert.eq(primaryAdr, expectedAdr());\n+      }\n+    });\n+\n+    // TESTS_MISSING: Verify local part replaced by '...' (like so: '...@ex.co')\n+    // also on the accounts sub tab. Not that interesting though, so can wait â€” currently\n+    // that tab throws a may-not-see-email-addr exception if one may not. Minor UX BUG, fix.\n+    if (butNotTheLocalPart) {\n+      it(`... UNIMPL when cannot see local part:  goes to Michael's account tab`, async () => {\n+        // Instead, for now:\n+        await ps().br.topbar.clickBack();\n+      });\n+      return;\n+    }\n+\n+    // ... The second is /-/users/michael/preferences/account:  [.two_places]\n+    it(`... ${canOrNot} goes to Michael's account tab`, async () => {\n+      if (expectedAdr() === null) {\n+        await ps().br.userProfilePage.preferences.emailsLogins.goHere('michael');\n+      }\n+      else {\n+        await ps().br.userProfilePage.preferences.tabs.switchToAccount();\n+      }\n+    });\n+    it(`... ${canOrNot} see Michaels email addr`, async () => {\n+      if (expectedAdr() === null) {\n+        await ps().br.userProfilePage.waitForBadRoute();\n+      }\n+      else {\n+        const adrs: St[] =\n+                await ps().br.userProfilePage.preferences.emailsLogins.getAllEmailAddresses();\n+        assert.deepEq(adrs, [expectedAdr()]);\n+      }\n+    });\n+\n+    it(`${who} clicks Back, returns to the discussion page`, async () => {\n+      await ps().br.topbar.clickBack();\n+    });\n+  }\n+\n+});\n+"
    },
    {
      "sha": "1dd42b557d4efad2bedd8d59fd167a0ef0bfd428",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 160,
      "deletions": 13,
      "changes": 173,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1526,6 +1526,13 @@ export class TyE2eTestBrowser {\n     }\n \n \n+    async assertNotExists(selector: St) {\n+      if (await this.isExisting(selector)) {\n+        tyAssert.fail(`This elem exists, but shouldn't:  ${selector} `);\n+      }\n+    }\n+\n+\n     async isDisplayedInViewport(selector: St): Pr<Bo> {\n       // Sometimes the elem methods below are missing, weird.  [MISSINGFNS]\n       const elem: WElm = await this.$(selector);\n@@ -2481,6 +2488,12 @@ export class TyE2eTestBrowser {\n     }\n \n \n+    async getVisibleTextOrNull(selector: St): Pr<St | N> {\n+      if (!await this.isDisplayed(selector)) return null;\n+      return await (await this.$(selector)).getText();\n+    }\n+\n+\n     async waitAndGetListTexts(selector: St): Pr<St[]> {\n       return await this.__waitAndGetThingsInList(selector, async (e) => await e.getText());\n     }\n@@ -3136,6 +3149,12 @@ export class TyE2eTestBrowser {\n         });\n       },\n \n+      clickBackToGroups: async () => {\n+        await this.repeatUntilAtNewUrl(async () => {\n+          await this.waitAndClick('.s_Tb_Ln-Grps');\n+        });\n+      },\n+\n       clickHome: async () => {\n         if (await this.isVisible('.esLegal_home_link')) {\n           await this.rememberCurrentUrl();\n@@ -5168,6 +5187,16 @@ export class TyE2eTestBrowser {\n         return await this.waitAndGetVisibleText('.s_UD_Un');\n       },\n \n+      getEmailAdrOrNull: async (): Pr<St | N> => {\n+        await this.aboutUserDialog.waitForLoaded();\n+        return await this.getVisibleTextOrNull('.s_UD_Em .e_EmAdr');\n+      },\n+\n+      getGroupNames: async (): Pr<St[]> => {\n+        await this.aboutUserDialog.waitForLoaded();\n+        return await this.waitAndGetListTexts('.s_UP_Ab_Stats_Stat_Groups_Group');\n+      },\n+\n       getBadgeTitles: async (howManyBadges: Nr): Pr<St[]> => {\n         // scope more precisely! or might get post tags [precise_tag_sels]\n         return this.widgets.tagList.getTagTitles('.s_UD', howManyBadges);\n@@ -5214,18 +5243,38 @@ export class TyE2eTestBrowser {\n \n \n     addUsersToPageDialog = {\n+      __placeholderSel: '#e2eAddUsD .Select-placeholder',\n+      __inputSel: '#e2eAddUsD .Select-input > input',\n+      __placeholderOrInputSel: () =>\n+            this.addUsersToPageDialog.__placeholderSel + ', ' +\n+            this.addUsersToPageDialog.__inputSel,\n+\n+      waitUntilLoaded: async () => {\n+        await this.waitForDisplayed('#e2eAddUsD');\n+      },\n+\n+      clear: async () => {\n+        await this.waitAndClick('#e2eAddUsD .Select-clear');\n+        // A bit fragile: (becomes useless if class 'has-value' renamed)\n+        await this.waitForDisplayed('#e2eAddUsD .Select--multi:not(.has-value)');\n+        // Better: The placeholder is shown only if the input is empty.\n+        await this.waitForDisplayed('#e2eAddUsD .Select-placeholder');\n+      },\n+\n       focusNameInputField: async () => {\n-        await this.waitAndClick('#e2eAddUsD .Select-placeholder');\n+        // (If the list is empty, we nee to click the placeholder. Otherwise, there's no\n+        // placeholder, and we need to click the <input>. So, using selector `...Or...`.)\n+        await this.waitAndClick(this.addUsersToPageDialog.__placeholderOrInputSel());\n       },\n \n       startTypingNewName: async (chars: St) => {\n         // Dupl code. [.react_select]\n-        await this.waitAndSetValue('#e2eAddUsD .Select-input > input', chars,\n+        await this.waitAndSetValue(this.addUsersToPageDialog.__inputSel, chars,\n             { okayOccluders: '.Select-placeholder', checkAndRetry: true });\n       },\n \n       appendChars: async (chars: St) => {\n-        await (await this.$('#e2eAddUsD .Select-input > input')).addValue(chars);\n+        await (await this.$(this.addUsersToPageDialog.__inputSel)).addValue(chars);\n       },\n \n       hitEnterToSelectUser: async () => {\n@@ -6254,12 +6303,12 @@ export class TyE2eTestBrowser {\n       },\n \n       getTopicAuthorUsernameInclAt: async (): Pr<St> => {\n-        return await this.waitAndGetVisibleText('.dw-ar-p-hd .esP_By_U');\n+        return await this.waitAndGetVisibleText('.dw-ar-p-hd .esP_By .esP_By_U');\n       },\n \n       getPostAuthorUsernameInclAt: async (postNr: PostNr): Pr<St> => {\n         const sel = this.topic.postHeaderSelector(postNr);\n-        return await this.waitAndGetVisibleText(sel + ' .esP_By_U');\n+        return await this.waitAndGetVisibleText(sel + ' .esP_By .esP_By_U');\n       },\n \n       getPostAuthorUsername: async (postNr: PostNr): Pr<St> => {\n@@ -6281,6 +6330,13 @@ export class TyE2eTestBrowser {\n         }\n       },\n \n+      getAssigneesUsernamesNoAt: async (postNr: PostNr): Pr<St[]> => {\n+        // Bit dupl code.  [.list_assignees]\n+        const sel = this.topic.postHeaderSelector(postNr);\n+        const atUsernames: St[] = await this.waitAndGetListTexts(sel + ' .c_AsgsL .esP_By_U');\n+        return atUsernames.map((atUn) => atUn.substring(1)); // drops '@' in '@username'\n+      },\n+\n       clickFirstMentionOf: async (username: St) => {\n         // This:  this.waitAndClick(`a.esMention=@${username}`);\n         // fails:\n@@ -6633,6 +6689,8 @@ export class TyE2eTestBrowser {\n         }\n       },\n \n+      changePageBtnSel: '.dw-a-change',\n+\n       openChangePageDialog: async () => {\n         await this.waitAndClick('.dw-a-change');\n         await this.topic.waitUntilChangePageDialogOpen();\n@@ -6723,6 +6781,12 @@ export class TyE2eTestBrowser {\n         await this.topic.waitUntilChangePageDialogGone();\n       },\n \n+      openAssignToDiag: async () => {\n+        await this.topic.openChangePageDialog();\n+        await this.waitAndClick('.e_AsgB');\n+        await this.addUsersToPageDialog.waitUntilLoaded();\n+      },\n+\n       _closeButtonSelector: '.s_ChPgD .e_ClosePgB',\n       _reopenButtonSelector: '.s_ChPgD .e_ReopenPgB',\n \n@@ -7243,6 +7307,21 @@ export class TyE2eTestBrowser {\n     userProfilePage = {\n       avatarAboutButtonsSelector: '.s_UP_AvtrAboutBtns',\n \n+      waitForBadRoute: async () => {\n+        await this.waitForDisplayed('.c_BadRoute');\n+      },\n+\n+      waitForBadRouteGone: async () => {\n+        await this.waitForGone('.c_BadRoute');\n+      },\n+\n+      assertOkRoute: async () => {\n+        if (await this.isExisting('.c_BadRoute')) {\n+          tyAssert.fail(`Bad route (but should be an ok route), ` +\n+                          `elem present:  .c_BadRoute  [TyEE2EBADROUTE]`);\n+        }\n+      },\n+\n       waitUntilUsernameVisible: async () => {\n         await this.waitForVisible('.esUP_Un');\n       },\n@@ -7355,12 +7434,21 @@ export class TyE2eTestBrowser {\n           }\n         },\n \n+        switchToTasks: async (ps: { wait: Bo }) => {\n+          dieIf(ps.wait !== false, `unimpl: wait !== false`);\n+          await this.waitAndClick('.e_UP_TsksB');\n+        },\n+\n         isPreferencesTabDisplayed: async (): Pr<Bo> => {\n           return await this.isDisplayed('#e2eUP_PrefsB');\n         },\n         switchToPreferences: async () => {\n           await this.userProfilePage.clickGoToPreferences();\n         },\n+        switchToPermissions: async () => {\n+          await this.waitAndClick('.e_PermsTabB');\n+          await this.userProfilePage.permissions.waitUntilLoaded();\n+        },\n       },\n \n       isInvitesTabVisible: async (): Pr<Bo> => {\n@@ -7492,6 +7580,8 @@ export class TyE2eTestBrowser {\n           },\n         },\n \n+        // REFACTOR: Break out `PostList` page object, because there're lists of posts at\n+        // different places: activity, tasks, the contextbar?  [post_list_e2e_obj]\n         posts: {\n           postSelector: '.s_UP_Act_Ps_P .dw-p-bd',\n \n@@ -7504,7 +7594,7 @@ export class TyE2eTestBrowser {\n           },\n \n           waitForNoPosts: async () => {\n-            await this.waitForVisible('.e_NoPosts');\n+            await this.waitForExist('.e_NoPosts');\n           },\n \n           assertExactly: async (num: Nr) => {\n@@ -7519,6 +7609,15 @@ export class TyE2eTestBrowser {\n                     within: '.s_UP_Act_Ps_P' });\n           },\n \n+          getAssigneeUsernamesNoAt: async (ps: { forPageId: PageId, postNr?: PostNr }): Pr<St[]> => {\n+            // E.g.:   .s_UP_Act_Ps_P:has(a[href=\"/-buyMilkPageId#post-1\"]) .dw-p-hd ...\n+            // Bit dupl code.  [.list_assignees]\n+            const sel = `.s_UP_Act_Ps_P:has(a[href=\"/-${ps.forPageId\n+                            }#post-${ps.postNr || c.BodyNr}\"]) .dw-p-hd .c_AsgsL .esP_By_U`;\n+            const atUsernames: St[] = await this.waitAndGetListTexts(sel);\n+            return atUsernames.map((atUn) => atUn.substring(1)); // drops '@' in '@username'\n+          },\n+\n           navToPost: async (ps: { anyOnPageId?: St, justClickFirst?: Bo } = {}) => {\n             dieIf(!!ps.anyOnPageId === !!ps.justClickFirst, 'TyE06WEJPF3');\n             const urlPath = ps.anyOnPageId && `/-${ps.anyOnPageId}`;\n@@ -7531,8 +7630,11 @@ export class TyE2eTestBrowser {\n           },\n \n           // Do this separately, because can take rather long (suprisingly?).\n-          waitForPostTextsVisible: async () => {\n-            await this.waitForVisible(this.userProfilePage.activity.posts.postSelector);\n+          // Later, add post id / URL param, so can [match_specific_post].\n+          waitForPostTextsVisible: async (match?: RegExp) => {\n+            const sel = this.userProfilePage.activity.posts.postSelector;\n+            if (match) await this.waitForTextVisibleAssertMatches(sel, match);\n+            else await this.waitForVisible(sel);\n           },\n \n           assertPostTextVisible: async (postText: St) => {\n@@ -7633,11 +7735,6 @@ export class TyE2eTestBrowser {\n             await this.waitForThenClickText('.esNotf_page', text);\n           });\n         },\n-\n-        assertMayNotSeeNotfs: async () => {\n-          await this.waitForVisible('.e_UP_Notfs_Err');\n-          await this.assertTextMatches('.e_UP_Notfs_Err', 'EdE7WK2L_');\n-        }\n       },\n \n       draftsEtc: {\n@@ -7674,6 +7771,20 @@ export class TyE2eTestBrowser {\n         },\n       },\n \n+      tasks: {\n+        goHere: async (username: St, ps: { isGroup?: true, origin?: St } = {}) => {\n+          await this.userProfilePage._goHere(username, ps, '/tasks');\n+        },\n+\n+        waitUntilLoaded: async () => {\n+          await this.waitForExist('.e_UP_TskL');\n+        },\n+\n+        setIncludeClosed: async (inclClosed: Bo) => {\n+          await this.setCheckbox('.e_InclCloTsks input', inclClosed);\n+        },\n+      },\n+\n       invites: {\n         clickSendInvite: async () => {\n           await this.waitAndClick('.e_SndInvB');\n@@ -7744,6 +7855,10 @@ export class TyE2eTestBrowser {\n           await this.waitAndSetValue('.e_UP_Prefs_FN input', fullName);\n         },\n \n+        getPrimaryEmailAdr: async (): Pr<St> => {\n+          return await this.waitAndGetVisibleText('.e_PrimEmAdr');\n+        },\n+\n         startChangingUsername: async () => {\n           await this.waitAndClick('.s_UP_Prefs_ChangeUNB');\n           await this.stupidDialog.close();\n@@ -7980,6 +8095,38 @@ export class TyE2eTestBrowser {\n             await this.waitForNewUrl();\n           }\n         }\n+      },\n+\n+      permissions: {\n+          goHere: async (username: St, ps: { isGroup?: true, origin?: St,\n+                  wait?: false } = {}) => {\n+            await this.userProfilePage._goHere(username, ps, '/permissions');\n+            if (ps.wait !== false) await this.userProfilePage.permissions.waitUntilLoaded();\n+          },\n+\n+          waitUntilLoaded: async (ps: { withSaveBtn?: Bo } = {}) => {\n+            dieIf(ps.withSaveBtn === false, `unimpl: withSaveBtn false`);\n+            const saveBtnSel = ps.withSaveBtn ? ' .e_SvPerms' : '';\n+            await this.waitForDisplayed('.s_PP_PrmsTb' + saveBtnSel);\n+          },\n+\n+          canGrantMaySeeEmailAdrs: async (ps: { butIsDisabled?: true } = {}): Pr<Bo> => {\n+            const butDisabled = ps.butIsDisabled ? ' input:disabled' : '';\n+            return await this.isDisplayed('.e_SeeEmls' + butDisabled);\n+          },\n+\n+          setMaySeeEmailAdrs: async (maySee: Bo) => {\n+            await this.setCheckbox('.e_SeeEmls input', maySee);\n+          },\n+\n+          // and?:\n+          //  [canSeeAllowedUploadSizeInput]\n+          //  [canSeeAllowedUploadExtensionsInput]\n+\n+          save: async () => {\n+            await this.waitAndClick('.e_SvPerms');\n+          },\n+\n       }\n     };\n "
    },
    {
      "sha": "c22804eeefcf00ba05f82adbff83fd28efc23c46",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fyarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e-wdio7%2Fyarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fyarn.lock?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1191,10 +1191,10 @@ chrome-launcher@^0.15.0:\n     is-wsl \"^2.2.0\"\n     lighthouse-logger \"^1.0.0\"\n \n-chromedriver@^111.0.0:\n-  version \"111.0.0\"\n-  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-111.0.0.tgz#ef704dc44524ce5c1eced283d523b7aefd59ee19\"\n-  integrity sha512-XavNYNBBfKIrT8Oi/ywJ0DoOOU+jHF5bQWTkqStFsAXvfCV9VzYN3J+TGAvZdrpXeoixqPRGUxQ2yZhD2iowdQ==\n+chromedriver@^112.0.0:\n+  version \"112.0.0\"\n+  resolved \"https://registry.yarnpkg.com/chromedriver/-/chromedriver-112.0.0.tgz#34c86f6cfc8f5e208100088dbb9563439243f8b2\"\n+  integrity sha512-fEw1tI05dmK1KK8MGh99LAppP7zCOPEXUxxbYX5wpIBCCmKasyrwZhk/qsdnxJYKd/h0TfiHvGEj7ReDQXW1AA==\n   dependencies:\n     \"@testim/chrome-version\" \"^1.1.3\"\n     axios \"^1.2.1\""
    },
    {
      "sha": "3d4dabe9139fcc1f9f8ff6ee001f6be7a431ea92",
      "filename": "tests/e2e/specs/embcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Fspecs%2Fembcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Fspecs%2Fembcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fembcom.sso.token-in-cookie.2br.test.ts--e2e-crypto-probl.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1,3 +1,45 @@\n+E2e tests for blog commets SSO are broken. Need to switch to another PASETO token lib.\n+\n+This js lib doesn't use the below-mentioned now-removed fn, and supports Paseto v3:\n+\n+  https://github.com/panva/paseto   â€” so switch to this instead.\n+\n+About v3 and v4:  https://paragonie.com/blog/2021/08/paseto-is-even-more-secure-alternative-jose-standards-jwt-etc\n+\n+  >  [Use] Version 3 (if you need NIST-approved algorithms)\n+\n+  [Or if the libs you can use don't support v4]\n+\n+\n+\n+Paseto.js doesn't work with newer Nodejs versions [paseto_broken], because\n+this Nodejs function:\n+     _ZN2v812api_internal12ToLocalEmptyEv  has been removed:\n+\n+  https://stackoverflow.com/questions/64970728/undefined-symbol-when-loading-node-addon-after-updating-node-js-from-v8-to-v12\n+\n+  >  ...\n+  >  Error: /home/user1/addon.node: undefined symbol:\n+  >    _ZNK2v88Function11NewInstanceEiPNS_5LocalINS_5ValueEEE\n+  >  ...\n+  >  I've found out that this undefined symbol\n+  >  _ZNK2v88Function11NewInstanceEiPNS_5LocalINS_5ValueEEE was previously defined\n+  >  in the node binary itself (in node v8 before update to node v12).\n+\n+  >  v8::Function::NewInstance(int, v8::Local<v8::Value>*) was removed in Node.js v10.\n+  >  The replacement [...]\n+  >  https://v8docs.nodesource.com/node-10.15/d5/d54/classv8_1_1_function.html#aac8391b7c084a5b487954990fdc9acf4\n+\n+\n+Here's where it's being referenced (indirectly, via extcrypto):\n+https://github.com/sjudson/paseto.js/blob/master/binding.gyp\n+\n+    \"target_name\": \"extcrypto_addon\",\n+    \"sources\": [ \"./extcrypto/extcrypto.cc\" ],\n+\n+\n+---\n+\n Next test:  s/wdio --only embcom.sso.token-in-cookie.2br --prod --skip-build --deleteOldSite --localHostname=e2e-test-e1-o0-s1 --dummy-wdio-test 2023-01-05T00:54:15+01:00-3jrrlt2g93\n \n "
    },
    {
      "sha": "426f73db32103bf034ad865dad48cb4a21ae0bce",
      "filename": "tests/e2e/specs/upload-images-and-files.2br.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Fspecs%2Fupload-images-and-files.2br.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Fspecs%2Fupload-images-and-files.2br.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Fspecs%2Fupload-images-and-files.2br.test.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -143,6 +143,7 @@ describe(\"upload-images-and-files  TyT50E6KTDU7\", () => {\n \n \n   it(\"... saves\", () => {\n+    // [wdio_6_to_7]  Use instead:  await owen_brA.userProfilePage.permissions.save();\n     owen_brA.waitAndClick('.e_SvPerms');\n   });\n "
    },
    {
      "sha": "e1e784a5a1b0f63decf44b9360fa4fcaf7ebe61b",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Futils%2Fpages-for.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -6884,11 +6884,6 @@ export class TyE2eTestBrowser {\n           this.repeatUntilAtNewUrl(() => {\n             this.waitForThenClickText('.esNotf_page', text);\n           });\n-        },\n-\n-        assertMayNotSeeNotfs: () => {\n-          this.waitForVisible('.e_UP_Notfs_Err');\n-          this.assertTextMatches('.e_UP_Notfs_Err', 'EdE7WK2L_');\n         }\n       },\n "
    },
    {
      "sha": "11b028d1543aab7980b3536e61dd322fc2b73884",
      "filename": "translations/en_US/i18n.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fen_US%2Fi18n.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fen_US%2Fi18n.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fen_US%2Fi18n.ts?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -25,6 +25,7 @@ var t_en_US: TalkyardTranslations = t = {\n   AddComment: \"Add Comment\",  // MISSING, & dupl t.e.AddCommentC\n   Admin: \"Admin\",\n   AdvSearch: \"Advanced search\",\n+  Anonym: \"Anonym\",\n   Away: \"Away\",\n   Back: \"Back\",\n   BlogN: \"Blog\","
    },
    {
      "sha": "3af8e77dc765f7c6897bc50aca659a7df268282d",
      "filename": "translations/i18n-README.md",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fi18n-README.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fi18n-README.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fi18n-README.md?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -16,8 +16,10 @@ To add a new language:\n    and you can edit and save your new translation\n    (and still see the English version to the left).\n \n-3. Open a GitHub pull request to https://github.com/debiki/ty-translations (or send us\n-   the translation via email or something, that's also ok, although we prefer GitHub).\n+3. Clone the repository `ty-translations` https://github.com/debiki/ty-translations.\n+   Add your translation at `(ty-translations)/ui/nn_NN/i18n.ts`,\n+   and submit a pull request (to the `ty-translations` repo).  (Or send us\n+   the translation via email or something, that's also ok, although we prefer GitHub.)\n \n 4. When done translating, the Talkyard developers (but not you, the translator) need to: [5JUKQR2]\n "
    },
    {
      "sha": "1e8d9501399d41d4752ec40a37bc80e75537c065",
      "filename": "translations/zh_CN",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fzh_CN",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/translations%2Fzh_CN",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/translations%2Fzh_CN?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -0,0 +1 @@\n+../modules/ty-translations/ui/zh_CN\n\\ No newline at end of file"
    },
    {
      "sha": "82ae61f1d5223cc8ced207175050703e7cc04f7e",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/4f064e1360e863721ff5a0931f537c6e536f47b3/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/4f064e1360e863721ff5a0931f537c6e536f47b3/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=4f064e1360e863721ff5a0931f537c6e536f47b3",
      "patch": "@@ -1 +1 @@\n-v0.2023.003\n+v0.2023.004"
    }
  ]
}
