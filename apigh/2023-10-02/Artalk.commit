{
  "sha": "2dc3bc8934130fd316bff61f85dfe0188f68a178",
  "node_id": "C_kwDOCQOkhNoAKDJkYzNiYzg5MzQxMzBmZDMxNmJmZjYxZjg1ZGZlMDE4OGY2OGExNzg",
  "commit": {
    "author": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-09-25T13:15:58Z"
    },
    "committer": {
      "name": "qwqcode",
      "email": "qwqcode@gmail.com",
      "date": "2023-09-25T13:15:58Z"
    },
    "message": "test(simple_cache): add unit test",
    "tree": {
      "sha": "8488b7f39b32753d88ca35530c88529977bce28c",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/trees/8488b7f39b32753d88ca35530c88529977bce28c"
    },
    "url": "https://api.github.com/repos/ArtalkJS/Artalk/git/commits/2dc3bc8934130fd316bff61f85dfe0188f68a178",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS0Ev3sdPZbHkWwzmLUbg8O6nwTagUCZRGIDgAKCRDUbg8O6nwT\namAYAP9Casds4kVnO9JOWEWxAOB/EpKdRAgrCBXNtVUJmH0okQEAlHFf28BtYRm3\n+ADVSS5+Ad4lRGBYQqjgtcDUvH0mvww=\n=fdSS\n-----END PGP SIGNATURE-----",
      "payload": "tree 8488b7f39b32753d88ca35530c88529977bce28c\nparent 7b1bb25d6a0f118214bd60338088bcac989e2f2b\nauthor qwqcode <qwqcode@gmail.com> 1695647758 +0800\ncommitter qwqcode <qwqcode@gmail.com> 1695647758 +0800\n\ntest(simple_cache): add unit test\n"
    }
  },
  "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/2dc3bc8934130fd316bff61f85dfe0188f68a178",
  "html_url": "https://github.com/ArtalkJS/Artalk/commit/2dc3bc8934130fd316bff61f85dfe0188f68a178",
  "comments_url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/2dc3bc8934130fd316bff61f85dfe0188f68a178/comments",
  "author": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "qwqcode",
    "id": 22412567,
    "node_id": "MDQ6VXNlcjIyNDEyNTY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412567?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qwqcode",
    "html_url": "https://github.com/qwqcode",
    "followers_url": "https://api.github.com/users/qwqcode/followers",
    "following_url": "https://api.github.com/users/qwqcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/qwqcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qwqcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qwqcode/subscriptions",
    "organizations_url": "https://api.github.com/users/qwqcode/orgs",
    "repos_url": "https://api.github.com/users/qwqcode/repos",
    "events_url": "https://api.github.com/users/qwqcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qwqcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b1bb25d6a0f118214bd60338088bcac989e2f2b",
      "url": "https://api.github.com/repos/ArtalkJS/Artalk/commits/7b1bb25d6a0f118214bd60338088bcac989e2f2b",
      "html_url": "https://github.com/ArtalkJS/Artalk/commit/7b1bb25d6a0f118214bd60338088bcac989e2f2b"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 63,
    "deletions": 0
  },
  "files": [
    {
      "sha": "23e160df931b33c43ee7ca83a8847b82cb60748b",
      "filename": "internal/cache/simple_cache/cache_test.go",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/ArtalkJS/Artalk/blob/2dc3bc8934130fd316bff61f85dfe0188f68a178/internal%2Fcache%2Fsimple_cache%2Fcache_test.go",
      "raw_url": "https://github.com/ArtalkJS/Artalk/raw/2dc3bc8934130fd316bff61f85dfe0188f68a178/internal%2Fcache%2Fsimple_cache%2Fcache_test.go",
      "contents_url": "https://api.github.com/repos/ArtalkJS/Artalk/contents/internal%2Fcache%2Fsimple_cache%2Fcache_test.go?ref=2dc3bc8934130fd316bff61f85dfe0188f68a178",
      "patch": "@@ -0,0 +1,63 @@\n+package simple_cache\n+\n+import (\n+\t\"fmt\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestCache(t *testing.T) {\n+\tt.Run(\"Normal\", func(t *testing.T) {\n+\t\tcache := New()\n+\t\tcache.Set(\"key\", \"value\")\n+\t\tvalue, ok := cache.Get(\"key\")\n+\t\tif !ok {\n+\t\t\tt.Error(\"cache should be hit\")\n+\t\t}\n+\t\tif value != \"value\" {\n+\t\t\tt.Error(\"cache value should be correct\")\n+\t\t}\n+\t})\n+\n+\tt.Run(\"Expired\", func(t *testing.T) {\n+\t\tcache := New()\n+\t\tcache.Set(\"key\", \"value\", 1*time.Millisecond)\n+\t\ttime.Sleep(2 * time.Millisecond)\n+\t\t_, ok := cache.Get(\"key\")\n+\t\tif ok {\n+\t\t\tt.Error(\"cache should be expired\")\n+\t\t}\n+\t})\n+\n+\tt.Run(\"Concurrent\", func(t *testing.T) {\n+\t\tcache := New()\n+\n+\t\tvar wg sync.WaitGroup\n+\t\tfor i := 0; i < 100; i++ {\n+\t\t\twg.Add(1)\n+\t\t\tgo func(i int) {\n+\t\t\t\tdefer wg.Done()\n+\t\t\t\tcache.Set(fmt.Sprint(i), i)\n+\t\t\t\tvalue, ok := cache.Get(fmt.Sprint(i))\n+\t\t\t\tif !ok {\n+\t\t\t\t\tt.Errorf(\"cache should be hit for key %d\", i)\n+\t\t\t\t}\n+\t\t\t\tif value != i {\n+\t\t\t\t\tt.Errorf(\"cache value should be %d for key %d\", i, i)\n+\t\t\t\t}\n+\t\t\t}(i)\n+\t\t}\n+\t\twg.Wait()\n+\t})\n+\n+\tt.Run(\"Delete\", func(t *testing.T) {\n+\t\tcache := New()\n+\t\tcache.Set(\"key\", \"value\")\n+\t\tcache.Delete(\"key\")\n+\t\t_, ok := cache.Get(\"key\")\n+\t\tif ok {\n+\t\t\tt.Error(\"cache should be deleted\")\n+\t\t}\n+\t})\n+}"
    }
  ]
}
