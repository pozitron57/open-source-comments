{
  "sha": "25662a0c4636710c47d760f2cb5a09037198f494",
  "node_id": "C_kwDOAKEu-toAKDI1NjYyYTBjNDYzNjcxMGM0N2Q3NjBmMmNiNWEwOTAzNzE5OGY0OTQ",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-05-30T18:21:22Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2023-05-30T18:21:22Z"
    },
    "message": "Merge v0.2023.006 into 'release'.",
    "tree": {
      "sha": "9ec7a30c4692f4ad65244f873bf7b6e45cc4c9fb",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/9ec7a30c4692f4ad65244f873bf7b6e45cc4c9fb"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/25662a0c4636710c47d760f2cb5a09037198f494",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/25662a0c4636710c47d760f2cb5a09037198f494",
  "html_url": "https://github.com/debiki/talkyard/commit/25662a0c4636710c47d760f2cb5a09037198f494",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/25662a0c4636710c47d760f2cb5a09037198f494/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69ae10ad58e3345f3e01ac8b03108b420d3de173",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/69ae10ad58e3345f3e01ac8b03108b420d3de173",
      "html_url": "https://github.com/debiki/talkyard/commit/69ae10ad58e3345f3e01ac8b03108b420d3de173"
    },
    {
      "sha": "83de9f2b6e439c0e58cbaf526b352199fc85c89b",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/83de9f2b6e439c0e58cbaf526b352199fc85c89b",
      "html_url": "https://github.com/debiki/talkyard/commit/83de9f2b6e439c0e58cbaf526b352199fc85c89b"
    }
  ],
  "stats": {
    "total": 3901,
    "additions": 2510,
    "deletions": 1391
  },
  "files": [
    {
      "sha": "6164b04e0791c0bf84e40f45cccce2fe877c409d",
      "filename": "LICENSE-BUSLv11.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/LICENSE-BUSLv11.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/LICENSE-BUSLv11.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/LICENSE-BUSLv11.txt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -2,7 +2,7 @@ License text copyright © 2017 MariaDB Corporation Ab, All Rights Reserved. \"Bus\n \n Terms\n \n-Change Date: 2026-01-01\n+Change Date: 2028-01-01\n Change License: GNU General Public License v2.0 or later\n Additional Use Grant: You can use the Licensed Work, that is, Talkyard, in production for up to 4 months (123 days) after the day when your organization first installed Talkyard. (Installed — not when you upgraded to some later version.)\n "
    },
    {
      "sha": "b5d239435bd206f3e96ba125b24af52758d4cd0d",
      "filename": "README.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/README.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/README.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/README.md?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -45,7 +45,7 @@ Or use Talkyard for customer support, or for schools and students helping each o\n \n How does Talkyard compare with\n StackOverflow for Teams, Discourse, Slack, Facebook Groups, Disqus?\n-— <a href=\"https://www.talkyard.io/compared-with\">Find out here.</a>\n+— <a href=\"https://business.talkyard.io/compare/\">Find out here</a> (<small>oops, link now fixed. Was browken</small>)\n \n \n Using Talkyard\n@@ -306,11 +306,11 @@ That repo, squashed, is in this repo.\n License\n -----------------------------\n \n-Copyright (c) 2010-2022 Kaj Magnus Lindberg and contributors.\n+Copyright (c) 2010-2023 Kaj Magnus Lindberg and contributors.\n \n Talkyard is multi licensed under 1) AGPLv3 or later, see LICENSE.txt, and\n 2) Business Source License v1.1, with change license GPLv2 or later, and\n-change date 2027-01-01 (we bump the change date yearly,\n+change date 2028-01-01 (we bump the change date yearly,\n so it's between 4 and 5 years into the future) — see LICENSE-BUSLv1.1.txt.\n And 3) possibly other licenses.\n "
    },
    {
      "sha": "c87a1c58f66908658cbd51146a3cb892123d3f2b",
      "filename": "appsv/model/lock.sbt",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Flock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Flock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Flock.sbt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -19,8 +19,8 @@ Compile / dependencyOverrides ++= {\n       \"com.google.j2objc\" % \"j2objc-annotations\" % \"1.3\",\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n       \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.4\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.4\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n@@ -31,12 +31,12 @@ Compile / dependencyOverrides ++= {\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.8.0\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.14\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\"\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.16\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.7\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH 42e0e636a7292b0884bedcde01810e355f337fac\n+// LIBRARY_DEPENDENCIES_HASH 3e6f1fe480651d02a20caffd353cc25130f4d1bc"
    },
    {
      "sha": "bb49e1322d2fb2267d06e2c5a1852f77720ef5d4",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Category.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FCategory.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -171,6 +171,8 @@ case class Category( // [exp] ok use   too long name! use Cat instead\n   def isDeleted: Boolean = deletedAt.isDefined\n \n   def idName: St = s\"\"\"$id \"$name\"\"\"\"\n+\n+  def doItVotesEnabled: Bo = doVoteStyle isSomethingButNot DoVoteStyle.Disabled\n }\n \n "
    },
    {
      "sha": "2d7b8d602ead797294e3907fbbec41355332b1de",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Page.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPage.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1241,10 +1241,10 @@ object PageOrderOffset {\n   case class ByLikesAndBumpTime(offset: Option[(Int, ju.Date)]) extends PageOrderOffset(41)\n \n   // Maybe should incl score algorithm id?\n-  case class ByScoreAndBumpTime(offset: Opt[f32], period: TopTopicsPeriod)\n+  case class ByScoreAndBumpTime(offset: Opt[f32], period: TopTopicsPeriod, scoreAlg: PageScoreAlg)\n     extends PageOrderOffset(ByScoreAndBumpTimeIntVal) {\n-    // For now, just hardcode PagePopularityCalculator.CurrentScoreAlg1 here.\n-    def scoreAlg: PageScoreAlg = 1\n+    // For now: (PagePopularityCalculator not accessible here. Maybe move alg ids to pkg core?)\n+    require(scoreAlg == 1 || scoreAlg == 2, \"TyE602MRSJ\")\n   }\n \n   // ByNumRepliesAndBumpTime  33\n@@ -1264,8 +1264,8 @@ object PageOrderOffset {\n       case ByScoreAndBumpTimeIntVal =>\n         val period = TopTopicsPeriod.fromOptInt(scorePeriodInt) getOrElse { return None }\n         val alg = scoreAlgInt getOrElse { return None }\n-        dieIf(alg != (1: PageScoreAlg), \"TyE03MSJ62\") // for now\n-        ByScoreAndBumpTime(offset = None, period = period)\n+        dieIf(alg != (1: PageScoreAlg) && alg != 2, \"TyE03MSJ62\") // for now\n+        ByScoreAndBumpTime(offset = None, period = period, scoreAlg = alg)\n       case _ =>\n         return None\n     }"
    },
    {
      "sha": "7ddf32ed48f4ee175f95f80895a8217af49ee4c4",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PagePopularityStats.scala",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePopularityStats.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePopularityStats.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPagePopularityStats.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -40,6 +40,7 @@ case class PagePopularityScores(\n   monthScore: Float,\n   quarterScore: Float,\n   yearScore: Float,\n+  triennialScore: Float,\n   allScore: Float) {\n \n   def toPrettyString: String = {\n@@ -51,6 +52,7 @@ case class PagePopularityScores(\n       |monthScore: $monthScore,\n       |quarterScore: $quarterScore,\n       |yearScore: $yearScore,\n+      |triennialScore: $triennialScore,\n       |allScore: $allScore\n       |\"\"\"\n   }\n@@ -73,7 +75,10 @@ object TopTopicsPeriod {\n   case object Quarter extends TopTopicsPeriod(4)\n   // later: HalfYear\n   case object Year extends TopTopicsPeriod(5)\n-  case object All extends TopTopicsPeriod(6)\n+  case object Triennial extends TopTopicsPeriod(6)\n+  case object All extends TopTopicsPeriod(7)\n+\n+  val Default = Year  // Sync w Typescript\n \n   def fromOptInt(value: Opt[i32]): Option[TopTopicsPeriod] =\n     fromInt(value getOrElse { return None })\n@@ -112,26 +117,30 @@ case class PagePopStatsNowAndThen(\n   sinceLastMonth: PagePopularityStats,\n   sinceLastQuarter: PagePopularityStats,\n   sinceLastYear: PagePopularityStats,\n+  sinceLast3Years: PagePopularityStats,\n   sinceGenesis: PagePopularityStats) {\n \n   require(pageId == sinceYesterday.pageId, \"EdE8GKYW2A\")\n   require(pageId == sinceLastWeek.pageId, \"EdE8GKYW2B\")\n   require(pageId == sinceLastMonth.pageId, \"EdE8GKYW2C\")\n   require(pageId == sinceLastQuarter.pageId, \"EdE8GKYW2D\")\n   require(pageId == sinceLastYear.pageId, \"EdE8GKYW2E\")\n+  require(pageId == sinceLast3Years.pageId, \"TyE8GKYW2F\")\n   require(pageId == sinceGenesis.pageId, \"EdE8GKYW20\")\n \n   require(sinceYesterday.to == sinceLastWeek.to, \"EdEJ2GRA01\")\n   require(sinceYesterday.to == sinceLastMonth.to, \"EdE6JGRA02\")\n   require(sinceYesterday.to == sinceLastQuarter.to, \"EdEJ2GRA03\")\n   require(sinceYesterday.to == sinceLastYear.to, \"EdEJ2GRA04\")\n-  require(sinceYesterday.to == sinceGenesis.to, \"EdEJ2GRA05\")\n+  require(sinceYesterday.to == sinceLast3Years.to, \"TyEJ2GRA05\")\n+  require(sinceYesterday.to == sinceGenesis.to, \"TyEJ2GRA09\")\n \n   require(sinceYesterday.from isAfter sinceLastWeek.from, \"EdEZ2GKF01\")\n   require(sinceLastWeek.from isAfter sinceLastMonth.from, \"EdEZ2GKF02\")\n   require(sinceLastMonth.from isAfter sinceLastQuarter.from, \"EdEZ2GKF03\")\n   require(sinceLastQuarter.from isAfter sinceLastYear.from, \"EdEZ2GKF04\")\n-  require(sinceLastYear.from isAfter sinceGenesis.from, \"EdEZ2GKF05\")\n+  require(sinceLastYear.from isAfter sinceLast3Years.from, \"EdEZ2GKF05\")\n+  require(sinceLast3Years.from isAfter sinceGenesis.from, \"TyEZ2GKF06\")\n \n   def toPrettyString: String = {\n     i\"\"\"\n@@ -141,6 +150,7 @@ case class PagePopStatsNowAndThen(\n       |sinceLastMonth: ${sinceLastMonth.toPrettyString}\n       |sinceLastQuarter: ${sinceLastQuarter.toPrettyString}\n       |sinceLastYear: ${sinceLastYear.toPrettyString}\n+      |sinceLast3Years: ${sinceLast3Years.toPrettyString}\n       |sinceGenesis: ${sinceGenesis.toPrettyString}\n       |\"\"\"\n   }\n@@ -166,6 +176,13 @@ case class PagePopularityStats(\n   numUnwantedTotal: Int,\n   numUnwantedByTrusted: Int,\n   numUnwantedByCore: Int,\n+  // Later. For now, using Like votes instead. [do_it_votes]\n+  numOpDoItTotal: i32 = 0,\n+  numOpDoItByTrusted: i32 = 0,\n+  numOpDoItByCore: i32 = 0,\n+  numOpDoNotTotal: i32 = 0,\n+  numOpDoNotByTrusted: i32 = 0,\n+  numOpDoNotByCore: i32 = 0,\n   numOpLikesTotal: Int,\n   numOpLikesByTrusted: Int,\n   numOpLikesByCore: Int,\n@@ -201,6 +218,12 @@ case class PagePopularityStats(\n   require(numUnwantedTotal >= numUnwantedByTrusted, \"EdE5KY11\")\n   require(numUnwantedByTrusted >= numUnwantedByCore, \"EdE5KY12\")\n   require(numUnwantedByCore >= 0, \"EdE5KY13\")\n+  require(numOpDoItTotal >= 0, \"TyEPOPVOTECNT61\")\n+  require(numOpDoItByTrusted >= 0, \"TyEPOPVOTECNT62\")\n+  require(numOpDoItByCore >= 0, \"TyEPOPVOTECNT63\")\n+  require(numOpDoNotTotal >= 0, \"TyEPOPVOTECNT65\")\n+  require(numOpDoNotByTrusted >= 0, \"TyEPOPVOTECNT66\")\n+  require(numOpDoNotByCore >= 0, \"TyEPOPVOTECNT67\")\n   require(numOpLikesTotal >= numOpLikesByTrusted, \"EdE5KY14\")\n   require(numOpLikesByTrusted >= numOpLikesByCore, \"EdE5KY15\")\n   require(numOpLikesByCore >= 0, \"EdE5KY16\")"
    },
    {
      "sha": "ac12bde1db5865318df56c7377f13335ccd81592",
      "filename": "appsv/model/src/main/scala/com/debiki/core/PostAction.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FPostAction.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -161,7 +161,7 @@ sealed abstract class PostActionType { def toInt: Int }\n sealed abstract class PostVoteType(val IntVal: Int) extends PostActionType { def toInt: Int = IntVal }\n object PostVoteType {\n \n-  // Page votes? (These votes are cast on posts, although they are for pages\n+  // Page votes? [do_it_votes] (These votes are cast on posts, although they are for pages\n   // — so won't be lost if merging two pages, and splitting them again.)\n   //case object DoIt extends PostVoteType(31)\n   //case object DoNot extends PostVoteType(32)"
    },
    {
      "sha": "b07e817c3bff6cbfea8c817bd3a5a711476b7866",
      "filename": "appsv/model/src/main/scala/com/debiki/core/Site.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSite.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -220,7 +220,7 @@ case class SiteIdOrigins(\n   siteId: SiteId, pubId: PubSiteId, siteOrigin: String, uploadsOrigin: String)\n \n \n-trait SiteIdHostnames {\n+trait SiteIdHostnames extends SiteTrait {\n   def id: SiteId\n   def pubId: PubSiteId\n   def canonicalHostnameStr: Option[String]"
    },
    {
      "sha": "cb31378606143912aa134279ae9afdb508eb5fcf",
      "filename": "appsv/model/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2FSiteTransaction.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -204,7 +204,7 @@ trait SiteTransaction {   RENAME // to SiteTx — already started with a type Si\n   def loadPageVisitTrusts(pageId: PageId): Map[UserId, VisitTrust]\n \n   def loadAllPagePopularityScores(): Seq[PagePopularityScores]\n-  def loadPagePopularityScore(pageId: PageId): Option[PagePopularityScores]\n+  def loadPagePopularityScore(pageId: PageId, scoreAlg: PageScoreAlg): Opt[PagePopularityScores]\n   def upsertPagePopularityScore(scores: PagePopularityScores): Unit\n \n   def loadLastPostRevision(postId: PostId): Option[PostRevision]"
    },
    {
      "sha": "34b4432c41607bbee6d5183b30054a8e2f1e82e9",
      "filename": "appsv/model/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fmodel%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fcore%2Fpackage.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -179,7 +179,7 @@ package object core {\n   type PageVersion = Int  // [Scala_3] opaque type ... And so many more here!\n   val NoVersion: PageVersion = 0\n \n-  type PageScoreAlg = i32  // for now\n+  type PageScoreAlg = i32  // for now  [Scala_3] opaque type\n \n   type CategoryId = Int   // too long!\n   type CatId = CategoryId // better\n@@ -1156,8 +1156,9 @@ package object core {\n     * so good to cache those per origin.\n     * Also if accessing via https://site-NNNN.basedomain.com (what? which links?)\n     *\n-    * @param anyCdnOrigin — Uploads and images should use the cdn origin. Should rerender cached\n-    * html if the cdn origin changes.\n+    * @param anyCdnOrigin — Talkyard's scripts and styles can use a separate CDN origin.\n+    * @param anyUgcOrigin — Uploads and images should use a UGC origin. Should rerender cached\n+    * html if the UGC origin changes.\n     * @param anyPageRoot — if rendering only parts of a page\n     * @param anyPageQuery — if rendering a topic list page, which topics to include (useful if\n     * Javascript diabled, and one wants to list topics on topic list page 2, 3, 4 ...)\n@@ -1169,13 +1170,15 @@ package object core {\n     isEmbedded: Bo,\n     origin: St,\n     anyCdnOrigin: Opt[St],\n+    anyUgcOrigin: Opt[St],\n     anyPageRoot: Opt[PostNr],\n     anyPageQuery: Opt[PageQuery]) {\n \n     def comtNesting: NestingDepth = -1  // means unlimited\n     def thePageRoot: PostNr = anyPageRoot getOrElse BodyNr\n     def embeddedOriginOrEmpty: St = if (isEmbedded) origin else \"\"  // [REMOTEORIGIN]\n     def cdnOriginOrEmpty: St = anyCdnOrigin getOrElse \"\"\n+    def ugcOriginOrEmpty: St = anyUgcOrigin getOrElse \"\"\n   }\n \n   case class RenderParamsAndFreshHash(\n@@ -1217,9 +1220,12 @@ package object core {\n \n   val WrongCachedPageVersion: CachedPageVersion =\n     CachedPageVersion(\n-          siteVersion = -1, pageVersion = -1, appVersion = \"wrong\",\n-          PageRenderParams(PostSortOrder.OldestFirst, WidthLayout.Tiny,\n-                isEmbedded = false, \"https://example.com\", None, None, None),\n+          siteVersion = -1,\n+          pageVersion = -1,\n+          appVersion = \"wrong\",\n+          renderParams = PageRenderParams(\n+                PostSortOrder.OldestFirst, WidthLayout.Tiny,\n+                isEmbedded = false, \"https://example.com\", None, None, None, None),\n           storeJsonHash = \"wrong\")\n \n "
    },
    {
      "sha": "5e7d2b0d6a8a4845eda02d7a471a7c7212c0e88a",
      "filename": "appsv/rdb/lock.sbt",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Flock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Flock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Flock.sbt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -19,8 +19,8 @@ Compile / dependencyOverrides ++= {\n       \"com.google.j2objc\" % \"j2objc-annotations\" % \"1.3\",\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n       \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.4\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.4\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n@@ -31,14 +31,14 @@ Compile / dependencyOverrides ++= {\n       \"javax.activation\" % \"activation\" % \"1.1\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n       \"org.apache.commons\" % \"commons-email\" % \"1.5\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.8.0\",\n       \"org.checkerframework\" % \"checker-qual\" % \"3.12.0\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.postgresql\" % \"postgresql\" % \"42.4.2\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.14\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\"\n+      \"org.postgresql\" % \"postgresql\" % \"42.5.4\",\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.16\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.7\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH cd2996bd71e22ca7abedb8fafa6282c133d37a91\n+// LIBRARY_DEPENDENCIES_HASH de61e3cf1ce54f7a9e15584e98c87633c9b285b9"
    },
    {
      "sha": "d5971938739df7500d4d8226b143442ea191174a",
      "filename": "appsv/rdb/src/main/resources/db/migration/db-wip.sql",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fdb-wip.sql?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -31,6 +31,45 @@ create domain can_see_whos_here_d i16_d;\n alter  domain can_see_whos_here_d add\n    constraint can_see_whos_here_d_c_null check (value is null);\n \n+\n+-- CDN and UGC per site domain?\n+create domain  scheme_domain_d text;\n+alter  domain  scheme_domain_d add\n+    constraint scheme_domain_d_minlen check (length(value) >= 4);\n+    constraint scheme_domain_d_maxlen check (length(value) <= 120);\n+    constraint scheme_domain_d_regex check (value ~ '^((https?:)\\/\\/)([a-z]\\.)+[a-z]\\.?$');\n+-- And:\n+alter table sites3 add column ugc_domain_c scheme_domain_d;\n+alter table sites3 add column smtp_conf_json_c jsonb_ste4000_d;  -- done, already\n+-- If shorter, it's invalid, right.\n+alter table sites3 add constraint sites_c_smtpconf_min_len check (\n+    length(smtp_conf_json_c) > 50);\n+\n+\n+\n+--=============================================================================\n+--  Upload refs\n+--=============================================================================\n+\n+-- Also from drafts and users (their avatars).\n+\n+alter table upload_refs3 rename column post_id to from_post_id_c;\n+\n+alter table upload_refs3\n+    drop constraint dw2_uploadrefs__p,\n+    add column from_draft_nr_c i32_lt2e9_gt1000_d,\n+    add column from_pat_id_c   i32_d,\n+    add constraint uploadrefs_c_from_draft_or_post_or_avatar check (\n+        num_nonnulls(from_post_id_c, from_draft_nr_c, from_pat_id_c) = 1);\n+\n+create unique index uploadrefs_u_postid_ref on upload_refs3 (\n+    site_id, post_id, base_url, hash_path) where post_id is not null;\n+\n+create unique index uploadrefs_u_draftnr_ref on upload_refs3 (\n+    site_id, draft_nr_c, base_url, hash_path) where draft_nr_c is not null;\n+\n+\n+\n --=============================================================================\n --  Circles\n --=============================================================================\n@@ -812,6 +851,9 @@ alter domain key_pem_d add constraint key_pem_d_c_maxlen check (\n \n \n \n+-- ?\n+alter table page_popularity_scores3 add column  dormant_status_c  dormant_status_d;\n+\n -- ?\n alter table page_popularity_scores3 add column two_weeks_score f64_d;\n alter table page_popularity_scores3 add column two_days_score f64_d;"
    },
    {
      "sha": "727004cef0512068d72604b88899351ae14f04bf",
      "filename": "appsv/rdb/src/main/resources/db/migration/y2023/v420__ugc_domain_sort_ideas.sql",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv420__ugc_domain_sort_ideas.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv420__ugc_domain_sort_ideas.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fresources%2Fdb%2Fmigration%2Fy2023%2Fv420__ugc_domain_sort_ideas.sql?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -0,0 +1,68 @@\n+alter table page_html_cache_t\n+    rename param_origin_c     to param_origin_or_empty_c;\n+alter table page_html_cache_t\n+    rename param_cdn_origin_c to param_cdn_origin_or_empty_c;\n+alter table page_html_cache_t\n+    add column                   param_ugc_origin_or_empty_c text default '' not null,\n+    -- Later. Unused \"_u\" currently.\n+    add column                   param_theme_id_c_u i16_gz_d default 2 not null,\n+    -- For now.\n+    add constraint pagehtmlcache_c_themeid_eq_2 check (param_theme_id_c_u = 2),\n+\n+    drop constraint pagehtmlcache_p,\n+    add constraint pagehtmlcache_p primary key (\n+          site_id_c,\n+          page_id_c,\n+          param_comt_order_c,\n+          param_comt_nesting_c,\n+          param_width_layout_c,\n+          param_theme_id_c_u,\n+          param_is_embedded_c,\n+          param_origin_or_empty_c,\n+          param_cdn_origin_or_empty_c,\n+          param_ugc_origin_or_empty_c);\n+\n+create index pagehtmlcache_gi_updatedat on page_html_cache_t (updated_at_c);\n+\n+\n+\n+-- Restrict alg id to [1, 1000] to catch bugs.\n+-- First, shouldn't be needed, but anyway:\n+update page_popularity_scores3\n+    set score_alg_c = 1 where score_alg_c != 1 or score_alg_c is null;\n+\n+alter table page_popularity_scores3\n+    alter column score_alg_c type i16_gz_lt1000_d,\n+    -- This > 0 no longer needed (see _gz above):\n+    drop constraint pagepopscores_alg_gtz,\n+\n+    -- Add alg id to primary key.\n+    drop constraint pagepopscores_site_page_p,\n+    add  constraint pagepopscores_p_pageid_algid\n+            primary key (site_id, page_id, score_alg_c),\n+\n+    add column triennial_score_c double precision;\n+\n+update page_popularity_scores3 set\n+    triennial_score_c = all_score;\n+\n+alter table page_popularity_scores3\n+    alter column triennial_score_c set not null;\n+\n+alter domain trending_period_d drop constraint trending_period_d_c_lte6;\n+alter domain trending_period_d add  constraint trending_period_d_c_lte7 check (value <= 7);\n+\n+create index pagepopscores_i_algid_dayscore on page_popularity_scores3 (\n+    site_id, score_alg_c, day_score);\n+create index pagepopscores_i_algid_weekscore on page_popularity_scores3 (\n+    site_id, score_alg_c, week_score);\n+create index pagepopscores_i_algid_monthscore on page_popularity_scores3 (\n+    site_id, score_alg_c, month_score);\n+create index pagepopscores_i_algid_quarterscore on page_popularity_scores3 (\n+    site_id, score_alg_c, quarter_score);\n+create index pagepopscores_i_algid_yearscore on page_popularity_scores3 (\n+    site_id, score_alg_c, year_score);\n+create index pagepopscores_i_algid_triennialscore on page_popularity_scores3 (\n+    site_id, score_alg_c, triennial_score_c);\n+create index pagepopscores_i_algid_allscore on page_popularity_scores3 (\n+    site_id, score_alg_c, all_score);"
    },
    {
      "sha": "ba77d91d0ee7bca7c28ffb3644e1115ebf34b6cf",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/CategoriesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 37,
      "deletions": 5,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FCategoriesSiteDaoMixin.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -126,6 +126,7 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n       case TopTopicsPeriod.Month => \"month_score\"\n       case TopTopicsPeriod.Quarter => \"quarter_score\"\n       case TopTopicsPeriod.Year => \"year_score\"\n+      case TopTopicsPeriod.Triennial => \"triennial_score_c\"\n       case TopTopicsPeriod.All => \"all_score\"\n     }\n \n@@ -139,6 +140,16 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n \n     val pageFilterAnd = makePageFilterTestsAnd(pageQuery)\n \n+    // Currently there's no / not-much data, from algorithms other than 1.\n+    // Let's fallback to the old all-votes alg 1 — by loading both alg\n+    // 2 and 1, and sorting alg 2 rows before alg 1 rows.\n+    val scoreAlgs: St = if (scoreOrder.scoreAlg == 1) \"1\" else \"1, 2\"\n+\n+    COULD_OPTIMIZE\n+    // Add column: dormant_status_c  to table  page_popularity_scores3\n+    // and incl in index, so can skip deleted or not-yet-approved or unlisted\n+    // pages? — Not important right now though.\n+\n     val sql = s\"\"\" -- loadPagesInCategoriesByScore\n         select\n           t.parent_folder,\n@@ -156,20 +167,41 @@ trait CategoriesSiteDaoMixin extends SiteTransaction {\n              t.canonical = 'C'\n         where\n           pps.site_id = ? and\n-          g.category_id in (${ makeInListFor(categoryIds) }) and   -- BUG cannot have g. and t. in 'where' part? only pps. ?\n+          pps.score_alg_c in ($scoreAlgs) and\n+          g.category_id in (${ makeInListFor(categoryIds) }) and\n           $offsetTestAnd\n           $pageFilterAnd\n           -- exclude category descr topics [4AKBR02]\n           g.page_role not in (${PageType.Forum.toInt}, ${PageType.AboutCategory.toInt})\n           $andNotDeleted\n-        order by pps.$periodScore desc, g.bumped_at desc\n+        order by\n+            -- Score alg needed only until there're entries for all algorithms — but\n+            -- currently, often there's a row only for algorithm id 1, which we\n+            -- can thus use as fallback. 1 is the lowest id, so sorting by\n+            -- alg id desc, gives any data from the alg we do want to use, precedence.\n+            -- (We might get back two rows for some pages — the then redundant\n+            -- row for alg id 1 is excluded by Scala code [.excl_def_score_alg].)\n+            -- (Probably some way to do this via SQL but Scala is simpler.)\n+            pps.score_alg_c desc,\n+            pps.$periodScore desc,\n+            g.bumped_at desc\n         limit $limit\"\"\"\n \n-    runQueryFindMany(sql, values.toList, rs => {\n+    // Currently some pages return two rows — an additional row, with the falback sort order\n+    // & score. Let's exclude the duplicates here, for simplicity.  [.excl_def_score_alg]\n+    // We want the first row only, if there're two.\n+    val results = ArrayBuffer[PagePathAndMeta]()\n+    val idsAdded = MutHashSet[PageId]()\n+\n+    runQueryAndForEachRow(sql, values.toList, rs => {\n       val pagePath = _PagePath(rs, siteId)\n-      val pageMeta = _PageMeta(rs, pagePath.pageId.get)\n-      PagePathAndMeta(pagePath, pageMeta)\n+      if (!idsAdded.contains(pagePath.pageId.get)) {\n+        idsAdded.add(pagePath.pageId.get)\n+        val pageMeta = _PageMeta(rs, pagePath.pageId.get)\n+        results append PagePathAndMeta(pagePath, pageMeta)\n+      }\n     })\n+    results.toVector\n   }\n \n "
    },
    {
      "sha": "47e10c648ee88de95b081756624392eb6e11e99b",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PagesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 44,
      "deletions": 22,
      "changes": 66,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPagesSiteDaoMixin.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -116,14 +116,17 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n         and param_comt_order_c = ?\n         and param_comt_nesting_c = ?\n         and param_width_layout_c = ?\n+        and param_theme_id_c_u = 2\n         and param_is_embedded_c = ?\n-        and param_origin_c = ?\n-        and param_cdn_origin_c = ?\n+        and param_origin_or_empty_c = ?\n+        and param_cdn_origin_or_empty_c = ?\n+        and param_ugc_origin_or_empty_c = ?\n       \"\"\"\n     val values = List(siteId.asAnyRef, pageId.asAnyRef,\n           params.comtOrder.toInt.asAnyRef, params.comtNesting.asAnyRef,\n           params.widthLayout.toInt.asAnyRef,\n-          params.isEmbedded.asAnyRef, params.embeddedOriginOrEmpty, params.cdnOriginOrEmpty)\n+          params.isEmbedded.asAnyRef, params.embeddedOriginOrEmpty,\n+          params.cdnOriginOrEmpty, params.ugcOriginOrEmpty)\n     runQueryFindOneOrNone(query, values, rs => {\n       val cachedHtml = rs.getString(\"cached_html_c\")\n       val cachedVersion = getCachedPageVersion(rs, Some(params))\n@@ -144,26 +147,30 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n               param_comt_order_c,\n               param_comt_nesting_c,\n               param_width_layout_c,\n+              param_theme_id_c_u,\n               param_is_embedded_c,\n-              param_origin_c,\n-              param_cdn_origin_c,\n+              param_origin_or_empty_c,\n+              param_cdn_origin_or_empty_c,\n+              param_ugc_origin_or_empty_c,\n               cached_site_version_c,\n               cached_page_version_c,\n               cached_app_version_c,\n               cached_store_json_hash_c,\n               updated_at_c,\n               cached_store_json_c,\n               cached_html_c)\n-          values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now_utc(), ?::jsonb, ?)\n+          values (?, ?, ?, ?, ?, 2, ?, ?, ?, ?, ?, ?, ?, ?, now_utc(), ?::jsonb, ?)\n           on conflict (\n               site_id_c,\n               page_id_c,\n               param_comt_order_c,\n               param_comt_nesting_c,\n               param_width_layout_c,\n+              param_theme_id_c_u,\n               param_is_embedded_c,\n-              param_origin_c,\n-              param_cdn_origin_c)\n+              param_origin_or_empty_c,\n+              param_cdn_origin_or_empty_c,\n+              param_ugc_origin_or_empty_c)\n           do update set\n               cached_site_version_c = excluded.cached_site_version_c,\n               cached_page_version_c = excluded.cached_page_version_c,\n@@ -179,7 +186,7 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n       siteId.asAnyRef, pageId,\n       params.comtOrder.toInt.asAnyRef, params.comtNesting.asAnyRef,\n       params.widthLayout.toInt.asAnyRef, params.isEmbedded.asAnyRef,\n-      params.embeddedOriginOrEmpty, params.cdnOriginOrEmpty,\n+      params.embeddedOriginOrEmpty, params.cdnOriginOrEmpty, params.ugcOriginOrEmpty,\n       version.siteVersion.asAnyRef, version.pageVersion.asAnyRef, version.appVersion,\n       version.storeJsonHash, reactStorejsonString, html))\n   }\n@@ -194,22 +201,32 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n               param_comt_order_c = ? and\n               param_comt_nesting_c = ? and\n               param_width_layout_c = ? and\n+              param_theme_id_c_u = 2 and\n               param_is_embedded_c = ? and\n-              param_origin_c = ? and\n-              param_cdn_origin_c = ? and\n-              -- Include these too, so we won't delete, if a fresh cache entry has\n-              -- just been added (a race).  [rerndr_stale_q]\n+              param_origin_or_empty_c = ? and\n+\n+              -- We didn't look at the CDN params when loading pages to rerender. So,\n+              -- ignore them now too — delete all old versions [regardless_of_cdn] address.\n+              -- Ignore:  param_cdn_origin_or_empty_c\n+              --    and:  param_ugc_origin_or_empty_c\n+\n+              -- Compare with cached_* too, so we won't delete, if a fresh cache entry has\n+              -- just been added (a race):  [rerndr_stale_q]\n+              --\n               cached_site_version_c = ? and\n-              cached_page_version_c = ? and\n+              -- We know that version.pageVersion is out-of-date, [stale_version_check]\n+              -- and if there happens to be many old stale rows (can that happen?)\n+              -- why not delete all of them? (so use `<=`)\n+              cached_page_version_c <= ? and\n               cached_app_version_c = ? and\n               cached_store_json_hash_c = ?  \"\"\"\n \n     val ps = version.renderParams\n-    runUpdateSingleRow(statement, List(\n+    runUpdate(statement, List(\n           siteId.asAnyRef, pageId,\n           ps.comtOrder.toInt.asAnyRef, ps.comtNesting.asAnyRef,\n           ps.widthLayout.toInt.asAnyRef, ps.isEmbedded.asAnyRef,\n-          ps.embeddedOriginOrEmpty, ps.cdnOriginOrEmpty,\n+          ps.embeddedOriginOrEmpty,\n           version.siteVersion.asAnyRef, version.pageVersion.asAnyRef, version.appVersion,\n           version.storeJsonHash))\n   }\n@@ -224,13 +241,15 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  def loadPagePopularityScore(pageId: PageId): Option[PagePopularityScores] = {\n+  def loadPagePopularityScore(pageId: PageId, scoreAlg: PageScoreAlg): Opt[PagePopularityScores] = {\n     val sql = s\"\"\"\n       select * from page_popularity_scores3\n       where site_id = ?\n         and page_id = ?\n+        and score_alg_c = ?\n       \"\"\"\n-    runQueryFindOneOrNone(sql, List(siteId.asAnyRef, pageId), parsePagePopularityScore)\n+    val values = List(siteId.asAnyRef, pageId, scoreAlg.asAnyRef)\n+    runQueryFindOneOrNone(sql, values, parsePagePopularityScore)\n   }\n \n \n@@ -244,6 +263,7 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n         monthScore = rs.getFloat(\"month_score\"),\n         quarterScore = rs.getFloat(\"quarter_score\"),\n         yearScore = rs.getFloat(\"year_score\"),\n+        triennialScore = rs.getFloat(\"triennial_score_c\"),\n         allScore = rs.getFloat(\"all_score\"))\n   }\n \n@@ -261,24 +281,26 @@ trait PagesSiteDaoMixin extends SiteTransaction {\n         month_score,\n         quarter_score,\n         year_score,\n+        triennial_score_c,\n         all_score)\n-      values (?, ?, now_utc(), now_utc(), ?, ?, ?, ?, ?, ?, ?)\n-      on conflict (site_id, page_id) do update set\n+      values (?, ?, now_utc(), now_utc(), ?, ?, ?, ?, ?, ?, ?, ?)\n+      on conflict (site_id, page_id, score_alg_c) do update set\n         updated_at = excluded.updated_at,\n-        score_alg_c = excluded.score_alg_c,\n         day_score = excluded.day_score,\n         week_score = excluded.week_score,\n         month_score = excluded.month_score,\n         quarter_score = excluded.quarter_score,\n         year_score = excluded.year_score,\n+        triennial_score_c = excluded.triennial_score_c,\n         all_score = excluded.all_score\n       \"\"\"\n \n     val values = List(\n       siteId.asAnyRef, scores.pageId, scores.scoreAlgorithm.asAnyRef,\n       scores.dayScore.asAnyRef, scores.weekScore.asAnyRef,\n       scores.monthScore.asAnyRef, scores.quarterScore.asAnyRef,\n-      scores.yearScore.asAnyRef, scores.allScore.asAnyRef)\n+      scores.yearScore.asAnyRef, scores.triennialScore.asAnyRef,\n+      scores.allScore.asAnyRef)\n \n     runUpdateSingleRow(statement, values)\n   }"
    },
    {
      "sha": "c23fca77c5270c5784ea9cdb4cf659db9c5f303d",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/PostsSiteDaoMixin.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FPostsSiteDaoMixin.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -911,7 +911,7 @@ trait PostsSiteDaoMixin extends SiteTransaction {\n       closedById = getOptInt(rs, \"CLOSED_BY_ID\"),\n       bodyHiddenAt = getOptionalDate(rs, \"HIDDEN_AT\"),\n       bodyHiddenById = getOptInt(rs, \"HIDDEN_BY_ID\"),\n-      bodyHiddenReason = getOptionalStringNotEmpty(rs, \"hidden_reason\"),\n+      bodyHiddenReason = getOptStringEmptyAsNone(rs, \"hidden_reason\"),\n       deletedStatus = new DeletedStatus(rs.getInt(\"DELETED_STATUS\")),\n       deletedAt = getOptionalDate(rs, \"DELETED_AT\"),\n       deletedById = getOptionalInt(rs, \"DELETED_BY_ID\"),"
    },
    {
      "sha": "20cb108ad7bc10c9ebe7d73c0a10ab02e25e9821",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/Rdb.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdb.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -202,9 +202,9 @@ object Rdb {\n   }\n \n   def getOptString(rs: js.ResultSet, column: String): Option[String] =\n-    getOptionalStringNotEmpty(rs, column)\n+    getOptStringEmptyAsNone(rs, column)\n \n-  def getOptionalStringNotEmpty(rs: js.ResultSet, column: String): Option[String] = {\n+  def getOptStringEmptyAsNone(rs: js.ResultSet, column: String): Option[String] = {\n     val value = Option(rs.getString(column))\n     if (value.contains(\"\")) None else value\n   }"
    },
    {
      "sha": "bc753c7bc5bc1808351277a81e6cbb311c0da268",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbDaoFactory.scala",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbDaoFactory.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbDaoFactory.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbDaoFactory.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -27,7 +27,6 @@ class RdbDaoFactory(\n   val db: Rdb,\n   val migrations: ScalaBasedDatabaseMigrations,\n   val getCurrentTime: () => When,\n-  val cdnOrigin: Option[String],\n   val isTest: Boolean = false) extends DbDaoFactory {\n \n "
    },
    {
      "sha": "109812ccda1e568dd880b0ca9b4f2c150b084fdc",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbSystemTransaction.scala",
      "status": "modified",
      "additions": 49,
      "deletions": 17,
      "changes": 66,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbSystemTransaction.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -669,10 +669,12 @@ class RdbSystemTransaction(\n         and p.page_id = ?\n         and h.param_comt_order_c = ?\n         and h.param_comt_nesting_c = ?\n-        and h.param_is_embedded_c = ?\n         and h.param_width_layout_c = ?\n-        and h.param_origin_c = ?\n-        and h.param_cdn_origin_c = ?\n+        and h.param_theme_id_c_u = 2\n+        and h.param_is_embedded_c = ?\n+        and h.param_origin_or_empty_c = ?\n+        and h.param_cdn_origin_or_empty_c = ?\n+        and h.param_ugc_origin_or_empty_c = ?\n       \"\"\"\n \n     val values = List(\n@@ -681,10 +683,12 @@ class RdbSystemTransaction(\n           sitePageId.pageId.asAnyRef,\n           renderParams.comtOrder.toInt.asAnyRef,\n           renderParams.comtNesting.asAnyRef,\n-          renderParams.isEmbedded.asAnyRef,\n           renderParams.widthLayout.toInt.asAnyRef,\n+          renderParams.isEmbedded.asAnyRef,\n           renderParams.embeddedOriginOrEmpty,\n-          renderParams.cdnOriginOrEmpty)\n+          renderParams.cdnOriginOrEmpty,\n+          renderParams.ugcOriginOrEmpty,\n+          )\n \n     runQueryFindOneOrNone(query, values, rs => {\n       val currentSitePageVersion = SitePageVersion(\n@@ -707,9 +711,16 @@ class RdbSystemTransaction(\n     // e.g. add a pages-to-rerender queue table. Or just indexes somehow.\n \n     // First find pages for which there is on cached content html.\n-    // But not very new pages (more recent than a few minutes) because those pages\n-    // will likely be rendered by a GET request handling thread any time soon, when\n-    // they're requested, the first time. See debiki.dao.RenderedPageHtmlDao [5KWC58].\n+    // But not 1) very new pages (more recent than a few minutes [.wait_a_minute]) because\n+    // those pages will likely be rendered by a GET request handling thread\n+    // any time soon, when they're requested, the first time.\n+    // See debiki.dao.RenderedPageHtmlDao [5KWC58].\n+    // And not 2) old pages, say, more than a month — if they haven't\n+    // been rendered at all during that long, they're abandoned, in one way or\n+    // another? E.g. a new site, an auto generated page, that was never visited?\n+    // (Or if page_html_cache_t was cleared for whatever reason, then, it's\n+    // not necessary to background-rerender all older pages? Typically the more recent\n+    // pages get most visits. And older ones can be rerendered on demand.)\n     val pagesNotCached = mutable.Set[PageIdToRerender]()\n     val neverRenderedQuery = s\"\"\" -- SLOW_QUERY: 4 ms @ Ty.io [rerndr_qry]\n       select p.site_id, p.page_id, p.version current_version\n@@ -722,7 +733,8 @@ class RdbSystemTransaction(\n           inner join page_paths3 pp\n               on p.site_id = pp.site_id and p.page_id = pp.page_id and pp.canonical = 'C'\n       where h.page_id_c is null -- page not in cache\n-      and p.created_at < now_utc() - interval '2' minute\n+        and p.created_at between (now_utc() - interval '1' month)\n+                             and (now_utc() - interval '2' minute) -- [.wait_a_minute]\n       and p.page_role != ${PageType.SpecialContent.toInt}\n       limit $limit\n       \"\"\"\n@@ -752,34 +764,54 @@ class RdbSystemTransaction(\n           h.param_comt_order_c,\n           h.param_comt_nesting_c,\n           h.param_width_layout_c,\n+          h.param_theme_id_c_u,\n           h.param_is_embedded_c,\n-          h.param_origin_c,\n-          h.param_cdn_origin_c,\n+          h.param_origin_or_empty_c,\n+          h.param_cdn_origin_or_empty_c,\n+          h.param_ugc_origin_or_empty_c,\n           h.cached_site_version_c,\n           h.cached_page_version_c,\n           h.cached_app_version_c,\n-          h.cached_store_json_hash_c\n+          h.cached_store_json_hash_c,\n+          h.updated_at_c\n           -- cached_store_json_c   -- Not needed — we're looking up not to use, but\n           -- cached_html_c         -- to delete this page_html_cache_t row.\n         from pages3 p inner join page_html_cache_t h\n             on p.site_id = h.site_id_c\n             and p.page_id = h.page_id_c\n             -- Is the cached html stale?\n-            and p.version > h.cached_page_version_c\n+            and p.version > h.cached_page_version_c  -- [stale_version_check]\n         -- Don't rerender embedded comments pages. It's a bit tricky to lookup their origin,\n         -- which needs to be included [EMBCMTSORIG]. And it's ok if it takes a second extra to\n         -- load an embedded comments page because it gets rendered on demand: the user will start\n         -- with looking at the blog post/article, won't care about the comments until later, right.\n-        -- Do need to match the cdn origin though.\n         where p.page_role <> ${PageType.EmbeddedComments.toInt}\n+          and h.param_theme_id_c_u = 2\n           and h.param_is_embedded_c = false\n           and h.param_width_layout_c in (${WidthLayout.Tiny.toInt}, ${WidthLayout.Medium.toInt})\n+          and p.created_at < (now_utc() - interval '2' minute) -- [.wait_a_minute]\n           -- The server's origin needs to be specified only for embedded pages. [REMOTEORIGIN]\n-          and h.param_origin_c = ''\n-          and h.param_cdn_origin_c = ?\n+          and h.param_origin_or_empty_c = ''\n+          -- Skip rows with the wrong CDN or UGC origin (maybe the CDN or UGC was\n+          -- recently changed). Later, we delete stale rows [regardless_of_cdn].\n+          -- Ignore:  h.param_cdn_origin_or_empty_c\n+          --    and:  h.param_ugc_origin_or_empty_c\n         limit $limit\n         \"\"\"\n-      runQuery(outOfDateQuery, List(daoFactory.cdnOrigin.getOrElse(\"\")), rs => {\n+        /* Don't, random() might want to scan the whole table:\n+        // (see e.g.: https://stackoverflow.com/questions/8674718/best-way-to-select-random-rows-postgresql )\n+        -- Rerender recently accessed pages first (but not very recently\n+        -- see [.wait_a_minute] above).\n+        -- Hmm could this cause starvation? If a few pages get changed all the\n+        -- time, and always rerendered first?\n+        -- order by h.updated_at_c desc limit $limit\n+        order by random() limit ${limit * 2}) subquery_name\n+        -- But picking the first $limit of $limit*2 random rows, should avoid that problem.\n+        -- However, what's the exec plan for random()? Ooops, it is (can be) a full table scan?\n+        order by updated_at_c desc limit $limit\n+        */\n+\n+      runQuery(outOfDateQuery, Nil, rs => {\n         while (rs.next()) {\n           pagesStale += getPageIdToRerender(rs, hasCachedVersion = true)\n         }"
    },
    {
      "sha": "1e33a8c2219dd4230393ef962dca8c053de4967f",
      "filename": "appsv/rdb/src/main/scala/com/debiki/dao/rdb/RdbUtil.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Frdb%2Fsrc%2Fmain%2Fscala%2Fcom%2Fdebiki%2Fdao%2Frdb%2FRdbUtil.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1017,8 +1017,9 @@ object RdbUtil {\n           // comtNesting =  param_comt_nesting_c  — later\n           widthLayout = WidthLayout.fromInt(rs.getInt(\"param_width_layout_c\")),\n           isEmbedded = rs.getBoolean(\"param_is_embedded_c\"),\n-          origin = rs.getString(\"param_origin_c\"),\n-          anyCdnOrigin = getOptString(rs, \"param_cdn_origin_c\"),\n+          origin = rs.getString(\"param_origin_or_empty_c\"),\n+          anyCdnOrigin = getOptStringEmptyAsNone(rs, \"param_cdn_origin_or_empty_c\"),\n+          anyUgcOrigin = getOptStringEmptyAsNone(rs, \"param_ugc_origin_or_empty_c\"),\n           // Requests with custom page root or page query, aren't cached. [5V7ZTL2]\n           anyPageRoot = None,\n           anyPageQuery = None)"
    },
    {
      "sha": "5846fb55b55b3c4a0cc933b4c52eb8436deb6308",
      "filename": "appsv/server/controllers/DebugTestController.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FDebugTestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FDebugTestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FDebugTestController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -518,24 +518,31 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: TyConte\n \n \n \n-  def showPagePopularityStats(pageId: PageId): Action[Unit] = AdminGetAction { request =>\n+  def showPagePopularityStats(pageId: PageId, scoreAlg: Opt[i32]): Action[Unit] = AdminGetAction { request =>\n     import request.dao\n+    val scoreAlg_ =\n+          if (scoreAlg is PagePopularityCalculator.OpLikeVotes)\n+            PagePopularityCalculator.OpLikeVotes\n+          else\n+            PagePopularityCalculator.CurrentScoreAlg\n+\n     val (scoreInDb, scoreNow, statsNow) = dao.readOnlyTransaction { tx =>\n-      val scoreInDb = tx.loadPagePopularityScore(pageId)\n+      val scoreInDb = tx.loadPagePopularityScore(pageId, scoreAlg = scoreAlg_)\n       val pageParts = PagePartsDao(pageId, dao.loadWholeSiteSettings(tx), tx)\n       val actions = tx.loadActionsOnPage(pageParts.pageId)\n       val visits = tx.loadPageVisitTrusts(pageParts.pageId)\n       val statsNow = PagePopularityCalculator.calcPopStatsNowAndThen(\n         globals.now(), pageParts, actions, visits)\n-      val scoreNow = PagePopularityCalculator.calcPopularityScores(statsNow)\n+      val scoreNow = PagePopularityCalculator.calcPopularityScores(statsNow, scoreAlg = scoreAlg_)\n       (scoreInDb, scoreNow, statsNow)\n     }\n+\n     Ok(i\"\"\"\n-      |Score in db\n+      |Score in db, for alg $scoreAlg_\n       |==================================\n       |${scoreInDb.map(_.toPrettyString) getOrElse \"Absent\"}\n       |\n-      |Score now\n+      |Score now, for alg $scoreAlg_\n       |==================================\n       |${scoreNow.toPrettyString}\n       |"
    },
    {
      "sha": "3ef0853f733502072e25bbcaf86ed95b8a341f70",
      "filename": "appsv/server/controllers/EditController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FEditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FEditController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -286,8 +286,9 @@ class EditController @Inject()(cc: ControllerComponents, edContext: TyContext)\n \n     CHECK_AUTHN_STRENGTH\n \n+    val siteInclHostnames: SiteIdHostnames = request.dao.theSite()\n     val renderer = new LinkPreviewRenderer(\n-          globals, siteId = siteId, mayHttpFetch = true,\n+          globals, site = siteInclHostnames, mayHttpFetch = true,\n           requesterId = requesterOrUnknown.id)\n \n     val response = renderer.fetchRenderSanitize(uri, inline = inline).transform("
    },
    {
      "sha": "6525e50896a52ff8840a09a6784d78075cf33e9f",
      "filename": "appsv/server/controllers/EmbeddedTopicsController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FEmbeddedTopicsController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -106,6 +106,7 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ty\n               isEmbedded = true,\n               origin = request.origin,\n               anyCdnOrigin = globals.anyCdnOrigin,\n+              anyUgcOrigin = globals.anyUgcOriginFor(request.site),\n               anyPageRoot = None,\n               anyPageQuery = None)\n "
    },
    {
      "sha": "8c86700f1e241680df1e461fdea517e5472b5b75",
      "filename": "appsv/server/controllers/ForumController.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FForumController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FForumController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -28,7 +28,7 @@ import play.api.libs.json._\n import play.api.mvc._\n import scala.collection.{immutable, mutable => mut}\n import scala.collection.mutable.ArrayBuffer\n-import talkyard.server.{TyContext, TyController}\n+import talkyard.server.{TyContext, TyController, pop}\n import javax.inject.Inject\n import ForumController._\n import talkyard.server.JsX._\n@@ -168,7 +168,9 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       defaultSortOrder =\n             if (!doItVotesPopFirst) None\n             else Some(PageOrderOffset.ByScoreAndBumpTime(\n-                  offset = None, TopTopicsPeriod.Year)),\n+                  // Later: Make configurable. [conf_do_it_cats]\n+                  offset = None, TopTopicsPeriod.Default,\n+                  scoreAlg = pop.PagePopularityCalculator.OpLikeVotes)),\n       comtOrder = anyComtOrder,\n       comtNesting = anyComtNesting,\n       comtsStartHidden = comtsStartHidden,"
    },
    {
      "sha": "a26a2d5d50c00992ee5523df6d847de679735a7b",
      "filename": "appsv/server/controllers/SuperAdminController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FSuperAdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FSuperAdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FSuperAdminController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -120,7 +120,7 @@ class SuperAdminController @Inject()(cc: ControllerComponents, edContext: TyCont\n \n \n   private def siteToJson(site: SiteInclDetails, staff: Seq[UserInclDetails]) = {\n-    Json.obj(\n+    Json.obj(  // ts: SASite\n       \"id\" -> site.id,\n       \"pubId\" -> site.pubId,\n       \"status\" -> site.status.toInt,"
    },
    {
      "sha": "06855348aebd3adc2b6684aaf3394a9e24f28eb7",
      "filename": "appsv/server/controllers/UserController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FUserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FUserController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -557,6 +557,8 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n           die(\"TyE26UKVW4\")\n       })\n \n+      val anyPicUrl = member.mediumAvatar.map(request.ugcOrCdnOrSiteOrigin + _.url)\n+\n       Json.obj(\n         \"fullName\" -> JsStringOrNull(member.fullName),\n         \"username\" -> JsString(member.username),\n@@ -567,7 +569,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: TyContext)\n         \"websiteUrl\" -> JsStringOrNull(member.website),\n         \"location\" -> JsStringOrNull(member.country),\n         // Incl in Uploads links archieve instead?\n-        \"avatarImageUrl\" -> JsStringOrNull(member.mediumAvatar.map(request.cdnOrSiteOrigin + _.url)),\n+        \"avatarImageUrl\" -> JsStringOrNull(anyPicUrl),\n         \"trustLevel\" -> JsString(member.effectiveTrustLevel.toString),\n         \"identities\" -> identitiesJson,\n         \"statistics\" -> statsJson,"
    },
    {
      "sha": "ee90515da164584eab431b660ae22c98e19ff3a3",
      "filename": "appsv/server/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fcontrollers%2FViewPageController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -508,6 +508,11 @@ object ViewPageController {\n             globals.anyCdnOrigin foreach { cdnOrigin =>\n               okOrigins += cdnOrigin\n             }\n+            // Only let side admins add custom scripts.\n+            globals.anyUgcOriginFor(request.site, forAssetsByAdmins = true) foreach { origin =>\n+              assert(origin contains \"://a-\", \"TyE02RAMJL4\")\n+              okOrigins += \" \" + origin\n+            }\n             s\"script-src 'self' $okOrigins; \"\n           }\n "
    },
    {
      "sha": "697158abcd303e211b8dba0b538a83d61ed13716",
      "filename": "appsv/server/debiki/Globals.scala",
      "status": "modified",
      "additions": 125,
      "deletions": 15,
      "changes": 140,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FGlobals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FGlobals.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -46,7 +46,7 @@ import scala.util.matching.Regex\n import talkyard.server.TyContext\n import talkyard.server.http.GetRequest\n import talkyard.server.jobs.Janitor\n-import play.api.http.{HeaderNames => p_HeaderNames}\n+import play.api.http.{HeaderNames => p_Headers}\n import play.api.mvc.RequestHeader\n import talkyard.server.TyLogging\n \n@@ -68,6 +68,8 @@ object Globals extends TyLogging {\n \n   val LoginOriginConfValName = \"talkyard.loginOrigin\"\n   val CdnOriginConfValName = \"talkyard.cdn.origin\"\n+  val UgcOriginConfValName = \"talkyard.ugc.origin\"\n+  val UgcBaseDomainConfValName = \"talkyard.ugc.baseDomain\"\n   val LocalhostUploadsDirConfValName = \"talkyard.uploads.localhostDir\"\n   val DefaultLocalhostUploadsDir = \"/opt/talkyard/uploads/\"\n \n@@ -563,24 +565,70 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     * won't make us use http instead of https — that could break embedded comments when testing\n     * locally and embedding page = http://localhost/... .\n     */\n-  val anyCdnOrigin: Option[String] =\n-    config.cdn.origin.map(origin => {\n+  val anyCdnOrigin: Option[String] = _checkOrigin(config.cdn.origin, CdnOriginConfValName)\n+\n+  val anyUgcOrigin: Option[String] = _checkOrigin(config.ugc.origin, UgcOriginConfValName)\n+\n+  private def _checkOrigin(anyOrigin: Opt[St], confValName: St): Opt[St] =\n+    anyOrigin.map(origin => {\n       if (origin.startsWith(\"https:\")) origin\n       else if (secure && origin.startsWith(\"//\")) \"https:\" + origin\n       else if (!secure) origin\n       else if (origin.startsWith(\"http:\")) {\n-        die(\"EdEINSECCDNORIG\", o\"\"\"The server is configured to use https, but in the config file,\n-            $CdnOriginConfValName is http://... (not https)\"\"\")\n+        die(\"TyEINSECORIG\", o\"\"\"The server is configured to use https, but in the config file,\n+            $confValName is http://... (not https)\"\"\")\n       }\n       else {\n-        die(\"EdEBADCDNORIG\", o\"\"\"In the config file, $CdnOriginConfValName is not http(s)\n+        die(\"EdEBADCDNORIG\", o\"\"\"In the config file, $confValName is not http(s)\n             but something else weird.\"\"\")\n       }\n     })\n \n   def cdnOrSiteOrigin(siteHost: St): St =\n     anyCdnOrigin.getOrElse(schemeColonSlashSlash + siteHost)\n \n+  private val anyUgcBaseDomain: Opt[St] = getStringNoneIfBlank(UgcBaseDomainConfValName)\n+\n+\n+  def ugcOrCdnOrSiteOriginFor(site: SiteTrait, siteAdr: St, forAssetsByAdmins: Bo = false): St = {\n+    anyUgcOrCdnOriginFor(site, forAssetsByAdmins = forAssetsByAdmins\n+                          ) getOrElse s\"$schemeColonSlashSlash$siteAdr\"\n+  }\n+\n+  def anyUgcOrCdnOriginFor(site: SiteTrait, forAssetsByAdmins: Bo = false): Opt[St] = {\n+    anyUgcOriginFor(site, forAssetsByAdmins = forAssetsByAdmins) orElse anyCdnOrigin\n+  }\n+\n+  def anyUgcOriginFor(site: SiteTrait, forAssetsByAdmins: Bo = false): Opt[St] = {\n+    val anyUgcSubdomainOrigin =\n+          if (!site.isFeatureEnabled(\"ffUgcSubdomains\", config.featureFlags)) None\n+          else anyUgcBaseDomain.map(baseDomain => {\n+            // (Could optionally include the scheme in the base domain config,\n+            // e.g. \"https://ugc.example.com\" — can in some cases make it simpler to\n+            // test on localhost using http, but reading from a real UGC domain using\n+            // https.)\n+            val aOrU = if (forAssetsByAdmins) AssetsUgcHostnamePrefix else UgcHostnamePrefix\n+            // If preview: \"p-\" but let's wait.\n+            schemeColonSlashSlash + aOrU + site.pubId + \".\" + baseDomain\n+          })\n+    anyUgcSubdomainOrigin orElse {\n+      // Since no UGC CDN is specified, this should be a single or few forums server, ...\n+      if (forAssetsByAdmins) {\n+        // ... and it makes sense to serve [any scripts and styles added by admins] from\n+        // any CDN or the server directly — then, it's simpler to understand how\n+        // the config values work?  (there'd be a CDN and a UGC CDN (complicated enough?)\n+        // but no third CDN for admin assets)  (admins aren't supposed to try to mess up\n+        // their own self hosted server) ...\n+        None\n+      }\n+      else {\n+        // ... whilst other user contents should be served from any UGC CDN.\n+        anyUgcOrigin\n+      }\n+    }\n+  }\n+\n+\n   val scheme: String = if (secure) \"https\" else \"http\"\n   def schemeColonSlashSlash: String = scheme + \"://\"\n \n@@ -704,6 +752,8 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n \n \n   /** If a hostname matches this pattern, the site id can be extracted directly from the url.\n+    * Is like \"site-123.example.com\" — then the site id is 123.\n+    * Or if the id is long, like \"site-aabbcc112233.ex.com\" then we'll lookup by publ id aabb...33.\n     */\n   val siteByIdHostnameRegex: Regex = {\n     // The hostname must be directly below the base domain, otherwise\n@@ -713,7 +763,17 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     s\"\"\"^$SiteByIdHostnamePrefix(.*)\\\\.$baseDomainNoPort$$\"\"\".r\n   }\n \n+  /** User-generated content (UGC) can (if configured) be accessed via an UGC CDN.\n+    * Then, the CDN subdomains are like \"u-aabbcc112233\" or \"a-...\"  for user-generated\n+    * content, and admins' custom site assets (site specific scripts & styles).\n+    */\n+  val anySiteByUgcPrefixAndIdHostnameRegex: Opt[Regex] = anyUgcBaseDomain map { ugcBaseDomain =>\n+    s\"\"\"^([au]-)(.*)\\\\.$ugcBaseDomain$$\"\"\".r\n+  }\n+\n   def SiteByIdHostnamePrefix = \"site-\"\n+  def UgcHostnamePrefix = \"u-\"        // also in the regex just above\n+  def AssetsUgcHostnamePrefix = \"a-\"  //\n \n   def siteByPubIdOrigin(pubId: PubSiteId): String =\n     s\"$scheme://${siteByPubIdHostnamePort(pubId)}\"\n@@ -740,6 +800,8 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     * By id: If a HTTP request specifies a hostname like \"site-<id>.<baseDomain>\",\n     * for example:  site-123.example.com,\n     * then the site is looked up directly by id.\n+    * Or if it's via a CDN: \"u-<id>.cdn.example.com\" for user-generated content,\n+    * or \"a-<id>...\" for scripts and styles added by admins.\n     */\n   def lookupSiteOrThrow(request: RequestHeader): SiteBrief = {\n     // Nginx sends the host name in the Host header — not in the request line.\n@@ -748,10 +810,24 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     // https://tools.ietf.org/html/rfc3986#page-27\n     // — Nginx instead sends just  '/url/path' and the host in the Host header.)\n     // Later:\n-    //val hostInHeader = request.headers.get(p_HeaderNames.HOST).getOrElse(\"\") //  [ngx_host_hdr]\n+    //val hostInHeader = request.headers.get(p_Headers.HOST).getOrElse(\"\") //  [ngx_host_hdr]\n     // For now: (doesn't matter — this'll use the Host header anyway)\n-    val hostInHeader = request.host\n-    lookupSiteOrThrow(host = hostInHeader, request.uri)\n+\n+    val forwHost =\n+          if (config.featureFlags.contains(\"ffIgnoreXForwardedHost\")) None\n+          else {\n+            val anyForwardedProto = request.headers.get(p_Headers.X_FORWARDED_PROTO)\n+            val anyForwardedHost = request.headers.get(p_Headers.X_FORWARDED_HOST)\n+            // Very odd if a request to the CDN didn't use https.\n+            throwForbiddenIf(anyForwardedHost.isDefined && secure &&\n+                  anyForwardedProto.isSomethingButNot(\"https\"),\n+                  \"TyEFORWPROTO\", s\"${p_Headers.X_FORWARDED_PROTO} is ${anyForwardedProto\n+                      } but should be https. ${p_Headers.X_FORWARDED_HOST}: $anyForwardedHost\")\n+            anyForwardedHost\n+          }\n+    val targetHost = forwHost getOrElse request.host\n+\n+    lookupSiteOrThrow(host = targetHost, request.uri)\n   }\n \n \n@@ -795,8 +871,36 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n     if (defaultSiteHostname is hostname)\n       return defaultSiteIdAndHostname\n \n+    // If the hostname is  \"u-<site-pub-id>\" or \"a-...\",  then it's a CDN subdomain for\n+    // user-generated contents (UGC).\n+\n+    anySiteByUgcPrefixAndIdHostnameRegex foreach { SiteIdUgcRegex => hostname match {\n+      case SiteIdUgcRegex(prefix: St, pubId: PubSiteId) =>\n+        throwForbiddenIf(pubId.length < Site.MinPubSiteIdLength,\n+              \"TyEUGC0SITEID\", s\"Not a pub site id: '$pubId', too short\")\n+\n+        // Extra security checks, just to avoid anyone doing sth unexpected via a CDN.\n+        def path = pathAndQuery.takeWhile(_ != '?')\n+        val isAssets = prefix == AssetsUgcHostnamePrefix\n+        import talkyard.{server => srv}\n+        // Site custom assets URL paths should start with: /-/site/.\n+        throwForbiddenIf(isAssets && !pathAndQuery.startsWith(srv.CustomAssetsUrlBasePath),\n+              \"TyEUGCAPATH\", s\"Bad a- UGC path: $path\")\n+        // Uploaded files paths should be:  /-/u/\n+        throwForbiddenIf(!isAssets && !pathAndQuery.startsWith(srv.UploadsUrlBasePath)\n+              // Or a legacy old path:\n+              && !pathAndQuery.startsWith(\"/-/uploads/\"),\n+              \"TyEUGCUPATH\", s\"Bad u- UGC path: $path\")\n+        val site = systemDao.getSiteByPubId(pubId) getOrElse {\n+          throwNotFound(\"TyEUGC0SITE\", s\"No site with pub id $pubId\")\n+        }\n+        return site.brief\n+      case _ =>\n+    }}\n+\n     // If the hostname is like \"site-123.example.com\" then we'll just lookup site id 123.\n     // Or if the id is long, like \"site-aabbcc112233.ex.com\" then we'll lookup by publ id aabb...33.\n+\n     val SiteByIdRegex = siteByIdHostnameRegex // uppercase, otherwise Scala won't \"de-structure\".\n     hostname match {\n       case SiteByIdRegex(siteIdString: String) =>\n@@ -936,7 +1040,7 @@ class Globals(  // RENAME to TyApp? or AppContext? TyAppContext? variable name =\n         val readWriteDataSource = Debiki.createPostgresHikariDataSource(readOnly = false, conf, isOrWasTest)\n         val rdb = new Rdb(readOnlyDataSource, readWriteDataSource)\n         val dbDaoFactory = new RdbDaoFactory(\n-          rdb, ScalaBasedMigrations, getCurrentTime = now, cdnOrigin = anyCdnOrigin, isOrWasTest)\n+              rdb, ScalaBasedMigrations, getCurrentTime = now, isTest = isOrWasTest)\n \n         // Create any missing database tables before `new State`, otherwise State\n         // creates background threads that might attempt to access the tables.\n@@ -1311,10 +1415,6 @@ class Config(conf: play.api.Configuration) extends TyLogging {\n   val dnsCnameTargetHost: Option[String] =\n     conf.getOptional[String](Config.DnsCnameTargetHostConfValName).noneIfBlank\n \n-  CLEAN_UP; REMOVE // this + the routes file entry [2KGLCQ4], use UploadsUrlBasePath instead only.\n-  val uploadsUrlPath: String = controllers.routes.UploadsController.servePublicFile(\"\").url\n-  require(uploadsUrlPath == talkyard.server.UploadsUrlBasePath, \"TyE2UKDU0\")\n-\n   val maxGroupMentionNotfs: Int =\n     conf.getOptional[Int](MaxGroupMentionNotfsConfValName) getOrElse 25\n \n@@ -1382,12 +1482,22 @@ class Config(conf: play.api.Configuration) extends TyLogging {\n             .getOrElse(3 * Mebibyte64)  // or 25 MiB? Nginx: TY_NGX_LIMIT_REQ_BODY_SIZE=25m\n   }\n \n+  /** This CDN is for assets (js, css, built-in images) only. */\n   object cdn {\n     /** No trailing slash. */\n     val origin: Option[String] =\n       conf.getOptional[String](CdnOriginConfValName).map(_.dropRightWhile(_ == '/')).noneIfBlank\n+  }\n \n-    def uploadsUrlPrefix: Option[String] = origin.map(_ + uploadsUrlPath)\n+  /** This is for user-generated content (but not built-in scripts and styles). */\n+  object ugc {\n+    /** No trailing slash. */\n+    val origin: Option[String] =\n+      conf.getOptional[String](UgcOriginConfValName).map(_.dropRightWhile(_ == '/')).noneIfBlank\n+\n+    /** No trailing slash. */\n+    val baseDomain: Opt[St] =\n+      conf.getOptional[St](UgcBaseDomainConfValName).map(_.dropRightWhile(_ == '/')).noneIfBlank\n   }\n \n   object createSite {"
    },
    {
      "sha": "d976cd952d9bde33e147cc37d3b98dd6e3281206",
      "filename": "appsv/server/debiki/Nashorn.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 11,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FNashorn.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FNashorn.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -69,7 +69,6 @@ class Nashorn(\n   @volatile private var firstCreateEngineError: Option[Throwable] = None\n \n   private def secure = globals.secure\n-  private def cdnOrigin: Option[String] = globals.anyCdnOrigin\n   private def isTestSoDisableScripts = globals.isTestDisableScripts\n \n \n@@ -180,10 +179,7 @@ class Nashorn(\n     val timeBefore = System.currentTimeMillis()\n \n     val htmlOrError = engine.invokeFunction(\n-          \"renderReactServerSide\", reactStoreJsonString,\n-          // CLEAN_UP REMOVE  cdnOrigin not needd here any more?\n-          // Instead: theStore.anyCdnOrigin\n-          cdnOrigin.getOrElse(\"\")).asInstanceOf[String]\n+          \"renderReactServerSide\", reactStoreJsonString).asInstanceOf[String]\n     if (htmlOrError.startsWith(ErrorRenderingReact)) {\n       logger.error(s\"Error rendering page with React server side [DwE5KGW2]\")\n       return Bad(htmlOrError)\n@@ -230,16 +226,16 @@ class Nashorn(\n     // embeddedOriginOrEmpty for mentions too?\n \n     val uploadsUrlPrefix =\n-      cdnOrigin.getOrElse(\n-        renderParams.embeddedOriginOrEmpty) +\n-           talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n+          globals.anyUgcOrCdnOriginFor(renderParams.siteIdHostnames).getOrElse(\n+              renderParams.embeddedOriginOrEmpty) +\n+                  talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n \n     // This link preview renderer fetches previews from the database,\n     // link_previews_t, but makes no external requests — cannot do that from inside\n     // a Nashorn script.\n     val prevwRenderer = new LinkPreviewRendererForNashorn(\n           new LinkPreviewRenderer(\n-              globals, siteId = siteId,\n+              globals, site = renderParams.siteIdHostnames,\n               // Cannot do external requests from inside Nashorn.\n               mayHttpFetch = false,\n               // The requester doesn't matter — won't fetch external data.\n@@ -433,7 +429,7 @@ class Nashorn(\n         |  callback();\n         |}\n         |\n-        |function renderReactServerSide(reactStoreJsonString, cdnOriginOrEmpty) {\n+        |function renderReactServerSide(reactStoreJsonString) {\n         |  var exceptionAsString;\n         |  try {\n         |    theStore = JSON.parse(reactStoreJsonString);\n@@ -706,7 +702,9 @@ object Nashorn {\n \n \n   /** The page-type-question e2e test, run it like so:\n-    * s/wdio target/e2e/wdio.2chrome.conf.js --only page-type-question-closed.2browsers --da\n+    *\n+    *   s/wdio-7 --only page-type-question-closed.2br.d --cd --da\n+    *\n     * and then open the source, and copy the json inside the #thePageJson script elem.\n     *\n     * COULD [update_warmup_json]"
    },
    {
      "sha": "2bebd2a90e22a32b216d743fe963a772befc8cde",
      "filename": "appsv/server/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 35,
      "deletions": 16,
      "changes": 51,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FPageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FPageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FPageTpi.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -198,9 +198,12 @@ class SiteTpi protected (\n \n           \"testNowMs\" -> JsLongOrNull(anyTestNowMs),   // or undef\n           \"minMaxJs\" -> minMaxJs,\n-          \"debugOrigin\" -> s\"$httpsColonOrEmpty//$serverAddress\", // [INLTAGORIG]\n+          \"debugOrigin\" -> s\"$httpsColonOrEmpty//$siteAdr\", // [INLTAGORIG]\n           \"cdnOriginOrEmpty\" -> JsString(cdnOrigin.getOrElse(\"\")),\n+          // RENAME to cdnOrSiteOrigin ?\n           \"cdnOrServerOrigin\" -> cdnOrServerOrigin, // for admin page embedded comments code\n+          // UGC origin not needed, there's uploadsUrlPrefix instead.\n+          // So kip:  \"ugcOrCdnOrSiteOrigin\" -> ugcOrCdnOrSiteOrigin\n           \"pubSiteIdOrigin\" -> pubSiteIdOrigin,\n           \"isInLoginWindow\" -> isInLoginWindow, // @isInLoginWindowBoolStr,\n           \"isInLoginPopup\" -> isInLoginPopup,  // @isInLoginPopupBoolStr,\n@@ -266,8 +269,8 @@ class SiteTpi protected (\n     */\n   def httpsColonOrEmpty: String = if (globals.secure) \"https:\" else \"\"\n \n-  def hostname: String = debikiRequest.host\n \n+  /** For templates. */\n   def companyDomain: String = {\n     debikiRequest.canonicalHostname.getOrElse(\n       globals.siteByIdHostnamePort(debikiRequest.siteId))\n@@ -279,6 +282,7 @@ class SiteTpi protected (\n \n \n \n+  /** For templates. */\n   def anyGoogleAnalytics4Script: St = {\n     val tagId = debikiRequest.siteSettings.googleUniversalAnalyticsTrackingId\n     // Google Analytics 4 tag ids always start with \"G-\", but old univ analy with \"UA-\"?\n@@ -289,6 +293,7 @@ class SiteTpi protected (\n     else views.html.scripts.googleAnalytics4(tagId).body\n   }\n \n+  /** For templates. */\n   def anyGoogleUniversalAnalyticsScript: String = {\n     val trackingId = debikiRequest.siteSettings.googleUniversalAnalyticsTrackingId\n     // Google Analytics 4 tag ids always start with \"G-\"? But old univ analy with \"UA-\"?\n@@ -297,17 +302,20 @@ class SiteTpi protected (\n     else views.html.googleAnalytics(trackingId).body\n   }\n \n-  def isRtlLanguage: Boolean = {\n+  private def isRtlLanguage: Boolean = {\n     // For now, just inline this knowledge here. Refactor-move elsewhere later. [5JUKQR2]\n     // The admin area is English only — so, no RTL, there.\n     siteSettings.languageCode == \"he_IL\" && !isAdminArea\n   }\n \n+  /** For templates. */\n   def dotRtl: String = if (isRtlLanguage) \".rtl\" else \"\"\n \n+  /** For templates. */\n   def minMaxCss: String = PageTpi.minMaxCss\n   def minMaxJs: String = PageTpi.minMaxJs\n \n+  /** For templates. */\n   def anySiteCustomStylesBundle(bundleName: String): xml.NodeSeq = {\n \n     val (nameNoSuffix, suffix) = bundleName match {\n@@ -325,7 +333,7 @@ class SiteTpi protected (\n       }\n       val fileName = assetBundleFileName(nameNoSuffix, version, suffix)\n       <link rel=\"stylesheet\" href={\n-        cdnOrServerOrigin + routes.SiteAssetBundlesController.customAsset(pubSiteId, fileName).url\n+        assetsUgcOrCdnOrSiteOrigin + routes.SiteAssetBundlesController.customAsset(pubSiteId, fileName).url\n       }/>\n     }\n     catch {\n@@ -342,58 +350,69 @@ class SiteTpi protected (\n     }\n   }\n \n+  /** For templates. */\n   def anySiteCustomScriptBundle(): xml.NodeSeq = {\n     val version = debikiRequest.dao.getAssetBundleVersion(\"scripts\", \"js\") getOrElse {\n       return <span></span>\n     }\n     val fileName = assetBundleFileName(\"scripts\", version, \"js\")\n     <script src={\n-      cdnOrServerOrigin + routes.SiteAssetBundlesController.customAsset(pubSiteId, fileName).url\n+      assetsUgcOrCdnOrSiteOrigin + routes.SiteAssetBundlesController.customAsset(pubSiteId, fileName).url\n     }></script>\n   }\n \n   /** The initial data in the React-Flux model, a.k.a. store. */\n-  def reactStoreSafeJsonString: String =\n+  protected def reactStoreSafeJsonString: String =\n     json getOrElse {\n       debikiRequest.dao.jsonMaker.makeSpecialPageJson(\n             debikiRequest, inclCatsTagsSects_unimpl = inclCatsTagsSects_unimpl).toString()\n     }\n \n \n+  /** For templates. */\n   def assetUrl(fileName: String): String = assetUrlPrefix + fileName\n \n-  def assetUrlPrefix: String =\n+  private def assetUrlPrefix: String =\n     s\"$cdnOrServerOrigin/-/assets/${globals.talkyardVersion}/\"   // sync with Nginx [NGXSTC]\n \n \n+  /** For templates. */\n   def mediaUrl(fileName: String): String = mediaUrlPrefix + fileName\n \n   // (No automatic asset versioning here — instead, do manually: append a digit,\n   // like 2, 3, 4..., to the sub folders in module ty-media, if modifying\n   // images etc there, to change the URL. Only needed every few years? anyway.)\n-  def mediaUrlPrefix: String =\n+  private def mediaUrlPrefix: String =\n     s\"$cdnOrServerOrigin/-/media/\"   // sync with Nginx [NGXSTC]\n \n+  /** For templates */\n   def fontUrl(fileName: St): St =\n     s\"$cdnOrServerOrigin/-/fonts/$fileName\"   // sync w Nginx [NGXSTC]\n \n-  def uploadsUrlPrefix: St =\n-    cdnOrServerOrigin + talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n+  // Or construct client side instead, given UGC & CDN & pub site id?\n+  private def uploadsUrlPrefix: St =\n+    ugcOrCdnOrSiteOrigin + talkyard.server.UploadsUrlBasePath + pubSiteId + '/'\n \n-  def pubSiteIdOrigin: St =\n+  private def pubSiteIdOrigin: St =\n     globals.siteByPubIdOrigin(pubSiteId)\n \n   /** Even if there's no CDN, we use the full server address so works also in\n     * embedded comments iframes.\n     */\n-  def cdnOrServerOrigin: St =\n-    globals.cdnOrSiteOrigin(serverAddress)\n+  private def cdnOrServerOrigin: St =\n+    globals.cdnOrSiteOrigin(siteAdr)\n \n-  def cdnOrigin: Opt[St] =\n+  /** Likewise for UGC (user generated content), see cdnOrServerOrigin. */\n+  private def ugcOrCdnOrSiteOrigin: St =\n+    globals.ugcOrCdnOrSiteOriginFor(site, siteAdr = siteAdr)\n+\n+  private def assetsUgcOrCdnOrSiteOrigin: St =\n+    globals.ugcOrCdnOrSiteOriginFor(site, siteAdr = siteAdr, forAssetsByAdmins = true)\n+\n+  private def cdnOrigin: Opt[St] =\n     globals.anyCdnOrigin\n \n-  RENAME // to siteAdr\n-  def serverAddress: String = debikiRequest.request.host\n+  private def siteAdr: St = debikiRequest.request.host\n \n }\n "
    },
    {
      "sha": "1820ce131c19c53ff86f8e7c646479fed175ca22",
      "filename": "appsv/server/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 19,
      "deletions": 8,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2FReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2FReactJson.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -173,6 +173,7 @@ class JsonMaker(dao: SiteDao) {\n       \"isEmbedded\" -> false,\n       \"embeddedOriginOrEmpty\" -> \"\",\n       \"anyCdnOrigin\" -> JsStringOrNull(globals.anyCdnOrigin),\n+      // anyUgcOrigin — not yet needed; the site is empty.\n       \"appVersion\" -> globals.applicationVersion,\n       \"pubSiteId\" -> JsString(site.pubId),\n       \"siteId\" -> JsNumber(site.id),  // LATER remove in Prod mode [5UKFBQW2]\n@@ -506,6 +507,7 @@ class JsonMaker(dao: SiteDao) {\n       // the Talkyard server origin in the links. [REMOTEORIGIN] [60MRKDJ56]\n       \"embeddedOriginOrEmpty\" -> renderParams.embeddedOriginOrEmpty,\n       \"anyCdnOrigin\" -> JsStringOrNull(renderParams.anyCdnOrigin),\n+      \"anyUgcOrigin\" -> JsStringOrNull(globals.anyUgcOriginFor(site)),\n       \"appVersion\" -> globals.applicationVersion,\n       \"pubSiteId\" -> JsString(site.pubId),\n       \"siteId\" -> JsNumber(site.id), // LATER remove in Prod mode [5UKFBQW2]\n@@ -570,6 +572,7 @@ class JsonMaker(dao: SiteDao) {\n       \"isEmbedded\" -> false,  // what ??? Yes, if in emb editor iframe\n       \"embeddedOriginOrEmpty\" -> \"\",  // what ??? but not in use, instead: [60MRKDJ56]\n       \"anyCdnOrigin\" -> JsStringOrNull(globals.anyCdnOrigin),\n+      \"anyUgcOrigin\" -> JsStringOrNull(globals.anyUgcOriginFor(site)),\n       \"appVersion\" -> globals.applicationVersion,\n       \"pubSiteId\" -> JsString(site.pubId),\n       \"siteId\" -> JsNumber(site.id), // LATER remove in Prod mode [5UKFBQW2]\n@@ -1664,17 +1667,25 @@ object JsonMaker {\n     */\n   private def makeForumOrCategoryJson(forumPath: PagePath, category: Category): JsObject = {\n     val forumPathSlash = forumPath.value.endsWith(\"/\") ? forumPath.value | forumPath.value + \"/\"\n+    val latestOrTop = category.doItVotesEnabled ? \"top\" | \"latest\"  // [anc_cat_path]\n     val (name, path) =\n       if (category.isRoot)\n-        (\"Home\", s\"${forumPathSlash}latest\")   // [i18n]\n+        (\"Home\", s\"$forumPathSlash$latestOrTop\")   // I18N\n       else\n-        (category.name, s\"${forumPathSlash}latest/${category.slug}\")\n-    var result = Json.obj(\n-      \"categoryId\" -> category.id,\n-      \"title\" -> name,\n-      \"path\" -> path,\n-      \"unlistCategory\" -> category.unlistCategory,\n-      \"unlistTopics\" -> category.unlistTopics)\n+        (category.name, s\"$forumPathSlash$latestOrTop/${category.slug}\")\n+    var result = Json.obj( // ts: Ancestor\n+          \"categoryId\" -> category.id,\n+          \"title\" -> name,\n+          \"path\" -> path)\n+    if (category.doItVotesEnabled) {\n+      result += \"doItVotesPopFirst\" -> JsTrue\n+    }\n+    if (category.unlistCategory) {\n+      result += \"unlistCategory\" -> JsTrue\n+    }\n+    if (category.unlistTopics) {\n+      result += \"unlistTopics\" -> JsTrue\n+    }\n     if (category.isDeleted) {\n       result += \"isDeleted\" -> JsTrue\n     }"
    },
    {
      "sha": "f47a6d9dad383a9234aaf5be1a2dd6e23d9e017d",
      "filename": "appsv/server/debiki/dao/ForumDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FForumDao.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -22,6 +22,7 @@ import com.debiki.core.Prelude._\n import scala.collection.immutable\n import ForumDao._\n import debiki.{Globals, SafeStaticSourceAndHtml, TextAndHtml, TitleSourceAndHtml}\n+import talkyard.server.pop\n import talkyard.server.dao._\n \n \n@@ -396,7 +397,9 @@ trait ForumDao {\n           description = \"Here you can suggest and discuss ideas.\",\n           newTopicTypes = immutable.Seq(PageType.Idea),\n           defaultSortOrder = Some(PageOrderOffset.ByScoreAndBumpTime(\n-              offset = None, period = TopTopicsPeriod.Year)),\n+                scoreAlg = pop.PagePopularityCalculator.OpLikeVotes,\n+                offset = None,\n+                period = TopTopicsPeriod.Default)),\n           comtOrder = None,\n           comtNesting = None,\n           comtsStartHidden = None,"
    },
    {
      "sha": "a1fc493b9a52ee0ed4ffb9cea4c4a122abcc51a5",
      "filename": "appsv/server/debiki/dao/RenderContentService.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderContentService.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -67,7 +67,7 @@ class RenderContentActor(\n \n   var numBackgroundRenderErrorsInARow = 0\n \n-  override def tryReceive(message: Any, paused: Bo): U = if (!paused) message match {\n+  override def tryReceiveUnlessJobsPaused(message: Any): U = message match {\n     case PauseThreeSeconds =>\n       // Would be better with just [one-db-writer], then woudn't need this.\n       pauseUntilNanos = Some(System.nanoTime() + 3L * 1000L * 1000L * 1000L)\n@@ -239,6 +239,7 @@ class RenderContentActor(\n       origin = dao.theSiteOrigin(),\n       // Changing cdn origin requires restart, then mem cache disappears. So ok reuse anyCdnOrigin here.\n       anyCdnOrigin = globals.anyCdnOrigin,\n+      anyUgcOrigin = globals.anyUgcOriginFor(dao.theSite()),\n       // Requests with custom page root or page query, aren't cached. [5V7ZTL2]\n       anyPageRoot = None,\n       anyPageQuery = None)\n@@ -264,16 +265,14 @@ class RenderContentActor(\n     // primary keys, rather than updating the old stale row. So we delete any such\n     // old stale row instead.\n     //\n+    // We didn't look at the CDN, when finding stale rows to rerender.\n+    // Therefore, here we need to delete matching stale rows [regardless_of_cdn] address,\n+    // even if we've updated some of the stale rows above (via `renderIfNeeded()`).\n+    //\n     staleCachedVersion foreach { staleVer =>\n-      if (staleVer.renderParams == tinyParams || staleVer.renderParams == mediumParams) {\n-        // Then we've overwritten the stale cache entry already (via renderIfNeeded() above).\n-      }\n-      else {\n-        // The stale cache entry that made us rerender, is is still there — let's delete.\n-        dao.writeTx { (tx, _) =>\n-          tx.deleteCachedPageContentHtml(sitePageId.pageId, staleCachedVersion.get)\n-          // (Mem cache updated below.)\n-        }\n+      dao.writeTx { (tx, _) =>\n+        tx.deleteCachedPageContentHtml(sitePageId.pageId, staleVer)\n+        // (Mem cache updated below.)\n       }\n     }\n "
    },
    {
      "sha": "12446a17ae477fbc45adb96a75a90d6c2c18ae19",
      "filename": "appsv/server/debiki/dao/RenderedPageHtmlDao.scala",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FRenderedPageHtmlDao.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -322,25 +322,30 @@ trait RenderedPageHtmlDao {\n     // But what'll happen with  comtNesting!  Combinatorial explosion.  Hmm!\n     // Maybe it'll be ok if allowing a fixed nr, say 1 (flat), 2 (SO, FB), 3 (hmm) and inf?\n     //\n+    val anyUgcOrigin = globals.anyUgcOriginFor(theSite())\n     for (comtOrder <- PostSortOrder.All) {\n-      removeOneSortOrder(origin, sitePageId, comtOrder)\n+      removeOneSortOrder(\n+            origin = origin, anyUgcOrigin = anyUgcOrigin, sitePageId, comtOrder)\n     }\n   }\n \n \n-  private def removeOneSortOrder(origin: String, sitePageId: SitePageId, comtOrder: PostSortOrder): U = {\n+  private def removeOneSortOrder(origin: St, anyUgcOrigin: Opt[St], sitePageId: SitePageId,\n+          comtOrder: PostSortOrder): U = {\n     // A bit dupl code. [2FKBJAL3]\n     var renderParams = PageRenderParams(\n-      comtOrder,\n-      // comtNesting,  — later\n-      widthLayout = WidthLayout.Tiny,\n-      isEmbedded = false,\n-      origin = origin,\n-      // Changing cdn origin requires restart, then mem cache disappears. So ok reuse anyCdnOrigin here.\n-      anyCdnOrigin = globals.anyCdnOrigin,\n-      // Requests with custom page root or page query, aren't cached. [5V7ZTL2]\n-      anyPageRoot = None,\n-      anyPageQuery = None)\n+          comtOrder,\n+          // comtNesting,  — later\n+          widthLayout = WidthLayout.Tiny,\n+          isEmbedded = false,\n+          origin = origin,\n+          // Changing cdn origin requires restart. Then the mem cache disappears.\n+          // So, ok to assume the CDN and UGC origins haven't changed here.\n+          anyCdnOrigin = globals.anyCdnOrigin,\n+          anyUgcOrigin = anyUgcOrigin,\n+          // Requests with custom page root or page query, aren't cached. [5V7ZTL2]\n+          anyPageRoot = None,\n+          anyPageQuery = None)\n \n     memCache.remove(renderedPageKey(sitePageId, renderParams))\n "
    },
    {
      "sha": "24b28eeb08871f46b57bcd1e86261d4a55228805",
      "filename": "appsv/server/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Fdebiki%2Fdao%2FSiteDao.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -404,7 +404,7 @@ class SiteDao(\n   def theSiteIdsOrigins(): SiteIdOrigins = {\n     val site = theSite()\n     val (_, siteOrigin) = theSiteNameAndOriginImpl(site)\n-    val uploadsOrigin = globals.anyCdnOrigin.getOrElse(siteOrigin)\n+    val uploadsOrigin = globals.anyUgcOrCdnOriginFor(site) getOrElse siteOrigin\n     SiteIdOrigins(\n       siteId = site.id,\n       pubId = site.pubId,"
    },
    {
      "sha": "b5d65f5485d0ee7fafcaf0d1f134a14dbd9ef1ad",
      "filename": "appsv/server/talkyard/server/JsX.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2FJsX.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1071,6 +1071,7 @@ object JsX {   RENAME // to JsonPaSe\n       \"monthScore\" -> scores.monthScore,\n       \"quarterScore\" -> scores.quarterScore,\n       \"yearScore\" -> scores.yearScore,\n+      \"triennialScore\" -> scores.triennialScore,\n       \"allScore\" -> scores.allScore)\n   }\n "
    },
    {
      "sha": "15789de9cfc5cc3d910b8cbab5e6c8e5f549d164",
      "filename": "appsv/server/talkyard/server/api/ListController.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fapi%2FListController.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -30,6 +30,7 @@ import javax.inject.Inject\n import play.api.libs.json.{JsObject, JsValue, Json}\n import play.api.mvc.{Action, ControllerComponents, Result}\n import talkyard.server.parser.JsonConf\n+import talkyard.server.pop\n import debiki.JsonUtils._\n \n \n@@ -118,9 +119,17 @@ class ListController @Inject()(cc: ControllerComponents, edContext: TyContext)\n       //  PageOrderOffset.ByLikesAndBumpTime(offset = None)\n       //case \"ByTotLikesDesc\" =>\n       //  PageOrderOffset.ByLikesAndBumpTime(offset = None)\n+      //case \"ByDoItVotesDesc\" =>  [do_it_votes]  ?\n+      //  Will be a bit dupl code?  [list_by_score_q].\n+      //\n       case \"PopularFirst\" | _ =>  // internal name: \"ByScoreDescThenBumpedAtDesc\" ?\n         // Score and bump time, if nothing else specified. [TyT025WKRGJ]\n-        PageOrderOffset.ByScoreAndBumpTime(offset = None, TopTopicsPeriod.Week)\n+        PageOrderOffset.ByScoreAndBumpTime(offset = None,\n+              // Was week, let's not change right now. (External API.)\n+              TopTopicsPeriod.Week, // Or: TopTopicsPeriod.Default?\n+              // But if in a Do-It votes category, UX SHOULD: [do_it_votes]\n+              // scoreAlg = pop.PagePopularityCalculator.OpLikeVotes\n+              scoreAlg = pop.PagePopularityCalculator.CurrentScoreAlg)\n     }\n \n     val limitMax100: Opt[i32] = parseOptI32(listQueryJson, \"limit\", min = Some(1), max = Some(100))"
    },
    {
      "sha": "b435f820428cc5beda62cbf1f73b3515894cb2f7",
      "filename": "appsv/server/talkyard/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FDebikiRequest.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -26,6 +26,7 @@ import debiki.dao.{SiteDao, SystemDao}\n import debiki.EdHttp._\n import talkyard.server.TyContext\n import talkyard.server.authz.{AuthzCtxWithReqer, ForumAuthzContext, AuthzCtxOnAllWithReqer}\n+import talkyard.server.pop\n import talkyard.server.security.{BrowserId, SidOk, SidStatus, XsrfOk}\n import java.{util => ju}\n import play.api.mvc._\n@@ -198,8 +199,8 @@ abstract class AuthnReqHeader extends SomethingToRateLimit {\n     host == \"localhost\" || host.startsWith(\"localhost:\") ||\n       host.contains(\".localhost:\") || host.endsWith(\".localhost\"))\n \n-  def cdnOrSiteOrigin: String =\n-    globals.anyCdnOrigin.getOrElse(globals.schemeColonSlashSlash + host)\n+  def ugcOrCdnOrSiteOrigin: St =\n+    globals.ugcOrCdnOrSiteOriginFor(site, siteAdr = host)\n \n   def scheme: String = if (globals.secure) \"https\" else \"http\"\n \n@@ -288,11 +289,22 @@ object ListPagesQueryParser {\n       case \"ByCreatedAt\" =>\n         PageOrderOffset.ByCreatedAt(anyDateOffset)\n       case \"ByScore\" =>\n+        // Bit dupl code [list_by_score_q].\n+        // val isByDoIt = sortOrderStr == \"ByDoItVotes\"\n         val scoreStr = params.getFirst(\"maxScore\")\n+        val scoreAlgSt = params.getFirst(\"scoreAlg\")\n         val periodStr = params.getFirst(\"period\")\n-        val period = periodStr.flatMap(TopTopicsPeriod.fromIntString) getOrElse TopTopicsPeriod.Month\n+        val period = periodStr.flatMap(TopTopicsPeriod.fromIntString\n+                                          ) getOrElse TopTopicsPeriod.Default\n         val score = scoreStr.map(_.toFloatOrThrow(\"EdE28FKSD3\", \"Score is not a number\"))\n-        PageOrderOffset.ByScoreAndBumpTime(offset = score, period)\n+        val scoreAlg = scoreAlgSt.map(_.toIntOrThrow(\"TyE28FK45J\", \"scoreAcore is not an int\")\n+                                      ) getOrElse pop.PagePopularityCalculator.CurrentScoreAlg\n+        throwForbiddenIf(scoreAlg != (1: PageScoreAlg) && scoreAlg != 2,  // for now\n+              \"TyESCOREALG83\", \"Bad score alg: $scoreAlg\")\n+\n+        PageOrderOffset.ByScoreAndBumpTime(\n+              offset = score, period, scoreAlg = scoreAlg)\n+\n       case \"ByLikes\" =>\n         def anyNumOffset = params.getInt(\"num\") // CLEAN_UP rename 'num' to 'maxLikes'\n         (anyNumOffset, anyDateOffset) match {"
    },
    {
      "sha": "0ae858ebcf8b940a5b4a05aa7e4fb7c665c7b8e3",
      "filename": "appsv/server/talkyard/server/http/PageRequest.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPageRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPageRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fhttp%2FPageRequest.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -136,6 +136,7 @@ class PageRequest[A](\n           isEmbedded = embeddingUrl.nonEmpty,\n           origin = origin,\n           anyCdnOrigin = dao.globals.anyCdnOrigin,\n+          anyUgcOrigin = dao.globals.anyUgcOriginFor(site),\n           anyPageRoot = pageRoot,\n           anyPageQuery = parsePageQuery())\n   }"
    },
    {
      "sha": "727ae6f8581989d14459dd5090a700780602ac41",
      "filename": "appsv/server/talkyard/server/jobs/Janitor.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fjobs%2FJanitor.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -94,7 +94,11 @@ abstract class BackgroundJobsActor(actorName: St) extends Actor {\n   override def receive: Receive = {\n     case message =>\n       def errorPrefix: St = s\"Error in actor $actorName when handling ${classNameOf(message)}\"\n-      try tryReceive(message, globals.jobsArePaused)\n+      try {\n+        if (globals.isInitialized && !globals.jobsArePaused) {\n+          tryReceiveUnlessJobsPaused(message)\n+        }\n+      }\n       catch {\n         case ex: java.sql.SQLException =>\n           if (DatabaseUtils.isConnectionClosed(ex)) {\n@@ -113,15 +117,14 @@ abstract class BackgroundJobsActor(actorName: St) extends Actor {\n       }\n   }\n \n-  def tryReceive(message: Any, paused: Bo): U\n+  def tryReceiveUnlessJobsPaused(message: Any): U\n }\n \n \n \n class JanitorActor(val globals: Globals) extends BackgroundJobsActor(\"JanitorActor\") {\n \n-  def tryReceive(message: Any, paused: Bo): U = {\n-    if (paused) return ()\n+  def tryReceiveUnlessJobsPaused(message: Any): U = {\n     message match {\n       case DeleteOldStuff =>\n         findAndDeleteOldStuff()"
    },
    {
      "sha": "99da277f89e636a4c4ce9638ae4dea58eb84867d",
      "filename": "appsv/server/talkyard/server/linkpreviews/LinkPreviewRenderer.scala",
      "status": "modified",
      "additions": 22,
      "deletions": 15,
      "changes": 37,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRenderer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRenderer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRenderer.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -58,7 +58,7 @@ object RenderPreviewResult {\n \n \n class RenderPreviewParams(\n-  val siteId: SiteId,\n+  val site: SiteIdHostnames,\n   val fromPageId: PageId,\n   val unsafeUri: j_URI,\n   val inline: Bo,\n@@ -67,6 +67,7 @@ class RenderPreviewParams(\n   val loadPreviewFromDb: St => Opt[LinkPreview],\n   val savePreviewInDb: LinkPreview => U) {\n \n+  def siteId: SiteId = site.id\n   def unsafeUrl: St = unsafeUri.toString\n }\n \n@@ -131,7 +132,7 @@ object LinkPreviewRenderer {\n     *\n     * And adds 'noopener' if target is _blank.\n     */\n-  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlCdnPrefix: Opt[St],\n+  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlUgcPrefix: Opt[St],\n           followLinksSkipNoopener: Bo = false,\n           siteId_unused: SiteId, sitePubId_unused: PubSiteId): St = {\n     // Tests: LinkPreviewRendererSpec\n@@ -146,7 +147,7 @@ object LinkPreviewRenderer {\n       if (toHttps && tweakedUrl.startsWith(\"http:\")) {\n         tweakedUrl = \"https\" + tweakedUrl.drop(\"http\".length)\n       }\n-      tweakedUrl = uploadsUrlCdnPrefix match {\n+      tweakedUrl = uploadsUrlUgcPrefix match {\n         case None => tweakedUrl\n         case Some(prefix) =>\n           uplLinkRegex.replaceAllIn(tweakedUrl, s\"$prefix$$1\")\n@@ -306,6 +307,10 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n           }\n       }\n \n+      val uploadsUrlUgcPrefix =\n+            globals.anyUgcOrCdnOriginFor(urlAndFns.site)\n+                .map(_ + talkyard.server.UploadsUrlBasePath)\n+\n       // Don't link to insecure HTTP resources from safe HTTPS pages,  [no_insec_emb]\n       // e.g. don't link to <img src=\"http://...\">. Change to https instead — even if\n       // the image/whatever then breaks; security is more important, plus, browsers\n@@ -315,7 +320,9 @@ abstract class LinkPreviewRenderEngine(globals: Globals) extends TyLogging {  CL\n       val safeHtmlOkLinks = LinkPreviewRenderer.tweakLinks(\n             safeHtmlMaybeBadLinks,\n             toHttps = globals.secure,\n-            uploadsUrlCdnPrefix = globals.config.cdn.uploadsUrlPrefix,\n+            // What about embedded comments — if there's no CDN, then, shouldn't we\n+            // incl the site origin, so the links won't be relative the blog? UI BUG?\n+            uploadsUrlUgcPrefix = uploadsUrlUgcPrefix,\n             followLinksSkipNoopener = followLinksSkipNoopener,\n             siteId_unused = urlAndFns.siteId,\n             sitePubId_unused = \"\") // later\n@@ -415,7 +422,7 @@ abstract class InstantLinkPrevwRendrEng(globals: Globals)\n   */\n class LinkPreviewRenderer(\n   val globals: Globals,\n-  val siteId: SiteId,\n+  val site: SiteIdHostnames,\n   val mayHttpFetch: Boolean,\n   val requesterId: UserId) extends TyLogging {\n \n@@ -426,26 +433,26 @@ class LinkPreviewRenderer(\n \n   COULD_OPTIMIZE // These are, or can be made thread safe — no need to recreate all the time.\n   private val engines = Seq[LinkPreviewRenderEngine](\n-    new InternalLinkPrevwRendrEng(globals, siteId),\n+    new InternalLinkPrevwRendrEng(globals, site),\n     new ImagePrevwRendrEng(globals),\n     new VideoPrevwRendrEng(globals),\n     new GiphyPrevwRendrEng(globals),\n     new YouTubePrevwRendrEng(globals),\n     new TelegramPrevwRendrEng(globals),\n-    new TikTokPrevwRendrEng(globals, siteId, mayHttpFetch),\n-    new TwitterPrevwRendrEng(globals, siteId, mayHttpFetch),\n+    new TikTokPrevwRendrEng(globals, site.id, mayHttpFetch),\n+    new TwitterPrevwRendrEng(globals, site.id, mayHttpFetch),\n \n     // After 2020-10-24, Facebook requires an API access key to link to Facebook\n     // via OEmbed. Short of time, will need to disable Facebook   [fb_insta_dis]\n     // for now then:  (incl Instagram)\n     // See https://developers.facebook.com/docs/plugins/oembed\n     // and https://developers.facebook.com/docs/instagram/oembed\n     /*\n-    new FacebookPostPrevwRendrEng(globals, siteId, mayHttpFetch),\n-    new FacebookVideoPrevwRendrEng(globals, siteId, mayHttpFetch),\n-    new InstagramPrevwRendrEng(globals, siteId, mayHttpFetch),\n+    new FacebookPostPrevwRendrEng(globals, site.id, mayHttpFetch),\n+    new FacebookVideoPrevwRendrEng(globals, site.id, mayHttpFetch),\n+    new InstagramPrevwRendrEng(globals, site.id, mayHttpFetch),\n     */\n-    new RedditPrevwRendrEng(globals, siteId, mayHttpFetch),\n+    new RedditPrevwRendrEng(globals, site.id, mayHttpFetch),\n     )\n \n   def fetchRenderSanitize(uri: j_URI, inline: Bo)\n@@ -456,7 +463,7 @@ class LinkPreviewRenderer(\n     def loadPreviewFromDatabase(downloadUrl: String): Option[LinkPreview] = {\n       // Don't create a write tx — could cause deadlocks, because unfortunately\n       // we might be inside a tx already: [nashorn_in_tx] (will fix later)\n-      val siteDao = globals.siteDao(siteId)\n+      val siteDao = globals.siteDao(site.id)\n       siteDao.readTx { tx =>\n         tx.loadLinkPreviewByUrl(linkUrl = url, downloadUrl = downloadUrl)\n       }\n@@ -465,7 +472,7 @@ class LinkPreviewRenderer(\n     for (engine <- engines) {\n       if (engine.handles(uri, inline = inline)) {\n         val args = new RenderPreviewParams(\n-              siteId = siteId,\n+              site = site,\n               fromPageId = NoPageId, // later  [ln_pv_az]\n               unsafeUri = uri,\n               inline = inline,\n@@ -484,7 +491,7 @@ class LinkPreviewRenderer(\n   private def savePreviewInDatabase(linkPreview: LinkPreview): Unit = {\n     dieIf(!mayHttpFetch, \"TyE305KSHW2\",\n           s\"Trying to save link preview, when may not fetch: ${linkPreview.linkUrl}\")\n-    val siteDao = globals.siteDao(siteId)\n+    val siteDao = globals.siteDao(site.id)\n     siteDao.writeTx { (tx, _) =>\n       COULD // refresh pages that include this link preview, add to [staleStuff].\n       tx.upsertLinkPreview(linkPreview)"
    },
    {
      "sha": "8369feac4de756df7119ee1ce72acb8f41f15817",
      "filename": "appsv/server/talkyard/server/linkpreviews/engines/linkPreviewEngines.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2Fengines%2FlinkPreviewEngines.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2Fengines%2FlinkPreviewEngines.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Flinkpreviews%2Fengines%2FlinkPreviewEngines.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -239,7 +239,7 @@ class InstagramPrevwRendrEng(globals: Globals, siteId: SiteId, mayHttpFetch: Boo\n \n // Talkayrd internal links, i.e. to other pages within the same site.\n \n-class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId)\n+class InternalLinkPrevwRendrEng(globals: Globals, site: SiteIdHostnames)\n   extends InstantLinkPrevwRendrEng(globals) {\n \n   def providerLnPvCssClassName: String = \"s_LnPv-Int\"\n@@ -263,10 +263,6 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId)\n     if (domainOrAddress eq null)\n       return true\n \n-    val site = globals.siteDao(siteId).getSite() getOrElse {\n-      return false // weird\n-    }\n-\n     site.allHostnames.contains(domainOrAddress)  // [find_int_links]\n   }\n \n@@ -296,7 +292,7 @@ class InternalLinkPrevwRendrEng(globals: Globals, siteId: SiteId)\n     var maySeePost = false\n     var mayNotSeeDbgCode = \"\"\n \n-    val dao = globals.siteDao(siteId)\n+    val dao = globals.siteDao(site.id)\n     dao.getPostPathForUrlPath(path = unsafeUrlPath, hash = unsafeHashFrag) match {\n       case None =>\n         () // Leave postFound = false."
    },
    {
      "sha": "711a954805badfa14edb13bc5112666fffda5837",
      "filename": "appsv/server/talkyard/server/notf/NotifierActor.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fnotf%2FNotifierActor.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -90,8 +90,8 @@ class NotifierActor (val systemDao: SystemDao, val siteDaoFactory: SiteDaoFactor\n   val globals: debiki.Globals = systemDao.globals\n \n \n-  def tryReceive(message: Any, paused: Bo): U = if (!paused) message match {\n-    case whatever: String if globals.isInitialized =>\n+  def tryReceiveUnlessJobsPaused(message: Any): U = message match {\n+    case whatever: St =>\n         whatever match {\n           case \"SendNotfs\" =>\n             loadAndSendNotifications()"
    },
    {
      "sha": "f9cf34c6d19c95db3f67e74c1a9d6259821836a7",
      "filename": "appsv/server/talkyard/server/package.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpackage.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -196,6 +196,12 @@ package object server {\n   val Whatever = \"*\"\n \n   val UploadsUrlBasePath = \"/-/u/\"\n+  val CustomAssetsUrlBasePath = \"/-/site/\"\n+\n+  {\n+    val uploadsUrlPath: St = controllers.routes.UploadsController.servePublicFile(\"\").url\n+    assert(uploadsUrlPath == UploadsUrlBasePath, \"TyEBADUPLPATH9564\")\n+  }\n \n \n   /** @param html Html for the whole page."
    },
    {
      "sha": "a68babc7fcb1a28dfdd73e7b63922368a93f4cdd",
      "filename": "appsv/server/talkyard/server/pop/PagePopularityCalculator.scala",
      "status": "modified",
      "additions": 42,
      "deletions": 19,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityCalculator.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -28,6 +28,8 @@ object PagePopularityCalculator {\n   // Currently there's just one; it has no name.\n   // If adding more, rename json field: readInt(jsObj, \"algorithmVersion\") to \"scoreAlg\"?\n   val CurrentScoreAlg: PageScoreAlg = 1\n+  val OpLikeVotes: PageScoreAlg = 2\n+  val AllAlgs = Seq(CurrentScoreAlg, OpLikeVotes)\n \n \n   /** How do votes affect the score:\n@@ -56,17 +58,36 @@ object PagePopularityCalculator {\n     * @param stats\n     * @return\n     */\n-  def calcPopularityScores(stats: PagePopStatsNowAndThen): PagePopularityScores = {\n-    PagePopularityScores(\n-      pageId = stats.pageId,\n-      updatedAt = stats.sinceYesterday.to,\n-      scoreAlgorithm = CurrentScoreAlg,\n-      dayScore = calcPopScore(stats.sinceYesterday),\n-      weekScore = calcPopScore(stats.sinceLastWeek),\n-      monthScore = calcPopScore(stats.sinceLastMonth),\n-      quarterScore = calcPopScore(stats.sinceLastQuarter),\n-      yearScore = calcPopScore(stats.sinceLastYear),\n-      allScore = calcPopScore(stats.sinceGenesis))\n+  def calcPopularityScores(stats: PagePopStatsNowAndThen, scoreAlg: PageScoreAlg)\n+          : PagePopularityScores = {\n+    scoreAlg match {\n+      case CurrentScoreAlg =>\n+        PagePopularityScores(\n+              pageId = stats.pageId,\n+              updatedAt = stats.sinceYesterday.to,\n+              scoreAlgorithm = scoreAlg,\n+              dayScore = calcPopScore(stats.sinceYesterday),\n+              weekScore = calcPopScore(stats.sinceLastWeek),\n+              monthScore = calcPopScore(stats.sinceLastMonth),\n+              quarterScore = calcPopScore(stats.sinceLastQuarter),\n+              yearScore = calcPopScore(stats.sinceLastYear),\n+              triennialScore = calcPopScore(stats.sinceLast3Years),\n+              allScore = calcPopScore(stats.sinceGenesis))\n+      case OpLikeVotes =>\n+        PagePopularityScores(\n+              pageId = stats.pageId,\n+              updatedAt = stats.sinceYesterday.to,\n+              scoreAlgorithm = scoreAlg,\n+              dayScore = stats.sinceYesterday.numOpLikesTotal,\n+              weekScore = stats.sinceLastWeek.numOpLikesTotal,\n+              monthScore = stats.sinceLastMonth.numOpLikesTotal,\n+              quarterScore = stats.sinceLastQuarter.numOpLikesTotal,\n+              yearScore = stats.sinceLastYear.numOpLikesTotal,\n+              triennialScore = stats.sinceLast3Years.numOpLikesTotal,\n+              allScore = stats.sinceGenesis.numOpLikesTotal)\n+      case _ =>\n+        die(s\"Bad score alg: $scoreAlg [TyESCOREALG462]\")\n+    }\n   }\n \n \n@@ -145,7 +166,8 @@ object PagePopularityCalculator {\n     val popWeekly = calcOnePopStats(now.minusDays(8), now, pageParts, actions, visitsByUserId)\n     val popMonthly = calcOnePopStats(now.minusDays(32), now, pageParts, actions, visitsByUserId)\n     val popQuarterly = calcOnePopStats(now.minusDays(100), now, pageParts, actions, visitsByUserId)\n-    val popYearly = calcOnePopStats(now.minusDays(367), now, pageParts, actions, visitsByUserId)\n+    val popYearly = calcOnePopStats(now.minusDays(365 + 2), now, pageParts, actions, visitsByUserId)\n+    val pop3Years = calcOnePopStats(now.minusDays(365 * 3 + 2), now, pageParts, actions, visitsByUserId)\n     val popSinceGenesis = calcOnePopStats(When.Genesis, now, pageParts, actions, visitsByUserId)\n     /*\n     val popDaily = popularityInThePast(36 * OneHourInMillis)\n@@ -156,13 +178,14 @@ object PagePopularityCalculator {\n     */\n \n     PagePopStatsNowAndThen(\n-      pageId = pageParts.pageId,\n-      sinceYesterday = popDaily,\n-      sinceLastWeek = popWeekly,\n-      sinceLastMonth = popMonthly,\n-      sinceLastQuarter = popQuarterly,\n-      sinceLastYear = popYearly,\n-      sinceGenesis = popSinceGenesis)\n+          pageId = pageParts.pageId,\n+          sinceYesterday = popDaily,\n+          sinceLastWeek = popWeekly,\n+          sinceLastMonth = popMonthly,\n+          sinceLastQuarter = popQuarterly,\n+          sinceLastYear = popYearly,\n+          sinceLast3Years = pop3Years,\n+          sinceGenesis = popSinceGenesis)\n   }\n \n "
    },
    {
      "sha": "dd2839c2c765a6faf2b7842708629bc564a37902",
      "filename": "appsv/server/talkyard/server/pop/PagePopularityDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fpop%2FPagePopularityDao.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -39,8 +39,10 @@ object PagePopularityDao {\n     val visits = tx.loadPageVisitTrusts(pageParts.pageId)\n     val popStats = PagePopularityCalculator.calcPopStatsNowAndThen(\n       tx.now, pageParts, actions, visits)\n-    val popScore = PagePopularityCalculator.calcPopularityScores(popStats)\n-    tx.upsertPagePopularityScore(popScore)\n+    for (alg <- PagePopularityCalculator.AllAlgs) {\n+      val popScore = PagePopularityCalculator.calcPopularityScores(popStats, scoreAlg = alg)\n+      tx.upsertPagePopularityScore(popScore)\n+    }\n   }\n \n }"
    },
    {
      "sha": "d69e8d70b774d2fe057fa8a082af8321e4962d89",
      "filename": "appsv/server/talkyard/server/search/SearchEnginIndexer.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsearch%2FSearchEnginIndexer.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsearch%2FSearchEnginIndexer.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsearch%2FSearchEnginIndexer.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -156,7 +156,7 @@ class IndexingActor(\n   val indexCreator = new IndexCreator()\n   val postsRecentlyIndexed = new java.util.concurrent.ConcurrentLinkedQueue[SiteIdAndPost]\n \n-  def tryReceive(message: Any, paused: Bo): U = if (!paused) message match {\n+  def tryReceiveUnlessJobsPaused(message: Any): U = message match {\n     case IndexStuff =>\n       // BUG race condition. Could instead: 1) find out in which languages indexes are missing.\n       // 2) insert into the index queue entries for stuff in those languages. 3) create indexes."
    },
    {
      "sha": "14513e91a19b7035001f7fa10c7f671e65614369",
      "filename": "appsv/server/talkyard/server/sitepatch/SitePatchParser.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsitepatch%2FSitePatchParser.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -937,6 +937,7 @@ case class SitePatchParser(context: TyContext) {\n     }\n \n     try {\n+      val allScore = readFloat(jsObj, \"allScore\")\n       Good(PagePopularityScores(\n         pageId = pageId,\n         updatedAt = readWhen(jsObj, \"updatedAt\"),\n@@ -946,7 +947,11 @@ case class SitePatchParser(context: TyContext) {\n         monthScore = readFloat(jsObj, \"monthScore\"),\n         quarterScore = readFloat(jsObj, \"quarterScore\"),\n         yearScore = readFloat(jsObj, \"yearScore\"),\n-        allScore = readFloat(jsObj, \"allScore\")))\n+        triennialScore =\n+              // Newly added (June 2023), let's fallback to allScore for a while.\n+              // DO_AFTER 2025-07-01: Remove fallback.\n+              parseOptFloat32(jsObj, \"triennialScore\").getOrElse(allScore),\n+        allScore = allScore))\n     }\n     catch {\n       case ex: IllegalArgumentException =>\n@@ -1342,7 +1347,9 @@ case class SitePatchParser(context: TyContext) {\n         defaultSortOrder =\n               if (!doItVotesPopFirst) None\n               else Some(PageOrderOffset.ByScoreAndBumpTime(\n-                    offset = None, TopTopicsPeriod.Year)),\n+                    // Later: Make configurable. [conf_do_it_cats]\n+                    offset = None, TopTopicsPeriod.Default,\n+                    scoreAlg = pop.PagePopularityCalculator.OpLikeVotes)),\n         doVoteStyle =\n               if (!doItVotesPopFirst) None\n               else Some(DoVoteStyle.Likes),"
    },
    {
      "sha": "db61da84eb9109edc76569cfe024d84eeecf42a7",
      "filename": "appsv/server/talkyard/server/spam/SpamCheckActor.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fspam%2FSpamCheckActor.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -75,7 +75,7 @@ class SpamCheckActor(\n \n   private val execCtx: ExecutionContext = globals.executionContext\n \n-  def tryReceive(message: Any, paused: Bo): U = if (!paused) message match {\n+  def tryReceiveUnlessJobsPaused(message: Any): U = message match {\n     case CheckForSpam =>\n       checkMorePostsForSpam()\n     case ClearCheckingSpamNowCache(siteIds) =>"
    },
    {
      "sha": "57a948d52829c49fdf38e6bfa776f18c27b20902",
      "filename": "appsv/server/talkyard/server/summaryemails/SummaryEmailsDao.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/appsv%2Fserver%2Ftalkyard%2Fserver%2Fsummaryemails%2FSummaryEmailsDao.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -22,6 +22,7 @@ import com.debiki.core.Prelude._\n import controllers.ForumController\n import debiki.dao._\n import talkyard.server.authz.AuthzCtxOnForum\n+import talkyard.server.pop\n import scala.collection.immutable\n import scala.collection.mutable.ArrayBuffer\n import SummaryEmailsDao._\n@@ -98,7 +99,8 @@ trait SummaryEmailsDao {\n           if (millisSinceLast > OneWeekInMillis) TopTopicsPeriod.Month\n           else if (millisSinceLast > OneDayInMillis) TopTopicsPeriod.Week\n           else TopTopicsPeriod.Day\n-        val pageQuery = PageQuery(PageOrderOffset.ByScoreAndBumpTime(offset = None, period),\n+        val pageQuery = PageQuery(PageOrderOffset.ByScoreAndBumpTime(\n+              offset = None, period, scoreAlg = pop.PagePopularityCalculator.CurrentScoreAlg),\n           PageFilter(PageFilterType.ForActivitySummaryEmail, includeDeleted = false),\n           // About-category pages can be interesting? E.g. new category created & everyone clicks Like.\n           includeAboutCategoryPages = settings.showCategories)"
    },
    {
      "sha": "4e5ab4f06bcd7a83fa8ea4609272b589794954c6",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Feditor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.editor.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -17,6 +17,7 @@\n \n /// <reference path=\"../editor-prelude.editor.ts\" />\n /// <reference path=\"./oop.editor.ts\" />\n+/// <reference path=\"./formatting-help.editor.ts\" />\n \n //------------------------------------------------------------------------------\n    namespace debiki2.editor {\n@@ -2684,7 +2685,12 @@ export const Editor = createFactory<any, EditorState>({\n         r.button({ onClick: this.markupAsCode, title: t.e.PreBtnTooltip,\n           className: 'esEdtr_txtBtn' }, r.span({ className: 'icon-code' })),\n         r.button({ onClick: this.addHeading, title: t.e.HeadingBtnTooltip,\n-            className: 'esEdtr_txtBtn' }, 'H'));\n+            className: 'esEdtr_txtBtn' }, 'H'),\n+        r.button({  // title: t.e.FmtHelpTooltip, // I18N\n+            className: 'esEdtr_txtBtn n_FmtHlp',\n+            onClick: () => util.openDefaultStupidDialog(formattingHelp()) },\n+          'Help ...'), // I18N\n+        );\n \n     // React-textarea-autocomplete docs:\n     //   https://github.com/webscopeio/react-textarea-autocomplete\n@@ -3033,6 +3039,7 @@ export function DraftStatusInfo(props: { draftStatus: DraftStatus, draftNr: numb\n }\n \n \n+\n //------------------------------------------------------------------------------\n    }\n //------------------------------------------------------------------------------"
    },
    {
      "sha": "698265ace95a4ac72a3e6119e94227555b22dc6c",
      "filename": "client/app-editor/editor/editor.styl",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Feditor.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Feditor.styl?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -66,6 +66,17 @@ $spacyYMinHeight = 400px;\n   font-family: monospace;\n   font-size: 90%;\n \n+.esEdtr_txtBtn.n_FmtHlp\n+  box-shadow: 1px 1px 2px hsl(0 0% 50%);\n+  padding: 3px 6px 1px 7px;\n+  font-size: 13.5px;\n+  line-height: 1;\n+  position: relative;\n+  top: 0px;\n+  margin-left: 1ex;\n+  border: 1px solid #ddd;\n+  color: hsl(0deg 0% 22%);\n+\n .esEdtr_close\n   position: absolute;\n   right: 0;"
    },
    {
      "sha": "20bdd411ffafca64c39d40ec84cc48a4db66f18d",
      "filename": "client/app-editor/editor/formatting-help.editor.ts",
      "status": "added",
      "additions": 140,
      "deletions": 0,
      "changes": 140,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Fformatting-help.editor.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2023 Kaj Magnus Lindberg\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+\n+/// <reference path=\"../editor-prelude.editor.ts\" />\n+\n+//------------------------------------------------------------------------------\n+   namespace debiki2.editor {\n+//------------------------------------------------------------------------------\n+\n+const r = ReactDOMFactories;\n+\n+\n+export const formattingHelp: () => StupidDialogStuff = () => {\n+  const mkSampleRow = (before, text, after, fn, after2 = null) =>\n+          r.tr({},\n+            r.td({}, before, text, after),\n+            r.td({}, fn({}, text), after2));\n+\n+  const body = rFr({},  // I18N\n+    r.h1({}, \"Formatting your text\"),\n+    r.p({}, \"You can uss \",\n+        r.b({}, \"bold\"), \", \",\n+        r.i({}, \"italics\"), \", add images and code, using CommonMark:\"),\n+    r.table({},\n+      r.thead({},\n+        r.th({}, r.h3({}, r.span({}, \"Type this ...\"), r.span({}, \"...\"))),\n+        r.th({}, r.h3({}, \"to get this\")),\n+        ),\n+      r.tbody({},\n+        mkSampleRow(\"_\", \"Italic text\", \"_\", r.i),\n+        mkSampleRow(\"**\", \"Bold text\", \"**\", r.b),\n+        mkSampleRow(\"~~\", \"Strikethrough\", \"~~\", r.s), // ! not impl !\n+        mkSampleRow(\"## \", \"Heading <h2>\", \"\", r.h2),\n+        mkSampleRow(\"### \", \"Smaller <h3>\", \"\", r.h3),\n+        r.tr({},\n+          r.td({},\n+            \"To type a literal _ or **, use '\\\\':\", r.br(), r.br(),\n+            \"\\\\_not italics\\\\_ and \\\\*\\\\*not bold\\\\*\\\\*\"),\n+          r.td({},\n+            r.p({}, \"To type a literal _ or **, use '\\\\':\"),\n+            r.p({}, \"_not italics_ and **not bold**\"))),\n+        r.tr({},\n+          r.td({},\n+            \"[A link](\",\n+            r.span({ className: 'n_Link' }, \"https://www.example.com\"),\n+            \") to somewhere\"),\n+          r.td({}, r.a({ href: 'https://www.example.com' }, \"A link\"), \" to somewhere\")),\n+        r.tr({},\n+          r.td({},\n+            \"An image, with Alt text:\", r.br(), r.br(),\n+            \"![\", r.span({ className: 'n_Link' }, \"Alt text\"),\n+            \"](\", r.span({ className: 'n_Link' }, \"https://forum.talkyard.io/favicon.ico\"),\n+            \")\", r.br(),\n+            r.br(),\n+            r.i({ className: 'n_NoteThe' },\n+              \"(Note the '\", r.b({}, \"!\"),\"' in front. The Alt text is for screen readers.)\")),\n+          r.td({},\n+            r.p({}, \"An image, with Alt text:\"),\n+            r.img({ src: 'https://forum.talkyard.io/favicon.ico', alt: \"Alt text\" }))),\n+        r.tr({},\n+          r.td({},\n+            \"Quoting someone:\", r.br(),\n+            r.br(),\n+            // Let's use two lines, to show how to write a multiline quote.\n+            \"> Quoted text, in own\", r.br(),\n+            \"> paragraph\"),\n+          r.td({},\n+            r.p({}, \"Quoting someone:\"),\n+            r.blockquote({}, \"Quoted text, in own paragraph\"))),\n+        r.tr({},\n+          r.td({},\n+              \"- List\", r.br(),\n+              \"- List item 2\", r.br(),\n+              \"- Item 3 long text\", r.br(),\n+              \"  many lines\"),\n+          r.td({},\n+            r.ul({},\n+              r.li({}, \"List\"),\n+              r.li({}, \"List item 2\"),\n+              r.li({}, \"Item 3 long text many lines\")))),\n+        r.tr({},\n+          r.td({},\n+            \"1. Ordered list\", r.br(),\n+            \"2. Item two\", r.br(),\n+            \"3. Item 3\", r.br(),\n+            \"   - Nested list\", r.br(),\n+            \"   - Nested item 2\"),\n+          r.td({},\n+            r.ol({},\n+              r.li({}, \"Ordered list\"),\n+              r.li({}, \"Item two\"),\n+              r.li({}, \"Item 3\",\n+                r.ol({}, r.li({}, \"Nested list\"), r.li({}, \"Nested item 2\")))))),\n+        mkSampleRow(\"`\", \"Inline code\", \"` with backticks\", r.code, \" with backticks\"),\n+        r.tr({},\n+          r.td({},\n+            \"Code block — wrap in three backticks:\", r.br(),\n+            r.br(),\n+            \"```\", r.br(),\n+            \"for (let x = 1; x < 10; ++x) {\", r.br(),\n+            \"  console.log(x! ** x!)\", r.br(),\n+            \"}\", r.br(),\n+            \"// Go have a coffee\", r.br(),\n+            \"```\", r.br()),\n+          r.td({},\n+            r.p({},\n+              \"Code block — wrap in three backticks:\"),\n+           r.pre({}, r.code({},\n+              \"for (let x = 1; x < 10; ++x) {\", r.br(),\n+              \"  console.log(x! ** x!)\", r.br(),\n+              \"}\", r.br(),\n+              \"// Go have a coffee\",\n+              )))),\n+      )),\n+    r.p({},\n+      \"You can read more about CommonMark at \",\n+      r.a({ href: 'https://commonmark.org/help/', target: '_blank' },\n+          \"commonmark.org \", r.span({ className: 'icon-link-ext' })), '.)'));\n+\n+  return { body, large: true, dialogClassName: 'c_FmtHlpD', showCloseButton: true };\n+}\n+\n+//------------------------------------------------------------------------------\n+   }\n+//------------------------------------------------------------------------------\n+// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "0bb5ad4298431fcecf33c54b8e26b6b309c8ff0e",
      "filename": "client/app-editor/editor/formatting-help.styl",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Fformatting-help.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-editor%2Feditor%2Fformatting-help.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-editor%2Feditor%2Fformatting-help.styl?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -0,0 +1,61 @@\n+\n+\n+.c_FmtHlpD\n+  max-width: 730px !important;\n+  @media (min-width: 830px)\n+    .modal-body\n+      padding: 20px 37px 30px;\n+  h1\n+    font-size: 27px;\n+    margin: 0px 0 14px;\n+    + p\n+      margin-bottom: 1.1em;\n+  table\n+    width: 100%\n+    margin-bottom: 1.5ex; // so \"This is called CommonMark\" won't be too close\n+  $paddingLeft = 7px;\n+  th\n+    padding-bottom: 5px;\n+    border-bottom: 2px solid hsl(0 0% 68%)\n+    // Place the 2nd \"...\" in \"Try this ...   ...\" at the end, just before \"to get this\":\n+    &:first-child h3\n+      display: flex;\n+      justify-content: space-between;\n+  th:last-child\n+    padding-left: $paddingLeft;\n+  tr\n+    border-bottom: 2px solid hsl(0 0% 88%)\n+  td\n+    vertical-align: top;\n+    line-height: 14px;\n+    &:first-child\n+      padding: 10px 5px 3px 0;\n+      font-family: monospace;\n+      .n_NoteThe\n+        font-family: 'Open Sans', sans-serif;\n+        font-size: 14px;\n+        color: hsl(0deg 0% 33%);\n+        b\n+          font-size: 115%;\n+      font-size: 13px;\n+      white-space: pre-wrap;\n+      word-break: break-all;\n+    &:last-child\n+      padding: 6px 0 7px $paddingLeft;\n+      @media (max-width: 650px)\n+        border-left: 1px solid #eee;\n+  h2\n+    margin: 5px 0 4px;\n+  h3\n+    margin: 3px 0 2px;\n+  li\n+    margin-bottom: 0.2em;\n+  .n_Link\n+    // Avoid very long rows, by making uninteresting https://... sample links shorter.\n+    letter-spacing: -1px;\n+  // Nested lists example\n+  ol ul\n+    margin-top: 0.2em;\n+  pre, p\n+    &:last-child\n+      margin-bottom: 0.3em;"
    },
    {
      "sha": "5b2d18967288a7888c53641476781bb108f8e9e4",
      "filename": "client/app-more/util/stupid-dialog.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-more%2Futil%2Fstupid-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-more%2Futil%2Fstupid-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2Fstupid-dialog.more.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -96,7 +96,11 @@ export const StupidDialog = createComponent({\n     const stuff: StupidDialogStuff = this.state.stuff || {};\n     const preventClose = stuff.preventClose;\n     const makeCloseFn = (whichButton) => () => this.close(whichButton);\n+    const anyCloseButton = !stuff.showCloseButton ? null :\n+            r.div({ className: 'esDropModal_CloseB esCloseCross', onClick: makeCloseFn(0) });\n+\n     const body = ModalBody({ className: 'clearfix' },\n+      anyCloseButton,\n       r.div({ style: { marginBottom: '2em' }}, stuff.body),\n       r.div({ style: { float: 'right' }},\n         preventClose ? null :"
    },
    {
      "sha": "18d4812a293637a44e6f11e68503959690333a70",
      "filename": "client/app-more/util/stupid-dialog.styl",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-more%2Futil%2Fstupid-dialog.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-more%2Futil%2Fstupid-dialog.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-more%2Futil%2Fstupid-dialog.styl?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -3,6 +3,16 @@\n   width: calc(100% - 100px);\n   max-width: 1550px;\n \n+  // Fill whole screen, on small screens.\n+  @media (max-width: 700px)\n+    width: auto;\n+    position: absolute;\n+    top: 2px;\n+    left: 2px;\n+    right: 2px;\n+    // bottom — don't set to 0 — would that cause problems if it needs\n+    // to be taller? (with an y srollbar)\n+\n .esStupidDlg-Small\n   max-width: 480px;\n "
    },
    {
      "sha": "be148b03a230525b41a6d50785572e7ec7f67432",
      "filename": "client/app-slim/ServerApi.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2FServerApi.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2FServerApi.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2FServerApi.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -42,6 +42,9 @@ export function makeForumTopicsQueryParams(orderOffset: OrderOffset): string {\n     if (_.isNumber(orderOffset.score)) {\n       params += '&maxScore=' + orderOffset.score;\n     }\n+    if (_.isNumber(orderOffset.scoreAlg)) {\n+      params += '&scoreAlg=' + orderOffset.scoreAlg;\n+    }\n   }\n \n   if (orderOffset.olderThan) {"
    },
    {
      "sha": "775e25dbda7302c87912a57241c5d4d846b176f0",
      "filename": "client/app-slim/forum/forum.ts",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fforum%2Fforum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fforum%2Fforum.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -109,7 +109,7 @@ export const ForumComponent = createReactClass(<any> {\n       topicsInStoreMightBeOld: false,\n       useNarrowLayout,\n       useWideLayout,\n-      topPeriod: TopTopicsPeriod.Month,\n+      topPeriod: TopTopicsPeriod.Default,\n     }\n   },\n \n@@ -1021,19 +1021,24 @@ const LoadAndListTopics = createFactory({\n       lastScore = lastTopic.popularityScore;  // always absent, currently [7IKA2V]\n     }\n \n-    const orderOffset: OrderOffset = { sortOrder: -1 };\n+    const orderOffset: OrderOffset = { sortOrder: TopicSortOrder.BumpTime };\n     if (props.sortOrderRoute === RoutePathTop) {\n       orderOffset.sortOrder = TopicSortOrder.ScoreAndBumpTime;\n       orderOffset.olderThan = lastBumpedAt;\n       orderOffset.score = lastScore;\n+      orderOffset.scoreAlg = ScoreAlg.ByAllVotes;\n       orderOffset.period = props.topPeriod;\n+      const cat: Cat | U = props.activeCategory;\n+      if (cat && cat.doItVotesPopFirst) {\n+        orderOffset.scoreAlg = ScoreAlg.ByDoItVotes;\n+      }\n     }\n     else if (props.sortOrderRoute === RoutePathNew) {\n       orderOffset.sortOrder = TopicSortOrder.CreatedAt;\n       orderOffset.olderThan = lastCreatedAt;\n     }\n     else {\n-      orderOffset.sortOrder = TopicSortOrder.BumpTime;\n+      // orderOffset.sortOrder — bump time, already.\n       orderOffset.olderThan = lastBumpedAt;\n     }\n     return orderOffset;\n@@ -1130,6 +1135,7 @@ export const TopicsList = createComponent({\n           store, topic,\n           activeCatId: activeCategory?.id, orderOffset,\n           key: topic.pageId, sortOrderRoute: props.sortOrderRoute,\n+          explSetSortOrder: props.explSetSortOrder,\n           doItVotesPopFirst, inTable: useTable, useNarrowLayout: props.useNarrowLayout,\n           forumPath: props.forumPath, history: props.history };\n       return TopicRow(topicRowProps);\n@@ -1193,7 +1199,8 @@ export const TopicsList = createComponent({\n               makeTopPeriodListItem(TopTopicsPeriod.Week),\n               makeTopPeriodListItem(TopTopicsPeriod.Month),\n               makeTopPeriodListItem(TopTopicsPeriod.Quarter),\n-              makeTopPeriodListItem(TopTopicsPeriod.Year))));\n+              makeTopPeriodListItem(TopTopicsPeriod.Year),\n+              makeTopPeriodListItem(TopTopicsPeriod.Triennial))));\n     }\n \n     const forumPage: Page = store_curPage(store);\n@@ -1437,6 +1444,7 @@ interface TopicRowProps {\n   topic: Topic;\n   activeCatId?: CatId;\n   sortOrderRoute: St;\n+  explSetSortOrder?: St;\n   forumPath: St;\n   orderOffset: OrderOffset;\n   doItVotesPopFirst: Bo;\n@@ -1514,7 +1522,10 @@ const TopicRow = createComponent({\n \n   makeCategoryLink: function(category: Category, skipQuery?: boolean) {\n     const props: TopicRowProps = this.props;\n-    const sortOrderPath = props.sortOrderRoute;\n+    const sortOrderPath = props.explSetSortOrder ? props.sortOrderRoute : (\n+            category.doItVotesPopFirst ? RoutePathTop\n+                                       : props.sortOrderRoute); // Or maybe RoutePathLatest?\n+\n     // this.props.queryParams — later: could convert to query string, unless skipQuery === true\n     return props.forumPath + sortOrderPath + '/' + category.slug;\n   },"
    },
    {
      "sha": "78ce0dcd72f6d2e88490c3a7ff783a282fa0e0ca",
      "filename": "client/app-slim/keyboard-shortcuts.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fkeyboard-shortcuts.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fkeyboard-shortcuts.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fkeyboard-shortcuts.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -633,7 +633,7 @@ function onKeyDown(event: KeyboardEvent) {\n     if (otherKeyAlreadyDown) {\n       resetAndCloseDialog();\n     }\n-    if (uiPrefs == UiPrefsKeyboardShortcuts.OnButNoDoubleShift) {\n+    if (uiPrefs.kbd == UiPrefsKeyboardShortcuts.OnButNoDoubleShift) {\n       skipNextShiftUp = true;\n     }\n     return;"
    },
    {
      "sha": "9a0c4ed3ae2d40967c5f6ab3719cf789920cb744",
      "filename": "client/app-slim/links.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Flinks.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Flinks.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Flinks.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -273,10 +273,12 @@ export function linkToAboutPage(): string {\n \n \n export function linkToUpload(origins: Origins, uploadsPath: string): string {\n-  // If there's a CDN, always access uploaded pics via the CDN. Or,\n-  // if we're in an embedded comments discussion, access the pics via the Talkyard\n-  // server's origin = the remote origin. Otherwise, no origin needed (empty string).\n-  const origin = origins.anyCdnOrigin || origins.embeddedOriginOrEmpty;\n+  // If 1) there's a UGC CDN, always access uploaded pics via that. Or if 2) we're\n+  // in an embedded comments discussion, access the pics via the Talkyard server's\n+  // origin = the remote origin, otherwise the pic urls would resolve relative to\n+  // the *blog*'s address, but the blog doesn't host the pics (they'd be 404 Not Found).\n+  // Otherwise 3) no origin needed (empty string).\n+  const origin = origins.anyUgcOrigin || origins.anyCdnOrigin || origins.embeddedOriginOrEmpty;\n   const uploadsUrlBasePath = '/-/u/';\n   return origin + uploadsUrlBasePath + origins.pubSiteId + '/' + uploadsPath;\n }"
    },
    {
      "sha": "68c3a324e70b431eb1883f137b91bce454382708",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fmodel.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fmodel.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fmodel.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -723,6 +723,7 @@ interface StupidDialogStuff {  // RENAME from ...Stuff to ...Options\n   // If the user clicks the primary button. Not called, if hen clicks a secondary\n   // button or closes the dialog e.g. by clicking outside.\n   onPrimaryClick?: () => void;\n+  showCloseButton?: Bo;\n   preventClose?: boolean;\n   closeOnClickOutside?: boolean; // default true\n   // Specify this to get a fn that closes the dialog.\n@@ -891,6 +892,7 @@ interface OrderOffset {  // COULD rename to TopicQuery? (because includes filter\n \n   // For sort-by-top-score offset & period:\n   score?: number;\n+  scoreAlg?: ScoreAlg;\n   period?: TopTopicsPeriod;\n \n   // Most liked first offset:\n@@ -1136,9 +1138,10 @@ interface PageIdsUrls {\n \n \n interface Origins {\n-  embeddedOriginOrEmpty: string;\n-  anyCdnOrigin?: string;\n-  pubSiteId: string;\n+  embeddedOriginOrEmpty: St;\n+  anyCdnOrigin?: St;\n+  anyUgcOrigin?: St;\n+  pubSiteId: St;\n }\n \n \n@@ -1385,10 +1388,12 @@ interface PagePath {\n \n interface Ancestor {  // server side: [6FK02QFV]\n   categoryId: number;\n+  doItVotesPopFirst?: Bo;\n   title: string;\n   path: string;\n-  unlistCategory?: boolean;\n-  isDeleted?: boolean;\n+  unlistCategory?: Bo;\n+  unlistTopics?: Bo;\n+  isDeleted?: Bo;\n }\n \n \n@@ -2555,6 +2560,7 @@ interface SuperAdminStuff {\n \n interface SASite {\n   id: SiteId;\n+  pubId: PubSiteId;\n   status: SiteStatus;\n   name: St;\n   hostnames: St[];"
    },
    {
      "sha": "371a9ee01c26f9f5e6eaf91b5f67b35a6bec8d91",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Foop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Foop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Foop-methods.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -2091,6 +2091,7 @@ export function topPeriod_toString(period: TopTopicsPeriod): string {\n     case TopTopicsPeriod.Month: return t.PastMonth;\n     case TopTopicsPeriod.Quarter: return t.PastQuarter;\n     case TopTopicsPeriod.Year: return t.PastYear;\n+    case TopTopicsPeriod.Triennial: return \"Past three years\"; // t.Past3Years  I18N\n     case TopTopicsPeriod.All: return t.AllTime;\n     default: return '' + period;\n   }"
    },
    {
      "sha": "8aa002072c7f8eaf46174bc37db7dd05a81c7017",
      "filename": "client/app-slim/page/cats-or-home-link.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fpage%2Fcats-or-home-link.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-slim%2Fpage%2Fcats-or-home-link.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-slim%2Fpage%2Fcats-or-home-link.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -60,6 +60,7 @@ export function CatsOrHomeLink(page: Page, store: Store, forTopbar?: Bo): RElm |\n                 r.li({ key, className: 's_Tb_Pg_Cs_C' + deletedClass },\n                   // RENAME esTopbar_ancestors_link to just s_AncCs_Ln?\n                   Link({ className: catIcon + 'esTopbar_ancestors_link btn',\n+                      // The path is from here, server side: [anc_cat_path].\n                       to: ancestor.path },\n                   ancestor.title)));\n           }));"
    },
    {
      "sha": "7833214e1f96f5617026c638429d548e5b2f9a54",
      "filename": "client/app-staff/superadmin/superadmin-app.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fapp-staff%2Fsuperadmin%2Fsuperadmin-app.staff.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -405,7 +405,7 @@ const SiteTableRow = createComponent({\n     return (\n       r.tr({},\n         r.td({},\n-          r.a({ href: '//site-' + site.id + '.' + stuff.baseDomain }, site.id)),\n+          r.a({ href: '//site-' + site.pubId + '.' + stuff.baseDomain }, site.id)),\n         r.td({},\n           siteStatusToString(site.status),\n           hideButton,"
    },
    {
      "sha": "45457def625e41bc5aa1053135401949202f45b9",
      "filename": "client/third-party/html-css-sanitizer-bundle.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fthird-party%2Fhtml-css-sanitizer-bundle.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Fthird-party%2Fhtml-css-sanitizer-bundle.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Fthird-party%2Fhtml-css-sanitizer-bundle.js?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -4905,7 +4905,7 @@ function googleCajaSanitizeHtml(htmlTextUnsafe, allowClassAndIdAttr,\n     allowedTags: [\n       // Allowed by default\n       'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\n-      'nl', 'li', 'b', 'i', 'u', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',\n+      'nl', 'li', 'b', 'i', 'u', 'strong', 'em', 's', 'strike', 'code', 'hr', 'br', 'div',\n       'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre',\n       // Why not included by default?\n       'span', 'small', 'pre', 'code', 'var', 'samp', 'kbd', 'sup', 'sub',"
    },
    {
      "sha": "ef2e503dabc9de33e3a093210ebfc2837288f533",
      "filename": "client/types-and-const-enums.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/client%2Ftypes-and-const-enums.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/client%2Ftypes-and-const-enums.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client%2Ftypes-and-const-enums.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -422,13 +422,21 @@ const enum TopicSortOrder {\n }\n \n \n+const enum ScoreAlg {\n+  ByAllVotes = 1,\n+  ByDoItVotes = 2, // hmm but is named \"OpLikeVotes\" server side, what's best?\n+}\n+\n const enum TopTopicsPeriod {\n   Day = 1,\n   Week = 2,\n   Month = 3,\n   Quarter = 4,\n   Year = 5,\n-  All = 6\n+  Triennial = 6,\n+  All = 7,\n+\n+  Default = Year,  // Sync w Scala\n }\n \n "
    },
    {
      "sha": "1ca6092d224b97bdf13d68741f33bca6309dadb6",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/conf%2Froutes",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/conf%2Froutes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf%2Froutes?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -330,7 +330,7 @@ GET  /-/last-e2e-test-email     controllers.DebugTestController.showLastE2eTestE\n GET  /-/num-e2e-test-emails-sent controllers.DebugTestController.numE2eTestEmailSent(siteId: Int)\n GET  /-/log-test-error          controllers.DebugTestController.logTestError(metrApiKey: Option[String])\n GET  /-/log-funny-messages      controllers.DebugTestController.logFunnyLogMessages()\n-GET  /-/page-top-score          controllers.DebugTestController.showPagePopularityStats(pageId)\n+GET  /-/page-top-score          controllers.DebugTestController.showPagePopularityStats(pageId, scoreAlg: Option[Int])\n GET  /-/ws-state                controllers.DebugTestController.showPubSubSubscribers(siteId: Option[Int])\n GET  /-/ws-state-all-sites      controllers.DebugTestController.showWebSocketClientsAllSites()\n "
    },
    {
      "sha": "aac374b69ce7bd5c10a11946d34b282272376343",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/docs%2Fmaybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/docs%2Fmaybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Fmaybe-do-later.txt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -41,6 +41,13 @@ post A is-answer-to post Q (could be many answers), multireplies, here.\n table  post_rels_t  to link to flagged posts or user accounts.\n Why? See <./tyworld.adoc>, the Flag Pages and Posts section.\n \n+[do_it_votes]\n+Optionally, use separate Do-It and Do-Not votes, to show if one wants\n+to implement an idea or not — in addition to Like votes. Sometimes,\n+a feature request / idea might be well researched & make sense,\n+and it's good to Like it, although for reasons the poster couldn't\n+have known about, Do-Not vote.\n+\n [pat_rels_t]  Rename & change post_actions3  to  pat_rels_t, and store\n votes and AssignedTo there.\n "
    },
    {
      "sha": "203366f9b66c934471801f3a0208717487616aac",
      "filename": "docs/tests-map.txt",
      "status": "modified",
      "additions": 21,
      "deletions": 14,
      "changes": 35,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/docs%2Ftests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/docs%2Ftests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs%2Ftests-map.txt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -673,26 +673,33 @@ topics -\n           - promote-demote-by-staff-join-leave-chats.2br.test.ts  TyTE2E5H3GFRVK\n     in category:\n             - move-posts-pin-delete.2br.d  TyTMOPOPINDEL.TyTPININCAT\n-  close -\n-    close:  page-type-question-closed.2browsers.test.ts\n-    can leave bottom comment afterwards:  page-type-question-closed.2browsers.test.ts\n-    can reply afterwards:  page-type-question-closed.2browsers.test.ts\n-  problems -\n-  questions -\n-    answer own:  page-type-question-closed.2browsers.test.ts\n-    cannot answer others:  page-type-question-closed.2browsers.test.ts\n+  close:\n+    close,\n+    can leave bottom comment afterwards,\n+    can reply afterwards:\n+            - page-type-question-closed.2br.d  TyTPATYQUESTCLOSD\n+  discussions:\n+            - page-type-discussion-progress.1br.d  TyTPATYDISC\n+  ideas,\n+  doing status (planned/started/done):\n+            - page-type-idea-statuses-comments.2br.d  TyTPATYIDEA\n+  problems:\n+  solved status (planned/started/fixed):\n+            - page-type-problem-statuses.2br.d  TyT602AKK73\n+  questions:\n+    answer own:\n+            - page-type-question-closed.2br.d  TyTPATYQUESTCLOSD\n+    cannot answer others:\n+            - page-type-question-closed.2br.d  TyTPATYQUESTCLOSD\n     click-scroll to answer:\n-    clear answer:  page-type-question-closed.2browsers.test.ts\n+    clear answer:\n+            - page-type-question-closed.2br.d  TyTPATYQUESTCLOSD\n     delete the answer post, question becomes unsolved: [2JPKBW0]\n     move answer post to other page —> question unsolved: BUG?\n     staff accepts answer:\n           - modn-from-disc-page-review-after.2browsers.test.ts  TyTE2E603RKG4.TyTE2E50ARMS\n-  implement idea:\n-    cycle planned/done/pending:\n-  to-do:\n-    cycle done/pending:\n   info pages:\n-          - page-type-info-page.test.ts  TyTE2E503MKTR3\n+          - page-type-info-page.1br.d  TyTE2E503MKTR3\n   report:\n   bump topic, so first in category topic list:\n           - api-upsert-pages.2browsers.test.ts  TyT602FKUDLSV"
    },
    {
      "sha": "4a3db7d770ce4f6ee11286fba884a7882580cd91",
      "filename": "lock.sbt",
      "status": "modified",
      "additions": 19,
      "deletions": 20,
      "changes": 39,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/lock.sbt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/lock.sbt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/lock.sbt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -6,20 +6,20 @@ Compile / dependencyOverrides ++= {\n     Seq.empty\n   } else {\n     Seq(\n-      \"ch.qos.logback\" % \"logback-classic\" % \"1.3.4\",\n-      \"ch.qos.logback\" % \"logback-core\" % \"1.3.4\",\n-      \"com.auth0\" % \"java-jwt\" % \"3.19.3\",\n+      \"ch.qos.logback\" % \"logback-classic\" % \"1.3.6\",\n+      \"ch.qos.logback\" % \"logback-core\" % \"1.3.6\",\n+      \"com.auth0\" % \"java-jwt\" % \"4.4.0\",\n       \"com.carrotsearch\" % \"hppc\" % \"0.7.1\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.14.0\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.14.0\",\n-      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.14.0\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-annotations\" % \"2.15.1\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.15.1\",\n+      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.15.1\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-cbor\" % \"2.11.4\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-smile\" % \"2.8.11\",\n       \"com.fasterxml.jackson.dataformat\" % \"jackson-dataformat-yaml\" % \"2.8.11\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jdk8\" % \"2.11.4\",\n       \"com.fasterxml.jackson.datatype\" % \"jackson-datatype-jsr310\" % \"2.11.4\",\n       \"com.fasterxml.jackson.module\" % \"jackson-module-parameter-names\" % \"2.11.4\",\n-      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.14.0\",\n+      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.12\" % \"2.15.1\",\n       \"com.github.ben-manes.caffeine\" % \"caffeine\" % \"2.8.8\",\n       \"com.github.ben-manes.caffeine\" % \"jcache\" % \"2.8.8\",\n       \"com.github.etaty\" % \"rediscala_2.12\" % \"1.9.0\",\n@@ -41,7 +41,7 @@ Compile / dependencyOverrides ++= {\n       \"com.lambdaworks\" % \"scrypt\" % \"1.4.0\",\n       \"com.squareup.okhttp3\" % \"okhttp\" % \"3.9.0\",\n       \"com.squareup.okio\" % \"okio\" % \"1.13.0\",\n-      \"com.sun.mail\" % \"javax.mail\" % \"1.6.2\",\n+      \"com.sun.mail\" % \"javax.mail\" % \"1.5.6\",\n       \"com.tdunning\" % \"t-digest\" % \"3.2\",\n       \"com.thoughtworks.paranamer\" % \"paranamer\" % \"2.8\",\n       \"com.typesafe\" % \"config\" % \"1.4.2\",\n@@ -63,9 +63,8 @@ Compile / dependencyOverrides ++= {\n       \"com.typesafe.play\" % \"play-cache_2.12\" % \"2.8.18\",\n       \"com.typesafe.play\" % \"play-caffeine-cache_2.12\" % \"2.8.18\",\n       \"com.typesafe.play\" % \"play-exceptions\" % \"2.8.18\",\n-      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.3\",\n-      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.3\",\n-      \"com.typesafe.play\" % \"play-logback_2.12\" % \"2.8.18\",\n+      \"com.typesafe.play\" % \"play-functional_2.12\" % \"2.9.4\",\n+      \"com.typesafe.play\" % \"play-json_2.12\" % \"2.9.4\",\n       \"com.typesafe.play\" % \"play-server_2.12\" % \"2.8.18\",\n       \"com.typesafe.play\" % \"play-streams_2.12\" % \"2.8.18\",\n       \"com.typesafe.play\" % \"play-ws-standalone-json_2.12\" % \"2.1.10\",\n@@ -76,7 +75,7 @@ Compile / dependencyOverrides ++= {\n       \"com.typesafe.play\" % \"shaded-asynchttpclient\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"shaded-oauth\" % \"2.1.10\",\n       \"com.typesafe.play\" % \"twirl-api_2.12\" % \"1.5.1\",\n-      \"com.zaxxer\" % \"HikariCP\" % \"4.0.3\",\n+      \"com.zaxxer\" % \"HikariCP\" % \"5.0.1\",\n       \"commons-beanutils\" % \"commons-beanutils\" % \"1.9.4\",\n       \"commons-codec\" % \"commons-codec\" % \"1.15\",\n       \"commons-collections\" % \"commons-collections\" % \"3.2.2\",\n@@ -88,7 +87,7 @@ Compile / dependencyOverrides ++= {\n       \"dev.paseto\" % \"jpaseto-gson\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-impl\" % \"0.7.0\",\n       \"dev.paseto\" % \"jpaseto-sodium\" % \"0.7.0\",\n-      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.12\",\n+      \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.18\",\n       \"io.dropwizard.metrics\" % \"metrics-healthchecks\" % \"4.2.9\",\n       \"io.jaegertracing\" % \"jaeger-client\" % \"0.35.5\",\n       \"io.jaegertracing\" % \"jaeger-core\" % \"0.35.5\",\n@@ -113,7 +112,7 @@ Compile / dependencyOverrides ++= {\n       \"javax.cache\" % \"cache-api\" % \"1.1.1\",\n       \"javax.inject\" % \"javax.inject\" % \"1\",\n       \"joda-time\" % \"joda-time\" % \"2.10.10\",\n-      \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.2\",\n+      \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.3\",\n       \"net.sf.jopt-simple\" % \"jopt-simple\" % \"5.0.2\",\n       \"nl.grons\" % \"metrics4-scala_2.12\" % \"4.2.9\",\n       \"nu.validator.htmlparser\" % \"htmlparser\" % \"1.4\",\n@@ -140,7 +139,7 @@ Compile / dependencyOverrides ++= {\n       \"org.apache.lucene\" % \"lucene-spatial3d\" % \"7.7.3\",\n       \"org.apache.lucene\" % \"lucene-suggest\" % \"7.7.3\",\n       \"org.apache.thrift\" % \"libthrift\" % \"0.12.0\",\n-      \"org.apache.tika\" % \"tika-core\" % \"2.6.0\",\n+      \"org.apache.tika\" % \"tika-core\" % \"2.8.0\",\n       \"org.apache.tuweni\" % \"tuweni-bytes\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-crypto\" % \"0.10.0\",\n       \"org.apache.tuweni\" % \"tuweni-io\" % \"0.10.0\",\n@@ -163,7 +162,7 @@ Compile / dependencyOverrides ++= {\n       \"org.elasticsearch.plugin\" % \"transport-netty4-client\" % \"6.8.23\",\n       \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\",\n       \"org.hdrhistogram\" % \"HdrHistogram\" % \"2.1.9\",\n-      \"org.jsoup\" % \"jsoup\" % \"1.15.3\",\n+      \"org.jsoup\" % \"jsoup\" % \"1.16.1\",\n       \"org.lz4\" % \"lz4-java\" % \"1.8.0\",\n       \"org.osgi\" % \"org.osgi.service.component.annotations\" % \"1.4.0\",\n       \"org.ow2.asm\" % \"asm\" % \"5.0.3\",\n@@ -172,18 +171,18 @@ Compile / dependencyOverrides ++= {\n       \"org.ow2.asm\" % \"asm-tree\" % \"5.0.3\",\n       \"org.ow2.asm\" % \"asm-util\" % \"5.0.3\",\n       \"org.owasp.encoder\" % \"encoder\" % \"1.2.3\",\n-      \"org.postgresql\" % \"postgresql\" % \"42.4.2\",\n+      \"org.postgresql\" % \"postgresql\" % \"42.5.4\",\n       \"org.reactivestreams\" % \"reactive-streams\" % \"1.0.3\",\n       \"org.scala-lang.modules\" % \"scala-java8-compat_2.12\" % \"0.9.1\",\n       \"org.scala-lang.modules\" % \"scala-parser-combinators_2.12\" % \"1.1.2\",\n       \"org.scala-lang.modules\" % \"scala-xml_2.12\" % \"1.2.0\",\n       \"org.scala-stm\" % \"scala-stm_2.12\" % \"0.9.1\",\n-      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.14\",\n+      \"org.scalactic\" % \"scalactic_2.12\" % \"3.2.16\",\n       \"org.slf4j\" % \"jcl-over-slf4j\" % \"1.7.36\",\n       \"org.slf4j\" % \"jul-to-slf4j\" % \"1.7.36\",\n-      \"org.slf4j\" % \"slf4j-api\" % \"2.0.3\",\n+      \"org.slf4j\" % \"slf4j-api\" % \"2.0.7\",\n       \"org.yaml\" % \"snakeyaml\" % \"1.17\"\n     )\n   }\n }\n-// LIBRARY_DEPENDENCIES_HASH 9c29eae137c2e8bc9bcec13c074e2e4a18fe20f2\n+// LIBRARY_DEPENDENCIES_HASH a4c4bf8e20217ab288b7f32276dc87b6943e7e10"
    },
    {
      "sha": "7f82f5ff3800172ebd40ec29f2f901f23fe14d22",
      "filename": "node_modules",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/node_modules?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1 +1 @@\n-Subproject commit 7416991ff9802e58f324f6a3798c73315675d888\n+Subproject commit 7f82f5ff3800172ebd40ec29f2f901f23fe14d22"
    },
    {
      "sha": "9f64757884934d6d84386d088c65757f7707b928",
      "filename": "package.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/package.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/package.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/package.json?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -17,8 +17,8 @@\n   },\n   \"dependencies\": {\n     \"@types/core-js\": \"^2.5.5\",\n-    \"@types/keymaster\": \"=1.6.28\",\n-    \"@types/lodash\": \"^4.14.172\",\n+    \"@types/keymaster\": \"1.6.28\",\n+    \"@types/lodash\": \"^4.14.194\",\n     \"@types/react\": \"=16.8.2\",\n     \"@types/react-dom\": \"=16.8.0\",\n     \"@webscopeio/react-textarea-autocomplete\": \"4.7.3\",\n@@ -76,7 +76,7 @@\n     \"sync-request\": \"^6.1.0\",\n     \"ts-node\": \"^10.9.1\",\n     \"typescript\": \"^4.4.2\",\n-    \"uglify-js\": \"^3.14.1\"\n+    \"uglify-js\": \"^3.17.4\"\n   },\n   \"greenkeeper\": {\n     \"ignore\": ["
    },
    {
      "sha": "e818c6271949a56b1b3e44448d7c9b15dffb5955",
      "filename": "project/Dependencies.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/project%2FDependencies.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/project%2FDependencies.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/project%2FDependencies.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -20,7 +20,7 @@ object ProjectDirectory {\n object Dependencies {\n \n   object Play {\n-    val json = \"com.typesafe.play\" %% \"play-json\" % \"2.9.3\"\n+    val json = \"com.typesafe.play\" %% \"play-json\" % \"2.9.4\"\n   }\n \n   object Libs {\n@@ -39,7 +39,7 @@ object Dependencies {\n     // supports listener-notify.\n     // https://stackoverflow.com/questions/21632243/\n     //        how-do-i-get-asynchronous-event-driven-listen-notify-support-in-java-using-a-p\n-    val postgresqlJbcdClient = \"org.postgresql\" % \"postgresql\" % \"42.4.2\"\n+    val postgresqlJbcdClient = \"org.postgresql\" % \"postgresql\" % \"42.5.4\"\n \n     // Database migrations.\n     val flywaydb = \"org.flywaydb\" % \"flyway-core\" % \"5.0.7\"   // scala-steward:off\n@@ -62,11 +62,11 @@ object Dependencies {\n \n     // Does v1.25 recognize .woff and .woff2 file extensions? Then can remove\n     // extra checks in module ty-core. [5AKR20]\n-    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"2.6.0\"\n+    val apacheTika = \"org.apache.tika\" % \"tika-core\" % \"2.8.0\"\n \n-    val jsoup = \"org.jsoup\" % \"jsoup\" % \"1.15.3\"\n+    val jsoup = \"org.jsoup\" % \"jsoup\" % \"1.16.1\"\n \n-    val jacksonModuleScala = \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.14.0\"\n+    val jacksonModuleScala = \"com.fasterxml.jackson.module\" %% \"jackson-module-scala\" % \"2.15.1\"\n \n     // ScribeJava, an OAuth lib, also works for OIDC (OpenID Connect).\n     // ScribeJava is listed by Microsoft as compatible with Azure,\n@@ -96,20 +96,20 @@ object Dependencies {\n     app_1      | SLF4J: Ignoring binding found at [jar:file:/home/owner/.cache/coursier/v1/https/repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.2.11/logback-classic-1.2.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n     app_1      | SLF4J: See http://www.slf4j.org/codes.html#ignoredBindings for an explanation.\n     */\n-    val logbackClassic = \"ch.qos.logback\" % \"logback-classic\" % \"1.3.4\"\n+    val logbackClassic = \"ch.qos.logback\" % \"logback-classic\" % \"1.3.6\"\n \n     // https://mvnrepository.com/artifact/ch.qos.logback/logback-core\n     // 1.3.x is for Java EE, 1.4.x is for Jakarta (which I don't think we use), otherwise identical.\n-    val logbackCore = \"ch.qos.logback\" % \"logback-core\" % \"1.3.4\"\n+    val logbackCore = \"ch.qos.logback\" % \"logback-core\" % \"1.3.6\"\n \n     // Docs: https://github.com/logstash/logstash-logback-encoder/tree/logstash-logback-encoder-4.9\n-    val logstashLogbackEncoder = \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.2\"\n+    val logstashLogbackEncoder = \"net.logstash.logback\" % \"logstash-logback-encoder\" % \"7.3\"\n     //\"org.kurochan\" %% \"logback-stackdriver-logging\" % \"0.0.1\",\n \n \n     // ----- Metrics, tracing\n \n-    val metricsCore = \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.12\"\n+    val metricsCore = \"io.dropwizard.metrics\" % \"metrics-core\" % \"4.2.18\"\n \n     // Deprecated. SHOULD migrate to OpenTelemetry, they say, https://opentelemetry.io/.\n     // 1.8.1 exists now.\n@@ -138,7 +138,7 @@ object Dependencies {\n     //\n     // Let's use Java-JWT. It's well-known and its readme has a simple decoding example.\n     // Repo: https://github.com/auth0/java-jwt\n-    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"3.19.3\"\n+    val auth0JavaJwt = \"com.auth0\" % \"java-jwt\" % \"4.4.0\"\n \n \n     // ----- PASETO tokens\n@@ -169,8 +169,8 @@ object Dependencies {\n \n     // ----- Test\n \n-    val scalactic = \"org.scalactic\" %% \"scalactic\" % \"3.2.14\"\n-    val scalaTest = \"org.scalatest\" %% \"scalatest\" % \"3.2.14\" % \"test\"\n+    val scalactic = \"org.scalactic\" %% \"scalactic\" % \"3.2.16\"\n+    val scalaTest = \"org.scalatest\" %% \"scalatest\" % \"3.2.16\" % \"test\"\n     val scalaTestPlusPlay = \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"5.1.0\" % Test\n \n     // Don't use, migrate to ScalaTest instead, some day."
    },
    {
      "sha": "6426bbb9c991c3f65871496e2128aa0258a08733",
      "filename": "relchans/tyse-v0-dev",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-dev?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1 +1 @@\n-Subproject commit d8064c64f8dfaf1bc0d4345601672af2467a6c22\n+Subproject commit 6426bbb9c991c3f65871496e2128aa0258a08733"
    },
    {
      "sha": "e647ef87b5c247a988c9f57c73cbdca3a412eade",
      "filename": "relchans/tyse-v0-regular",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/relchans%2Ftyse-v0-regular?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1 +1 @@\n-Subproject commit 27b8c8ea64e5fd3ce784bfb58f124ed88bcb9e30\n+Subproject commit e647ef87b5c247a988c9f57c73cbdca3a412eade"
    },
    {
      "sha": "2dee8e906696e630db8647116cbf15de96c14118",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/s%2Frun-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/s%2Frun-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s%2Frun-e2e-tests.sh?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -475,11 +475,11 @@ function runAllE2eTests {\n   $r s/wdio --only flag-member-block-agree.2browsers $args\n   $r s/wdio --only flag-guest-block-agree.2browsers $args\n \n-  $r s/wdio --only page-type-discussion-progress $args\n-  $r s/wdio --only page-type-idea-statuses-comments $args\n-  $r s/wdio --only page-type-problem-statuses $args\n-  $r s/wdio --only page-type-question-closed.2browsers $args\n-  $r s/wdio --only page-type-info-page $args\n+  $r s/wdio-7 --only page-type-discussion-progress.1br.d --cd -i $args\n+  $r s/wdio-7 --only page-type-idea-statuses-comments.2br.d --cd -i $args\n+  $r s/wdio-7 --only page-type-problem-statuses.2br.d --cd -i $args\n+  $r s/wdio-7 --only page-type-question-closed.2br.d --cd -i $args\n+  $r s/wdio-7 --only page-type-info-page.1br.d --cd -i $args\n \n   $r s/wdio --only search-public-basic.2browsers $args\n   $r s/wdio --only search-private-chat.2browsers $args"
    },
    {
      "sha": "d5864ea743dfe24141a5e3078cbe794db472a9d0",
      "filename": "tests/app/debiki/TextAndHtmlTest.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Fdebiki%2FTextAndHtmlTest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Fdebiki%2FTextAndHtmlTest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2FTextAndHtmlTest.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -233,6 +233,8 @@ class TextAndHtmlTest extends AnyFreeSpec with must.Matchers {\n       val pubId = \"123abc\"\n       val canonicalHostnameStr = Some(dummyHostname)\n       val allHostnames: Seq[String] = canonicalHostnameStr.toSeq\n+      val status = SiteStatus.Active\n+      val featureFlags = \"\"\n     }\n \n     val maker: TextAndHtmlMaker = new TextAndHtmlMaker(site, nashorn = null)"
    },
    {
      "sha": "b9801dbef2ae1045db435ee1af493e2db4e4988c",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Fdebiki%2Fdao%2FDaoAppSuite.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -81,6 +81,8 @@ class DaoAppSuite(\n     val pubId = \"testsiteid\"\n     val canonicalHostnameStr = Some(\"forum.example.com\")\n     val allHostnames: Seq[String] = canonicalHostnameStr.toSeq\n+    val status = SiteStatus.Active\n+    val featureFlags = \"\"\n   }\n \n   lazy val textAndHtmlMaker = new TextAndHtmlMaker(dummyNoSite, context.nashorn)"
    },
    {
      "sha": "1342b1e5eff28b7967cf65a23c8f586888e12861",
      "filename": "tests/app/talkyard/server/linkpreviews/LinkPreviewRendererSpec.scala",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRendererSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fapp%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRendererSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fapp%2Ftalkyard%2Fserver%2Flinkpreviews%2FLinkPreviewRendererSpec.scala?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -26,23 +26,23 @@ import com.debiki.core._\n \n class LinkPreviewRendererSpec extends AnyFreeSpec with must.Matchers {\n \n-  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlCdnPrefix: Opt[St],\n+  def tweakLinks(htmlSt: St, toHttps: Bo, uploadsUrlUgcPrefix: Opt[St],\n         followLinksSkipNoopener: Bo = false,\n         siteId_unused: SiteId = NoSiteId, sitePubId_unused: PubSiteId = \"\"): St = {\n     LinkPreviewRenderer.tweakLinks(htmlSt, toHttps,\n-          uploadsUrlCdnPrefix = uploadsUrlCdnPrefix,\n+          uploadsUrlUgcPrefix = uploadsUrlUgcPrefix,\n           followLinksSkipNoopener = followLinksSkipNoopener,\n           siteId_unused = siteId_unused, sitePubId_unused = sitePubId_unused)\n   }\n \n \n   \"LinkPreviewRenderer.tweakLinks can\" - {\n     \"leave non-links as is\" in {\n-      tweakLinks(\"\", toHttps = true, uploadsUrlCdnPrefix = None) mustBe \"\"\n-      tweakLinks(\"abc\", toHttps = true, uploadsUrlCdnPrefix = None) mustBe \"abc\"\n+      tweakLinks(\"\", toHttps = true, uploadsUrlUgcPrefix = None) mustBe \"\"\n+      tweakLinks(\"abc\", toHttps = true, uploadsUrlUgcPrefix = None) mustBe \"abc\"\n \n       // Not a link — just plain text:\n-      tweakLinks(\"http://ex.co\", toHttps = true, uploadsUrlCdnPrefix = None\n+      tweakLinks(\"http://ex.co\", toHttps = true, uploadsUrlUgcPrefix = None\n             ) mustBe \"http://ex.co\"\n     }\n \n@@ -61,10 +61,10 @@ class LinkPreviewRendererSpec extends AnyFreeSpec with must.Matchers {\n       }\n \n       tweakLinks(htmlWithLink(false), toHttps = true,\n-            uploadsUrlCdnPrefix = None) mustBe htmlWithLink(true)\n+            uploadsUrlUgcPrefix = None) mustBe htmlWithLink(true)\n \n       tweakLinks(htmlWithLink(false), toHttps = false,\n-            uploadsUrlCdnPrefix = None) mustBe htmlWithLink(false)\n+            uploadsUrlUgcPrefix = None) mustBe htmlWithLink(false)\n     }\n \n \n@@ -77,61 +77,61 @@ class LinkPreviewRendererSpec extends AnyFreeSpec with must.Matchers {\n       }\n \n       tweakLinks(htmlWithUplLink(https = false), toHttps = false,\n-            uploadsUrlCdnPrefix = None) mustBe htmlWithUplLink(false)\n+            uploadsUrlUgcPrefix = None) mustBe htmlWithUplLink(false)\n \n       tweakLinks(htmlWithUplLink(https = false), toHttps = false,\n-            uploadsUrlCdnPrefix = Some(\"https://cdn.ex.co/-/u/\")\n+            uploadsUrlUgcPrefix = Some(\"https://cdn.ex.co/-/u/\")\n             ) mustBe htmlWithUplLink(false, \"https://cdn.ex.co/-/u/\")\n     }\n \n \n     \"add rel='noopener' to <a>\" in {\n       tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"noopener\">title</a>\"\"\"\n \n       tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"nofollow\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"nofollow noopener\">title</a>\"\"\"\n \n       tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"zznoopener\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"zznoopener noopener\">title</a>\"\"\"\n \n       tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"noopenerzz\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"noopenerzz noopener\">title</a>\"\"\"\n \n       tweakLinks(\"\"\"<a href=\"https://ex.co\" target=\"_blank\" rel=\"noOPEner\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"noOPEner noopener\">title</a>\"\"\"\n     }\n \n \n     \"can skip add rel='noopener'\" in {\n       val aHref = \"\"\"<a href=\"https://ex.co\" target=\"_blank\">title</a>\"\"\"\n-      tweakLinks(aHref, toHttps = true, uploadsUrlCdnPrefix = None,\n+      tweakLinks(aHref, toHttps = true, uploadsUrlUgcPrefix = None,\n             followLinksSkipNoopener = true) mustBe aHref\n     }\n \n \n     \"both rel='noopener' and https\" in {\n       tweakLinks(\"\"\"<a href=\"http://ex.co\" target=\"_blank\">title</a>\"\"\",\n-          toHttps = true, uploadsUrlCdnPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n+          toHttps = true, uploadsUrlUgcPrefix = None) mustBe o\"\"\"<a href=\"https://ex.co\"\n                        target=\"_blank\" rel=\"noopener\">title</a>\"\"\"\n     }\n \n     \"both rel='noopener' and CDN\" in {\n       tweakLinks(\"\"\"<a href=\"/-/u/3/a/bc/defg1234.doc\" target=\"_blank\">lnk</a>\"\"\",\n-            toHttps = true, uploadsUrlCdnPrefix = Some(\"https://cdn2.co/-/u/\"),\n+            toHttps = true, uploadsUrlUgcPrefix = Some(\"https://cdn2.co/-/u/\"),\n             ) mustBe o\"\"\"<a href=\"https://cdn2.co/-/u/3/a/bc/defg1234.doc\"\n                            target=\"_blank\" rel=\"noopener\">lnk</a>\"\"\"\n     }\n \n \n     \"add rel='noopener' to <area>\" in {\n       tweakLinks(\"\"\"<area href=\"https://ex.co\" target=\"_blank\"> abc\"\"\",\n-            toHttps = true, uploadsUrlCdnPrefix = None\n+            toHttps = true, uploadsUrlUgcPrefix = None\n             ) mustBe o\"\"\"<area href=\"https://ex.co\" target=\"_blank\" rel=\"noopener\"> abc\"\"\"\n     }\n   }"
    },
    {
      "sha": "9887a45cf1aa4b3cc593f8603901bd3364dc976b",
      "filename": "tests/e2e-wdio7/package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fpackage.json",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fpackage.json",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fpackage.json?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -14,7 +14,7 @@\n     \"@wdio/spec-reporter\": \"^7.20.3\",\n     \"@wdio/types\": \"^7.20.3\",\n     \"axios\": \"^0.26.1\",\n-    \"chromedriver\": \"^112.0.0\",\n+    \"chromedriver\": \"^113.0.0\",\n     \"paseto.js\": \"^0.1.7\",\n     \"ts-node\": \"^10.9.1\",\n     \"wdio-chromedriver-service\": \"^7.3.2\""
    },
    {
      "sha": "4dac16d2243b8162bfdccb87075aad3cc3fc9c0a",
      "filename": "tests/e2e-wdio7/specs/page-type-discussion-progress.1br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-discussion-progress.1br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-discussion-progress.1br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-discussion-progress.1br.d.e2e.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -27,7 +27,7 @@ const bottomCommentOneText = 'bottomCommentOneText';\n const bottomCommentTwoText = 'bottomCommentTwoText';\n \n \n-describe(\"Page type discussion, and progress comments\", () => {\n+describe(\"page-type-discussion-progress.1br.d  TyTPATYDISC\", () => {\n \n   it(\"Initialize people\", async () => {\n     everyonesBrowsers = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "1b04aa7c1528f2354d9c01aabb293e661a6f553d",
      "filename": "tests/e2e-wdio7/specs/page-type-idea-statuses-comments.2br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-idea-statuses-comments.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-idea-statuses-comments.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-idea-statuses-comments.2br.d.e2e.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -32,7 +32,7 @@ const bottomCommentOneText = 'bottomCommentOneText';\n const bottomCommentTwoText = 'bottomCommentTwoText';\n \n \n-describe(\"Page statuses and bottom comments\", () => {\n+describe(\"page-type-idea-statuses-comments.2br.d  TyTPATYIDEA\", () => {\n \n   it(\"Initialize people\", async () => {\n     brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "e08e3570b80ab1cb718042bb771d3f2c5dde1ee7",
      "filename": "tests/e2e-wdio7/specs/page-type-info-page.1br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-info-page.1br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-info-page.1br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-info-page.1br.d.e2e.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -26,7 +26,7 @@ const infoPageEditedBody = 'infoPageEditedBody';\n const infoPageEd2Body = 'infoPageEd2Body';\n \n \n-describe(\"page-type-info-page.test.ts  TyTE2E503MKTR3\", () => {\n+describe(\"page-type-info-page.1br.d  TyTE2E503MKTR3\", () => {\n \n   it(\"Initialize people\", () => {\n     const brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "54e2ed8c892c8181c6572627e3aad61a31d41847",
      "filename": "tests/e2e-wdio7/specs/page-type-problem-statuses.2br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-problem-statuses.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-problem-statuses.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-problem-statuses.2br.d.e2e.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -33,7 +33,7 @@ const bottomCommentTwoText = 'bottomCommentTwoText';\n const okaySolutionPostNr = 6;\n const optimalSolutionPostNr = 7;\n \n-describe(\"Page statuses and bottom comments  TyT602AKK73\", () => {\n+describe(\"page-type-problem-statuses.2br.d  TyT602AKK73\", () => {\n \n   it(\"Initialize people\", async () => {\n     everyonesBrowsers = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "9c7f3aabaab80bdc67a048801c98e66271321a7d",
      "filename": "tests/e2e-wdio7/specs/page-type-question-closed.2br.d.e2e.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-question-closed.2br.d.e2e.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-question-closed.2br.d.e2e.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fspecs%2Fpage-type-question-closed.2br.d.e2e.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -31,7 +31,7 @@ const closeEventPostNr = 4;\n const reopenEventPostNr = 7;\n \n \n-describe(\"Page type question\", () => {\n+describe(`page-type-question-closed.2br.d  TyTPATYQUESTCLOSD`, () => {\n \n   it(\"Initialize people\", () => {\n     const brA = new TyE2eTestBrowser(wdioBrowserA, 'brA');"
    },
    {
      "sha": "64807fd1e04151fb7a53c029905ca7cc9be8bc31",
      "filename": "tests/e2e-wdio7/utils/ty-e2e-test-browser.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Futils%2Fty-e2e-test-browser.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -769,19 +769,23 @@ export class TyE2eTestBrowser {\n         return me;\n       },\n \n-      waitAndGetMyself: async (): Pr<TestMyself> => {\n-        return await this.waitUntil(async () => {\n-          return await this.#br.execute(function() {\n+      waitAndGetMyself: async (): Pr<TestMyself | false> => {\n+        let result: TestMyself;\n+        await this.waitUntil(async () => {\n+          const meOrFalse = await this.#br.execute(function() {\n             try {\n               return window['debiki2'].ReactStore.getMe();\n             }\n             catch {\n               return false;\n             }\n           });\n+          if (meOrFalse) result = meOrFalse;\n+          return !!meOrFalse;\n         }, {\n           message: `Waiting for theStore.me  TyT6503MES63Z`\n-        }) as TestMyself;\n+        });\n+        return result;\n       },\n     }\n "
    },
    {
      "sha": "f056ad44a629bd02299e6774f0ba7b1687ed8a6b",
      "filename": "tests/e2e-wdio7/yarn.lock",
      "status": "modified",
      "additions": 1414,
      "deletions": 1044,
      "changes": 2458,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fyarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e-wdio7%2Fyarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e-wdio7%2Fyarn.lock?ref=25662a0c4636710c47d760f2cb5a09037198f494"
    },
    {
      "sha": "a3c041564851f2b23358132ab72fb90350c6aca5",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/tests%2Fe2e%2Futils%2Fpages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests%2Fe2e%2Futils%2Fpages-for.ts?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -723,18 +723,22 @@ export class TyE2eTestBrowser {\n       },\n \n       waitAndGetMyself: (): TestMyself => {\n-        return this.waitUntil(() => {\n-          return this.#br.execute(function() {\n+        let result: TestMyself;\n+        this.waitUntil(() => {\n+          const meOrFalse = this.#br.execute(function() {\n             try {\n-              return window['debiki2'].ReactStore.getMe();\n+              return window['debiki2'].ReactStore.getMe() as TestMyself;\n             }\n             catch {\n               return false;\n             }\n           });\n+          if (meOrFalse) result = meOrFalse;\n+          return !!meOrFalse;\n         }, {\n           message: `Waiting for theStore.me  TyT6503MES63Z`\n-        }) as TestMyself;\n+        });\n+        return result;\n       },\n     }\n "
    },
    {
      "sha": "fa55bb27227ef6e980f9544eda6a9eecdb55e847",
      "filename": "vendors/jars",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/vendors%2Fjars?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1 +1 @@\n-Subproject commit 29e6951aeac13269f934ea109da6a90c9b146e0d\n+Subproject commit fa55bb27227ef6e980f9544eda6a9eecdb55e847"
    },
    {
      "sha": "08ec52d0760d44fad362493ae39ed05d6fa7a1a7",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -1 +1 @@\n-v0.2023.005\n+v0.2023.006"
    },
    {
      "sha": "60c235fc08a00b3f828d9b2a9d2320da3518df92",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/25662a0c4636710c47d760f2cb5a09037198f494/yarn.lock",
      "raw_url": "https://github.com/debiki/talkyard/raw/25662a0c4636710c47d760f2cb5a09037198f494/yarn.lock",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/yarn.lock?ref=25662a0c4636710c47d760f2cb5a09037198f494",
      "patch": "@@ -139,20 +139,20 @@\n     \"@types/minimatch\" \"*\"\n     \"@types/node\" \"*\"\n \n-\"@types/keymaster@=1.6.28\":\n+\"@types/keymaster@1.6.28\":\n   version \"1.6.28\"\n   resolved \"https://registry.yarnpkg.com/@types/keymaster/-/keymaster-1.6.28.tgz#093fc6fe49deff4ee17d36935a49230edb1c935f\"\n-  integrity sha1-CT/G/kne/07hfTaTWkkjDtsck18=\n+  integrity sha512-7flr9FvHAtOSmER1ABhAkw7mD5WOKT+QKw4Rt+b8cvB6ahfls3zO7hNvN5hMZOU0dritzltfpQlq35ThvR/zzQ==\n \n \"@types/linkify-it@*\":\n   version \"3.0.0\"\n   resolved \"https://registry.yarnpkg.com/@types/linkify-it/-/linkify-it-3.0.0.tgz#c0ca4c253664492dbf47a646f31cfd483a6bbc95\"\n   integrity sha512-x9OaQQTb1N2hPZ/LWJsqushexDvz7NgzuZxiRmZio44WPuolTZNHDBCrOxCzRVOMwamJRO2dWax5NbygOf1OTQ==\n \n-\"@types/lodash@^4.14.172\":\n-  version \"4.14.172\"\n-  resolved \"https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.172.tgz#aad774c28e7bfd7a67de25408e03ee5a8c3d028a\"\n-  integrity sha512-/BHF5HAx3em7/KkzVKm3LrsD6HZAXuXO1AJZQ3cRRBZj4oHZDviWPYu0aEplAqDFNHZPW6d3G7KN+ONcCCC7pw==\n+\"@types/lodash@^4.14.194\":\n+  version \"4.14.194\"\n+  resolved \"https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.194.tgz#b71eb6f7a0ff11bff59fc987134a093029258a76\"\n+  integrity sha512-r22s9tAS7imvBt2lyHC9B8AGwWnXaYb1tY09oyLkXDs4vArpYJzw09nj8MLx5VfciBPGIb+ZwG0ssYnEPJxn/g==\n \n \"@types/markdown-it@^12.2.3\":\n   version \"12.2.3\"\n@@ -4679,10 +4679,10 @@ uglify-js@^3.0.5:\n     commander \"~2.12.1\"\n     source-map \"~0.6.1\"\n \n-uglify-js@^3.14.1:\n-  version \"3.14.1\"\n-  resolved \"https://registry.yarnpkg.com/uglify-js/-/uglify-js-3.14.1.tgz#e2cb9fe34db9cb4cf7e35d1d26dfea28e09a7d06\"\n-  integrity sha512-JhS3hmcVaXlp/xSo3PKY5R0JqKs5M3IV+exdLHW99qKvKivPO4Z8qbej6mte17SOPqAOVMjt/XGgWacnFSzM3g==\n+uglify-js@^3.17.4:\n+  version \"3.17.4\"\n+  resolved \"https://registry.yarnpkg.com/uglify-js/-/uglify-js-3.17.4.tgz#61678cf5fa3f5b7eb789bb345df29afb8257c22c\"\n+  integrity sha512-T9q82TJI9e/C1TAxYvfb16xO120tMVFZrGA3f9/P4424DNu6ypK103y0GPFVa17yotwSyZW5iYXgjYHkGrJW/g==\n \n uglify-to-browserify@~1.0.0:\n   version \"1.0.2\""
    }
  ]
}
